
mb_working_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ca20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e08  0801cbf0  0801cbf0  0002cbf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d9f8  0801d9f8  00030280  2**0
                  CONTENTS
  4 .ARM          00000008  0801d9f8  0801d9f8  0002d9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801da00  0801da00  00030280  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801da00  0801da00  0002da00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801da04  0801da04  0002da04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000280  20000000  0801da08  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e26c  20000280  0801dc88  00030280  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2001e4ec  0801dc88  0003e4ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030280  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004996b  00000000  00000000  000302b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008d5d  00000000  00000000  00079c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002a98  00000000  00000000  00082978  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002680  00000000  00000000  00085410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034a30  00000000  00000000  00087a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030b64  00000000  00000000  000bc4c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b049  00000000  00000000  000ed024  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f806d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba1c  00000000  00000000  001f80e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000280 	.word	0x20000280
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cbd8 	.word	0x0801cbd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000284 	.word	0x20000284
 800020c:	0801cbd8 	.word	0x0801cbd8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calculateCRC>:
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"


uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	827b      	strh	r3, [r7, #18]

	for (int i = 0; i < len + 2; i += 2) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e03c      	b.n	8001008 <calculateCRC+0x90>
		shifter = 0x8000;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	82fb      	strh	r3, [r7, #22]
		if (i == len) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d102      	bne.n	8000fa2 <calculateCRC+0x2a>
			c = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	e00e      	b.n	8000fc0 <calculateCRC+0x48>
		} else {
			c = data[i+1] << 8 | data[i];
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	82bb      	strh	r3, [r7, #20]
		}
		do {
			carry = crc & 0x8000;
 8000fc0:	8a7b      	ldrh	r3, [r7, #18]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fca:	817b      	strh	r3, [r7, #10]
			crc <<= 1;
 8000fcc:	8a7b      	ldrh	r3, [r7, #18]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	827b      	strh	r3, [r7, #18]
			if(c & shifter) crc++;
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8afb      	ldrh	r3, [r7, #22]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <calculateCRC+0x6c>
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	827b      	strh	r3, [r7, #18]
			if(carry) crc ^= 0x1021;
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <calculateCRC+0x7e>
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	827b      	strh	r3, [r7, #18]
			shifter >>= 1;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	82fb      	strh	r3, [r7, #22]
		} while(shifter);
 8000ffc:	8afb      	ldrh	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1de      	bne.n	8000fc0 <calculateCRC+0x48>
	for (int i = 0; i < len + 2; i += 2) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3302      	adds	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3302      	adds	r3, #2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbbd      	blt.n	8000f8e <calculateCRC+0x16>
	}
	return crc;
 8001012:	8a7b      	ldrh	r3, [r7, #18]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <EnableMotor>:

osStatus_t EnableMotor(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800104a:	2306      	movs	r3, #6
 800104c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f957 	bl	8001310 <WriteCommand>
 8001062:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001082:	230f      	movs	r3, #15
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001088:	f107 0218 	add.w	r2, r7, #24
 800108c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f93b 	bl	8001310 <WriteCommand>
 800109a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 80010a2:	2341      	movs	r3, #65	; 0x41
 80010a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 80010a8:	1d3a      	adds	r2, r7, #4
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f9cd 	bl	8001450 <ReadCommand>
 80010b6:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b37      	cmp	r3, #55	; 0x37
 80010bc:	d104      	bne.n	80010c8 <EnableMotor+0xa8>
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d101      	bne.n	80010c8 <EnableMotor+0xa8>
		status = osOK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b08a      	sub	sp, #40	; 0x28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010e8:	2360      	movs	r3, #96	; 0x60
 80010ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010fe:	f107 0208 	add.w	r2, r7, #8
 8001102:	f107 011c 	add.w	r1, r7, #28
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f900 	bl	8001310 <WriteCommand>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001114:	4618      	mov	r0, r3
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 8001130:	237a      	movs	r3, #122	; 0x7a
 8001132:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0e1b      	lsrs	r3, r3, #24
 800113a:	b2db      	uxtb	r3, r3
 800113c:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	141b      	asrs	r3, r3, #16
 8001142:	b2db      	uxtb	r3, r3
 8001144:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	121b      	asrs	r3, r3, #8
 800114a:	b2db      	uxtb	r3, r3
 800114c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	f107 011c 	add.w	r1, r7, #28
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f8d5 	bl	8001310 <WriteCommand>
 8001166:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001168:	2360      	movs	r3, #96	; 0x60
 800116a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001180:	233f      	movs	r3, #63	; 0x3f
 8001182:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	f107 011c 	add.w	r1, r7, #28
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f8bd 	bl	8001310 <WriteCommand>
 8001196:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800119e:	2340      	movs	r3, #64	; 0x40
 80011a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80011a4:	2300      	movs	r3, #0
 80011a6:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 80011b0:	230f      	movs	r3, #15
 80011b2:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 80011b4:	f107 0208 	add.w	r2, r7, #8
 80011b8:	f107 011c 	add.w	r1, r7, #28
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f8a5 	bl	8001310 <WriteCommand>
 80011c6:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b08c      	sub	sp, #48	; 0x30
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011ea:	2381      	movs	r3, #129	; 0x81
 80011ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	0e1b      	lsrs	r3, r3, #24
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	141b      	asrs	r3, r3, #16
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	121b      	asrs	r3, r3, #8
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001216:	f107 0210 	add.w	r2, r7, #16
 800121a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f874 	bl	8001310 <WriteCommand>
 8001228:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 8001230:	2383      	movs	r3, #131	; 0x83
 8001232:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0e1b      	lsrs	r3, r3, #24
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	141b      	asrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	121b      	asrs	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800125c:	f107 0210 	add.w	r2, r7, #16
 8001260:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f851 	bl	8001310 <WriteCommand>
 800126e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001270:	2360      	movs	r3, #96	; 0x60
 8001272:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001276:	2384      	movs	r3, #132	; 0x84
 8001278:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0e1b      	lsrs	r3, r3, #24
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	141b      	asrs	r3, r3, #16
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	121b      	asrs	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80012a2:	f107 0210 	add.w	r2, r7, #16
 80012a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f82e 	bl	8001310 <WriteCommand>
 80012b4:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3730      	adds	r7, #48	; 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f8b3 	bl	8001450 <ReadCommand>
 80012ea:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[8] +
 80012ec:	7d3b      	ldrb	r3, [r7, #20]
 80012ee:	461a      	mov	r2, r3
			(rx_buffer_read[9] << 8) +
 80012f0:	7d7b      	ldrb	r3, [r7, #21]
 80012f2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[8] +
 80012f4:	441a      	add	r2, r3
			(rx_buffer_read[10] << 16) +
 80012f6:	7dbb      	ldrb	r3, [r7, #22]
 80012f8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[9] << 8) +
 80012fa:	441a      	add	r2, r3
			(rx_buffer_read[11] << 24);
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[10] << 16) +
 8001300:	441a      	add	r2, r3
	*position = rx_buffer_read[8] +
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]

	return status;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 8001308:	4618      	mov	r0, r3
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b092      	sub	sp, #72	; 0x48
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t byte_stream_write[14] = { 0 };
 8001322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	819a      	strh	r2, [r3, #12]

	uint8_t dma_buffer[20] = { 0 };
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

	byte_stream_write[0] = 0x90;			// DLE
 8001340:	2390      	movs	r3, #144	; 0x90
 8001342:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_write[1] = 0x02;			// STX
 8001346:	2302      	movs	r3, #2
 8001348:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_write[2] = 0x68;			// Write Object
 800134c:	2368      	movs	r3, #104	; 0x68
 800134e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8001352:	2304      	movs	r3, #4
 8001354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	byte_stream_write[4] = 0x01;			// Node ID
 8001358:	2301      	movs	r3, #1
 800135a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_write[5] = command[1];		// Index Low Byte
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	785b      	ldrb	r3, [r3, #1]
 8001362:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	byte_stream_write[6] = command[0];		// Index High byte
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	byte_stream_write[7] = 0x00;			// Subindex of object
 800136e:	2300      	movs	r3, #0
 8001370:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	byte_stream_write[8] = data[3];			// Data - low byte
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	78db      	ldrb	r3, [r3, #3]
 8001378:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	byte_stream_write[9] = data[2];			// Data
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	byte_stream_write[10] = data[1];		// Data
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	byte_stream_write[11] = data[0];		// Data - high byte
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80013a8:	6810      	ldr	r0, [r2, #0]
 80013aa:	6851      	ldr	r1, [r2, #4]
 80013ac:	c303      	stmia	r3!, {r0, r1}
 80013ae:	8912      	ldrh	r2, [r2, #8]
 80013b0:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	crc_calc = calculateCRC(crc_data_array, 10);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	210a      	movs	r1, #10
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fdda 	bl	8000f78 <calculateCRC>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 80013ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 80013d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	//HAL_UART_DMAPause(&huart4);
	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 80013e2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80013e6:	2314      	movs	r3, #20
 80013e8:	220e      	movs	r2, #14
 80013ea:	4818      	ldr	r0, [pc, #96]	; (800144c <WriteCommand+0x13c>)
 80013ec:	f00c faba 	bl	800d964 <HAL_UART_Transmit>
//	HAL_UART_DMAResume(&huart4);
	HAL_UART_Receive(&huart4, dma_buffer, 20, 10);
 80013f0:	f107 0120 	add.w	r1, r7, #32
 80013f4:	230a      	movs	r3, #10
 80013f6:	2214      	movs	r2, #20
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <WriteCommand+0x13c>)
 80013fa:	f00c fb44 	bl	800da86 <HAL_UART_Receive>
//	osDelay(10);
//	HAL_UART_DMAPause(&huart4);
	memcpy(rx_buffer, dma_buffer, 20);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	461d      	mov	r5, r3
 8001402:	f107 0420 	add.w	r4, r7, #32
 8001406:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001408:	6028      	str	r0, [r5, #0]
 800140a:	6069      	str	r1, [r5, #4]
 800140c:	60aa      	str	r2, [r5, #8]
 800140e:	60eb      	str	r3, [r5, #12]
 8001410:	6820      	ldr	r0, [r4, #0]
 8001412:	6128      	str	r0, [r5, #16]
//	HAL_UART_DMAStop(&huart4);

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	3307      	adds	r3, #7
 8001418:	781a      	ldrb	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	3306      	adds	r3, #6
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4313      	orrs	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	3305      	adds	r3, #5
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	4313      	orrs	r3, r2
 800142c:	b2da      	uxtb	r2, r3
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3304      	adds	r3, #4
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4313      	orrs	r3, r2
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d101      	bne.n	8001440 <WriteCommand+0x130>
		status = osOK;
 800143c:	2300      	movs	r3, #0
 800143e:	647b      	str	r3, [r7, #68]	; 0x44
	}

	return status;
 8001440:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 8001442:	4618      	mov	r0, r3
 8001444:	3748      	adds	r7, #72	; 0x48
 8001446:	46bd      	mov	sp, r7
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
 800144a:	bf00      	nop
 800144c:	20017ef8 	.word	0x20017ef8

08001450 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 8001450:	b580      	push	{r7, lr}
 8001452:	b090      	sub	sp, #64	; 0x40
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 800145a:	f04f 33ff 	mov.w	r3, #4294967295
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 8001460:	f107 0310 	add.w	r3, r7, #16
 8001464:	221e      	movs	r2, #30
 8001466:	2100      	movs	r1, #0
 8001468:	4618      	mov	r0, r3
 800146a:	f019 f90c 	bl	801a686 <memset>

	byte_stream_read[0] = 0x90;				// DLE
 800146e:	2390      	movs	r3, #144	; 0x90
 8001470:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	byte_stream_read[1] = 0x02;				// STX
 8001474:	2302      	movs	r3, #2
 8001476:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	byte_stream_read[2] = 0x60;				// Read Object
 800147a:	2360      	movs	r3, #96	; 0x60
 800147c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 8001480:	2302      	movs	r3, #2
 8001482:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	byte_stream_read[4] = 0x01;				// Node ID
 8001486:	2301      	movs	r3, #1
 8001488:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_read[5] = command[1];		// Index Low Byte
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	785b      	ldrb	r3, [r3, #1]
 8001490:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_read[6] = command[0];		// Index High byte
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_read[7] = 0x00;				// Subindex of object
 800149c:	2300      	movs	r3, #0
 800149e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 80014a2:	f107 0308 	add.w	r3, r7, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	f107 0232 	add.w	r2, r7, #50	; 0x32
 80014b4:	6810      	ldr	r0, [r2, #0]
 80014b6:	6018      	str	r0, [r3, #0]
 80014b8:	8892      	ldrh	r2, [r2, #4]
 80014ba:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	877b      	strh	r3, [r7, #58]	; 0x3a
	crc_calc = calculateCRC(crc_data_array, 6);
 80014c0:	f107 0308 	add.w	r3, r7, #8
 80014c4:	2106      	movs	r1, #6
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fd56 	bl	8000f78 <calculateCRC>
 80014cc:	4603      	mov	r3, r0
 80014ce:	877b      	strh	r3, [r7, #58]	; 0x3a

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 80014d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 80014d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b29b      	uxth	r3, r3
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39

	HAL_UART_DMAPause(&huart4);
 80014e4:	4820      	ldr	r0, [pc, #128]	; (8001568 <ReadCommand+0x118>)
 80014e6:	f00c fcc1 	bl	800de6c <HAL_UART_DMAPause>
	//HAL_UART_DMAStop(&huart4);
	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 80014ea:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80014ee:	230a      	movs	r3, #10
 80014f0:	220a      	movs	r2, #10
 80014f2:	481d      	ldr	r0, [pc, #116]	; (8001568 <ReadCommand+0x118>)
 80014f4:	f00c fa36 	bl	800d964 <HAL_UART_Transmit>
	//osDelay(10);
	HAL_UART_DMAResume(&huart4);
 80014f8:	481b      	ldr	r0, [pc, #108]	; (8001568 <ReadCommand+0x118>)
 80014fa:	f00c fd0b 	bl	800df14 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 30);
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	221e      	movs	r2, #30
 8001504:	4619      	mov	r1, r3
 8001506:	4818      	ldr	r0, [pc, #96]	; (8001568 <ReadCommand+0x118>)
 8001508:	f00c fc2c 	bl	800dd64 <HAL_UART_Receive_DMA>
	osDelay(10);
 800150c:	200a      	movs	r0, #10
 800150e:	f014 fc7b 	bl	8015e08 <osDelay>
	HAL_UART_DMAPause(&huart4);
 8001512:	4815      	ldr	r0, [pc, #84]	; (8001568 <ReadCommand+0x118>)
 8001514:	f00c fcaa 	bl	800de6c <HAL_UART_DMAPause>
	memcpy(rx_buffer, dma_buffer, 20);
 8001518:	f107 0310 	add.w	r3, r7, #16
 800151c:	2214      	movs	r2, #20
 800151e:	4619      	mov	r1, r3
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f019 f8a5 	bl	801a670 <memcpy>
	HAL_UART_DMAStop(&huart4);
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <ReadCommand+0x118>)
 8001528:	f00c fd3a 	bl	800dfa0 <HAL_UART_DMAStop>

	osDelay(1);
 800152c:	2001      	movs	r0, #1
 800152e:	f014 fc6b 	bl	8015e08 <osDelay>
	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	3307      	adds	r3, #7
 8001536:	781a      	ldrb	r2, [r3, #0]
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	3306      	adds	r3, #6
 800153c:	781b      	ldrb	r3, [r3, #0]
 800153e:	4313      	orrs	r3, r2
 8001540:	b2da      	uxtb	r2, r3
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	3305      	adds	r3, #5
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	4313      	orrs	r3, r2
 800154a:	b2da      	uxtb	r2, r3
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	3304      	adds	r3, #4
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	4313      	orrs	r3, r2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <ReadCommand+0x10e>
		status = osOK;
 800155a:	2300      	movs	r3, #0
 800155c:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return status;
 800155e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 8001560:	4618      	mov	r0, r3
 8001562:	3740      	adds	r7, #64	; 0x40
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20017ef8 	.word	0x20017ef8

0800156c <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8001574:	2303      	movs	r3, #3
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e01c      	b.n	80015b4 <_gps_search_start+0x48>
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3b02      	subs	r3, #2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2247      	movs	r2, #71	; 0x47
 8001586:	4293      	cmp	r3, r2
 8001588:	d111      	bne.n	80015ae <_gps_search_start+0x42>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3b01      	subs	r3, #1
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2247      	movs	r2, #71	; 0x47
 8001596:	4293      	cmp	r3, r2
 8001598:	d109      	bne.n	80015ae <_gps_search_start+0x42>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2241      	movs	r2, #65	; 0x41
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d102      	bne.n	80015ae <_gps_search_start+0x42>
			    return i+1;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	e008      	b.n	80015c0 <_gps_search_start+0x54>
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f240 32a1 	movw	r2, #929	; 0x3a1
 80015ba:	4293      	cmp	r3, r2
 80015bc:	dddd      	ble.n	800157a <_gps_search_start+0xe>
			}
	return 0;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	0000      	movs	r0, r0
	...

080015d0 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]


	if (data[22] == 'N' || data[22] == 'S'){
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3316      	adds	r3, #22
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b4e      	cmp	r3, #78	; 0x4e
 80015e2:	d005      	beq.n	80015f0 <_parse_data+0x20>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3316      	adds	r3, #22
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b53      	cmp	r3, #83	; 0x53
 80015ec:	f040 81e7 	bne.w	80019be <_parse_data+0x3ee>

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e00c      	b.n	8001610 <_parse_data+0x40>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	440b      	add	r3, r1
 8001604:	3a30      	subs	r2, #48	; 0x30
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b45      	cmp	r3, #69	; 0x45
 8001614:	ddef      	ble.n	80015f6 <_parse_data+0x26>


		dev->data.hour = data[1]*10 + data[2];
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	3302      	adds	r3, #2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	609a      	str	r2, [r3, #8]
		dev->data.minute = data[3]*10 + data[4];
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	3303      	adds	r3, #3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	461a      	mov	r2, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3304      	adds	r3, #4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60da      	str	r2, [r3, #12]
		dev->data.second = data[5]*10 + data[6];
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3305      	adds	r3, #5
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	461a      	mov	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3306      	adds	r3, #6
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	330b      	adds	r3, #11
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	330c      	adds	r3, #12
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	b2da      	uxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	751a      	strb	r2, [r3, #20]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	330d      	adds	r3, #13
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff62 	bl	8000564 <__aeabi_i2d>
 80016a0:	a3cb      	add	r3, pc, #812	; (adr r3, 80019d0 <_parse_data+0x400>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ffc7 	bl	8000638 <__aeabi_dmul>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	4625      	mov	r5, r4
 80016b0:	461c      	mov	r4, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	330e      	adds	r3, #14
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff53 	bl	8000564 <__aeabi_i2d>
 80016be:	a3c6      	add	r3, pc, #792	; (adr r3, 80019d8 <_parse_data+0x408>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffb8 	bl	8000638 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fdfc 	bl	80002cc <__adddf3>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4625      	mov	r5, r4
 80016da:	461c      	mov	r4, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3310      	adds	r3, #16
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff3e 	bl	8000564 <__aeabi_i2d>
 80016e8:	a3bd      	add	r3, pc, #756	; (adr r3, 80019e0 <_parse_data+0x410>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ffa3 	bl	8000638 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f7fe fde7 	bl	80002cc <__adddf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	460c      	mov	r4, r1
 8001702:	4625      	mov	r5, r4
 8001704:	461c      	mov	r4, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3311      	adds	r3, #17
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff29 	bl	8000564 <__aeabi_i2d>
 8001712:	a3b5      	add	r3, pc, #724	; (adr r3, 80019e8 <_parse_data+0x418>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff8e 	bl	8000638 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4620      	mov	r0, r4
 8001722:	4629      	mov	r1, r5
 8001724:	f7fe fdd2 	bl	80002cc <__adddf3>
 8001728:	4603      	mov	r3, r0
 800172a:	460c      	mov	r4, r1
 800172c:	4625      	mov	r5, r4
 800172e:	461c      	mov	r4, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3312      	adds	r3, #18
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff14 	bl	8000564 <__aeabi_i2d>
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4bab      	ldr	r3, [pc, #684]	; (80019f0 <_parse_data+0x420>)
 8001742:	f7fe ff79 	bl	8000638 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe fdbd 	bl	80002cc <__adddf3>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4625      	mov	r5, r4
 8001758:	461c      	mov	r4, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3313      	adds	r3, #19
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe feff 	bl	8000564 <__aeabi_i2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4ba2      	ldr	r3, [pc, #648]	; (80019f4 <_parse_data+0x424>)
 800176c:	f7fe ff64 	bl	8000638 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7fe fda8 	bl	80002cc <__adddf3>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4625      	mov	r5, r4
 8001782:	461c      	mov	r4, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3314      	adds	r3, #20
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feea 	bl	8000564 <__aeabi_i2d>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7fe fd98 	bl	80002cc <__adddf3>
 800179c:	4603      	mov	r3, r0
 800179e:	460c      	mov	r4, r1
 80017a0:	4618      	mov	r0, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <_parse_data+0x428>)
 80017aa:	f7ff f86f 	bl	800088c <__aeabi_ddiv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff f9ef 	bl	8000b98 <__aeabi_d2uiz>
 80017ba:	4602      	mov	r2, r0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3319      	adds	r3, #25
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	331a      	adds	r3, #26
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	771a      	strb	r2, [r3, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	331b      	adds	r3, #27
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe febd 	bl	8000564 <__aeabi_i2d>
 80017ea:	a379      	add	r3, pc, #484	; (adr r3, 80019d0 <_parse_data+0x400>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe ff22 	bl	8000638 <__aeabi_dmul>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	4625      	mov	r5, r4
 80017fa:	461c      	mov	r4, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	331c      	adds	r3, #28
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feae 	bl	8000564 <__aeabi_i2d>
 8001808:	a373      	add	r3, pc, #460	; (adr r3, 80019d8 <_parse_data+0x408>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe ff13 	bl	8000638 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fd57 	bl	80002cc <__adddf3>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	4625      	mov	r5, r4
 8001824:	461c      	mov	r4, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	331e      	adds	r3, #30
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe99 	bl	8000564 <__aeabi_i2d>
 8001832:	a36b      	add	r3, pc, #428	; (adr r3, 80019e0 <_parse_data+0x410>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fefe 	bl	8000638 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fd42 	bl	80002cc <__adddf3>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4625      	mov	r5, r4
 800184e:	461c      	mov	r4, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	331f      	adds	r3, #31
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe84 	bl	8000564 <__aeabi_i2d>
 800185c:	a362      	add	r3, pc, #392	; (adr r3, 80019e8 <_parse_data+0x418>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fee9 	bl	8000638 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fd2d 	bl	80002cc <__adddf3>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	4625      	mov	r5, r4
 8001878:	461c      	mov	r4, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3320      	adds	r3, #32
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe6f 	bl	8000564 <__aeabi_i2d>
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <_parse_data+0x420>)
 800188c:	f7fe fed4 	bl	8000638 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fd18 	bl	80002cc <__adddf3>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	4625      	mov	r5, r4
 80018a2:	461c      	mov	r4, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3321      	adds	r3, #33	; 0x21
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe5a 	bl	8000564 <__aeabi_i2d>
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <_parse_data+0x424>)
 80018b6:	f7fe febf 	bl	8000638 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7fe fd03 	bl	80002cc <__adddf3>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	4625      	mov	r5, r4
 80018cc:	461c      	mov	r4, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3322      	adds	r3, #34	; 0x22
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe45 	bl	8000564 <__aeabi_i2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f7fe fcf3 	bl	80002cc <__adddf3>
 80018e6:	4603      	mov	r3, r0
 80018e8:	460c      	mov	r4, r1
 80018ea:	4618      	mov	r0, r3
 80018ec:	4621      	mov	r1, r4
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <_parse_data+0x428>)
 80018f4:	f7fe ffca 	bl	800088c <__aeabi_ddiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	4618      	mov	r0, r3
 80018fe:	4621      	mov	r1, r4
 8001900:	f7ff f94a 	bl	8000b98 <__aeabi_d2uiz>
 8001904:	4602      	mov	r2, r0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	621a      	str	r2, [r3, #32]

		dev->data.fix = data[38];
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3328      	adds	r3, #40	; 0x28
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4413      	add	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3329      	adds	r3, #41	; 0x29
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4413      	add	r3, r2
 800192e:	b2da      	uxtb	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	332b      	adds	r3, #43	; 0x2b
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4413      	add	r3, r2
 8001944:	461a      	mov	r2, r3
 8001946:	0091      	lsls	r1, r2, #2
 8001948:	461a      	mov	r2, r3
 800194a:	460b      	mov	r3, r1
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	b29a      	uxth	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	332d      	adds	r3, #45	; 0x2d
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	0089      	lsls	r1, r1, #2
 800195e:	440b      	add	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	4413      	add	r3, r2
 8001966:	b29a      	uxth	r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	332e      	adds	r3, #46	; 0x2e
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	84da      	strh	r2, [r3, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3330      	adds	r3, #48	; 0x30
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4413      	add	r3, r2
 8001986:	461a      	mov	r2, r3
 8001988:	0091      	lsls	r1, r2, #2
 800198a:	461a      	mov	r2, r3
 800198c:	460b      	mov	r3, r1
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	b29a      	uxth	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3331      	adds	r3, #49	; 0x31
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4619      	mov	r1, r3
 800199e:	0089      	lsls	r1, r1, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3332      	adds	r3, #50	; 0x32
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e004      	b.n	80019c8 <_parse_data+0x3f8>
		dev->data.fix = 0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	00000000 	.word	0x00000000
 80019d4:	416312d0 	.word	0x416312d0
 80019d8:	00000000 	.word	0x00000000
 80019dc:	412e8480 	.word	0x412e8480
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40f86a00 	.word	0x40f86a00
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40c38800 	.word	0x40c38800
 80019f0:	408f4000 	.word	0x408f4000
 80019f4:	40590000 	.word	0x40590000
 80019f8:	40180000 	.word	0x40180000

080019fc <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(dev->uart_bus);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fac9 	bl	800dfa0 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6858      	ldr	r0, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	fb03 f302 	mul.w	r3, r3, r2
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <gps_dma_init+0x44>)
 8001a22:	4413      	add	r3, r2
 8001a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f00c f99b 	bl	800dd64 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00c fa6e 	bl	800df14 <HAL_UART_DMAResume>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20008aa4 	.word	0x20008aa4

08001a44 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAPause(dev->uart_bus);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00c fa0b 	bl	800de6c <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	fb03 f302 	mul.w	r3, r3, r2
 8001a64:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <gps_read_sensor+0x8c>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fd7f 	bl	800156c <_gps_search_start>
 8001a6e:	60f8      	str	r0, [r7, #12]
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d016      	beq.n	8001aa4 <gps_read_sensor+0x60>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2346      	movs	r3, #70	; 0x46
 8001a7e:	fb03 f302 	mul.w	r3, r3, r2
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <gps_read_sensor+0x90>)
 8001a84:	1898      	adds	r0, r3, r2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a90:	fb03 f302 	mul.w	r3, r3, r2
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <gps_read_sensor+0x8c>)
 8001a96:	441a      	add	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2246      	movs	r2, #70	; 0x46
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f018 fde6 	bl	801a670 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00c fa33 	bl	800df14 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2346      	movs	r3, #70	; 0x46
 8001ab6:	fb03 f302 	mul.w	r3, r3, r2
 8001aba:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <gps_read_sensor+0x90>)
 8001abc:	4413      	add	r3, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fd85 	bl	80015d0 <_parse_data>
 8001ac6:	4603      	mov	r3, r0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20008aa4 	.word	0x20008aa4
 8001ad4:	20008908 	.word	0x20008908

08001ad8 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	1d3b      	adds	r3, r7, #4
 8001ae2:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 8001ae4:	4a27      	ldr	r2, [pc, #156]	; (8001b84 <init_coeff+0xac>)
 8001ae6:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001aea:	4611      	mov	r1, r2
 8001aec:	22f8      	movs	r2, #248	; 0xf8
 8001aee:	4618      	mov	r0, r3
 8001af0:	f018 fdbe 	bl	801a670 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 8001af4:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001af8:	4a23      	ldr	r2, [pc, #140]	; (8001b88 <init_coeff+0xb0>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	4611      	mov	r1, r2
 8001afe:	23f8      	movs	r3, #248	; 0xf8
 8001b00:	461a      	mov	r2, r3
 8001b02:	f018 fdb5 	bl	801a670 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 8001b06:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b0a:	4a20      	ldr	r2, [pc, #128]	; (8001b8c <init_coeff+0xb4>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	4611      	mov	r1, r2
 8001b10:	23f8      	movs	r3, #248	; 0xf8
 8001b12:	461a      	mov	r2, r3
 8001b14:	f018 fdac 	bl	801a670 <memcpy>
    const double coeff3[POLY_DEG+1] = {-0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000201990562985250001943459993472837845, 0.000000000000000000000000000000000000000000000000000000000000000000000000000000001332599818626039970897811441571004127947, -0.000000000000000000000000000000000000000000000000000000000000000000000000000002625348546949809937078012282342904976127723, -0.000000000000000000000000000000000000000000000000000000000000000000000000000223727864461865003520661187439024600181539219, 0.000000000000000000000000000000000000000000000000000000000000000000000004464195222526840028513420957475197151241051746408, 0.000000000000000000000000000000000000000000000000000000000000000000002338983169198669858723678827906894927557002243871494, -0.000000000000000000000000000000000000000000000000000000000000000006912415560184160441989718978305120773037706865961972544, -0.000000000000000000000000000000000000000000000000000000000000010413732827001500036314706101719078643859924602095189421307, 0.000000000000000000000000000000000000000000000000000000000004189409028079520254470994017178321308860178893443967174876530, 0.000000000000000000000000000000000000000000000000000000025614354369933901616993599242485723226984402693215380015245905534, 0.000000000000000000000000000000000000000000000000000017039378494863200873938147795841770460467212292535660899037298363934, -0.000000000000000000000000000000000000000000000000037663076028431798602138861411457291136403355675991877262622158500780707, -0.000000000000000000000000000000000000000000000072815926705972796875656513613119001981820983531065325656503321875845255363, 0.000000000000000000000000000000000000000000018447501014541900178687391898845575613515392446088612401903946378298107262645, 0.000000000000000000000000000000000000000176710198155264991511205517529206838994318948056972059471650682635785295572654346, 0.000000000000000000000000000000000000071835866121803100252160509096347173382186418680093242878723576924609687822100523993, -0.000000000000000000000000000000000372820534942092984478403688654843534473731172425786204417355750076042081268496098051327, -0.000000000000000000000000000000252989602976263993127475788776422100805568474814989995701968345433265389187102987512967278, 0.000000000000000000000000000905170223509092071927497805678691252483018558288891743135588951403590113244795878344461925735, 0.000000000000000000000000194552177016366997577807228355801877291823980823471641161670560613928052107191035702271619811654, -0.000000000000000000002437371278037870091434718374663516278393545732460725671800379210640841165513847954571247100830078125, 0.000000000000000003555223129133779670528346764370006160828520346391329667867786668011831352487206459045410156250000000000, -0.000000000000002840735214777100016456280482905011509609210628574116341837907384615391492843627929687500000000000000000000, 0.000000000001463938313075189970311027401823124891380722978340145346010103821754455566406250000000000000000000000000000000, -0.000000000508757921832193008510020092773898023330580997480865335091948509216308593750000000000000000000000000000000000000, 0.000000119452175202401992986544132166470966183169366559013724327087402343750000000000000000000000000000000000000000000000, -0.000018465109600443501075908714348372541280696168541908264160156250000000000000000000000000000000000000000000000000000000, 0.001785007556170990035068757428859953506616875529289245605468750000000000000000000000000000000000000000000000000000000000, -0.101366848874935994162527208573010284453630447387695312500000000000000000000000000000000000000000000000000000000000000000, 3.838048220048389858050086331786587834358215332031250000000000000000000000000000000000000000000000000000000000000000000000, 3.453560767076920168250353526673279702663421630859375000000000000000000000000000000000000000000000000000000000000000000000};
 8001b18:	f107 0308 	add.w	r3, r7, #8
 8001b1c:	4a1c      	ldr	r2, [pc, #112]	; (8001b90 <init_coeff+0xb8>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	4611      	mov	r1, r2
 8001b22:	23f8      	movs	r3, #248	; 0xf8
 8001b24:	461a      	mov	r2, r3
 8001b26:	f018 fda3 	bl	801a670 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8001b2a:	1d3b      	adds	r3, r7, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	3340      	adds	r3, #64	; 0x40
 8001b30:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8001b34:	22f8      	movs	r2, #248	; 0xf8
 8001b36:	4618      	mov	r0, r3
 8001b38:	f018 fd9a 	bl	801a670 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001b44:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001b48:	22f8      	movs	r2, #248	; 0xf8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f018 fd90 	bl	801a670 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001b50:	1d3b      	adds	r3, r7, #4
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001b58:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001b5c:	22f8      	movs	r2, #248	; 0xf8
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f018 fd86 	bl	801a670 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001b6c:	f107 0108 	add.w	r1, r7, #8
 8001b70:	22f8      	movs	r2, #248	; 0xf8
 8001b72:	4618      	mov	r0, r3
 8001b74:	f018 fd7c 	bl	801a670 <memcpy>
}
 8001b78:	bf00      	nop
 8001b7a:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	0801cbf0 	.word	0x0801cbf0
 8001b88:	0801cce8 	.word	0x0801cce8
 8001b8c:	0801cde0 	.word	0x0801cde0
 8001b90:	0801ced8 	.word	0x0801ced8
 8001b94:	00000000 	.word	0x00000000

08001b98 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b9c:	ed2d 8b02 	vpush	{d8}
 8001ba0:	b083      	sub	sp, #12
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	6078      	str	r0, [r7, #4]
 8001ba6:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	f040 80cd 	bne.w	8001d4c <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d004      	beq.n	8001bc4 <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	785b      	ldrb	r3, [r3, #1]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	f040 80c4 	bne.w	8001d4c <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fcdd 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001bce:	a36c      	add	r3, pc, #432	; (adr r3, 8001d80 <compute_control_input+0x1e8>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe ffa2 	bl	8000b1c <__aeabi_dcmplt>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	f000 80b6 	beq.w	8001d4c <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001be6:	f083 0301 	eor.w	r3, r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	f000 80ad 	beq.w	8001d4c <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 8001bf2:	6878      	ldr	r0, [r7, #4]
 8001bf4:	f000 f913 	bl	8001e1e <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fa15 	bl	8002028 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001c04:	461d      	mov	r5, r3
 8001c06:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7fe fcba 	bl	8000588 <__aeabi_f2d>
 8001c14:	4603      	mov	r3, r0
 8001c16:	460c      	mov	r4, r1
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4623      	mov	r3, r4
 8001c1c:	4628      	mov	r0, r5
 8001c1e:	4631      	mov	r1, r6
 8001c20:	f7fe fd0a 	bl	8000638 <__aeabi_dmul>
 8001c24:	4603      	mov	r3, r0
 8001c26:	460c      	mov	r4, r1
 8001c28:	4698      	mov	r8, r3
 8001c2a:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7fe fca6 	bl	8000588 <__aeabi_f2d>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4620      	mov	r0, r4
 8001c42:	4629      	mov	r1, r5
 8001c44:	f7fe fcf8 	bl	8000638 <__aeabi_dmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	460c      	mov	r4, r1
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4623      	mov	r3, r4
 8001c50:	4640      	mov	r0, r8
 8001c52:	4649      	mov	r1, r9
 8001c54:	f7fe fb38 	bl	80002c8 <__aeabi_dsub>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	460c      	mov	r4, r1
 8001c5c:	4698      	mov	r8, r3
 8001c5e:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc8c 	bl	8000588 <__aeabi_f2d>
 8001c70:	a345      	add	r3, pc, #276	; (adr r3, 8001d88 <compute_control_input+0x1f0>)
 8001c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c76:	f7fe fb27 	bl	80002c8 <__aeabi_dsub>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	4620      	mov	r0, r4
 8001c80:	4629      	mov	r1, r5
 8001c82:	f7fe fcd9 	bl	8000638 <__aeabi_dmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	460c      	mov	r4, r1
 8001c8a:	461a      	mov	r2, r3
 8001c8c:	4623      	mov	r3, r4
 8001c8e:	4640      	mov	r0, r8
 8001c90:	4649      	mov	r1, r9
 8001c92:	f7fe fb19 	bl	80002c8 <__aeabi_dsub>
 8001c96:	4603      	mov	r3, r0
 8001c98:	460c      	mov	r4, r1
 8001c9a:	4625      	mov	r5, r4
 8001c9c:	461c      	mov	r4, r3
                + control_data->control_input);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7fe fc70 	bl	8000588 <__aeabi_f2d>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4620      	mov	r0, r4
 8001cae:	4629      	mov	r1, r5
 8001cb0:	f7fe fb0c 	bl	80002cc <__adddf3>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001cb8:	4618      	mov	r0, r3
 8001cba:	4621      	mov	r1, r4
 8001cbc:	f7fe ff8c 	bl	8000bd8 <__aeabi_d2f>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	edd3 7a00 	vldr	s15, [r3]
 8001ccc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd4:	f019 f944 	bl	801af60 <fminf>
 8001cd8:	eef0 7a40 	vmov.f32	s15, s0
 8001cdc:	eef0 0a67 	vmov.f32	s1, s15
 8001ce0:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001d78 <compute_control_input+0x1e0>
 8001ce4:	f019 f921 	bl	801af2a <fmaxf>
 8001ce8:	eef0 7a40 	vmov.f32	s15, s0
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f000 f944 	bl	8001f80 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	ed93 8a06 	vldr	s16, [r3, #24]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d0a:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001d7c <compute_control_input+0x1e4>
 8001d0e:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001d12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d1c:	eef0 0a47 	vmov.f32	s1, s14
 8001d20:	eeb0 0a67 	vmov.f32	s0, s15
 8001d24:	f019 f91c 	bl	801af60 <fminf>
 8001d28:	eef0 7a40 	vmov.f32	s15, s0
 8001d2c:	eef0 0a67 	vmov.f32	s1, s15
 8001d30:	eeb0 0a48 	vmov.f32	s0, s16
 8001d34:	f019 f8f9 	bl	801af2a <fmaxf>
 8001d38:	eef0 7a40 	vmov.f32	s15, s0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8001d42:	6839      	ldr	r1, [r7, #0]
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f993 	bl	8002070 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001d4a:	e00d      	b.n	8001d68 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f81f 	bl	8001d90 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001d5c:	6878      	ldr	r0, [r7, #4]
 8001d5e:	f000 f85e 	bl	8001e1e <evaluate_polyfit>
            compute_reference_error(control_data);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f960 	bl	8002028 <compute_reference_error>
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	ecbd 8b02 	vpop	{d8}
 8001d72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001d76:	bf00      	nop
 8001d78:	00000000 	.word	0x00000000
 8001d7c:	3c23d70a 	.word	0x3c23d70a
 8001d80:	9999999a 	.word	0x9999999a
 8001d84:	3fe19999 	.word	0x3fe19999
 8001d88:	e41d1d5e 	.word	0xe41d1d5e
 8001d8c:	3fdfc917 	.word	0x3fdfc917

08001d90 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f04f 0200 	mov.w	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f04f 0200 	mov.w	r2, #0
 8001da6:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f04f 0200 	mov.w	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
}
 8001db0:	bf00      	nop
 8001db2:	370c      	adds	r7, #12
 8001db4:	46bd      	mov	sp, r7
 8001db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dba:	4770      	bx	lr

08001dbc <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001dbc:	b590      	push	{r4, r7, lr}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f7ff ffe3 	bl	8001d90 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f04f 0200 	mov.w	r2, #0
 8001dd0:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f04f 0200 	mov.w	r2, #0
 8001dd8:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f7ff fe75 	bl	8001ad8 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e00d      	b.n	8001e10 <control_data_init+0x54>
        control_data->gains[i] = 0;
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	3305      	adds	r3, #5
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	441a      	add	r2, r3
 8001dfe:	f04f 0300 	mov.w	r3, #0
 8001e02:	f04f 0400 	mov.w	r4, #0
 8001e06:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	2b02      	cmp	r3, #2
 8001e14:	ddee      	ble.n	8001df4 <control_data_init+0x38>
    }
}
 8001e16:	bf00      	nop
 8001e18:	3714      	adds	r7, #20
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd90      	pop	{r4, r7, pc}

08001e1e <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8001e1e:	b5b0      	push	{r4, r5, r7, lr}
 8001e20:	b08a      	sub	sp, #40	; 0x28
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 8001e26:	f04f 0300 	mov.w	r3, #0
 8001e2a:	f04f 0400 	mov.w	r4, #0
 8001e2e:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 8001e32:	2300      	movs	r3, #0
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e00d      	b.n	8001e54 <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	3305      	adds	r3, #5
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	441a      	add	r2, r3
 8001e42:	f04f 0300 	mov.w	r3, #0
 8001e46:	f04f 0400 	mov.w	r4, #0
 8001e4a:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	3301      	adds	r3, #1
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	ddee      	ble.n	8001e38 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	f04f 0400 	mov.w	r4, #0
 8001e62:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e07b      	b.n	8001f64 <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fb89 	bl	8000588 <__aeabi_f2d>
 8001e76:	4604      	mov	r4, r0
 8001e78:	460d      	mov	r5, r1
 8001e7a:	697b      	ldr	r3, [r7, #20]
 8001e7c:	f1c3 031e 	rsb	r3, r3, #30
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb6f 	bl	8000564 <__aeabi_i2d>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	ec43 2b11 	vmov	d1, r2, r3
 8001e8e:	ec45 4b10 	vmov	d0, r4, r5
 8001e92:	f019 f89d 	bl	801afd0 <pow>
 8001e96:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3308      	adds	r3, #8
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	4413      	add	r3, r2
 8001eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001eb2:	f7fe fbc1 	bl	8000638 <__aeabi_dmul>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fa05 	bl	80002cc <__adddf3>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	460c      	mov	r4, r1
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3327      	adds	r3, #39	; 0x27
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4413      	add	r3, r2
 8001edc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ee4:	f7fe fba8 	bl	8000638 <__aeabi_dmul>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	460b      	mov	r3, r1
 8001eec:	4620      	mov	r0, r4
 8001eee:	4629      	mov	r1, r5
 8001ef0:	f7fe f9ec 	bl	80002cc <__adddf3>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	460c      	mov	r4, r1
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	3346      	adds	r3, #70	; 0x46
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f16:	f7fe fb8f 	bl	8000638 <__aeabi_dmul>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4620      	mov	r0, r4
 8001f20:	4629      	mov	r1, r5
 8001f22:	f7fe f9d3 	bl	80002cc <__adddf3>
 8001f26:	4603      	mov	r3, r0
 8001f28:	460c      	mov	r4, r1
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	3365      	adds	r3, #101	; 0x65
 8001f36:	00db      	lsls	r3, r3, #3
 8001f38:	4413      	add	r3, r2
 8001f3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f42:	f7fe fb79 	bl	8000638 <__aeabi_dmul>
 8001f46:	4603      	mov	r3, r0
 8001f48:	460c      	mov	r4, r1
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f52:	f7fe f9bb 	bl	80002cc <__adddf3>
 8001f56:	4603      	mov	r3, r0
 8001f58:	460c      	mov	r4, r1
 8001f5a:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3301      	adds	r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b1e      	cmp	r3, #30
 8001f68:	dd80      	ble.n	8001e6c <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001f6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001f6e:	f7fe fe33 	bl	8000bd8 <__aeabi_d2f>
 8001f72:	4602      	mov	r2, r0
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	615a      	str	r2, [r3, #20]
}
 8001f78:	bf00      	nop
 8001f7a:	3728      	adds	r7, #40	; 0x28
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bdb0      	pop	{r4, r5, r7, pc}

08001f80 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7fe fafb 	bl	8000588 <__aeabi_f2d>
 8001f92:	4603      	mov	r3, r0
 8001f94:	460c      	mov	r4, r1
 8001f96:	461a      	mov	r2, r3
 8001f98:	4623      	mov	r3, r4
 8001f9a:	a11f      	add	r1, pc, #124	; (adr r1, 8002018 <compute_antiwindup_boundaries+0x98>)
 8001f9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fa0:	f7fe f992 	bl	80002c8 <__aeabi_dsub>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	460c      	mov	r4, r1
 8001fa8:	4618      	mov	r0, r3
 8001faa:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8001fac:	a31c      	add	r3, pc, #112	; (adr r3, 8002020 <compute_antiwindup_boundaries+0xa0>)
 8001fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb2:	f7fe fb41 	bl	8000638 <__aeabi_dmul>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	460c      	mov	r4, r1
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4621      	mov	r1, r4
 8001fbe:	f7fe fe0b 	bl	8000bd8 <__aeabi_d2f>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001fc8:	ee00 3a10 	vmov	s0, r3
 8001fcc:	f018 ffad 	bl	801af2a <fmaxf>
 8001fd0:	eef0 7a40 	vmov.f32	s15, s0
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f7fe fad2 	bl	8000588 <__aeabi_f2d>
 8001fe4:	a30c      	add	r3, pc, #48	; (adr r3, 8002018 <compute_antiwindup_boundaries+0x98>)
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f7fe fdb5 	bl	8000b58 <__aeabi_dcmpgt>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d003      	beq.n	8001ffc <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f04f 0200 	mov.w	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	edd3 7a07 	vldr	s15, [r3, #28]
 8002002:	eef1 7a67 	vneg.f32	s15, s15
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	edc3 7a06 	vstr	s15, [r3, #24]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	bd90      	pop	{r4, r7, pc}
 8002014:	f3af 8000 	nop.w
 8002018:	7417f6de 	.word	0x7417f6de
 800201c:	4095dc93 	.word	0x4095dc93
 8002020:	47ae147b 	.word	0x47ae147b
 8002024:	3f747ae1 	.word	0x3f747ae1

08002028 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	edd3 7a05 	vldr	s15, [r3, #20]
 8002036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800203a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203e:	d504      	bpl.n	800204a <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 8002048:	e00a      	b.n	8002060 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	edd3 7a05 	vldr	s15, [r3, #20]
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	0000      	movs	r0, r0
	...

08002070 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	4618      	mov	r0, r3
 8002080:	f7fe fa82 	bl	8000588 <__aeabi_f2d>
 8002084:	a30c      	add	r3, pc, #48	; (adr r3, 80020b8 <check_apogee_approach_phase+0x48>)
 8002086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208a:	f7fe fd47 	bl	8000b1c <__aeabi_dcmplt>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8c1b      	ldrh	r3, [r3, #32]
 8002098:	3301      	adds	r3, #1
 800209a:	b29a      	uxth	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	8c1b      	ldrh	r3, [r3, #32]
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d903      	bls.n	80020b0 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 80020b0:	bf00      	nop
 80020b2:	3708      	adds	r7, #8
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	9999999a 	.word	0x9999999a
 80020bc:	3fb99999 	.word	0x3fb99999

080020c0 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 80020c8:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80020cc:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80020e8 <init_env+0x28>
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f000 f80d 	bl	80020f0 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 80020d6:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 f82c 	bl	8002138 <update_env>
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	47c5e680 	.word	0x47c5e680
 80020ec:	00000000 	.word	0x00000000

080020f0 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 80020f0:	b590      	push	{r4, r7, lr}
 80020f2:	b085      	sub	sp, #20
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	60f8      	str	r0, [r7, #12]
 80020f8:	ed87 0a02 	vstr	s0, [r7, #8]
 80020fc:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f7fe fa41 	bl	8000588 <__aeabi_f2d>
 8002106:	a30a      	add	r3, pc, #40	; (adr r3, 8002130 <calibrate_env+0x40>)
 8002108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210c:	f7fe f8de 	bl	80002cc <__adddf3>
 8002110:	4603      	mov	r3, r0
 8002112:	460c      	mov	r4, r1
 8002114:	4618      	mov	r0, r3
 8002116:	4621      	mov	r1, r4
 8002118:	f7fe fd5e 	bl	8000bd8 <__aeabi_d2f>
 800211c:	4602      	mov	r2, r0
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	68ba      	ldr	r2, [r7, #8]
 8002126:	601a      	str	r2, [r3, #0]
}
 8002128:	bf00      	nop
 800212a:	3714      	adds	r7, #20
 800212c:	46bd      	mov	sp, r7
 800212e:	bd90      	pop	{r4, r7, pc}
 8002130:	66666666 	.word	0x66666666
 8002134:	40711266 	.word	0x40711266

08002138 <update_env>:

void update_env(env_t *env, float T) {
 8002138:	b590      	push	{r4, r7, lr}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 8002144:	6838      	ldr	r0, [r7, #0]
 8002146:	f7fe fa1f 	bl	8000588 <__aeabi_f2d>
 800214a:	a317      	add	r3, pc, #92	; (adr r3, 80021a8 <update_env+0x70>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe f8bc 	bl	80002cc <__adddf3>
 8002154:	4603      	mov	r3, r0
 8002156:	460c      	mov	r4, r1
 8002158:	4618      	mov	r0, r3
 800215a:	4621      	mov	r1, r4
 800215c:	f7fe fd3c 	bl	8000bd8 <__aeabi_d2f>
 8002160:	4602      	mov	r2, r0
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fa0c 	bl	8000588 <__aeabi_f2d>
 8002170:	a30f      	add	r3, pc, #60	; (adr r3, 80021b0 <update_env+0x78>)
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	f7fe fa5f 	bl	8000638 <__aeabi_dmul>
 800217a:	4603      	mov	r3, r0
 800217c:	460c      	mov	r4, r1
 800217e:	4618      	mov	r0, r3
 8002180:	4621      	mov	r1, r4
 8002182:	f7fe fd29 	bl	8000bd8 <__aeabi_d2f>
 8002186:	4603      	mov	r3, r0
 8002188:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800218c:	ee00 3a10 	vmov	s0, r3
 8002190:	f019 f8e8 	bl	801b364 <powf>
 8002194:	eef0 7a40 	vmov.f32	s15, s0
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd90      	pop	{r4, r7, pc}
 80021a6:	bf00      	nop
 80021a8:	66666666 	.word	0x66666666
 80021ac:	40711266 	.word	0x40711266
 80021b0:	8c1557b7 	.word	0x8c1557b7
 80021b4:	40791e2f 	.word	0x40791e2f

080021b8 <mach_number>:

float mach_number(env_t *env, float V_x) {
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 80021c4:	edd7 7a00 	vldr	s15, [r7]
 80021c8:	eef0 6ae7 	vabs.f32	s13, s15
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80021d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80021d6:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	ee07 3a90 	vmov	s15, r3
}
 80021e0:	eeb0 0a67 	vmov.f32	s0, s15
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b086      	sub	sp, #24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
 80021fc:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	e043      	b.n	800228c <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	4413      	add	r3, r2
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d03a      	beq.n	8002286 <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe f9b7 	bl	8000588 <__aeabi_f2d>
 800221a:	a322      	add	r3, pc, #136	; (adr r3, 80022a4 <pressure2altitudeAGL+0xb4>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe fb34 	bl	800088c <__aeabi_ddiv>
 8002224:	4603      	mov	r3, r0
 8002226:	460c      	mov	r4, r1
 8002228:	4625      	mov	r5, r4
 800222a:	461c      	mov	r4, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	4413      	add	r3, r2
 8002234:	ed93 7a00 	vldr	s14, [r3]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	edd3 7a00 	vldr	s15, [r3]
 800223e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002242:	eddf 0a17 	vldr	s1, [pc, #92]	; 80022a0 <pressure2altitudeAGL+0xb0>
 8002246:	eeb0 0a66 	vmov.f32	s0, s13
 800224a:	f019 f88b 	bl	801b364 <powf>
 800224e:	eeb0 7a40 	vmov.f32	s14, s0
 8002252:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002256:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800225a:	ee17 0a90 	vmov	r0, s15
 800225e:	f7fe f993 	bl	8000588 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4620      	mov	r0, r4
 8002268:	4629      	mov	r1, r5
 800226a:	f7fe f9e5 	bl	8000638 <__aeabi_dmul>
 800226e:	4603      	mov	r3, r0
 8002270:	460c      	mov	r4, r1
 8002272:	4618      	mov	r0, r3
 8002274:	4621      	mov	r1, r4
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800227c:	18d4      	adds	r4, r2, r3
 800227e:	f7fe fcab 	bl	8000bd8 <__aeabi_d2f>
 8002282:	4603      	mov	r3, r0
 8002284:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	3301      	adds	r3, #1
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	dbb7      	blt.n	8002204 <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 8002294:	bf00      	nop
 8002296:	3718      	adds	r7, #24
 8002298:	46bd      	mov	sp, r7
 800229a:	bdb0      	pop	{r4, r5, r7, pc}
 800229c:	f3af 8000 	nop.w
 80022a0:	3e42c4dc 	.word	0x3e42c4dc
 80022a4:	76c8b439 	.word	0x76c8b439
 80022a8:	3f7a9fbe 	.word	0x3f7a9fbe
 80022ac:	00000000 	.word	0x00000000

080022b0 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 80022b0:	b5b0      	push	{r4, r5, r7, lr}
 80022b2:	ed2d 8b02 	vpush	{d8}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	e047      	b.n	8002358 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	4413      	add	r3, r2
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d03e      	beq.n	8002352 <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	ed93 8a00 	vldr	s16, [r3]
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	4413      	add	r3, r2
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f94f 	bl	8000588 <__aeabi_f2d>
 80022ea:	a323      	add	r3, pc, #140	; (adr r3, 8002378 <altitudeAGL2pressure+0xc8>)
 80022ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f0:	f7fe f9a2 	bl	8000638 <__aeabi_dmul>
 80022f4:	4603      	mov	r3, r0
 80022f6:	460c      	mov	r4, r1
 80022f8:	4625      	mov	r5, r4
 80022fa:	461c      	mov	r4, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	4618      	mov	r0, r3
 8002302:	f7fe f941 	bl	8000588 <__aeabi_f2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	4620      	mov	r0, r4
 800230c:	4629      	mov	r1, r5
 800230e:	f7fe fabd 	bl	800088c <__aeabi_ddiv>
 8002312:	4603      	mov	r3, r0
 8002314:	460c      	mov	r4, r1
 8002316:	461a      	mov	r2, r3
 8002318:	4623      	mov	r3, r4
 800231a:	f04f 0000 	mov.w	r0, #0
 800231e:	4914      	ldr	r1, [pc, #80]	; (8002370 <altitudeAGL2pressure+0xc0>)
 8002320:	f7fd ffd2 	bl	80002c8 <__aeabi_dsub>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	4618      	mov	r0, r3
 800232a:	4621      	mov	r1, r4
 800232c:	f7fe fc54 	bl	8000bd8 <__aeabi_d2f>
 8002330:	4603      	mov	r3, r0
 8002332:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002374 <altitudeAGL2pressure+0xc4>
 8002336:	ee00 3a10 	vmov	s0, r3
 800233a:	f019 f813 	bl	801b364 <powf>
 800233e:	eef0 7a40 	vmov.f32	s15, s0
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002348:	4413      	add	r3, r2
 800234a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800234e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	3301      	adds	r3, #1
 8002356:	617b      	str	r3, [r7, #20]
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	429a      	cmp	r2, r3
 800235e:	dbb3      	blt.n	80022c8 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 8002360:	bf00      	nop
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	ecbd 8b02 	vpop	{d8}
 800236a:	bdb0      	pop	{r4, r5, r7, pc}
 800236c:	f3af 8000 	nop.w
 8002370:	3ff00000 	.word	0x3ff00000
 8002374:	40a83d87 	.word	0x40a83d87
 8002378:	76c8b439 	.word	0x76c8b439
 800237c:	3f7a9fbe 	.word	0x3f7a9fbe

08002380 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8002380:	b5b0      	push	{r4, r5, r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4618      	mov	r0, r3
 8002392:	f7fe f8f9 	bl	8000588 <__aeabi_f2d>
 8002396:	a323      	add	r3, pc, #140	; (adr r3, 8002424 <altitude_gradient+0xa4>)
 8002398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239c:	f7fe f94c 	bl	8000638 <__aeabi_dmul>
 80023a0:	4603      	mov	r3, r0
 80023a2:	460c      	mov	r4, r1
 80023a4:	4625      	mov	r5, r4
 80023a6:	461c      	mov	r4, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f8eb 	bl	8000588 <__aeabi_f2d>
 80023b2:	a31e      	add	r3, pc, #120	; (adr r3, 800242c <altitude_gradient+0xac>)
 80023b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b8:	f7fe f93e 	bl	8000638 <__aeabi_dmul>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4620      	mov	r0, r4
 80023c2:	4629      	mov	r1, r5
 80023c4:	f7fe fa62 	bl	800088c <__aeabi_ddiv>
 80023c8:	4603      	mov	r3, r0
 80023ca:	460c      	mov	r4, r1
 80023cc:	4625      	mov	r5, r4
 80023ce:	461c      	mov	r4, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	edd3 7a00 	vldr	s15, [r3]
 80023d6:	ed97 7a00 	vldr	s14, [r7]
 80023da:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80023de:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002420 <altitude_gradient+0xa0>
 80023e2:	eeb0 0a66 	vmov.f32	s0, s13
 80023e6:	f018 ffbd 	bl	801b364 <powf>
 80023ea:	ee10 3a10 	vmov	r3, s0
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fe f8ca 	bl	8000588 <__aeabi_f2d>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4620      	mov	r0, r4
 80023fa:	4629      	mov	r1, r5
 80023fc:	f7fe f91c 	bl	8000638 <__aeabi_dmul>
 8002400:	4603      	mov	r3, r0
 8002402:	460c      	mov	r4, r1
 8002404:	4618      	mov	r0, r3
 8002406:	4621      	mov	r1, r4
 8002408:	f7fe fbe6 	bl	8000bd8 <__aeabi_d2f>
 800240c:	4603      	mov	r3, r0
 800240e:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	ee07 3a90 	vmov	s15, r3
}
 8002416:	eeb0 0a67 	vmov.f32	s0, s15
 800241a:	3710      	adds	r7, #16
 800241c:	46bd      	mov	sp, r7
 800241e:	bdb0      	pop	{r4, r5, r7, pc}
 8002420:	bf4f4ec9 	.word	0xbf4f4ec9
 8002424:	640f3ea7 	.word	0x640f3ea7
 8002428:	c071f0fd 	.word	0xc071f0fd
 800242c:	51eb851f 	.word	0x51eb851f
 8002430:	40239eb8 	.word	0x40239eb8
 8002434:	00000000 	.word	0x00000000

08002438 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	3b01      	subs	r3, #1
 800244a:	2b04      	cmp	r3, #4
 800244c:	f200 80a6 	bhi.w	800259c <detect_flight_phase+0x164>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <detect_flight_phase+0x20>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	0800246d 	.word	0x0800246d
 800245c:	0800259d 	.word	0x0800259d
 8002460:	080024bb 	.word	0x080024bb
 8002464:	08002505 	.word	0x08002505
 8002468:	0800254f 	.word	0x0800254f
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	699b      	ldr	r3, [r3, #24]
 8002470:	ee07 3a90 	vmov	s15, r3
 8002474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002478:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002638 <detect_flight_phase+0x200>
 800247c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002480:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002484:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800248c:	dc00      	bgt.n	8002490 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800248e:	e087      	b.n	80025a0 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	3301      	adds	r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	b25a      	sxtb	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	dd79      	ble.n	80025a0 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2203      	movs	r2, #3
 80024b0:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	721a      	strb	r2, [r3, #8]
        break;
 80024b8:	e072      	b.n	80025a0 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	ee07 3a90 	vmov	s15, r3
 80024c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024c6:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002638 <detect_flight_phase+0x200>
 80024ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d6:	d400      	bmi.n	80024da <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80024d8:	e064      	b.n	80025a4 <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	3301      	adds	r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	b25a      	sxtb	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	dd56      	ble.n	80025a4 <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2204      	movs	r2, #4
 80024fa:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	721a      	strb	r2, [r3, #8]
        break;
 8002502:	e04f      	b.n	80025a4 <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002638 <detect_flight_phase+0x200>
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800251c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002520:	d400      	bmi.n	8002524 <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002522:	e041      	b.n	80025a8 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	3301      	adds	r3, #1
 800252e:	b2db      	uxtb	r3, r3
 8002530:	b25a      	sxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800253c:	2b03      	cmp	r3, #3
 800253e:	dd33      	ble.n	80025a8 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2205      	movs	r2, #5
 8002544:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2200      	movs	r2, #0
 800254a:	721a      	strb	r2, [r3, #8]
        break;
 800254c:	e02c      	b.n	80025a8 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002638 <detect_flight_phase+0x200>
 800255e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002562:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d400      	bmi.n	8002572 <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002570:	e01c      	b.n	80025ac <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	b25a      	sxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800258a:	2b03      	cmp	r3, #3
 800258c:	dd0e      	ble.n	80025ac <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2206      	movs	r2, #6
 8002592:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	721a      	strb	r2, [r3, #8]
        break;
 800259a:	e007      	b.n	80025ac <detect_flight_phase+0x174>

        default:
        break;
 800259c:	bf00      	nop
 800259e:	e006      	b.n	80025ae <detect_flight_phase+0x176>
        break;
 80025a0:	bf00      	nop
 80025a2:	e004      	b.n	80025ae <detect_flight_phase+0x176>
        break;
 80025a4:	bf00      	nop
 80025a6:	e002      	b.n	80025ae <detect_flight_phase+0x176>
        break;
 80025a8:	bf00      	nop
 80025aa:	e000      	b.n	80025ae <detect_flight_phase+0x176>
        break;
 80025ac:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025ba:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002638 <detect_flight_phase+0x200>
 80025be:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80025c2:	eeb0 0a66 	vmov.f32	s0, s13
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff fdf6 	bl	80021b8 <mach_number>
 80025cc:	eef0 7a40 	vmov.f32	s15, s0
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ffd4 	bl	8000588 <__aeabi_f2d>
 80025e0:	a311      	add	r3, pc, #68	; (adr r3, 8002628 <detect_flight_phase+0x1f0>)
 80025e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e6:	f7fe faad 	bl	8000b44 <__aeabi_dcmpge>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2203      	movs	r2, #3
 80025f4:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 80025f6:	e013      	b.n	8002620 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fd ffc3 	bl	8000588 <__aeabi_f2d>
 8002602:	a30b      	add	r3, pc, #44	; (adr r3, 8002630 <detect_flight_phase+0x1f8>)
 8002604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002608:	f7fe fa9c 	bl	8000b44 <__aeabi_dcmpge>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d003      	beq.n	800261a <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2202      	movs	r2, #2
 8002616:	705a      	strb	r2, [r3, #1]
}
 8002618:	e002      	b.n	8002620 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2201      	movs	r2, #1
 800261e:	705a      	strb	r2, [r3, #1]
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	cccccccd 	.word	0xcccccccd
 800262c:	3ff4cccc 	.word	0x3ff4cccc
 8002630:	9999999a 	.word	0x9999999a
 8002634:	3fe99999 	.word	0x3fe99999
 8002638:	447a0000 	.word	0x447a0000

0800263c <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f04f 0200 	mov.w	r2, #0
 8002656:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	721a      	strb	r2, [r3, #8]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 800266c:	b5b0      	push	{r4, r5, r7, lr}
 800266e:	b0b0      	sub	sp, #192	; 0xc0
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 8002674:	4b45      	ldr	r3, [pc, #276]	; (800278c <reset_kf_state+0x120>)
 8002676:	f107 040c 	add.w	r4, r7, #12
 800267a:	461d      	mov	r5, r3
 800267c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800267e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002684:	682b      	ldr	r3, [r5, #0]
 8002686:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002688:	4a41      	ldr	r2, [pc, #260]	; (8002790 <reset_kf_state+0x124>)
 800268a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800268e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002690:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002694:	4a3e      	ldr	r2, [pc, #248]	; (8002790 <reset_kf_state+0x124>)
 8002696:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800269a:	ca07      	ldmia	r2, {r0, r1, r2}
 800269c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f107 010c 	add.w	r1, r7, #12
 80026a6:	2224      	movs	r2, #36	; 0x24
 80026a8:	4618      	mov	r0, r3
 80026aa:	f017 ffe1 	bl	801a670 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3348      	adds	r3, #72	; 0x48
 80026b2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80026b6:	220c      	movs	r2, #12
 80026b8:	4618      	mov	r0, r3
 80026ba:	f017 ffd9 	bl	801a670 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3354      	adds	r3, #84	; 0x54
 80026c2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80026c6:	220c      	movs	r2, #12
 80026c8:	4618      	mov	r0, r3
 80026ca:	f017 ffd1 	bl	801a670 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 80026e6:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <reset_kf_state+0x128>)
 80026e8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80026ec:	461d      	mov	r5, r3
 80026ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026f6:	682b      	ldr	r3, [r5, #0]
 80026f8:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002700:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 8002704:	220c      	movs	r2, #12
 8002706:	4618      	mov	r0, r3
 8002708:	f017 ffb2 	bl	801a670 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002712:	f107 0190 	add.w	r1, r7, #144	; 0x90
 8002716:	2224      	movs	r2, #36	; 0x24
 8002718:	4618      	mov	r0, r3
 800271a:	f017 ffa9 	bl	801a670 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	33b4      	adds	r3, #180	; 0xb4
 8002722:	2204      	movs	r2, #4
 8002724:	2100      	movs	r1, #0
 8002726:	4618      	mov	r0, r3
 8002728:	f017 ffad 	bl	801a686 <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	33b8      	adds	r3, #184	; 0xb8
 8002730:	2224      	movs	r2, #36	; 0x24
 8002732:	2100      	movs	r1, #0
 8002734:	4618      	mov	r0, r3
 8002736:	f017 ffa6 	bl	801a686 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002740:	220c      	movs	r2, #12
 8002742:	2100      	movs	r1, #0
 8002744:	4618      	mov	r0, r3
 8002746:	f017 ff9e 	bl	801a686 <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002750:	2203      	movs	r2, #3
 8002752:	2100      	movs	r1, #0
 8002754:	4618      	mov	r0, r3
 8002756:	f017 ff96 	bl	801a686 <memset>
    kf_state->num_z_active = 0;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	3324      	adds	r3, #36	; 0x24
 8002768:	2103      	movs	r1, #3
 800276a:	2003      	movs	r0, #3
 800276c:	f000 fd40 	bl	80031f0 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f103 0254 	add.w	r2, r3, #84	; 0x54
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3360      	adds	r3, #96	; 0x60
 800277a:	2101      	movs	r1, #1
 800277c:	2003      	movs	r0, #3
 800277e:	f000 fd37 	bl	80031f0 <transpose>
}
 8002782:	bf00      	nop
 8002784:	37c0      	adds	r7, #192	; 0xc0
 8002786:	46bd      	mov	sp, r7
 8002788:	bdb0      	pop	{r4, r5, r7, pc}
 800278a:	bf00      	nop
 800278c:	0801cfd0 	.word	0x0801cfd0
 8002790:	0801cff4 	.word	0x0801cff4
 8002794:	0801d000 	.word	0x0801d000

08002798 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af04      	add	r7, sp, #16
 800279e:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 80027a0:	6879      	ldr	r1, [r7, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f503 7082 	add.w	r0, r3, #260	; 0x104
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80027ae:	2201      	movs	r2, #1
 80027b0:	9201      	str	r2, [sp, #4]
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	4603      	mov	r3, r0
 80027b6:	460a      	mov	r2, r1
 80027b8:	2103      	movs	r1, #3
 80027ba:	2003      	movs	r0, #3
 80027bc:	f000 ff42 	bl	8003644 <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f103 0148 	add.w	r1, r3, #72	; 0x48
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f503 7080 	add.w	r0, r3, #256	; 0x100
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f503 739a 	add.w	r3, r3, #308	; 0x134
 80027d2:	2200      	movs	r2, #0
 80027d4:	9201      	str	r2, [sp, #4]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4603      	mov	r3, r0
 80027da:	460a      	mov	r2, r1
 80027dc:	2101      	movs	r1, #1
 80027de:	2003      	movs	r0, #3
 80027e0:	f000 ff30 	bl	8003644 <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	f502 7205 	add.w	r2, r2, #532	; 0x214
 80027f2:	2101      	movs	r1, #1
 80027f4:	9102      	str	r1, [sp, #8]
 80027f6:	9201      	str	r2, [sp, #4]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4603      	mov	r3, r0
 80027fc:	2203      	movs	r2, #3
 80027fe:	2103      	movs	r1, #3
 8002800:	2003      	movs	r0, #3
 8002802:	f000 fe85 	bl	8003510 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	33b4      	adds	r3, #180	; 0xb4
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	f502 720e 	add.w	r2, r2, #568	; 0x238
 8002816:	2101      	movs	r1, #1
 8002818:	9102      	str	r1, [sp, #8]
 800281a:	9201      	str	r2, [sp, #4]
 800281c:	9300      	str	r3, [sp, #0]
 800281e:	4603      	mov	r3, r0
 8002820:	2201      	movs	r2, #1
 8002822:	2101      	movs	r1, #1
 8002824:	2003      	movs	r0, #3
 8002826:	f000 fe73 	bl	8003510 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3324      	adds	r3, #36	; 0x24
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800283a:	2101      	movs	r1, #1
 800283c:	9102      	str	r1, [sp, #8]
 800283e:	9201      	str	r2, [sp, #4]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	4603      	mov	r3, r0
 8002844:	2203      	movs	r2, #3
 8002846:	2103      	movs	r1, #3
 8002848:	2003      	movs	r0, #3
 800284a:	f000 fe61 	bl	8003510 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f503 700e 	add.w	r0, r3, #568	; 0x238
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	3360      	adds	r3, #96	; 0x60
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 800285e:	2100      	movs	r1, #0
 8002860:	9102      	str	r1, [sp, #8]
 8002862:	9201      	str	r2, [sp, #4]
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	4603      	mov	r3, r0
 8002868:	2203      	movs	r2, #3
 800286a:	2101      	movs	r1, #1
 800286c:	2003      	movs	r0, #3
 800286e:	f000 fe4f 	bl	8003510 <matmul>
}
 8002872:	bf00      	nop
 8002874:	3708      	adds	r7, #8
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}

0800287a <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 800287a:	b580      	push	{r7, lr}
 800287c:	b084      	sub	sp, #16
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	336c      	adds	r3, #108	; 0x6c
 8002886:	2224      	movs	r2, #36	; 0x24
 8002888:	2100      	movs	r1, #0
 800288a:	4618      	mov	r0, r3
 800288c:	f017 fefb 	bl	801a686 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	e01e      	b.n	80028d4 <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4413      	add	r3, r2
 800289c:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 80028a6:	6879      	ldr	r1, [r7, #4]
 80028a8:	68fa      	ldr	r2, [r7, #12]
 80028aa:	4613      	mov	r3, r2
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	336c      	adds	r3, #108	; 0x6c
 80028b6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e007      	b.n	80028ce <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	4413      	add	r3, r2
 80028c6:	33b8      	adds	r3, #184	; 0xb8
 80028c8:	f04f 0200 	mov.w	r2, #0
 80028cc:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	3301      	adds	r3, #1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	dddd      	ble.n	8002896 <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3390      	adds	r3, #144	; 0x90
 80028e4:	2103      	movs	r1, #3
 80028e6:	2003      	movs	r0, #3
 80028e8:	f000 fc82 	bl	80031f0 <transpose>
}
 80028ec:	bf00      	nop
 80028ee:	3710      	adds	r7, #16
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <kf_update>:

void kf_update(kf_state_t *kf_state) {
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af04      	add	r7, sp, #16
 80028fa:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800290e:	2201      	movs	r2, #1
 8002910:	9201      	str	r2, [sp, #4]
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4603      	mov	r3, r0
 8002916:	460a      	mov	r2, r1
 8002918:	2103      	movs	r1, #3
 800291a:	2003      	movs	r0, #3
 800291c:	f000 fe92 	bl	8003644 <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002932:	2003      	movs	r0, #3
 8002934:	f000 fcdb 	bl	80032ee <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	f502 7211 	add.w	r2, r2, #580	; 0x244
 800294a:	2101      	movs	r1, #1
 800294c:	9102      	str	r1, [sp, #8]
 800294e:	9201      	str	r2, [sp, #4]
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	4603      	mov	r3, r0
 8002954:	2203      	movs	r2, #3
 8002956:	2103      	movs	r1, #3
 8002958:	2003      	movs	r0, #3
 800295a:	f000 fdd9 	bl	8003510 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f503 7011 	add.w	r0, r3, #580	; 0x244
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3390      	adds	r3, #144	; 0x90
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 800296e:	2101      	movs	r1, #1
 8002970:	9102      	str	r1, [sp, #8]
 8002972:	9201      	str	r2, [sp, #4]
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	4603      	mov	r3, r0
 8002978:	2203      	movs	r2, #3
 800297a:	2103      	movs	r1, #3
 800297c:	2003      	movs	r0, #3
 800297e:	f000 fdc7 	bl	8003510 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	460b      	mov	r3, r1
 8002998:	2103      	movs	r1, #3
 800299a:	2003      	movs	r0, #3
 800299c:	f000 fcd2 	bl	8003344 <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80029a6:	2224      	movs	r2, #36	; 0x24
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f017 fe6b 	bl	801a686 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80029bc:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002acc <kf_update+0x1d8>
 80029c0:	461a      	mov	r2, r3
 80029c2:	2003      	movs	r0, #3
 80029c4:	f001 f80a 	bl	80039dc <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3390      	adds	r3, #144	; 0x90
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80029d8:	2101      	movs	r1, #1
 80029da:	9102      	str	r1, [sp, #8]
 80029dc:	9201      	str	r2, [sp, #4]
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	4603      	mov	r3, r0
 80029e2:	2203      	movs	r2, #3
 80029e4:	2103      	movs	r1, #3
 80029e6:	2003      	movs	r0, #3
 80029e8:	f000 fd92 	bl	8003510 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	f503 701a 	add.w	r0, r3, #616	; 0x268
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 80029fe:	2101      	movs	r1, #1
 8002a00:	9102      	str	r1, [sp, #8]
 8002a02:	9201      	str	r2, [sp, #4]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4603      	mov	r3, r0
 8002a08:	2203      	movs	r2, #3
 8002a0a:	2103      	movs	r1, #3
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f000 fd7f 	bl	8003510 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002a24:	2201      	movs	r2, #1
 8002a26:	9201      	str	r2, [sp, #4]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	460a      	mov	r2, r1
 8002a2e:	2103      	movs	r1, #3
 8002a30:	2003      	movs	r0, #3
 8002a32:	f000 fe07 	bl	8003644 <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002a48:	2003      	movs	r0, #3
 8002a4a:	f000 fc25 	bl	8003298 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002a54:	4619      	mov	r1, r3
 8002a56:	2003      	movs	r0, #3
 8002a58:	f000 fb7e 	bl	8003158 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	336c      	adds	r3, #108	; 0x6c
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002a6c:	2101      	movs	r1, #1
 8002a6e:	9102      	str	r1, [sp, #8]
 8002a70:	9201      	str	r2, [sp, #4]
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	4603      	mov	r3, r0
 8002a76:	2203      	movs	r2, #3
 8002a78:	2103      	movs	r1, #3
 8002a7a:	2003      	movs	r0, #3
 8002a7c:	f000 fd48 	bl	8003510 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a92:	9300      	str	r3, [sp, #0]
 8002a94:	460b      	mov	r3, r1
 8002a96:	2103      	movs	r1, #3
 8002a98:	2003      	movs	r0, #3
 8002a9a:	f000 fcc6 	bl	800342a <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002ab0:	2101      	movs	r1, #1
 8002ab2:	9102      	str	r1, [sp, #8]
 8002ab4:	9201      	str	r2, [sp, #4]
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2203      	movs	r2, #3
 8002abc:	2103      	movs	r1, #3
 8002abe:	2003      	movs	r0, #3
 8002ac0:	f000 fd26 	bl	8003510 <matmul>
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	38d1b717 	.word	0x38d1b717

08002ad0 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002ae0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002b68 <update_state_est_data+0x98>
 8002ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ae8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002aec:	ee17 2a90 	vmov	r2, s15
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002afa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002b68 <update_state_est_data+0x98>
 8002afe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b06:	ee17 2a90 	vmov	r2, s15
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002b14:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002b68 <update_state_est_data+0x98>
 8002b18:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b20:	ee17 2a90 	vmov	r2, s15
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002b2e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002b68 <update_state_est_data+0x98>
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b3a:	ee17 2a90 	vmov	r2, s15
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002b48:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002b68 <update_state_est_data+0x98>
 8002b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b54:	ee17 2a90 	vmov	r2, s15
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	447a0000 	.word	0x447a0000
 8002b6c:	00000000 	.word	0x00000000

08002b70 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002b70:	b590      	push	{r4, r7, lr}
 8002b72:	b095      	sub	sp, #84	; 0x54
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
 8002b7c:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002b7e:	2300      	movs	r3, #0
 8002b80:	647b      	str	r3, [r7, #68]	; 0x44
 8002b82:	e09a      	b.n	8002cba <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3308      	adds	r3, #8
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	6838      	ldr	r0, [r7, #0]
 8002b98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b9a:	4613      	mov	r3, r2
 8002b9c:	005b      	lsls	r3, r3, #1
 8002b9e:	4413      	add	r3, r2
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4403      	add	r3, r0
 8002ba4:	3308      	adds	r3, #8
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4299      	cmp	r1, r3
 8002baa:	d92b      	bls.n	8002c04 <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68b9      	ldr	r1, [r7, #8]
 8002bbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bc0:	3362      	adds	r3, #98	; 0x62
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002bc8:	68ba      	ldr	r2, [r7, #8]
 8002bca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bda:	4613      	mov	r3, r2
 8002bdc:	005b      	lsls	r3, r3, #1
 8002bde:	4413      	add	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	440b      	add	r3, r1
 8002be4:	3304      	adds	r3, #4
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3b24      	subs	r3, #36	; 0x24
 8002bf4:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8002bf6:	f107 0220 	add.w	r2, r7, #32
 8002bfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bfc:	4413      	add	r3, r2
 8002bfe:	2201      	movs	r2, #1
 8002c00:	701a      	strb	r2, [r3, #0]
 8002c02:	e01d      	b.n	8002c40 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 8002c04:	68ba      	ldr	r2, [r7, #8]
 8002c06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c08:	3362      	adds	r3, #98	; 0x62
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	f04f 0200 	mov.w	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 8002c14:	68ba      	ldr	r2, [r7, #8]
 8002c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002c1e:	2200      	movs	r2, #0
 8002c20:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8002c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c2a:	4413      	add	r3, r2
 8002c2c:	3b24      	subs	r3, #36	; 0x24
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8002c34:	f107 0220 	add.w	r2, r7, #32
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	4413      	add	r3, r2
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	333c      	adds	r3, #60	; 0x3c
 8002c50:	6819      	ldr	r1, [r3, #0]
 8002c52:	6838      	ldr	r0, [r7, #0]
 8002c54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4403      	add	r3, r0
 8002c60:	333c      	adds	r3, #60	; 0x3c
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4299      	cmp	r1, r3
 8002c66:	d916      	bls.n	8002c96 <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	00db      	lsls	r3, r3, #3
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3330      	adds	r3, #48	; 0x30
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002c82:	440b      	add	r3, r1
 8002c84:	3b34      	subs	r3, #52	; 0x34
 8002c86:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002c88:	f107 0210 	add.w	r2, r7, #16
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c8e:	4413      	add	r3, r2
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e00e      	b.n	8002cb4 <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 8002c96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c9e:	4413      	add	r3, r2
 8002ca0:	3b34      	subs	r3, #52	; 0x34
 8002ca2:	f04f 0200 	mov.w	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002ca8:	f107 0210 	add.w	r2, r7, #16
 8002cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cae:	4413      	add	r3, r2
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002cb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8002cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	f77f af61 	ble.w	8002b84 <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002cce:	461a      	mov	r2, r3
 8002cd0:	2003      	movs	r0, #3
 8002cd2:	f000 f96d 	bl	8002fb0 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8002cd6:	f107 0220 	add.w	r2, r7, #32
 8002cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cde:	4619      	mov	r1, r3
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f965 	bl	8002fb0 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8002ce6:	f107 0210 	add.w	r2, r7, #16
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	4619      	mov	r1, r3
 8002cf0:	2003      	movs	r0, #3
 8002cf2:	f000 f95d 	bl	8002fb0 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	63fb      	str	r3, [r7, #60]	; 0x3c
    int num_acc_x_meas_active = 0;
 8002d04:	2300      	movs	r3, #0
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    int num_temp_meas_active = 0;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	637b      	str	r3, [r7, #52]	; 0x34

    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002d12:	2300      	movs	r3, #0
 8002d14:	633b      	str	r3, [r7, #48]	; 0x30
 8002d16:	e047      	b.n	8002da8 <process_measurements+0x238>
        if (kf_state->z_active[i]){
 8002d18:	68ba      	ldr	r2, [r7, #8]
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1c:	4413      	add	r3, r2
 8002d1e:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d006      	beq.n	8002d36 <process_measurements+0x1c6>
            kf_state->num_z_active += 1;
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002d36:	f107 0210 	add.w	r2, r7, #16
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	4413      	add	r3, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d010      	beq.n	8002d66 <process_measurements+0x1f6>
            u += acc_x_meas[i];
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3b34      	subs	r3, #52	; 0x34
 8002d50:	edd3 7a00 	vldr	s15, [r3]
 8002d54:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002d58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d5c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_acc_x_meas_active += 1;
 8002d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d62:	3301      	adds	r3, #1
 8002d64:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8002d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b24      	subs	r3, #36	; 0x24
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d010      	beq.n	8002da2 <process_measurements+0x232>
            temp_meas_mean += temp_meas[i];
 8002d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d88:	4413      	add	r3, r2
 8002d8a:	3b24      	subs	r3, #36	; 0x24
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002d94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d98:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            num_temp_meas_active += 1;
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	3301      	adds	r3, #1
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da4:	3301      	adds	r3, #1
 8002da6:	633b      	str	r3, [r7, #48]	; 0x30
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	ddb4      	ble.n	8002d18 <process_measurements+0x1a8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002dc0:	9300      	str	r3, [sp, #0]
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	2103      	movs	r1, #3
 8002dc6:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002dc8:	f7ff fa12 	bl	80021f0 <pressure2altitudeAGL>

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8002dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	dd1c      	ble.n	8002e0c <process_measurements+0x29c>
        u /= num_acc_x_meas_active;
 8002dd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd4:	ee07 3a90 	vmov	s15, r3
 8002dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ddc:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002de0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002de4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        /* gravity compensation for accelerometer */
        kf_state->u[0] = u - GRAVITATION;
 8002de8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002dea:	f7fd fbcd 	bl	8000588 <__aeabi_f2d>
 8002dee:	a314      	add	r3, pc, #80	; (adr r3, 8002e40 <process_measurements+0x2d0>)
 8002df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df4:	f7fd fa68 	bl	80002c8 <__aeabi_dsub>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	460c      	mov	r4, r1
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	4621      	mov	r1, r4
 8002e00:	f7fd feea 	bl	8000bd8 <__aeabi_d2f>
 8002e04:	4602      	mov	r2, r0
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }

    if (num_temp_meas_active > 0){
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	dd0f      	ble.n	8002e32 <process_measurements+0x2c2>
        temp_meas_mean /= num_temp_meas_active;
 8002e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e14:	ee07 3a90 	vmov	s15, r3
 8002e18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e1c:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002e20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e24:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        update_env(env, temp_meas_mean);
 8002e28:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002e2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e2e:	f7ff f983 	bl	8002138 <update_env>
    }
} 
 8002e32:	bf00      	nop
 8002e34:	374c      	adds	r7, #76	; 0x4c
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd90      	pop	{r4, r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	f3af 8000 	nop.w
 8002e40:	51eb851f 	.word	0x51eb851f
 8002e44:	40239eb8 	.word	0x40239eb8

08002e48 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002e48:	b590      	push	{r4, r7, lr}
 8002e4a:	b091      	sub	sp, #68	; 0x44
 8002e4c:	af02      	add	r7, sp, #8
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	2b05      	cmp	r3, #5
 8002e5e:	d823      	bhi.n	8002ea8 <select_noise_models+0x60>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <select_noise_models+0x20>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e81 	.word	0x08002e81
 8002e6c:	08002e81 	.word	0x08002e81
 8002e70:	08002e8b 	.word	0x08002e8b
 8002e74:	08002e95 	.word	0x08002e95
 8002e78:	08002e9f 	.word	0x08002e9f
 8002e7c:	08002e81 	.word	0x08002e81
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002e80:	4b43      	ldr	r3, [pc, #268]	; (8002f90 <select_noise_models+0x148>)
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8002e84:	4b43      	ldr	r3, [pc, #268]	; (8002f94 <select_noise_models+0x14c>)
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002e88:	e00e      	b.n	8002ea8 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002e8a:	4b43      	ldr	r3, [pc, #268]	; (8002f98 <select_noise_models+0x150>)
 8002e8c:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002e8e:	4b43      	ldr	r3, [pc, #268]	; (8002f9c <select_noise_models+0x154>)
 8002e90:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002e92:	e009      	b.n	8002ea8 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8002e94:	4b42      	ldr	r3, [pc, #264]	; (8002fa0 <select_noise_models+0x158>)
 8002e96:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002e98:	4b42      	ldr	r3, [pc, #264]	; (8002fa4 <select_noise_models+0x15c>)
 8002e9a:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002e9c:	e004      	b.n	8002ea8 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002e9e:	4b42      	ldr	r3, [pc, #264]	; (8002fa8 <select_noise_models+0x160>)
 8002ea0:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8002ea2:	4b42      	ldr	r3, [pc, #264]	; (8002fac <select_noise_models+0x164>)
 8002ea4:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002ea6:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eac:	e01b      	b.n	8002ee6 <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002eae:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002eb0:	f7fd fb6a 	bl	8000588 <__aeabi_f2d>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	460c      	mov	r4, r1
 8002eb8:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002f88 <select_noise_models+0x140>
 8002ebc:	ec44 3b10 	vmov	d0, r3, r4
 8002ec0:	f018 f886 	bl	801afd0 <pow>
 8002ec4:	ec54 3b10 	vmov	r3, r4, d0
 8002ec8:	4618      	mov	r0, r3
 8002eca:	4621      	mov	r1, r4
 8002ecc:	f7fd fe84 	bl	8000bd8 <__aeabi_d2f>
 8002ed0:	4601      	mov	r1, r0
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed6:	3316      	adds	r3, #22
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	4413      	add	r3, r2
 8002edc:	3304      	adds	r3, #4
 8002ede:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	dde0      	ble.n	8002eae <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002ef2:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8002ef8:	f107 0114 	add.w	r1, r7, #20
 8002efc:	f107 0218 	add.w	r2, r7, #24
 8002f00:	f107 031c 	add.w	r3, r7, #28
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	460b      	mov	r3, r1
 8002f08:	2101      	movs	r1, #1
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff f9d0 	bl	80022b0 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8002f10:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff fa31 	bl	8002380 <altitude_gradient>
 8002f1e:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8002f22:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2e:	eef0 7ae7 	vabs.f32	s15, s15
 8002f32:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002f36:	2300      	movs	r3, #0
 8002f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f3a:	e01a      	b.n	8002f72 <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002f3c:	6a38      	ldr	r0, [r7, #32]
 8002f3e:	f7fd fb23 	bl	8000588 <__aeabi_f2d>
 8002f42:	4603      	mov	r3, r0
 8002f44:	460c      	mov	r4, r1
 8002f46:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002f88 <select_noise_models+0x140>
 8002f4a:	ec44 3b10 	vmov	d0, r3, r4
 8002f4e:	f018 f83f 	bl	801afd0 <pow>
 8002f52:	ec54 3b10 	vmov	r3, r4, d0
 8002f56:	4618      	mov	r0, r3
 8002f58:	4621      	mov	r1, r4
 8002f5a:	f7fd fe3d 	bl	8000bd8 <__aeabi_d2f>
 8002f5e:	4601      	mov	r1, r0
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	4413      	add	r3, r2
 8002f68:	33b8      	adds	r3, #184	; 0xb8
 8002f6a:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f6e:	3301      	adds	r3, #1
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	dde1      	ble.n	8002f3c <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002f80:	bf00      	nop
 8002f82:	373c      	adds	r7, #60	; 0x3c
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	40000000 	.word	0x40000000
 8002f90:	3c97e316 	.word	0x3c97e316
 8002f94:	3fef3b64 	.word	0x3fef3b64
 8002f98:	3fa01965 	.word	0x3fa01965
 8002f9c:	41500000 	.word	0x41500000
 8002fa0:	3f1e3737 	.word	0x3f1e3737
 8002fa4:	40ec28f6 	.word	0x40ec28f6
 8002fa8:	3ffa41cc 	.word	0x3ffa41cc
 8002fac:	40795810 	.word	0x40795810

08002fb0 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8002fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fb2:	b08b      	sub	sp, #44	; 0x2c
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8002fc0:	f04f 0300 	mov.w	r3, #0
 8002fc4:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e017      	b.n	8002ffc <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	4413      	add	r3, r2
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00e      	beq.n	8002ff6 <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	3301      	adds	r3, #1
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	edd3 7a00 	vldr	s15, [r3]
 8002fea:	ed97 7a08 	vldr	s14, [r7, #32]
 8002fee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff2:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fa      	ldr	r2, [r7, #28]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	429a      	cmp	r2, r3
 8003002:	dbe3      	blt.n	8002fcc <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 8003004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003006:	2b00      	cmp	r3, #0
 8003008:	dd0a      	ble.n	8003020 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	ee07 3a90 	vmov	s15, r3
 8003010:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003014:	edd7 6a08 	vldr	s13, [r7, #32]
 8003018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8003020:	f04f 0300 	mov.w	r3, #0
 8003024:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e033      	b.n	8003094 <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	4413      	add	r3, r2
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d02a      	beq.n	800308e <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	4413      	add	r3, r2
 8003040:	ed93 7a00 	vldr	s14, [r3]
 8003044:	edd7 7a08 	vldr	s15, [r7, #32]
 8003048:	ee77 7a67 	vsub.f32	s15, s14, s15
 800304c:	ee17 0a90 	vmov	r0, s15
 8003050:	f7fd fa9a 	bl	8000588 <__aeabi_f2d>
 8003054:	4603      	mov	r3, r0
 8003056:	460c      	mov	r4, r1
 8003058:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 8003150 <sensor_elimination_by_stdev+0x1a0>
 800305c:	ec44 3b10 	vmov	d0, r3, r4
 8003060:	f017 ffb6 	bl	801afd0 <pow>
 8003064:	ec56 5b10 	vmov	r5, r6, d0
 8003068:	69b8      	ldr	r0, [r7, #24]
 800306a:	f7fd fa8d 	bl	8000588 <__aeabi_f2d>
 800306e:	4603      	mov	r3, r0
 8003070:	460c      	mov	r4, r1
 8003072:	461a      	mov	r2, r3
 8003074:	4623      	mov	r3, r4
 8003076:	4628      	mov	r0, r5
 8003078:	4631      	mov	r1, r6
 800307a:	f7fd f927 	bl	80002cc <__adddf3>
 800307e:	4603      	mov	r3, r0
 8003080:	460c      	mov	r4, r1
 8003082:	4618      	mov	r0, r3
 8003084:	4621      	mov	r1, r4
 8003086:	f7fd fda7 	bl	8000bd8 <__aeabi_d2f>
 800308a:	4603      	mov	r3, r0
 800308c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	3301      	adds	r3, #1
 8003092:	617b      	str	r3, [r7, #20]
 8003094:	697a      	ldr	r2, [r7, #20]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbc7      	blt.n	800302c <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	dd1a      	ble.n	80030d8 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030ac:	ed97 7a06 	vldr	s14, [r7, #24]
 80030b0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80030b4:	ee16 0a90 	vmov	r0, s13
 80030b8:	f7fd fa66 	bl	8000588 <__aeabi_f2d>
 80030bc:	4603      	mov	r3, r0
 80030be:	460c      	mov	r4, r1
 80030c0:	ec44 3b10 	vmov	d0, r3, r4
 80030c4:	f018 f8f4 	bl	801b2b0 <sqrt>
 80030c8:	ec54 3b10 	vmov	r3, r4, d0
 80030cc:	4618      	mov	r0, r3
 80030ce:	4621      	mov	r1, r4
 80030d0:	f7fd fd82 	bl	8000bd8 <__aeabi_d2f>
 80030d4:	4603      	mov	r3, r0
 80030d6:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 80030d8:	2300      	movs	r3, #0
 80030da:	613b      	str	r3, [r7, #16]
 80030dc:	e02f      	b.n	800313e <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	4413      	add	r3, r2
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d026      	beq.n	8003138 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	4413      	add	r3, r2
 80030f2:	ed93 7a00 	vldr	s14, [r3]
 80030f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80030fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030fe:	eef0 7ae7 	vabs.f32	s15, s15
 8003102:	ee17 0a90 	vmov	r0, s15
 8003106:	f7fd fa3f 	bl	8000588 <__aeabi_f2d>
 800310a:	4604      	mov	r4, r0
 800310c:	460d      	mov	r5, r1
 800310e:	69b8      	ldr	r0, [r7, #24]
 8003110:	f7fd fa3a 	bl	8000588 <__aeabi_f2d>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	f7fd f8d8 	bl	80002cc <__adddf3>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4620      	mov	r0, r4
 8003122:	4629      	mov	r1, r5
 8003124:	f7fd fd18 	bl	8000b58 <__aeabi_dcmpgt>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d004      	beq.n	8003138 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	4413      	add	r3, r2
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	3301      	adds	r3, #1
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	429a      	cmp	r2, r3
 8003144:	dbcb      	blt.n	80030de <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 8003146:	bf00      	nop
 8003148:	372c      	adds	r7, #44	; 0x2c
 800314a:	46bd      	mov	sp, r7
 800314c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800314e:	bf00      	nop
 8003150:	00000000 	.word	0x00000000
 8003154:	40000000 	.word	0x40000000

08003158 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 8003158:	b490      	push	{r4, r7}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	6039      	str	r1, [r7, #0]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	1e43      	subs	r3, r0, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	4603      	mov	r3, r0
 800316a:	4619      	mov	r1, r3
 800316c:	f04f 0200 	mov.w	r2, #0
 8003170:	f04f 0300 	mov.w	r3, #0
 8003174:	f04f 0400 	mov.w	r4, #0
 8003178:	0154      	lsls	r4, r2, #5
 800317a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800317e:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8003180:	2300      	movs	r3, #0
 8003182:	613b      	str	r3, [r7, #16]
 8003184:	e02b      	b.n	80031de <eye+0x86>
        for(int j = 0; j < dim; j++){
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	e021      	b.n	80031d0 <eye+0x78>
            if (i == j){
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	429a      	cmp	r2, r3
 8003192:	d10d      	bne.n	80031b0 <eye+0x58>
				A[i][j] = 1;
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	fb03 f302 	mul.w	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	683a      	ldr	r2, [r7, #0]
 80031a0:	441a      	add	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4413      	add	r3, r2
 80031a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80031ac:	601a      	str	r2, [r3, #0]
 80031ae:	e00c      	b.n	80031ca <eye+0x72>
			} else {
				A[i][j] = 0;
 80031b0:	4602      	mov	r2, r0
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	fb03 f302 	mul.w	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	683a      	ldr	r2, [r7, #0]
 80031bc:	441a      	add	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	4413      	add	r3, r2
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	3301      	adds	r3, #1
 80031ce:	617b      	str	r3, [r7, #20]
 80031d0:	697a      	ldr	r2, [r7, #20]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	dbd9      	blt.n	800318c <eye+0x34>
	for(int i = 0; i < dim; i++){
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	3301      	adds	r3, #1
 80031dc:	613b      	str	r3, [r7, #16]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	dbcf      	blt.n	8003186 <eye+0x2e>
			}
        }
    }
}
 80031e6:	bf00      	nop
 80031e8:	3718      	adds	r7, #24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc90      	pop	{r4, r7}
 80031ee:	4770      	bx	lr

080031f0 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 80031f0:	b4b0      	push	{r4, r5, r7}
 80031f2:	b089      	sub	sp, #36	; 0x24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
 80031fe:	68b8      	ldr	r0, [r7, #8]
 8003200:	1e43      	subs	r3, r0, #1
 8003202:	617b      	str	r3, [r7, #20]
 8003204:	4603      	mov	r3, r0
 8003206:	4619      	mov	r1, r3
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	f04f 0300 	mov.w	r3, #0
 8003210:	f04f 0400 	mov.w	r4, #0
 8003214:	0154      	lsls	r4, r2, #5
 8003216:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800321a:	014b      	lsls	r3, r1, #5
 800321c:	68fd      	ldr	r5, [r7, #12]
 800321e:	1e6b      	subs	r3, r5, #1
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	462b      	mov	r3, r5
 8003224:	4619      	mov	r1, r3
 8003226:	f04f 0200 	mov.w	r2, #0
 800322a:	f04f 0300 	mov.w	r3, #0
 800322e:	f04f 0400 	mov.w	r4, #0
 8003232:	0154      	lsls	r4, r2, #5
 8003234:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003238:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	e022      	b.n	8003286 <transpose+0x96>
		for(int j = 0; j < n; j++){
 8003240:	2300      	movs	r3, #0
 8003242:	61fb      	str	r3, [r7, #28]
 8003244:	e018      	b.n	8003278 <transpose+0x88>
			A_T[j][i] = A[i][j];
 8003246:	4602      	mov	r2, r0
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	fb03 f302 	mul.w	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	441a      	add	r2, r3
 8003254:	4629      	mov	r1, r5
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	fb03 f301 	mul.w	r3, r3, r1
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	6839      	ldr	r1, [r7, #0]
 8003260:	4419      	add	r1, r3
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	440b      	add	r3, r1
 8003270:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fa      	ldr	r2, [r7, #28]
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	dbe2      	blt.n	8003246 <transpose+0x56>
	for(int i = 0; i < m; i++){
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	3301      	adds	r3, #1
 8003284:	61bb      	str	r3, [r7, #24]
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	429a      	cmp	r2, r3
 800328c:	dbd8      	blt.n	8003240 <transpose+0x50>
		}
	}
}
 800328e:	bf00      	nop
 8003290:	3724      	adds	r7, #36	; 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	bcb0      	pop	{r4, r5, r7}
 8003296:	4770      	bx	lr

08003298 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80032a6:	2300      	movs	r3, #0
 80032a8:	617b      	str	r3, [r7, #20]
 80032aa:	e016      	b.n	80032da <vecadd+0x42>
		c[i] = a[i] + b[i];
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4413      	add	r3, r2
 80032b4:	ed93 7a00 	vldr	s14, [r3]
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	edd3 7a00 	vldr	s15, [r3]
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	683a      	ldr	r2, [r7, #0]
 80032ca:	4413      	add	r3, r2
 80032cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d0:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	3301      	adds	r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	429a      	cmp	r2, r3
 80032e0:	dbe4      	blt.n	80032ac <vecadd+0x14>
	}
}
 80032e2:	bf00      	nop
 80032e4:	371c      	adds	r7, #28
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 80032ee:	b480      	push	{r7}
 80032f0:	b087      	sub	sp, #28
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	60f8      	str	r0, [r7, #12]
 80032f6:	60b9      	str	r1, [r7, #8]
 80032f8:	607a      	str	r2, [r7, #4]
 80032fa:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80032fc:	2300      	movs	r3, #0
 80032fe:	617b      	str	r3, [r7, #20]
 8003300:	e016      	b.n	8003330 <vecsub+0x42>
		c[i] = a[i] - b[i];
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	68ba      	ldr	r2, [r7, #8]
 8003308:	4413      	add	r3, r2
 800330a:	ed93 7a00 	vldr	s14, [r3]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	4413      	add	r3, r2
 8003322:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003326:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	3301      	adds	r3, #1
 800332e:	617b      	str	r3, [r7, #20]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	429a      	cmp	r2, r3
 8003336:	dbe4      	blt.n	8003302 <vecsub+0x14>
	}
}
 8003338:	bf00      	nop
 800333a:	371c      	adds	r7, #28
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8003344:	b4f0      	push	{r4, r5, r6, r7}
 8003346:	b08a      	sub	sp, #40	; 0x28
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	68b8      	ldr	r0, [r7, #8]
 8003354:	1e43      	subs	r3, r0, #1
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
 8003358:	4603      	mov	r3, r0
 800335a:	4619      	mov	r1, r3
 800335c:	f04f 0200 	mov.w	r2, #0
 8003360:	f04f 0300 	mov.w	r3, #0
 8003364:	f04f 0400 	mov.w	r4, #0
 8003368:	0154      	lsls	r4, r2, #5
 800336a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800336e:	014b      	lsls	r3, r1, #5
 8003370:	68bd      	ldr	r5, [r7, #8]
 8003372:	1e6b      	subs	r3, r5, #1
 8003374:	61bb      	str	r3, [r7, #24]
 8003376:	462b      	mov	r3, r5
 8003378:	4619      	mov	r1, r3
 800337a:	f04f 0200 	mov.w	r2, #0
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	f04f 0400 	mov.w	r4, #0
 8003386:	0154      	lsls	r4, r2, #5
 8003388:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800338c:	014b      	lsls	r3, r1, #5
 800338e:	68be      	ldr	r6, [r7, #8]
 8003390:	1e73      	subs	r3, r6, #1
 8003392:	617b      	str	r3, [r7, #20]
 8003394:	4633      	mov	r3, r6
 8003396:	4619      	mov	r1, r3
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	f04f 0400 	mov.w	r4, #0
 80033a4:	0154      	lsls	r4, r2, #5
 80033a6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033aa:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 80033ac:	2300      	movs	r3, #0
 80033ae:	61fb      	str	r3, [r7, #28]
 80033b0:	e032      	b.n	8003418 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 80033b2:	2300      	movs	r3, #0
 80033b4:	623b      	str	r3, [r7, #32]
 80033b6:	e028      	b.n	800340a <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 80033b8:	4602      	mov	r2, r0
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	fb03 f302 	mul.w	r3, r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	441a      	add	r2, r3
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	ed93 7a00 	vldr	s14, [r3]
 80033d0:	462a      	mov	r2, r5
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	fb03 f302 	mul.w	r3, r3, r2
 80033d8:	009b      	lsls	r3, r3, #2
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	441a      	add	r2, r3
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	4413      	add	r3, r2
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	4632      	mov	r2, r6
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	fb03 f302 	mul.w	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033f4:	441a      	add	r2, r3
 80033f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033fa:	6a3b      	ldr	r3, [r7, #32]
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	4413      	add	r3, r2
 8003400:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8003404:	6a3b      	ldr	r3, [r7, #32]
 8003406:	3301      	adds	r3, #1
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	6a3a      	ldr	r2, [r7, #32]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	429a      	cmp	r2, r3
 8003410:	dbd2      	blt.n	80033b8 <matadd+0x74>
	for(int i = 0; i < m; i++){
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3301      	adds	r3, #1
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	429a      	cmp	r2, r3
 800341e:	dbc8      	blt.n	80033b2 <matadd+0x6e>
        }
    }
}
 8003420:	bf00      	nop
 8003422:	3728      	adds	r7, #40	; 0x28
 8003424:	46bd      	mov	sp, r7
 8003426:	bcf0      	pop	{r4, r5, r6, r7}
 8003428:	4770      	bx	lr

0800342a <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 800342a:	b4f0      	push	{r4, r5, r6, r7}
 800342c:	b08a      	sub	sp, #40	; 0x28
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	68b8      	ldr	r0, [r7, #8]
 800343a:	1e43      	subs	r3, r0, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
 800343e:	4603      	mov	r3, r0
 8003440:	4619      	mov	r1, r3
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	f04f 0400 	mov.w	r4, #0
 800344e:	0154      	lsls	r4, r2, #5
 8003450:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003454:	014b      	lsls	r3, r1, #5
 8003456:	68bd      	ldr	r5, [r7, #8]
 8003458:	1e6b      	subs	r3, r5, #1
 800345a:	61bb      	str	r3, [r7, #24]
 800345c:	462b      	mov	r3, r5
 800345e:	4619      	mov	r1, r3
 8003460:	f04f 0200 	mov.w	r2, #0
 8003464:	f04f 0300 	mov.w	r3, #0
 8003468:	f04f 0400 	mov.w	r4, #0
 800346c:	0154      	lsls	r4, r2, #5
 800346e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003472:	014b      	lsls	r3, r1, #5
 8003474:	68be      	ldr	r6, [r7, #8]
 8003476:	1e73      	subs	r3, r6, #1
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	4633      	mov	r3, r6
 800347c:	4619      	mov	r1, r3
 800347e:	f04f 0200 	mov.w	r2, #0
 8003482:	f04f 0300 	mov.w	r3, #0
 8003486:	f04f 0400 	mov.w	r4, #0
 800348a:	0154      	lsls	r4, r2, #5
 800348c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003490:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8003492:	2300      	movs	r3, #0
 8003494:	61fb      	str	r3, [r7, #28]
 8003496:	e032      	b.n	80034fe <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8003498:	2300      	movs	r3, #0
 800349a:	623b      	str	r3, [r7, #32]
 800349c:	e028      	b.n	80034f0 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 800349e:	4602      	mov	r2, r0
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	fb03 f302 	mul.w	r3, r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	441a      	add	r2, r3
 80034ac:	6a3b      	ldr	r3, [r7, #32]
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	4413      	add	r3, r2
 80034b2:	ed93 7a00 	vldr	s14, [r3]
 80034b6:	462a      	mov	r2, r5
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	fb03 f302 	mul.w	r3, r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	683a      	ldr	r2, [r7, #0]
 80034c2:	441a      	add	r2, r3
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	edd3 7a00 	vldr	s15, [r3]
 80034ce:	4632      	mov	r2, r6
 80034d0:	69fb      	ldr	r3, [r7, #28]
 80034d2:	fb03 f302 	mul.w	r3, r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034da:	441a      	add	r2, r3
 80034dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	4413      	add	r3, r2
 80034e6:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80034ea:	6a3b      	ldr	r3, [r7, #32]
 80034ec:	3301      	adds	r3, #1
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	6a3a      	ldr	r2, [r7, #32]
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	dbd2      	blt.n	800349e <matsub+0x74>
	for(int i = 0; i < m; i++){
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3301      	adds	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
 80034fe:	69fa      	ldr	r2, [r7, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	429a      	cmp	r2, r3
 8003504:	dbc8      	blt.n	8003498 <matsub+0x6e>
        }
    }
}
 8003506:	bf00      	nop
 8003508:	3728      	adds	r7, #40	; 0x28
 800350a:	46bd      	mov	sp, r7
 800350c:	bcf0      	pop	{r4, r5, r6, r7}
 800350e:	4770      	bx	lr

08003510 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8003510:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003512:	b08d      	sub	sp, #52	; 0x34
 8003514:	af00      	add	r7, sp, #0
 8003516:	6178      	str	r0, [r7, #20]
 8003518:	6139      	str	r1, [r7, #16]
 800351a:	60fa      	str	r2, [r7, #12]
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	693e      	ldr	r6, [r7, #16]
 8003520:	1e73      	subs	r3, r6, #1
 8003522:	623b      	str	r3, [r7, #32]
 8003524:	4633      	mov	r3, r6
 8003526:	4619      	mov	r1, r3
 8003528:	f04f 0200 	mov.w	r2, #0
 800352c:	f04f 0300 	mov.w	r3, #0
 8003530:	f04f 0400 	mov.w	r4, #0
 8003534:	0154      	lsls	r4, r2, #5
 8003536:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800353a:	014b      	lsls	r3, r1, #5
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	607a      	str	r2, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	3b01      	subs	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
 8003546:	4613      	mov	r3, r2
 8003548:	4619      	mov	r1, r3
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	f04f 0300 	mov.w	r3, #0
 8003552:	f04f 0400 	mov.w	r4, #0
 8003556:	0154      	lsls	r4, r2, #5
 8003558:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800355c:	014b      	lsls	r3, r1, #5
 800355e:	68fd      	ldr	r5, [r7, #12]
 8003560:	1e6b      	subs	r3, r5, #1
 8003562:	61bb      	str	r3, [r7, #24]
 8003564:	462b      	mov	r3, r5
 8003566:	4619      	mov	r1, r3
 8003568:	f04f 0200 	mov.w	r2, #0
 800356c:	f04f 0300 	mov.w	r3, #0
 8003570:	f04f 0400 	mov.w	r4, #0
 8003574:	0154      	lsls	r4, r2, #5
 8003576:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800357a:	014b      	lsls	r3, r1, #5
	if (reset) {
 800357c:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003580:	2b00      	cmp	r3, #0
 8003582:	d009      	beq.n	8003598 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	68fa      	ldr	r2, [r7, #12]
 8003588:	fb02 f303 	mul.w	r3, r2, r3
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	461a      	mov	r2, r3
 8003590:	2100      	movs	r1, #0
 8003592:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003594:	f017 f877 	bl	801a686 <memset>
	}
	for(int i = 0; i < m; i++){
 8003598:	2300      	movs	r3, #0
 800359a:	627b      	str	r3, [r7, #36]	; 0x24
 800359c:	e04a      	b.n	8003634 <matmul+0x124>
        for(int j = 0; j < o; j++){
 800359e:	2300      	movs	r3, #0
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a2:	e040      	b.n	8003626 <matmul+0x116>
            for(int k = 0; k < n; k++){
 80035a4:	2300      	movs	r3, #0
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035a8:	e036      	b.n	8003618 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 80035aa:	4632      	mov	r2, r6
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	fb03 f302 	mul.w	r3, r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	68ba      	ldr	r2, [r7, #8]
 80035b6:	441a      	add	r2, r3
 80035b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	ed93 7a00 	vldr	s14, [r3]
 80035c2:	687a      	ldr	r2, [r7, #4]
 80035c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c6:	fb03 f302 	mul.w	r3, r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035ce:	441a      	add	r2, r3
 80035d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035de:	462a      	mov	r2, r5
 80035e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e2:	fb03 f302 	mul.w	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035ea:	441a      	add	r2, r3
 80035ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	edd3 7a00 	vldr	s15, [r3]
 80035f6:	462a      	mov	r2, r5
 80035f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035fa:	fb03 f302 	mul.w	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003602:	441a      	add	r2, r3
 8003604:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	3301      	adds	r3, #1
 8003616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	dbc4      	blt.n	80035aa <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8003620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003622:	3301      	adds	r3, #1
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
 8003626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	429a      	cmp	r2, r3
 800362c:	dbba      	blt.n	80035a4 <matmul+0x94>
	for(int i = 0; i < m; i++){
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	3301      	adds	r3, #1
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	dbb0      	blt.n	800359e <matmul+0x8e>
            }
        }
    }
}
 800363c:	bf00      	nop
 800363e:	3734      	adds	r7, #52	; 0x34
 8003640:	46bd      	mov	sp, r7
 8003642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003644 <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 8003644:	b5b0      	push	{r4, r5, r7, lr}
 8003646:	b088      	sub	sp, #32
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	68bd      	ldr	r5, [r7, #8]
 8003654:	1e6b      	subs	r3, r5, #1
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	462b      	mov	r3, r5
 800365a:	4619      	mov	r1, r3
 800365c:	f04f 0200 	mov.w	r2, #0
 8003660:	f04f 0300 	mov.w	r3, #0
 8003664:	f04f 0400 	mov.w	r4, #0
 8003668:	0154      	lsls	r4, r2, #5
 800366a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800366e:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003670:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003674:	2b00      	cmp	r3, #0
 8003676:	d006      	beq.n	8003686 <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	461a      	mov	r2, r3
 800367e:	2100      	movs	r1, #0
 8003680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003682:	f017 f800 	bl	801a686 <memset>
	}
	for(int i = 0; i < m; i++){
 8003686:	2300      	movs	r3, #0
 8003688:	61bb      	str	r3, [r7, #24]
 800368a:	e02e      	b.n	80036ea <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 800368c:	2300      	movs	r3, #0
 800368e:	61fb      	str	r3, [r7, #28]
 8003690:	e024      	b.n	80036dc <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 8003692:	462a      	mov	r2, r5
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	fb03 f302 	mul.w	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	441a      	add	r2, r3
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	ed93 7a00 	vldr	s14, [r3]
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	683a      	ldr	r2, [r7, #0]
 80036b0:	4413      	add	r3, r2
 80036b2:	edd3 7a00 	vldr	s15, [r3]
 80036b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036c0:	4413      	add	r3, r2
 80036c2:	edd3 7a00 	vldr	s15, [r3]
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036cc:	4413      	add	r3, r2
 80036ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d2:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	3301      	adds	r3, #1
 80036da:	61fb      	str	r3, [r7, #28]
 80036dc:	69fa      	ldr	r2, [r7, #28]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	dbd6      	blt.n	8003692 <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	3301      	adds	r3, #1
 80036e8:	61bb      	str	r3, [r7, #24]
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	429a      	cmp	r2, r3
 80036f0:	dbcc      	blt.n	800368c <matvecprod+0x48>
        }
    }
}
 80036f2:	bf00      	nop
 80036f4:	3720      	adds	r7, #32
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bdb0      	pop	{r4, r5, r7, pc}

080036fa <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 80036fa:	b480      	push	{r7}
 80036fc:	b08b      	sub	sp, #44	; 0x2c
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
 8003702:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003704:	2300      	movs	r3, #0
 8003706:	61fb      	str	r3, [r7, #28]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	613b      	str	r3, [r7, #16]
 800370c:	e01d      	b.n	800374a <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	edd3 7a00 	vldr	s15, [r3]
 8003714:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800371c:	d102      	bne.n	8003724 <lower_triangular_inverse+0x2a>
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e076      	b.n	8003812 <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	ed93 7a00 	vldr	s14, [r3]
 800372a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800372e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3301      	adds	r3, #1
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	693a      	ldr	r2, [r7, #16]
 8003740:	4413      	add	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	3301      	adds	r3, #1
 8003748:	61fb      	str	r3, [r7, #28]
 800374a:	69fa      	ldr	r2, [r7, #28]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	429a      	cmp	r2, r3
 8003750:	dbdd      	blt.n	800370e <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8003752:	2301      	movs	r3, #1
 8003754:	627b      	str	r3, [r7, #36]	; 0x24
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	683a      	ldr	r2, [r7, #0]
 800375c:	4413      	add	r3, r2
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e052      	b.n	8003808 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8003762:	2300      	movs	r3, #0
 8003764:	623b      	str	r3, [r7, #32]
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e041      	b.n	80037f0 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 800376c:	f04f 0300 	mov.w	r3, #0
 8003770:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	61fb      	str	r3, [r7, #28]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	613b      	str	r3, [r7, #16]
 800377a:	e01b      	b.n	80037b4 <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4413      	add	r3, r2
 8003784:	ed93 7a00 	vldr	s14, [r3]
 8003788:	6a3b      	ldr	r3, [r7, #32]
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4413      	add	r3, r2
 8003790:	edd3 7a00 	vldr	s15, [r3]
 8003794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003798:	ed97 7a03 	vldr	s14, [r7, #12]
 800379c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a0:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	3301      	adds	r3, #1
 80037a8:	61fb      	str	r3, [r7, #28]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	693a      	ldr	r2, [r7, #16]
 80037b0:	4413      	add	r3, r2
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbdf      	blt.n	800377c <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 80037bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4413      	add	r3, r2
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	eeb1 7a67 	vneg.f32	s14, s15
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	69ba      	ldr	r2, [r7, #24]
 80037d2:	4413      	add	r3, r2
 80037d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80037d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037dc:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4413      	add	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	3301      	adds	r3, #1
 80037ee:	623b      	str	r3, [r7, #32]
 80037f0:	6a3a      	ldr	r2, [r7, #32]
 80037f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f4:	429a      	cmp	r2, r3
 80037f6:	dbb9      	blt.n	800376c <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	3301      	adds	r3, #1
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4413      	add	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	429a      	cmp	r2, r3
 800380e:	dba8      	blt.n	8003762 <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	372c      	adds	r7, #44	; 0x2c
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
	...

08003820 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8003820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003824:	b08b      	sub	sp, #44	; 0x2c
 8003826:	af00      	add	r7, sp, #0
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	60b9      	str	r1, [r7, #8]
 800382c:	607a      	str	r2, [r7, #4]
 800382e:	68fe      	ldr	r6, [r7, #12]
 8003830:	1e73      	subs	r3, r6, #1
 8003832:	617b      	str	r3, [r7, #20]
 8003834:	4633      	mov	r3, r6
 8003836:	4619      	mov	r1, r3
 8003838:	f04f 0200 	mov.w	r2, #0
 800383c:	f04f 0300 	mov.w	r3, #0
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	0154      	lsls	r4, r2, #5
 8003846:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800384a:	014b      	lsls	r3, r1, #5
 800384c:	68fd      	ldr	r5, [r7, #12]
 800384e:	1e6b      	subs	r3, r5, #1
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	462b      	mov	r3, r5
 8003854:	4619      	mov	r1, r3
 8003856:	f04f 0200 	mov.w	r2, #0
 800385a:	f04f 0300 	mov.w	r3, #0
 800385e:	f04f 0400 	mov.w	r4, #0
 8003862:	0154      	lsls	r4, r2, #5
 8003864:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003868:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	fb02 f303 	mul.w	r3, r2, r3
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	461a      	mov	r2, r3
 8003876:	2100      	movs	r1, #0
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f016 ff04 	bl	801a686 <memset>
    for (int i = 0; i < n; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	e09f      	b.n	80039c4 <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	e093      	b.n	80039b2 <cholesky+0x192>
            float s = 0;
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003890:	2300      	movs	r3, #0
 8003892:	627b      	str	r3, [r7, #36]	; 0x24
 8003894:	e022      	b.n	80038dc <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 8003896:	462a      	mov	r2, r5
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	fb03 f302 	mul.w	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	441a      	add	r2, r3
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	4413      	add	r3, r2
 80038aa:	ed93 7a00 	vldr	s14, [r3]
 80038ae:	462a      	mov	r2, r5
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	fb03 f302 	mul.w	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	441a      	add	r2, r3
 80038bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038be:	009b      	lsls	r3, r3, #2
 80038c0:	4413      	add	r3, r2
 80038c2:	edd3 7a00 	vldr	s15, [r3]
 80038c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038ca:	ed97 7a08 	vldr	s14, [r7, #32]
 80038ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038d2:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 80038d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d8:	3301      	adds	r3, #1
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
 80038dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	dbd8      	blt.n	8003896 <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d116      	bne.n	800391a <cholesky+0xfa>
 80038ec:	4632      	mov	r2, r6
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	fb03 f302 	mul.w	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	441a      	add	r2, r3
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	009b      	lsls	r3, r3, #2
 80038fe:	4413      	add	r3, r2
 8003900:	ed93 7a00 	vldr	s14, [r3]
 8003904:	edd7 7a08 	vldr	s15, [r7, #32]
 8003908:	ee77 7a67 	vsub.f32	s15, s14, s15
 800390c:	eeb0 0a67 	vmov.f32	s0, s15
 8003910:	f017 fe8c 	bl	801b62c <sqrtf>
 8003914:	ee10 1a10 	vmov	r1, s0
 8003918:	e03d      	b.n	8003996 <cholesky+0x176>
 800391a:	462a      	mov	r2, r5
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	fb03 f302 	mul.w	r3, r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	441a      	add	r2, r3
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	4413      	add	r3, r2
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fe29 	bl	8000588 <__aeabi_f2d>
 8003936:	4603      	mov	r3, r0
 8003938:	460c      	mov	r4, r1
 800393a:	461a      	mov	r2, r3
 800393c:	4623      	mov	r3, r4
 800393e:	f04f 0000 	mov.w	r0, #0
 8003942:	4925      	ldr	r1, [pc, #148]	; (80039d8 <cholesky+0x1b8>)
 8003944:	f7fc ffa2 	bl	800088c <__aeabi_ddiv>
 8003948:	4603      	mov	r3, r0
 800394a:	460c      	mov	r4, r1
 800394c:	4698      	mov	r8, r3
 800394e:	46a1      	mov	r9, r4
 8003950:	4632      	mov	r2, r6
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	fb03 f302 	mul.w	r3, r3, r2
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	441a      	add	r2, r3
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	4413      	add	r3, r2
 8003964:	ed93 7a00 	vldr	s14, [r3]
 8003968:	edd7 7a08 	vldr	s15, [r7, #32]
 800396c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003970:	ee17 0a90 	vmov	r0, s15
 8003974:	f7fc fe08 	bl	8000588 <__aeabi_f2d>
 8003978:	4603      	mov	r3, r0
 800397a:	460c      	mov	r4, r1
 800397c:	461a      	mov	r2, r3
 800397e:	4623      	mov	r3, r4
 8003980:	4640      	mov	r0, r8
 8003982:	4649      	mov	r1, r9
 8003984:	f7fc fe58 	bl	8000638 <__aeabi_dmul>
 8003988:	4603      	mov	r3, r0
 800398a:	460c      	mov	r4, r1
 800398c:	4618      	mov	r0, r3
 800398e:	4621      	mov	r1, r4
 8003990:	f7fd f922 	bl	8000bd8 <__aeabi_d2f>
 8003994:	4601      	mov	r1, r0
 8003996:	462a      	mov	r2, r5
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	fb03 f302 	mul.w	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	687a      	ldr	r2, [r7, #4]
 80039a2:	441a      	add	r2, r3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 80039ac:	69fb      	ldr	r3, [r7, #28]
 80039ae:	3301      	adds	r3, #1
 80039b0:	61fb      	str	r3, [r7, #28]
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3301      	adds	r3, #1
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f6ff af66 	blt.w	800388a <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	f6ff af5b 	blt.w	8003884 <cholesky+0x64>
        }
}
 80039ce:	bf00      	nop
 80039d0:	372c      	adds	r7, #44	; 0x2c
 80039d2:	46bd      	mov	sp, r7
 80039d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039d8:	3ff00000 	.word	0x3ff00000

080039dc <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 80039dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e0:	b090      	sub	sp, #64	; 0x40
 80039e2:	af00      	add	r7, sp, #0
 80039e4:	60f8      	str	r0, [r7, #12]
 80039e6:	60b9      	str	r1, [r7, #8]
 80039e8:	607a      	str	r2, [r7, #4]
 80039ea:	ed87 0a00 	vstr	s0, [r7]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e5a      	subs	r2, r3, #1
 80039f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80039f4:	4619      	mov	r1, r3
 80039f6:	f04f 0200 	mov.w	r2, #0
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f04f 0400 	mov.w	r4, #0
 8003a02:	0154      	lsls	r4, r2, #5
 8003a04:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a08:	014b      	lsls	r3, r1, #5
 8003a0a:	68fd      	ldr	r5, [r7, #12]
 8003a0c:	1e6b      	subs	r3, r5, #1
 8003a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a10:	462b      	mov	r3, r5
 8003a12:	4619      	mov	r1, r3
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	f04f 0400 	mov.w	r4, #0
 8003a20:	0154      	lsls	r4, r2, #5
 8003a22:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a26:	014b      	lsls	r3, r1, #5
 8003a28:	466b      	mov	r3, sp
 8003a2a:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	68fe      	ldr	r6, [r7, #12]
 8003a30:	1e43      	subs	r3, r0, #1
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	4603      	mov	r3, r0
 8003a36:	4619      	mov	r1, r3
 8003a38:	f04f 0200 	mov.w	r2, #0
 8003a3c:	f04f 0300 	mov.w	r3, #0
 8003a40:	f04f 0400 	mov.w	r4, #0
 8003a44:	0154      	lsls	r4, r2, #5
 8003a46:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a4a:	014b      	lsls	r3, r1, #5
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003a52:	1e73      	subs	r3, r6, #1
 8003a54:	623b      	str	r3, [r7, #32]
 8003a56:	4603      	mov	r3, r0
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f04f 0200 	mov.w	r2, #0
 8003a5e:	4633      	mov	r3, r6
 8003a60:	f04f 0400 	mov.w	r4, #0
 8003a64:	fb03 fe02 	mul.w	lr, r3, r2
 8003a68:	fb01 fc04 	mul.w	ip, r1, r4
 8003a6c:	44f4      	add	ip, lr
 8003a6e:	fba1 3403 	umull	r3, r4, r1, r3
 8003a72:	eb0c 0204 	add.w	r2, ip, r4
 8003a76:	4614      	mov	r4, r2
 8003a78:	f04f 0100 	mov.w	r1, #0
 8003a7c:	f04f 0200 	mov.w	r2, #0
 8003a80:	0162      	lsls	r2, r4, #5
 8003a82:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003a86:	0159      	lsls	r1, r3, #5
 8003a88:	4603      	mov	r3, r0
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	4633      	mov	r3, r6
 8003a92:	f04f 0400 	mov.w	r4, #0
 8003a96:	fb03 fe02 	mul.w	lr, r3, r2
 8003a9a:	fb01 fc04 	mul.w	ip, r1, r4
 8003a9e:	44f4      	add	ip, lr
 8003aa0:	fba1 3403 	umull	r3, r4, r1, r3
 8003aa4:	eb0c 0204 	add.w	r2, ip, r4
 8003aa8:	4614      	mov	r4, r2
 8003aaa:	f04f 0100 	mov.w	r1, #0
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	0162      	lsls	r2, r4, #5
 8003ab4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003ab8:	0159      	lsls	r1, r3, #5
 8003aba:	4603      	mov	r3, r0
 8003abc:	4632      	mov	r2, r6
 8003abe:	fb02 f303 	mul.w	r3, r2, r3
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	3303      	adds	r3, #3
 8003ac6:	3307      	adds	r3, #7
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	ebad 0d03 	sub.w	sp, sp, r3
 8003ad0:	466b      	mov	r3, sp
 8003ad2:	3303      	adds	r3, #3
 8003ad4:	089b      	lsrs	r3, r3, #2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8003ada:	69f8      	ldr	r0, [r7, #28]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	fb02 f303 	mul.w	r3, r2, r3
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68b9      	ldr	r1, [r7, #8]
 8003aea:	f016 fdc1 	bl	801a670 <memcpy>
    for (int i = 0; i < n; i++) {
 8003aee:	2300      	movs	r3, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003af2:	e022      	b.n	8003b3a <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8003af4:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003af8:	69fa      	ldr	r2, [r7, #28]
 8003afa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003afc:	fb01 f103 	mul.w	r1, r1, r3
 8003b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b02:	440b      	add	r3, r1
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	4413      	add	r3, r2
 8003b08:	ed93 7a00 	vldr	s14, [r3]
 8003b0c:	edd7 6a00 	vldr	s13, [r7]
 8003b10:	edd7 7a00 	vldr	s15, [r7]
 8003b14:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b18:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b20:	69fa      	ldr	r2, [r7, #28]
 8003b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b24:	fb01 f103 	mul.w	r1, r1, r3
 8003b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2a:	440b      	add	r3, r1
 8003b2c:	009b      	lsls	r3, r3, #2
 8003b2e:	4413      	add	r3, r2
 8003b30:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	3301      	adds	r3, #1
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	dbd8      	blt.n	8003af4 <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	68fe      	ldr	r6, [r7, #12]
 8003b46:	466b      	mov	r3, sp
 8003b48:	469a      	mov	sl, r3
 8003b4a:	1e43      	subs	r3, r0, #1
 8003b4c:	61bb      	str	r3, [r7, #24]
 8003b4e:	4603      	mov	r3, r0
 8003b50:	4619      	mov	r1, r3
 8003b52:	f04f 0200 	mov.w	r2, #0
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	f04f 0400 	mov.w	r4, #0
 8003b5e:	0154      	lsls	r4, r2, #5
 8003b60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b64:	014b      	lsls	r3, r1, #5
 8003b66:	4603      	mov	r3, r0
 8003b68:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003b6c:	1e73      	subs	r3, r6, #1
 8003b6e:	617b      	str	r3, [r7, #20]
 8003b70:	4603      	mov	r3, r0
 8003b72:	4619      	mov	r1, r3
 8003b74:	f04f 0200 	mov.w	r2, #0
 8003b78:	4633      	mov	r3, r6
 8003b7a:	f04f 0400 	mov.w	r4, #0
 8003b7e:	fb03 fe02 	mul.w	lr, r3, r2
 8003b82:	fb01 fc04 	mul.w	ip, r1, r4
 8003b86:	44f4      	add	ip, lr
 8003b88:	fba1 3403 	umull	r3, r4, r1, r3
 8003b8c:	eb0c 0204 	add.w	r2, ip, r4
 8003b90:	4614      	mov	r4, r2
 8003b92:	f04f 0100 	mov.w	r1, #0
 8003b96:	f04f 0200 	mov.w	r2, #0
 8003b9a:	0162      	lsls	r2, r4, #5
 8003b9c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003ba0:	0159      	lsls	r1, r3, #5
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	4619      	mov	r1, r3
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	4633      	mov	r3, r6
 8003bac:	f04f 0400 	mov.w	r4, #0
 8003bb0:	fb03 fe02 	mul.w	lr, r3, r2
 8003bb4:	fb01 fc04 	mul.w	ip, r1, r4
 8003bb8:	44f4      	add	ip, lr
 8003bba:	fba1 3403 	umull	r3, r4, r1, r3
 8003bbe:	eb0c 0204 	add.w	r2, ip, r4
 8003bc2:	4614      	mov	r4, r2
 8003bc4:	f04f 0100 	mov.w	r1, #0
 8003bc8:	f04f 0200 	mov.w	r2, #0
 8003bcc:	0162      	lsls	r2, r4, #5
 8003bce:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003bd2:	0159      	lsls	r1, r3, #5
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4632      	mov	r2, r6
 8003bd8:	fb02 f303 	mul.w	r3, r2, r3
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	3303      	adds	r3, #3
 8003be0:	3307      	adds	r3, #7
 8003be2:	08db      	lsrs	r3, r3, #3
 8003be4:	00db      	lsls	r3, r3, #3
 8003be6:	ebad 0d03 	sub.w	sp, sp, r3
 8003bea:	466b      	mov	r3, sp
 8003bec:	3303      	adds	r3, #3
 8003bee:	089b      	lsrs	r3, r3, #2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4619      	mov	r1, r3
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f7ff fe10 	bl	8003820 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4619      	mov	r1, r3
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff fd78 	bl	80036fa <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	fb02 f303 	mul.w	r3, r2, r3
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	461a      	mov	r2, r3
 8003c16:	2100      	movs	r1, #0
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f016 fd34 	bl	801a686 <memset>
    for(int i = 0; i < n; i++){
 8003c1e:	2300      	movs	r3, #0
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c22:	e04e      	b.n	8003cc2 <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8003c24:	2300      	movs	r3, #0
 8003c26:	633b      	str	r3, [r7, #48]	; 0x30
 8003c28:	e044      	b.n	8003cb4 <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	bfb8      	it	lt
 8003c32:	4613      	movlt	r3, r2
 8003c34:	637b      	str	r3, [r7, #52]	; 0x34
 8003c36:	e036      	b.n	8003ca6 <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003c38:	462a      	mov	r2, r5
 8003c3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3c:	fb03 f302 	mul.w	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	441a      	add	r2, r3
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	ed93 7a00 	vldr	s14, [r3]
 8003c50:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c58:	fb01 f103 	mul.w	r1, r1, r3
 8003c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c5e:	440b      	add	r3, r1
 8003c60:	009b      	lsls	r3, r3, #2
 8003c62:	4413      	add	r3, r2
 8003c64:	edd3 6a00 	vldr	s13, [r3]
 8003c68:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c70:	fb01 f103 	mul.w	r1, r1, r3
 8003c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c76:	440b      	add	r3, r1
 8003c78:	009b      	lsls	r3, r3, #2
 8003c7a:	4413      	add	r3, r2
 8003c7c:	edd3 7a00 	vldr	s15, [r3]
 8003c80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003c84:	462a      	mov	r2, r5
 8003c86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c88:	fb03 f302 	mul.w	r3, r3, r2
 8003c8c:	009b      	lsls	r3, r3, #2
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	441a      	add	r2, r3
 8003c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	4413      	add	r3, r2
 8003c9c:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca2:	3301      	adds	r3, #1
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	dbc4      	blt.n	8003c38 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	3301      	adds	r3, #1
 8003cb2:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	dbb6      	blt.n	8003c2a <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	dbac      	blt.n	8003c24 <cholesky_inverse+0x248>
 8003cca:	46d5      	mov	sp, sl
 8003ccc:	46cd      	mov	sp, r9
            }
        }
    }
}
 8003cce:	bf00      	nop
 8003cd0:	3740      	adds	r7, #64	; 0x40
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003cd8 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	210a      	movs	r1, #10
 8003cea:	4618      	mov	r0, r3
 8003cec:	f012 f994 	bl	8016018 <osMutexAcquire>
 8003cf0:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <AcquireMutex+0x2a>
		custom_mutex->counter++;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	1c5a      	adds	r2, r3, #1
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	605a      	str	r2, [r3, #4]
	}

	return status;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3710      	adds	r7, #16
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f012 f9db 	bl	80160d4 <osMutexRelease>
 8003d1e:	4603      	mov	r3, r0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b0a0      	sub	sp, #128	; 0x80
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
 8003d34:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 8003d36:	f107 0310 	add.w	r3, r7, #16
 8003d3a:	2264      	movs	r2, #100	; 0x64
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f016 fca1 	bl	801a686 <memset>
	uint32_t counter = custom_mutex->counter;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8003d4e:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003d50:	2300      	movs	r3, #0
 8003d52:	677b      	str	r3, [r7, #116]	; 0x74
 8003d54:	e01b      	b.n	8003d8e <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	f107 0310 	add.w	r3, r7, #16
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f016 fc86 	bl	801a670 <memcpy>
		if(custom_mutex->counter == counter){
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d109      	bne.n	8003d82 <ReadMutex+0x5a>
			memcpy(local_data, buffer, size);
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	f107 0310 	add.w	r3, r7, #16
 8003d74:	4619      	mov	r1, r3
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f016 fc7a 	bl	801a670 <memcpy>
			status = osOK;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003d80:	e008      	b.n	8003d94 <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d8a:	3301      	adds	r3, #1
 8003d8c:	677b      	str	r3, [r7, #116]	; 0x74
 8003d8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d90:	2b04      	cmp	r3, #4
 8003d92:	dde0      	ble.n	8003d56 <ReadMutex+0x2e>
	}
	return status;
 8003d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3780      	adds	r7, #128	; 0x80
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
	...

08003da0 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003da0:	b590      	push	{r4, r7, lr}
 8003da2:	b08d      	sub	sp, #52	; 0x34
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003dae:	f107 031c 	add.w	r3, r7, #28
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003db8:	f107 0310 	add.w	r3, r7, #16
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	605a      	str	r2, [r3, #4]
 8003dc2:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 8003dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 0; i < 5; i++){
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd4:	e07b      	b.n	8003ece <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	ee07 3a90 	vmov	s15, r3
 8003dde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003de2:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003df2:	ee07 3a90 	vmov	s15, r3
 8003df6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003dfa:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003ee8 <ReadMutexStateEst+0x148>
 8003dfe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e02:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	ee07 3a90 	vmov	s15, r3
 8003e14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e18:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003eec <ReadMutexStateEst+0x14c>
 8003e1c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e20:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d149      	bne.n	8003ec2 <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e30:	1e5a      	subs	r2, r3, #1
 8003e32:	6939      	ldr	r1, [r7, #16]
 8003e34:	6838      	ldr	r0, [r7, #0]
 8003e36:	4613      	mov	r3, r2
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	4413      	add	r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	4403      	add	r3, r0
 8003e40:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8003e42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e44:	1e5a      	subs	r2, r3, #1
 8003e46:	69b9      	ldr	r1, [r7, #24]
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4413      	add	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4403      	add	r3, r0
 8003e54:	3304      	adds	r3, #4
 8003e56:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e5a:	1e5a      	subs	r2, r3, #1
 8003e5c:	69f9      	ldr	r1, [r7, #28]
 8003e5e:	6838      	ldr	r0, [r7, #0]
 8003e60:	4613      	mov	r3, r2
 8003e62:	005b      	lsls	r3, r3, #1
 8003e64:	4413      	add	r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4403      	add	r3, r0
 8003e6a:	3308      	adds	r3, #8
 8003e6c:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7fc fb89 	bl	8000588 <__aeabi_f2d>
 8003e76:	a31a      	add	r3, pc, #104	; (adr r3, 8003ee0 <ReadMutexStateEst+0x140>)
 8003e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e7c:	f7fc fbdc 	bl	8000638 <__aeabi_dmul>
 8003e80:	4603      	mov	r3, r0
 8003e82:	460c      	mov	r4, r1
 8003e84:	4619      	mov	r1, r3
 8003e86:	4622      	mov	r2, r4
 8003e88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e8a:	1e5c      	subs	r4, r3, #1
 8003e8c:	4608      	mov	r0, r1
 8003e8e:	4611      	mov	r1, r2
 8003e90:	f7fc fea2 	bl	8000bd8 <__aeabi_d2f>
 8003e94:	4601      	mov	r1, r0
 8003e96:	683a      	ldr	r2, [r7, #0]
 8003e98:	4623      	mov	r3, r4
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	1b1b      	subs	r3, r3, r4
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	3330      	adds	r3, #48	; 0x30
 8003ea4:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 8003ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ea8:	1e5a      	subs	r2, r3, #1
 8003eaa:	6a39      	ldr	r1, [r7, #32]
 8003eac:	6838      	ldr	r0, [r7, #0]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	00db      	lsls	r3, r3, #3
 8003eb2:	1a9b      	subs	r3, r3, r2
 8003eb4:	009b      	lsls	r3, r3, #2
 8003eb6:	4403      	add	r3, r0
 8003eb8:	333c      	adds	r3, #60	; 0x3c
 8003eba:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003ec0:	e008      	b.n	8003ed4 <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < 5; i++){
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	3301      	adds	r3, #1
 8003ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8003ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed0:	2b04      	cmp	r3, #4
 8003ed2:	dd80      	ble.n	8003dd6 <ReadMutexStateEst+0x36>
	}


	return status;
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3734      	adds	r7, #52	; 0x34
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	51eb851f 	.word	0x51eb851f
 8003ee4:	40239eb8 	.word	0x40239eb8
 8003ee8:	44800000 	.word	0x44800000
 8003eec:	42c80000 	.word	0x42c80000

08003ef0 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8003ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ef2:	b0bd      	sub	sp, #244	; 0xf4
 8003ef4:	af0a      	add	r7, sp, #40	; 0x28
 8003ef6:	61f8      	str	r0, [r7, #28]
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	460b      	mov	r3, r1
 8003efc:	76fb      	strb	r3, [r7, #27]
 8003efe:	4613      	mov	r3, r2
 8003f00:	76bb      	strb	r3, [r7, #26]
	log_entry_t log_entry = { 0 };
 8003f02:	f107 0320 	add.w	r3, r7, #32
 8003f06:	2296      	movs	r2, #150	; 0x96
 8003f08:	2100      	movs	r1, #0
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f016 fbbb 	bl	801a686 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8003f10:	7efb      	ldrb	r3, [r7, #27]
 8003f12:	7eba      	ldrb	r2, [r7, #26]
 8003f14:	f107 0020 	add.w	r0, r7, #32
 8003f18:	9202      	str	r2, [sp, #8]
 8003f1a:	9301      	str	r3, [sp, #4]
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	9300      	str	r3, [sp, #0]
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	4a7a      	ldr	r2, [pc, #488]	; (800410c <logSensor+0x21c>)
 8003f24:	2196      	movs	r1, #150	; 0x96
 8003f26:	f016 fc6f 	bl	801a808 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003f2a:	7ebb      	ldrb	r3, [r7, #26]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	f200 80c8 	bhi.w	80040c4 <logSensor+0x1d4>
 8003f34:	a201      	add	r2, pc, #4	; (adr r2, 8003f3c <logSensor+0x4c>)
 8003f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f3a:	bf00      	nop
 8003f3c:	08003f4d 	.word	0x08003f4d
 8003f40:	08003f87 	.word	0x08003f87
 8003f44:	08003ff9 	.word	0x08003ff9
 8003f48:	0800407d 	.word	0x0800407d
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003f52:	f107 0320 	add.w	r3, r7, #32
 8003f56:	4618      	mov	r0, r3
 8003f58:	f7fc f95a 	bl	8000210 <strlen>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	f107 0320 	add.w	r3, r7, #32
 8003f62:	1898      	adds	r0, r3, r2
 8003f64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f68:	6819      	ldr	r1, [r3, #0]
 8003f6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f74:	6892      	ldr	r2, [r2, #8]
 8003f76:	9201      	str	r2, [sp, #4]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4a64      	ldr	r2, [pc, #400]	; (8004110 <logSensor+0x220>)
 8003f7e:	2196      	movs	r1, #150	; 0x96
 8003f80:	f016 fc42 	bl	801a808 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8003f84:	e0b4      	b.n	80040f0 <logSensor+0x200>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		snprintf(log_entry.str + strlen(log_entry.str),
 8003f8c:	f107 0320 	add.w	r3, r7, #32
 8003f90:	4618      	mov	r0, r3
 8003f92:	f7fc f93d 	bl	8000210 <strlen>
 8003f96:	4602      	mov	r2, r0
 8003f98:	f107 0320 	add.w	r3, r7, #32
 8003f9c:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%lu\n", imu_data_ptr->acc_x,
 8003f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fa2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fa6:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003fa8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fb0:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003fb2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fb6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fba:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8003fbc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fc0:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fc4:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fce:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8003fd0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fd4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fd8:	461e      	mov	r6, r3
 8003fda:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	9305      	str	r3, [sp, #20]
 8003fe2:	9604      	str	r6, [sp, #16]
 8003fe4:	9503      	str	r5, [sp, #12]
 8003fe6:	9402      	str	r4, [sp, #8]
 8003fe8:	9101      	str	r1, [sp, #4]
 8003fea:	9200      	str	r2, [sp, #0]
 8003fec:	4663      	mov	r3, ip
 8003fee:	4a49      	ldr	r2, [pc, #292]	; (8004114 <logSensor+0x224>)
 8003ff0:	2196      	movs	r1, #150	; 0x96
 8003ff2:	f016 fc09 	bl	801a808 <sniprintf>
	}
		break;
 8003ff6:	e07b      	b.n	80040f0 <logSensor+0x200>
	case GPS: {
		gps_data_t *gps_data = (gps_data_t*) sensor_data;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		snprintf(log_entry.str + strlen(log_entry.str),
 8003ffe:	f107 0320 	add.w	r3, r7, #32
 8004002:	4618      	mov	r0, r3
 8004004:	f7fc f904 	bl	8000210 <strlen>
 8004008:	4602      	mov	r2, r0
 800400a:	f107 0320 	add.w	r3, r7, #32
 800400e:	189d      	adds	r5, r3, r2
 8004010:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004014:	681e      	ldr	r6, [r3, #0]
 8004016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004020:	6892      	ldr	r2, [r2, #8]
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld,%ld\n",
			gps_data->hour, gps_data->minute, gps_data->second, gps_data->lat_deg,
 8004022:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8004026:	7b09      	ldrb	r1, [r1, #12]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004028:	6139      	str	r1, [r7, #16]
 800402a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800402e:	6909      	ldr	r1, [r1, #16]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 8004030:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004034:	7d00      	ldrb	r0, [r0, #20]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800403c:	6980      	ldr	r0, [r0, #24]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 800403e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8004042:	7f64      	ldrb	r4, [r4, #29]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004044:	60bc      	str	r4, [r7, #8]
			gps_data->altitude, gps_data->HDOP);
 8004046:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800404a:	8c24      	ldrh	r4, [r4, #32]
		snprintf(log_entry.str + strlen(log_entry.str),
 800404c:	607c      	str	r4, [r7, #4]
			gps_data->altitude, gps_data->HDOP);
 800404e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8004052:	8be4      	ldrh	r4, [r4, #30]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004054:	9408      	str	r4, [sp, #32]
 8004056:	687c      	ldr	r4, [r7, #4]
 8004058:	9407      	str	r4, [sp, #28]
 800405a:	68bc      	ldr	r4, [r7, #8]
 800405c:	9406      	str	r4, [sp, #24]
 800405e:	9005      	str	r0, [sp, #20]
 8004060:	68f8      	ldr	r0, [r7, #12]
 8004062:	9004      	str	r0, [sp, #16]
 8004064:	9103      	str	r1, [sp, #12]
 8004066:	6939      	ldr	r1, [r7, #16]
 8004068:	9102      	str	r1, [sp, #8]
 800406a:	9201      	str	r2, [sp, #4]
 800406c:	9300      	str	r3, [sp, #0]
 800406e:	4633      	mov	r3, r6
 8004070:	4a29      	ldr	r2, [pc, #164]	; (8004118 <logSensor+0x228>)
 8004072:	2196      	movs	r1, #150	; 0x96
 8004074:	4628      	mov	r0, r5
 8004076:	f016 fbc7 	bl	801a808 <sniprintf>
	}
		break;
 800407a:	e039      	b.n	80040f0 <logSensor+0x200>
	case BATTERY: {
		battery_data_t *battery_data = (battery_data_t*) sensor_data;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		snprintf(log_entry.str + strlen(log_entry.str),
 8004082:	f107 0320 	add.w	r3, r7, #32
 8004086:	4618      	mov	r0, r3
 8004088:	f7fc f8c2 	bl	8000210 <strlen>
 800408c:	4602      	mov	r2, r0
 800408e:	f107 0320 	add.w	r3, r7, #32
 8004092:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%ld\n",
			battery_data->battery, battery_data->consumption,
 8004094:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004098:	885b      	ldrh	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 800409a:	461c      	mov	r4, r3
			battery_data->battery, battery_data->consumption,
 800409c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040a0:	88db      	ldrh	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040a2:	461a      	mov	r2, r3
			battery_data->current, battery_data->supply);
 80040a4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040a8:	889b      	ldrh	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040aa:	4619      	mov	r1, r3
			battery_data->current, battery_data->supply);
 80040ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040b0:	881b      	ldrh	r3, [r3, #0]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040b2:	9302      	str	r3, [sp, #8]
 80040b4:	9101      	str	r1, [sp, #4]
 80040b6:	9200      	str	r2, [sp, #0]
 80040b8:	4623      	mov	r3, r4
 80040ba:	4a18      	ldr	r2, [pc, #96]	; (800411c <logSensor+0x22c>)
 80040bc:	2196      	movs	r1, #150	; 0x96
 80040be:	f016 fba3 	bl	801a808 <sniprintf>
	}
		break;
 80040c2:	e015      	b.n	80040f0 <logSensor+0x200>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 80040c4:	f107 0320 	add.w	r3, r7, #32
 80040c8:	4618      	mov	r0, r3
 80040ca:	f7fc f8a1 	bl	8000210 <strlen>
 80040ce:	4602      	mov	r2, r0
 80040d0:	f107 0320 	add.w	r3, r7, #32
 80040d4:	4413      	add	r3, r2
 80040d6:	4a12      	ldr	r2, [pc, #72]	; (8004120 <logSensor+0x230>)
 80040d8:	461d      	mov	r5, r3
 80040da:	4614      	mov	r4, r2
 80040dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040de:	6028      	str	r0, [r5, #0]
 80040e0:	6069      	str	r1, [r5, #4]
 80040e2:	60aa      	str	r2, [r5, #8]
 80040e4:	60eb      	str	r3, [r5, #12]
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	6128      	str	r0, [r5, #16]
 80040ea:	7923      	ldrb	r3, [r4, #4]
 80040ec:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 80040ee:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80040f0:	4b0c      	ldr	r3, [pc, #48]	; (8004124 <logSensor+0x234>)
 80040f2:	6818      	ldr	r0, [r3, #0]
 80040f4:	f107 0120 	add.w	r1, r7, #32
 80040f8:	2300      	movs	r3, #0
 80040fa:	2200      	movs	r2, #0
 80040fc:	f012 fa52 	bl	80165a4 <osMessageQueuePut>
 8004100:	4603      	mov	r3, r0
}
 8004102:	4618      	mov	r0, r3
 8004104:	37cc      	adds	r7, #204	; 0xcc
 8004106:	46bd      	mov	sp, r7
 8004108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800410a:	bf00      	nop
 800410c:	0801d024 	.word	0x0801d024
 8004110:	0801d034 	.word	0x0801d034
 8004114:	0801d044 	.word	0x0801d044
 8004118:	0801d064 	.word	0x0801d064
 800411c:	0801d090 	.word	0x0801d090
 8004120:	0801d0a4 	.word	0x0801d0a4
 8004124:	20017fdc 	.word	0x20017fdc

08004128 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8004128:	b580      	push	{r7, lr}
 800412a:	b0ac      	sub	sp, #176	; 0xb0
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	4638      	mov	r0, r7
 8004132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8004136:	f107 0310 	add.w	r3, r7, #16
 800413a:	2296      	movs	r2, #150	; 0x96
 800413c:	2100      	movs	r1, #0
 800413e:	4618      	mov	r0, r3
 8004140:	f016 faa1 	bl	801a686 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 8004144:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 8004146:	f107 0010 	add.w	r0, r7, #16
 800414a:	9301      	str	r3, [sp, #4]
 800414c:	2302      	movs	r3, #2
 800414e:	9300      	str	r3, [sp, #0]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	4a08      	ldr	r2, [pc, #32]	; (8004174 <logRocketState+0x4c>)
 8004154:	2196      	movs	r1, #150	; 0x96
 8004156:	f016 fb57 	bl	801a808 <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <logRocketState+0x50>)
 800415c:	6818      	ldr	r0, [r3, #0]
 800415e:	f107 0110 	add.w	r1, r7, #16
 8004162:	2300      	movs	r3, #0
 8004164:	2200      	movs	r2, #0
 8004166:	f012 fa1d 	bl	80165a4 <osMessageQueuePut>
 800416a:	4603      	mov	r3, r0
}
 800416c:	4618      	mov	r0, r3
 800416e:	37a8      	adds	r7, #168	; 0xa8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	0801d0bc 	.word	0x0801d0bc
 8004178:	20017fdc 	.word	0x20017fdc

0800417c <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 800417c:	b084      	sub	sp, #16
 800417e:	b580      	push	{r7, lr}
 8004180:	b0ac      	sub	sp, #176	; 0xb0
 8004182:	af04      	add	r7, sp, #16
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 800418a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 800418e:	f107 0308 	add.w	r3, r7, #8
 8004192:	2296      	movs	r2, #150	; 0x96
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f016 fa75 	bl	801a686 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 800419c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041a4:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80041a8:	f107 0008 	add.w	r0, r7, #8
 80041ac:	9103      	str	r1, [sp, #12]
 80041ae:	9202      	str	r2, [sp, #8]
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	2303      	movs	r3, #3
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a09      	ldr	r2, [pc, #36]	; (80041e0 <logEstimatorVar+0x64>)
 80041ba:	2196      	movs	r1, #150	; 0x96
 80041bc:	f016 fb24 	bl	801a808 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80041c0:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <logEstimatorVar+0x68>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	f107 0108 	add.w	r1, r7, #8
 80041c8:	2300      	movs	r3, #0
 80041ca:	2200      	movs	r2, #0
 80041cc:	f012 f9ea 	bl	80165a4 <osMessageQueuePut>
 80041d0:	4603      	mov	r3, r0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	37a0      	adds	r7, #160	; 0xa0
 80041d6:	46bd      	mov	sp, r7
 80041d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041dc:	b004      	add	sp, #16
 80041de:	4770      	bx	lr
 80041e0:	0801d0c8 	.word	0x0801d0c8
 80041e4:	20017fdc 	.word	0x20017fdc

080041e8 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b0ae      	sub	sp, #184	; 0xb8
 80041ec:	af04      	add	r7, sp, #16
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
 80041f4:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 80041f6:	f107 0310 	add.w	r3, r7, #16
 80041fa:	2296      	movs	r2, #150	; 0x96
 80041fc:	2100      	movs	r1, #0
 80041fe:	4618      	mov	r0, r3
 8004200:	f016 fa41 	bl	801a686 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 8004204:	f107 0010 	add.w	r0, r7, #16
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	9303      	str	r3, [sp, #12]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	9302      	str	r3, [sp, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	2304      	movs	r3, #4
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <logControllerOutput+0x54>)
 800421c:	2196      	movs	r1, #150	; 0x96
 800421e:	f016 faf3 	bl	801a808 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004222:	4b07      	ldr	r3, [pc, #28]	; (8004240 <logControllerOutput+0x58>)
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	f107 0110 	add.w	r1, r7, #16
 800422a:	2300      	movs	r3, #0
 800422c:	2200      	movs	r2, #0
 800422e:	f012 f9b9 	bl	80165a4 <osMessageQueuePut>
 8004232:	4603      	mov	r3, r0
}
 8004234:	4618      	mov	r0, r3
 8004236:	37a8      	adds	r7, #168	; 0xa8
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	0801d0c8 	.word	0x0801d0c8
 8004240:	20017fdc 	.word	0x20017fdc

08004244 <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 8004244:	b580      	push	{r7, lr}
 8004246:	b0ae      	sub	sp, #184	; 0xb8
 8004248:	af04      	add	r7, sp, #16
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 8004250:	f107 0310 	add.w	r3, r7, #16
 8004254:	2296      	movs	r2, #150	; 0x96
 8004256:	2100      	movs	r1, #0
 8004258:	4618      	mov	r0, r3
 800425a:	f016 fa14 	bl	801a686 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 800425e:	f107 0010 	add.w	r0, r7, #16
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	9302      	str	r3, [sp, #8]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	9301      	str	r3, [sp, #4]
 800426a:	2305      	movs	r3, #5
 800426c:	9300      	str	r3, [sp, #0]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	4a08      	ldr	r2, [pc, #32]	; (8004294 <logMotor+0x50>)
 8004272:	2196      	movs	r1, #150	; 0x96
 8004274:	f016 fac8 	bl	801a808 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004278:	4b07      	ldr	r3, [pc, #28]	; (8004298 <logMotor+0x54>)
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	f107 0110 	add.w	r1, r7, #16
 8004280:	2300      	movs	r3, #0
 8004282:	2200      	movs	r2, #0
 8004284:	f012 f98e 	bl	80165a4 <osMessageQueuePut>
 8004288:	4603      	mov	r3, r0
}
 800428a:	4618      	mov	r0, r3
 800428c:	37a8      	adds	r7, #168	; 0xa8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	0801d0dc 	.word	0x0801d0dc
 8004298:	20017fdc 	.word	0x20017fdc

0800429c <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 800429c:	b40f      	push	{r0, r1, r2, r3}
 800429e:	b580      	push	{r7, lr}
 80042a0:	b082      	sub	sp, #8
 80042a2:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80042a4:	2301      	movs	r3, #1
 80042a6:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 80042a8:	4b14      	ldr	r3, [pc, #80]	; (80042fc <UsbPrint+0x60>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2100      	movs	r1, #0
 80042ae:	4618      	mov	r0, r3
 80042b0:	f011 feb2 	bl	8016018 <osMutexAcquire>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d118      	bne.n	80042ec <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 80042ba:	f107 0314 	add.w	r3, r7, #20
 80042be:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	693a      	ldr	r2, [r7, #16]
 80042c4:	21c8      	movs	r1, #200	; 0xc8
 80042c6:	480e      	ldr	r0, [pc, #56]	; (8004300 <UsbPrint+0x64>)
 80042c8:	f016 fafe 	bl	801a8c8 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 80042cc:	480c      	ldr	r0, [pc, #48]	; (8004300 <UsbPrint+0x64>)
 80042ce:	f7fb ff9f 	bl	8000210 <strlen>
 80042d2:	4603      	mov	r3, r0
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	4619      	mov	r1, r3
 80042d8:	4809      	ldr	r0, [pc, #36]	; (8004300 <UsbPrint+0x64>)
 80042da:	f015 fce5 	bl	8019ca8 <CDC_Transmit_FS>
 80042de:	4603      	mov	r3, r0
 80042e0:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <UsbPrint+0x60>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f011 fef4 	bl	80160d4 <osMutexRelease>
	}
#endif
	return ret;
 80042ec:	79fb      	ldrb	r3, [r7, #7]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f8:	b004      	add	sp, #16
 80042fa:	4770      	bx	lr
 80042fc:	2000965c 	.word	0x2000965c
 8004300:	200089dc 	.word	0x200089dc

08004304 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004304:	b590      	push	{r4, r7, lr}
 8004306:	b0b1      	sub	sp, #196	; 0xc4
 8004308:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800430a:	f003 f8ce 	bl	80074aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800430e:	f000 f9f1 	bl	80046f4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 8004312:	4bb0      	ldr	r3, [pc, #704]	; (80045d4 <main+0x2d0>)
 8004314:	4ab0      	ldr	r2, [pc, #704]	; (80045d8 <main+0x2d4>)
 8004316:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8004318:	4bae      	ldr	r3, [pc, #696]	; (80045d4 <main+0x2d0>)
 800431a:	4ab0      	ldr	r2, [pc, #704]	; (80045dc <main+0x2d8>)
 800431c:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 800431e:	48b0      	ldr	r0, [pc, #704]	; (80045e0 <main+0x2dc>)
 8004320:	f7fd fece 	bl	80020c0 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8004324:	48af      	ldr	r0, [pc, #700]	; (80045e4 <main+0x2e0>)
 8004326:	f7fe f989 	bl	800263c <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800432a:	f000 fd3f 	bl	8004dac <MX_GPIO_Init>
  MX_DMA_Init();
 800432e:	f000 fccb 	bl	8004cc8 <MX_DMA_Init>
  MX_SPI3_Init();
 8004332:	f000 fb9f 	bl	8004a74 <MX_SPI3_Init>
  MX_SPI1_Init();
 8004336:	f000 fb29 	bl	800498c <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 800433a:	f000 fb07 	bl	800494c <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 800433e:	f000 fb5f 	bl	8004a00 <MX_SPI2_Init>
  MX_FATFS_Init();
 8004342:	f00c fdef 	bl	8010f24 <MX_FATFS_Init>
  MX_UART7_Init();
 8004346:	f000 fbff 	bl	8004b48 <MX_UART7_Init>
  MX_USART1_UART_Init();
 800434a:	f000 fc2d 	bl	8004ba8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800434e:	f000 fc5b 	bl	8004c08 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8004352:	f000 fc89 	bl	8004c68 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8004356:	f000 fa67 	bl	8004828 <MX_ADC1_Init>
  MX_UART4_Init();
 800435a:	f000 fbc5 	bl	8004ae8 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 800435e:	f015 fbe5 	bl	8019b2c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8004362:	f011 fbed 	bl	8015b40 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 8004366:	4ba0      	ldr	r3, [pc, #640]	; (80045e8 <main+0x2e4>)
 8004368:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 800436c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800436e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 8004372:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004376:	4618      	mov	r0, r3
 8004378:	f011 fdb4 	bl	8015ee4 <osMutexNew>
 800437c:	4602      	mov	r2, r0
 800437e:	4b9b      	ldr	r3, [pc, #620]	; (80045ec <main+0x2e8>)
 8004380:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 8004382:	4b9b      	ldr	r3, [pc, #620]	; (80045f0 <main+0x2ec>)
 8004384:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8004388:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800438a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 800438e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004392:	4618      	mov	r0, r3
 8004394:	f011 fda6 	bl	8015ee4 <osMutexNew>
 8004398:	4602      	mov	r2, r0
 800439a:	4b96      	ldr	r3, [pc, #600]	; (80045f4 <main+0x2f0>)
 800439c:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 800439e:	4b96      	ldr	r3, [pc, #600]	; (80045f8 <main+0x2f4>)
 80043a0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80043a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 80043aa:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043ae:	4618      	mov	r0, r3
 80043b0:	f011 fd98 	bl	8015ee4 <osMutexNew>
 80043b4:	4602      	mov	r2, r0
 80043b6:	4b91      	ldr	r3, [pc, #580]	; (80045fc <main+0x2f8>)
 80043b8:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 80043ba:	4b91      	ldr	r3, [pc, #580]	; (8004600 <main+0x2fc>)
 80043bc:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80043c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 80043c6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043ca:	4618      	mov	r0, r3
 80043cc:	f011 fd8a 	bl	8015ee4 <osMutexNew>
 80043d0:	4602      	mov	r2, r0
 80043d2:	4b8c      	ldr	r3, [pc, #560]	; (8004604 <main+0x300>)
 80043d4:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 80043d6:	4b8c      	ldr	r3, [pc, #560]	; (8004608 <main+0x304>)
 80043d8:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80043dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 80043e2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80043e6:	4618      	mov	r0, r3
 80043e8:	f011 fd7c 	bl	8015ee4 <osMutexNew>
 80043ec:	4602      	mov	r2, r0
 80043ee:	4b87      	ldr	r3, [pc, #540]	; (800460c <main+0x308>)
 80043f0:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 80043f2:	4b87      	ldr	r3, [pc, #540]	; (8004610 <main+0x30c>)
 80043f4:	f107 0460 	add.w	r4, r7, #96	; 0x60
 80043f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 80043fe:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004402:	4618      	mov	r0, r3
 8004404:	f011 fd6e 	bl	8015ee4 <osMutexNew>
 8004408:	4602      	mov	r2, r0
 800440a:	4b82      	ldr	r3, [pc, #520]	; (8004614 <main+0x310>)
 800440c:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 800440e:	4b82      	ldr	r3, [pc, #520]	; (8004618 <main+0x314>)
 8004410:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8004414:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004416:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 800441a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800441e:	4618      	mov	r0, r3
 8004420:	f011 fd60 	bl	8015ee4 <osMutexNew>
 8004424:	4602      	mov	r2, r0
 8004426:	4b7d      	ldr	r3, [pc, #500]	; (800461c <main+0x318>)
 8004428:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 800442a:	4b7d      	ldr	r3, [pc, #500]	; (8004620 <main+0x31c>)
 800442c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004430:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004432:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8004436:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800443a:	4618      	mov	r0, r3
 800443c:	f011 fd52 	bl	8015ee4 <osMutexNew>
 8004440:	4602      	mov	r2, r0
 8004442:	4b78      	ldr	r3, [pc, #480]	; (8004624 <main+0x320>)
 8004444:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 8004446:	4b78      	ldr	r3, [pc, #480]	; (8004628 <main+0x324>)
 8004448:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800444c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800444e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 8004452:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004456:	4618      	mov	r0, r3
 8004458:	f011 fd44 	bl	8015ee4 <osMutexNew>
 800445c:	4602      	mov	r2, r0
 800445e:	4b73      	ldr	r3, [pc, #460]	; (800462c <main+0x328>)
 8004460:	601a      	str	r2, [r3, #0]

	/* GPS Mutex */
	const osMutexAttr_t gps_mutex_attr = {
 8004462:	4b73      	ldr	r3, [pc, #460]	; (8004630 <main+0x32c>)
 8004464:	f107 0420 	add.w	r4, r7, #32
 8004468:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800446a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 800446e:	f107 0320 	add.w	r3, r7, #32
 8004472:	4618      	mov	r0, r3
 8004474:	f011 fd36 	bl	8015ee4 <osMutexNew>
 8004478:	4602      	mov	r2, r0
 800447a:	4b6e      	ldr	r3, [pc, #440]	; (8004634 <main+0x330>)
 800447c:	601a      	str	r2, [r3, #0]

	/* Battery Mutex */
	const osMutexAttr_t battery_mutex_attr = {
 800447e:	4b6e      	ldr	r3, [pc, #440]	; (8004638 <main+0x334>)
 8004480:	f107 0410 	add.w	r4, r7, #16
 8004484:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004486:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 800448a:	f107 0310 	add.w	r3, r7, #16
 800448e:	4618      	mov	r0, r3
 8004490:	f011 fd28 	bl	8015ee4 <osMutexNew>
 8004494:	4602      	mov	r2, r0
 8004496:	4b69      	ldr	r3, [pc, #420]	; (800463c <main+0x338>)
 8004498:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 800449a:	4b54      	ldr	r3, [pc, #336]	; (80045ec <main+0x2e8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a68      	ldr	r2, [pc, #416]	; (8004640 <main+0x33c>)
 80044a0:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 80044a2:	4b54      	ldr	r3, [pc, #336]	; (80045f4 <main+0x2f0>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a67      	ldr	r2, [pc, #412]	; (8004644 <main+0x340>)
 80044a8:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 80044aa:	4b54      	ldr	r3, [pc, #336]	; (80045fc <main+0x2f8>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a66      	ldr	r2, [pc, #408]	; (8004648 <main+0x344>)
 80044b0:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 80044b2:	4b5a      	ldr	r3, [pc, #360]	; (800461c <main+0x318>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a65      	ldr	r2, [pc, #404]	; (800464c <main+0x348>)
 80044b8:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 80044ba:	4b56      	ldr	r3, [pc, #344]	; (8004614 <main+0x310>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a64      	ldr	r2, [pc, #400]	; (8004650 <main+0x34c>)
 80044c0:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 80044c2:	4b52      	ldr	r3, [pc, #328]	; (800460c <main+0x308>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	4a63      	ldr	r2, [pc, #396]	; (8004654 <main+0x350>)
 80044c8:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 80044ca:	4b4e      	ldr	r3, [pc, #312]	; (8004604 <main+0x300>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a62      	ldr	r2, [pc, #392]	; (8004658 <main+0x354>)
 80044d0:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 80044d2:	4b54      	ldr	r3, [pc, #336]	; (8004624 <main+0x320>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a61      	ldr	r2, [pc, #388]	; (800465c <main+0x358>)
 80044d8:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 80044da:	4b54      	ldr	r3, [pc, #336]	; (800462c <main+0x328>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a60      	ldr	r2, [pc, #384]	; (8004660 <main+0x35c>)
 80044e0:	6013      	str	r3, [r2, #0]
	gps_mutex.mutex = gps_mutex_only;
 80044e2:	4b54      	ldr	r3, [pc, #336]	; (8004634 <main+0x330>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a5f      	ldr	r2, [pc, #380]	; (8004664 <main+0x360>)
 80044e8:	6013      	str	r3, [r2, #0]
	battery_mutex.mutex = battery_mutex_only;
 80044ea:	4b54      	ldr	r3, [pc, #336]	; (800463c <main+0x338>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a5e      	ldr	r2, [pc, #376]	; (8004668 <main+0x364>)
 80044f0:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 80044f2:	4b3c      	ldr	r3, [pc, #240]	; (80045e4 <main+0x2e0>)
 80044f4:	2201      	movs	r2, #1
 80044f6:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 80044f8:	4b3a      	ldr	r3, [pc, #232]	; (80045e4 <main+0x2e0>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 80044fe:	4b5b      	ldr	r3, [pc, #364]	; (800466c <main+0x368>)
 8004500:	229b      	movs	r2, #155	; 0x9b
 8004502:	701a      	strb	r2, [r3, #0]




#ifdef DEBUG
	const osMutexAttr_t print_mutex_attr = {
 8004504:	4b5a      	ldr	r3, [pc, #360]	; (8004670 <main+0x36c>)
 8004506:	463c      	mov	r4, r7
 8004508:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800450a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					  // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	print_mutex = osMutexNew(&print_mutex_attr);
 800450e:	463b      	mov	r3, r7
 8004510:	4618      	mov	r0, r3
 8004512:	f011 fce7 	bl	8015ee4 <osMutexNew>
 8004516:	4602      	mov	r2, r0
 8004518:	4b56      	ldr	r3, [pc, #344]	; (8004674 <main+0x370>)
 800451a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800451c:	2200      	movs	r2, #0
 800451e:	2196      	movs	r1, #150	; 0x96
 8004520:	2080      	movs	r0, #128	; 0x80
 8004522:	f011 ffb9 	bl	8016498 <osMessageQueueNew>
 8004526:	4602      	mov	r2, r0
 8004528:	4b53      	ldr	r3, [pc, #332]	; (8004678 <main+0x374>)
 800452a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800452c:	4a53      	ldr	r2, [pc, #332]	; (800467c <main+0x378>)
 800452e:	2100      	movs	r1, #0
 8004530:	4853      	ldr	r0, [pc, #332]	; (8004680 <main+0x37c>)
 8004532:	f011 fbc3 	bl	8015cbc <osThreadNew>
 8004536:	4602      	mov	r2, r0
 8004538:	4b52      	ldr	r3, [pc, #328]	; (8004684 <main+0x380>)
 800453a:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800453c:	4a52      	ldr	r2, [pc, #328]	; (8004688 <main+0x384>)
 800453e:	2100      	movs	r1, #0
 8004540:	4852      	ldr	r0, [pc, #328]	; (800468c <main+0x388>)
 8004542:	f011 fbbb 	bl	8015cbc <osThreadNew>
 8004546:	4602      	mov	r2, r0
 8004548:	4b51      	ldr	r3, [pc, #324]	; (8004690 <main+0x38c>)
 800454a:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 800454c:	4a51      	ldr	r2, [pc, #324]	; (8004694 <main+0x390>)
 800454e:	2100      	movs	r1, #0
 8004550:	4851      	ldr	r0, [pc, #324]	; (8004698 <main+0x394>)
 8004552:	f011 fbb3 	bl	8015cbc <osThreadNew>
 8004556:	4602      	mov	r2, r0
 8004558:	4b50      	ldr	r3, [pc, #320]	; (800469c <main+0x398>)
 800455a:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800455c:	4a50      	ldr	r2, [pc, #320]	; (80046a0 <main+0x39c>)
 800455e:	2100      	movs	r1, #0
 8004560:	4850      	ldr	r0, [pc, #320]	; (80046a4 <main+0x3a0>)
 8004562:	f011 fbab 	bl	8015cbc <osThreadNew>
 8004566:	4602      	mov	r2, r0
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <main+0x3a4>)
 800456a:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800456c:	4a4f      	ldr	r2, [pc, #316]	; (80046ac <main+0x3a8>)
 800456e:	2100      	movs	r1, #0
 8004570:	484f      	ldr	r0, [pc, #316]	; (80046b0 <main+0x3ac>)
 8004572:	f011 fba3 	bl	8015cbc <osThreadNew>
 8004576:	4602      	mov	r2, r0
 8004578:	4b4e      	ldr	r3, [pc, #312]	; (80046b4 <main+0x3b0>)
 800457a:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 800457c:	4a4e      	ldr	r2, [pc, #312]	; (80046b8 <main+0x3b4>)
 800457e:	2100      	movs	r1, #0
 8004580:	484e      	ldr	r0, [pc, #312]	; (80046bc <main+0x3b8>)
 8004582:	f011 fb9b 	bl	8015cbc <osThreadNew>
 8004586:	4602      	mov	r2, r0
 8004588:	4b4d      	ldr	r3, [pc, #308]	; (80046c0 <main+0x3bc>)
 800458a:	601a      	str	r2, [r3, #0]

  /* creation of task_fsm */
  task_fsmHandle = osThreadNew(vTaskFSM, NULL, &task_fsm_attributes);
 800458c:	4a4d      	ldr	r2, [pc, #308]	; (80046c4 <main+0x3c0>)
 800458e:	2100      	movs	r1, #0
 8004590:	484d      	ldr	r0, [pc, #308]	; (80046c8 <main+0x3c4>)
 8004592:	f011 fb93 	bl	8015cbc <osThreadNew>
 8004596:	4602      	mov	r2, r0
 8004598:	4b4c      	ldr	r3, [pc, #304]	; (80046cc <main+0x3c8>)
 800459a:	601a      	str	r2, [r3, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 800459c:	4a4c      	ldr	r2, [pc, #304]	; (80046d0 <main+0x3cc>)
 800459e:	2100      	movs	r1, #0
 80045a0:	484c      	ldr	r0, [pc, #304]	; (80046d4 <main+0x3d0>)
 80045a2:	f011 fb8b 	bl	8015cbc <osThreadNew>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b4b      	ldr	r3, [pc, #300]	; (80046d8 <main+0x3d4>)
 80045aa:	601a      	str	r2, [r3, #0]

  /* creation of task_battery */
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80045ac:	4a4b      	ldr	r2, [pc, #300]	; (80046dc <main+0x3d8>)
 80045ae:	2100      	movs	r1, #0
 80045b0:	484b      	ldr	r0, [pc, #300]	; (80046e0 <main+0x3dc>)
 80045b2:	f011 fb83 	bl	8015cbc <osThreadNew>
 80045b6:	4602      	mov	r2, r0
 80045b8:	4b4a      	ldr	r3, [pc, #296]	; (80046e4 <main+0x3e0>)
 80045ba:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80045bc:	4a4a      	ldr	r2, [pc, #296]	; (80046e8 <main+0x3e4>)
 80045be:	2100      	movs	r1, #0
 80045c0:	484a      	ldr	r0, [pc, #296]	; (80046ec <main+0x3e8>)
 80045c2:	f011 fb7b 	bl	8015cbc <osThreadNew>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b49      	ldr	r3, [pc, #292]	; (80046f0 <main+0x3ec>)
 80045ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80045cc:	f011 fb0e 	bl	8015bec <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80045d0:	e7fe      	b.n	80045d0 <main+0x2cc>
 80045d2:	bf00      	nop
 80045d4:	e0042000 	.word	0xe0042000
 80045d8:	07e01bff 	.word	0x07e01bff
 80045dc:	00070003 	.word	0x00070003
 80045e0:	20000330 	.word	0x20000330
 80045e4:	20000340 	.word	0x20000340
 80045e8:	0801d198 	.word	0x0801d198
 80045ec:	2000fda0 	.word	0x2000fda0
 80045f0:	0801d1b8 	.word	0x0801d1b8
 80045f4:	20019fe0 	.word	0x20019fe0
 80045f8:	0801d1d8 	.word	0x0801d1d8
 80045fc:	2000bb04 	.word	0x2000bb04
 8004600:	0801d200 	.word	0x0801d200
 8004604:	2000fd28 	.word	0x2000fd28
 8004608:	0801d228 	.word	0x0801d228
 800460c:	2001c23c 	.word	0x2001c23c
 8004610:	0801d248 	.word	0x0801d248
 8004614:	2000fd9c 	.word	0x2000fd9c
 8004618:	0801d270 	.word	0x0801d270
 800461c:	2000fd30 	.word	0x2000fd30
 8004620:	0801d294 	.word	0x0801d294
 8004624:	2000bb00 	.word	0x2000bb00
 8004628:	0801d2b8 	.word	0x0801d2b8
 800462c:	2000bb08 	.word	0x2000bb08
 8004630:	0801d2d8 	.word	0x0801d2d8
 8004634:	20011da4 	.word	0x20011da4
 8004638:	0801d2fc 	.word	0x0801d2fc
 800463c:	2000fd2c 	.word	0x2000fd2c
 8004640:	2000fc44 	.word	0x2000fc44
 8004644:	2001c2a8 	.word	0x2001c2a8
 8004648:	2000fd34 	.word	0x2000fd34
 800464c:	2000bb14 	.word	0x2000bb14
 8004650:	20009728 	.word	0x20009728
 8004654:	2000fb84 	.word	0x2000fb84
 8004658:	20011da8 	.word	0x20011da8
 800465c:	2000b9b8 	.word	0x2000b9b8
 8004660:	2000bb0c 	.word	0x2000bb0c
 8004664:	20017ef0 	.word	0x20017ef0
 8004668:	20009794 	.word	0x20009794
 800466c:	20013e2c 	.word	0x20013e2c
 8004670:	0801d318 	.word	0x0801d318
 8004674:	2000965c 	.word	0x2000965c
 8004678:	20017fdc 	.word	0x20017fdc
 800467c:	0801d6d0 	.word	0x0801d6d0
 8004680:	08004ead 	.word	0x08004ead
 8004684:	200096c4 	.word	0x200096c4
 8004688:	0801d6f4 	.word	0x0801d6f4
 800468c:	08006c41 	.word	0x08006c41
 8004690:	2000fbe0 	.word	0x2000fbe0
 8004694:	0801d718 	.word	0x0801d718
 8004698:	08006041 	.word	0x08006041
 800469c:	2001c2a4 	.word	0x2001c2a4
 80046a0:	0801d73c 	.word	0x0801d73c
 80046a4:	080069e1 	.word	0x080069e1
 80046a8:	2000bb1c 	.word	0x2000bb1c
 80046ac:	0801d760 	.word	0x0801d760
 80046b0:	0800664d 	.word	0x0800664d
 80046b4:	20009958 	.word	0x20009958
 80046b8:	0801d784 	.word	0x0801d784
 80046bc:	080064b5 	.word	0x080064b5
 80046c0:	2000fbdc 	.word	0x2000fbdc
 80046c4:	0801d7a8 	.word	0x0801d7a8
 80046c8:	080061b1 	.word	0x080061b1
 80046cc:	2001c2a0 	.word	0x2001c2a0
 80046d0:	0801d7cc 	.word	0x0801d7cc
 80046d4:	08006299 	.word	0x08006299
 80046d8:	20009660 	.word	0x20009660
 80046dc:	0801d7f0 	.word	0x0801d7f0
 80046e0:	08005c11 	.word	0x08005c11
 80046e4:	2001c17c 	.word	0x2001c17c
 80046e8:	0801d814 	.word	0x0801d814
 80046ec:	0800702d 	.word	0x0800702d
 80046f0:	20017eec 	.word	0x20017eec

080046f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b0b4      	sub	sp, #208	; 0xd0
 80046f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046fa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80046fe:	2230      	movs	r2, #48	; 0x30
 8004700:	2100      	movs	r1, #0
 8004702:	4618      	mov	r0, r3
 8004704:	f015 ffbf 	bl	801a686 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004708:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800470c:	2200      	movs	r2, #0
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	605a      	str	r2, [r3, #4]
 8004712:	609a      	str	r2, [r3, #8]
 8004714:	60da      	str	r2, [r3, #12]
 8004716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004718:	f107 0308 	add.w	r3, r7, #8
 800471c:	2284      	movs	r2, #132	; 0x84
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f015 ffb0 	bl	801a686 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004726:	4b3d      	ldr	r3, [pc, #244]	; (800481c <SystemClock_Config+0x128>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	4a3c      	ldr	r2, [pc, #240]	; (800481c <SystemClock_Config+0x128>)
 800472c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004730:	6413      	str	r3, [r2, #64]	; 0x40
 8004732:	4b3a      	ldr	r3, [pc, #232]	; (800481c <SystemClock_Config+0x128>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800473e:	4b38      	ldr	r3, [pc, #224]	; (8004820 <SystemClock_Config+0x12c>)
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004746:	4a36      	ldr	r2, [pc, #216]	; (8004820 <SystemClock_Config+0x12c>)
 8004748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	4b34      	ldr	r3, [pc, #208]	; (8004820 <SystemClock_Config+0x12c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800475a:	2301      	movs	r3, #1
 800475c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004764:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004768:	2302      	movs	r3, #2
 800476a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800476e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004776:	2304      	movs	r3, #4
 8004778:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 800477c:	23a8      	movs	r3, #168	; 0xa8
 800477e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004782:	2302      	movs	r3, #2
 8004784:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8004788:	2307      	movs	r3, #7
 800478a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800478e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004792:	4618      	mov	r0, r3
 8004794:	f005 fbe2 	bl	8009f5c <HAL_RCC_OscConfig>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800479e:	f000 fba1 	bl	8004ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047a2:	230f      	movs	r3, #15
 80047a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047a8:	2302      	movs	r3, #2
 80047aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047ae:	2300      	movs	r3, #0
 80047b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80047b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047c4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047c8:	2105      	movs	r1, #5
 80047ca:	4618      	mov	r0, r3
 80047cc:	f005 fe6a 	bl	800a4a4 <HAL_RCC_ClockConfig>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80047d6:	f000 fb85 	bl	8004ee4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 80047da:	4b12      	ldr	r3, [pc, #72]	; (8004824 <SystemClock_Config+0x130>)
 80047dc:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80047de:	2300      	movs	r3, #0
 80047e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80047e2:	2300      	movs	r3, #0
 80047e4:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80047e6:	2300      	movs	r3, #0
 80047e8:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80047ea:	2300      	movs	r3, #0
 80047ec:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80047ee:	2300      	movs	r3, #0
 80047f0:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80047f8:	2300      	movs	r3, #0
 80047fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047fe:	f107 0308 	add.w	r3, r7, #8
 8004802:	4618      	mov	r0, r3
 8004804:	f006 f878 	bl	800a8f8 <HAL_RCCEx_PeriphCLKConfig>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800480e:	f000 fb69 	bl	8004ee4 <Error_Handler>
  }
}
 8004812:	bf00      	nop
 8004814:	37d0      	adds	r7, #208	; 0xd0
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	40023800 	.word	0x40023800
 8004820:	40007000 	.word	0x40007000
 8004824:	00a013c0 	.word	0x00a013c0

08004828 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800482e:	463b      	mov	r3, r7
 8004830:	2200      	movs	r2, #0
 8004832:	601a      	str	r2, [r3, #0]
 8004834:	605a      	str	r2, [r3, #4]
 8004836:	609a      	str	r2, [r3, #8]
 8004838:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800483a:	4b40      	ldr	r3, [pc, #256]	; (800493c <MX_ADC1_Init+0x114>)
 800483c:	4a40      	ldr	r2, [pc, #256]	; (8004940 <MX_ADC1_Init+0x118>)
 800483e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004840:	4b3e      	ldr	r3, [pc, #248]	; (800493c <MX_ADC1_Init+0x114>)
 8004842:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004846:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004848:	4b3c      	ldr	r3, [pc, #240]	; (800493c <MX_ADC1_Init+0x114>)
 800484a:	2200      	movs	r2, #0
 800484c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800484e:	4b3b      	ldr	r3, [pc, #236]	; (800493c <MX_ADC1_Init+0x114>)
 8004850:	2201      	movs	r2, #1
 8004852:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004854:	4b39      	ldr	r3, [pc, #228]	; (800493c <MX_ADC1_Init+0x114>)
 8004856:	2201      	movs	r2, #1
 8004858:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <MX_ADC1_Init+0x114>)
 800485c:	2200      	movs	r2, #0
 800485e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004862:	4b36      	ldr	r3, [pc, #216]	; (800493c <MX_ADC1_Init+0x114>)
 8004864:	2200      	movs	r2, #0
 8004866:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004868:	4b34      	ldr	r3, [pc, #208]	; (800493c <MX_ADC1_Init+0x114>)
 800486a:	4a36      	ldr	r2, [pc, #216]	; (8004944 <MX_ADC1_Init+0x11c>)
 800486c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800486e:	4b33      	ldr	r3, [pc, #204]	; (800493c <MX_ADC1_Init+0x114>)
 8004870:	2200      	movs	r2, #0
 8004872:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8004874:	4b31      	ldr	r3, [pc, #196]	; (800493c <MX_ADC1_Init+0x114>)
 8004876:	2205      	movs	r2, #5
 8004878:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800487a:	4b30      	ldr	r3, [pc, #192]	; (800493c <MX_ADC1_Init+0x114>)
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004882:	4b2e      	ldr	r3, [pc, #184]	; (800493c <MX_ADC1_Init+0x114>)
 8004884:	2201      	movs	r2, #1
 8004886:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004888:	482c      	ldr	r0, [pc, #176]	; (800493c <MX_ADC1_Init+0x114>)
 800488a:	f002 fe5d 	bl	8007548 <HAL_ADC_Init>
 800488e:	4603      	mov	r3, r0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8004894:	f000 fb26 	bl	8004ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8004898:	2308      	movs	r3, #8
 800489a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800489c:	2301      	movs	r3, #1
 800489e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80048a0:	2307      	movs	r3, #7
 80048a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048a4:	463b      	mov	r3, r7
 80048a6:	4619      	mov	r1, r3
 80048a8:	4824      	ldr	r0, [pc, #144]	; (800493c <MX_ADC1_Init+0x114>)
 80048aa:	f002 ffe7 	bl	800787c <HAL_ADC_ConfigChannel>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80048b4:	f000 fb16 	bl	8004ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80048b8:	230a      	movs	r3, #10
 80048ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80048bc:	2302      	movs	r3, #2
 80048be:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80048c0:	2305      	movs	r3, #5
 80048c2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048c4:	463b      	mov	r3, r7
 80048c6:	4619      	mov	r1, r3
 80048c8:	481c      	ldr	r0, [pc, #112]	; (800493c <MX_ADC1_Init+0x114>)
 80048ca:	f002 ffd7 	bl	800787c <HAL_ADC_ConfigChannel>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80048d4:	f000 fb06 	bl	8004ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80048d8:	230b      	movs	r3, #11
 80048da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80048dc:	2303      	movs	r3, #3
 80048de:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048e0:	463b      	mov	r3, r7
 80048e2:	4619      	mov	r1, r3
 80048e4:	4815      	ldr	r0, [pc, #84]	; (800493c <MX_ADC1_Init+0x114>)
 80048e6:	f002 ffc9 	bl	800787c <HAL_ADC_ConfigChannel>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80048f0:	f000 faf8 	bl	8004ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80048f4:	230f      	movs	r3, #15
 80048f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80048f8:	2304      	movs	r3, #4
 80048fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80048fc:	2307      	movs	r3, #7
 80048fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004900:	463b      	mov	r3, r7
 8004902:	4619      	mov	r1, r3
 8004904:	480d      	ldr	r0, [pc, #52]	; (800493c <MX_ADC1_Init+0x114>)
 8004906:	f002 ffb9 	bl	800787c <HAL_ADC_ConfigChannel>
 800490a:	4603      	mov	r3, r0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8004910:	f000 fae8 	bl	8004ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <MX_ADC1_Init+0x120>)
 8004916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004918:	2305      	movs	r3, #5
 800491a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800491c:	2301      	movs	r3, #1
 800491e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004920:	463b      	mov	r3, r7
 8004922:	4619      	mov	r1, r3
 8004924:	4805      	ldr	r0, [pc, #20]	; (800493c <MX_ADC1_Init+0x114>)
 8004926:	f002 ffa9 	bl	800787c <HAL_ADC_ConfigChannel>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d001      	beq.n	8004934 <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8004930:	f000 fad8 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004934:	bf00      	nop
 8004936:	3710      	adds	r7, #16
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	2000fb94 	.word	0x2000fb94
 8004940:	40012000 	.word	0x40012000
 8004944:	0f000001 	.word	0x0f000001
 8004948:	10000012 	.word	0x10000012

0800494c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004950:	4b0c      	ldr	r3, [pc, #48]	; (8004984 <MX_SDMMC1_SD_Init+0x38>)
 8004952:	4a0d      	ldr	r2, [pc, #52]	; (8004988 <MX_SDMMC1_SD_Init+0x3c>)
 8004954:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <MX_SDMMC1_SD_Init+0x38>)
 8004958:	2200      	movs	r2, #0
 800495a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800495c:	4b09      	ldr	r3, [pc, #36]	; (8004984 <MX_SDMMC1_SD_Init+0x38>)
 800495e:	2200      	movs	r2, #0
 8004960:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <MX_SDMMC1_SD_Init+0x38>)
 8004964:	2200      	movs	r2, #0
 8004966:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004968:	4b06      	ldr	r3, [pc, #24]	; (8004984 <MX_SDMMC1_SD_Init+0x38>)
 800496a:	2200      	movs	r2, #0
 800496c:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800496e:	4b05      	ldr	r3, [pc, #20]	; (8004984 <MX_SDMMC1_SD_Init+0x38>)
 8004970:	2200      	movs	r2, #0
 8004972:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8004974:	4b03      	ldr	r3, [pc, #12]	; (8004984 <MX_SDMMC1_SD_Init+0x38>)
 8004976:	2200      	movs	r2, #0
 8004978:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800497a:	bf00      	nop
 800497c:	46bd      	mov	sp, r7
 800497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004982:	4770      	bx	lr
 8004984:	2000ba7c 	.word	0x2000ba7c
 8004988:	40012c00 	.word	0x40012c00

0800498c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8004990:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <MX_SPI1_Init+0x6c>)
 8004992:	4a1a      	ldr	r2, [pc, #104]	; (80049fc <MX_SPI1_Init+0x70>)
 8004994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8004996:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <MX_SPI1_Init+0x6c>)
 8004998:	2200      	movs	r2, #0
 800499a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800499c:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <MX_SPI1_Init+0x6c>)
 800499e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049a4:	4b14      	ldr	r3, [pc, #80]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049a6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80049aa:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049b2:	4b11      	ldr	r3, [pc, #68]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80049b8:	4b0f      	ldr	r3, [pc, #60]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049be:	4b0e      	ldr	r3, [pc, #56]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049c4:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049c6:	2200      	movs	r2, #0
 80049c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ca:	4b0b      	ldr	r3, [pc, #44]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80049d0:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049d2:	2207      	movs	r2, #7
 80049d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80049d6:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049d8:	2200      	movs	r2, #0
 80049da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80049dc:	4b06      	ldr	r3, [pc, #24]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049de:	2200      	movs	r2, #0
 80049e0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80049e2:	4805      	ldr	r0, [pc, #20]	; (80049f8 <MX_SPI1_Init+0x6c>)
 80049e4:	f007 fe34 	bl	800c650 <HAL_SPI_Init>
 80049e8:	4603      	mov	r3, r0
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d001      	beq.n	80049f2 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 80049ee:	f000 fa79 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80049f2:	bf00      	nop
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20017f78 	.word	0x20017f78
 80049fc:	40013000 	.word	0x40013000

08004a00 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a04:	4b19      	ldr	r3, [pc, #100]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a06:	4a1a      	ldr	r2, [pc, #104]	; (8004a70 <MX_SPI2_Init+0x70>)
 8004a08:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8004a0a:	4b18      	ldr	r3, [pc, #96]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004a10:	4b16      	ldr	r3, [pc, #88]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a16:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a18:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a1e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a20:	4b12      	ldr	r3, [pc, #72]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8004a2c:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a32:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a38:	4b0c      	ldr	r3, [pc, #48]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a3e:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004a44:	4b09      	ldr	r3, [pc, #36]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a46:	2207      	movs	r2, #7
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a4a:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a50:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a52:	2200      	movs	r2, #0
 8004a54:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a56:	4805      	ldr	r0, [pc, #20]	; (8004a6c <MX_SPI2_Init+0x6c>)
 8004a58:	f007 fdfa 	bl	800c650 <HAL_SPI_Init>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d001      	beq.n	8004a66 <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8004a62:	f000 fa3f 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20009730 	.word	0x20009730
 8004a70:	40003800 	.word	0x40003800

08004a74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004a78:	4b19      	ldr	r3, [pc, #100]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004a7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ae4 <MX_SPI3_Init+0x70>)
 8004a7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8004a7e:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004a84:	4b16      	ldr	r3, [pc, #88]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a8c:	4b14      	ldr	r3, [pc, #80]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004a8e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a94:	4b12      	ldr	r3, [pc, #72]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004a96:	2200      	movs	r2, #0
 8004a98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a9a:	4b11      	ldr	r3, [pc, #68]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004aa6:	4b0e      	ldr	r3, [pc, #56]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004aac:	4b0c      	ldr	r3, [pc, #48]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ab2:	4b0b      	ldr	r3, [pc, #44]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004ab8:	4b09      	ldr	r3, [pc, #36]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004aba:	2207      	movs	r2, #7
 8004abc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004abe:	4b08      	ldr	r3, [pc, #32]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004ac4:	4b06      	ldr	r3, [pc, #24]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004aca:	4805      	ldr	r0, [pc, #20]	; (8004ae0 <MX_SPI3_Init+0x6c>)
 8004acc:	f007 fdc0 	bl	800c650 <HAL_SPI_Init>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d001      	beq.n	8004ada <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8004ad6:	f000 fa05 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004ada:	bf00      	nop
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	2000fb20 	.word	0x2000fb20
 8004ae4:	40003c00 	.word	0x40003c00

08004ae8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004aec:	4b14      	ldr	r3, [pc, #80]	; (8004b40 <MX_UART4_Init+0x58>)
 8004aee:	4a15      	ldr	r2, [pc, #84]	; (8004b44 <MX_UART4_Init+0x5c>)
 8004af0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004af2:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <MX_UART4_Init+0x58>)
 8004af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004af8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004afa:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <MX_UART4_Init+0x58>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b02:	2200      	movs	r2, #0
 8004b04:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004b06:	4b0e      	ldr	r3, [pc, #56]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004b0c:	4b0c      	ldr	r3, [pc, #48]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b0e:	220c      	movs	r2, #12
 8004b10:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b18:	4b09      	ldr	r3, [pc, #36]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b1e:	4b08      	ldr	r3, [pc, #32]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b20:	2200      	movs	r2, #0
 8004b22:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b24:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b26:	2200      	movs	r2, #0
 8004b28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004b2a:	4805      	ldr	r0, [pc, #20]	; (8004b40 <MX_UART4_Init+0x58>)
 8004b2c:	f008 fecc 	bl	800d8c8 <HAL_UART_Init>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004b36:	f000 f9d5 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004b3a:	bf00      	nop
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	20017ef8 	.word	0x20017ef8
 8004b44:	40004c00 	.word	0x40004c00

08004b48 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004b4c:	4b14      	ldr	r3, [pc, #80]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <MX_UART7_Init+0x5c>)
 8004b50:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004b52:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b58:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004b60:	4b0f      	ldr	r3, [pc, #60]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b68:	2200      	movs	r2, #0
 8004b6a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b6e:	220c      	movs	r2, #12
 8004b70:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b72:	4b0b      	ldr	r3, [pc, #44]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b7e:	4b08      	ldr	r3, [pc, #32]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b84:	4b06      	ldr	r3, [pc, #24]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b86:	2200      	movs	r2, #0
 8004b88:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004b8a:	4805      	ldr	r0, [pc, #20]	; (8004ba0 <MX_UART7_Init+0x58>)
 8004b8c:	f008 fe9c 	bl	800d8c8 <HAL_UART_Init>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d001      	beq.n	8004b9a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004b96:	f000 f9a5 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004b9a:	bf00      	nop
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	2000979c 	.word	0x2000979c
 8004ba4:	40007800 	.word	0x40007800

08004ba8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bac:	4b14      	ldr	r3, [pc, #80]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bae:	4a15      	ldr	r2, [pc, #84]	; (8004c04 <MX_USART1_UART_Init+0x5c>)
 8004bb0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004bb2:	4b13      	ldr	r3, [pc, #76]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bb4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004bb8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004bba:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004bc0:	4b0f      	ldr	r3, [pc, #60]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bc6:	4b0e      	ldr	r3, [pc, #56]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8004bcc:	4b0c      	ldr	r3, [pc, #48]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bce:	2204      	movs	r2, #4
 8004bd0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bd2:	4b0b      	ldr	r3, [pc, #44]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd8:	4b09      	ldr	r3, [pc, #36]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bde:	4b08      	ldr	r3, [pc, #32]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004be4:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004be6:	2200      	movs	r2, #0
 8004be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004bea:	4805      	ldr	r0, [pc, #20]	; (8004c00 <MX_USART1_UART_Init+0x58>)
 8004bec:	f008 fe6c 	bl	800d8c8 <HAL_UART_Init>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004bf6:	f000 f975 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004bfa:	bf00      	nop
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	2000fca8 	.word	0x2000fca8
 8004c04:	40011000 	.word	0x40011000

08004c08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c0c:	4b14      	ldr	r3, [pc, #80]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c0e:	4a15      	ldr	r2, [pc, #84]	; (8004c64 <MX_USART2_UART_Init+0x5c>)
 8004c10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004c12:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c14:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c1a:	4b11      	ldr	r3, [pc, #68]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c20:	4b0f      	ldr	r3, [pc, #60]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c26:	4b0e      	ldr	r3, [pc, #56]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8004c2c:	4b0c      	ldr	r3, [pc, #48]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c2e:	2204      	movs	r2, #4
 8004c30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c32:	4b0b      	ldr	r3, [pc, #44]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c3e:	4b08      	ldr	r3, [pc, #32]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c44:	4b06      	ldr	r3, [pc, #24]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c4a:	4805      	ldr	r0, [pc, #20]	; (8004c60 <MX_USART2_UART_Init+0x58>)
 8004c4c:	f008 fe3c 	bl	800d8c8 <HAL_UART_Init>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004c56:	f000 f945 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c5a:	bf00      	nop
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	2001a040 	.word	0x2001a040
 8004c64:	40004400 	.word	0x40004400

08004c68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004c6c:	4b14      	ldr	r3, [pc, #80]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <MX_USART3_UART_Init+0x5c>)
 8004c70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004c72:	4b13      	ldr	r3, [pc, #76]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c74:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004c7a:	4b11      	ldr	r3, [pc, #68]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004c80:	4b0f      	ldr	r3, [pc, #60]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004c86:	4b0e      	ldr	r3, [pc, #56]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c88:	2200      	movs	r2, #0
 8004c8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8004c8c:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c8e:	2204      	movs	r2, #4
 8004c90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c92:	4b0b      	ldr	r3, [pc, #44]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c94:	2200      	movs	r2, #0
 8004c96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c98:	4b09      	ldr	r3, [pc, #36]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c9e:	4b08      	ldr	r3, [pc, #32]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004caa:	4805      	ldr	r0, [pc, #20]	; (8004cc0 <MX_USART3_UART_Init+0x58>)
 8004cac:	f008 fe0c 	bl	800d8c8 <HAL_UART_Init>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004cb6:	f000 f915 	bl	8004ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004cba:	bf00      	nop
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	2000987c 	.word	0x2000987c
 8004cc4:	40004800 	.word	0x40004800

08004cc8 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004cce:	4b36      	ldr	r3, [pc, #216]	; (8004da8 <MX_DMA_Init+0xe0>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	4a35      	ldr	r2, [pc, #212]	; (8004da8 <MX_DMA_Init+0xe0>)
 8004cd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cda:	4b33      	ldr	r3, [pc, #204]	; (8004da8 <MX_DMA_Init+0xe0>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ce2:	607b      	str	r3, [r7, #4]
 8004ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004ce6:	4b30      	ldr	r3, [pc, #192]	; (8004da8 <MX_DMA_Init+0xe0>)
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	4a2f      	ldr	r2, [pc, #188]	; (8004da8 <MX_DMA_Init+0xe0>)
 8004cec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cf2:	4b2d      	ldr	r3, [pc, #180]	; (8004da8 <MX_DMA_Init+0xe0>)
 8004cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2105      	movs	r1, #5
 8004d02:	200b      	movs	r0, #11
 8004d04:	f003 f938 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004d08:	200b      	movs	r0, #11
 8004d0a:	f003 f951 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004d0e:	2200      	movs	r2, #0
 8004d10:	2105      	movs	r1, #5
 8004d12:	200c      	movs	r0, #12
 8004d14:	f003 f930 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004d18:	200c      	movs	r0, #12
 8004d1a:	f003 f949 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8004d1e:	2200      	movs	r2, #0
 8004d20:	2105      	movs	r1, #5
 8004d22:	200d      	movs	r0, #13
 8004d24:	f003 f928 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004d28:	200d      	movs	r0, #13
 8004d2a:	f003 f941 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004d2e:	2200      	movs	r2, #0
 8004d30:	2105      	movs	r1, #5
 8004d32:	200e      	movs	r0, #14
 8004d34:	f003 f920 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004d38:	200e      	movs	r0, #14
 8004d3a:	f003 f939 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8004d3e:	2200      	movs	r2, #0
 8004d40:	2105      	movs	r1, #5
 8004d42:	2010      	movs	r0, #16
 8004d44:	f003 f918 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004d48:	2010      	movs	r0, #16
 8004d4a:	f003 f931 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2105      	movs	r1, #5
 8004d52:	2038      	movs	r0, #56	; 0x38
 8004d54:	f003 f910 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004d58:	2038      	movs	r0, #56	; 0x38
 8004d5a:	f003 f929 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2105      	movs	r1, #5
 8004d62:	203a      	movs	r0, #58	; 0x3a
 8004d64:	f003 f908 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004d68:	203a      	movs	r0, #58	; 0x3a
 8004d6a:	f003 f921 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8004d6e:	2200      	movs	r2, #0
 8004d70:	2105      	movs	r1, #5
 8004d72:	203b      	movs	r0, #59	; 0x3b
 8004d74:	f003 f900 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004d78:	203b      	movs	r0, #59	; 0x3b
 8004d7a:	f003 f919 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2105      	movs	r1, #5
 8004d82:	203c      	movs	r0, #60	; 0x3c
 8004d84:	f003 f8f8 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004d88:	203c      	movs	r0, #60	; 0x3c
 8004d8a:	f003 f911 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2105      	movs	r1, #5
 8004d92:	2045      	movs	r0, #69	; 0x45
 8004d94:	f003 f8f0 	bl	8007f78 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004d98:	2045      	movs	r0, #69	; 0x45
 8004d9a:	f003 f909 	bl	8007fb0 <HAL_NVIC_EnableIRQ>

}
 8004d9e:	bf00      	nop
 8004da0:	3708      	adds	r7, #8
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	40023800 	.word	0x40023800

08004dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08c      	sub	sp, #48	; 0x30
 8004db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004db2:	f107 031c 	add.w	r3, r7, #28
 8004db6:	2200      	movs	r2, #0
 8004db8:	601a      	str	r2, [r3, #0]
 8004dba:	605a      	str	r2, [r3, #4]
 8004dbc:	609a      	str	r2, [r3, #8]
 8004dbe:	60da      	str	r2, [r3, #12]
 8004dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4a36      	ldr	r2, [pc, #216]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004dc8:	f043 0304 	orr.w	r3, r3, #4
 8004dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dce:	4b34      	ldr	r3, [pc, #208]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004dda:	4b31      	ldr	r3, [pc, #196]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dde:	4a30      	ldr	r2, [pc, #192]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de4:	6313      	str	r3, [r2, #48]	; 0x30
 8004de6:	4b2e      	ldr	r3, [pc, #184]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dee:	617b      	str	r3, [r7, #20]
 8004df0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df6:	4a2a      	ldr	r2, [pc, #168]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004df8:	f043 0301 	orr.w	r3, r3, #1
 8004dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dfe:	4b28      	ldr	r3, [pc, #160]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e0a:	4b25      	ldr	r3, [pc, #148]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a24      	ldr	r2, [pc, #144]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e10:	f043 0302 	orr.w	r3, r3, #2
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b22      	ldr	r3, [pc, #136]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e22:	4b1f      	ldr	r3, [pc, #124]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	4a1e      	ldr	r2, [pc, #120]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e28:	f043 0310 	orr.w	r3, r3, #16
 8004e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2e:	4b1c      	ldr	r3, [pc, #112]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f003 0310 	and.w	r3, r3, #16
 8004e36:	60bb      	str	r3, [r7, #8]
 8004e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e3a:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3e:	4a18      	ldr	r2, [pc, #96]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e40:	f043 0308 	orr.w	r3, r3, #8
 8004e44:	6313      	str	r3, [r2, #48]	; 0x30
 8004e46:	4b16      	ldr	r3, [pc, #88]	; (8004ea0 <MX_GPIO_Init+0xf4>)
 8004e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4a:	f003 0308 	and.w	r3, r3, #8
 8004e4e:	607b      	str	r3, [r7, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004e52:	2200      	movs	r2, #0
 8004e54:	f643 0103 	movw	r1, #14339	; 0x3803
 8004e58:	4812      	ldr	r0, [pc, #72]	; (8004ea4 <MX_GPIO_Init+0xf8>)
 8004e5a:	f003 fe8d 	bl	8008b78 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004e5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e64:	2300      	movs	r3, #0
 8004e66:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e6c:	f107 031c 	add.w	r3, r7, #28
 8004e70:	4619      	mov	r1, r3
 8004e72:	480d      	ldr	r0, [pc, #52]	; (8004ea8 <MX_GPIO_Init+0xfc>)
 8004e74:	f003 fcbe 	bl	80087f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin BUZZER_Pin LED1_Pin 
                           LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004e78:	f643 0303 	movw	r3, #14339	; 0x3803
 8004e7c:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e82:	2300      	movs	r3, #0
 8004e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e86:	2300      	movs	r3, #0
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004e8a:	f107 031c 	add.w	r3, r7, #28
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4804      	ldr	r0, [pc, #16]	; (8004ea4 <MX_GPIO_Init+0xf8>)
 8004e92:	f003 fcaf 	bl	80087f4 <HAL_GPIO_Init>

}
 8004e96:	bf00      	nop
 8004e98:	3730      	adds	r7, #48	; 0x30
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	40020c00 	.word	0x40020c00
 8004ea8:	40020800 	.word	0x40020800

08004eac <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004eb4:	f014 fe3a 	bl	8019b2c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8004eb8:	2001      	movs	r0, #1
 8004eba:	f010 ffa5 	bl	8015e08 <osDelay>
 8004ebe:	e7fb      	b.n	8004eb8 <StartDefaultTask+0xc>

08004ec0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a04      	ldr	r2, [pc, #16]	; (8004ee0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004ed2:	f002 faf7 	bl	80074c4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004ed6:	bf00      	nop
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	40010000 	.word	0x40010000

08004ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004ee8:	bf00      	nop
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr
	...

08004ef4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004efa:	4b11      	ldr	r3, [pc, #68]	; (8004f40 <HAL_MspInit+0x4c>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a10      	ldr	r2, [pc, #64]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b0e      	ldr	r3, [pc, #56]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	607b      	str	r3, [r7, #4]
 8004f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f12:	4b0b      	ldr	r3, [pc, #44]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	4a0a      	ldr	r2, [pc, #40]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f1e:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <HAL_MspInit+0x4c>)
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f26:	603b      	str	r3, [r7, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	210f      	movs	r1, #15
 8004f2e:	f06f 0001 	mvn.w	r0, #1
 8004f32:	f003 f821 	bl	8007f78 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f36:	bf00      	nop
 8004f38:	3708      	adds	r7, #8
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	40023800 	.word	0x40023800

08004f44 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b08a      	sub	sp, #40	; 0x28
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f4c:	f107 0314 	add.w	r3, r7, #20
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]
 8004f54:	605a      	str	r2, [r3, #4]
 8004f56:	609a      	str	r2, [r3, #8]
 8004f58:	60da      	str	r2, [r3, #12]
 8004f5a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a39      	ldr	r2, [pc, #228]	; (8005048 <HAL_ADC_MspInit+0x104>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d16b      	bne.n	800503e <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f66:	4b39      	ldr	r3, [pc, #228]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	4a38      	ldr	r2, [pc, #224]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f70:	6453      	str	r3, [r2, #68]	; 0x44
 8004f72:	4b36      	ldr	r3, [pc, #216]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f7a:	613b      	str	r3, [r7, #16]
 8004f7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f7e:	4b33      	ldr	r3, [pc, #204]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f82:	4a32      	ldr	r2, [pc, #200]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f84:	f043 0304 	orr.w	r3, r3, #4
 8004f88:	6313      	str	r3, [r2, #48]	; 0x30
 8004f8a:	4b30      	ldr	r3, [pc, #192]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f96:	4b2d      	ldr	r3, [pc, #180]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	4a2c      	ldr	r2, [pc, #176]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004f9c:	f043 0302 	orr.w	r3, r3, #2
 8004fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa2:	4b2a      	ldr	r3, [pc, #168]	; (800504c <HAL_ADC_MspInit+0x108>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
 8004fae:	2323      	movs	r3, #35	; 0x23
 8004fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004fba:	f107 0314 	add.w	r3, r7, #20
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4823      	ldr	r0, [pc, #140]	; (8005050 <HAL_ADC_MspInit+0x10c>)
 8004fc2:	f003 fc17 	bl	80087f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fca:	2303      	movs	r3, #3
 8004fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8004fd2:	f107 0314 	add.w	r3, r7, #20
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	481e      	ldr	r0, [pc, #120]	; (8005054 <HAL_ADC_MspInit+0x110>)
 8004fda:	f003 fc0b 	bl	80087f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8004fde:	4b1e      	ldr	r3, [pc, #120]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8004fe0:	4a1e      	ldr	r2, [pc, #120]	; (800505c <HAL_ADC_MspInit+0x118>)
 8004fe2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004fe4:	4b1c      	ldr	r3, [pc, #112]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004fea:	4b1b      	ldr	r3, [pc, #108]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8004fec:	2200      	movs	r2, #0
 8004fee:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ff0:	4b19      	ldr	r3, [pc, #100]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004ff6:	4b18      	ldr	r3, [pc, #96]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8004ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ffc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004ffe:	4b16      	ldr	r3, [pc, #88]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8005000:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005004:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8005008:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800500c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800500e:	4b12      	ldr	r3, [pc, #72]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8005010:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005014:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005016:	4b10      	ldr	r3, [pc, #64]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8005018:	2200      	movs	r2, #0
 800501a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800501c:	4b0e      	ldr	r3, [pc, #56]	; (8005058 <HAL_ADC_MspInit+0x114>)
 800501e:	2200      	movs	r2, #0
 8005020:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005022:	480d      	ldr	r0, [pc, #52]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8005024:	f002 ffd2 	bl	8007fcc <HAL_DMA_Init>
 8005028:	4603      	mov	r3, r0
 800502a:	2b00      	cmp	r3, #0
 800502c:	d001      	beq.n	8005032 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800502e:	f7ff ff59 	bl	8004ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a08      	ldr	r2, [pc, #32]	; (8005058 <HAL_ADC_MspInit+0x114>)
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
 8005038:	4a07      	ldr	r2, [pc, #28]	; (8005058 <HAL_ADC_MspInit+0x114>)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800503e:	bf00      	nop
 8005040:	3728      	adds	r7, #40	; 0x28
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40012000 	.word	0x40012000
 800504c:	40023800 	.word	0x40023800
 8005050:	40020800 	.word	0x40020800
 8005054:	40020400 	.word	0x40020400
 8005058:	2000fd3c 	.word	0x2000fd3c
 800505c:	40026470 	.word	0x40026470

08005060 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	; 0x28
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005068:	f107 0314 	add.w	r3, r7, #20
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	609a      	str	r2, [r3, #8]
 8005074:	60da      	str	r2, [r3, #12]
 8005076:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a65      	ldr	r2, [pc, #404]	; (8005214 <HAL_SD_MspInit+0x1b4>)
 800507e:	4293      	cmp	r3, r2
 8005080:	f040 80c3 	bne.w	800520a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8005084:	4b64      	ldr	r3, [pc, #400]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 8005086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005088:	4a63      	ldr	r2, [pc, #396]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 800508a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800508e:	6453      	str	r3, [r2, #68]	; 0x44
 8005090:	4b61      	ldr	r3, [pc, #388]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 8005092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005094:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800509c:	4b5e      	ldr	r3, [pc, #376]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 800509e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a0:	4a5d      	ldr	r2, [pc, #372]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 80050a2:	f043 0304 	orr.w	r3, r3, #4
 80050a6:	6313      	str	r3, [r2, #48]	; 0x30
 80050a8:	4b5b      	ldr	r3, [pc, #364]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 80050aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	60fb      	str	r3, [r7, #12]
 80050b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80050b4:	4b58      	ldr	r3, [pc, #352]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 80050b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b8:	4a57      	ldr	r2, [pc, #348]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 80050ba:	f043 0308 	orr.w	r3, r3, #8
 80050be:	6313      	str	r3, [r2, #48]	; 0x30
 80050c0:	4b55      	ldr	r3, [pc, #340]	; (8005218 <HAL_SD_MspInit+0x1b8>)
 80050c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050c4:	f003 0308 	and.w	r3, r3, #8
 80050c8:	60bb      	str	r3, [r7, #8]
 80050ca:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 80050cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80050d0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050d2:	2302      	movs	r3, #2
 80050d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050da:	2303      	movs	r3, #3
 80050dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80050de:	230c      	movs	r3, #12
 80050e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050e2:	f107 0314 	add.w	r3, r7, #20
 80050e6:	4619      	mov	r1, r3
 80050e8:	484c      	ldr	r0, [pc, #304]	; (800521c <HAL_SD_MspInit+0x1bc>)
 80050ea:	f003 fb83 	bl	80087f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80050ee:	2304      	movs	r3, #4
 80050f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050f2:	2302      	movs	r3, #2
 80050f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050f6:	2300      	movs	r3, #0
 80050f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050fa:	2303      	movs	r3, #3
 80050fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80050fe:	230c      	movs	r3, #12
 8005100:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005102:	f107 0314 	add.w	r3, r7, #20
 8005106:	4619      	mov	r1, r3
 8005108:	4845      	ldr	r0, [pc, #276]	; (8005220 <HAL_SD_MspInit+0x1c0>)
 800510a:	f003 fb73 	bl	80087f4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800510e:	4b45      	ldr	r3, [pc, #276]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005110:	4a45      	ldr	r2, [pc, #276]	; (8005228 <HAL_SD_MspInit+0x1c8>)
 8005112:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8005114:	4b43      	ldr	r3, [pc, #268]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005116:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800511a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800511c:	4b41      	ldr	r3, [pc, #260]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 800511e:	2200      	movs	r2, #0
 8005120:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005122:	4b40      	ldr	r3, [pc, #256]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005124:	2200      	movs	r2, #0
 8005126:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005128:	4b3e      	ldr	r3, [pc, #248]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 800512a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800512e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005130:	4b3c      	ldr	r3, [pc, #240]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005132:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005136:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005138:	4b3a      	ldr	r3, [pc, #232]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 800513a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800513e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8005140:	4b38      	ldr	r3, [pc, #224]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005142:	2220      	movs	r2, #32
 8005144:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005146:	4b37      	ldr	r3, [pc, #220]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005148:	2200      	movs	r2, #0
 800514a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800514c:	4b35      	ldr	r3, [pc, #212]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 800514e:	2204      	movs	r2, #4
 8005150:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005152:	4b34      	ldr	r3, [pc, #208]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005154:	2203      	movs	r2, #3
 8005156:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8005158:	4b32      	ldr	r3, [pc, #200]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 800515a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800515e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005160:	4b30      	ldr	r3, [pc, #192]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005162:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005166:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8005168:	482e      	ldr	r0, [pc, #184]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 800516a:	f002 ff2f 	bl	8007fcc <HAL_DMA_Init>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d001      	beq.n	8005178 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8005174:	f7ff feb6 	bl	8004ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4a2a      	ldr	r2, [pc, #168]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 800517c:	641a      	str	r2, [r3, #64]	; 0x40
 800517e:	4a29      	ldr	r2, [pc, #164]	; (8005224 <HAL_SD_MspInit+0x1c4>)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 8005184:	4b29      	ldr	r3, [pc, #164]	; (800522c <HAL_SD_MspInit+0x1cc>)
 8005186:	4a2a      	ldr	r2, [pc, #168]	; (8005230 <HAL_SD_MspInit+0x1d0>)
 8005188:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800518a:	4b28      	ldr	r3, [pc, #160]	; (800522c <HAL_SD_MspInit+0x1cc>)
 800518c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005190:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005192:	4b26      	ldr	r3, [pc, #152]	; (800522c <HAL_SD_MspInit+0x1cc>)
 8005194:	2240      	movs	r2, #64	; 0x40
 8005196:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <HAL_SD_MspInit+0x1cc>)
 800519a:	2200      	movs	r2, #0
 800519c:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800519e:	4b23      	ldr	r3, [pc, #140]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051a6:	4b21      	ldr	r3, [pc, #132]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051a8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051ac:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051ae:	4b1f      	ldr	r3, [pc, #124]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051b0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80051b4:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80051b6:	4b1d      	ldr	r3, [pc, #116]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051b8:	2220      	movs	r2, #32
 80051ba:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80051bc:	4b1b      	ldr	r3, [pc, #108]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051be:	2200      	movs	r2, #0
 80051c0:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051c2:	4b1a      	ldr	r3, [pc, #104]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051c4:	2204      	movs	r2, #4
 80051c6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051c8:	4b18      	ldr	r3, [pc, #96]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051ca:	2203      	movs	r2, #3
 80051cc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80051ce:	4b17      	ldr	r3, [pc, #92]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051d0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80051d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80051d6:	4b15      	ldr	r3, [pc, #84]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051d8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051dc:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80051de:	4813      	ldr	r0, [pc, #76]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051e0:	f002 fef4 	bl	8007fcc <HAL_DMA_Init>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 80051ea:	f7ff fe7b 	bl	8004ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	4a0e      	ldr	r2, [pc, #56]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80051f4:	4a0d      	ldr	r2, [pc, #52]	; (800522c <HAL_SD_MspInit+0x1cc>)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 80051fa:	2200      	movs	r2, #0
 80051fc:	2105      	movs	r1, #5
 80051fe:	2031      	movs	r0, #49	; 0x31
 8005200:	f002 feba 	bl	8007f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8005204:	2031      	movs	r0, #49	; 0x31
 8005206:	f002 fed3 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800520a:	bf00      	nop
 800520c:	3728      	adds	r7, #40	; 0x28
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
 8005212:	bf00      	nop
 8005214:	40012c00 	.word	0x40012c00
 8005218:	40023800 	.word	0x40023800
 800521c:	40020800 	.word	0x40020800
 8005220:	40020c00 	.word	0x40020c00
 8005224:	20013e8c 	.word	0x20013e8c
 8005228:	400264a0 	.word	0x400264a0
 800522c:	2001c180 	.word	0x2001c180
 8005230:	40026458 	.word	0x40026458

08005234 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	; 0x38
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800523c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005240:	2200      	movs	r2, #0
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	605a      	str	r2, [r3, #4]
 8005246:	609a      	str	r2, [r3, #8]
 8005248:	60da      	str	r2, [r3, #12]
 800524a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a64      	ldr	r2, [pc, #400]	; (80053e4 <HAL_SPI_MspInit+0x1b0>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d160      	bne.n	8005318 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005256:	4b64      	ldr	r3, [pc, #400]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	4a63      	ldr	r2, [pc, #396]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 800525c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005260:	6453      	str	r3, [r2, #68]	; 0x44
 8005262:	4b61      	ldr	r3, [pc, #388]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800526a:	623b      	str	r3, [r7, #32]
 800526c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800526e:	4b5e      	ldr	r3, [pc, #376]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005272:	4a5d      	ldr	r2, [pc, #372]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005274:	f043 0301 	orr.w	r3, r3, #1
 8005278:	6313      	str	r3, [r2, #48]	; 0x30
 800527a:	4b5b      	ldr	r3, [pc, #364]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f003 0301 	and.w	r3, r3, #1
 8005282:	61fb      	str	r3, [r7, #28]
 8005284:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 8005286:	f248 03a0 	movw	r3, #32928	; 0x80a0
 800528a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800528c:	2302      	movs	r3, #2
 800528e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005294:	2303      	movs	r3, #3
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005298:	2305      	movs	r3, #5
 800529a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800529c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052a0:	4619      	mov	r1, r3
 80052a2:	4852      	ldr	r0, [pc, #328]	; (80053ec <HAL_SPI_MspInit+0x1b8>)
 80052a4:	f003 faa6 	bl	80087f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80052a8:	4b51      	ldr	r3, [pc, #324]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052aa:	4a52      	ldr	r2, [pc, #328]	; (80053f4 <HAL_SPI_MspInit+0x1c0>)
 80052ac:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80052ae:	4b50      	ldr	r3, [pc, #320]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052b0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80052b4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052b6:	4b4e      	ldr	r3, [pc, #312]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052bc:	4b4c      	ldr	r3, [pc, #304]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052be:	2200      	movs	r2, #0
 80052c0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052c2:	4b4b      	ldr	r3, [pc, #300]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80052c8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052ca:	4b49      	ldr	r3, [pc, #292]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052d0:	4b47      	ldr	r3, [pc, #284]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80052d6:	4b46      	ldr	r3, [pc, #280]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80052dc:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052de:	4b44      	ldr	r3, [pc, #272]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80052e4:	4b42      	ldr	r3, [pc, #264]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80052ea:	4841      	ldr	r0, [pc, #260]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052ec:	f002 fe6e 	bl	8007fcc <HAL_DMA_Init>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d001      	beq.n	80052fa <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 80052f6:	f7ff fdf5 	bl	8004ee4 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a3c      	ldr	r2, [pc, #240]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 80052fe:	659a      	str	r2, [r3, #88]	; 0x58
 8005300:	4a3b      	ldr	r2, [pc, #236]	; (80053f0 <HAL_SPI_MspInit+0x1bc>)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005306:	2200      	movs	r2, #0
 8005308:	2105      	movs	r1, #5
 800530a:	2023      	movs	r0, #35	; 0x23
 800530c:	f002 fe34 	bl	8007f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005310:	2023      	movs	r0, #35	; 0x23
 8005312:	f002 fe4d 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005316:	e107      	b.n	8005528 <HAL_SPI_MspInit+0x2f4>
  else if(hspi->Instance==SPI2)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a36      	ldr	r2, [pc, #216]	; (80053f8 <HAL_SPI_MspInit+0x1c4>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d172      	bne.n	8005408 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005322:	4b31      	ldr	r3, [pc, #196]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005328:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
 800532e:	4b2e      	ldr	r3, [pc, #184]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005336:	61bb      	str	r3, [r7, #24]
 8005338:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800533a:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4a2a      	ldr	r2, [pc, #168]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005340:	f043 0302 	orr.w	r3, r3, #2
 8005344:	6313      	str	r3, [r2, #48]	; 0x30
 8005346:	4b28      	ldr	r3, [pc, #160]	; (80053e8 <HAL_SPI_MspInit+0x1b4>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f003 0302 	and.w	r3, r3, #2
 800534e:	617b      	str	r3, [r7, #20]
 8005350:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8005352:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005356:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005358:	2302      	movs	r3, #2
 800535a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535c:	2300      	movs	r3, #0
 800535e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005360:	2303      	movs	r3, #3
 8005362:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005364:	2305      	movs	r3, #5
 8005366:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536c:	4619      	mov	r1, r3
 800536e:	4823      	ldr	r0, [pc, #140]	; (80053fc <HAL_SPI_MspInit+0x1c8>)
 8005370:	f003 fa40 	bl	80087f4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8005374:	4b22      	ldr	r3, [pc, #136]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 8005376:	4a23      	ldr	r2, [pc, #140]	; (8005404 <HAL_SPI_MspInit+0x1d0>)
 8005378:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800537a:	4b21      	ldr	r3, [pc, #132]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 800537c:	2200      	movs	r2, #0
 800537e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005380:	4b1f      	ldr	r3, [pc, #124]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 8005382:	2200      	movs	r2, #0
 8005384:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005386:	4b1e      	ldr	r3, [pc, #120]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 8005388:	2200      	movs	r2, #0
 800538a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800538c:	4b1c      	ldr	r3, [pc, #112]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 800538e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005392:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005394:	4b1a      	ldr	r3, [pc, #104]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 8005396:	2200      	movs	r2, #0
 8005398:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800539a:	4b19      	ldr	r3, [pc, #100]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 800539c:	2200      	movs	r2, #0
 800539e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80053a0:	4b17      	ldr	r3, [pc, #92]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 80053a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053a6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053ae:	4b14      	ldr	r3, [pc, #80]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 80053b0:	2200      	movs	r2, #0
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80053b4:	4812      	ldr	r0, [pc, #72]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 80053b6:	f002 fe09 	bl	8007fcc <HAL_DMA_Init>
 80053ba:	4603      	mov	r3, r0
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d001      	beq.n	80053c4 <HAL_SPI_MspInit+0x190>
      Error_Handler();
 80053c0:	f7ff fd90 	bl	8004ee4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a0e      	ldr	r2, [pc, #56]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 80053c8:	659a      	str	r2, [r3, #88]	; 0x58
 80053ca:	4a0d      	ldr	r2, [pc, #52]	; (8005400 <HAL_SPI_MspInit+0x1cc>)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80053d0:	2200      	movs	r2, #0
 80053d2:	2105      	movs	r1, #5
 80053d4:	2024      	movs	r0, #36	; 0x24
 80053d6:	f002 fdcf 	bl	8007f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80053da:	2024      	movs	r0, #36	; 0x24
 80053dc:	f002 fde8 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
}
 80053e0:	e0a2      	b.n	8005528 <HAL_SPI_MspInit+0x2f4>
 80053e2:	bf00      	nop
 80053e4:	40013000 	.word	0x40013000
 80053e8:	40023800 	.word	0x40023800
 80053ec:	40020000 	.word	0x40020000
 80053f0:	2001a11c 	.word	0x2001a11c
 80053f4:	40026410 	.word	0x40026410
 80053f8:	40003800 	.word	0x40003800
 80053fc:	40020400 	.word	0x40020400
 8005400:	2000ba1c 	.word	0x2000ba1c
 8005404:	40026058 	.word	0x40026058
  else if(hspi->Instance==SPI3)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a48      	ldr	r2, [pc, #288]	; (8005530 <HAL_SPI_MspInit+0x2fc>)
 800540e:	4293      	cmp	r3, r2
 8005410:	f040 808a 	bne.w	8005528 <HAL_SPI_MspInit+0x2f4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005414:	4b47      	ldr	r3, [pc, #284]	; (8005534 <HAL_SPI_MspInit+0x300>)
 8005416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005418:	4a46      	ldr	r2, [pc, #280]	; (8005534 <HAL_SPI_MspInit+0x300>)
 800541a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541e:	6413      	str	r3, [r2, #64]	; 0x40
 8005420:	4b44      	ldr	r3, [pc, #272]	; (8005534 <HAL_SPI_MspInit+0x300>)
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800542c:	4b41      	ldr	r3, [pc, #260]	; (8005534 <HAL_SPI_MspInit+0x300>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	4a40      	ldr	r2, [pc, #256]	; (8005534 <HAL_SPI_MspInit+0x300>)
 8005432:	f043 0301 	orr.w	r3, r3, #1
 8005436:	6313      	str	r3, [r2, #48]	; 0x30
 8005438:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <HAL_SPI_MspInit+0x300>)
 800543a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543c:	f003 0301 	and.w	r3, r3, #1
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005444:	4b3b      	ldr	r3, [pc, #236]	; (8005534 <HAL_SPI_MspInit+0x300>)
 8005446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005448:	4a3a      	ldr	r2, [pc, #232]	; (8005534 <HAL_SPI_MspInit+0x300>)
 800544a:	f043 0302 	orr.w	r3, r3, #2
 800544e:	6313      	str	r3, [r2, #48]	; 0x30
 8005450:	4b38      	ldr	r3, [pc, #224]	; (8005534 <HAL_SPI_MspInit+0x300>)
 8005452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005454:	f003 0302 	and.w	r3, r3, #2
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800545c:	2310      	movs	r3, #16
 800545e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005460:	2302      	movs	r3, #2
 8005462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005464:	2300      	movs	r3, #0
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005468:	2303      	movs	r3, #3
 800546a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800546c:	2306      	movs	r3, #6
 800546e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005474:	4619      	mov	r1, r3
 8005476:	4830      	ldr	r0, [pc, #192]	; (8005538 <HAL_SPI_MspInit+0x304>)
 8005478:	f003 f9bc 	bl	80087f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800547c:	2304      	movs	r3, #4
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005480:	2302      	movs	r3, #2
 8005482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005484:	2300      	movs	r3, #0
 8005486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005488:	2303      	movs	r3, #3
 800548a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800548c:	2307      	movs	r3, #7
 800548e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005494:	4619      	mov	r1, r3
 8005496:	4829      	ldr	r0, [pc, #164]	; (800553c <HAL_SPI_MspInit+0x308>)
 8005498:	f003 f9ac 	bl	80087f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800549c:	2318      	movs	r3, #24
 800549e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054a0:	2302      	movs	r3, #2
 80054a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054a8:	2303      	movs	r3, #3
 80054aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054ac:	2306      	movs	r3, #6
 80054ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054b4:	4619      	mov	r1, r3
 80054b6:	4821      	ldr	r0, [pc, #132]	; (800553c <HAL_SPI_MspInit+0x308>)
 80054b8:	f003 f99c 	bl	80087f4 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 80054bc:	4b20      	ldr	r3, [pc, #128]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054be:	4a21      	ldr	r2, [pc, #132]	; (8005544 <HAL_SPI_MspInit+0x310>)
 80054c0:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 80054c2:	4b1f      	ldr	r3, [pc, #124]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054c4:	2200      	movs	r2, #0
 80054c6:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80054c8:	4b1d      	ldr	r3, [pc, #116]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054ca:	2200      	movs	r2, #0
 80054cc:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80054ce:	4b1c      	ldr	r3, [pc, #112]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054d4:	4b1a      	ldr	r3, [pc, #104]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80054da:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054dc:	4b18      	ldr	r3, [pc, #96]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054de:	2200      	movs	r2, #0
 80054e0:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054e2:	4b17      	ldr	r3, [pc, #92]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054e4:	2200      	movs	r2, #0
 80054e6:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 80054e8:	4b15      	ldr	r3, [pc, #84]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054ee:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80054f0:	4b13      	ldr	r3, [pc, #76]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054f6:	4b12      	ldr	r3, [pc, #72]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054f8:	2200      	movs	r2, #0
 80054fa:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80054fc:	4810      	ldr	r0, [pc, #64]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 80054fe:	f002 fd65 	bl	8007fcc <HAL_DMA_Init>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_SPI_MspInit+0x2d8>
      Error_Handler();
 8005508:	f7ff fcec 	bl	8004ee4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a0c      	ldr	r2, [pc, #48]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 8005510:	659a      	str	r2, [r3, #88]	; 0x58
 8005512:	4a0b      	ldr	r2, [pc, #44]	; (8005540 <HAL_SPI_MspInit+0x30c>)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8005518:	2200      	movs	r2, #0
 800551a:	2105      	movs	r1, #5
 800551c:	2033      	movs	r0, #51	; 0x33
 800551e:	f002 fd2b 	bl	8007f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005522:	2033      	movs	r0, #51	; 0x33
 8005524:	f002 fd44 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
}
 8005528:	bf00      	nop
 800552a:	3738      	adds	r7, #56	; 0x38
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	40003c00 	.word	0x40003c00
 8005534:	40023800 	.word	0x40023800
 8005538:	40020000 	.word	0x40020000
 800553c:	40020400 	.word	0x40020400
 8005540:	2001c240 	.word	0x2001c240
 8005544:	40026010 	.word	0x40026010

08005548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b092      	sub	sp, #72	; 0x48
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005550:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
 8005558:	605a      	str	r2, [r3, #4]
 800555a:	609a      	str	r2, [r3, #8]
 800555c:	60da      	str	r2, [r3, #12]
 800555e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a77      	ldr	r2, [pc, #476]	; (8005744 <HAL_UART_MspInit+0x1fc>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d156      	bne.n	8005618 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800556a:	4b77      	ldr	r3, [pc, #476]	; (8005748 <HAL_UART_MspInit+0x200>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	4a76      	ldr	r2, [pc, #472]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005574:	6413      	str	r3, [r2, #64]	; 0x40
 8005576:	4b74      	ldr	r3, [pc, #464]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800557a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800557e:	633b      	str	r3, [r7, #48]	; 0x30
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005582:	4b71      	ldr	r3, [pc, #452]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	4a70      	ldr	r2, [pc, #448]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005588:	f043 0301 	orr.w	r3, r3, #1
 800558c:	6313      	str	r3, [r2, #48]	; 0x30
 800558e:	4b6e      	ldr	r3, [pc, #440]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800559a:	2303      	movs	r3, #3
 800559c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800559e:	2302      	movs	r3, #2
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055a6:	2303      	movs	r3, #3
 80055a8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80055aa:	2308      	movs	r3, #8
 80055ac:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055ae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055b2:	4619      	mov	r1, r3
 80055b4:	4865      	ldr	r0, [pc, #404]	; (800574c <HAL_UART_MspInit+0x204>)
 80055b6:	f003 f91d 	bl	80087f4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80055ba:	4b65      	ldr	r3, [pc, #404]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055bc:	4a65      	ldr	r2, [pc, #404]	; (8005754 <HAL_UART_MspInit+0x20c>)
 80055be:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80055c0:	4b63      	ldr	r3, [pc, #396]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80055c6:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80055c8:	4b61      	ldr	r3, [pc, #388]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80055ce:	4b60      	ldr	r3, [pc, #384]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80055d4:	4b5e      	ldr	r3, [pc, #376]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80055da:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80055dc:	4b5c      	ldr	r3, [pc, #368]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055de:	2200      	movs	r2, #0
 80055e0:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80055e2:	4b5b      	ldr	r3, [pc, #364]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055e4:	2200      	movs	r2, #0
 80055e6:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80055e8:	4b59      	ldr	r3, [pc, #356]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055ea:	2200      	movs	r2, #0
 80055ec:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80055ee:	4b58      	ldr	r3, [pc, #352]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055f4:	4b56      	ldr	r3, [pc, #344]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80055fa:	4855      	ldr	r0, [pc, #340]	; (8005750 <HAL_UART_MspInit+0x208>)
 80055fc:	f002 fce6 	bl	8007fcc <HAL_DMA_Init>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d001      	beq.n	800560a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8005606:	f7ff fc6d 	bl	8004ee4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a50      	ldr	r2, [pc, #320]	; (8005750 <HAL_UART_MspInit+0x208>)
 800560e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005610:	4a4f      	ldr	r2, [pc, #316]	; (8005750 <HAL_UART_MspInit+0x208>)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005616:	e165      	b.n	80058e4 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==UART7)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a4e      	ldr	r2, [pc, #312]	; (8005758 <HAL_UART_MspInit+0x210>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d131      	bne.n	8005686 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005622:	4b49      	ldr	r3, [pc, #292]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	4a48      	ldr	r2, [pc, #288]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005628:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800562c:	6413      	str	r3, [r2, #64]	; 0x40
 800562e:	4b46      	ldr	r3, [pc, #280]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005636:	62bb      	str	r3, [r7, #40]	; 0x28
 8005638:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800563a:	4b43      	ldr	r3, [pc, #268]	; (8005748 <HAL_UART_MspInit+0x200>)
 800563c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800563e:	4a42      	ldr	r2, [pc, #264]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005640:	f043 0310 	orr.w	r3, r3, #16
 8005644:	6313      	str	r3, [r2, #48]	; 0x30
 8005646:	4b40      	ldr	r3, [pc, #256]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564a:	f003 0310 	and.w	r3, r3, #16
 800564e:	627b      	str	r3, [r7, #36]	; 0x24
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8005652:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005656:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005658:	2302      	movs	r3, #2
 800565a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565c:	2300      	movs	r3, #0
 800565e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005660:	2303      	movs	r3, #3
 8005662:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005664:	2308      	movs	r3, #8
 8005666:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005668:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800566c:	4619      	mov	r1, r3
 800566e:	483b      	ldr	r0, [pc, #236]	; (800575c <HAL_UART_MspInit+0x214>)
 8005670:	f003 f8c0 	bl	80087f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8005674:	2200      	movs	r2, #0
 8005676:	2105      	movs	r1, #5
 8005678:	2052      	movs	r0, #82	; 0x52
 800567a:	f002 fc7d 	bl	8007f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800567e:	2052      	movs	r0, #82	; 0x52
 8005680:	f002 fc96 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
}
 8005684:	e12e      	b.n	80058e4 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART1)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a35      	ldr	r2, [pc, #212]	; (8005760 <HAL_UART_MspInit+0x218>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d16d      	bne.n	800576c <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005690:	4b2d      	ldr	r3, [pc, #180]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005694:	4a2c      	ldr	r2, [pc, #176]	; (8005748 <HAL_UART_MspInit+0x200>)
 8005696:	f043 0310 	orr.w	r3, r3, #16
 800569a:	6453      	str	r3, [r2, #68]	; 0x44
 800569c:	4b2a      	ldr	r3, [pc, #168]	; (8005748 <HAL_UART_MspInit+0x200>)
 800569e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a0:	f003 0310 	and.w	r3, r3, #16
 80056a4:	623b      	str	r3, [r7, #32]
 80056a6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056a8:	4b27      	ldr	r3, [pc, #156]	; (8005748 <HAL_UART_MspInit+0x200>)
 80056aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <HAL_UART_MspInit+0x200>)
 80056ae:	f043 0301 	orr.w	r3, r3, #1
 80056b2:	6313      	str	r3, [r2, #48]	; 0x30
 80056b4:	4b24      	ldr	r3, [pc, #144]	; (8005748 <HAL_UART_MspInit+0x200>)
 80056b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80056c0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80056c4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056c6:	2302      	movs	r3, #2
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ca:	2300      	movs	r3, #0
 80056cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056ce:	2303      	movs	r3, #3
 80056d0:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056d2:	2307      	movs	r3, #7
 80056d4:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056da:	4619      	mov	r1, r3
 80056dc:	481b      	ldr	r0, [pc, #108]	; (800574c <HAL_UART_MspInit+0x204>)
 80056de:	f003 f889 	bl	80087f4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80056e2:	4b20      	ldr	r3, [pc, #128]	; (8005764 <HAL_UART_MspInit+0x21c>)
 80056e4:	4a20      	ldr	r2, [pc, #128]	; (8005768 <HAL_UART_MspInit+0x220>)
 80056e6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80056e8:	4b1e      	ldr	r3, [pc, #120]	; (8005764 <HAL_UART_MspInit+0x21c>)
 80056ea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80056ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80056f0:	4b1c      	ldr	r3, [pc, #112]	; (8005764 <HAL_UART_MspInit+0x21c>)
 80056f2:	2200      	movs	r2, #0
 80056f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80056f6:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <HAL_UART_MspInit+0x21c>)
 80056f8:	2200      	movs	r2, #0
 80056fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80056fc:	4b19      	ldr	r3, [pc, #100]	; (8005764 <HAL_UART_MspInit+0x21c>)
 80056fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005702:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005704:	4b17      	ldr	r3, [pc, #92]	; (8005764 <HAL_UART_MspInit+0x21c>)
 8005706:	2200      	movs	r2, #0
 8005708:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800570a:	4b16      	ldr	r3, [pc, #88]	; (8005764 <HAL_UART_MspInit+0x21c>)
 800570c:	2200      	movs	r2, #0
 800570e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005710:	4b14      	ldr	r3, [pc, #80]	; (8005764 <HAL_UART_MspInit+0x21c>)
 8005712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005716:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005718:	4b12      	ldr	r3, [pc, #72]	; (8005764 <HAL_UART_MspInit+0x21c>)
 800571a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800571e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005720:	4b10      	ldr	r3, [pc, #64]	; (8005764 <HAL_UART_MspInit+0x21c>)
 8005722:	2200      	movs	r2, #0
 8005724:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005726:	480f      	ldr	r0, [pc, #60]	; (8005764 <HAL_UART_MspInit+0x21c>)
 8005728:	f002 fc50 	bl	8007fcc <HAL_DMA_Init>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8005732:	f7ff fbd7 	bl	8004ee4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a0a      	ldr	r2, [pc, #40]	; (8005764 <HAL_UART_MspInit+0x21c>)
 800573a:	66da      	str	r2, [r3, #108]	; 0x6c
 800573c:	4a09      	ldr	r2, [pc, #36]	; (8005764 <HAL_UART_MspInit+0x21c>)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005742:	e0cf      	b.n	80058e4 <HAL_UART_MspInit+0x39c>
 8005744:	40004c00 	.word	0x40004c00
 8005748:	40023800 	.word	0x40023800
 800574c:	40020000 	.word	0x40020000
 8005750:	20009664 	.word	0x20009664
 8005754:	40026040 	.word	0x40026040
 8005758:	40007800 	.word	0x40007800
 800575c:	40021000 	.word	0x40021000
 8005760:	40011000 	.word	0x40011000
 8005764:	2000fbe4 	.word	0x2000fbe4
 8005768:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a5e      	ldr	r2, [pc, #376]	; (80058ec <HAL_UART_MspInit+0x3a4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d158      	bne.n	8005828 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005776:	4b5e      	ldr	r3, [pc, #376]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	4a5d      	ldr	r2, [pc, #372]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 800577c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005780:	6413      	str	r3, [r2, #64]	; 0x40
 8005782:	4b5b      	ldr	r3, [pc, #364]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578a:	61bb      	str	r3, [r7, #24]
 800578c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800578e:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	4a57      	ldr	r2, [pc, #348]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005794:	f043 0301 	orr.w	r3, r3, #1
 8005798:	6313      	str	r3, [r2, #48]	; 0x30
 800579a:	4b55      	ldr	r3, [pc, #340]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 800579c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	617b      	str	r3, [r7, #20]
 80057a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80057a6:	230c      	movs	r3, #12
 80057a8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057aa:	2302      	movs	r3, #2
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b2:	2303      	movs	r3, #3
 80057b4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80057b6:	2307      	movs	r3, #7
 80057b8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80057be:	4619      	mov	r1, r3
 80057c0:	484c      	ldr	r0, [pc, #304]	; (80058f4 <HAL_UART_MspInit+0x3ac>)
 80057c2:	f003 f817 	bl	80087f4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80057c6:	4b4c      	ldr	r3, [pc, #304]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057c8:	4a4c      	ldr	r2, [pc, #304]	; (80058fc <HAL_UART_MspInit+0x3b4>)
 80057ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80057cc:	4b4a      	ldr	r3, [pc, #296]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80057d2:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80057d4:	4b48      	ldr	r3, [pc, #288]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80057da:	4b47      	ldr	r3, [pc, #284]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057dc:	2200      	movs	r2, #0
 80057de:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80057e0:	4b45      	ldr	r3, [pc, #276]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80057e6:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80057e8:	4b43      	ldr	r3, [pc, #268]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80057ee:	4b42      	ldr	r3, [pc, #264]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057f0:	2200      	movs	r2, #0
 80057f2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80057f4:	4b40      	ldr	r3, [pc, #256]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80057fc:	4b3e      	ldr	r3, [pc, #248]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 80057fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005802:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005804:	4b3c      	ldr	r3, [pc, #240]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 8005806:	2200      	movs	r2, #0
 8005808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800580a:	483b      	ldr	r0, [pc, #236]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 800580c:	f002 fbde 	bl	8007fcc <HAL_DMA_Init>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d001      	beq.n	800581a <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8005816:	f7ff fb65 	bl	8004ee4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a36      	ldr	r2, [pc, #216]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 800581e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005820:	4a35      	ldr	r2, [pc, #212]	; (80058f8 <HAL_UART_MspInit+0x3b0>)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005826:	e05d      	b.n	80058e4 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART3)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a34      	ldr	r2, [pc, #208]	; (8005900 <HAL_UART_MspInit+0x3b8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d158      	bne.n	80058e4 <HAL_UART_MspInit+0x39c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005832:	4b2f      	ldr	r3, [pc, #188]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005836:	4a2e      	ldr	r2, [pc, #184]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800583c:	6413      	str	r3, [r2, #64]	; 0x40
 800583e:	4b2c      	ldr	r3, [pc, #176]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005842:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800584a:	4b29      	ldr	r3, [pc, #164]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 800584c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584e:	4a28      	ldr	r2, [pc, #160]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005850:	f043 0308 	orr.w	r3, r3, #8
 8005854:	6313      	str	r3, [r2, #48]	; 0x30
 8005856:	4b26      	ldr	r3, [pc, #152]	; (80058f0 <HAL_UART_MspInit+0x3a8>)
 8005858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005862:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005866:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005868:	2302      	movs	r3, #2
 800586a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800586c:	2300      	movs	r3, #0
 800586e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005870:	2303      	movs	r3, #3
 8005872:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005874:	2307      	movs	r3, #7
 8005876:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005878:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800587c:	4619      	mov	r1, r3
 800587e:	4821      	ldr	r0, [pc, #132]	; (8005904 <HAL_UART_MspInit+0x3bc>)
 8005880:	f002 ffb8 	bl	80087f4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005884:	4b20      	ldr	r3, [pc, #128]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 8005886:	4a21      	ldr	r2, [pc, #132]	; (800590c <HAL_UART_MspInit+0x3c4>)
 8005888:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800588a:	4b1f      	ldr	r3, [pc, #124]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 800588c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005890:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005892:	4b1d      	ldr	r3, [pc, #116]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005898:	4b1b      	ldr	r3, [pc, #108]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 800589a:	2200      	movs	r2, #0
 800589c:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800589e:	4b1a      	ldr	r3, [pc, #104]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058a0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058a4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058a6:	4b18      	ldr	r3, [pc, #96]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058a8:	2200      	movs	r2, #0
 80058aa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058ac:	4b16      	ldr	r3, [pc, #88]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058ae:	2200      	movs	r2, #0
 80058b0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80058b2:	4b15      	ldr	r3, [pc, #84]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058b8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80058ba:	4b13      	ldr	r3, [pc, #76]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80058c0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80058c2:	4b11      	ldr	r3, [pc, #68]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80058c8:	480f      	ldr	r0, [pc, #60]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058ca:	f002 fb7f 	bl	8007fcc <HAL_DMA_Init>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <HAL_UART_MspInit+0x390>
      Error_Handler();
 80058d4:	f7ff fb06 	bl	8004ee4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a0b      	ldr	r2, [pc, #44]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058dc:	66da      	str	r2, [r3, #108]	; 0x6c
 80058de:	4a0a      	ldr	r2, [pc, #40]	; (8005908 <HAL_UART_MspInit+0x3c0>)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80058e4:	bf00      	nop
 80058e6:	3748      	adds	r7, #72	; 0x48
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}
 80058ec:	40004400 	.word	0x40004400
 80058f0:	40023800 	.word	0x40023800
 80058f4:	40020000 	.word	0x40020000
 80058f8:	200096c8 	.word	0x200096c8
 80058fc:	40026088 	.word	0x40026088
 8005900:	40004800 	.word	0x40004800
 8005904:	40020c00 	.word	0x40020c00
 8005908:	2000981c 	.word	0x2000981c
 800590c:	40026028 	.word	0x40026028

08005910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b08c      	sub	sp, #48	; 0x30
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800591c:	2300      	movs	r3, #0
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005920:	2200      	movs	r2, #0
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	2019      	movs	r0, #25
 8005926:	f002 fb27 	bl	8007f78 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800592a:	2019      	movs	r0, #25
 800592c:	f002 fb40 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005930:	4b1f      	ldr	r3, [pc, #124]	; (80059b0 <HAL_InitTick+0xa0>)
 8005932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005934:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <HAL_InitTick+0xa0>)
 8005936:	f043 0301 	orr.w	r3, r3, #1
 800593a:	6453      	str	r3, [r2, #68]	; 0x44
 800593c:	4b1c      	ldr	r3, [pc, #112]	; (80059b0 <HAL_InitTick+0xa0>)
 800593e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005940:	f003 0301 	and.w	r3, r3, #1
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005948:	f107 0210 	add.w	r2, r7, #16
 800594c:	f107 0314 	add.w	r3, r7, #20
 8005950:	4611      	mov	r1, r2
 8005952:	4618      	mov	r0, r3
 8005954:	f004 ff9e 	bl	800a894 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005958:	f004 ff88 	bl	800a86c <HAL_RCC_GetPCLK2Freq>
 800595c:	4603      	mov	r3, r0
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005964:	4a13      	ldr	r2, [pc, #76]	; (80059b4 <HAL_InitTick+0xa4>)
 8005966:	fba2 2303 	umull	r2, r3, r2, r3
 800596a:	0c9b      	lsrs	r3, r3, #18
 800596c:	3b01      	subs	r3, #1
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8005970:	4b11      	ldr	r3, [pc, #68]	; (80059b8 <HAL_InitTick+0xa8>)
 8005972:	4a12      	ldr	r2, [pc, #72]	; (80059bc <HAL_InitTick+0xac>)
 8005974:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 8005976:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_InitTick+0xa8>)
 8005978:	f240 32e7 	movw	r2, #999	; 0x3e7
 800597c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800597e:	4a0e      	ldr	r2, [pc, #56]	; (80059b8 <HAL_InitTick+0xa8>)
 8005980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005982:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005984:	4b0c      	ldr	r3, [pc, #48]	; (80059b8 <HAL_InitTick+0xa8>)
 8005986:	2200      	movs	r2, #0
 8005988:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800598a:	4b0b      	ldr	r3, [pc, #44]	; (80059b8 <HAL_InitTick+0xa8>)
 800598c:	2200      	movs	r2, #0
 800598e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8005990:	4809      	ldr	r0, [pc, #36]	; (80059b8 <HAL_InitTick+0xa8>)
 8005992:	f007 fd33 	bl	800d3fc <HAL_TIM_Base_Init>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d104      	bne.n	80059a6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 800599c:	4806      	ldr	r0, [pc, #24]	; (80059b8 <HAL_InitTick+0xa8>)
 800599e:	f007 fd63 	bl	800d468 <HAL_TIM_Base_Start_IT>
 80059a2:	4603      	mov	r3, r0
 80059a4:	e000      	b.n	80059a8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3730      	adds	r7, #48	; 0x30
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40023800 	.word	0x40023800
 80059b4:	431bde83 	.word	0x431bde83
 80059b8:	2001c2b0 	.word	0x2001c2b0
 80059bc:	40010000 	.word	0x40010000

080059c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80059c0:	b480      	push	{r7}
 80059c2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80059c4:	bf00      	nop
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80059ce:	b480      	push	{r7}
 80059d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80059d2:	e7fe      	b.n	80059d2 <HardFault_Handler+0x4>

080059d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059d8:	e7fe      	b.n	80059d8 <MemManage_Handler+0x4>

080059da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059da:	b480      	push	{r7}
 80059dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059de:	e7fe      	b.n	80059de <BusFault_Handler+0x4>

080059e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059e0:	b480      	push	{r7}
 80059e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059e4:	e7fe      	b.n	80059e4 <UsageFault_Handler+0x4>

080059e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059e6:	b480      	push	{r7}
 80059e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059ea:	bf00      	nop
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 80059f8:	4802      	ldr	r0, [pc, #8]	; (8005a04 <DMA1_Stream0_IRQHandler+0x10>)
 80059fa:	f002 fc87 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80059fe:	bf00      	nop
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	2001c240 	.word	0x2001c240

08005a08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005a0c:	4802      	ldr	r0, [pc, #8]	; (8005a18 <DMA1_Stream1_IRQHandler+0x10>)
 8005a0e:	f002 fc7d 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005a12:	bf00      	nop
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	2000981c 	.word	0x2000981c

08005a1c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005a20:	4802      	ldr	r0, [pc, #8]	; (8005a2c <DMA1_Stream2_IRQHandler+0x10>)
 8005a22:	f002 fc73 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005a26:	bf00      	nop
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20009664 	.word	0x20009664

08005a30 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005a34:	4802      	ldr	r0, [pc, #8]	; (8005a40 <DMA1_Stream3_IRQHandler+0x10>)
 8005a36:	f002 fc69 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005a3a:	bf00      	nop
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	2000ba1c 	.word	0x2000ba1c

08005a44 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005a48:	4802      	ldr	r0, [pc, #8]	; (8005a54 <DMA1_Stream5_IRQHandler+0x10>)
 8005a4a:	f002 fc5f 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200096c8 	.word	0x200096c8

08005a58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005a5c:	4802      	ldr	r0, [pc, #8]	; (8005a68 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005a5e:	f007 fd2d 	bl	800d4bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	2001c2b0 	.word	0x2001c2b0

08005a6c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005a70:	4802      	ldr	r0, [pc, #8]	; (8005a7c <SPI1_IRQHandler+0x10>)
 8005a72:	f007 f927 	bl	800ccc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20017f78 	.word	0x20017f78

08005a80 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <SPI2_IRQHandler+0x10>)
 8005a86:	f007 f91d 	bl	800ccc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	20009730 	.word	0x20009730

08005a94 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8005a98:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <SDMMC1_IRQHandler+0x10>)
 8005a9a:	f005 fd55 	bl	800b548 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	2000ba7c 	.word	0x2000ba7c

08005aa8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005aac:	4802      	ldr	r0, [pc, #8]	; (8005ab8 <SPI3_IRQHandler+0x10>)
 8005aae:	f007 f909 	bl	800ccc4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	2000fb20 	.word	0x2000fb20

08005abc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005ac0:	4802      	ldr	r0, [pc, #8]	; (8005acc <DMA2_Stream0_IRQHandler+0x10>)
 8005ac2:	f002 fc23 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005ac6:	bf00      	nop
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2001a11c 	.word	0x2001a11c

08005ad0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005ad4:	4802      	ldr	r0, [pc, #8]	; (8005ae0 <DMA2_Stream2_IRQHandler+0x10>)
 8005ad6:	f002 fc19 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005ada:	bf00      	nop
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	2000fbe4 	.word	0x2000fbe4

08005ae4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005ae8:	4802      	ldr	r0, [pc, #8]	; (8005af4 <DMA2_Stream3_IRQHandler+0x10>)
 8005aea:	f002 fc0f 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	2001c180 	.word	0x2001c180

08005af8 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005afc:	4802      	ldr	r0, [pc, #8]	; (8005b08 <DMA2_Stream4_IRQHandler+0x10>)
 8005afe:	f002 fc05 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005b02:	bf00      	nop
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2000fd3c 	.word	0x2000fd3c

08005b0c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005b10:	4802      	ldr	r0, [pc, #8]	; (8005b1c <OTG_FS_IRQHandler+0x10>)
 8005b12:	f003 f9aa 	bl	8008e6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	2001e0e4 	.word	0x2001e0e4

08005b20 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005b24:	4802      	ldr	r0, [pc, #8]	; (8005b30 <DMA2_Stream6_IRQHandler+0x10>)
 8005b26:	f002 fbf1 	bl	800830c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005b2a:	bf00      	nop
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	20013e8c 	.word	0x20013e8c

08005b34 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005b38:	4802      	ldr	r0, [pc, #8]	; (8005b44 <UART7_IRQHandler+0x10>)
 8005b3a:	f008 fa9d 	bl	800e078 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	2000979c 	.word	0x2000979c

08005b48 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005b50:	4b11      	ldr	r3, [pc, #68]	; (8005b98 <_sbrk+0x50>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <_sbrk+0x16>
		heap_end = &end;
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <_sbrk+0x50>)
 8005b5a:	4a10      	ldr	r2, [pc, #64]	; (8005b9c <_sbrk+0x54>)
 8005b5c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005b5e:	4b0e      	ldr	r3, [pc, #56]	; (8005b98 <_sbrk+0x50>)
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005b64:	4b0c      	ldr	r3, [pc, #48]	; (8005b98 <_sbrk+0x50>)
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	466a      	mov	r2, sp
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d907      	bls.n	8005b82 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005b72:	f014 fd43 	bl	801a5fc <__errno>
 8005b76:	4602      	mov	r2, r0
 8005b78:	230c      	movs	r3, #12
 8005b7a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b80:	e006      	b.n	8005b90 <_sbrk+0x48>
	}

	heap_end += incr;
 8005b82:	4b05      	ldr	r3, [pc, #20]	; (8005b98 <_sbrk+0x50>)
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4413      	add	r3, r2
 8005b8a:	4a03      	ldr	r2, [pc, #12]	; (8005b98 <_sbrk+0x50>)
 8005b8c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2000034c 	.word	0x2000034c
 8005b9c:	2001e4f0 	.word	0x2001e4f0

08005ba0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ba4:	4b15      	ldr	r3, [pc, #84]	; (8005bfc <SystemInit+0x5c>)
 8005ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005baa:	4a14      	ldr	r2, [pc, #80]	; (8005bfc <SystemInit+0x5c>)
 8005bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005bb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005bb4:	4b12      	ldr	r3, [pc, #72]	; (8005c00 <SystemInit+0x60>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a11      	ldr	r2, [pc, #68]	; (8005c00 <SystemInit+0x60>)
 8005bba:	f043 0301 	orr.w	r3, r3, #1
 8005bbe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005bc0:	4b0f      	ldr	r3, [pc, #60]	; (8005c00 <SystemInit+0x60>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005bc6:	4b0e      	ldr	r3, [pc, #56]	; (8005c00 <SystemInit+0x60>)
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	490d      	ldr	r1, [pc, #52]	; (8005c00 <SystemInit+0x60>)
 8005bcc:	4b0d      	ldr	r3, [pc, #52]	; (8005c04 <SystemInit+0x64>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005bd2:	4b0b      	ldr	r3, [pc, #44]	; (8005c00 <SystemInit+0x60>)
 8005bd4:	4a0c      	ldr	r2, [pc, #48]	; (8005c08 <SystemInit+0x68>)
 8005bd6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005bd8:	4b09      	ldr	r3, [pc, #36]	; (8005c00 <SystemInit+0x60>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a08      	ldr	r2, [pc, #32]	; (8005c00 <SystemInit+0x60>)
 8005bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005be2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005be4:	4b06      	ldr	r3, [pc, #24]	; (8005c00 <SystemInit+0x60>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bea:	4b04      	ldr	r3, [pc, #16]	; (8005bfc <SystemInit+0x5c>)
 8005bec:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bf0:	609a      	str	r2, [r3, #8]
#endif
}
 8005bf2:	bf00      	nop
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr
 8005bfc:	e000ed00 	.word	0xe000ed00
 8005c00:	40023800 	.word	0x40023800
 8005c04:	fef6ffff 	.word	0xfef6ffff
 8005c08:	24003010 	.word	0x24003010
 8005c0c:	00000000 	.word	0x00000000

08005c10 <vTaskBattery>:
#include "tasks/task_battery.h"

float get_temp (uint16_t adc_value);


void vTaskBattery(void *argument) {
 8005c10:	b5b0      	push	{r4, r5, r7, lr}
 8005c12:	b09e      	sub	sp, #120	; 0x78
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	double mah;
	double curr = 0;
 8005c18:	f04f 0300 	mov.w	r3, #0
 8005c1c:	f04f 0400 	mov.w	r4, #0
 8005c20:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	double supp = 0;
 8005c24:	f04f 0300 	mov.w	r3, #0
 8005c28:	f04f 0400 	mov.w	r4, #0
 8005c2c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double bat = 0;
 8005c30:	f04f 0300 	mov.w	r3, #0
 8005c34:	f04f 0400 	mov.w	r4, #0
 8005c38:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48


	battery_data_t battery_data = { 0 };
 8005c3c:	f107 031c 	add.w	r3, r7, #28
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	605a      	str	r2, [r3, #4]
 8005c46:	811a      	strh	r2, [r3, #8]

	int counter = 0;
 8005c48:	2300      	movs	r3, #0
 8005c4a:	647b      	str	r3, [r7, #68]	; 0x44

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005c4c:	f010 f804 	bl	8015c58 <osKernelGetTickCount>
 8005c50:	66f8      	str	r0, [r7, #108]	; 0x6c
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8005c52:	f010 f829 	bl	8015ca8 <osKernelGetTickFreq>
 8005c56:	4602      	mov	r2, r0
 8005c58:	4b67      	ldr	r3, [pc, #412]	; (8005df8 <vTaskBattery+0x1e8>)
 8005c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c5e:	091b      	lsrs	r3, r3, #4
 8005c60:	643b      	str	r3, [r7, #64]	; 0x40

	//ADC init
	uint32_t adc_value[5];

	HAL_ADC_Stop_DMA(&hadc1);
 8005c62:	4866      	ldr	r0, [pc, #408]	; (8005dfc <vTaskBattery+0x1ec>)
 8005c64:	f001 fda2 	bl	80077ac <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8005c68:	f107 0308 	add.w	r3, r7, #8
 8005c6c:	2205      	movs	r2, #5
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4862      	ldr	r0, [pc, #392]	; (8005dfc <vTaskBattery+0x1ec>)
 8005c72:	f001 fcad 	bl	80075d0 <HAL_ADC_Start_DMA>

	osDelay(500);
 8005c76:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005c7a:	f010 f8c5 	bl	8015e08 <osDelay>



	for (;;) {
		tick_count += tick_update;
 8005c7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c82:	4413      	add	r3, r2
 8005c84:	66fb      	str	r3, [r7, #108]	; 0x6c

		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fa fc5b 	bl	8000544 <__aeabi_ui2d>
 8005c8e:	f04f 0200 	mov.w	r2, #0
 8005c92:	4b5b      	ldr	r3, [pc, #364]	; (8005e00 <vTaskBattery+0x1f0>)
 8005c94:	f7fa fcd0 	bl	8000638 <__aeabi_dmul>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	460c      	mov	r4, r1
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	a34f      	add	r3, pc, #316	; (adr r3, 8005de0 <vTaskBattery+0x1d0>)
 8005ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca6:	f7fa fb0f 	bl	80002c8 <__aeabi_dsub>
 8005caa:	4603      	mov	r3, r0
 8005cac:	460c      	mov	r4, r1
 8005cae:	4618      	mov	r0, r3
 8005cb0:	4621      	mov	r1, r4
 8005cb2:	a34d      	add	r3, pc, #308	; (adr r3, 8005de8 <vTaskBattery+0x1d8>)
 8005cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cb8:	f7fa fde8 	bl	800088c <__aeabi_ddiv>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	460c      	mov	r4, r1
 8005cc0:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f7fa fc3c 	bl	8000544 <__aeabi_ui2d>
 8005ccc:	f04f 0200 	mov.w	r2, #0
 8005cd0:	4b4b      	ldr	r3, [pc, #300]	; (8005e00 <vTaskBattery+0x1f0>)
 8005cd2:	f7fa fcb1 	bl	8000638 <__aeabi_dmul>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	460c      	mov	r4, r1
 8005cda:	4618      	mov	r0, r3
 8005cdc:	4621      	mov	r1, r4
 8005cde:	4602      	mov	r2, r0
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	f7fa faf3 	bl	80002cc <__adddf3>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	4618      	mov	r0, r3
 8005cec:	4621      	mov	r1, r4
 8005cee:	f7fa ff73 	bl	8000bd8 <__aeabi_d2f>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	637b      	str	r3, [r7, #52]	; 0x34
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7fa fc23 	bl	8000544 <__aeabi_ui2d>
 8005cfe:	f04f 0200 	mov.w	r2, #0
 8005d02:	4b3f      	ldr	r3, [pc, #252]	; (8005e00 <vTaskBattery+0x1f0>)
 8005d04:	f7fa fc98 	bl	8000638 <__aeabi_dmul>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	4621      	mov	r1, r4
 8005d10:	a337      	add	r3, pc, #220	; (adr r3, 8005df0 <vTaskBattery+0x1e0>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f7fa fc8f 	bl	8000638 <__aeabi_dmul>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	460c      	mov	r4, r1
 8005d1e:	4618      	mov	r0, r3
 8005d20:	4621      	mov	r1, r4
 8005d22:	f7fa ff59 	bl	8000bd8 <__aeabi_d2f>
 8005d26:	4603      	mov	r3, r0
 8005d28:	633b      	str	r3, [r7, #48]	; 0x30
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f7fa fc09 	bl	8000544 <__aeabi_ui2d>
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	4b32      	ldr	r3, [pc, #200]	; (8005e00 <vTaskBattery+0x1f0>)
 8005d38:	f7fa fc7e 	bl	8000638 <__aeabi_dmul>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	4618      	mov	r0, r3
 8005d42:	4621      	mov	r1, r4
 8005d44:	a326      	add	r3, pc, #152	; (adr r3, 8005de0 <vTaskBattery+0x1d0>)
 8005d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4a:	f7fa fabd 	bl	80002c8 <__aeabi_dsub>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	460c      	mov	r4, r1
 8005d52:	4618      	mov	r0, r3
 8005d54:	4621      	mov	r1, r4
 8005d56:	a324      	add	r3, pc, #144	; (adr r3, 8005de8 <vTaskBattery+0x1d8>)
 8005d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d5c:	f7fa fd96 	bl	800088c <__aeabi_ddiv>
 8005d60:	4603      	mov	r3, r0
 8005d62:	460c      	mov	r4, r1
 8005d64:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		get_temp(adc_value[4]); // temp
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f000 f917 	bl	8005fa0 <get_temp>

		// Filter adc values
		if (counter < 50) {
 8005d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d74:	2b31      	cmp	r3, #49	; 0x31
 8005d76:	dc45      	bgt.n	8005e04 <vTaskBattery+0x1f4>
			counter++;
 8005d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	647b      	str	r3, [r7, #68]	; 0x44
			curr += current1 + current2;
 8005d7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005d82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005d86:	f7fa faa1 	bl	80002cc <__adddf3>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	461a      	mov	r2, r3
 8005d90:	4623      	mov	r3, r4
 8005d92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d96:	f7fa fa99 	bl	80002cc <__adddf3>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	460c      	mov	r4, r1
 8005d9e:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			supp += supply_voltage;
 8005da2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005da4:	f7fa fbf0 	bl	8000588 <__aeabi_f2d>
 8005da8:	4603      	mov	r3, r0
 8005daa:	460c      	mov	r4, r1
 8005dac:	461a      	mov	r2, r3
 8005dae:	4623      	mov	r3, r4
 8005db0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005db4:	f7fa fa8a 	bl	80002cc <__adddf3>
 8005db8:	4603      	mov	r3, r0
 8005dba:	460c      	mov	r4, r1
 8005dbc:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			bat += battery_voltage;
 8005dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dc2:	f7fa fbe1 	bl	8000588 <__aeabi_f2d>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	461a      	mov	r2, r3
 8005dcc:	4623      	mov	r3, r4
 8005dce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005dd2:	f7fa fa7b 	bl	80002cc <__adddf3>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	460c      	mov	r4, r1
 8005dda:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8005dde:	e0c9      	b.n	8005f74 <vTaskBattery+0x364>
 8005de0:	be0ded28 	.word	0xbe0ded28
 8005de4:	3fd69930 	.word	0x3fd69930
 8005de8:	4189374c 	.word	0x4189374c
 8005dec:	3fd0e560 	.word	0x3fd0e560
 8005df0:	cccccccd 	.word	0xcccccccd
 8005df4:	4014cccc 	.word	0x4014cccc
 8005df8:	51eb851f 	.word	0x51eb851f
 8005dfc:	2000fb94 	.word	0x2000fb94
 8005e00:	3f440000 	.word	0x3f440000
		} else {
			counter = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	647b      	str	r3, [r7, #68]	; 0x44
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8005e08:	f04f 0200 	mov.w	r2, #0
 8005e0c:	4b5b      	ldr	r3, [pc, #364]	; (8005f7c <vTaskBattery+0x36c>)
 8005e0e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e12:	f7fa fd3b 	bl	800088c <__aeabi_ddiv>
 8005e16:	4603      	mov	r3, r0
 8005e18:	460c      	mov	r4, r1
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	4623      	mov	r3, r4
 8005e1e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e22:	f7fa fa53 	bl	80002cc <__adddf3>
 8005e26:	4603      	mov	r3, r0
 8005e28:	460c      	mov	r4, r1
 8005e2a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			battery_data.consumption = (uint16_t)mah;
 8005e2e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e32:	f7fa feb1 	bl	8000b98 <__aeabi_d2uiz>
 8005e36:	4603      	mov	r3, r0
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	847b      	strh	r3, [r7, #34]	; 0x22
			battery_data.current = (uint16_t)(curr*1000)/50;
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	4b4f      	ldr	r3, [pc, #316]	; (8005f80 <vTaskBattery+0x370>)
 8005e42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e46:	f7fa fbf7 	bl	8000638 <__aeabi_dmul>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	4618      	mov	r0, r3
 8005e50:	4621      	mov	r1, r4
 8005e52:	f7fa fea1 	bl	8000b98 <__aeabi_d2uiz>
 8005e56:	4603      	mov	r3, r0
 8005e58:	b29b      	uxth	r3, r3
 8005e5a:	4a4a      	ldr	r2, [pc, #296]	; (8005f84 <vTaskBattery+0x374>)
 8005e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8005e60:	091b      	lsrs	r3, r3, #4
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	843b      	strh	r3, [r7, #32]
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8005e66:	f04f 0200 	mov.w	r2, #0
 8005e6a:	4b45      	ldr	r3, [pc, #276]	; (8005f80 <vTaskBattery+0x370>)
 8005e6c:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e70:	f7fa fbe2 	bl	8000638 <__aeabi_dmul>
 8005e74:	4603      	mov	r3, r0
 8005e76:	460c      	mov	r4, r1
 8005e78:	4618      	mov	r0, r3
 8005e7a:	4621      	mov	r1, r4
 8005e7c:	f04f 0200 	mov.w	r2, #0
 8005e80:	4b41      	ldr	r3, [pc, #260]	; (8005f88 <vTaskBattery+0x378>)
 8005e82:	f7fa fd03 	bl	800088c <__aeabi_ddiv>
 8005e86:	4603      	mov	r3, r0
 8005e88:	460c      	mov	r4, r1
 8005e8a:	4625      	mov	r5, r4
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005e92:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005f8c <vTaskBattery+0x37c>
 8005e96:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005e9a:	ee16 0a90 	vmov	r0, s13
 8005e9e:	f7fa fb73 	bl	8000588 <__aeabi_f2d>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	4620      	mov	r0, r4
 8005ea8:	4629      	mov	r1, r5
 8005eaa:	f7fa fbc5 	bl	8000638 <__aeabi_dmul>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	4621      	mov	r1, r4
 8005eb6:	f7fa fe6f 	bl	8000b98 <__aeabi_d2uiz>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	84bb      	strh	r3, [r7, #36]	; 0x24
			battery_data.supply = (uint16_t)(supp * 20);
 8005ec0:	f04f 0200 	mov.w	r2, #0
 8005ec4:	4b32      	ldr	r3, [pc, #200]	; (8005f90 <vTaskBattery+0x380>)
 8005ec6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005eca:	f7fa fbb5 	bl	8000638 <__aeabi_dmul>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	4621      	mov	r1, r4
 8005ed6:	f7fa fe5f 	bl	8000b98 <__aeabi_d2uiz>
 8005eda:	4603      	mov	r3, r0
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	83bb      	strh	r3, [r7, #28]
			battery_data.battery = (uint16_t)(bat * 20);
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	4b2a      	ldr	r3, [pc, #168]	; (8005f90 <vTaskBattery+0x380>)
 8005ee6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005eea:	f7fa fba5 	bl	8000638 <__aeabi_dmul>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	460c      	mov	r4, r1
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	4621      	mov	r1, r4
 8005ef6:	f7fa fe4f 	bl	8000b98 <__aeabi_d2uiz>
 8005efa:	4603      	mov	r3, r0
 8005efc:	b29b      	uxth	r3, r3
 8005efe:	83fb      	strh	r3, [r7, #30]
			curr = 0;
 8005f00:	f04f 0300 	mov.w	r3, #0
 8005f04:	f04f 0400 	mov.w	r4, #0
 8005f08:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			bat = 0;
 8005f0c:	f04f 0300 	mov.w	r3, #0
 8005f10:	f04f 0400 	mov.w	r4, #0
 8005f14:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			supp = 0;
 8005f18:	f04f 0300 	mov.w	r3, #0
 8005f1c:	f04f 0400 	mov.w	r4, #0
 8005f20:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f24:	8bbb      	ldrh	r3, [r7, #28]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f26:	4619      	mov	r1, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f28:	8bfb      	ldrh	r3, [r7, #30]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f2a:	4618      	mov	r0, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f2c:	8c3b      	ldrh	r3, [r7, #32]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f2e:	461c      	mov	r4, r3
					battery_data.consumption, battery_data.power);
 8005f30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f32:	8cba      	ldrh	r2, [r7, #36]	; 0x24
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f34:	9201      	str	r2, [sp, #4]
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	4623      	mov	r3, r4
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	4815      	ldr	r0, [pc, #84]	; (8005f94 <vTaskBattery+0x384>)
 8005f3e:	f7fe f9ad 	bl	800429c <UsbPrint>

			/* Log Battery Power */
			logSensor(tick_count, 1, BATTERY, &battery_data);
 8005f42:	f107 031c 	add.w	r3, r7, #28
 8005f46:	2204      	movs	r2, #4
 8005f48:	2101      	movs	r1, #1
 8005f4a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f4c:	f7fd ffd0 	bl	8003ef0 <logSensor>

			/* Write Data into global Variable */
			if(AcquireMutex(&battery_mutex) == osOK ){
 8005f50:	4811      	ldr	r0, [pc, #68]	; (8005f98 <vTaskBattery+0x388>)
 8005f52:	f7fd fec1 	bl	8003cd8 <AcquireMutex>
 8005f56:	4603      	mov	r3, r0
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10b      	bne.n	8005f74 <vTaskBattery+0x364>
				global_battery_data.battery = battery_data.battery;
 8005f5c:	8bfa      	ldrh	r2, [r7, #30]
 8005f5e:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <vTaskBattery+0x38c>)
 8005f60:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 8005f62:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005f64:	4b0d      	ldr	r3, [pc, #52]	; (8005f9c <vTaskBattery+0x38c>)
 8005f66:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8005f68:	8c3a      	ldrh	r2, [r7, #32]
 8005f6a:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <vTaskBattery+0x38c>)
 8005f6c:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8005f6e:	480a      	ldr	r0, [pc, #40]	; (8005f98 <vTaskBattery+0x388>)
 8005f70:	f7fd fecc 	bl	8003d0c <ReleaseMutex>
			}
		}

		/* Sleep */
		osDelayUntil(tick_count);
 8005f74:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f76:	f00f ff75 	bl	8015e64 <osDelayUntil>
	for (;;) {
 8005f7a:	e680      	b.n	8005c7e <vTaskBattery+0x6e>
 8005f7c:	40668000 	.word	0x40668000
 8005f80:	408f4000 	.word	0x408f4000
 8005f84:	51eb851f 	.word	0x51eb851f
 8005f88:	40490000 	.word	0x40490000
 8005f8c:	42480000 	.word	0x42480000
 8005f90:	40340000 	.word	0x40340000
 8005f94:	0801d328 	.word	0x0801d328
 8005f98:	20009794 	.word	0x20009794
 8005f9c:	2000fb8c 	.word	0x2000fb8c

08005fa0 <get_temp>:
	}
}


float get_temp (uint16_t adc_value){
 8005fa0:	b590      	push	{r4, r7, lr}
 8005fa2:	b085      	sub	sp, #20
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	80fb      	strh	r3, [r7, #6]
	float VSENSE;
	VSENSE = 2.5/4096 * adc_value;
 8005faa:	88fb      	ldrh	r3, [r7, #6]
 8005fac:	4618      	mov	r0, r3
 8005fae:	f7fa fad9 	bl	8000564 <__aeabi_i2d>
 8005fb2:	f04f 0200 	mov.w	r2, #0
 8005fb6:	4b20      	ldr	r3, [pc, #128]	; (8006038 <get_temp+0x98>)
 8005fb8:	f7fa fb3e 	bl	8000638 <__aeabi_dmul>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	460c      	mov	r4, r1
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	4621      	mov	r1, r4
 8005fc4:	f7fa fe08 	bl	8000bd8 <__aeabi_d2f>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	60fb      	str	r3, [r7, #12]
	return ((V25 - VSENSE) / AVG_SLOPE + 25);
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7fa fadb 	bl	8000588 <__aeabi_f2d>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	4623      	mov	r3, r4
 8005fda:	a113      	add	r1, pc, #76	; (adr r1, 8006028 <get_temp+0x88>)
 8005fdc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe0:	f7fa f972 	bl	80002c8 <__aeabi_dsub>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	460c      	mov	r4, r1
 8005fe8:	4618      	mov	r0, r3
 8005fea:	4621      	mov	r1, r4
 8005fec:	a310      	add	r3, pc, #64	; (adr r3, 8006030 <get_temp+0x90>)
 8005fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff2:	f7fa fc4b 	bl	800088c <__aeabi_ddiv>
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	460c      	mov	r4, r1
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	f04f 0200 	mov.w	r2, #0
 8006002:	4b0e      	ldr	r3, [pc, #56]	; (800603c <get_temp+0x9c>)
 8006004:	f7fa f962 	bl	80002cc <__adddf3>
 8006008:	4603      	mov	r3, r0
 800600a:	460c      	mov	r4, r1
 800600c:	4618      	mov	r0, r3
 800600e:	4621      	mov	r1, r4
 8006010:	f7fa fde2 	bl	8000bd8 <__aeabi_d2f>
 8006014:	4603      	mov	r3, r0
 8006016:	ee07 3a90 	vmov	s15, r3
}
 800601a:	eeb0 0a67 	vmov.f32	s0, s15
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	bd90      	pop	{r4, r7, pc}
 8006024:	f3af 8000 	nop.w
 8006028:	ae147ae1 	.word	0xae147ae1
 800602c:	3ff6e147 	.word	0x3ff6e147
 8006030:	75f6fd22 	.word	0x75f6fd22
 8006034:	3f719ce0 	.word	0x3f719ce0
 8006038:	3f440000 	.word	0x3f440000
 800603c:	40390000 	.word	0x40390000

08006040 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8006040:	b580      	push	{r7, lr}
 8006042:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8006046:	af00      	add	r7, sp, #0
 8006048:	1d3b      	adds	r3, r7, #4
 800604a:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 800604c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8006050:	2200      	movs	r2, #0
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	605a      	str	r2, [r3, #4]
 8006056:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 8006058:	f107 0308 	add.w	r3, r7, #8
 800605c:	4618      	mov	r0, r3
 800605e:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8006062:	461a      	mov	r2, r3
 8006064:	2100      	movs	r1, #0
 8006066:	f014 fb0e 	bl	801a686 <memset>
    control_data_init(&control_data);
 800606a:	f107 0308 	add.w	r3, r7, #8
 800606e:	4618      	mov	r0, r3
 8006070:	f7fb fea4 	bl	8001dbc <control_data_init>

	osDelay(500);
 8006074:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006078:	f00f fec6 	bl	8015e08 <osDelay>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800607c:	f00f fdec 	bl	8015c58 <osKernelGetTickCount>
 8006080:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 8006084:	f00f fe10 	bl	8015ca8 <osKernelGetTickFreq>
 8006088:	4602      	mov	r2, r0
 800608a:	4b41      	ldr	r3, [pc, #260]	; (8006190 <vTaskController+0x150>)
 800608c:	fba3 2302 	umull	r2, r3, r3, r2
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470


	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8006096:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 800609a:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 800609e:	4413      	add	r3, r2
 80060a0:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 80060a4:	f207 4234 	addw	r2, r7, #1076	; 0x434
 80060a8:	233c      	movs	r3, #60	; 0x3c
 80060aa:	493a      	ldr	r1, [pc, #232]	; (8006194 <vTaskController+0x154>)
 80060ac:	483a      	ldr	r0, [pc, #232]	; (8006198 <vTaskController+0x158>)
 80060ae:	f7fd fe3b 	bl	8003d28 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 80060b2:	4b38      	ldr	r3, [pc, #224]	; (8006194 <vTaskController+0x154>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	ee07 3a90 	vmov	s15, r3
 80060ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060be:	eddf 6a37 	vldr	s13, [pc, #220]	; 800619c <vTaskController+0x15c>
 80060c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060c6:	f107 0308 	add.w	r3, r7, #8
 80060ca:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 80060ce:	4b31      	ldr	r3, [pc, #196]	; (8006194 <vTaskController+0x154>)
 80060d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d2:	ee07 3a90 	vmov	s15, r3
 80060d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060da:	eddf 6a30 	vldr	s13, [pc, #192]	; 800619c <vTaskController+0x15c>
 80060de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 80060ea:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80060ee:	233c      	movs	r3, #60	; 0x3c
 80060f0:	492b      	ldr	r1, [pc, #172]	; (80061a0 <vTaskController+0x160>)
 80060f2:	482c      	ldr	r0, [pc, #176]	; (80061a4 <vTaskController+0x164>)
 80060f4:	f7fd fe18 	bl	8003d28 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 80060f8:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 80060fc:	f107 0308 	add.w	r3, r7, #8
 8006100:	4611      	mov	r1, r2
 8006102:	4618      	mov	r0, r3
 8006104:	f7fb fd48 	bl	8001b98 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8006108:	4827      	ldr	r0, [pc, #156]	; (80061a8 <vTaskController+0x168>)
 800610a:	f7fd fde5 	bl	8003cd8 <AcquireMutex>
 800610e:	4603      	mov	r3, r0
 8006110:	2b00      	cmp	r3, #0
 8006112:	d110      	bne.n	8006136 <vTaskController+0xf6>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 8006114:	f107 0308 	add.w	r3, r7, #8
 8006118:	edd3 7a00 	vldr	s15, [r3]
 800611c:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800619c <vTaskController+0x15c>
 8006120:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006128:	ee17 2a90 	vmov	r2, s15
 800612c:	4b1f      	ldr	r3, [pc, #124]	; (80061ac <vTaskController+0x16c>)
 800612e:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 8006130:	481d      	ldr	r0, [pc, #116]	; (80061a8 <vTaskController+0x168>)
 8006132:	f7fd fdeb 	bl	8003d0c <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 8006136:	f00f fd8f 	bl	8015c58 <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	edd3 7a00 	vldr	s15, [r3]
 8006142:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800619c <vTaskController+0x15c>
 8006146:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 800614a:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 800614e:	f107 0308 	add.w	r3, r7, #8
 8006152:	edd3 7a01 	vldr	s15, [r3, #4]
 8006156:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800619c <vTaskController+0x15c>
 800615a:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 800615e:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 8006162:	f107 0308 	add.w	r3, r7, #8
 8006166:	edd3 7a02 	vldr	s15, [r3, #8]
 800616a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800619c <vTaskController+0x15c>
 800616e:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 8006172:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006176:	ee17 3a90 	vmov	r3, s15
 800617a:	ee16 2a10 	vmov	r2, s12
 800617e:	ee16 1a90 	vmov	r1, s13
 8006182:	f7fe f831 	bl	80041e8 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 8006186:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 800618a:	f00f fe6b 	bl	8015e64 <osDelayUntil>
		tick_count += tick_update;
 800618e:	e782      	b.n	8006096 <vTaskController+0x56>
 8006190:	51eb851f 	.word	0x51eb851f
 8006194:	200002f0 	.word	0x200002f0
 8006198:	20011da8 	.word	0x20011da8
 800619c:	447a0000 	.word	0x447a0000
 80061a0:	20000340 	.word	0x20000340
 80061a4:	20009728 	.word	0x20009728
 80061a8:	2000fb84 	.word	0x2000fb84
 80061ac:	2000032c 	.word	0x2000032c

080061b0 <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 80061b0:	b590      	push	{r4, r7, lr}
 80061b2:	b09f      	sub	sp, #124	; 0x7c
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 80061b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061bc:	2200      	movs	r2, #0
 80061be:	601a      	str	r2, [r3, #0]
 80061c0:	605a      	str	r2, [r3, #4]
 80061c2:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 80061c4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80061c8:	4618      	mov	r0, r3
 80061ca:	f7fc fa37 	bl	800263c <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 80061ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80061d2:	223c      	movs	r2, #60	; 0x3c
 80061d4:	2100      	movs	r1, #0
 80061d6:	4618      	mov	r0, r3
 80061d8:	f014 fa55 	bl	801a686 <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 80061dc:	f107 0308 	add.w	r3, r7, #8
 80061e0:	4618      	mov	r0, r3
 80061e2:	f7fb ff6d 	bl	80020c0 <init_env>
	init_env(&environment);
 80061e6:	f107 0318 	add.w	r3, r7, #24
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fb ff68 	bl	80020c0 <init_env>

	osDelay(500);
 80061f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80061f4:	f00f fe08 	bl	8015e08 <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80061f8:	f00f fd2e 	bl	8015c58 <osKernelGetTickCount>
 80061fc:	6778      	str	r0, [r7, #116]	; 0x74
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 80061fe:	f00f fd53 	bl	8015ca8 <osKernelGetTickFreq>
 8006202:	4602      	mov	r2, r0
 8006204:	4b1d      	ldr	r3, [pc, #116]	; (800627c <vTaskFSM+0xcc>)
 8006206:	fba3 2302 	umull	r2, r3, r3, r2
 800620a:	08db      	lsrs	r3, r3, #3
 800620c:	673b      	str	r3, [r7, #112]	; 0x70

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 800620e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006210:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006212:	4413      	add	r3, r2
 8006214:	677b      	str	r3, [r7, #116]	; 0x74


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 8006216:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800621a:	233c      	movs	r3, #60	; 0x3c
 800621c:	4918      	ldr	r1, [pc, #96]	; (8006280 <vTaskFSM+0xd0>)
 800621e:	4819      	ldr	r0, [pc, #100]	; (8006284 <vTaskFSM+0xd4>)
 8006220:	f7fd fd82 	bl	8003d28 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 8006224:	f107 0218 	add.w	r2, r7, #24
 8006228:	2310      	movs	r3, #16
 800622a:	4917      	ldr	r1, [pc, #92]	; (8006288 <vTaskFSM+0xd8>)
 800622c:	4817      	ldr	r0, [pc, #92]	; (800628c <vTaskFSM+0xdc>)
 800622e:	f7fd fd7b 	bl	8003d28 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 8006232:	f107 0218 	add.w	r2, r7, #24
 8006236:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800623a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800623e:	4618      	mov	r0, r3
 8006240:	f7fc f8fa 	bl	8002438 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8006244:	4812      	ldr	r0, [pc, #72]	; (8006290 <vTaskFSM+0xe0>)
 8006246:	f7fd fd47 	bl	8003cd8 <AcquireMutex>
 800624a:	4603      	mov	r3, r0
 800624c:	2b00      	cmp	r3, #0
 800624e:	d10a      	bne.n	8006266 <vTaskFSM+0xb6>
			global_flight_phase_detection = flight_phase_detection;
 8006250:	4b10      	ldr	r3, [pc, #64]	; (8006294 <vTaskFSM+0xe4>)
 8006252:	461c      	mov	r4, r3
 8006254:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006258:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800625c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8006260:	480b      	ldr	r0, [pc, #44]	; (8006290 <vTaskFSM+0xe0>)
 8006262:	f7fd fd53 	bl	8003d0c <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 8006266:	f00f fcf7 	bl	8015c58 <osKernelGetTickCount>
 800626a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800626e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006270:	f7fd ff5a 	bl	8004128 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 8006274:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8006276:	f00f fdf5 	bl	8015e64 <osDelayUntil>
		tick_count += tick_update;
 800627a:	e7c8      	b.n	800620e <vTaskFSM+0x5e>
 800627c:	cccccccd 	.word	0xcccccccd
 8006280:	200002f0 	.word	0x200002f0
 8006284:	20011da8 	.word	0x20011da8
 8006288:	20000330 	.word	0x20000330
 800628c:	2000bb14 	.word	0x2000bb14
 8006290:	20009728 	.word	0x20009728
 8006294:	20000340 	.word	0x20000340

08006298 <vTaskGps>:

UBLOX GPS1 = {0,&huart1};
UBLOX GPS2 = {1,&huart2};
UBLOX GPS3 = {2,&huart3};

void vTaskGps(void *argument) {
 8006298:	b5b0      	push	{r4, r5, r7, lr}
 800629a:	b08e      	sub	sp, #56	; 0x38
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	gps_telemetry_t gps_telemetry = { 0 };
 80062a0:	f107 030c 	add.w	r3, r7, #12
 80062a4:	2220      	movs	r2, #32
 80062a6:	2100      	movs	r1, #0
 80062a8:	4618      	mov	r0, r3
 80062aa:	f014 f9ec 	bl	801a686 <memset>
	uint8_t choose_GPS = 1;
 80062ae:	2301      	movs	r3, #1
 80062b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80062b4:	f00f fcd0 	bl	8015c58 <osKernelGetTickCount>
 80062b8:	6378      	str	r0, [r7, #52]	; 0x34
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 80062ba:	f00f fcf5 	bl	8015ca8 <osKernelGetTickFreq>
 80062be:	4603      	mov	r3, r0
 80062c0:	085b      	lsrs	r3, r3, #1
 80062c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	osDelay(500);
 80062c4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80062c8:	f00f fd9e 	bl	8015e08 <osDelay>

	gps_dma_init(&GPS1);
 80062cc:	4871      	ldr	r0, [pc, #452]	; (8006494 <vTaskGps+0x1fc>)
 80062ce:	f7fb fb95 	bl	80019fc <gps_dma_init>
	gps_dma_init(&GPS2);
 80062d2:	4871      	ldr	r0, [pc, #452]	; (8006498 <vTaskGps+0x200>)
 80062d4:	f7fb fb92 	bl	80019fc <gps_dma_init>
	gps_dma_init(&GPS3);
 80062d8:	4870      	ldr	r0, [pc, #448]	; (800649c <vTaskGps+0x204>)
 80062da:	f7fb fb8f 	bl	80019fc <gps_dma_init>

	for (;;) {
		tick_count += tick_update;
 80062de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80062e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e2:	4413      	add	r3, r2
 80062e4:	637b      	str	r3, [r7, #52]	; 0x34

		/* Read GPS */
		gps_read_sensor(&GPS1);
 80062e6:	486b      	ldr	r0, [pc, #428]	; (8006494 <vTaskGps+0x1fc>)
 80062e8:	f7fb fbac 	bl	8001a44 <gps_read_sensor>
		gps_read_sensor(&GPS2);
 80062ec:	486a      	ldr	r0, [pc, #424]	; (8006498 <vTaskGps+0x200>)
 80062ee:	f7fb fba9 	bl	8001a44 <gps_read_sensor>
		gps_read_sensor(&GPS3);
 80062f2:	486a      	ldr	r0, [pc, #424]	; (800649c <vTaskGps+0x204>)
 80062f4:	f7fb fba6 	bl	8001a44 <gps_read_sensor>
		//		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
		//								GPS3.data.hour, GPS3.data.minute, GPS3.data.second, GPS3.data.lat_deg,
		//								GPS3.data.lat_decimal, GPS3.data.lon_deg, GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 80062f8:	f00f fcae 	bl	8015c58 <osKernelGetTickCount>
 80062fc:	4b68      	ldr	r3, [pc, #416]	; (80064a0 <vTaskGps+0x208>)
 80062fe:	2203      	movs	r2, #3
 8006300:	2101      	movs	r1, #1
 8006302:	f7fd fdf5 	bl	8003ef0 <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 8006306:	f00f fca7 	bl	8015c58 <osKernelGetTickCount>
 800630a:	4b66      	ldr	r3, [pc, #408]	; (80064a4 <vTaskGps+0x20c>)
 800630c:	2203      	movs	r2, #3
 800630e:	2102      	movs	r1, #2
 8006310:	f7fd fdee 	bl	8003ef0 <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 8006314:	f00f fca0 	bl	8015c58 <osKernelGetTickCount>
 8006318:	4b63      	ldr	r3, [pc, #396]	; (80064a8 <vTaskGps+0x210>)
 800631a:	2203      	movs	r2, #3
 800631c:	2103      	movs	r1, #3
 800631e:	f7fd fde7 	bl	8003ef0 <logSensor>

		/* get best possible GPS for Telemetry */

		if(GPS1.data.satellite >= GPS2.data.satellite){
 8006322:	4b5c      	ldr	r3, [pc, #368]	; (8006494 <vTaskGps+0x1fc>)
 8006324:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006328:	4b5b      	ldr	r3, [pc, #364]	; (8006498 <vTaskGps+0x200>)
 800632a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800632e:	429a      	cmp	r2, r3
 8006330:	d30f      	bcc.n	8006352 <vTaskGps+0xba>
			if(GPS1.data.satellite >= GPS3.data.satellite){
 8006332:	4b58      	ldr	r3, [pc, #352]	; (8006494 <vTaskGps+0x1fc>)
 8006334:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006338:	4b58      	ldr	r3, [pc, #352]	; (800649c <vTaskGps+0x204>)
 800633a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800633e:	429a      	cmp	r2, r3
 8006340:	d303      	bcc.n	800634a <vTaskGps+0xb2>
				choose_GPS = 1;
 8006342:	2301      	movs	r3, #1
 8006344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006348:	e032      	b.n	80063b0 <vTaskGps+0x118>
			}
			else{
				choose_GPS = 3;
 800634a:	2303      	movs	r3, #3
 800634c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006350:	e02e      	b.n	80063b0 <vTaskGps+0x118>
			}
		}
		else if(GPS2.data.satellite >= GPS3.data.satellite){
 8006352:	4b51      	ldr	r3, [pc, #324]	; (8006498 <vTaskGps+0x200>)
 8006354:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006358:	4b50      	ldr	r3, [pc, #320]	; (800649c <vTaskGps+0x204>)
 800635a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800635e:	429a      	cmp	r2, r3
 8006360:	d30f      	bcc.n	8006382 <vTaskGps+0xea>
			if(GPS2.data.satellite >= GPS1.data.satellite){
 8006362:	4b4d      	ldr	r3, [pc, #308]	; (8006498 <vTaskGps+0x200>)
 8006364:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006368:	4b4a      	ldr	r3, [pc, #296]	; (8006494 <vTaskGps+0x1fc>)
 800636a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800636e:	429a      	cmp	r2, r3
 8006370:	d303      	bcc.n	800637a <vTaskGps+0xe2>
				choose_GPS = 2;
 8006372:	2302      	movs	r3, #2
 8006374:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006378:	e01a      	b.n	80063b0 <vTaskGps+0x118>
			}
			else{
				choose_GPS = 1;
 800637a:	2301      	movs	r3, #1
 800637c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006380:	e016      	b.n	80063b0 <vTaskGps+0x118>
			}
		}
		else if(GPS3.data.satellite >= GPS1.data.satellite){
 8006382:	4b46      	ldr	r3, [pc, #280]	; (800649c <vTaskGps+0x204>)
 8006384:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006388:	4b42      	ldr	r3, [pc, #264]	; (8006494 <vTaskGps+0x1fc>)
 800638a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800638e:	429a      	cmp	r2, r3
 8006390:	d30e      	bcc.n	80063b0 <vTaskGps+0x118>
			if(GPS3.data.satellite >= GPS2.data.satellite){
 8006392:	4b42      	ldr	r3, [pc, #264]	; (800649c <vTaskGps+0x204>)
 8006394:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8006398:	4b3f      	ldr	r3, [pc, #252]	; (8006498 <vTaskGps+0x200>)
 800639a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800639e:	429a      	cmp	r2, r3
 80063a0:	d303      	bcc.n	80063aa <vTaskGps+0x112>
				choose_GPS = 3;
 80063a2:	2303      	movs	r3, #3
 80063a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80063a8:	e002      	b.n	80063b0 <vTaskGps+0x118>
			}
			else{
				choose_GPS = 2;
 80063aa:	2302      	movs	r3, #2
 80063ac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}

		if(choose_GPS == 1){
 80063b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d11b      	bne.n	80063f0 <vTaskGps+0x158>
			gps_telemetry.hour = GPS1.data.hour;
 80063b8:	4b36      	ldr	r3, [pc, #216]	; (8006494 <vTaskGps+0x1fc>)
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	60fb      	str	r3, [r7, #12]
			gps_telemetry.minute = GPS1.data.minute;
 80063be:	4b35      	ldr	r3, [pc, #212]	; (8006494 <vTaskGps+0x1fc>)
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	613b      	str	r3, [r7, #16]
			gps_telemetry.second = GPS1.data.second;
 80063c4:	4b33      	ldr	r3, [pc, #204]	; (8006494 <vTaskGps+0x1fc>)
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	617b      	str	r3, [r7, #20]
			gps_telemetry.lat_deg = GPS1.data.lat_deg;
 80063ca:	4b32      	ldr	r3, [pc, #200]	; (8006494 <vTaskGps+0x1fc>)
 80063cc:	7d1b      	ldrb	r3, [r3, #20]
 80063ce:	763b      	strb	r3, [r7, #24]
			gps_telemetry.lat_decimal = GPS1.data.lat_decimal;
 80063d0:	4b30      	ldr	r3, [pc, #192]	; (8006494 <vTaskGps+0x1fc>)
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	61fb      	str	r3, [r7, #28]
			gps_telemetry.lon_deg = GPS1.data.lon_deg;
 80063d6:	4b2f      	ldr	r3, [pc, #188]	; (8006494 <vTaskGps+0x1fc>)
 80063d8:	7f1b      	ldrb	r3, [r3, #28]
 80063da:	f887 3020 	strb.w	r3, [r7, #32]
			gps_telemetry.lon_decimal = GPS1.data.lon_decimal;
 80063de:	4b2d      	ldr	r3, [pc, #180]	; (8006494 <vTaskGps+0x1fc>)
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
			gps_telemetry.satellite = GPS1.data.satellite;
 80063e4:	4b2b      	ldr	r3, [pc, #172]	; (8006494 <vTaskGps+0x1fc>)
 80063e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80063ea:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 80063ee:	e03a      	b.n	8006466 <vTaskGps+0x1ce>
		}
		else if(choose_GPS == 2){
 80063f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063f4:	2b02      	cmp	r3, #2
 80063f6:	d11b      	bne.n	8006430 <vTaskGps+0x198>
			gps_telemetry.hour = GPS1.data.hour;
 80063f8:	4b26      	ldr	r3, [pc, #152]	; (8006494 <vTaskGps+0x1fc>)
 80063fa:	689b      	ldr	r3, [r3, #8]
 80063fc:	60fb      	str	r3, [r7, #12]
			gps_telemetry.minute = GPS1.data.minute;
 80063fe:	4b25      	ldr	r3, [pc, #148]	; (8006494 <vTaskGps+0x1fc>)
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	613b      	str	r3, [r7, #16]
			gps_telemetry.second = GPS1.data.second;
 8006404:	4b23      	ldr	r3, [pc, #140]	; (8006494 <vTaskGps+0x1fc>)
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	617b      	str	r3, [r7, #20]
			gps_telemetry.lat_deg = GPS1.data.lat_deg;
 800640a:	4b22      	ldr	r3, [pc, #136]	; (8006494 <vTaskGps+0x1fc>)
 800640c:	7d1b      	ldrb	r3, [r3, #20]
 800640e:	763b      	strb	r3, [r7, #24]
			gps_telemetry.lat_decimal = GPS1.data.lat_decimal;
 8006410:	4b20      	ldr	r3, [pc, #128]	; (8006494 <vTaskGps+0x1fc>)
 8006412:	699b      	ldr	r3, [r3, #24]
 8006414:	61fb      	str	r3, [r7, #28]
			gps_telemetry.lon_deg = GPS1.data.lon_deg;
 8006416:	4b1f      	ldr	r3, [pc, #124]	; (8006494 <vTaskGps+0x1fc>)
 8006418:	7f1b      	ldrb	r3, [r3, #28]
 800641a:	f887 3020 	strb.w	r3, [r7, #32]
			gps_telemetry.lon_decimal = GPS1.data.lon_decimal;
 800641e:	4b1d      	ldr	r3, [pc, #116]	; (8006494 <vTaskGps+0x1fc>)
 8006420:	6a1b      	ldr	r3, [r3, #32]
 8006422:	627b      	str	r3, [r7, #36]	; 0x24
			gps_telemetry.satellite = GPS1.data.satellite;
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <vTaskGps+0x1fc>)
 8006426:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800642a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
 800642e:	e01a      	b.n	8006466 <vTaskGps+0x1ce>
		}
		else{
			gps_telemetry.hour = GPS3.data.hour;
 8006430:	4b1a      	ldr	r3, [pc, #104]	; (800649c <vTaskGps+0x204>)
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	60fb      	str	r3, [r7, #12]
			gps_telemetry.minute = GPS3.data.minute;
 8006436:	4b19      	ldr	r3, [pc, #100]	; (800649c <vTaskGps+0x204>)
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	613b      	str	r3, [r7, #16]
			gps_telemetry.second = GPS3.data.second;
 800643c:	4b17      	ldr	r3, [pc, #92]	; (800649c <vTaskGps+0x204>)
 800643e:	691b      	ldr	r3, [r3, #16]
 8006440:	617b      	str	r3, [r7, #20]
			gps_telemetry.lat_deg = GPS3.data.lat_deg;
 8006442:	4b16      	ldr	r3, [pc, #88]	; (800649c <vTaskGps+0x204>)
 8006444:	7d1b      	ldrb	r3, [r3, #20]
 8006446:	763b      	strb	r3, [r7, #24]
			gps_telemetry.lat_decimal = GPS3.data.lat_decimal;
 8006448:	4b14      	ldr	r3, [pc, #80]	; (800649c <vTaskGps+0x204>)
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	61fb      	str	r3, [r7, #28]
			gps_telemetry.lon_deg = GPS3.data.lon_deg;
 800644e:	4b13      	ldr	r3, [pc, #76]	; (800649c <vTaskGps+0x204>)
 8006450:	7f1b      	ldrb	r3, [r3, #28]
 8006452:	f887 3020 	strb.w	r3, [r7, #32]
			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
 8006456:	4b11      	ldr	r3, [pc, #68]	; (800649c <vTaskGps+0x204>)
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
			gps_telemetry.satellite = GPS3.data.satellite;
 800645c:	4b0f      	ldr	r3, [pc, #60]	; (800649c <vTaskGps+0x204>)
 800645e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006462:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		}

		if(AcquireMutex(&gps_mutex) == osOK){
 8006466:	4811      	ldr	r0, [pc, #68]	; (80064ac <vTaskGps+0x214>)
 8006468:	f7fd fc36 	bl	8003cd8 <AcquireMutex>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d10c      	bne.n	800648c <vTaskGps+0x1f4>
			globalGPS = gps_telemetry;
 8006472:	4b0f      	ldr	r3, [pc, #60]	; (80064b0 <vTaskGps+0x218>)
 8006474:	461d      	mov	r5, r3
 8006476:	f107 040c 	add.w	r4, r7, #12
 800647a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800647c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800647e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006482:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			ReleaseMutex(&gps_mutex);
 8006486:	4809      	ldr	r0, [pc, #36]	; (80064ac <vTaskGps+0x214>)
 8006488:	f7fd fc40 	bl	8003d0c <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 800648c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800648e:	f00f fce9 	bl	8015e64 <osDelayUntil>
		tick_count += tick_update;
 8006492:	e724      	b.n	80062de <vTaskGps+0x46>
 8006494:	20000004 	.word	0x20000004
 8006498:	20000030 	.word	0x20000030
 800649c:	2000005c 	.word	0x2000005c
 80064a0:	2000000c 	.word	0x2000000c
 80064a4:	20000038 	.word	0x20000038
 80064a8:	20000064 	.word	0x20000064
 80064ac:	20017ef0 	.word	0x20017ef0
 80064b0:	20013e0c 	.word	0x20013e0c

080064b4 <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes(int32_t position);


void vTaskMotorCont(void *argument) {
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b092      	sub	sp, #72	; 0x48
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	; 0x3c

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 80064c0:	239b      	movs	r3, #155	; 0x9b
 80064c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	flight_phase_detection_t flight_phase_detection = { 0 };
 80064c6:	f107 0314 	add.w	r3, r7, #20
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	753b      	strb	r3, [r7, #20]
	flight_phase_detection.mach_number = SUBSONIC;
 80064d6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80064da:	61bb      	str	r3, [r7, #24]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 80064dc:	2301      	movs	r3, #1
 80064de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	int32_t PPM_velocity = 10000;
 80064e2:	f242 7310 	movw	r3, #10000	; 0x2710
 80064e6:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t PPM_acceleration = 100000;
 80064e8:	4b44      	ldr	r3, [pc, #272]	; (80065fc <vTaskMotorCont+0x148>)
 80064ea:	633b      	str	r3, [r7, #48]	; 0x30
	int32_t PPM_deceleration = 100000;
 80064ec:	4b43      	ldr	r3, [pc, #268]	; (80065fc <vTaskMotorCont+0x148>)
 80064ee:	62fb      	str	r3, [r7, #44]	; 0x2c

	int32_t counter = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t telemetry_counter;

	osDelay(500);
 80064f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80064f8:	f00f fc86 	bl	8015e08 <osDelay>


	/* Controller Variables */
	int32_t controller_actuation = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	643b      	str	r3, [r7, #64]	; 0x40
	int32_t measured_motor_position = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	60fb      	str	r3, [r7, #12]

	//	while(EnableMotor() != osOK){
	//		osDelay(1000);
	//		break;
	//	};
	EnableMotor();
 8006508:	f7fa fd8a 	bl	8001020 <EnableMotor>

	SetPositionMode(position_mode);
 800650c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8006510:	4618      	mov	r0, r3
 8006512:	f7fa fdde 	bl	80010d2 <SetPositionMode>
	//	while(SetPositionMode(position_mode) != osOK){
	//		osDelay(1000);
	//		break;
	//	};

	if (position_mode == 0x01) {
 8006516:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 800651a:	2b01      	cmp	r3, #1
 800651c:	d105      	bne.n	800652a <vTaskMotorCont+0x76>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 800651e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006520:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006522:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006524:	f7fa fe55 	bl	80011d2 <ConfigurePPM>
 8006528:	63f8      	str	r0, [r7, #60]	; 0x3c
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800652a:	f00f fb95 	bl	8015c58 <osKernelGetTickCount>
 800652e:	6478      	str	r0, [r7, #68]	; 0x44
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8006530:	f00f fbba 	bl	8015ca8 <osKernelGetTickFreq>
 8006534:	6278      	str	r0, [r7, #36]	; 0x24

	for (;;) {
		tick_count += tick_update;
 8006536:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653a:	4413      	add	r3, r2
 800653c:	647b      	str	r3, [r7, #68]	; 0x44

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 800653e:	f107 030c 	add.w	r3, r7, #12
 8006542:	4618      	mov	r0, r3
 8006544:	f7fa febc 	bl	80012c0 <GetPosition>
 8006548:	63f8      	str	r0, [r7, #60]	; 0x3c

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 800654a:	f107 0223 	add.w	r2, r7, #35	; 0x23
 800654e:	2301      	movs	r3, #1
 8006550:	492b      	ldr	r1, [pc, #172]	; (8006600 <vTaskMotorCont+0x14c>)
 8006552:	482c      	ldr	r0, [pc, #176]	; (8006604 <vTaskMotorCont+0x150>)
 8006554:	f7fd fbe8 	bl	8003d28 <ReadMutex>

		UsbPrint("[MOTOR] Read Position:%d\n", GetPosition);
 8006558:	492b      	ldr	r1, [pc, #172]	; (8006608 <vTaskMotorCont+0x154>)
 800655a:	482c      	ldr	r0, [pc, #176]	; (800660c <vTaskMotorCont+0x158>)
 800655c:	f7fd fe9e 	bl	800429c <UsbPrint>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 8006560:	f107 0214 	add.w	r2, r7, #20
 8006564:	230c      	movs	r3, #12
 8006566:	492a      	ldr	r1, [pc, #168]	; (8006610 <vTaskMotorCont+0x15c>)
 8006568:	482a      	ldr	r0, [pc, #168]	; (8006614 <vTaskMotorCont+0x160>)
 800656a:	f7fd fbdd 	bl	8003d28 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 800656e:	f107 0210 	add.w	r2, r7, #16
 8006572:	2304      	movs	r3, #4
 8006574:	4928      	ldr	r1, [pc, #160]	; (8006618 <vTaskMotorCont+0x164>)
 8006576:	4829      	ldr	r0, [pc, #164]	; (800661c <vTaskMotorCont+0x168>)
 8006578:	f7fd fbd6 	bl	8003d28 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	ee07 3a90 	vmov	s15, r3
 8006582:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006586:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006620 <vTaskMotorCont+0x16c>
 800658a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800658e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8006624 <vTaskMotorCont+0x170>
 8006592:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800659a:	ee17 3a90 	vmov	r3, s15
 800659e:	643b      	str	r3, [r7, #64]	; 0x40

		/* Check Bounds */
		if(desired_motor_position > -2){
 80065a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065a6:	db02      	blt.n	80065ae <vTaskMotorCont+0xfa>
			desired_motor_position = -2;
 80065a8:	f06f 0301 	mvn.w	r3, #1
 80065ac:	643b      	str	r3, [r7, #64]	; 0x40
		}

		if(desired_motor_position < -135){
 80065ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b0:	f113 0f87 	cmn.w	r3, #135	; 0x87
 80065b4:	da02      	bge.n	80065bc <vTaskMotorCont+0x108>
			desired_motor_position = -135;
 80065b6:	f06f 0386 	mvn.w	r3, #134	; 0x86
 80065ba:	643b      	str	r3, [r7, #64]	; 0x40
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 80065bc:	7d3b      	ldrb	r3, [r7, #20]
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d102      	bne.n	80065c8 <vTaskMotorCont+0x114>
			/* Move the Motor */
			MoveToPositionPPM(desired_motor_position);
 80065c2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80065c4:	f7fa fdaa 	bl	800111c <MoveToPositionPPM>
		else{
			//	MoveToPositionPPM(0);
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND){
 80065c8:	7d3b      	ldrb	r3, [r7, #20]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d10a      	bne.n	80065e4 <vTaskMotorCont+0x130>
 80065ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80065d2:	2bd9      	cmp	r3, #217	; 0xd9
 80065d4:	d106      	bne.n	80065e4 <vTaskMotorCont+0x130>
			testairbrakes(-130);
 80065d6:	f06f 0081 	mvn.w	r0, #129	; 0x81
 80065da:	f000 f825 	bl	8006628 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 80065de:	239b      	movs	r3, #155	; 0x9b
 80065e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		}


		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 80065e4:	f00f fb38 	bl	8015c58 <osKernelGetTickCount>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	461a      	mov	r2, r3
 80065ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065ee:	f7fd fe29 	bl	8004244 <logMotor>


		osDelayUntil(tick_count);
 80065f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80065f4:	f00f fc36 	bl	8015e64 <osDelayUntil>
		tick_count += tick_update;
 80065f8:	e79d      	b.n	8006536 <vTaskMotorCont+0x82>
 80065fa:	bf00      	nop
 80065fc:	000186a0 	.word	0x000186a0
 8006600:	20013e2c 	.word	0x20013e2c
 8006604:	2000bb0c 	.word	0x2000bb0c
 8006608:	080012c1 	.word	0x080012c1
 800660c:	0801d378 	.word	0x0801d378
 8006610:	20000340 	.word	0x20000340
 8006614:	20009728 	.word	0x20009728
 8006618:	2000032c 	.word	0x2000032c
 800661c:	2000fb84 	.word	0x2000fb84
 8006620:	447a0000 	.word	0x447a0000
 8006624:	c30c0000 	.word	0xc30c0000

08006628 <testairbrakes>:
	}
}

void testairbrakes(int32_t position){
 8006628:	b580      	push	{r7, lr}
 800662a:	b082      	sub	sp, #8
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
	MoveToPositionPPM(position);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7fa fd73 	bl	800111c <MoveToPositionPPM>
	osDelay(1000);
 8006636:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800663a:	f00f fbe5 	bl	8015e08 <osDelay>
	MoveToPositionPPM(0);
 800663e:	2000      	movs	r0, #0
 8006640:	f7fa fd6c 	bl	800111c <MoveToPositionPPM>
}
 8006644:	bf00      	nop
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 800664c:	b5b0      	push	{r4, r5, r7, lr}
 800664e:	b0cc      	sub	sp, #304	; 0x130
 8006650:	af00      	add	r7, sp, #0
 8006652:	1d3b      	adds	r3, r7, #4
 8006654:	6018      	str	r0, [r3, #0]
	osDelay(100);
 8006656:	2064      	movs	r0, #100	; 0x64
 8006658:	f00f fbd6 	bl	8015e08 <osDelay>
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 800665c:	2300      	movs	r3, #0
 800665e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006662:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006666:	2200      	movs	r2, #0
 8006668:	601a      	str	r2, [r3, #0]
 800666a:	605a      	str	r2, [r3, #4]
 800666c:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 800666e:	48c3      	ldr	r0, [pc, #780]	; (800697c <vTaskSdCard+0x330>)
 8006670:	f7fd fe14 	bl	800429c <UsbPrint>
 8006674:	e000      	b.n	8006678 <vTaskSdCard+0x2c>

	resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8006676:	bf00      	nop
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8006678:	2201      	movs	r2, #1
 800667a:	49c1      	ldr	r1, [pc, #772]	; (8006980 <vTaskSdCard+0x334>)
 800667c:	48c1      	ldr	r0, [pc, #772]	; (8006984 <vTaskSdCard+0x338>)
 800667e:	f00e f9df 	bl	8014a40 <f_mount>
 8006682:	4603      	mov	r3, r0
 8006684:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8006688:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00b      	beq.n	80066a8 <vTaskSdCard+0x5c>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8006690:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006694:	4619      	mov	r1, r3
 8006696:	48bc      	ldr	r0, [pc, #752]	; (8006988 <vTaskSdCard+0x33c>)
 8006698:	f7fd fe00 	bl	800429c <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 800669c:	4bbb      	ldr	r3, [pc, #748]	; (800698c <vTaskSdCard+0x340>)
 800669e:	2200      	movs	r2, #0
 80066a0:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 80066a2:	2064      	movs	r0, #100	; 0x64
 80066a4:	f00f fbb0 	bl	8015e08 <osDelay>
		}
	} while (res != FR_OK);
 80066a8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e2      	bne.n	8006676 <vTaskSdCard+0x2a>

	if (!EULER_LOG_FILE_NAME[0]) {
 80066b0:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f040 80a9 	bne.w	800680c <vTaskSdCard+0x1c0>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 80066ba:	48b5      	ldr	r0, [pc, #724]	; (8006990 <vTaskSdCard+0x344>)
 80066bc:	f7fd fdee 	bl	800429c <UsbPrint>

		unsigned int file_number = 1;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80066c6:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80066ca:	f107 0008 	add.w	r0, r7, #8
 80066ce:	4bb1      	ldr	r3, [pc, #708]	; (8006994 <vTaskSdCard+0x348>)
 80066d0:	4aab      	ldr	r2, [pc, #684]	; (8006980 <vTaskSdCard+0x334>)
 80066d2:	f00f f96d 	bl	80159b0 <f_findfirst>
 80066d6:	4603      	mov	r3, r0
 80066d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80066dc:	e02b      	b.n	8006736 <vTaskSdCard+0xea>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80066de:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80066e2:	3b30      	subs	r3, #48	; 0x30
 80066e4:	2264      	movs	r2, #100	; 0x64
 80066e6:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80066ea:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80066ee:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80066f2:	4613      	mov	r3, r2
 80066f4:	009b      	lsls	r3, r3, #2
 80066f6:	4413      	add	r3, r2
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	18ca      	adds	r2, r1, r3
 80066fc:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006700:	3b30      	subs	r3, #48	; 0x30
 8006702:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 8006704:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 8006708:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800670c:	3301      	adds	r3, #1
 800670e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8006712:	429a      	cmp	r2, r3
 8006714:	d204      	bcs.n	8006720 <vTaskSdCard+0xd4>
				file_number = current_file_number + 1;
 8006716:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800671a:	3301      	adds	r3, #1
 800671c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8006720:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006724:	f107 0308 	add.w	r3, r7, #8
 8006728:	4611      	mov	r1, r2
 800672a:	4618      	mov	r0, r3
 800672c:	f00f f918 	bl	8015960 <f_findnext>
 8006730:	4603      	mov	r3, r0
 8006732:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8006736:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800673a:	2b00      	cmp	r3, #0
 800673c:	d103      	bne.n	8006746 <vTaskSdCard+0xfa>
 800673e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006742:	2b00      	cmp	r3, #0
 8006744:	d1cb      	bne.n	80066de <vTaskSdCard+0x92>
		}
		if (res != FR_OK) {
 8006746:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800674a:	2b00      	cmp	r3, #0
 800674c:	d006      	beq.n	800675c <vTaskSdCard+0x110>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 800674e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006752:	4619      	mov	r1, r3
 8006754:	4890      	ldr	r0, [pc, #576]	; (8006998 <vTaskSdCard+0x34c>)
 8006756:	f7fd fda1 	bl	800429c <UsbPrint>
					res);
			goto resetSDCard;
 800675a:	e78d      	b.n	8006678 <vTaskSdCard+0x2c>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 800675c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006760:	4a8e      	ldr	r2, [pc, #568]	; (800699c <vTaskSdCard+0x350>)
 8006762:	ca07      	ldmia	r2, {r0, r1, r2}
 8006764:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8006768:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800676c:	4b8c      	ldr	r3, [pc, #560]	; (80069a0 <vTaskSdCard+0x354>)
 800676e:	fba3 2301 	umull	r2, r3, r3, r1
 8006772:	08da      	lsrs	r2, r3, #3
 8006774:	4613      	mov	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	4413      	add	r3, r2
 800677a:	005b      	lsls	r3, r3, #1
 800677c:	1aca      	subs	r2, r1, r3
 800677e:	b2d3      	uxtb	r3, r2
 8006780:	3330      	adds	r3, #48	; 0x30
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8006788:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800678c:	4a84      	ldr	r2, [pc, #528]	; (80069a0 <vTaskSdCard+0x354>)
 800678e:	fba2 2303 	umull	r2, r3, r2, r3
 8006792:	08d9      	lsrs	r1, r3, #3
 8006794:	4b82      	ldr	r3, [pc, #520]	; (80069a0 <vTaskSdCard+0x354>)
 8006796:	fba3 2301 	umull	r2, r3, r3, r1
 800679a:	08da      	lsrs	r2, r3, #3
 800679c:	4613      	mov	r3, r2
 800679e:	009b      	lsls	r3, r3, #2
 80067a0:	4413      	add	r3, r2
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	1aca      	subs	r2, r1, r3
 80067a6:	b2d3      	uxtb	r3, r2
 80067a8:	3330      	adds	r3, #48	; 0x30
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 80067b0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80067b4:	4a7b      	ldr	r2, [pc, #492]	; (80069a4 <vTaskSdCard+0x358>)
 80067b6:	fba2 2303 	umull	r2, r3, r2, r3
 80067ba:	0959      	lsrs	r1, r3, #5
 80067bc:	4b78      	ldr	r3, [pc, #480]	; (80069a0 <vTaskSdCard+0x354>)
 80067be:	fba3 2301 	umull	r2, r3, r3, r1
 80067c2:	08da      	lsrs	r2, r3, #3
 80067c4:	4613      	mov	r3, r2
 80067c6:	009b      	lsls	r3, r3, #2
 80067c8:	4413      	add	r3, r2
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	1aca      	subs	r2, r1, r3
 80067ce:	b2d3      	uxtb	r3, r2
 80067d0:	3330      	adds	r3, #48	; 0x30
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 80067d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80067dc:	4619      	mov	r1, r3
 80067de:	4872      	ldr	r0, [pc, #456]	; (80069a8 <vTaskSdCard+0x35c>)
 80067e0:	f7fd fd5c 	bl	800429c <UsbPrint>

		res = f_closedir(&dj);
 80067e4:	f107 0308 	add.w	r3, r7, #8
 80067e8:	4618      	mov	r0, r3
 80067ea:	f00f f84b 	bl	8015884 <f_closedir>
 80067ee:	4603      	mov	r3, r0
 80067f0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80067f4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <vTaskSdCard+0x1c0>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 80067fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006800:	4619      	mov	r1, r3
 8006802:	486a      	ldr	r0, [pc, #424]	; (80069ac <vTaskSdCard+0x360>)
 8006804:	f7fd fd4a 	bl	800429c <UsbPrint>
			goto resetSDCard;
 8006808:	bf00      	nop
 800680a:	e735      	b.n	8006678 <vTaskSdCard+0x2c>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 800680c:	4868      	ldr	r0, [pc, #416]	; (80069b0 <vTaskSdCard+0x364>)
 800680e:	f7fd fd45 	bl	800429c <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 8006812:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006816:	2212      	movs	r2, #18
 8006818:	4619      	mov	r1, r3
 800681a:	4866      	ldr	r0, [pc, #408]	; (80069b4 <vTaskSdCard+0x368>)
 800681c:	f00e f974 	bl	8014b08 <f_open>
 8006820:	4603      	mov	r3, r0
 8006822:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 8006826:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800682a:	2b00      	cmp	r3, #0
 800682c:	d006      	beq.n	800683c <vTaskSdCard+0x1f0>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 800682e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006832:	4619      	mov	r1, r3
 8006834:	4860      	ldr	r0, [pc, #384]	; (80069b8 <vTaskSdCard+0x36c>)
 8006836:	f7fd fd31 	bl	800429c <UsbPrint>
		goto resetSDCard;
 800683a:	e71d      	b.n	8006678 <vTaskSdCard+0x2c>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 800683c:	485f      	ldr	r0, [pc, #380]	; (80069bc <vTaskSdCard+0x370>)
 800683e:	f7fd fd2d 	bl	800429c <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8006842:	4b5c      	ldr	r3, [pc, #368]	; (80069b4 <vTaskSdCard+0x368>)
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	4619      	mov	r1, r3
 8006848:	485a      	ldr	r0, [pc, #360]	; (80069b4 <vTaskSdCard+0x368>)
 800684a:	f00e fd4f 	bl	80152ec <f_lseek>
 800684e:	4603      	mov	r3, r0
 8006850:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8006854:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006858:	2b00      	cmp	r3, #0
 800685a:	d006      	beq.n	800686a <vTaskSdCard+0x21e>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 800685c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006860:	4619      	mov	r1, r3
 8006862:	4857      	ldr	r0, [pc, #348]	; (80069c0 <vTaskSdCard+0x374>)
 8006864:	f7fd fd1a 	bl	800429c <UsbPrint>
		goto resetSDCard;
 8006868:	e706      	b.n	8006678 <vTaskSdCard+0x2c>
	}

	volatile int32_t msgCounter = 0;
 800686a:	2300      	movs	r3, #0
 800686c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8006870:	4b54      	ldr	r3, [pc, #336]	; (80069c4 <vTaskSdCard+0x378>)
 8006872:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8006876:	461d      	mov	r5, r3
 8006878:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800687a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800687c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006880:	c407      	stmia	r4!, {r0, r1, r2}
 8006882:	8023      	strh	r3, [r4, #0]
 8006884:	3402      	adds	r4, #2
 8006886:	0c1b      	lsrs	r3, r3, #16
 8006888:	7023      	strb	r3, [r4, #0]
 800688a:	2300      	movs	r3, #0
 800688c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8006890:	2300      	movs	r3, #0
 8006892:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8006896:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800689a:	4618      	mov	r0, r3
 800689c:	f7f9 fcb8 	bl	8000210 <strlen>
 80068a0:	4602      	mov	r2, r0
 80068a2:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80068a6:	4b48      	ldr	r3, [pc, #288]	; (80069c8 <vTaskSdCard+0x37c>)
 80068a8:	4842      	ldr	r0, [pc, #264]	; (80069b4 <vTaskSdCard+0x368>)
 80068aa:	f00e faf2 	bl	8014e92 <f_write>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 80068b4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d006      	beq.n	80068ca <vTaskSdCard+0x27e>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 80068bc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068c0:	4619      	mov	r1, r3
 80068c2:	4842      	ldr	r0, [pc, #264]	; (80069cc <vTaskSdCard+0x380>)
 80068c4:	f7fd fcea 	bl	800429c <UsbPrint>
		goto resetSDCard;
 80068c8:	e6d6      	b.n	8006678 <vTaskSdCard+0x2c>
	}
	log_entry_t log_entry = { 0 };
 80068ca:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80068ce:	2296      	movs	r2, #150	; 0x96
 80068d0:	2100      	movs	r1, #0
 80068d2:	4618      	mov	r0, r3
 80068d4:	f013 fed7 	bl	801a686 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80068d8:	4b3d      	ldr	r3, [pc, #244]	; (80069d0 <vTaskSdCard+0x384>)
 80068da:	6818      	ldr	r0, [r3, #0]
 80068dc:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80068e0:	f04f 33ff 	mov.w	r3, #4294967295
 80068e4:	2200      	movs	r2, #0
 80068e6:	f00f fed1 	bl	801668c <osMessageQueueGet>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d1f3      	bne.n	80068d8 <vTaskSdCard+0x28c>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 80068f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80068f4:	4618      	mov	r0, r3
 80068f6:	f7f9 fc8b 	bl	8000210 <strlen>
 80068fa:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 80068fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006902:	2b00      	cmp	r3, #0
 8006904:	d015      	beq.n	8006932 <vTaskSdCard+0x2e6>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8006906:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800690a:	4b2f      	ldr	r3, [pc, #188]	; (80069c8 <vTaskSdCard+0x37c>)
 800690c:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8006910:	4828      	ldr	r0, [pc, #160]	; (80069b4 <vTaskSdCard+0x368>)
 8006912:	f00e fabe 	bl	8014e92 <f_write>
 8006916:	4603      	mov	r3, r0
 8006918:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 800691c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006920:	2b00      	cmp	r3, #0
 8006922:	d006      	beq.n	8006932 <vTaskSdCard+0x2e6>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8006924:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006928:	4619      	mov	r1, r3
 800692a:	4828      	ldr	r0, [pc, #160]	; (80069cc <vTaskSdCard+0x380>)
 800692c:	f7fd fcb6 	bl	800429c <UsbPrint>
							res);
					goto resetSDCard;
 8006930:	e6a2      	b.n	8006678 <vTaskSdCard+0x2c>
				}
			}

			msgCounter++;
 8006932:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006936:	3301      	adds	r3, #1
 8006938:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 800693c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006940:	2b7f      	cmp	r3, #127	; 0x7f
 8006942:	ddc9      	ble.n	80068d8 <vTaskSdCard+0x28c>
				msgCounter = 0;
 8006944:	2300      	movs	r3, #0
 8006946:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 800694a:	4822      	ldr	r0, [pc, #136]	; (80069d4 <vTaskSdCard+0x388>)
 800694c:	f7fd fca6 	bl	800429c <UsbPrint>
				HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8006950:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006954:	4820      	ldr	r0, [pc, #128]	; (80069d8 <vTaskSdCard+0x38c>)
 8006956:	f002 f928 	bl	8008baa <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 800695a:	4816      	ldr	r0, [pc, #88]	; (80069b4 <vTaskSdCard+0x368>)
 800695c:	f00e fc3d 	bl	80151da <f_sync>
 8006960:	4603      	mov	r3, r0
 8006962:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8006966:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0b4      	beq.n	80068d8 <vTaskSdCard+0x28c>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 800696e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006972:	4619      	mov	r1, r3
 8006974:	4819      	ldr	r0, [pc, #100]	; (80069dc <vTaskSdCard+0x390>)
 8006976:	f7fd fc91 	bl	800429c <UsbPrint>
					goto resetSDCard;
 800697a:	e67d      	b.n	8006678 <vTaskSdCard+0x2c>
 800697c:	0801d394 	.word	0x0801d394
 8006980:	0801d3bc 	.word	0x0801d3bc
 8006984:	2001c520 	.word	0x2001c520
 8006988:	0801d3c0 	.word	0x0801d3c0
 800698c:	200003ec 	.word	0x200003ec
 8006990:	0801d3ec 	.word	0x0801d3ec
 8006994:	0801d410 	.word	0x0801d410
 8006998:	0801d41c 	.word	0x0801d41c
 800699c:	0801d454 	.word	0x0801d454
 80069a0:	cccccccd 	.word	0xcccccccd
 80069a4:	51eb851f 	.word	0x51eb851f
 80069a8:	0801d460 	.word	0x0801d460
 80069ac:	0801d484 	.word	0x0801d484
 80069b0:	0801d4b4 	.word	0x0801d4b4
 80069b4:	2001c2f0 	.word	0x2001c2f0
 80069b8:	0801d4d8 	.word	0x0801d4d8
 80069bc:	0801d504 	.word	0x0801d504
 80069c0:	0801d52c 	.word	0x0801d52c
 80069c4:	0801d5d0 	.word	0x0801d5d0
 80069c8:	2001c754 	.word	0x2001c754
 80069cc:	0801d55c 	.word	0x0801d55c
 80069d0:	20017fdc 	.word	0x20017fdc
 80069d4:	0801d588 	.word	0x0801d588
 80069d8:	40020c00 	.word	0x40020c00
 80069dc:	0801d5a8 	.word	0x0801d5a8

080069e0 <vTaskSensRead>:
/* SPI Read Data */
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

void vTaskSensRead(void *argument) {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(500);
 80069e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80069ec:	f00f fa0c 	bl	8015e08 <osDelay>
	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80069f0:	f00f f932 	bl	8015c58 <osKernelGetTickCount>
 80069f4:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 80069f6:	f00f f957 	bl	8015ca8 <osKernelGetTickFreq>
 80069fa:	4602      	mov	r2, r0
 80069fc:	4b22      	ldr	r3, [pc, #136]	; (8006a88 <vTaskSensRead+0xa8>)
 80069fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006a02:	095b      	lsrs	r3, r3, #5
 8006a04:	60bb      	str	r3, [r7, #8]

	for (;;) {
		tick_count += tick_update;
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	4413      	add	r3, r2
 8006a0c:	60fb      	str	r3, [r7, #12]
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8006a0e:	4a1f      	ldr	r2, [pc, #124]	; (8006a8c <vTaskSensRead+0xac>)
 8006a10:	491f      	ldr	r1, [pc, #124]	; (8006a90 <vTaskSensRead+0xb0>)
 8006a12:	4820      	ldr	r0, [pc, #128]	; (8006a94 <vTaskSensRead+0xb4>)
 8006a14:	f000 f858 	bl	8006ac8 <ReadDataSB>
		}
		/* Log Data */
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8006a18:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <vTaskSensRead+0xb4>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	2101      	movs	r1, #1
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7fd fa66 	bl	8003ef0 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8006a24:	4b1c      	ldr	r3, [pc, #112]	; (8006a98 <vTaskSensRead+0xb8>)
 8006a26:	2202      	movs	r2, #2
 8006a28:	2101      	movs	r1, #1
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	f7fd fa60 	bl	8003ef0 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8006a30:	4b17      	ldr	r3, [pc, #92]	; (8006a90 <vTaskSensRead+0xb0>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	2102      	movs	r1, #2
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7fd fa5a 	bl	8003ef0 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8006a3c:	4b17      	ldr	r3, [pc, #92]	; (8006a9c <vTaskSensRead+0xbc>)
 8006a3e:	2202      	movs	r2, #2
 8006a40:	2102      	movs	r1, #2
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	f7fd fa54 	bl	8003ef0 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8006a48:	4b10      	ldr	r3, [pc, #64]	; (8006a8c <vTaskSensRead+0xac>)
 8006a4a:	2201      	movs	r2, #1
 8006a4c:	2103      	movs	r1, #3
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7fd fa4e 	bl	8003ef0 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8006a54:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <vTaskSensRead+0xc0>)
 8006a56:	2202      	movs	r2, #2
 8006a58:	2103      	movs	r1, #3
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f7fd fa48 	bl	8003ef0 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8006a60:	2220      	movs	r2, #32
 8006a62:	490c      	ldr	r1, [pc, #48]	; (8006a94 <vTaskSensRead+0xb4>)
 8006a64:	480f      	ldr	r0, [pc, #60]	; (8006aa4 <vTaskSensRead+0xc4>)
 8006a66:	f005 fe85 	bl	800c774 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	4908      	ldr	r1, [pc, #32]	; (8006a90 <vTaskSensRead+0xb0>)
 8006a6e:	480e      	ldr	r0, [pc, #56]	; (8006aa8 <vTaskSensRead+0xc8>)
 8006a70:	f005 fe80 	bl	800c774 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8006a74:	2220      	movs	r2, #32
 8006a76:	4905      	ldr	r1, [pc, #20]	; (8006a8c <vTaskSensRead+0xac>)
 8006a78:	480c      	ldr	r0, [pc, #48]	; (8006aac <vTaskSensRead+0xcc>)
 8006a7a:	f005 fe7b 	bl	800c774 <HAL_SPI_Receive_DMA>
		/* Periodic Update */
		osDelayUntil(tick_count);
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f00f f9f0 	bl	8015e64 <osDelayUntil>
		tick_count += tick_update;
 8006a84:	e7bf      	b.n	8006a06 <vTaskSensRead+0x26>
 8006a86:	bf00      	nop
 8006a88:	51eb851f 	.word	0x51eb851f
 8006a8c:	20000390 	.word	0x20000390
 8006a90:	20000370 	.word	0x20000370
 8006a94:	20000350 	.word	0x20000350
 8006a98:	2000035c 	.word	0x2000035c
 8006a9c:	2000037c 	.word	0x2000037c
 8006aa0:	2000039c 	.word	0x2000039c
 8006aa4:	20017f78 	.word	0x20017f78
 8006aa8:	20009730 	.word	0x20009730
 8006aac:	2000fb20 	.word	0x2000fb20

08006ab0 <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b082      	sub	sp, #8
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
	HAL_SPIEx_FlushRxFifo(hspi);
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f006 fc7d 	bl	800d3b8 <HAL_SPIEx_FlushRxFifo>
}
 8006abe:	bf00      	nop
 8006ac0:	3708      	adds	r7, #8
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
	...

08006ac8 <ReadDataSB>:



/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 8006ac8:	b590      	push	{r4, r7, lr}
 8006aca:	b087      	sub	sp, #28
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	60b9      	str	r1, [r7, #8]
 8006ad2:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum_sb(sb1);
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f000 f87d 	bl	8006bd4 <calculate_checksum_sb>
 8006ada:	4603      	mov	r3, r0
 8006adc:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb1->checksum){
		if(AcquireMutex(&sb1_mutex) == osOK ){
 8006ade:	4834      	ldr	r0, [pc, #208]	; (8006bb0 <ReadDataSB+0xe8>)
 8006ae0:	f7fd f8fa 	bl	8003cd8 <AcquireMutex>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d117      	bne.n	8006b1a <ReadDataSB+0x52>
			sb1_baro = sb1->baro;
 8006aea:	4b32      	ldr	r3, [pc, #200]	; (8006bb4 <ReadDataSB+0xec>)
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	ca07      	ldmia	r2, {r0, r1, r2}
 8006af0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8006af4:	4a30      	ldr	r2, [pc, #192]	; (8006bb8 <ReadDataSB+0xf0>)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4614      	mov	r4, r2
 8006afa:	330c      	adds	r3, #12
 8006afc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006afe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8006b02:	482b      	ldr	r0, [pc, #172]	; (8006bb0 <ReadDataSB+0xe8>)
 8006b04:	f7fd f902 	bl	8003d0c <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8006b08:	4b2b      	ldr	r3, [pc, #172]	; (8006bb8 <ReadDataSB+0xf0>)
 8006b0a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	425b      	negs	r3, r3
 8006b12:	b29b      	uxth	r3, r3
 8006b14:	b21a      	sxth	r2, r3
 8006b16:	4b28      	ldr	r3, [pc, #160]	; (8006bb8 <ReadDataSB+0xf0>)
 8006b18:	815a      	strh	r2, [r3, #10]
		}
//	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum_sb(sb2);
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f000 f85a 	bl	8006bd4 <calculate_checksum_sb>
 8006b20:	4603      	mov	r3, r0
 8006b22:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb2->checksum){
		if(AcquireMutex(&sb2_mutex) == osOK){
 8006b24:	4825      	ldr	r0, [pc, #148]	; (8006bbc <ReadDataSB+0xf4>)
 8006b26:	f7fd f8d7 	bl	8003cd8 <AcquireMutex>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d117      	bne.n	8006b60 <ReadDataSB+0x98>
			sb2_baro = sb2->baro;
 8006b30:	4b23      	ldr	r3, [pc, #140]	; (8006bc0 <ReadDataSB+0xf8>)
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8006b3a:	4a22      	ldr	r2, [pc, #136]	; (8006bc4 <ReadDataSB+0xfc>)
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	4614      	mov	r4, r2
 8006b40:	330c      	adds	r3, #12
 8006b42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8006b48:	481c      	ldr	r0, [pc, #112]	; (8006bbc <ReadDataSB+0xf4>)
 8006b4a:	f7fd f8df 	bl	8003d0c <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8006b4e:	4b1d      	ldr	r3, [pc, #116]	; (8006bc4 <ReadDataSB+0xfc>)
 8006b50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	425b      	negs	r3, r3
 8006b58:	b29b      	uxth	r3, r3
 8006b5a:	b21a      	sxth	r2, r3
 8006b5c:	4b19      	ldr	r3, [pc, #100]	; (8006bc4 <ReadDataSB+0xfc>)
 8006b5e:	815a      	strh	r2, [r3, #10]
		}
//	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum_sb(sb3);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f837 	bl	8006bd4 <calculate_checksum_sb>
 8006b66:	4603      	mov	r3, r0
 8006b68:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb3->checksum){
		if(AcquireMutex(&sb3_mutex) == osOK){
 8006b6a:	4817      	ldr	r0, [pc, #92]	; (8006bc8 <ReadDataSB+0x100>)
 8006b6c:	f7fd f8b4 	bl	8003cd8 <AcquireMutex>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d117      	bne.n	8006ba6 <ReadDataSB+0xde>
			sb3_baro = sb2->baro;
 8006b76:	4b15      	ldr	r3, [pc, #84]	; (8006bcc <ReadDataSB+0x104>)
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	ca07      	ldmia	r2, {r0, r1, r2}
 8006b7c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb2->imu;
 8006b80:	4a13      	ldr	r2, [pc, #76]	; (8006bd0 <ReadDataSB+0x108>)
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	4614      	mov	r4, r2
 8006b86:	330c      	adds	r3, #12
 8006b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006b8a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8006b8e:	480e      	ldr	r0, [pc, #56]	; (8006bc8 <ReadDataSB+0x100>)
 8006b90:	f7fd f8bc 	bl	8003d0c <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8006b94:	4b0e      	ldr	r3, [pc, #56]	; (8006bd0 <ReadDataSB+0x108>)
 8006b96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	425b      	negs	r3, r3
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	b21a      	sxth	r2, r3
 8006ba2:	4b0b      	ldr	r3, [pc, #44]	; (8006bd0 <ReadDataSB+0x108>)
 8006ba4:	815a      	strh	r2, [r3, #10]
		}
//	}
}
 8006ba6:	bf00      	nop
 8006ba8:	371c      	adds	r7, #28
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd90      	pop	{r4, r7, pc}
 8006bae:	bf00      	nop
 8006bb0:	2000fc44 	.word	0x2000fc44
 8006bb4:	2000029c 	.word	0x2000029c
 8006bb8:	200002a8 	.word	0x200002a8
 8006bbc:	2001c2a8 	.word	0x2001c2a8
 8006bc0:	200002b8 	.word	0x200002b8
 8006bc4:	200002c4 	.word	0x200002c4
 8006bc8:	2000fd34 	.word	0x2000fd34
 8006bcc:	200002d4 	.word	0x200002d4
 8006bd0:	200002e0 	.word	0x200002e0

08006bd4 <calculate_checksum_sb>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum_sb(sb_data_t *sb_data){
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	b2da      	uxtb	r2, r3
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4413      	add	r3, r2
 8006bea:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	4413      	add	r3, r2
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4413      	add	r3, r2
 8006c1a:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	4413      	add	r3, r2
 8006c26:	b2da      	uxtb	r2, r3
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	4413      	add	r3, r2
 8006c32:	b2db      	uxtb	r3, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <vTaskStateEst>:
void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory,
		float pressure, float temperature);


void vTaskStateEst(void *argument) {
 8006c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c42:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
 8006c46:	af0c      	add	r7, sp, #48	; 0x30
 8006c48:	1d3b      	adds	r3, r7, #4
 8006c4a:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8006c4c:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fb fa35 	bl	80020c0 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8006c56:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8006c5a:	2278      	movs	r2, #120	; 0x78
 8006c5c:	2100      	movs	r1, #0
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f013 fd11 	bl	801a686 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8006c64:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006c68:	4618      	mov	r0, r3
 8006c6a:	2378      	movs	r3, #120	; 0x78
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	2100      	movs	r1, #0
 8006c70:	f013 fd09 	bl	801a686 <memset>

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8006c74:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7fb fcf7 	bl	800266c <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8006c7e:	f107 0318 	add.w	r3, r7, #24
 8006c82:	4618      	mov	r0, r3
 8006c84:	23b0      	movs	r3, #176	; 0xb0
 8006c86:	461a      	mov	r2, r3
 8006c88:	2100      	movs	r1, #0
 8006c8a:	f013 fcfc 	bl	801a686 <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8006c8e:	f107 0318 	add.w	r3, r7, #24
 8006c92:	2200      	movs	r2, #0
 8006c94:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 8006c96:	f107 030c 	add.w	r3, r7, #12
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	6013      	str	r3, [r2, #0]
 8006ca0:	6053      	str	r3, [r2, #4]
 8006ca2:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8006ca4:	f107 030c 	add.w	r3, r7, #12
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f7fb fcc7 	bl	800263c <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 8006cae:	f107 030b 	add.w	r3, r7, #11
 8006cb2:	229b      	movs	r2, #155	; 0x9b
 8006cb4:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8006cb6:	f107 0318 	add.w	r3, r7, #24
 8006cba:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006cbe:	f107 010c 	add.w	r1, r7, #12
 8006cc2:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006cc6:	f7fc f8bf 	bl	8002e48 <select_noise_models>

	/* average Temperature */
	float average_temp = 0;
 8006cca:	f04f 0300 	mov.w	r3, #0
 8006cce:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006cd2:	6013      	str	r3, [r2, #0]
	float sum_temp = 0;
 8006cd4:	f04f 0300 	mov.w	r3, #0
 8006cd8:	f207 5284 	addw	r2, r7, #1412	; 0x584
 8006cdc:	6013      	str	r3, [r2, #0]
	/* average Pressure */
	float average_press = 0;
 8006cde:	f04f 0300 	mov.w	r3, #0
 8006ce2:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8006ce6:	6013      	str	r3, [r2, #0]
	float sum_press = 0;
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	f207 527c 	addw	r2, r7, #1404	; 0x57c
 8006cf0:	6013      	str	r3, [r2, #0]
	uint16_t calibrate_count = 0;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a

	osDelay(500);
 8006cf8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006cfc:	f00f f884 	bl	8015e08 <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006d00:	f00e ffaa 	bl	8015c58 <osKernelGetTickCount>
 8006d04:	f8c7 058c 	str.w	r0, [r7, #1420]	; 0x58c
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8006d08:	f00e ffce 	bl	8015ca8 <osKernelGetTickFreq>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	4b9e      	ldr	r3, [pc, #632]	; (8006f88 <vTaskStateEst+0x348>)
 8006d10:	fba3 2302 	umull	r2, r3, r3, r2
 8006d14:	095b      	lsrs	r3, r3, #5
 8006d16:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

	for (;;) {
		tick_count += tick_update;
 8006d1a:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8006d1e:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8006d22:	4413      	add	r3, r2
 8006d24:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8006d28:	f107 020b 	add.w	r2, r7, #11
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	4997      	ldr	r1, [pc, #604]	; (8006f8c <vTaskStateEst+0x34c>)
 8006d30:	4897      	ldr	r0, [pc, #604]	; (8006f90 <vTaskStateEst+0x350>)
 8006d32:	f7fc fff9 	bl	8003d28 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8006d36:	f107 030c 	add.w	r3, r7, #12
 8006d3a:	781b      	ldrb	r3, [r3, #0]
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d115      	bne.n	8006d6c <vTaskStateEst+0x12c>
 8006d40:	4b92      	ldr	r3, [pc, #584]	; (8006f8c <vTaskStateEst+0x34c>)
 8006d42:	781b      	ldrb	r3, [r3, #0]
 8006d44:	2b49      	cmp	r3, #73	; 0x49
 8006d46:	d111      	bne.n	8006d6c <vTaskStateEst+0x12c>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 8006d48:	f107 0318 	add.w	r3, r7, #24
 8006d4c:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006d50:	f107 010c 	add.w	r1, r7, #12
 8006d54:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006d58:	f507 64b1 	add.w	r4, r7, #1416	; 0x588
 8006d5c:	edd4 0a00 	vldr	s1, [r4]
 8006d60:	f507 64b0 	add.w	r4, r7, #1408	; 0x580
 8006d64:	ed94 0a00 	vldr	s0, [r4]
 8006d68:	f000 f932 	bl	8006fd0 <resetStateEstimation>
		}

		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8006d6c:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006d70:	2301      	movs	r3, #1
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	4613      	mov	r3, r2
 8006d76:	4a87      	ldr	r2, [pc, #540]	; (8006f94 <vTaskStateEst+0x354>)
 8006d78:	4987      	ldr	r1, [pc, #540]	; (8006f98 <vTaskStateEst+0x358>)
 8006d7a:	4888      	ldr	r0, [pc, #544]	; (8006f9c <vTaskStateEst+0x35c>)
 8006d7c:	f7fd f810 	bl	8003da0 <ReadMutexStateEst>

		/* Sensor Board 2 */
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8006d80:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006d84:	2302      	movs	r3, #2
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	4613      	mov	r3, r2
 8006d8a:	4a85      	ldr	r2, [pc, #532]	; (8006fa0 <vTaskStateEst+0x360>)
 8006d8c:	4985      	ldr	r1, [pc, #532]	; (8006fa4 <vTaskStateEst+0x364>)
 8006d8e:	4886      	ldr	r0, [pc, #536]	; (8006fa8 <vTaskStateEst+0x368>)
 8006d90:	f7fd f806 	bl	8003da0 <ReadMutexStateEst>

		/* Sensor Board 3 */
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8006d94:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006d98:	2303      	movs	r3, #3
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	4a83      	ldr	r2, [pc, #524]	; (8006fac <vTaskStateEst+0x36c>)
 8006da0:	4983      	ldr	r1, [pc, #524]	; (8006fb0 <vTaskStateEst+0x370>)
 8006da2:	4884      	ldr	r0, [pc, #528]	; (8006fb4 <vTaskStateEst+0x374>)
 8006da4:	f7fc fffc 	bl	8003da0 <ReadMutexStateEst>

		/* calculate averaging */
		if(flight_phase_detection.flight_phase == IDLE){
 8006da8:	f107 030c 	add.w	r3, r7, #12
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d165      	bne.n	8006e7e <vTaskStateEst+0x23e>
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8006db2:	4b79      	ldr	r3, [pc, #484]	; (8006f98 <vTaskStateEst+0x358>)
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4b7b      	ldr	r3, [pc, #492]	; (8006fa4 <vTaskStateEst+0x364>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	441a      	add	r2, r3
 8006dbc:	4b7c      	ldr	r3, [pc, #496]	; (8006fb0 <vTaskStateEst+0x370>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	ee07 3a90 	vmov	s15, r3
 8006dc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dca:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8006dce:	ed93 7a00 	vldr	s14, [r3]
 8006dd2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006dd6:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8006dda:	edc3 7a00 	vstr	s15, [r3]
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8006dde:	4b6e      	ldr	r3, [pc, #440]	; (8006f98 <vTaskStateEst+0x358>)
 8006de0:	685a      	ldr	r2, [r3, #4]
 8006de2:	4b70      	ldr	r3, [pc, #448]	; (8006fa4 <vTaskStateEst+0x364>)
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	441a      	add	r2, r3
 8006de8:	4b71      	ldr	r3, [pc, #452]	; (8006fb0 <vTaskStateEst+0x370>)
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	4413      	add	r3, r2
 8006dee:	ee07 3a90 	vmov	s15, r3
 8006df2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006df6:	eddf 6a70 	vldr	s13, [pc, #448]	; 8006fb8 <vTaskStateEst+0x378>
 8006dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006dfe:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006e02:	ed93 7a00 	vldr	s14, [r3]
 8006e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006e0a:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006e0e:	edc3 7a00 	vstr	s15, [r3]
			calibrate_count += 3;
 8006e12:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006e16:	3303      	adds	r3, #3
 8006e18:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
			if(calibrate_count > 150){
 8006e1c:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006e20:	2b96      	cmp	r3, #150	; 0x96
 8006e22:	d92c      	bls.n	8006e7e <vTaskStateEst+0x23e>
				average_press = sum_press / (float)calibrate_count;
 8006e24:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006e28:	ee07 3a90 	vmov	s15, r3
 8006e2c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e30:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8006e34:	edd3 6a00 	vldr	s13, [r3]
 8006e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e3c:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8006e40:	edc3 7a00 	vstr	s15, [r3]
				average_temp = sum_temp / (float)calibrate_count;
 8006e44:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006e48:	ee07 3a90 	vmov	s15, r3
 8006e4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e50:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006e54:	edd3 6a00 	vldr	s13, [r3]
 8006e58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e5c:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8006e60:	edc3 7a00 	vstr	s15, [r3]
				sum_press = 0;
 8006e64:	f04f 0300 	mov.w	r3, #0
 8006e68:	f207 527c 	addw	r2, r7, #1404	; 0x57c
 8006e6c:	6013      	str	r3, [r2, #0]
				sum_temp = 0;
 8006e6e:	f04f 0300 	mov.w	r3, #0
 8006e72:	f207 5284 	addw	r2, r7, #1412	; 0x584
 8006e76:	6013      	str	r3, [r2, #0]
				calibrate_count = 0;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
			}
		}

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 8006e7e:	f107 020c 	add.w	r2, r7, #12
 8006e82:	230c      	movs	r3, #12
 8006e84:	494d      	ldr	r1, [pc, #308]	; (8006fbc <vTaskStateEst+0x37c>)
 8006e86:	484e      	ldr	r0, [pc, #312]	; (8006fc0 <vTaskStateEst+0x380>)
 8006e88:	f7fc ff4e 	bl	8003d28 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8006e8c:	f207 4074 	addw	r0, r7, #1140	; 0x474
 8006e90:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006e94:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8006e98:	f107 0318 	add.w	r3, r7, #24
 8006e9c:	9301      	str	r3, [sp, #4]
 8006e9e:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8006ea2:	9300      	str	r3, [sp, #0]
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f8d7 058c 	ldr.w	r0, [r7, #1420]	; 0x58c
 8006eaa:	f7fb fe61 	bl	8002b70 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8006eae:	f107 0318 	add.w	r3, r7, #24
 8006eb2:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006eb6:	f107 010c 	add.w	r1, r7, #12
 8006eba:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006ebe:	f7fb ffc3 	bl	8002e48 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 8006ec2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fb fc66 	bl	8002798 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 8006ecc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ed0:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	dd0a      	ble.n	8006eee <vTaskStateEst+0x2ae>
			select_kf_observation_matrices(&kf_state);
 8006ed8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fb fccc 	bl	800287a <select_kf_observation_matrices>
			kf_update(&kf_state);
 8006ee2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f7fb fd04 	bl	80028f4 <kf_update>
 8006eec:	e00a      	b.n	8006f04 <vTaskStateEst+0x2c4>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8006eee:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006ef2:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8006ef6:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006efa:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8006efe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006f00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8006f04:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8006f0e:	2278      	movs	r2, #120	; 0x78
 8006f10:	4619      	mov	r1, r3
 8006f12:	f013 fbad 	bl	801a670 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 8006f16:	482b      	ldr	r0, [pc, #172]	; (8006fc4 <vTaskStateEst+0x384>)
 8006f18:	f7fc fede 	bl	8003cd8 <AcquireMutex>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d108      	bne.n	8006f34 <vTaskStateEst+0x2f4>
			update_state_est_data(&state_est_data_global, &kf_state);
 8006f22:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006f26:	4619      	mov	r1, r3
 8006f28:	4827      	ldr	r0, [pc, #156]	; (8006fc8 <vTaskStateEst+0x388>)
 8006f2a:	f7fb fdd1 	bl	8002ad0 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8006f2e:	4825      	ldr	r0, [pc, #148]	; (8006fc4 <vTaskStateEst+0x384>)
 8006f30:	f7fc feec 	bl	8003d0c <ReleaseMutex>
		}

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8006f34:	4822      	ldr	r0, [pc, #136]	; (8006fc0 <vTaskStateEst+0x380>)
 8006f36:	f7fc fecf 	bl	8003cd8 <AcquireMutex>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d109      	bne.n	8006f54 <vTaskStateEst+0x314>
			global_env = env;
 8006f40:	4b22      	ldr	r3, [pc, #136]	; (8006fcc <vTaskStateEst+0x38c>)
 8006f42:	461c      	mov	r4, r3
 8006f44:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8006f48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8006f4e:	481c      	ldr	r0, [pc, #112]	; (8006fc0 <vTaskStateEst+0x380>)
 8006f50:	f7fc fedc 	bl	8003d0c <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8006f54:	f00e fe80 	bl	8015c58 <osKernelGetTickCount>
 8006f58:	4684      	mov	ip, r0
 8006f5a:	4e1b      	ldr	r6, [pc, #108]	; (8006fc8 <vTaskStateEst+0x388>)
 8006f5c:	466d      	mov	r5, sp
 8006f5e:	f106 040c 	add.w	r4, r6, #12
 8006f62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f6a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8006f6e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8006f72:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8006f76:	4660      	mov	r0, ip
 8006f78:	f7fd f900 	bl	800417c <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 8006f7c:	f8d7 058c 	ldr.w	r0, [r7, #1420]	; 0x58c
 8006f80:	f00e ff70 	bl	8015e64 <osDelayUntil>
		tick_count += tick_update;
 8006f84:	e6c9      	b.n	8006d1a <vTaskStateEst+0xda>
 8006f86:	bf00      	nop
 8006f88:	51eb851f 	.word	0x51eb851f
 8006f8c:	20013e2c 	.word	0x20013e2c
 8006f90:	2000bb0c 	.word	0x2000bb0c
 8006f94:	200002a8 	.word	0x200002a8
 8006f98:	2000029c 	.word	0x2000029c
 8006f9c:	2000fc44 	.word	0x2000fc44
 8006fa0:	200002c4 	.word	0x200002c4
 8006fa4:	200002b8 	.word	0x200002b8
 8006fa8:	2001c2a8 	.word	0x2001c2a8
 8006fac:	200002e0 	.word	0x200002e0
 8006fb0:	200002d4 	.word	0x200002d4
 8006fb4:	2000fd34 	.word	0x2000fd34
 8006fb8:	42c80000 	.word	0x42c80000
 8006fbc:	20000340 	.word	0x20000340
 8006fc0:	20009728 	.word	0x20009728
 8006fc4:	20011da8 	.word	0x20011da8
 8006fc8:	200002f0 	.word	0x200002f0
 8006fcc:	20000330 	.word	0x20000330

08006fd0 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6178      	str	r0, [r7, #20]
 8006fd8:	6139      	str	r1, [r7, #16]
 8006fda:	60fa      	str	r2, [r7, #12]
 8006fdc:	60bb      	str	r3, [r7, #8]
 8006fde:	ed87 0a01 	vstr	s0, [r7, #4]
 8006fe2:	edc7 0a00 	vstr	s1, [r7]
	reset_flight_phase_detection(flight_phase_detection);
 8006fe6:	6938      	ldr	r0, [r7, #16]
 8006fe8:	f7fb fb28 	bl	800263c <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 8006fec:	edd7 0a00 	vldr	s1, [r7]
 8006ff0:	ed97 0a01 	vldr	s0, [r7, #4]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7fb f87b 	bl	80020f0 <calibrate_env>
	update_env(environment, temperature);
 8006ffa:	ed97 0a00 	vldr	s0, [r7]
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f7fb f89a 	bl	8002138 <update_env>
	reset_kf_state(kf_state);
 8007004:	6978      	ldr	r0, [r7, #20]
 8007006:	f7fb fb31 	bl	800266c <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	4618      	mov	r0, r3
 800700e:	23b0      	movs	r3, #176	; 0xb0
 8007010:	461a      	mov	r2, r3
 8007012:	2100      	movs	r1, #0
 8007014:	f013 fb37 	bl	801a686 <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	6939      	ldr	r1, [r7, #16]
 800701e:	6978      	ldr	r0, [r7, #20]
 8007020:	f7fb ff12 	bl	8002e48 <select_noise_models>
}
 8007024:	bf00      	nop
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <vTaskXbee>:
bool buzzer_on_telemetry = false;


uint8_t calculate_checksum(telemetry_t *cnf);

void vTaskXbee(void *argument) {
 800702c:	b580      	push	{r7, lr}
 800702e:	b0c8      	sub	sp, #288	; 0x120
 8007030:	af00      	add	r7, sp, #0
 8007032:	1d3b      	adds	r3, r7, #4
 8007034:	6018      	str	r0, [r3, #0]

	/* local Data */
	state_est_data_t state_est_data;
	sb_data_t local_sb_data;

	telemetry_t dummy_telemetry = { 0 };
 8007036:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800703a:	2254      	movs	r2, #84	; 0x54
 800703c:	2100      	movs	r1, #0
 800703e:	4618      	mov	r0, r3
 8007040:	f013 fb21 	bl	801a686 <memset>

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 8007044:	f107 030c 	add.w	r3, r7, #12
 8007048:	4618      	mov	r0, r3
 800704a:	2354      	movs	r3, #84	; 0x54
 800704c:	461a      	mov	r2, r3
 800704e:	2100      	movs	r1, #0
 8007050:	f013 fb19 	bl	801a686 <memset>
	telemetry_send.flight_phase = IDLE;
 8007054:	f107 030c 	add.w	r3, r7, #12
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48


	/* Command struct */
	local_command_rx = IDLE_COMMAND;
 800705e:	4bae      	ldr	r3, [pc, #696]	; (8007318 <vTaskXbee+0x2ec>)
 8007060:	229b      	movs	r2, #155	; 0x9b
 8007062:	701a      	strb	r2, [r3, #0]
	local_command = IDLE_COMMAND;
 8007064:	4bad      	ldr	r3, [pc, #692]	; (800731c <vTaskXbee+0x2f0>)
 8007066:	229b      	movs	r2, #155	; 0x9b
 8007068:	701a      	strb	r2, [r3, #0]

	uint8_t buzzercounter = 0;
 800706a:	2300      	movs	r3, #0
 800706c:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

	osDelay(500);
 8007070:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007074:	f00e fec8 	bl	8015e08 <osDelay>


	/* Infinite loop */

	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8007078:	f00e fe16 	bl	8015ca8 <osKernelGetTickFreq>
 800707c:	4602      	mov	r2, r0
 800707e:	4ba8      	ldr	r3, [pc, #672]	; (8007320 <vTaskXbee+0x2f4>)
 8007080:	fba3 2302 	umull	r2, r3, r3, r2
 8007084:	08db      	lsrs	r3, r3, #3
 8007086:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 800708a:	f00e fe0d 	bl	8015ca8 <osKernelGetTickFreq>
 800708e:	4602      	mov	r2, r0
 8007090:	4ba4      	ldr	r3, [pc, #656]	; (8007324 <vTaskXbee+0x2f8>)
 8007092:	fba3 2302 	umull	r2, r3, r3, r2
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	bool fast_sampling = false;
 800709c:	2300      	movs	r3, #0
 800709e:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
	tick_count = osKernelGetTickCount();
 80070a2:	f00e fdd9 	bl	8015c58 <osKernelGetTickCount>
 80070a6:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c


	while (1) {
		/* Tick Update */
		if(fast_sampling){
 80070aa:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <vTaskXbee+0x96>
			tick_count += tick_update_fast;
 80070b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80070b6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80070ba:	4413      	add	r3, r2
 80070bc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80070c0:	e006      	b.n	80070d0 <vTaskXbee+0xa4>
		}
		else{
			tick_count += tick_update_slow;
 80070c2:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80070c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80070ca:	4413      	add	r3, r2
 80070cc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
		}
		/* Read Command */
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 80070d0:	2201      	movs	r2, #1
 80070d2:	4991      	ldr	r1, [pc, #580]	; (8007318 <vTaskXbee+0x2ec>)
 80070d4:	4894      	ldr	r0, [pc, #592]	; (8007328 <vTaskXbee+0x2fc>)
 80070d6:	f006 fda3 	bl	800dc20 <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 80070da:	f107 030c 	add.w	r3, r7, #12
 80070de:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80070e0:	4b8e      	ldr	r3, [pc, #568]	; (800731c <vTaskXbee+0x2f0>)
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	461a      	mov	r2, r3
 80070e6:	4b8c      	ldr	r3, [pc, #560]	; (8007318 <vTaskXbee+0x2ec>)
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	4890      	ldr	r0, [pc, #576]	; (800732c <vTaskXbee+0x300>)
 80070ec:	f7fd f8d6 	bl	800429c <UsbPrint>
				telemetry_send.ts, local_command, local_command_rx);

		if(AcquireMutex(&command_mutex) == osOK){
 80070f0:	488f      	ldr	r0, [pc, #572]	; (8007330 <vTaskXbee+0x304>)
 80070f2:	f7fc fdf1 	bl	8003cd8 <AcquireMutex>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d106      	bne.n	800710a <vTaskXbee+0xde>
			global_telemetry_command = local_command;
 80070fc:	4b87      	ldr	r3, [pc, #540]	; (800731c <vTaskXbee+0x2f0>)
 80070fe:	781a      	ldrb	r2, [r3, #0]
 8007100:	4b8c      	ldr	r3, [pc, #560]	; (8007334 <vTaskXbee+0x308>)
 8007102:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 8007104:	488a      	ldr	r0, [pc, #552]	; (8007330 <vTaskXbee+0x304>)
 8007106:	f7fc fe01 	bl	8003d0c <ReleaseMutex>
		}

		/* Check if we need to go to fast sampling */
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 800710a:	4b84      	ldr	r3, [pc, #528]	; (800731c <vTaskXbee+0x2f0>)
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	2b0d      	cmp	r3, #13
 8007110:	d102      	bne.n	8007118 <vTaskXbee+0xec>
			fast_sampling = true;
 8007112:	2301      	movs	r3, #1
 8007114:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		}

		/* Check if we need to go to low sampling */
		if(local_command == TELEMETRY_LOW_SAMPLING){
 8007118:	4b80      	ldr	r3, [pc, #512]	; (800731c <vTaskXbee+0x2f0>)
 800711a:	781b      	ldrb	r3, [r3, #0]
 800711c:	2bc5      	cmp	r3, #197	; 0xc5
 800711e:	d102      	bne.n	8007126 <vTaskXbee+0xfa>
			fast_sampling = false;
 8007120:	2300      	movs	r3, #0
 8007122:	f887 311a 	strb.w	r3, [r7, #282]	; 0x11a
		}

		/* Enable Buzzer trough Telemetry */
		if(local_command == ENABLE_BUZZER){
 8007126:	4b7d      	ldr	r3, [pc, #500]	; (800731c <vTaskXbee+0x2f0>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b71      	cmp	r3, #113	; 0x71
 800712c:	d10e      	bne.n	800714c <vTaskXbee+0x120>
			buzzer_on_telemetry = !buzzer_on_telemetry;
 800712e:	4b82      	ldr	r3, [pc, #520]	; (8007338 <vTaskXbee+0x30c>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	2b00      	cmp	r3, #0
 8007134:	bf14      	ite	ne
 8007136:	2301      	movne	r3, #1
 8007138:	2300      	moveq	r3, #0
 800713a:	b2db      	uxtb	r3, r3
 800713c:	f083 0301 	eor.w	r3, r3, #1
 8007140:	b2db      	uxtb	r3, r3
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	b2da      	uxtb	r2, r3
 8007148:	4b7b      	ldr	r3, [pc, #492]	; (8007338 <vTaskXbee+0x30c>)
 800714a:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Buzzer Trough FSM */
		if(telemetry_send.flight_phase == RECOVERY){
 800714c:	f107 030c 	add.w	r3, r7, #12
 8007150:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007154:	2b06      	cmp	r3, #6
 8007156:	d102      	bne.n	800715e <vTaskXbee+0x132>
			buzzer_on_fsm = true;
 8007158:	4b78      	ldr	r3, [pc, #480]	; (800733c <vTaskXbee+0x310>)
 800715a:	2201      	movs	r2, #1
 800715c:	701a      	strb	r2, [r3, #0]
		}

		/* reset command */
		if(new_command){
 800715e:	4b78      	ldr	r3, [pc, #480]	; (8007340 <vTaskXbee+0x314>)
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d005      	beq.n	8007172 <vTaskXbee+0x146>
			local_command = IDLE_COMMAND;
 8007166:	4b6d      	ldr	r3, [pc, #436]	; (800731c <vTaskXbee+0x2f0>)
 8007168:	229b      	movs	r2, #155	; 0x9b
 800716a:	701a      	strb	r2, [r3, #0]
			new_command = false;
 800716c:	4b74      	ldr	r3, [pc, #464]	; (8007340 <vTaskXbee+0x314>)
 800716e:	2200      	movs	r2, #0
 8007170:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Buzzer */
		if(buzzer_on_fsm ^ buzzer_on_telemetry){
 8007172:	4b72      	ldr	r3, [pc, #456]	; (800733c <vTaskXbee+0x310>)
 8007174:	781a      	ldrb	r2, [r3, #0]
 8007176:	4b70      	ldr	r3, [pc, #448]	; (8007338 <vTaskXbee+0x30c>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	429a      	cmp	r2, r3
 800717c:	d029      	beq.n	80071d2 <vTaskXbee+0x1a6>
			if(fast_sampling){
 800717e:	f897 311a 	ldrb.w	r3, [r7, #282]	; 0x11a
 8007182:	2b00      	cmp	r3, #0
 8007184:	d012      	beq.n	80071ac <vTaskXbee+0x180>
				if(buzzercounter > (400/tick_update_fast)){
 8007186:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 800718a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800718e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8007192:	fbb1 f3f3 	udiv	r3, r1, r3
 8007196:	429a      	cmp	r2, r3
 8007198:	d921      	bls.n	80071de <vTaskXbee+0x1b2>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 800719a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800719e:	4869      	ldr	r0, [pc, #420]	; (8007344 <vTaskXbee+0x318>)
 80071a0:	f001 fd03 	bl	8008baa <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 80071a4:	2300      	movs	r3, #0
 80071a6:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80071aa:	e018      	b.n	80071de <vTaskXbee+0x1b2>
				}
			}
			else{
				if(buzzercounter > (400/tick_update_slow)){
 80071ac:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 80071b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80071b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80071b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80071bc:	429a      	cmp	r2, r3
 80071be:	d90e      	bls.n	80071de <vTaskXbee+0x1b2>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80071c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071c4:	485f      	ldr	r0, [pc, #380]	; (8007344 <vTaskXbee+0x318>)
 80071c6:	f001 fcf0 	bl	8008baa <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 80071ca:	2300      	movs	r3, #0
 80071cc:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
 80071d0:	e005      	b.n	80071de <vTaskXbee+0x1b2>
				}
			}
		}
		else{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80071d2:	2200      	movs	r2, #0
 80071d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071d8:	485a      	ldr	r0, [pc, #360]	; (8007344 <vTaskXbee+0x318>)
 80071da:	f001 fccd 	bl	8008b78 <HAL_GPIO_WritePin>
		}
		buzzercounter++;
 80071de:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 80071e2:	3301      	adds	r3, #1
 80071e4:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 80071e8:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 80071ec:	230c      	movs	r3, #12
 80071ee:	4956      	ldr	r1, [pc, #344]	; (8007348 <vTaskXbee+0x31c>)
 80071f0:	4856      	ldr	r0, [pc, #344]	; (800734c <vTaskXbee+0x320>)
 80071f2:	f7fc fd99 	bl	8003d28 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 80071f6:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80071fa:	f103 020c 	add.w	r2, r3, #12
 80071fe:	2310      	movs	r3, #16
 8007200:	4953      	ldr	r1, [pc, #332]	; (8007350 <vTaskXbee+0x324>)
 8007202:	4852      	ldr	r0, [pc, #328]	; (800734c <vTaskXbee+0x320>)
 8007204:	f7fc fd90 	bl	8003d28 <ReadMutex>

		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 8007208:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800720c:	f107 030c 	add.w	r3, r7, #12
 8007210:	601a      	str	r2, [r3, #0]
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 8007212:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007216:	f107 030c 	add.w	r3, r7, #12
 800721a:	605a      	str	r2, [r3, #4]
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 800721c:	f9b7 20c6 	ldrsh.w	r2, [r7, #198]	; 0xc6
 8007220:	f107 030c 	add.w	r3, r7, #12
 8007224:	81da      	strh	r2, [r3, #14]
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 8007226:	f9b7 20c8 	ldrsh.w	r2, [r7, #200]	; 0xc8
 800722a:	f107 030c 	add.w	r3, r7, #12
 800722e:	821a      	strh	r2, [r3, #16]
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 8007230:	f9b7 20ca 	ldrsh.w	r2, [r7, #202]	; 0xca
 8007234:	f107 030c 	add.w	r3, r7, #12
 8007238:	825a      	strh	r2, [r3, #18]
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 800723a:	f9b7 20c0 	ldrsh.w	r2, [r7, #192]	; 0xc0
 800723e:	f107 030c 	add.w	r3, r7, #12
 8007242:	811a      	strh	r2, [r3, #8]
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 8007244:	f9b7 20c2 	ldrsh.w	r2, [r7, #194]	; 0xc2
 8007248:	f107 030c 	add.w	r3, r7, #12
 800724c:	815a      	strh	r2, [r3, #10]
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 800724e:	f9b7 20c4 	ldrsh.w	r2, [r7, #196]	; 0xc4
 8007252:	f107 030c 	add.w	r3, r7, #12
 8007256:	819a      	strh	r2, [r3, #12]


		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 8007258:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 800725c:	233c      	movs	r3, #60	; 0x3c
 800725e:	493d      	ldr	r1, [pc, #244]	; (8007354 <vTaskXbee+0x328>)
 8007260:	483d      	ldr	r0, [pc, #244]	; (8007358 <vTaskXbee+0x32c>)
 8007262:	f7fc fd61 	bl	8003d28 <ReadMutex>

		ReadMutex(&controller_mutex, &controller_output_global, &telemetry_send.airbrake_extension, sizeof(controller_output_global));
 8007266:	f107 030c 	add.w	r3, r7, #12
 800726a:	f103 0244 	add.w	r2, r3, #68	; 0x44
 800726e:	2304      	movs	r3, #4
 8007270:	493a      	ldr	r1, [pc, #232]	; (800735c <vTaskXbee+0x330>)
 8007272:	483b      	ldr	r0, [pc, #236]	; (8007360 <vTaskXbee+0x334>)
 8007274:	f7fc fd58 	bl	8003d28 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 8007278:	f107 030c 	add.w	r3, r7, #12
 800727c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007280:	2301      	movs	r3, #1
 8007282:	4938      	ldr	r1, [pc, #224]	; (8007364 <vTaskXbee+0x338>)
 8007284:	4838      	ldr	r0, [pc, #224]	; (8007368 <vTaskXbee+0x33c>)
 8007286:	f7fc fd4f 	bl	8003d28 <ReadMutex>

		/* read GPS */
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps, sizeof(globalGPS));
 800728a:	f107 030c 	add.w	r3, r7, #12
 800728e:	f103 021c 	add.w	r2, r3, #28
 8007292:	2320      	movs	r3, #32
 8007294:	4935      	ldr	r1, [pc, #212]	; (800736c <vTaskXbee+0x340>)
 8007296:	4836      	ldr	r0, [pc, #216]	; (8007370 <vTaskXbee+0x344>)
 8007298:	f7fc fd46 	bl	8003d28 <ReadMutex>

		/* read Battery */
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery, sizeof(global_battery_data));
 800729c:	f107 030c 	add.w	r3, r7, #12
 80072a0:	f103 0214 	add.w	r2, r3, #20
 80072a4:	2306      	movs	r3, #6
 80072a6:	4933      	ldr	r1, [pc, #204]	; (8007374 <vTaskXbee+0x348>)
 80072a8:	4833      	ldr	r0, [pc, #204]	; (8007378 <vTaskXbee+0x34c>)
 80072aa:	f7fc fd3d 	bl	8003d28 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 80072ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80072b2:	f107 030c 	add.w	r3, r7, #12
 80072b6:	63da      	str	r2, [r3, #60]	; 0x3c
		telemetry_send.velocity = state_est_data.velocity_world[2];
 80072b8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80072bc:	f107 030c 	add.w	r3, r7, #12
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
		telemetry_send.ts = osKernelGetTickCount();
 80072c2:	f00e fcc9 	bl	8015c58 <osKernelGetTickCount>
 80072c6:	4602      	mov	r2, r0
 80072c8:	f107 030c 	add.w	r3, r7, #12
 80072cc:	64da      	str	r2, [r3, #76]	; 0x4c

		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80072ce:	f107 030c 	add.w	r3, r7, #12
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 f8a0 	bl	8007418 <calculate_checksum>
 80072d8:	4603      	mov	r3, r0
 80072da:	461a      	mov	r2, r3
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		dummy_telemetry.ts = osKernelGetTickCount();
 80072e4:	f00e fcb8 	bl	8015c58 <osKernelGetTickCount>
 80072e8:	4603      	mov	r3, r0
 80072ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		dummy_telemetry.checksum ='\n';
 80072ee:	230a      	movs	r3, #10
 80072f0:	f887 30b0 	strb.w	r3, [r7, #176]	; 0xb0

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 80072f4:	f107 010c 	add.w	r1, r7, #12
 80072f8:	2364      	movs	r3, #100	; 0x64
 80072fa:	2254      	movs	r2, #84	; 0x54
 80072fc:	480a      	ldr	r0, [pc, #40]	; (8007328 <vTaskXbee+0x2fc>)
 80072fe:	f006 fb31 	bl	800d964 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart7, (uint8_t*) &dummy_telemetry, sizeof(dummy_telemetry), 100);

		telemetry_send.checksum = 0;
 8007302:	f107 030c 	add.w	r3, r7, #12
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

		/* Sleep */
		osDelayUntil(tick_count);
 800730c:	f8d7 011c 	ldr.w	r0, [r7, #284]	; 0x11c
 8007310:	f00e fda8 	bl	8015e64 <osDelayUntil>
		if(fast_sampling){
 8007314:	e6c9      	b.n	80070aa <vTaskXbee+0x7e>
 8007316:	bf00      	nop
 8007318:	2001c759 	.word	0x2001c759
 800731c:	2001c758 	.word	0x2001c758
 8007320:	cccccccd 	.word	0xcccccccd
 8007324:	51eb851f 	.word	0x51eb851f
 8007328:	2000979c 	.word	0x2000979c
 800732c:	0801d5f0 	.word	0x0801d5f0
 8007330:	2000bb0c 	.word	0x2000bb0c
 8007334:	20013e2c 	.word	0x20013e2c
 8007338:	200003b2 	.word	0x200003b2
 800733c:	200003b1 	.word	0x200003b1
 8007340:	200003b0 	.word	0x200003b0
 8007344:	40020c00 	.word	0x40020c00
 8007348:	2000029c 	.word	0x2000029c
 800734c:	2000fc44 	.word	0x2000fc44
 8007350:	200002a8 	.word	0x200002a8
 8007354:	200002f0 	.word	0x200002f0
 8007358:	20011da8 	.word	0x20011da8
 800735c:	2000032c 	.word	0x2000032c
 8007360:	2000fb84 	.word	0x2000fb84
 8007364:	20000340 	.word	0x20000340
 8007368:	20009728 	.word	0x20009728
 800736c:	20013e0c 	.word	0x20013e0c
 8007370:	20017ef0 	.word	0x20017ef0
 8007374:	2000fb8c 	.word	0x2000fb8c
 8007378:	20009794 	.word	0x20009794

0800737c <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
	if(huart==&huart7){
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <HAL_UART_RxCpltCallback+0x84>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d135      	bne.n	80073f8 <HAL_UART_RxCpltCallback+0x7c>
		static int counter = 0;
		static uint8_t buffer [4];
		buffer[counter] = local_command_rx;
 800738c:	4b1d      	ldr	r3, [pc, #116]	; (8007404 <HAL_UART_RxCpltCallback+0x88>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <HAL_UART_RxCpltCallback+0x8c>)
 8007392:	7811      	ldrb	r1, [r2, #0]
 8007394:	4a1d      	ldr	r2, [pc, #116]	; (800740c <HAL_UART_RxCpltCallback+0x90>)
 8007396:	54d1      	strb	r1, [r2, r3]
		counter++;
 8007398:	4b1a      	ldr	r3, [pc, #104]	; (8007404 <HAL_UART_RxCpltCallback+0x88>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	3301      	adds	r3, #1
 800739e:	4a19      	ldr	r2, [pc, #100]	; (8007404 <HAL_UART_RxCpltCallback+0x88>)
 80073a0:	6013      	str	r3, [r2, #0]
		if(counter == 4){
 80073a2:	4b18      	ldr	r3, [pc, #96]	; (8007404 <HAL_UART_RxCpltCallback+0x88>)
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	2b04      	cmp	r3, #4
 80073a8:	d121      	bne.n	80073ee <HAL_UART_RxCpltCallback+0x72>
			uint8_t succesful = 1;
 80073aa:	2301      	movs	r3, #1
 80073ac:	73fb      	strb	r3, [r7, #15]
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 80073ae:	2301      	movs	r3, #1
 80073b0:	60bb      	str	r3, [r7, #8]
 80073b2:	e00c      	b.n	80073ce <HAL_UART_RxCpltCallback+0x52>
 80073b4:	4b15      	ldr	r3, [pc, #84]	; (800740c <HAL_UART_RxCpltCallback+0x90>)
 80073b6:	781a      	ldrb	r2, [r3, #0]
 80073b8:	4914      	ldr	r1, [pc, #80]	; (800740c <HAL_UART_RxCpltCallback+0x90>)
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	440b      	add	r3, r1
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d001      	beq.n	80073c8 <HAL_UART_RxCpltCallback+0x4c>
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b03      	cmp	r3, #3
 80073d2:	ddef      	ble.n	80073b4 <HAL_UART_RxCpltCallback+0x38>
			counter = 0;
 80073d4:	4b0b      	ldr	r3, [pc, #44]	; (8007404 <HAL_UART_RxCpltCallback+0x88>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	601a      	str	r2, [r3, #0]
			if (succesful) {
 80073da:	7bfb      	ldrb	r3, [r7, #15]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d006      	beq.n	80073ee <HAL_UART_RxCpltCallback+0x72>
				new_command = true;
 80073e0:	4b0b      	ldr	r3, [pc, #44]	; (8007410 <HAL_UART_RxCpltCallback+0x94>)
 80073e2:	2201      	movs	r2, #1
 80073e4:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 80073e6:	4b08      	ldr	r3, [pc, #32]	; (8007408 <HAL_UART_RxCpltCallback+0x8c>)
 80073e8:	781a      	ldrb	r2, [r3, #0]
 80073ea:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <HAL_UART_RxCpltCallback+0x98>)
 80073ec:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 80073ee:	2201      	movs	r2, #1
 80073f0:	4905      	ldr	r1, [pc, #20]	; (8007408 <HAL_UART_RxCpltCallback+0x8c>)
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f006 fc14 	bl	800dc20 <HAL_UART_Receive_IT>
	}
}
 80073f8:	bf00      	nop
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	2000979c 	.word	0x2000979c
 8007404:	200003b4 	.word	0x200003b4
 8007408:	2001c759 	.word	0x2001c759
 800740c:	200003b8 	.word	0x200003b8
 8007410:	200003b0 	.word	0x200003b0
 8007414:	2001c758 	.word	0x2001c758

08007418 <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf){
 8007418:	b480      	push	{r7}
 800741a:	b087      	sub	sp, #28
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
	uint8_t cs=0;
 8007420:	2300      	movs	r3, #0
 8007422:	75fb      	strb	r3, [r7, #23]
	uint8_t *data;
	data = (uint8_t*) cnf;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	613b      	str	r3, [r7, #16]
	for(int i=0; i< sizeof(telemetry_t);i++){
 8007428:	2300      	movs	r3, #0
 800742a:	60fb      	str	r3, [r7, #12]
 800742c:	e009      	b.n	8007442 <calculate_checksum+0x2a>
		cs+=*data++;
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	613a      	str	r2, [r7, #16]
 8007434:	781a      	ldrb	r2, [r3, #0]
 8007436:	7dfb      	ldrb	r3, [r7, #23]
 8007438:	4413      	add	r3, r2
 800743a:	75fb      	strb	r3, [r7, #23]
	for(int i=0; i< sizeof(telemetry_t);i++){
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	3301      	adds	r3, #1
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b53      	cmp	r3, #83	; 0x53
 8007446:	d9f2      	bls.n	800742e <calculate_checksum+0x16>
	}
	return cs;
 8007448:	7dfb      	ldrb	r3, [r7, #23]
}
 800744a:	4618      	mov	r0, r3
 800744c:	371c      	adds	r7, #28
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
	...

08007458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007490 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800745c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800745e:	e003      	b.n	8007468 <LoopCopyDataInit>

08007460 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007460:	4b0c      	ldr	r3, [pc, #48]	; (8007494 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007462:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007464:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007466:	3104      	adds	r1, #4

08007468 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007468:	480b      	ldr	r0, [pc, #44]	; (8007498 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800746a:	4b0c      	ldr	r3, [pc, #48]	; (800749c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800746c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800746e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007470:	d3f6      	bcc.n	8007460 <CopyDataInit>
  ldr  r2, =_sbss
 8007472:	4a0b      	ldr	r2, [pc, #44]	; (80074a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007474:	e002      	b.n	800747c <LoopFillZerobss>

08007476 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007476:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007478:	f842 3b04 	str.w	r3, [r2], #4

0800747c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800747c:	4b09      	ldr	r3, [pc, #36]	; (80074a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800747e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007480:	d3f9      	bcc.n	8007476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8007482:	f7fe fb8d 	bl	8005ba0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007486:	f013 f8bf 	bl	801a608 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800748a:	f7fc ff3b 	bl	8004304 <main>
  bx  lr    
 800748e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007490:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007494:	0801da08 	.word	0x0801da08
  ldr  r0, =_sdata
 8007498:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800749c:	20000280 	.word	0x20000280
  ldr  r2, =_sbss
 80074a0:	20000280 	.word	0x20000280
  ldr  r3, = _ebss
 80074a4:	2001e4ec 	.word	0x2001e4ec

080074a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80074a8:	e7fe      	b.n	80074a8 <ADC_IRQHandler>

080074aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80074ae:	2003      	movs	r0, #3
 80074b0:	f000 fd57 	bl	8007f62 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80074b4:	2000      	movs	r0, #0
 80074b6:	f7fe fa2b 	bl	8005910 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80074ba:	f7fd fd1b 	bl	8004ef4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80074be:	2300      	movs	r3, #0
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80074c4:	b480      	push	{r7}
 80074c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <HAL_IncTick+0x20>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	4b06      	ldr	r3, [pc, #24]	; (80074e8 <HAL_IncTick+0x24>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4413      	add	r3, r2
 80074d4:	4a04      	ldr	r2, [pc, #16]	; (80074e8 <HAL_IncTick+0x24>)
 80074d6:	6013      	str	r3, [r2, #0]
}
 80074d8:	bf00      	nop
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	2000008c 	.word	0x2000008c
 80074e8:	2001c764 	.word	0x2001c764

080074ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  return uwTick;
 80074f0:	4b03      	ldr	r3, [pc, #12]	; (8007500 <HAL_GetTick+0x14>)
 80074f2:	681b      	ldr	r3, [r3, #0]
}
 80074f4:	4618      	mov	r0, r3
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	2001c764 	.word	0x2001c764

08007504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800750c:	f7ff ffee 	bl	80074ec <HAL_GetTick>
 8007510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751c:	d005      	beq.n	800752a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800751e:	4b09      	ldr	r3, [pc, #36]	; (8007544 <HAL_Delay+0x40>)
 8007520:	781b      	ldrb	r3, [r3, #0]
 8007522:	461a      	mov	r2, r3
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	4413      	add	r3, r2
 8007528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800752a:	bf00      	nop
 800752c:	f7ff ffde 	bl	80074ec <HAL_GetTick>
 8007530:	4602      	mov	r2, r0
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	1ad3      	subs	r3, r2, r3
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	429a      	cmp	r2, r3
 800753a:	d8f7      	bhi.n	800752c <HAL_Delay+0x28>
  {
  }
}
 800753c:	bf00      	nop
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}
 8007544:	2000008c 	.word	0x2000008c

08007548 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007550:	2300      	movs	r3, #0
 8007552:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d101      	bne.n	800755e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800755a:	2301      	movs	r3, #1
 800755c:	e031      	b.n	80075c2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d109      	bne.n	800757a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f7fd fcec 	bl	8004f44 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2200      	movs	r2, #0
 8007570:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2200      	movs	r2, #0
 8007576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757e:	f003 0310 	and.w	r3, r3, #16
 8007582:	2b00      	cmp	r3, #0
 8007584:	d116      	bne.n	80075b4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800758a:	4b10      	ldr	r3, [pc, #64]	; (80075cc <HAL_ADC_Init+0x84>)
 800758c:	4013      	ands	r3, r2
 800758e:	f043 0202 	orr.w	r2, r3, #2
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f000 faba 	bl	8007b10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	f023 0303 	bic.w	r3, r3, #3
 80075aa:	f043 0201 	orr.w	r2, r3, #1
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	641a      	str	r2, [r3, #64]	; 0x40
 80075b2:	e001      	b.n	80075b8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80075c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop
 80075cc:	ffffeefd 	.word	0xffffeefd

080075d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b086      	sub	sp, #24
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80075dc:	2300      	movs	r3, #0
 80075de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d101      	bne.n	80075ee <HAL_ADC_Start_DMA+0x1e>
 80075ea:	2302      	movs	r3, #2
 80075ec:	e0c7      	b.n	800777e <HAL_ADC_Start_DMA+0x1ae>
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2201      	movs	r2, #1
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	689b      	ldr	r3, [r3, #8]
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b01      	cmp	r3, #1
 8007602:	d018      	beq.n	8007636 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	689a      	ldr	r2, [r3, #8]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f042 0201 	orr.w	r2, r2, #1
 8007612:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007614:	4b5c      	ldr	r3, [pc, #368]	; (8007788 <HAL_ADC_Start_DMA+0x1b8>)
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a5c      	ldr	r2, [pc, #368]	; (800778c <HAL_ADC_Start_DMA+0x1bc>)
 800761a:	fba2 2303 	umull	r2, r3, r2, r3
 800761e:	0c9a      	lsrs	r2, r3, #18
 8007620:	4613      	mov	r3, r2
 8007622:	005b      	lsls	r3, r3, #1
 8007624:	4413      	add	r3, r2
 8007626:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007628:	e002      	b.n	8007630 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	3b01      	subs	r3, #1
 800762e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d1f9      	bne.n	800762a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f003 0301 	and.w	r3, r3, #1
 8007640:	2b01      	cmp	r3, #1
 8007642:	f040 809b 	bne.w	800777c <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800764a:	4b51      	ldr	r3, [pc, #324]	; (8007790 <HAL_ADC_Start_DMA+0x1c0>)
 800764c:	4013      	ands	r3, r2
 800764e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007660:	2b00      	cmp	r3, #0
 8007662:	d007      	beq.n	8007674 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007668:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800766c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007678:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800767c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007680:	d106      	bne.n	8007690 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007686:	f023 0206 	bic.w	r2, r3, #6
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	645a      	str	r2, [r3, #68]	; 0x44
 800768e:	e002      	b.n	8007696 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	4a3c      	ldr	r2, [pc, #240]	; (8007794 <HAL_ADC_Start_DMA+0x1c4>)
 80076a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076aa:	4a3b      	ldr	r2, [pc, #236]	; (8007798 <HAL_ADC_Start_DMA+0x1c8>)
 80076ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b2:	4a3a      	ldr	r2, [pc, #232]	; (800779c <HAL_ADC_Start_DMA+0x1cc>)
 80076b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80076be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685a      	ldr	r2, [r3, #4]
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80076ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689a      	ldr	r2, [r3, #8]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80076de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	334c      	adds	r3, #76	; 0x4c
 80076ea:	4619      	mov	r1, r3
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	f000 fd1a 	bl	8008128 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80076f4:	4b2a      	ldr	r3, [pc, #168]	; (80077a0 <HAL_ADC_Start_DMA+0x1d0>)
 80076f6:	685b      	ldr	r3, [r3, #4]
 80076f8:	f003 031f 	and.w	r3, r3, #31
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d10f      	bne.n	8007720 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	689b      	ldr	r3, [r3, #8]
 8007706:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800770a:	2b00      	cmp	r3, #0
 800770c:	d136      	bne.n	800777c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	689a      	ldr	r2, [r3, #8]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800771c:	609a      	str	r2, [r3, #8]
 800771e:	e02d      	b.n	800777c <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a1f      	ldr	r2, [pc, #124]	; (80077a4 <HAL_ADC_Start_DMA+0x1d4>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d10e      	bne.n	8007748 <HAL_ADC_Start_DMA+0x178>
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007734:	2b00      	cmp	r3, #0
 8007736:	d107      	bne.n	8007748 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689a      	ldr	r2, [r3, #8]
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007746:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007748:	4b15      	ldr	r3, [pc, #84]	; (80077a0 <HAL_ADC_Start_DMA+0x1d0>)
 800774a:	685b      	ldr	r3, [r3, #4]
 800774c:	f003 0310 	and.w	r3, r3, #16
 8007750:	2b00      	cmp	r3, #0
 8007752:	d113      	bne.n	800777c <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a13      	ldr	r2, [pc, #76]	; (80077a8 <HAL_ADC_Start_DMA+0x1d8>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d10e      	bne.n	800777c <HAL_ADC_Start_DMA+0x1ac>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d107      	bne.n	800777c <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800777a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3718      	adds	r7, #24
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20000000 	.word	0x20000000
 800778c:	431bde83 	.word	0x431bde83
 8007790:	fffff8fe 	.word	0xfffff8fe
 8007794:	08007d05 	.word	0x08007d05
 8007798:	08007dbf 	.word	0x08007dbf
 800779c:	08007ddb 	.word	0x08007ddb
 80077a0:	40012300 	.word	0x40012300
 80077a4:	40012000 	.word	0x40012000
 80077a8:	40012200 	.word	0x40012200

080077ac <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80077b4:	2300      	movs	r3, #0
 80077b6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d101      	bne.n	80077c6 <HAL_ADC_Stop_DMA+0x1a>
 80077c2:	2302      	movs	r3, #2
 80077c4:	e036      	b.n	8007834 <HAL_ADC_Stop_DMA+0x88>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2201      	movs	r2, #1
 80077ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	689a      	ldr	r2, [r3, #8]
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f022 0201 	bic.w	r2, r2, #1
 80077dc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	689b      	ldr	r3, [r3, #8]
 80077e4:	f003 0301 	and.w	r3, r3, #1
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d11e      	bne.n	800782a <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	689a      	ldr	r2, [r3, #8]
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077fa:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007800:	4618      	mov	r0, r3
 8007802:	f000 fcf1 	bl	80081e8 <HAL_DMA_Abort>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007818:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800781e:	4b07      	ldr	r3, [pc, #28]	; (800783c <HAL_ADC_Stop_DMA+0x90>)
 8007820:	4013      	ands	r3, r2
 8007822:	f043 0201 	orr.w	r2, r3, #1
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007832:	7bfb      	ldrb	r3, [r7, #15]
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	ffffeefe 	.word	0xffffeefe

08007840 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800787c:	b480      	push	{r7}
 800787e:	b085      	sub	sp, #20
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007886:	2300      	movs	r3, #0
 8007888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007890:	2b01      	cmp	r3, #1
 8007892:	d101      	bne.n	8007898 <HAL_ADC_ConfigChannel+0x1c>
 8007894:	2302      	movs	r3, #2
 8007896:	e12a      	b.n	8007aee <HAL_ADC_ConfigChannel+0x272>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	2b09      	cmp	r3, #9
 80078a6:	d93a      	bls.n	800791e <HAL_ADC_ConfigChannel+0xa2>
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078b0:	d035      	beq.n	800791e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	68d9      	ldr	r1, [r3, #12]
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	b29b      	uxth	r3, r3
 80078be:	461a      	mov	r2, r3
 80078c0:	4613      	mov	r3, r2
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	4413      	add	r3, r2
 80078c6:	3b1e      	subs	r3, #30
 80078c8:	2207      	movs	r2, #7
 80078ca:	fa02 f303 	lsl.w	r3, r2, r3
 80078ce:	43da      	mvns	r2, r3
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	400a      	ands	r2, r1
 80078d6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a87      	ldr	r2, [pc, #540]	; (8007afc <HAL_ADC_ConfigChannel+0x280>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10a      	bne.n	80078f8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68d9      	ldr	r1, [r3, #12]
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	689b      	ldr	r3, [r3, #8]
 80078ec:	061a      	lsls	r2, r3, #24
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	430a      	orrs	r2, r1
 80078f4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80078f6:	e035      	b.n	8007964 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	68d9      	ldr	r1, [r3, #12]
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	689a      	ldr	r2, [r3, #8]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	4618      	mov	r0, r3
 800790a:	4603      	mov	r3, r0
 800790c:	005b      	lsls	r3, r3, #1
 800790e:	4403      	add	r3, r0
 8007910:	3b1e      	subs	r3, #30
 8007912:	409a      	lsls	r2, r3
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	430a      	orrs	r2, r1
 800791a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800791c:	e022      	b.n	8007964 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	6919      	ldr	r1, [r3, #16]
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	b29b      	uxth	r3, r3
 800792a:	461a      	mov	r2, r3
 800792c:	4613      	mov	r3, r2
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	4413      	add	r3, r2
 8007932:	2207      	movs	r2, #7
 8007934:	fa02 f303 	lsl.w	r3, r2, r3
 8007938:	43da      	mvns	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	400a      	ands	r2, r1
 8007940:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	6919      	ldr	r1, [r3, #16]
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	689a      	ldr	r2, [r3, #8]
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	b29b      	uxth	r3, r3
 8007952:	4618      	mov	r0, r3
 8007954:	4603      	mov	r3, r0
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	4403      	add	r3, r0
 800795a:	409a      	lsls	r2, r3
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	430a      	orrs	r2, r1
 8007962:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	2b06      	cmp	r3, #6
 800796a:	d824      	bhi.n	80079b6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007972:	683b      	ldr	r3, [r7, #0]
 8007974:	685a      	ldr	r2, [r3, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	009b      	lsls	r3, r3, #2
 800797a:	4413      	add	r3, r2
 800797c:	3b05      	subs	r3, #5
 800797e:	221f      	movs	r2, #31
 8007980:	fa02 f303 	lsl.w	r3, r2, r3
 8007984:	43da      	mvns	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	400a      	ands	r2, r1
 800798c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	b29b      	uxth	r3, r3
 800799a:	4618      	mov	r0, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	685a      	ldr	r2, [r3, #4]
 80079a0:	4613      	mov	r3, r2
 80079a2:	009b      	lsls	r3, r3, #2
 80079a4:	4413      	add	r3, r2
 80079a6:	3b05      	subs	r3, #5
 80079a8:	fa00 f203 	lsl.w	r2, r0, r3
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	430a      	orrs	r2, r1
 80079b2:	635a      	str	r2, [r3, #52]	; 0x34
 80079b4:	e04c      	b.n	8007a50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	2b0c      	cmp	r3, #12
 80079bc:	d824      	bhi.n	8007a08 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	685a      	ldr	r2, [r3, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	3b23      	subs	r3, #35	; 0x23
 80079d0:	221f      	movs	r2, #31
 80079d2:	fa02 f303 	lsl.w	r3, r2, r3
 80079d6:	43da      	mvns	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	400a      	ands	r2, r1
 80079de:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	4618      	mov	r0, r3
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	3b23      	subs	r3, #35	; 0x23
 80079fa:	fa00 f203 	lsl.w	r2, r0, r3
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	430a      	orrs	r2, r1
 8007a04:	631a      	str	r2, [r3, #48]	; 0x30
 8007a06:	e023      	b.n	8007a50 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	685a      	ldr	r2, [r3, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4413      	add	r3, r2
 8007a18:	3b41      	subs	r3, #65	; 0x41
 8007a1a:	221f      	movs	r2, #31
 8007a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a20:	43da      	mvns	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	400a      	ands	r2, r1
 8007a28:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	b29b      	uxth	r3, r3
 8007a36:	4618      	mov	r0, r3
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685a      	ldr	r2, [r3, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	4413      	add	r3, r2
 8007a42:	3b41      	subs	r3, #65	; 0x41
 8007a44:	fa00 f203 	lsl.w	r2, r0, r3
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	430a      	orrs	r2, r1
 8007a4e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a2a      	ldr	r2, [pc, #168]	; (8007b00 <HAL_ADC_ConfigChannel+0x284>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d10a      	bne.n	8007a70 <HAL_ADC_ConfigChannel+0x1f4>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a62:	d105      	bne.n	8007a70 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007a64:	4b27      	ldr	r3, [pc, #156]	; (8007b04 <HAL_ADC_ConfigChannel+0x288>)
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4a26      	ldr	r2, [pc, #152]	; (8007b04 <HAL_ADC_ConfigChannel+0x288>)
 8007a6a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007a6e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a22      	ldr	r2, [pc, #136]	; (8007b00 <HAL_ADC_ConfigChannel+0x284>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d109      	bne.n	8007a8e <HAL_ADC_ConfigChannel+0x212>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2b12      	cmp	r3, #18
 8007a80:	d105      	bne.n	8007a8e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007a82:	4b20      	ldr	r3, [pc, #128]	; (8007b04 <HAL_ADC_ConfigChannel+0x288>)
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	4a1f      	ldr	r2, [pc, #124]	; (8007b04 <HAL_ADC_ConfigChannel+0x288>)
 8007a88:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007a8c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	4a1b      	ldr	r2, [pc, #108]	; (8007b00 <HAL_ADC_ConfigChannel+0x284>)
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d125      	bne.n	8007ae4 <HAL_ADC_ConfigChannel+0x268>
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	4a17      	ldr	r2, [pc, #92]	; (8007afc <HAL_ADC_ConfigChannel+0x280>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d003      	beq.n	8007aaa <HAL_ADC_ConfigChannel+0x22e>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	2b11      	cmp	r3, #17
 8007aa8:	d11c      	bne.n	8007ae4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007aaa:	4b16      	ldr	r3, [pc, #88]	; (8007b04 <HAL_ADC_ConfigChannel+0x288>)
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	4a15      	ldr	r2, [pc, #84]	; (8007b04 <HAL_ADC_ConfigChannel+0x288>)
 8007ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ab4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a10      	ldr	r2, [pc, #64]	; (8007afc <HAL_ADC_ConfigChannel+0x280>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d111      	bne.n	8007ae4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007ac0:	4b11      	ldr	r3, [pc, #68]	; (8007b08 <HAL_ADC_ConfigChannel+0x28c>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a11      	ldr	r2, [pc, #68]	; (8007b0c <HAL_ADC_ConfigChannel+0x290>)
 8007ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8007aca:	0c9a      	lsrs	r2, r3, #18
 8007acc:	4613      	mov	r3, r2
 8007ace:	009b      	lsls	r3, r3, #2
 8007ad0:	4413      	add	r3, r2
 8007ad2:	005b      	lsls	r3, r3, #1
 8007ad4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007ad6:	e002      	b.n	8007ade <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	3b01      	subs	r3, #1
 8007adc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d1f9      	bne.n	8007ad8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	10000012 	.word	0x10000012
 8007b00:	40012000 	.word	0x40012000
 8007b04:	40012300 	.word	0x40012300
 8007b08:	20000000 	.word	0x20000000
 8007b0c:	431bde83 	.word	0x431bde83

08007b10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007b18:	4b78      	ldr	r3, [pc, #480]	; (8007cfc <ADC_Init+0x1ec>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	4a77      	ldr	r2, [pc, #476]	; (8007cfc <ADC_Init+0x1ec>)
 8007b1e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007b22:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007b24:	4b75      	ldr	r3, [pc, #468]	; (8007cfc <ADC_Init+0x1ec>)
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	4973      	ldr	r1, [pc, #460]	; (8007cfc <ADC_Init+0x1ec>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	685a      	ldr	r2, [r3, #4]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6859      	ldr	r1, [r3, #4]
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	691b      	ldr	r3, [r3, #16]
 8007b4c:	021a      	lsls	r2, r3, #8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	430a      	orrs	r2, r1
 8007b54:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	685a      	ldr	r2, [r3, #4]
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	6859      	ldr	r1, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	689a      	ldr	r2, [r3, #8]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	430a      	orrs	r2, r1
 8007b76:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b86:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6899      	ldr	r1, [r3, #8]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	430a      	orrs	r2, r1
 8007b98:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b9e:	4a58      	ldr	r2, [pc, #352]	; (8007d00 <ADC_Init+0x1f0>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d022      	beq.n	8007bea <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689a      	ldr	r2, [r3, #8]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bb2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	430a      	orrs	r2, r1
 8007bc4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689a      	ldr	r2, [r3, #8]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	6899      	ldr	r1, [r3, #8]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	609a      	str	r2, [r3, #8]
 8007be8:	e00f      	b.n	8007c0a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689a      	ldr	r2, [r3, #8]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bf8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689a      	ldr	r2, [r3, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c08:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0202 	bic.w	r2, r2, #2
 8007c18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	6899      	ldr	r1, [r3, #8]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	005a      	lsls	r2, r3, #1
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d01b      	beq.n	8007c70 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	685a      	ldr	r2, [r3, #4]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c46:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685a      	ldr	r2, [r3, #4]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c56:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	6859      	ldr	r1, [r3, #4]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c62:	3b01      	subs	r3, #1
 8007c64:	035a      	lsls	r2, r3, #13
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	430a      	orrs	r2, r1
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	e007      	b.n	8007c80 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c7e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69db      	ldr	r3, [r3, #28]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	051a      	lsls	r2, r3, #20
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	430a      	orrs	r2, r1
 8007ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	6899      	ldr	r1, [r3, #8]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007cc2:	025a      	lsls	r2, r3, #9
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	430a      	orrs	r2, r1
 8007cca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cda:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6899      	ldr	r1, [r3, #8]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	695b      	ldr	r3, [r3, #20]
 8007ce6:	029a      	lsls	r2, r3, #10
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	430a      	orrs	r2, r1
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	40012300 	.word	0x40012300
 8007d00:	0f000001 	.word	0x0f000001

08007d04 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d10:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d16:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d13c      	bne.n	8007d98 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d22:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d12b      	bne.n	8007d90 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d127      	bne.n	8007d90 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d46:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d006      	beq.n	8007d5c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d119      	bne.n	8007d90 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	685a      	ldr	r2, [r3, #4]
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	f022 0220 	bic.w	r2, r2, #32
 8007d6a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d105      	bne.n	8007d90 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d88:	f043 0201 	orr.w	r2, r3, #1
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7ff fd55 	bl	8007840 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d96:	e00e      	b.n	8007db6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	f003 0310 	and.w	r3, r3, #16
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff fd5f 	bl	8007868 <HAL_ADC_ErrorCallback>
}
 8007daa:	e004      	b.n	8007db6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	4798      	blx	r3
}
 8007db6:	bf00      	nop
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}

08007dbe <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007dbe:	b580      	push	{r7, lr}
 8007dc0:	b084      	sub	sp, #16
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f7ff fd41 	bl	8007854 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007dd2:	bf00      	nop
 8007dd4:	3710      	adds	r7, #16
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b084      	sub	sp, #16
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2240      	movs	r2, #64	; 0x40
 8007dec:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df2:	f043 0204 	orr.w	r2, r3, #4
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff fd34 	bl	8007868 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e00:	bf00      	nop
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e18:	4b0b      	ldr	r3, [pc, #44]	; (8007e48 <__NVIC_SetPriorityGrouping+0x40>)
 8007e1a:	68db      	ldr	r3, [r3, #12]
 8007e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e1e:	68ba      	ldr	r2, [r7, #8]
 8007e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007e24:	4013      	ands	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007e30:	4b06      	ldr	r3, [pc, #24]	; (8007e4c <__NVIC_SetPriorityGrouping+0x44>)
 8007e32:	4313      	orrs	r3, r2
 8007e34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e36:	4a04      	ldr	r2, [pc, #16]	; (8007e48 <__NVIC_SetPriorityGrouping+0x40>)
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	60d3      	str	r3, [r2, #12]
}
 8007e3c:	bf00      	nop
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	e000ed00 	.word	0xe000ed00
 8007e4c:	05fa0000 	.word	0x05fa0000

08007e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e50:	b480      	push	{r7}
 8007e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e54:	4b04      	ldr	r3, [pc, #16]	; (8007e68 <__NVIC_GetPriorityGrouping+0x18>)
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	0a1b      	lsrs	r3, r3, #8
 8007e5a:	f003 0307 	and.w	r3, r3, #7
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr
 8007e68:	e000ed00 	.word	0xe000ed00

08007e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	4603      	mov	r3, r0
 8007e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	db0b      	blt.n	8007e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e7e:	79fb      	ldrb	r3, [r7, #7]
 8007e80:	f003 021f 	and.w	r2, r3, #31
 8007e84:	4907      	ldr	r1, [pc, #28]	; (8007ea4 <__NVIC_EnableIRQ+0x38>)
 8007e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8a:	095b      	lsrs	r3, r3, #5
 8007e8c:	2001      	movs	r0, #1
 8007e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	e000e100 	.word	0xe000e100

08007ea8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b083      	sub	sp, #12
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	4603      	mov	r3, r0
 8007eb0:	6039      	str	r1, [r7, #0]
 8007eb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007eb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	db0a      	blt.n	8007ed2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	b2da      	uxtb	r2, r3
 8007ec0:	490c      	ldr	r1, [pc, #48]	; (8007ef4 <__NVIC_SetPriority+0x4c>)
 8007ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ec6:	0112      	lsls	r2, r2, #4
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	440b      	add	r3, r1
 8007ecc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ed0:	e00a      	b.n	8007ee8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	b2da      	uxtb	r2, r3
 8007ed6:	4908      	ldr	r1, [pc, #32]	; (8007ef8 <__NVIC_SetPriority+0x50>)
 8007ed8:	79fb      	ldrb	r3, [r7, #7]
 8007eda:	f003 030f 	and.w	r3, r3, #15
 8007ede:	3b04      	subs	r3, #4
 8007ee0:	0112      	lsls	r2, r2, #4
 8007ee2:	b2d2      	uxtb	r2, r2
 8007ee4:	440b      	add	r3, r1
 8007ee6:	761a      	strb	r2, [r3, #24]
}
 8007ee8:	bf00      	nop
 8007eea:	370c      	adds	r7, #12
 8007eec:	46bd      	mov	sp, r7
 8007eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef2:	4770      	bx	lr
 8007ef4:	e000e100 	.word	0xe000e100
 8007ef8:	e000ed00 	.word	0xe000ed00

08007efc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b089      	sub	sp, #36	; 0x24
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	60f8      	str	r0, [r7, #12]
 8007f04:	60b9      	str	r1, [r7, #8]
 8007f06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	f003 0307 	and.w	r3, r3, #7
 8007f0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f1c3 0307 	rsb	r3, r3, #7
 8007f16:	2b04      	cmp	r3, #4
 8007f18:	bf28      	it	cs
 8007f1a:	2304      	movcs	r3, #4
 8007f1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	3304      	adds	r3, #4
 8007f22:	2b06      	cmp	r3, #6
 8007f24:	d902      	bls.n	8007f2c <NVIC_EncodePriority+0x30>
 8007f26:	69fb      	ldr	r3, [r7, #28]
 8007f28:	3b03      	subs	r3, #3
 8007f2a:	e000      	b.n	8007f2e <NVIC_EncodePriority+0x32>
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f30:	f04f 32ff 	mov.w	r2, #4294967295
 8007f34:	69bb      	ldr	r3, [r7, #24]
 8007f36:	fa02 f303 	lsl.w	r3, r2, r3
 8007f3a:	43da      	mvns	r2, r3
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	401a      	ands	r2, r3
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f44:	f04f 31ff 	mov.w	r1, #4294967295
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f4e:	43d9      	mvns	r1, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f54:	4313      	orrs	r3, r2
         );
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	3724      	adds	r7, #36	; 0x24
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr

08007f62 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b082      	sub	sp, #8
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7ff ff4c 	bl	8007e08 <__NVIC_SetPriorityGrouping>
}
 8007f70:	bf00      	nop
 8007f72:	3708      	adds	r7, #8
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f8a:	f7ff ff61 	bl	8007e50 <__NVIC_GetPriorityGrouping>
 8007f8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	68b9      	ldr	r1, [r7, #8]
 8007f94:	6978      	ldr	r0, [r7, #20]
 8007f96:	f7ff ffb1 	bl	8007efc <NVIC_EncodePriority>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7ff ff80 	bl	8007ea8 <__NVIC_SetPriority>
}
 8007fa8:	bf00      	nop
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff ff54 	bl	8007e6c <__NVIC_EnableIRQ>
}
 8007fc4:	bf00      	nop
 8007fc6:	3708      	adds	r7, #8
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b086      	sub	sp, #24
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007fd8:	f7ff fa88 	bl	80074ec <HAL_GetTick>
 8007fdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d101      	bne.n	8007fe8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	e099      	b.n	800811c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2202      	movs	r2, #2
 8007ff4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	681a      	ldr	r2, [r3, #0]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f022 0201 	bic.w	r2, r2, #1
 8008006:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008008:	e00f      	b.n	800802a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800800a:	f7ff fa6f 	bl	80074ec <HAL_GetTick>
 800800e:	4602      	mov	r2, r0
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	2b05      	cmp	r3, #5
 8008016:	d908      	bls.n	800802a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2203      	movs	r2, #3
 8008022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008026:	2303      	movs	r3, #3
 8008028:	e078      	b.n	800811c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 0301 	and.w	r3, r3, #1
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1e8      	bne.n	800800a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4b38      	ldr	r3, [pc, #224]	; (8008124 <HAL_DMA_Init+0x158>)
 8008044:	4013      	ands	r3, r2
 8008046:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685a      	ldr	r2, [r3, #4]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008056:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008062:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800806e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a1b      	ldr	r3, [r3, #32]
 8008074:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008076:	697a      	ldr	r2, [r7, #20]
 8008078:	4313      	orrs	r3, r2
 800807a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008080:	2b04      	cmp	r3, #4
 8008082:	d107      	bne.n	8008094 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800808c:	4313      	orrs	r3, r2
 800808e:	697a      	ldr	r2, [r7, #20]
 8008090:	4313      	orrs	r3, r2
 8008092:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	697a      	ldr	r2, [r7, #20]
 800809a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	f023 0307 	bic.w	r3, r3, #7
 80080aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d117      	bne.n	80080ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	4313      	orrs	r3, r2
 80080c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d00e      	beq.n	80080ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f000 fb15 	bl	8008700 <DMA_CheckFifoParam>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d008      	beq.n	80080ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2240      	movs	r2, #64	; 0x40
 80080e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2201      	movs	r2, #1
 80080e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80080ea:	2301      	movs	r3, #1
 80080ec:	e016      	b.n	800811c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 facc 	bl	8008694 <DMA_CalcBaseAndBitshift>
 80080fc:	4603      	mov	r3, r0
 80080fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008104:	223f      	movs	r2, #63	; 0x3f
 8008106:	409a      	lsls	r2, r3
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2201      	movs	r2, #1
 8008116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800811a:	2300      	movs	r3, #0
}
 800811c:	4618      	mov	r0, r3
 800811e:	3718      	adds	r7, #24
 8008120:	46bd      	mov	sp, r7
 8008122:	bd80      	pop	{r7, pc}
 8008124:	f010803f 	.word	0xf010803f

08008128 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b086      	sub	sp, #24
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	60b9      	str	r1, [r7, #8]
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008136:	2300      	movs	r3, #0
 8008138:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008146:	2b01      	cmp	r3, #1
 8008148:	d101      	bne.n	800814e <HAL_DMA_Start_IT+0x26>
 800814a:	2302      	movs	r3, #2
 800814c:	e048      	b.n	80081e0 <HAL_DMA_Start_IT+0xb8>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2201      	movs	r2, #1
 8008152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b01      	cmp	r3, #1
 8008160:	d137      	bne.n	80081d2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	2202      	movs	r2, #2
 8008166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	2200      	movs	r2, #0
 800816e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008170:	683b      	ldr	r3, [r7, #0]
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	68b9      	ldr	r1, [r7, #8]
 8008176:	68f8      	ldr	r0, [r7, #12]
 8008178:	f000 fa5e 	bl	8008638 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008180:	223f      	movs	r2, #63	; 0x3f
 8008182:	409a      	lsls	r2, r3
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f042 0216 	orr.w	r2, r2, #22
 8008196:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	695a      	ldr	r2, [r3, #20]
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80081a6:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d007      	beq.n	80081c0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f042 0208 	orr.w	r2, r2, #8
 80081be:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	681a      	ldr	r2, [r3, #0]
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f042 0201 	orr.w	r2, r2, #1
 80081ce:	601a      	str	r2, [r3, #0]
 80081d0:	e005      	b.n	80081de <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80081da:	2302      	movs	r3, #2
 80081dc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80081de:	7dfb      	ldrb	r3, [r7, #23]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3718      	adds	r7, #24
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80081f6:	f7ff f979 	bl	80074ec <HAL_GetTick>
 80081fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b02      	cmp	r3, #2
 8008206:	d008      	beq.n	800821a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2280      	movs	r2, #128	; 0x80
 800820c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	e052      	b.n	80082c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681a      	ldr	r2, [r3, #0]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f022 0216 	bic.w	r2, r2, #22
 8008228:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	695a      	ldr	r2, [r3, #20]
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008238:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800823e:	2b00      	cmp	r3, #0
 8008240:	d103      	bne.n	800824a <HAL_DMA_Abort+0x62>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f022 0208 	bic.w	r2, r2, #8
 8008258:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f022 0201 	bic.w	r2, r2, #1
 8008268:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800826a:	e013      	b.n	8008294 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800826c:	f7ff f93e 	bl	80074ec <HAL_GetTick>
 8008270:	4602      	mov	r2, r0
 8008272:	68bb      	ldr	r3, [r7, #8]
 8008274:	1ad3      	subs	r3, r2, r3
 8008276:	2b05      	cmp	r3, #5
 8008278:	d90c      	bls.n	8008294 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2220      	movs	r2, #32
 800827e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2203      	movs	r2, #3
 800828c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8008290:	2303      	movs	r3, #3
 8008292:	e015      	b.n	80082c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f003 0301 	and.w	r3, r3, #1
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d1e4      	bne.n	800826c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082a6:	223f      	movs	r2, #63	; 0x3f
 80082a8:	409a      	lsls	r2, r3
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d004      	beq.n	80082e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2280      	movs	r2, #128	; 0x80
 80082e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e00c      	b.n	8008300 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2205      	movs	r2, #5
 80082ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0201 	bic.w	r2, r2, #1
 80082fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80082fe:	2300      	movs	r3, #0
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800830c:	b580      	push	{r7, lr}
 800830e:	b086      	sub	sp, #24
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008314:	2300      	movs	r3, #0
 8008316:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008318:	4b92      	ldr	r3, [pc, #584]	; (8008564 <HAL_DMA_IRQHandler+0x258>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a92      	ldr	r2, [pc, #584]	; (8008568 <HAL_DMA_IRQHandler+0x25c>)
 800831e:	fba2 2303 	umull	r2, r3, r2, r3
 8008322:	0a9b      	lsrs	r3, r3, #10
 8008324:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800832c:	693b      	ldr	r3, [r7, #16]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008336:	2208      	movs	r2, #8
 8008338:	409a      	lsls	r2, r3
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	4013      	ands	r3, r2
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01a      	beq.n	8008378 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	f003 0304 	and.w	r3, r3, #4
 800834c:	2b00      	cmp	r3, #0
 800834e:	d013      	beq.n	8008378 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0204 	bic.w	r2, r2, #4
 800835e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008364:	2208      	movs	r2, #8
 8008366:	409a      	lsls	r2, r3
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008370:	f043 0201 	orr.w	r2, r3, #1
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800837c:	2201      	movs	r2, #1
 800837e:	409a      	lsls	r2, r3
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	4013      	ands	r3, r2
 8008384:	2b00      	cmp	r3, #0
 8008386:	d012      	beq.n	80083ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008392:	2b00      	cmp	r3, #0
 8008394:	d00b      	beq.n	80083ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800839a:	2201      	movs	r2, #1
 800839c:	409a      	lsls	r2, r3
 800839e:	693b      	ldr	r3, [r7, #16]
 80083a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083a6:	f043 0202 	orr.w	r2, r3, #2
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	2204      	movs	r2, #4
 80083b4:	409a      	lsls	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d012      	beq.n	80083e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0302 	and.w	r3, r3, #2
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d00b      	beq.n	80083e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083d0:	2204      	movs	r2, #4
 80083d2:	409a      	lsls	r2, r3
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083dc:	f043 0204 	orr.w	r2, r3, #4
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e8:	2210      	movs	r2, #16
 80083ea:	409a      	lsls	r2, r3
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	4013      	ands	r3, r2
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d043      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f003 0308 	and.w	r3, r3, #8
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d03c      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008406:	2210      	movs	r2, #16
 8008408:	409a      	lsls	r2, r3
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008418:	2b00      	cmp	r3, #0
 800841a:	d018      	beq.n	800844e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d108      	bne.n	800843c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800842e:	2b00      	cmp	r3, #0
 8008430:	d024      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	4798      	blx	r3
 800843a:	e01f      	b.n	800847c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008440:	2b00      	cmp	r3, #0
 8008442:	d01b      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	4798      	blx	r3
 800844c:	e016      	b.n	800847c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008458:	2b00      	cmp	r3, #0
 800845a:	d107      	bne.n	800846c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	681a      	ldr	r2, [r3, #0]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f022 0208 	bic.w	r2, r2, #8
 800846a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008470:	2b00      	cmp	r3, #0
 8008472:	d003      	beq.n	800847c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	6878      	ldr	r0, [r7, #4]
 800847a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008480:	2220      	movs	r2, #32
 8008482:	409a      	lsls	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	4013      	ands	r3, r2
 8008488:	2b00      	cmp	r3, #0
 800848a:	f000 808e 	beq.w	80085aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0310 	and.w	r3, r3, #16
 8008498:	2b00      	cmp	r3, #0
 800849a:	f000 8086 	beq.w	80085aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084a2:	2220      	movs	r2, #32
 80084a4:	409a      	lsls	r2, r3
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	2b05      	cmp	r3, #5
 80084b4:	d136      	bne.n	8008524 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 0216 	bic.w	r2, r2, #22
 80084c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	695a      	ldr	r2, [r3, #20]
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80084d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d103      	bne.n	80084e6 <HAL_DMA_IRQHandler+0x1da>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d007      	beq.n	80084f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	681a      	ldr	r2, [r3, #0]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f022 0208 	bic.w	r2, r2, #8
 80084f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fa:	223f      	movs	r2, #63	; 0x3f
 80084fc:	409a      	lsls	r2, r3
 80084fe:	693b      	ldr	r3, [r7, #16]
 8008500:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008516:	2b00      	cmp	r3, #0
 8008518:	d07d      	beq.n	8008616 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	4798      	blx	r3
        }
        return;
 8008522:	e078      	b.n	8008616 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d01c      	beq.n	800856c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800853c:	2b00      	cmp	r3, #0
 800853e:	d108      	bne.n	8008552 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008544:	2b00      	cmp	r3, #0
 8008546:	d030      	beq.n	80085aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	4798      	blx	r3
 8008550:	e02b      	b.n	80085aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d027      	beq.n	80085aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
 8008562:	e022      	b.n	80085aa <HAL_DMA_IRQHandler+0x29e>
 8008564:	20000000 	.word	0x20000000
 8008568:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10f      	bne.n	800859a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	681a      	ldr	r2, [r3, #0]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f022 0210 	bic.w	r2, r2, #16
 8008588:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2200      	movs	r2, #0
 800858e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d003      	beq.n	80085aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d032      	beq.n	8008618 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b6:	f003 0301 	and.w	r3, r3, #1
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d022      	beq.n	8008604 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2205      	movs	r2, #5
 80085c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f022 0201 	bic.w	r2, r2, #1
 80085d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	3301      	adds	r3, #1
 80085da:	60bb      	str	r3, [r7, #8]
 80085dc:	697a      	ldr	r2, [r7, #20]
 80085de:	429a      	cmp	r2, r3
 80085e0:	d307      	bcc.n	80085f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f003 0301 	and.w	r3, r3, #1
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1f2      	bne.n	80085d6 <HAL_DMA_IRQHandler+0x2ca>
 80085f0:	e000      	b.n	80085f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80085f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008608:	2b00      	cmp	r3, #0
 800860a:	d005      	beq.n	8008618 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	4798      	blx	r3
 8008614:	e000      	b.n	8008618 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008616:	bf00      	nop
    }
  }
}
 8008618:	3718      	adds	r7, #24
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop

08008620 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8008620:	b480      	push	{r7}
 8008622:	b083      	sub	sp, #12
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800862c:	4618      	mov	r0, r3
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008654:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	683a      	ldr	r2, [r7, #0]
 800865c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	689b      	ldr	r3, [r3, #8]
 8008662:	2b40      	cmp	r3, #64	; 0x40
 8008664:	d108      	bne.n	8008678 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008676:	e007      	b.n	8008688 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	68ba      	ldr	r2, [r7, #8]
 800867e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	60da      	str	r2, [r3, #12]
}
 8008688:	bf00      	nop
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	b2db      	uxtb	r3, r3
 80086a2:	3b10      	subs	r3, #16
 80086a4:	4a13      	ldr	r2, [pc, #76]	; (80086f4 <DMA_CalcBaseAndBitshift+0x60>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	091b      	lsrs	r3, r3, #4
 80086ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80086ae:	4a12      	ldr	r2, [pc, #72]	; (80086f8 <DMA_CalcBaseAndBitshift+0x64>)
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	781b      	ldrb	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2b03      	cmp	r3, #3
 80086c0:	d908      	bls.n	80086d4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	4b0c      	ldr	r3, [pc, #48]	; (80086fc <DMA_CalcBaseAndBitshift+0x68>)
 80086ca:	4013      	ands	r3, r2
 80086cc:	1d1a      	adds	r2, r3, #4
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	659a      	str	r2, [r3, #88]	; 0x58
 80086d2:	e006      	b.n	80086e2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	461a      	mov	r2, r3
 80086da:	4b08      	ldr	r3, [pc, #32]	; (80086fc <DMA_CalcBaseAndBitshift+0x68>)
 80086dc:	4013      	ands	r3, r2
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr
 80086f2:	bf00      	nop
 80086f4:	aaaaaaab 	.word	0xaaaaaaab
 80086f8:	0801d850 	.word	0x0801d850
 80086fc:	fffffc00 	.word	0xfffffc00

08008700 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008700:	b480      	push	{r7}
 8008702:	b085      	sub	sp, #20
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008708:	2300      	movs	r3, #0
 800870a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008710:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	699b      	ldr	r3, [r3, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d11f      	bne.n	800875a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	2b03      	cmp	r3, #3
 800871e:	d855      	bhi.n	80087cc <DMA_CheckFifoParam+0xcc>
 8008720:	a201      	add	r2, pc, #4	; (adr r2, 8008728 <DMA_CheckFifoParam+0x28>)
 8008722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008726:	bf00      	nop
 8008728:	08008739 	.word	0x08008739
 800872c:	0800874b 	.word	0x0800874b
 8008730:	08008739 	.word	0x08008739
 8008734:	080087cd 	.word	0x080087cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800873c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d045      	beq.n	80087d0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008748:	e042      	b.n	80087d0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800874e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008752:	d13f      	bne.n	80087d4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008754:	2301      	movs	r3, #1
 8008756:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008758:	e03c      	b.n	80087d4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	699b      	ldr	r3, [r3, #24]
 800875e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008762:	d121      	bne.n	80087a8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	2b03      	cmp	r3, #3
 8008768:	d836      	bhi.n	80087d8 <DMA_CheckFifoParam+0xd8>
 800876a:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <DMA_CheckFifoParam+0x70>)
 800876c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008770:	08008781 	.word	0x08008781
 8008774:	08008787 	.word	0x08008787
 8008778:	08008781 	.word	0x08008781
 800877c:	08008799 	.word	0x08008799
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	73fb      	strb	r3, [r7, #15]
      break;
 8008784:	e02f      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800878a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d024      	beq.n	80087dc <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008796:	e021      	b.n	80087dc <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087a0:	d11e      	bne.n	80087e0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80087a6:	e01b      	b.n	80087e0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	d902      	bls.n	80087b4 <DMA_CheckFifoParam+0xb4>
 80087ae:	2b03      	cmp	r3, #3
 80087b0:	d003      	beq.n	80087ba <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80087b2:	e018      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80087b4:	2301      	movs	r3, #1
 80087b6:	73fb      	strb	r3, [r7, #15]
      break;
 80087b8:	e015      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d00e      	beq.n	80087e4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]
      break;
 80087ca:	e00b      	b.n	80087e4 <DMA_CheckFifoParam+0xe4>
      break;
 80087cc:	bf00      	nop
 80087ce:	e00a      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      break;
 80087d0:	bf00      	nop
 80087d2:	e008      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      break;
 80087d4:	bf00      	nop
 80087d6:	e006      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      break;
 80087d8:	bf00      	nop
 80087da:	e004      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      break;
 80087dc:	bf00      	nop
 80087de:	e002      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      break;   
 80087e0:	bf00      	nop
 80087e2:	e000      	b.n	80087e6 <DMA_CheckFifoParam+0xe6>
      break;
 80087e4:	bf00      	nop
    }
  } 
  
  return status; 
 80087e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b089      	sub	sp, #36	; 0x24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008802:	2300      	movs	r3, #0
 8008804:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008806:	2300      	movs	r3, #0
 8008808:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800880a:	2300      	movs	r3, #0
 800880c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800880e:	2300      	movs	r3, #0
 8008810:	61fb      	str	r3, [r7, #28]
 8008812:	e175      	b.n	8008b00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008814:	2201      	movs	r2, #1
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	fa02 f303 	lsl.w	r3, r2, r3
 800881c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800881e:	683b      	ldr	r3, [r7, #0]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	4013      	ands	r3, r2
 8008826:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	429a      	cmp	r2, r3
 800882e:	f040 8164 	bne.w	8008afa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008832:	683b      	ldr	r3, [r7, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	2b01      	cmp	r3, #1
 8008838:	d00b      	beq.n	8008852 <HAL_GPIO_Init+0x5e>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d007      	beq.n	8008852 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008846:	2b11      	cmp	r3, #17
 8008848:	d003      	beq.n	8008852 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	2b12      	cmp	r3, #18
 8008850:	d130      	bne.n	80088b4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008858:	69fb      	ldr	r3, [r7, #28]
 800885a:	005b      	lsls	r3, r3, #1
 800885c:	2203      	movs	r2, #3
 800885e:	fa02 f303 	lsl.w	r3, r2, r3
 8008862:	43db      	mvns	r3, r3
 8008864:	69ba      	ldr	r2, [r7, #24]
 8008866:	4013      	ands	r3, r2
 8008868:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68da      	ldr	r2, [r3, #12]
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	005b      	lsls	r3, r3, #1
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	69ba      	ldr	r2, [r7, #24]
 8008878:	4313      	orrs	r3, r2
 800887a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	69ba      	ldr	r2, [r7, #24]
 8008880:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	685b      	ldr	r3, [r3, #4]
 8008886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008888:	2201      	movs	r2, #1
 800888a:	69fb      	ldr	r3, [r7, #28]
 800888c:	fa02 f303 	lsl.w	r3, r2, r3
 8008890:	43db      	mvns	r3, r3
 8008892:	69ba      	ldr	r2, [r7, #24]
 8008894:	4013      	ands	r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	685b      	ldr	r3, [r3, #4]
 800889c:	091b      	lsrs	r3, r3, #4
 800889e:	f003 0201 	and.w	r2, r3, #1
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	fa02 f303 	lsl.w	r3, r2, r3
 80088a8:	69ba      	ldr	r2, [r7, #24]
 80088aa:	4313      	orrs	r3, r2
 80088ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	69ba      	ldr	r2, [r7, #24]
 80088b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80088ba:	69fb      	ldr	r3, [r7, #28]
 80088bc:	005b      	lsls	r3, r3, #1
 80088be:	2203      	movs	r2, #3
 80088c0:	fa02 f303 	lsl.w	r3, r2, r3
 80088c4:	43db      	mvns	r3, r3
 80088c6:	69ba      	ldr	r2, [r7, #24]
 80088c8:	4013      	ands	r3, r2
 80088ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80088cc:	683b      	ldr	r3, [r7, #0]
 80088ce:	689a      	ldr	r2, [r3, #8]
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	005b      	lsls	r3, r3, #1
 80088d4:	fa02 f303 	lsl.w	r3, r2, r3
 80088d8:	69ba      	ldr	r2, [r7, #24]
 80088da:	4313      	orrs	r3, r2
 80088dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	685b      	ldr	r3, [r3, #4]
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d003      	beq.n	80088f4 <HAL_GPIO_Init+0x100>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	2b12      	cmp	r3, #18
 80088f2:	d123      	bne.n	800893c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80088f4:	69fb      	ldr	r3, [r7, #28]
 80088f6:	08da      	lsrs	r2, r3, #3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	3208      	adds	r2, #8
 80088fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	f003 0307 	and.w	r3, r3, #7
 8008908:	009b      	lsls	r3, r3, #2
 800890a:	220f      	movs	r2, #15
 800890c:	fa02 f303 	lsl.w	r3, r2, r3
 8008910:	43db      	mvns	r3, r3
 8008912:	69ba      	ldr	r2, [r7, #24]
 8008914:	4013      	ands	r3, r2
 8008916:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	691a      	ldr	r2, [r3, #16]
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f003 0307 	and.w	r3, r3, #7
 8008922:	009b      	lsls	r3, r3, #2
 8008924:	fa02 f303 	lsl.w	r3, r2, r3
 8008928:	69ba      	ldr	r2, [r7, #24]
 800892a:	4313      	orrs	r3, r2
 800892c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800892e:	69fb      	ldr	r3, [r7, #28]
 8008930:	08da      	lsrs	r2, r3, #3
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	3208      	adds	r2, #8
 8008936:	69b9      	ldr	r1, [r7, #24]
 8008938:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	005b      	lsls	r3, r3, #1
 8008946:	2203      	movs	r2, #3
 8008948:	fa02 f303 	lsl.w	r3, r2, r3
 800894c:	43db      	mvns	r3, r3
 800894e:	69ba      	ldr	r2, [r7, #24]
 8008950:	4013      	ands	r3, r2
 8008952:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	f003 0203 	and.w	r2, r3, #3
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	005b      	lsls	r3, r3, #1
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	4313      	orrs	r3, r2
 8008968:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	69ba      	ldr	r2, [r7, #24]
 800896e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008978:	2b00      	cmp	r3, #0
 800897a:	f000 80be 	beq.w	8008afa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800897e:	4b65      	ldr	r3, [pc, #404]	; (8008b14 <HAL_GPIO_Init+0x320>)
 8008980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008982:	4a64      	ldr	r2, [pc, #400]	; (8008b14 <HAL_GPIO_Init+0x320>)
 8008984:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008988:	6453      	str	r3, [r2, #68]	; 0x44
 800898a:	4b62      	ldr	r3, [pc, #392]	; (8008b14 <HAL_GPIO_Init+0x320>)
 800898c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800898e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008992:	60fb      	str	r3, [r7, #12]
 8008994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008996:	4a60      	ldr	r2, [pc, #384]	; (8008b18 <HAL_GPIO_Init+0x324>)
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	089b      	lsrs	r3, r3, #2
 800899c:	3302      	adds	r3, #2
 800899e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	f003 0303 	and.w	r3, r3, #3
 80089aa:	009b      	lsls	r3, r3, #2
 80089ac:	220f      	movs	r2, #15
 80089ae:	fa02 f303 	lsl.w	r3, r2, r3
 80089b2:	43db      	mvns	r3, r3
 80089b4:	69ba      	ldr	r2, [r7, #24]
 80089b6:	4013      	ands	r3, r2
 80089b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a57      	ldr	r2, [pc, #348]	; (8008b1c <HAL_GPIO_Init+0x328>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d037      	beq.n	8008a32 <HAL_GPIO_Init+0x23e>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a56      	ldr	r2, [pc, #344]	; (8008b20 <HAL_GPIO_Init+0x32c>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d031      	beq.n	8008a2e <HAL_GPIO_Init+0x23a>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a55      	ldr	r2, [pc, #340]	; (8008b24 <HAL_GPIO_Init+0x330>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d02b      	beq.n	8008a2a <HAL_GPIO_Init+0x236>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4a54      	ldr	r2, [pc, #336]	; (8008b28 <HAL_GPIO_Init+0x334>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d025      	beq.n	8008a26 <HAL_GPIO_Init+0x232>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a53      	ldr	r2, [pc, #332]	; (8008b2c <HAL_GPIO_Init+0x338>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d01f      	beq.n	8008a22 <HAL_GPIO_Init+0x22e>
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	4a52      	ldr	r2, [pc, #328]	; (8008b30 <HAL_GPIO_Init+0x33c>)
 80089e6:	4293      	cmp	r3, r2
 80089e8:	d019      	beq.n	8008a1e <HAL_GPIO_Init+0x22a>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	4a51      	ldr	r2, [pc, #324]	; (8008b34 <HAL_GPIO_Init+0x340>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d013      	beq.n	8008a1a <HAL_GPIO_Init+0x226>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4a50      	ldr	r2, [pc, #320]	; (8008b38 <HAL_GPIO_Init+0x344>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d00d      	beq.n	8008a16 <HAL_GPIO_Init+0x222>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	4a4f      	ldr	r2, [pc, #316]	; (8008b3c <HAL_GPIO_Init+0x348>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d007      	beq.n	8008a12 <HAL_GPIO_Init+0x21e>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	4a4e      	ldr	r2, [pc, #312]	; (8008b40 <HAL_GPIO_Init+0x34c>)
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d101      	bne.n	8008a0e <HAL_GPIO_Init+0x21a>
 8008a0a:	2309      	movs	r3, #9
 8008a0c:	e012      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a0e:	230a      	movs	r3, #10
 8008a10:	e010      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a12:	2308      	movs	r3, #8
 8008a14:	e00e      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a16:	2307      	movs	r3, #7
 8008a18:	e00c      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a1a:	2306      	movs	r3, #6
 8008a1c:	e00a      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a1e:	2305      	movs	r3, #5
 8008a20:	e008      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a22:	2304      	movs	r3, #4
 8008a24:	e006      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a26:	2303      	movs	r3, #3
 8008a28:	e004      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a2a:	2302      	movs	r3, #2
 8008a2c:	e002      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <HAL_GPIO_Init+0x240>
 8008a32:	2300      	movs	r3, #0
 8008a34:	69fa      	ldr	r2, [r7, #28]
 8008a36:	f002 0203 	and.w	r2, r2, #3
 8008a3a:	0092      	lsls	r2, r2, #2
 8008a3c:	4093      	lsls	r3, r2
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008a44:	4934      	ldr	r1, [pc, #208]	; (8008b18 <HAL_GPIO_Init+0x324>)
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	089b      	lsrs	r3, r3, #2
 8008a4a:	3302      	adds	r3, #2
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008a52:	4b3c      	ldr	r3, [pc, #240]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	43db      	mvns	r3, r3
 8008a5c:	69ba      	ldr	r2, [r7, #24]
 8008a5e:	4013      	ands	r3, r2
 8008a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008a76:	4a33      	ldr	r2, [pc, #204]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008a78:	69bb      	ldr	r3, [r7, #24]
 8008a7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008a7c:	4b31      	ldr	r3, [pc, #196]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008a7e:	685b      	ldr	r3, [r3, #4]
 8008a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	43db      	mvns	r3, r3
 8008a86:	69ba      	ldr	r2, [r7, #24]
 8008a88:	4013      	ands	r3, r2
 8008a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d003      	beq.n	8008aa0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008aa0:	4a28      	ldr	r2, [pc, #160]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008aa6:	4b27      	ldr	r3, [pc, #156]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008aac:	693b      	ldr	r3, [r7, #16]
 8008aae:	43db      	mvns	r3, r3
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	4013      	ands	r3, r2
 8008ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d003      	beq.n	8008aca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	4313      	orrs	r3, r2
 8008ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008aca:	4a1e      	ldr	r2, [pc, #120]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008ad0:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ad6:	693b      	ldr	r3, [r7, #16]
 8008ad8:	43db      	mvns	r3, r3
 8008ada:	69ba      	ldr	r2, [r7, #24]
 8008adc:	4013      	ands	r3, r2
 8008ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d003      	beq.n	8008af4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008af4:	4a13      	ldr	r2, [pc, #76]	; (8008b44 <HAL_GPIO_Init+0x350>)
 8008af6:	69bb      	ldr	r3, [r7, #24]
 8008af8:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008afa:	69fb      	ldr	r3, [r7, #28]
 8008afc:	3301      	adds	r3, #1
 8008afe:	61fb      	str	r3, [r7, #28]
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	2b0f      	cmp	r3, #15
 8008b04:	f67f ae86 	bls.w	8008814 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008b08:	bf00      	nop
 8008b0a:	3724      	adds	r7, #36	; 0x24
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr
 8008b14:	40023800 	.word	0x40023800
 8008b18:	40013800 	.word	0x40013800
 8008b1c:	40020000 	.word	0x40020000
 8008b20:	40020400 	.word	0x40020400
 8008b24:	40020800 	.word	0x40020800
 8008b28:	40020c00 	.word	0x40020c00
 8008b2c:	40021000 	.word	0x40021000
 8008b30:	40021400 	.word	0x40021400
 8008b34:	40021800 	.word	0x40021800
 8008b38:	40021c00 	.word	0x40021c00
 8008b3c:	40022000 	.word	0x40022000
 8008b40:	40022400 	.word	0x40022400
 8008b44:	40013c00 	.word	0x40013c00

08008b48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	460b      	mov	r3, r1
 8008b52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	887b      	ldrh	r3, [r7, #2]
 8008b5a:	4013      	ands	r3, r2
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d002      	beq.n	8008b66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008b60:	2301      	movs	r3, #1
 8008b62:	73fb      	strb	r3, [r7, #15]
 8008b64:	e001      	b.n	8008b6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3714      	adds	r7, #20
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr

08008b78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	b083      	sub	sp, #12
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	807b      	strh	r3, [r7, #2]
 8008b84:	4613      	mov	r3, r2
 8008b86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008b88:	787b      	ldrb	r3, [r7, #1]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d003      	beq.n	8008b96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008b8e:	887a      	ldrh	r2, [r7, #2]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008b94:	e003      	b.n	8008b9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008b96:	887b      	ldrh	r3, [r7, #2]
 8008b98:	041a      	lsls	r2, r3, #16
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	619a      	str	r2, [r3, #24]
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008baa:	b480      	push	{r7}
 8008bac:	b083      	sub	sp, #12
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	460b      	mov	r3, r1
 8008bb4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	695a      	ldr	r2, [r3, #20]
 8008bba:	887b      	ldrh	r3, [r7, #2]
 8008bbc:	4013      	ands	r3, r2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008bc2:	887b      	ldrh	r3, [r7, #2]
 8008bc4:	041a      	lsls	r2, r3, #16
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008bca:	e002      	b.n	8008bd2 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008bcc:	887a      	ldrh	r2, [r7, #2]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	619a      	str	r2, [r3, #24]
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008bde:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be0:	b08f      	sub	sp, #60	; 0x3c
 8008be2:	af0a      	add	r7, sp, #40	; 0x28
 8008be4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d101      	bne.n	8008bf0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008bec:	2301      	movs	r3, #1
 8008bee:	e116      	b.n	8008e1e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008bfc:	b2db      	uxtb	r3, r3
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d106      	bne.n	8008c10 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c0a:	6878      	ldr	r0, [r7, #4]
 8008c0c:	f011 f9a4 	bl	8019f58 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2203      	movs	r2, #3
 8008c14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f006 ff61 	bl	800faf6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	603b      	str	r3, [r7, #0]
 8008c3a:	687e      	ldr	r6, [r7, #4]
 8008c3c:	466d      	mov	r5, sp
 8008c3e:	f106 0410 	add.w	r4, r6, #16
 8008c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008c52:	1d33      	adds	r3, r6, #4
 8008c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008c56:	6838      	ldr	r0, [r7, #0]
 8008c58:	f006 fe42 	bl	800f8e0 <USB_CoreInit>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d005      	beq.n	8008c6e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2202      	movs	r2, #2
 8008c66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e0d7      	b.n	8008e1e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2100      	movs	r1, #0
 8008c74:	4618      	mov	r0, r3
 8008c76:	f006 ff4f 	bl	800fb18 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	73fb      	strb	r3, [r7, #15]
 8008c7e:	e04a      	b.n	8008d16 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008c80:	7bfa      	ldrb	r2, [r7, #15]
 8008c82:	6879      	ldr	r1, [r7, #4]
 8008c84:	4613      	mov	r3, r2
 8008c86:	00db      	lsls	r3, r3, #3
 8008c88:	1a9b      	subs	r3, r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	440b      	add	r3, r1
 8008c8e:	333d      	adds	r3, #61	; 0x3d
 8008c90:	2201      	movs	r2, #1
 8008c92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008c94:	7bfa      	ldrb	r2, [r7, #15]
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	00db      	lsls	r3, r3, #3
 8008c9c:	1a9b      	subs	r3, r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	333c      	adds	r3, #60	; 0x3c
 8008ca4:	7bfa      	ldrb	r2, [r7, #15]
 8008ca6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008ca8:	7bfa      	ldrb	r2, [r7, #15]
 8008caa:	7bfb      	ldrb	r3, [r7, #15]
 8008cac:	b298      	uxth	r0, r3
 8008cae:	6879      	ldr	r1, [r7, #4]
 8008cb0:	4613      	mov	r3, r2
 8008cb2:	00db      	lsls	r3, r3, #3
 8008cb4:	1a9b      	subs	r3, r3, r2
 8008cb6:	009b      	lsls	r3, r3, #2
 8008cb8:	440b      	add	r3, r1
 8008cba:	3342      	adds	r3, #66	; 0x42
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008cc0:	7bfa      	ldrb	r2, [r7, #15]
 8008cc2:	6879      	ldr	r1, [r7, #4]
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	333f      	adds	r3, #63	; 0x3f
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008cd4:	7bfa      	ldrb	r2, [r7, #15]
 8008cd6:	6879      	ldr	r1, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	00db      	lsls	r3, r3, #3
 8008cdc:	1a9b      	subs	r3, r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	3344      	adds	r3, #68	; 0x44
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008ce8:	7bfa      	ldrb	r2, [r7, #15]
 8008cea:	6879      	ldr	r1, [r7, #4]
 8008cec:	4613      	mov	r3, r2
 8008cee:	00db      	lsls	r3, r3, #3
 8008cf0:	1a9b      	subs	r3, r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	440b      	add	r3, r1
 8008cf6:	3348      	adds	r3, #72	; 0x48
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008cfc:	7bfa      	ldrb	r2, [r7, #15]
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4613      	mov	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	3350      	adds	r3, #80	; 0x50
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
 8008d12:	3301      	adds	r3, #1
 8008d14:	73fb      	strb	r3, [r7, #15]
 8008d16:	7bfa      	ldrb	r2, [r7, #15]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d3af      	bcc.n	8008c80 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d20:	2300      	movs	r3, #0
 8008d22:	73fb      	strb	r3, [r7, #15]
 8008d24:	e044      	b.n	8008db0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008d26:	7bfa      	ldrb	r2, [r7, #15]
 8008d28:	6879      	ldr	r1, [r7, #4]
 8008d2a:	4613      	mov	r3, r2
 8008d2c:	00db      	lsls	r3, r3, #3
 8008d2e:	1a9b      	subs	r3, r3, r2
 8008d30:	009b      	lsls	r3, r3, #2
 8008d32:	440b      	add	r3, r1
 8008d34:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008d3c:	7bfa      	ldrb	r2, [r7, #15]
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4613      	mov	r3, r2
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	440b      	add	r3, r1
 8008d4a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008d4e:	7bfa      	ldrb	r2, [r7, #15]
 8008d50:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008d52:	7bfa      	ldrb	r2, [r7, #15]
 8008d54:	6879      	ldr	r1, [r7, #4]
 8008d56:	4613      	mov	r3, r2
 8008d58:	00db      	lsls	r3, r3, #3
 8008d5a:	1a9b      	subs	r3, r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	440b      	add	r3, r1
 8008d60:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008d64:	2200      	movs	r2, #0
 8008d66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008d68:	7bfa      	ldrb	r2, [r7, #15]
 8008d6a:	6879      	ldr	r1, [r7, #4]
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	1a9b      	subs	r3, r3, r2
 8008d72:	009b      	lsls	r3, r3, #2
 8008d74:	440b      	add	r3, r1
 8008d76:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008d7e:	7bfa      	ldrb	r2, [r7, #15]
 8008d80:	6879      	ldr	r1, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	00db      	lsls	r3, r3, #3
 8008d86:	1a9b      	subs	r3, r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	440b      	add	r3, r1
 8008d8c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008d94:	7bfa      	ldrb	r2, [r7, #15]
 8008d96:	6879      	ldr	r1, [r7, #4]
 8008d98:	4613      	mov	r3, r2
 8008d9a:	00db      	lsls	r3, r3, #3
 8008d9c:	1a9b      	subs	r3, r3, r2
 8008d9e:	009b      	lsls	r3, r3, #2
 8008da0:	440b      	add	r3, r1
 8008da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008da6:	2200      	movs	r2, #0
 8008da8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008daa:	7bfb      	ldrb	r3, [r7, #15]
 8008dac:	3301      	adds	r3, #1
 8008dae:	73fb      	strb	r3, [r7, #15]
 8008db0:	7bfa      	ldrb	r2, [r7, #15]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	685b      	ldr	r3, [r3, #4]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d3b5      	bcc.n	8008d26 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	603b      	str	r3, [r7, #0]
 8008dc0:	687e      	ldr	r6, [r7, #4]
 8008dc2:	466d      	mov	r5, sp
 8008dc4:	f106 0410 	add.w	r4, r6, #16
 8008dc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dcc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008dce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008dd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008dd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8008dd8:	1d33      	adds	r3, r6, #4
 8008dda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ddc:	6838      	ldr	r0, [r7, #0]
 8008dde:	f006 fec5 	bl	800fb6c <USB_DevInit>
 8008de2:	4603      	mov	r3, r0
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d005      	beq.n	8008df4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008df0:	2301      	movs	r3, #1
 8008df2:	e014      	b.n	8008e1e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2200      	movs	r2, #0
 8008df8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e08:	2b01      	cmp	r3, #1
 8008e0a:	d102      	bne.n	8008e12 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f001 f881 	bl	8009f14 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f007 ff14 	bl	8010c44 <USB_DevDisconnect>

  return HAL_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3714      	adds	r7, #20
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008e26 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b082      	sub	sp, #8
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d101      	bne.n	8008e3c <HAL_PCD_Start+0x16>
 8008e38:	2302      	movs	r3, #2
 8008e3a:	e012      	b.n	8008e62 <HAL_PCD_Start+0x3c>
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f007 fee3 	bl	8010c14 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f006 fe3e 	bl	800fad4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3708      	adds	r7, #8
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008e6a:	b590      	push	{r4, r7, lr}
 8008e6c:	b08d      	sub	sp, #52	; 0x34
 8008e6e:	af00      	add	r7, sp, #0
 8008e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e78:	6a3b      	ldr	r3, [r7, #32]
 8008e7a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4618      	mov	r0, r3
 8008e82:	f007 ff8a 	bl	8010d9a <USB_GetMode>
 8008e86:	4603      	mov	r3, r0
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f040 83ca 	bne.w	8009622 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f007 feee 	bl	8010c74 <USB_ReadInterrupts>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 83c0 	beq.w	8009620 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f007 fee5 	bl	8010c74 <USB_ReadInterrupts>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f003 0302 	and.w	r3, r3, #2
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d107      	bne.n	8008ec4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	695a      	ldr	r2, [r3, #20]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f002 0202 	and.w	r2, r2, #2
 8008ec2:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f007 fed3 	bl	8010c74 <USB_ReadInterrupts>
 8008ece:	4603      	mov	r3, r0
 8008ed0:	f003 0310 	and.w	r3, r3, #16
 8008ed4:	2b10      	cmp	r3, #16
 8008ed6:	d161      	bne.n	8008f9c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	699a      	ldr	r2, [r3, #24]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	f022 0210 	bic.w	r2, r2, #16
 8008ee6:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008ee8:	6a3b      	ldr	r3, [r7, #32]
 8008eea:	6a1b      	ldr	r3, [r3, #32]
 8008eec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	f003 020f 	and.w	r2, r3, #15
 8008ef4:	4613      	mov	r3, r2
 8008ef6:	00db      	lsls	r3, r3, #3
 8008ef8:	1a9b      	subs	r3, r3, r2
 8008efa:	009b      	lsls	r3, r3, #2
 8008efc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	4413      	add	r3, r2
 8008f04:	3304      	adds	r3, #4
 8008f06:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f08:	69bb      	ldr	r3, [r7, #24]
 8008f0a:	0c5b      	lsrs	r3, r3, #17
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	d124      	bne.n	8008f5e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d035      	beq.n	8008f8c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	091b      	lsrs	r3, r3, #4
 8008f28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f2e:	b29b      	uxth	r3, r3
 8008f30:	461a      	mov	r2, r3
 8008f32:	6a38      	ldr	r0, [r7, #32]
 8008f34:	f007 fd4b 	bl	80109ce <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f38:	697b      	ldr	r3, [r7, #20]
 8008f3a:	68da      	ldr	r2, [r3, #12]
 8008f3c:	69bb      	ldr	r3, [r7, #24]
 8008f3e:	091b      	lsrs	r3, r3, #4
 8008f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f44:	441a      	add	r2, r3
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	699a      	ldr	r2, [r3, #24]
 8008f4e:	69bb      	ldr	r3, [r7, #24]
 8008f50:	091b      	lsrs	r3, r3, #4
 8008f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f56:	441a      	add	r2, r3
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	619a      	str	r2, [r3, #24]
 8008f5c:	e016      	b.n	8008f8c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	0c5b      	lsrs	r3, r3, #17
 8008f62:	f003 030f 	and.w	r3, r3, #15
 8008f66:	2b06      	cmp	r3, #6
 8008f68:	d110      	bne.n	8008f8c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f70:	2208      	movs	r2, #8
 8008f72:	4619      	mov	r1, r3
 8008f74:	6a38      	ldr	r0, [r7, #32]
 8008f76:	f007 fd2a 	bl	80109ce <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	699a      	ldr	r2, [r3, #24]
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	091b      	lsrs	r3, r3, #4
 8008f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008f86:	441a      	add	r2, r3
 8008f88:	697b      	ldr	r3, [r7, #20]
 8008f8a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699a      	ldr	r2, [r3, #24]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f042 0210 	orr.w	r2, r2, #16
 8008f9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f007 fe67 	bl	8010c74 <USB_ReadInterrupts>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008fac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008fb0:	d16e      	bne.n	8009090 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f007 fe6d 	bl	8010c9a <USB_ReadDevAllOutEpInterrupt>
 8008fc0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008fc2:	e062      	b.n	800908a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fc6:	f003 0301 	and.w	r3, r3, #1
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d057      	beq.n	800907e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fd4:	b2d2      	uxtb	r2, r2
 8008fd6:	4611      	mov	r1, r2
 8008fd8:	4618      	mov	r0, r3
 8008fda:	f007 fe92 	bl	8010d02 <USB_ReadDevOutEPInterrupt>
 8008fde:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	f003 0301 	and.w	r3, r3, #1
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00c      	beq.n	8009004 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	015a      	lsls	r2, r3, #5
 8008fee:	69fb      	ldr	r3, [r7, #28]
 8008ff0:	4413      	add	r3, r2
 8008ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff6:	461a      	mov	r2, r3
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008ffc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f000 fdde 	bl	8009bc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	f003 0308 	and.w	r3, r3, #8
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00c      	beq.n	8009028 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800900e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	4413      	add	r3, r2
 8009016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800901a:	461a      	mov	r2, r3
 800901c:	2308      	movs	r3, #8
 800901e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8009020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fed8 	bl	8009dd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009028:	693b      	ldr	r3, [r7, #16]
 800902a:	f003 0310 	and.w	r3, r3, #16
 800902e:	2b00      	cmp	r3, #0
 8009030:	d008      	beq.n	8009044 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8009032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009034:	015a      	lsls	r2, r3, #5
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	4413      	add	r3, r2
 800903a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800903e:	461a      	mov	r2, r3
 8009040:	2310      	movs	r3, #16
 8009042:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	f003 0320 	and.w	r3, r3, #32
 800904a:	2b00      	cmp	r3, #0
 800904c:	d008      	beq.n	8009060 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009050:	015a      	lsls	r2, r3, #5
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	4413      	add	r3, r2
 8009056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800905a:	461a      	mov	r2, r3
 800905c:	2320      	movs	r3, #32
 800905e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009066:	2b00      	cmp	r3, #0
 8009068:	d009      	beq.n	800907e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800906a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800906c:	015a      	lsls	r2, r3, #5
 800906e:	69fb      	ldr	r3, [r7, #28]
 8009070:	4413      	add	r3, r2
 8009072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009076:	461a      	mov	r2, r3
 8009078:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800907c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800907e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009080:	3301      	adds	r3, #1
 8009082:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009086:	085b      	lsrs	r3, r3, #1
 8009088:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800908a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908c:	2b00      	cmp	r3, #0
 800908e:	d199      	bne.n	8008fc4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	f007 fded 	bl	8010c74 <USB_ReadInterrupts>
 800909a:	4603      	mov	r3, r0
 800909c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80090a0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80090a4:	f040 80c0 	bne.w	8009228 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4618      	mov	r0, r3
 80090ae:	f007 fe0e 	bl	8010cce <USB_ReadDevAllInEpInterrupt>
 80090b2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80090b4:	2300      	movs	r3, #0
 80090b6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80090b8:	e0b2      	b.n	8009220 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80090ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090bc:	f003 0301 	and.w	r3, r3, #1
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f000 80a7 	beq.w	8009214 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	4611      	mov	r1, r2
 80090d0:	4618      	mov	r0, r3
 80090d2:	f007 fe34 	bl	8010d3e <USB_ReadDevInEPInterrupt>
 80090d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d057      	beq.n	8009192 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80090e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e4:	f003 030f 	and.w	r3, r3, #15
 80090e8:	2201      	movs	r2, #1
 80090ea:	fa02 f303 	lsl.w	r3, r2, r3
 80090ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090f0:	69fb      	ldr	r3, [r7, #28]
 80090f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	43db      	mvns	r3, r3
 80090fc:	69f9      	ldr	r1, [r7, #28]
 80090fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009102:	4013      	ands	r3, r2
 8009104:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009112:	461a      	mov	r2, r3
 8009114:	2301      	movs	r3, #1
 8009116:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	691b      	ldr	r3, [r3, #16]
 800911c:	2b01      	cmp	r3, #1
 800911e:	d132      	bne.n	8009186 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8009120:	6879      	ldr	r1, [r7, #4]
 8009122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009124:	4613      	mov	r3, r2
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	1a9b      	subs	r3, r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	3348      	adds	r3, #72	; 0x48
 8009130:	6819      	ldr	r1, [r3, #0]
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009136:	4613      	mov	r3, r2
 8009138:	00db      	lsls	r3, r3, #3
 800913a:	1a9b      	subs	r3, r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4403      	add	r3, r0
 8009140:	3344      	adds	r3, #68	; 0x44
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	4419      	add	r1, r3
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800914a:	4613      	mov	r3, r2
 800914c:	00db      	lsls	r3, r3, #3
 800914e:	1a9b      	subs	r3, r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4403      	add	r3, r0
 8009154:	3348      	adds	r3, #72	; 0x48
 8009156:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800915a:	2b00      	cmp	r3, #0
 800915c:	d113      	bne.n	8009186 <HAL_PCD_IRQHandler+0x31c>
 800915e:	6879      	ldr	r1, [r7, #4]
 8009160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009162:	4613      	mov	r3, r2
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	1a9b      	subs	r3, r3, r2
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	440b      	add	r3, r1
 800916c:	3350      	adds	r3, #80	; 0x50
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	2b00      	cmp	r3, #0
 8009172:	d108      	bne.n	8009186 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6818      	ldr	r0, [r3, #0]
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800917e:	461a      	mov	r2, r3
 8009180:	2101      	movs	r1, #1
 8009182:	f007 fe3d 	bl	8010e00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009188:	b2db      	uxtb	r3, r3
 800918a:	4619      	mov	r1, r3
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f010 ff66 	bl	801a05e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f003 0308 	and.w	r3, r3, #8
 8009198:	2b00      	cmp	r3, #0
 800919a:	d008      	beq.n	80091ae <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800919c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091a8:	461a      	mov	r2, r3
 80091aa:	2308      	movs	r3, #8
 80091ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	f003 0310 	and.w	r3, r3, #16
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d008      	beq.n	80091ca <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80091b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091c4:	461a      	mov	r2, r3
 80091c6:	2310      	movs	r3, #16
 80091c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d008      	beq.n	80091e6 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	015a      	lsls	r2, r3, #5
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	4413      	add	r3, r2
 80091dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091e0:	461a      	mov	r2, r3
 80091e2:	2340      	movs	r3, #64	; 0x40
 80091e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	f003 0302 	and.w	r3, r3, #2
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d008      	beq.n	8009202 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	015a      	lsls	r2, r3, #5
 80091f4:	69fb      	ldr	r3, [r7, #28]
 80091f6:	4413      	add	r3, r2
 80091f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80091fc:	461a      	mov	r2, r3
 80091fe:	2302      	movs	r3, #2
 8009200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8009202:	693b      	ldr	r3, [r7, #16]
 8009204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009208:	2b00      	cmp	r3, #0
 800920a:	d003      	beq.n	8009214 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800920c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 fc48 	bl	8009aa4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009216:	3301      	adds	r3, #1
 8009218:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800921a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800921c:	085b      	lsrs	r3, r3, #1
 800921e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009222:	2b00      	cmp	r3, #0
 8009224:	f47f af49 	bne.w	80090ba <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4618      	mov	r0, r3
 800922e:	f007 fd21 	bl	8010c74 <USB_ReadInterrupts>
 8009232:	4603      	mov	r3, r0
 8009234:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009238:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800923c:	d122      	bne.n	8009284 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800923e:	69fb      	ldr	r3, [r7, #28]
 8009240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009244:	685b      	ldr	r3, [r3, #4]
 8009246:	69fa      	ldr	r2, [r7, #28]
 8009248:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800924c:	f023 0301 	bic.w	r3, r3, #1
 8009250:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009258:	2b01      	cmp	r3, #1
 800925a:	d108      	bne.n	800926e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009264:	2100      	movs	r1, #0
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f011 f948 	bl	801a4fc <HAL_PCDEx_LPM_Callback>
 800926c:	e002      	b.n	8009274 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f010 ff6c 	bl	801a14c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	695a      	ldr	r2, [r3, #20]
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4618      	mov	r0, r3
 800928a:	f007 fcf3 	bl	8010c74 <USB_ReadInterrupts>
 800928e:	4603      	mov	r3, r0
 8009290:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009294:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009298:	d112      	bne.n	80092c0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800929a:	69fb      	ldr	r3, [r7, #28]
 800929c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092a0:	689b      	ldr	r3, [r3, #8]
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d102      	bne.n	80092b0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f010 ff28 	bl	801a100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	695a      	ldr	r2, [r3, #20]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80092be:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4618      	mov	r0, r3
 80092c6:	f007 fcd5 	bl	8010c74 <USB_ReadInterrupts>
 80092ca:	4603      	mov	r3, r0
 80092cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092d4:	d121      	bne.n	800931a <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	695a      	ldr	r2, [r3, #20]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80092e4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d111      	bne.n	8009314 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2201      	movs	r2, #1
 80092f4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80092fe:	089b      	lsrs	r3, r3, #2
 8009300:	f003 020f 	and.w	r2, r3, #15
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800930a:	2101      	movs	r1, #1
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f011 f8f5 	bl	801a4fc <HAL_PCDEx_LPM_Callback>
 8009312:	e002      	b.n	800931a <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009314:	6878      	ldr	r0, [r7, #4]
 8009316:	f010 fef3 	bl	801a100 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4618      	mov	r0, r3
 8009320:	f007 fca8 	bl	8010c74 <USB_ReadInterrupts>
 8009324:	4603      	mov	r3, r0
 8009326:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800932a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800932e:	f040 80c7 	bne.w	80094c0 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8009332:	69fb      	ldr	r3, [r7, #28]
 8009334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009338:	685b      	ldr	r3, [r3, #4]
 800933a:	69fa      	ldr	r2, [r7, #28]
 800933c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009340:	f023 0301 	bic.w	r3, r3, #1
 8009344:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2110      	movs	r1, #16
 800934c:	4618      	mov	r0, r3
 800934e:	f006 fd7b 	bl	800fe48 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009352:	2300      	movs	r3, #0
 8009354:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009356:	e056      	b.n	8009406 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	4413      	add	r3, r2
 8009360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009364:	461a      	mov	r2, r3
 8009366:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800936a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	015a      	lsls	r2, r3, #5
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	4413      	add	r3, r2
 8009374:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800937c:	0151      	lsls	r1, r2, #5
 800937e:	69fa      	ldr	r2, [r7, #28]
 8009380:	440a      	add	r2, r1
 8009382:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009386:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800938a:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	69fb      	ldr	r3, [r7, #28]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800939c:	0151      	lsls	r1, r2, #5
 800939e:	69fa      	ldr	r2, [r7, #28]
 80093a0:	440a      	add	r2, r1
 80093a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093aa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80093ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	69fb      	ldr	r3, [r7, #28]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b8:	461a      	mov	r2, r3
 80093ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093be:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80093c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093c2:	015a      	lsls	r2, r3, #5
 80093c4:	69fb      	ldr	r3, [r7, #28]
 80093c6:	4413      	add	r3, r2
 80093c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093d0:	0151      	lsls	r1, r2, #5
 80093d2:	69fa      	ldr	r2, [r7, #28]
 80093d4:	440a      	add	r2, r1
 80093d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80093de:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f0:	0151      	lsls	r1, r2, #5
 80093f2:	69fa      	ldr	r2, [r7, #28]
 80093f4:	440a      	add	r2, r1
 80093f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093fe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009402:	3301      	adds	r3, #1
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800940c:	429a      	cmp	r2, r3
 800940e:	d3a3      	bcc.n	8009358 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8009410:	69fb      	ldr	r3, [r7, #28]
 8009412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009416:	69db      	ldr	r3, [r3, #28]
 8009418:	69fa      	ldr	r2, [r7, #28]
 800941a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800941e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8009422:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009428:	2b00      	cmp	r3, #0
 800942a:	d016      	beq.n	800945a <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009436:	69fa      	ldr	r2, [r7, #28]
 8009438:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800943c:	f043 030b 	orr.w	r3, r3, #11
 8009440:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009444:	69fb      	ldr	r3, [r7, #28]
 8009446:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800944a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944c:	69fa      	ldr	r2, [r7, #28]
 800944e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009452:	f043 030b 	orr.w	r3, r3, #11
 8009456:	6453      	str	r3, [r2, #68]	; 0x44
 8009458:	e015      	b.n	8009486 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009460:	695a      	ldr	r2, [r3, #20]
 8009462:	69fb      	ldr	r3, [r7, #28]
 8009464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009468:	4619      	mov	r1, r3
 800946a:	f242 032b 	movw	r3, #8235	; 0x202b
 800946e:	4313      	orrs	r3, r2
 8009470:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8009472:	69fb      	ldr	r3, [r7, #28]
 8009474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009478:	691b      	ldr	r3, [r3, #16]
 800947a:	69fa      	ldr	r2, [r7, #28]
 800947c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009480:	f043 030b 	orr.w	r3, r3, #11
 8009484:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009486:	69fb      	ldr	r3, [r7, #28]
 8009488:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69fa      	ldr	r2, [r7, #28]
 8009490:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009494:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009498:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80094aa:	461a      	mov	r2, r3
 80094ac:	f007 fca8 	bl	8010e00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	695a      	ldr	r2, [r3, #20]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80094be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4618      	mov	r0, r3
 80094c6:	f007 fbd5 	bl	8010c74 <USB_ReadInterrupts>
 80094ca:	4603      	mov	r3, r0
 80094cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80094d4:	d124      	bne.n	8009520 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	4618      	mov	r0, r3
 80094dc:	f007 fc6c 	bl	8010db8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4618      	mov	r0, r3
 80094e6:	f006 fd10 	bl	800ff0a <USB_GetDevSpeed>
 80094ea:	4603      	mov	r3, r0
 80094ec:	461a      	mov	r2, r3
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681c      	ldr	r4, [r3, #0]
 80094f6:	f001 f999 	bl	800a82c <HAL_RCC_GetHCLKFreq>
 80094fa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009500:	b2db      	uxtb	r3, r3
 8009502:	461a      	mov	r2, r3
 8009504:	4620      	mov	r0, r4
 8009506:	f006 fa43 	bl	800f990 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f010 fdcf 	bl	801a0ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	695a      	ldr	r2, [r3, #20]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800951e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	4618      	mov	r0, r3
 8009526:	f007 fba5 	bl	8010c74 <USB_ReadInterrupts>
 800952a:	4603      	mov	r3, r0
 800952c:	f003 0308 	and.w	r3, r3, #8
 8009530:	2b08      	cmp	r3, #8
 8009532:	d10a      	bne.n	800954a <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f010 fdac 	bl	801a092 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	695a      	ldr	r2, [r3, #20]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	f002 0208 	and.w	r2, r2, #8
 8009548:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4618      	mov	r0, r3
 8009550:	f007 fb90 	bl	8010c74 <USB_ReadInterrupts>
 8009554:	4603      	mov	r3, r0
 8009556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800955a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800955e:	d10f      	bne.n	8009580 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009560:	2300      	movs	r3, #0
 8009562:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009566:	b2db      	uxtb	r3, r3
 8009568:	4619      	mov	r1, r3
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	f010 fe0e 	bl	801a18c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695a      	ldr	r2, [r3, #20]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800957e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4618      	mov	r0, r3
 8009586:	f007 fb75 	bl	8010c74 <USB_ReadInterrupts>
 800958a:	4603      	mov	r3, r0
 800958c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009590:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009594:	d10f      	bne.n	80095b6 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800959a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800959c:	b2db      	uxtb	r3, r3
 800959e:	4619      	mov	r1, r3
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f010 fde1 	bl	801a168 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	695a      	ldr	r2, [r3, #20]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80095b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4618      	mov	r0, r3
 80095bc:	f007 fb5a 	bl	8010c74 <USB_ReadInterrupts>
 80095c0:	4603      	mov	r3, r0
 80095c2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80095c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095ca:	d10a      	bne.n	80095e2 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f010 fdef 	bl	801a1b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	695a      	ldr	r2, [r3, #20]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80095e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	4618      	mov	r0, r3
 80095e8:	f007 fb44 	bl	8010c74 <USB_ReadInterrupts>
 80095ec:	4603      	mov	r3, r0
 80095ee:	f003 0304 	and.w	r3, r3, #4
 80095f2:	2b04      	cmp	r3, #4
 80095f4:	d115      	bne.n	8009622 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	685b      	ldr	r3, [r3, #4]
 80095fc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	f003 0304 	and.w	r3, r3, #4
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f010 fddf 	bl	801a1cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	6859      	ldr	r1, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	430a      	orrs	r2, r1
 800961c:	605a      	str	r2, [r3, #4]
 800961e:	e000      	b.n	8009622 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8009620:	bf00      	nop
    }
  }
}
 8009622:	3734      	adds	r7, #52	; 0x34
 8009624:	46bd      	mov	sp, r7
 8009626:	bd90      	pop	{r4, r7, pc}

08009628 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b082      	sub	sp, #8
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800963a:	2b01      	cmp	r3, #1
 800963c:	d101      	bne.n	8009642 <HAL_PCD_SetAddress+0x1a>
 800963e:	2302      	movs	r3, #2
 8009640:	e013      	b.n	800966a <HAL_PCD_SetAddress+0x42>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2201      	movs	r2, #1
 8009646:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	78fa      	ldrb	r2, [r7, #3]
 800964e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f007 fab4 	bl	8010bc8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009668:	2300      	movs	r3, #0
}
 800966a:	4618      	mov	r0, r3
 800966c:	3708      	adds	r7, #8
 800966e:	46bd      	mov	sp, r7
 8009670:	bd80      	pop	{r7, pc}

08009672 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
 800967a:	4608      	mov	r0, r1
 800967c:	4611      	mov	r1, r2
 800967e:	461a      	mov	r2, r3
 8009680:	4603      	mov	r3, r0
 8009682:	70fb      	strb	r3, [r7, #3]
 8009684:	460b      	mov	r3, r1
 8009686:	803b      	strh	r3, [r7, #0]
 8009688:	4613      	mov	r3, r2
 800968a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800968c:	2300      	movs	r3, #0
 800968e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009690:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009694:	2b00      	cmp	r3, #0
 8009696:	da0f      	bge.n	80096b8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009698:	78fb      	ldrb	r3, [r7, #3]
 800969a:	f003 020f 	and.w	r2, r3, #15
 800969e:	4613      	mov	r3, r2
 80096a0:	00db      	lsls	r3, r3, #3
 80096a2:	1a9b      	subs	r3, r3, r2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	3338      	adds	r3, #56	; 0x38
 80096a8:	687a      	ldr	r2, [r7, #4]
 80096aa:	4413      	add	r3, r2
 80096ac:	3304      	adds	r3, #4
 80096ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2201      	movs	r2, #1
 80096b4:	705a      	strb	r2, [r3, #1]
 80096b6:	e00f      	b.n	80096d8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80096b8:	78fb      	ldrb	r3, [r7, #3]
 80096ba:	f003 020f 	and.w	r2, r3, #15
 80096be:	4613      	mov	r3, r2
 80096c0:	00db      	lsls	r3, r3, #3
 80096c2:	1a9b      	subs	r3, r3, r2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096ca:	687a      	ldr	r2, [r7, #4]
 80096cc:	4413      	add	r3, r2
 80096ce:	3304      	adds	r3, #4
 80096d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	f003 030f 	and.w	r3, r3, #15
 80096de:	b2da      	uxtb	r2, r3
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80096e4:	883a      	ldrh	r2, [r7, #0]
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	78ba      	ldrb	r2, [r7, #2]
 80096ee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	785b      	ldrb	r3, [r3, #1]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d004      	beq.n	8009702 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	781b      	ldrb	r3, [r3, #0]
 80096fc:	b29a      	uxth	r2, r3
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009702:	78bb      	ldrb	r3, [r7, #2]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d102      	bne.n	800970e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2200      	movs	r2, #0
 800970c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009714:	2b01      	cmp	r3, #1
 8009716:	d101      	bne.n	800971c <HAL_PCD_EP_Open+0xaa>
 8009718:	2302      	movs	r3, #2
 800971a:	e00e      	b.n	800973a <HAL_PCD_EP_Open+0xc8>
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2201      	movs	r2, #1
 8009720:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	68f9      	ldr	r1, [r7, #12]
 800972a:	4618      	mov	r0, r3
 800972c:	f006 fc12 	bl	800ff54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009738:	7afb      	ldrb	r3, [r7, #11]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3710      	adds	r7, #16
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b084      	sub	sp, #16
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	460b      	mov	r3, r1
 800974c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800974e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009752:	2b00      	cmp	r3, #0
 8009754:	da0f      	bge.n	8009776 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009756:	78fb      	ldrb	r3, [r7, #3]
 8009758:	f003 020f 	and.w	r2, r3, #15
 800975c:	4613      	mov	r3, r2
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	1a9b      	subs	r3, r3, r2
 8009762:	009b      	lsls	r3, r3, #2
 8009764:	3338      	adds	r3, #56	; 0x38
 8009766:	687a      	ldr	r2, [r7, #4]
 8009768:	4413      	add	r3, r2
 800976a:	3304      	adds	r3, #4
 800976c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2201      	movs	r2, #1
 8009772:	705a      	strb	r2, [r3, #1]
 8009774:	e00f      	b.n	8009796 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009776:	78fb      	ldrb	r3, [r7, #3]
 8009778:	f003 020f 	and.w	r2, r3, #15
 800977c:	4613      	mov	r3, r2
 800977e:	00db      	lsls	r3, r3, #3
 8009780:	1a9b      	subs	r3, r3, r2
 8009782:	009b      	lsls	r3, r3, #2
 8009784:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009788:	687a      	ldr	r2, [r7, #4]
 800978a:	4413      	add	r3, r2
 800978c:	3304      	adds	r3, #4
 800978e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2200      	movs	r2, #0
 8009794:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009796:	78fb      	ldrb	r3, [r7, #3]
 8009798:	f003 030f 	and.w	r3, r3, #15
 800979c:	b2da      	uxtb	r2, r3
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097a8:	2b01      	cmp	r3, #1
 80097aa:	d101      	bne.n	80097b0 <HAL_PCD_EP_Close+0x6e>
 80097ac:	2302      	movs	r3, #2
 80097ae:	e00e      	b.n	80097ce <HAL_PCD_EP_Close+0x8c>
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	2201      	movs	r2, #1
 80097b4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68f9      	ldr	r1, [r7, #12]
 80097be:	4618      	mov	r0, r3
 80097c0:	f006 fc50 	bl	8010064 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b086      	sub	sp, #24
 80097da:	af00      	add	r7, sp, #0
 80097dc:	60f8      	str	r0, [r7, #12]
 80097de:	607a      	str	r2, [r7, #4]
 80097e0:	603b      	str	r3, [r7, #0]
 80097e2:	460b      	mov	r3, r1
 80097e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097e6:	7afb      	ldrb	r3, [r7, #11]
 80097e8:	f003 020f 	and.w	r2, r3, #15
 80097ec:	4613      	mov	r3, r2
 80097ee:	00db      	lsls	r3, r3, #3
 80097f0:	1a9b      	subs	r3, r3, r2
 80097f2:	009b      	lsls	r3, r3, #2
 80097f4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097f8:	68fa      	ldr	r2, [r7, #12]
 80097fa:	4413      	add	r3, r2
 80097fc:	3304      	adds	r3, #4
 80097fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	687a      	ldr	r2, [r7, #4]
 8009804:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	683a      	ldr	r2, [r7, #0]
 800980a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	2200      	movs	r2, #0
 8009810:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009812:	697b      	ldr	r3, [r7, #20]
 8009814:	2200      	movs	r2, #0
 8009816:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009818:	7afb      	ldrb	r3, [r7, #11]
 800981a:	f003 030f 	and.w	r3, r3, #15
 800981e:	b2da      	uxtb	r2, r3
 8009820:	697b      	ldr	r3, [r7, #20]
 8009822:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	691b      	ldr	r3, [r3, #16]
 8009828:	2b01      	cmp	r3, #1
 800982a:	d102      	bne.n	8009832 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	f003 030f 	and.w	r3, r3, #15
 8009838:	2b00      	cmp	r3, #0
 800983a:	d109      	bne.n	8009850 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6818      	ldr	r0, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	b2db      	uxtb	r3, r3
 8009846:	461a      	mov	r2, r3
 8009848:	6979      	ldr	r1, [r7, #20]
 800984a:	f006 ff33 	bl	80106b4 <USB_EP0StartXfer>
 800984e:	e008      	b.n	8009862 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	6818      	ldr	r0, [r3, #0]
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	b2db      	uxtb	r3, r3
 800985a:	461a      	mov	r2, r3
 800985c:	6979      	ldr	r1, [r7, #20]
 800985e:	f006 fcdd 	bl	801021c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009862:	2300      	movs	r3, #0
}
 8009864:	4618      	mov	r0, r3
 8009866:	3718      	adds	r7, #24
 8009868:	46bd      	mov	sp, r7
 800986a:	bd80      	pop	{r7, pc}

0800986c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	460b      	mov	r3, r1
 8009876:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009878:	78fb      	ldrb	r3, [r7, #3]
 800987a:	f003 020f 	and.w	r2, r3, #15
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	440b      	add	r3, r1
 800988a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800988e:	681b      	ldr	r3, [r3, #0]
}
 8009890:	4618      	mov	r0, r3
 8009892:	370c      	adds	r7, #12
 8009894:	46bd      	mov	sp, r7
 8009896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989a:	4770      	bx	lr

0800989c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b086      	sub	sp, #24
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	607a      	str	r2, [r7, #4]
 80098a6:	603b      	str	r3, [r7, #0]
 80098a8:	460b      	mov	r3, r1
 80098aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098ac:	7afb      	ldrb	r3, [r7, #11]
 80098ae:	f003 020f 	and.w	r2, r3, #15
 80098b2:	4613      	mov	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	1a9b      	subs	r3, r3, r2
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	3338      	adds	r3, #56	; 0x38
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	3304      	adds	r3, #4
 80098c2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	687a      	ldr	r2, [r7, #4]
 80098c8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80098ca:	697b      	ldr	r3, [r7, #20]
 80098cc:	683a      	ldr	r2, [r7, #0]
 80098ce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	2200      	movs	r2, #0
 80098d4:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80098d6:	697b      	ldr	r3, [r7, #20]
 80098d8:	2201      	movs	r2, #1
 80098da:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80098dc:	7afb      	ldrb	r3, [r7, #11]
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	b2da      	uxtb	r2, r3
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	691b      	ldr	r3, [r3, #16]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d102      	bne.n	80098f6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80098f0:	687a      	ldr	r2, [r7, #4]
 80098f2:	697b      	ldr	r3, [r7, #20]
 80098f4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80098f6:	7afb      	ldrb	r3, [r7, #11]
 80098f8:	f003 030f 	and.w	r3, r3, #15
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d109      	bne.n	8009914 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6818      	ldr	r0, [r3, #0]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	691b      	ldr	r3, [r3, #16]
 8009908:	b2db      	uxtb	r3, r3
 800990a:	461a      	mov	r2, r3
 800990c:	6979      	ldr	r1, [r7, #20]
 800990e:	f006 fed1 	bl	80106b4 <USB_EP0StartXfer>
 8009912:	e008      	b.n	8009926 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	6818      	ldr	r0, [r3, #0]
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	691b      	ldr	r3, [r3, #16]
 800991c:	b2db      	uxtb	r3, r3
 800991e:	461a      	mov	r2, r3
 8009920:	6979      	ldr	r1, [r7, #20]
 8009922:	f006 fc7b 	bl	801021c <USB_EPStartXfer>
  }

  return HAL_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3718      	adds	r7, #24
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	460b      	mov	r3, r1
 800993a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800993c:	78fb      	ldrb	r3, [r7, #3]
 800993e:	f003 020f 	and.w	r2, r3, #15
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	429a      	cmp	r2, r3
 8009948:	d901      	bls.n	800994e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e050      	b.n	80099f0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800994e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009952:	2b00      	cmp	r3, #0
 8009954:	da0f      	bge.n	8009976 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009956:	78fb      	ldrb	r3, [r7, #3]
 8009958:	f003 020f 	and.w	r2, r3, #15
 800995c:	4613      	mov	r3, r2
 800995e:	00db      	lsls	r3, r3, #3
 8009960:	1a9b      	subs	r3, r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	3338      	adds	r3, #56	; 0x38
 8009966:	687a      	ldr	r2, [r7, #4]
 8009968:	4413      	add	r3, r2
 800996a:	3304      	adds	r3, #4
 800996c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	2201      	movs	r2, #1
 8009972:	705a      	strb	r2, [r3, #1]
 8009974:	e00d      	b.n	8009992 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009976:	78fa      	ldrb	r2, [r7, #3]
 8009978:	4613      	mov	r3, r2
 800997a:	00db      	lsls	r3, r3, #3
 800997c:	1a9b      	subs	r3, r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	4413      	add	r3, r2
 8009988:	3304      	adds	r3, #4
 800998a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2200      	movs	r2, #0
 8009990:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2201      	movs	r2, #1
 8009996:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009998:	78fb      	ldrb	r3, [r7, #3]
 800999a:	f003 030f 	and.w	r3, r3, #15
 800999e:	b2da      	uxtb	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d101      	bne.n	80099b2 <HAL_PCD_EP_SetStall+0x82>
 80099ae:	2302      	movs	r3, #2
 80099b0:	e01e      	b.n	80099f0 <HAL_PCD_EP_SetStall+0xc0>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	68f9      	ldr	r1, [r7, #12]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f007 f82d 	bl	8010a20 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80099c6:	78fb      	ldrb	r3, [r7, #3]
 80099c8:	f003 030f 	and.w	r3, r3, #15
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d10a      	bne.n	80099e6 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	6818      	ldr	r0, [r3, #0]
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	b2d9      	uxtb	r1, r3
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80099e0:	461a      	mov	r2, r3
 80099e2:	f007 fa0d 	bl	8010e00 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	2200      	movs	r2, #0
 80099ea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}

080099f8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b084      	sub	sp, #16
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]
 8009a00:	460b      	mov	r3, r1
 8009a02:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009a04:	78fb      	ldrb	r3, [r7, #3]
 8009a06:	f003 020f 	and.w	r2, r3, #15
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d901      	bls.n	8009a16 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009a12:	2301      	movs	r3, #1
 8009a14:	e042      	b.n	8009a9c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da0f      	bge.n	8009a3e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a1e:	78fb      	ldrb	r3, [r7, #3]
 8009a20:	f003 020f 	and.w	r2, r3, #15
 8009a24:	4613      	mov	r3, r2
 8009a26:	00db      	lsls	r3, r3, #3
 8009a28:	1a9b      	subs	r3, r3, r2
 8009a2a:	009b      	lsls	r3, r3, #2
 8009a2c:	3338      	adds	r3, #56	; 0x38
 8009a2e:	687a      	ldr	r2, [r7, #4]
 8009a30:	4413      	add	r3, r2
 8009a32:	3304      	adds	r3, #4
 8009a34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	2201      	movs	r2, #1
 8009a3a:	705a      	strb	r2, [r3, #1]
 8009a3c:	e00f      	b.n	8009a5e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009a3e:	78fb      	ldrb	r3, [r7, #3]
 8009a40:	f003 020f 	and.w	r2, r3, #15
 8009a44:	4613      	mov	r3, r2
 8009a46:	00db      	lsls	r3, r3, #3
 8009a48:	1a9b      	subs	r3, r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	4413      	add	r3, r2
 8009a54:	3304      	adds	r3, #4
 8009a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2200      	movs	r2, #0
 8009a62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a64:	78fb      	ldrb	r3, [r7, #3]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	b2da      	uxtb	r2, r3
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a76:	2b01      	cmp	r3, #1
 8009a78:	d101      	bne.n	8009a7e <HAL_PCD_EP_ClrStall+0x86>
 8009a7a:	2302      	movs	r3, #2
 8009a7c:	e00e      	b.n	8009a9c <HAL_PCD_EP_ClrStall+0xa4>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	2201      	movs	r2, #1
 8009a82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68f9      	ldr	r1, [r7, #12]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f007 f835 	bl	8010afc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}

08009aa4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b08a      	sub	sp, #40	; 0x28
 8009aa8:	af02      	add	r7, sp, #8
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009ab8:	683a      	ldr	r2, [r7, #0]
 8009aba:	4613      	mov	r3, r2
 8009abc:	00db      	lsls	r3, r3, #3
 8009abe:	1a9b      	subs	r3, r3, r2
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	3338      	adds	r3, #56	; 0x38
 8009ac4:	687a      	ldr	r2, [r7, #4]
 8009ac6:	4413      	add	r3, r2
 8009ac8:	3304      	adds	r3, #4
 8009aca:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	699a      	ldr	r2, [r3, #24]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	695b      	ldr	r3, [r3, #20]
 8009ad4:	429a      	cmp	r2, r3
 8009ad6:	d901      	bls.n	8009adc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e06c      	b.n	8009bb6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	695a      	ldr	r2, [r3, #20]
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	689b      	ldr	r3, [r3, #8]
 8009aec:	69fa      	ldr	r2, [r7, #28]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d902      	bls.n	8009af8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	689b      	ldr	r3, [r3, #8]
 8009af6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	3303      	adds	r3, #3
 8009afc:	089b      	lsrs	r3, r3, #2
 8009afe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b00:	e02b      	b.n	8009b5a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	695a      	ldr	r2, [r3, #20]
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	1ad3      	subs	r3, r2, r3
 8009b0c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d902      	bls.n	8009b1e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	3303      	adds	r3, #3
 8009b22:	089b      	lsrs	r3, r3, #2
 8009b24:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	68d9      	ldr	r1, [r3, #12]
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	b2da      	uxtb	r2, r3
 8009b2e:	69fb      	ldr	r3, [r7, #28]
 8009b30:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	4603      	mov	r3, r0
 8009b3c:	6978      	ldr	r0, [r7, #20]
 8009b3e:	f006 ff11 	bl	8010964 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	68da      	ldr	r2, [r3, #12]
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	441a      	add	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	699a      	ldr	r2, [r3, #24]
 8009b52:	69fb      	ldr	r3, [r7, #28]
 8009b54:	441a      	add	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	015a      	lsls	r2, r3, #5
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	4413      	add	r3, r2
 8009b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b66:	699b      	ldr	r3, [r3, #24]
 8009b68:	b29b      	uxth	r3, r3
 8009b6a:	69ba      	ldr	r2, [r7, #24]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d809      	bhi.n	8009b84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	699a      	ldr	r2, [r3, #24]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d203      	bcs.n	8009b84 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	695b      	ldr	r3, [r3, #20]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1be      	bne.n	8009b02 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	695a      	ldr	r2, [r3, #20]
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	699b      	ldr	r3, [r3, #24]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	d811      	bhi.n	8009bb4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	f003 030f 	and.w	r3, r3, #15
 8009b96:	2201      	movs	r2, #1
 8009b98:	fa02 f303 	lsl.w	r3, r2, r3
 8009b9c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ba4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	43db      	mvns	r3, r3
 8009baa:	6939      	ldr	r1, [r7, #16]
 8009bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009bb4:	2300      	movs	r3, #0
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3720      	adds	r7, #32
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}
	...

08009bc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b086      	sub	sp, #24
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
 8009bc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bd0:	697b      	ldr	r3, [r7, #20]
 8009bd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	333c      	adds	r3, #60	; 0x3c
 8009bd8:	3304      	adds	r3, #4
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bde:	683b      	ldr	r3, [r7, #0]
 8009be0:	015a      	lsls	r2, r3, #5
 8009be2:	693b      	ldr	r3, [r7, #16]
 8009be4:	4413      	add	r3, r2
 8009be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	f040 80a0 	bne.w	8009d38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	f003 0308 	and.w	r3, r3, #8
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d015      	beq.n	8009c2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	4a72      	ldr	r2, [pc, #456]	; (8009dd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8009c06:	4293      	cmp	r3, r2
 8009c08:	f240 80dd 	bls.w	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c0c:	68bb      	ldr	r3, [r7, #8]
 8009c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	f000 80d7 	beq.w	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c24:	461a      	mov	r2, r3
 8009c26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c2a:	6093      	str	r3, [r2, #8]
 8009c2c:	e0cb      	b.n	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	f003 0320 	and.w	r3, r3, #32
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d009      	beq.n	8009c4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	015a      	lsls	r2, r3, #5
 8009c3c:	693b      	ldr	r3, [r7, #16]
 8009c3e:	4413      	add	r3, r2
 8009c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c44:	461a      	mov	r2, r3
 8009c46:	2320      	movs	r3, #32
 8009c48:	6093      	str	r3, [r2, #8]
 8009c4a:	e0bc      	b.n	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f040 80b7 	bne.w	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	4a5d      	ldr	r2, [pc, #372]	; (8009dd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8009c5c:	4293      	cmp	r3, r2
 8009c5e:	d90f      	bls.n	8009c80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d00a      	beq.n	8009c80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	015a      	lsls	r2, r3, #5
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	4413      	add	r3, r2
 8009c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c76:	461a      	mov	r2, r3
 8009c78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c7c:	6093      	str	r3, [r2, #8]
 8009c7e:	e0a2      	b.n	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	683a      	ldr	r2, [r7, #0]
 8009c84:	4613      	mov	r3, r2
 8009c86:	00db      	lsls	r3, r3, #3
 8009c88:	1a9b      	subs	r3, r3, r2
 8009c8a:	009b      	lsls	r3, r3, #2
 8009c8c:	440b      	add	r3, r1
 8009c8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009c92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	0159      	lsls	r1, r3, #5
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	440b      	add	r3, r1
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	691b      	ldr	r3, [r3, #16]
 8009ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009ca6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	4613      	mov	r3, r2
 8009cae:	00db      	lsls	r3, r3, #3
 8009cb0:	1a9b      	subs	r3, r3, r2
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	4403      	add	r3, r0
 8009cb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009cba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009cbc:	6879      	ldr	r1, [r7, #4]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	00db      	lsls	r3, r3, #3
 8009cc4:	1a9b      	subs	r3, r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	440b      	add	r3, r1
 8009cca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cce:	6819      	ldr	r1, [r3, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	683a      	ldr	r2, [r7, #0]
 8009cd4:	4613      	mov	r3, r2
 8009cd6:	00db      	lsls	r3, r3, #3
 8009cd8:	1a9b      	subs	r3, r3, r2
 8009cda:	009b      	lsls	r3, r3, #2
 8009cdc:	4403      	add	r3, r0
 8009cde:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4419      	add	r1, r3
 8009ce6:	6878      	ldr	r0, [r7, #4]
 8009ce8:	683a      	ldr	r2, [r7, #0]
 8009cea:	4613      	mov	r3, r2
 8009cec:	00db      	lsls	r3, r3, #3
 8009cee:	1a9b      	subs	r3, r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	4403      	add	r3, r0
 8009cf4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009cf8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d114      	bne.n	8009d2a <PCD_EP_OutXfrComplete_int+0x16a>
 8009d00:	6879      	ldr	r1, [r7, #4]
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	4613      	mov	r3, r2
 8009d06:	00db      	lsls	r3, r3, #3
 8009d08:	1a9b      	subs	r3, r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d108      	bne.n	8009d2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6818      	ldr	r0, [r3, #0]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d22:	461a      	mov	r2, r3
 8009d24:	2101      	movs	r1, #1
 8009d26:	f007 f86b 	bl	8010e00 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009d2a:	683b      	ldr	r3, [r7, #0]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	4619      	mov	r1, r3
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f010 f979 	bl	801a028 <HAL_PCD_DataOutStageCallback>
 8009d36:	e046      	b.n	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	4a26      	ldr	r2, [pc, #152]	; (8009dd4 <PCD_EP_OutXfrComplete_int+0x214>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d124      	bne.n	8009d8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d00a      	beq.n	8009d60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	015a      	lsls	r2, r3, #5
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	4413      	add	r3, r2
 8009d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d56:	461a      	mov	r2, r3
 8009d58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d5c:	6093      	str	r3, [r2, #8]
 8009d5e:	e032      	b.n	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d008      	beq.n	8009d7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d76:	461a      	mov	r2, r3
 8009d78:	2320      	movs	r3, #32
 8009d7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	4619      	mov	r1, r3
 8009d82:	6878      	ldr	r0, [r7, #4]
 8009d84:	f010 f950 	bl	801a028 <HAL_PCD_DataOutStageCallback>
 8009d88:	e01d      	b.n	8009dc6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009d8a:	683b      	ldr	r3, [r7, #0]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d114      	bne.n	8009dba <PCD_EP_OutXfrComplete_int+0x1fa>
 8009d90:	6879      	ldr	r1, [r7, #4]
 8009d92:	683a      	ldr	r2, [r7, #0]
 8009d94:	4613      	mov	r3, r2
 8009d96:	00db      	lsls	r3, r3, #3
 8009d98:	1a9b      	subs	r3, r3, r2
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	440b      	add	r3, r1
 8009d9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d108      	bne.n	8009dba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6818      	ldr	r0, [r3, #0]
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009db2:	461a      	mov	r2, r3
 8009db4:	2100      	movs	r1, #0
 8009db6:	f007 f823 	bl	8010e00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	b2db      	uxtb	r3, r3
 8009dbe:	4619      	mov	r1, r3
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f010 f931 	bl	801a028 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}
 8009dd0:	4f54300a 	.word	0x4f54300a
 8009dd4:	4f54310a 	.word	0x4f54310a

08009dd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b086      	sub	sp, #24
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009de8:	697b      	ldr	r3, [r7, #20]
 8009dea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	333c      	adds	r3, #60	; 0x3c
 8009df0:	3304      	adds	r3, #4
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	015a      	lsls	r2, r3, #5
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e02:	689b      	ldr	r3, [r3, #8]
 8009e04:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	4a15      	ldr	r2, [pc, #84]	; (8009e60 <PCD_EP_OutSetupPacket_int+0x88>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d90e      	bls.n	8009e2c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	015a      	lsls	r2, r3, #5
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	4413      	add	r3, r2
 8009e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e24:	461a      	mov	r2, r3
 8009e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e2a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f010 f8e9 	bl	801a004 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <PCD_EP_OutSetupPacket_int+0x88>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d90c      	bls.n	8009e54 <PCD_EP_OutSetupPacket_int+0x7c>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	691b      	ldr	r3, [r3, #16]
 8009e3e:	2b01      	cmp	r3, #1
 8009e40:	d108      	bne.n	8009e54 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6818      	ldr	r0, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	2101      	movs	r1, #1
 8009e50:	f006 ffd6 	bl	8010e00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009e54:	2300      	movs	r3, #0
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}
 8009e5e:	bf00      	nop
 8009e60:	4f54300a 	.word	0x4f54300a

08009e64 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
 8009e70:	4613      	mov	r3, r2
 8009e72:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e7a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009e7c:	78fb      	ldrb	r3, [r7, #3]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d107      	bne.n	8009e92 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009e82:	883b      	ldrh	r3, [r7, #0]
 8009e84:	0419      	lsls	r1, r3, #16
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	68ba      	ldr	r2, [r7, #8]
 8009e8c:	430a      	orrs	r2, r1
 8009e8e:	629a      	str	r2, [r3, #40]	; 0x28
 8009e90:	e028      	b.n	8009ee4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e98:	0c1b      	lsrs	r3, r3, #16
 8009e9a:	68ba      	ldr	r2, [r7, #8]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	73fb      	strb	r3, [r7, #15]
 8009ea4:	e00d      	b.n	8009ec2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	7bfb      	ldrb	r3, [r7, #15]
 8009eac:	3340      	adds	r3, #64	; 0x40
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	0c1b      	lsrs	r3, r3, #16
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	4413      	add	r3, r2
 8009eba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009ebc:	7bfb      	ldrb	r3, [r7, #15]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	73fb      	strb	r3, [r7, #15]
 8009ec2:	7bfa      	ldrb	r2, [r7, #15]
 8009ec4:	78fb      	ldrb	r3, [r7, #3]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d3ec      	bcc.n	8009ea6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009ecc:	883b      	ldrh	r3, [r7, #0]
 8009ece:	0418      	lsls	r0, r3, #16
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6819      	ldr	r1, [r3, #0]
 8009ed4:	78fb      	ldrb	r3, [r7, #3]
 8009ed6:	3b01      	subs	r3, #1
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	4302      	orrs	r2, r0
 8009edc:	3340      	adds	r3, #64	; 0x40
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009ee4:	2300      	movs	r3, #0
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3714      	adds	r7, #20
 8009eea:	46bd      	mov	sp, r7
 8009eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef0:	4770      	bx	lr

08009ef2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009ef2:	b480      	push	{r7}
 8009ef4:	b083      	sub	sp, #12
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6078      	str	r0, [r7, #4]
 8009efa:	460b      	mov	r3, r1
 8009efc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	887a      	ldrh	r2, [r7, #2]
 8009f04:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2201      	movs	r2, #1
 8009f26:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009f42:	4b05      	ldr	r3, [pc, #20]	; (8009f58 <HAL_PCDEx_ActivateLPM+0x44>)
 8009f44:	4313      	orrs	r3, r2
 8009f46:	68fa      	ldr	r2, [r7, #12]
 8009f48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3714      	adds	r7, #20
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr
 8009f58:	10000003 	.word	0x10000003

08009f5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b086      	sub	sp, #24
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009f64:	2300      	movs	r3, #0
 8009f66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d101      	bne.n	8009f72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009f6e:	2301      	movs	r3, #1
 8009f70:	e291      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 0301 	and.w	r3, r3, #1
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 8087 	beq.w	800a08e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f80:	4b96      	ldr	r3, [pc, #600]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009f82:	689b      	ldr	r3, [r3, #8]
 8009f84:	f003 030c 	and.w	r3, r3, #12
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	d00c      	beq.n	8009fa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009f8c:	4b93      	ldr	r3, [pc, #588]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f003 030c 	and.w	r3, r3, #12
 8009f94:	2b08      	cmp	r3, #8
 8009f96:	d112      	bne.n	8009fbe <HAL_RCC_OscConfig+0x62>
 8009f98:	4b90      	ldr	r3, [pc, #576]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009f9a:	685b      	ldr	r3, [r3, #4]
 8009f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009fa4:	d10b      	bne.n	8009fbe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fa6:	4b8d      	ldr	r3, [pc, #564]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d06c      	beq.n	800a08c <HAL_RCC_OscConfig+0x130>
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d168      	bne.n	800a08c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009fba:	2301      	movs	r3, #1
 8009fbc:	e26b      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	685b      	ldr	r3, [r3, #4]
 8009fc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fc6:	d106      	bne.n	8009fd6 <HAL_RCC_OscConfig+0x7a>
 8009fc8:	4b84      	ldr	r3, [pc, #528]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	4a83      	ldr	r2, [pc, #524]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fd2:	6013      	str	r3, [r2, #0]
 8009fd4:	e02e      	b.n	800a034 <HAL_RCC_OscConfig+0xd8>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	685b      	ldr	r3, [r3, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10c      	bne.n	8009ff8 <HAL_RCC_OscConfig+0x9c>
 8009fde:	4b7f      	ldr	r3, [pc, #508]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a7e      	ldr	r2, [pc, #504]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009fe4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009fe8:	6013      	str	r3, [r2, #0]
 8009fea:	4b7c      	ldr	r3, [pc, #496]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	4a7b      	ldr	r2, [pc, #492]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 8009ff0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009ff4:	6013      	str	r3, [r2, #0]
 8009ff6:	e01d      	b.n	800a034 <HAL_RCC_OscConfig+0xd8>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a000:	d10c      	bne.n	800a01c <HAL_RCC_OscConfig+0xc0>
 800a002:	4b76      	ldr	r3, [pc, #472]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	4a75      	ldr	r2, [pc, #468]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a008:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a00c:	6013      	str	r3, [r2, #0]
 800a00e:	4b73      	ldr	r3, [pc, #460]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	4a72      	ldr	r2, [pc, #456]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a018:	6013      	str	r3, [r2, #0]
 800a01a:	e00b      	b.n	800a034 <HAL_RCC_OscConfig+0xd8>
 800a01c:	4b6f      	ldr	r3, [pc, #444]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	4a6e      	ldr	r2, [pc, #440]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a022:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a026:	6013      	str	r3, [r2, #0]
 800a028:	4b6c      	ldr	r3, [pc, #432]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	4a6b      	ldr	r2, [pc, #428]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a02e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	685b      	ldr	r3, [r3, #4]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d013      	beq.n	800a064 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a03c:	f7fd fa56 	bl	80074ec <HAL_GetTick>
 800a040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a042:	e008      	b.n	800a056 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a044:	f7fd fa52 	bl	80074ec <HAL_GetTick>
 800a048:	4602      	mov	r2, r0
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	2b64      	cmp	r3, #100	; 0x64
 800a050:	d901      	bls.n	800a056 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a052:	2303      	movs	r3, #3
 800a054:	e21f      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a056:	4b61      	ldr	r3, [pc, #388]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d0f0      	beq.n	800a044 <HAL_RCC_OscConfig+0xe8>
 800a062:	e014      	b.n	800a08e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a064:	f7fd fa42 	bl	80074ec <HAL_GetTick>
 800a068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a06a:	e008      	b.n	800a07e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a06c:	f7fd fa3e 	bl	80074ec <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b64      	cmp	r3, #100	; 0x64
 800a078:	d901      	bls.n	800a07e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e20b      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a07e:	4b57      	ldr	r3, [pc, #348]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1f0      	bne.n	800a06c <HAL_RCC_OscConfig+0x110>
 800a08a:	e000      	b.n	800a08e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a08c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 0302 	and.w	r3, r3, #2
 800a096:	2b00      	cmp	r3, #0
 800a098:	d069      	beq.n	800a16e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a09a:	4b50      	ldr	r3, [pc, #320]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f003 030c 	and.w	r3, r3, #12
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00b      	beq.n	800a0be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a0a6:	4b4d      	ldr	r3, [pc, #308]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a0a8:	689b      	ldr	r3, [r3, #8]
 800a0aa:	f003 030c 	and.w	r3, r3, #12
 800a0ae:	2b08      	cmp	r3, #8
 800a0b0:	d11c      	bne.n	800a0ec <HAL_RCC_OscConfig+0x190>
 800a0b2:	4b4a      	ldr	r3, [pc, #296]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d116      	bne.n	800a0ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0be:	4b47      	ldr	r3, [pc, #284]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	f003 0302 	and.w	r3, r3, #2
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d005      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x17a>
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68db      	ldr	r3, [r3, #12]
 800a0ce:	2b01      	cmp	r3, #1
 800a0d0:	d001      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e1df      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a0d6:	4b41      	ldr	r3, [pc, #260]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	00db      	lsls	r3, r3, #3
 800a0e4:	493d      	ldr	r1, [pc, #244]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a0ea:	e040      	b.n	800a16e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	68db      	ldr	r3, [r3, #12]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d023      	beq.n	800a13c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a0f4:	4b39      	ldr	r3, [pc, #228]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a38      	ldr	r2, [pc, #224]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a0fa:	f043 0301 	orr.w	r3, r3, #1
 800a0fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a100:	f7fd f9f4 	bl	80074ec <HAL_GetTick>
 800a104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a106:	e008      	b.n	800a11a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a108:	f7fd f9f0 	bl	80074ec <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b02      	cmp	r3, #2
 800a114:	d901      	bls.n	800a11a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e1bd      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a11a:	4b30      	ldr	r3, [pc, #192]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0302 	and.w	r3, r3, #2
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0f0      	beq.n	800a108 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a126:	4b2d      	ldr	r3, [pc, #180]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	691b      	ldr	r3, [r3, #16]
 800a132:	00db      	lsls	r3, r3, #3
 800a134:	4929      	ldr	r1, [pc, #164]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a136:	4313      	orrs	r3, r2
 800a138:	600b      	str	r3, [r1, #0]
 800a13a:	e018      	b.n	800a16e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a13c:	4b27      	ldr	r3, [pc, #156]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a26      	ldr	r2, [pc, #152]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a142:	f023 0301 	bic.w	r3, r3, #1
 800a146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a148:	f7fd f9d0 	bl	80074ec <HAL_GetTick>
 800a14c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a14e:	e008      	b.n	800a162 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a150:	f7fd f9cc 	bl	80074ec <HAL_GetTick>
 800a154:	4602      	mov	r2, r0
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	1ad3      	subs	r3, r2, r3
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d901      	bls.n	800a162 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a15e:	2303      	movs	r3, #3
 800a160:	e199      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a162:	4b1e      	ldr	r3, [pc, #120]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f003 0302 	and.w	r3, r3, #2
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d1f0      	bne.n	800a150 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 0308 	and.w	r3, r3, #8
 800a176:	2b00      	cmp	r3, #0
 800a178:	d038      	beq.n	800a1ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	695b      	ldr	r3, [r3, #20]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d019      	beq.n	800a1b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a182:	4b16      	ldr	r3, [pc, #88]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a186:	4a15      	ldr	r2, [pc, #84]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a188:	f043 0301 	orr.w	r3, r3, #1
 800a18c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a18e:	f7fd f9ad 	bl	80074ec <HAL_GetTick>
 800a192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a194:	e008      	b.n	800a1a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a196:	f7fd f9a9 	bl	80074ec <HAL_GetTick>
 800a19a:	4602      	mov	r2, r0
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	1ad3      	subs	r3, r2, r3
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	d901      	bls.n	800a1a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a1a4:	2303      	movs	r3, #3
 800a1a6:	e176      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a1a8:	4b0c      	ldr	r3, [pc, #48]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ac:	f003 0302 	and.w	r3, r3, #2
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d0f0      	beq.n	800a196 <HAL_RCC_OscConfig+0x23a>
 800a1b4:	e01a      	b.n	800a1ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a1b6:	4b09      	ldr	r3, [pc, #36]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a1b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1ba:	4a08      	ldr	r2, [pc, #32]	; (800a1dc <HAL_RCC_OscConfig+0x280>)
 800a1bc:	f023 0301 	bic.w	r3, r3, #1
 800a1c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1c2:	f7fd f993 	bl	80074ec <HAL_GetTick>
 800a1c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1c8:	e00a      	b.n	800a1e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a1ca:	f7fd f98f 	bl	80074ec <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	2b02      	cmp	r3, #2
 800a1d6:	d903      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a1d8:	2303      	movs	r3, #3
 800a1da:	e15c      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
 800a1dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a1e0:	4b91      	ldr	r3, [pc, #580]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a1e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a1e4:	f003 0302 	and.w	r3, r3, #2
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d1ee      	bne.n	800a1ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f003 0304 	and.w	r3, r3, #4
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	f000 80a4 	beq.w	800a342 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a1fa:	4b8b      	ldr	r3, [pc, #556]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a1fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a202:	2b00      	cmp	r3, #0
 800a204:	d10d      	bne.n	800a222 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a206:	4b88      	ldr	r3, [pc, #544]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a20a:	4a87      	ldr	r2, [pc, #540]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a20c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a210:	6413      	str	r3, [r2, #64]	; 0x40
 800a212:	4b85      	ldr	r3, [pc, #532]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a21a:	60bb      	str	r3, [r7, #8]
 800a21c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a21e:	2301      	movs	r3, #1
 800a220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a222:	4b82      	ldr	r3, [pc, #520]	; (800a42c <HAL_RCC_OscConfig+0x4d0>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d118      	bne.n	800a260 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a22e:	4b7f      	ldr	r3, [pc, #508]	; (800a42c <HAL_RCC_OscConfig+0x4d0>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a7e      	ldr	r2, [pc, #504]	; (800a42c <HAL_RCC_OscConfig+0x4d0>)
 800a234:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a23a:	f7fd f957 	bl	80074ec <HAL_GetTick>
 800a23e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a240:	e008      	b.n	800a254 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a242:	f7fd f953 	bl	80074ec <HAL_GetTick>
 800a246:	4602      	mov	r2, r0
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	1ad3      	subs	r3, r2, r3
 800a24c:	2b64      	cmp	r3, #100	; 0x64
 800a24e:	d901      	bls.n	800a254 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a250:	2303      	movs	r3, #3
 800a252:	e120      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a254:	4b75      	ldr	r3, [pc, #468]	; (800a42c <HAL_RCC_OscConfig+0x4d0>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d0f0      	beq.n	800a242 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	689b      	ldr	r3, [r3, #8]
 800a264:	2b01      	cmp	r3, #1
 800a266:	d106      	bne.n	800a276 <HAL_RCC_OscConfig+0x31a>
 800a268:	4b6f      	ldr	r3, [pc, #444]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a26a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a26c:	4a6e      	ldr	r2, [pc, #440]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a26e:	f043 0301 	orr.w	r3, r3, #1
 800a272:	6713      	str	r3, [r2, #112]	; 0x70
 800a274:	e02d      	b.n	800a2d2 <HAL_RCC_OscConfig+0x376>
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	689b      	ldr	r3, [r3, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10c      	bne.n	800a298 <HAL_RCC_OscConfig+0x33c>
 800a27e:	4b6a      	ldr	r3, [pc, #424]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a282:	4a69      	ldr	r2, [pc, #420]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a284:	f023 0301 	bic.w	r3, r3, #1
 800a288:	6713      	str	r3, [r2, #112]	; 0x70
 800a28a:	4b67      	ldr	r3, [pc, #412]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a28c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a28e:	4a66      	ldr	r2, [pc, #408]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a290:	f023 0304 	bic.w	r3, r3, #4
 800a294:	6713      	str	r3, [r2, #112]	; 0x70
 800a296:	e01c      	b.n	800a2d2 <HAL_RCC_OscConfig+0x376>
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	689b      	ldr	r3, [r3, #8]
 800a29c:	2b05      	cmp	r3, #5
 800a29e:	d10c      	bne.n	800a2ba <HAL_RCC_OscConfig+0x35e>
 800a2a0:	4b61      	ldr	r3, [pc, #388]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a4:	4a60      	ldr	r2, [pc, #384]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2a6:	f043 0304 	orr.w	r3, r3, #4
 800a2aa:	6713      	str	r3, [r2, #112]	; 0x70
 800a2ac:	4b5e      	ldr	r3, [pc, #376]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b0:	4a5d      	ldr	r2, [pc, #372]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2b2:	f043 0301 	orr.w	r3, r3, #1
 800a2b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a2b8:	e00b      	b.n	800a2d2 <HAL_RCC_OscConfig+0x376>
 800a2ba:	4b5b      	ldr	r3, [pc, #364]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2be:	4a5a      	ldr	r2, [pc, #360]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2c0:	f023 0301 	bic.w	r3, r3, #1
 800a2c4:	6713      	str	r3, [r2, #112]	; 0x70
 800a2c6:	4b58      	ldr	r3, [pc, #352]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ca:	4a57      	ldr	r2, [pc, #348]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2cc:	f023 0304 	bic.w	r3, r3, #4
 800a2d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d015      	beq.n	800a306 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2da:	f7fd f907 	bl	80074ec <HAL_GetTick>
 800a2de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2e0:	e00a      	b.n	800a2f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2e2:	f7fd f903 	bl	80074ec <HAL_GetTick>
 800a2e6:	4602      	mov	r2, r0
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	1ad3      	subs	r3, r2, r3
 800a2ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d901      	bls.n	800a2f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a2f4:	2303      	movs	r3, #3
 800a2f6:	e0ce      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a2f8:	4b4b      	ldr	r3, [pc, #300]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fc:	f003 0302 	and.w	r3, r3, #2
 800a300:	2b00      	cmp	r3, #0
 800a302:	d0ee      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x386>
 800a304:	e014      	b.n	800a330 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a306:	f7fd f8f1 	bl	80074ec <HAL_GetTick>
 800a30a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a30c:	e00a      	b.n	800a324 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a30e:	f7fd f8ed 	bl	80074ec <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	f241 3288 	movw	r2, #5000	; 0x1388
 800a31c:	4293      	cmp	r3, r2
 800a31e:	d901      	bls.n	800a324 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a320:	2303      	movs	r3, #3
 800a322:	e0b8      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a324:	4b40      	ldr	r3, [pc, #256]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a328:	f003 0302 	and.w	r3, r3, #2
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1ee      	bne.n	800a30e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a330:	7dfb      	ldrb	r3, [r7, #23]
 800a332:	2b01      	cmp	r3, #1
 800a334:	d105      	bne.n	800a342 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a336:	4b3c      	ldr	r3, [pc, #240]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33a:	4a3b      	ldr	r2, [pc, #236]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a33c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a340:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	699b      	ldr	r3, [r3, #24]
 800a346:	2b00      	cmp	r3, #0
 800a348:	f000 80a4 	beq.w	800a494 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a34c:	4b36      	ldr	r3, [pc, #216]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f003 030c 	and.w	r3, r3, #12
 800a354:	2b08      	cmp	r3, #8
 800a356:	d06b      	beq.n	800a430 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	699b      	ldr	r3, [r3, #24]
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d149      	bne.n	800a3f4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a360:	4b31      	ldr	r3, [pc, #196]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a30      	ldr	r2, [pc, #192]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a366:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a36a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a36c:	f7fd f8be 	bl	80074ec <HAL_GetTick>
 800a370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a372:	e008      	b.n	800a386 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a374:	f7fd f8ba 	bl	80074ec <HAL_GetTick>
 800a378:	4602      	mov	r2, r0
 800a37a:	693b      	ldr	r3, [r7, #16]
 800a37c:	1ad3      	subs	r3, r2, r3
 800a37e:	2b02      	cmp	r3, #2
 800a380:	d901      	bls.n	800a386 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a382:	2303      	movs	r3, #3
 800a384:	e087      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a386:	4b28      	ldr	r3, [pc, #160]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d1f0      	bne.n	800a374 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	69da      	ldr	r2, [r3, #28]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6a1b      	ldr	r3, [r3, #32]
 800a39a:	431a      	orrs	r2, r3
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a0:	019b      	lsls	r3, r3, #6
 800a3a2:	431a      	orrs	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a8:	085b      	lsrs	r3, r3, #1
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	041b      	lsls	r3, r3, #16
 800a3ae:	431a      	orrs	r2, r3
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3b4:	061b      	lsls	r3, r3, #24
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	4a1b      	ldr	r2, [pc, #108]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a3be:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a3c0:	4b19      	ldr	r3, [pc, #100]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a18      	ldr	r2, [pc, #96]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3cc:	f7fd f88e 	bl	80074ec <HAL_GetTick>
 800a3d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3d2:	e008      	b.n	800a3e6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3d4:	f7fd f88a 	bl	80074ec <HAL_GetTick>
 800a3d8:	4602      	mov	r2, r0
 800a3da:	693b      	ldr	r3, [r7, #16]
 800a3dc:	1ad3      	subs	r3, r2, r3
 800a3de:	2b02      	cmp	r3, #2
 800a3e0:	d901      	bls.n	800a3e6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e057      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a3e6:	4b10      	ldr	r3, [pc, #64]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0f0      	beq.n	800a3d4 <HAL_RCC_OscConfig+0x478>
 800a3f2:	e04f      	b.n	800a494 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3f4:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a0b      	ldr	r2, [pc, #44]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a3fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a400:	f7fd f874 	bl	80074ec <HAL_GetTick>
 800a404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a406:	e008      	b.n	800a41a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a408:	f7fd f870 	bl	80074ec <HAL_GetTick>
 800a40c:	4602      	mov	r2, r0
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	1ad3      	subs	r3, r2, r3
 800a412:	2b02      	cmp	r3, #2
 800a414:	d901      	bls.n	800a41a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a416:	2303      	movs	r3, #3
 800a418:	e03d      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a41a:	4b03      	ldr	r3, [pc, #12]	; (800a428 <HAL_RCC_OscConfig+0x4cc>)
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a422:	2b00      	cmp	r3, #0
 800a424:	d1f0      	bne.n	800a408 <HAL_RCC_OscConfig+0x4ac>
 800a426:	e035      	b.n	800a494 <HAL_RCC_OscConfig+0x538>
 800a428:	40023800 	.word	0x40023800
 800a42c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a430:	4b1b      	ldr	r3, [pc, #108]	; (800a4a0 <HAL_RCC_OscConfig+0x544>)
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	699b      	ldr	r3, [r3, #24]
 800a43a:	2b01      	cmp	r3, #1
 800a43c:	d028      	beq.n	800a490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a448:	429a      	cmp	r2, r3
 800a44a:	d121      	bne.n	800a490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a456:	429a      	cmp	r2, r3
 800a458:	d11a      	bne.n	800a490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a45a:	68fa      	ldr	r2, [r7, #12]
 800a45c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a460:	4013      	ands	r3, r2
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a466:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a468:	4293      	cmp	r3, r2
 800a46a:	d111      	bne.n	800a490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a476:	085b      	lsrs	r3, r3, #1
 800a478:	3b01      	subs	r3, #1
 800a47a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a47c:	429a      	cmp	r2, r3
 800a47e:	d107      	bne.n	800a490 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a48a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a48c:	429a      	cmp	r2, r3
 800a48e:	d001      	beq.n	800a494 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e000      	b.n	800a496 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a494:	2300      	movs	r3, #0
}
 800a496:	4618      	mov	r0, r3
 800a498:	3718      	adds	r7, #24
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}
 800a49e:	bf00      	nop
 800a4a0:	40023800 	.word	0x40023800

0800a4a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a4a4:	b580      	push	{r7, lr}
 800a4a6:	b084      	sub	sp, #16
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	6078      	str	r0, [r7, #4]
 800a4ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d101      	bne.n	800a4bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e0d0      	b.n	800a65e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a4bc:	4b6a      	ldr	r3, [pc, #424]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	f003 030f 	and.w	r3, r3, #15
 800a4c4:	683a      	ldr	r2, [r7, #0]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	d910      	bls.n	800a4ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4ca:	4b67      	ldr	r3, [pc, #412]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f023 020f 	bic.w	r2, r3, #15
 800a4d2:	4965      	ldr	r1, [pc, #404]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4da:	4b63      	ldr	r3, [pc, #396]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	f003 030f 	and.w	r3, r3, #15
 800a4e2:	683a      	ldr	r2, [r7, #0]
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	d001      	beq.n	800a4ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a4e8:	2301      	movs	r3, #1
 800a4ea:	e0b8      	b.n	800a65e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	f003 0302 	and.w	r3, r3, #2
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d020      	beq.n	800a53a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b00      	cmp	r3, #0
 800a502:	d005      	beq.n	800a510 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a504:	4b59      	ldr	r3, [pc, #356]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	4a58      	ldr	r2, [pc, #352]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a50a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a50e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f003 0308 	and.w	r3, r3, #8
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d005      	beq.n	800a528 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a51c:	4b53      	ldr	r3, [pc, #332]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	4a52      	ldr	r2, [pc, #328]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a522:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a526:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a528:	4b50      	ldr	r3, [pc, #320]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	494d      	ldr	r1, [pc, #308]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a536:	4313      	orrs	r3, r2
 800a538:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f003 0301 	and.w	r3, r3, #1
 800a542:	2b00      	cmp	r3, #0
 800a544:	d040      	beq.n	800a5c8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	685b      	ldr	r3, [r3, #4]
 800a54a:	2b01      	cmp	r3, #1
 800a54c:	d107      	bne.n	800a55e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a54e:	4b47      	ldr	r3, [pc, #284]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a556:	2b00      	cmp	r3, #0
 800a558:	d115      	bne.n	800a586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e07f      	b.n	800a65e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	2b02      	cmp	r3, #2
 800a564:	d107      	bne.n	800a576 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a566:	4b41      	ldr	r3, [pc, #260]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d109      	bne.n	800a586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	e073      	b.n	800a65e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a576:	4b3d      	ldr	r3, [pc, #244]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d101      	bne.n	800a586 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	e06b      	b.n	800a65e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a586:	4b39      	ldr	r3, [pc, #228]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f023 0203 	bic.w	r2, r3, #3
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	4936      	ldr	r1, [pc, #216]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a594:	4313      	orrs	r3, r2
 800a596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a598:	f7fc ffa8 	bl	80074ec <HAL_GetTick>
 800a59c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a59e:	e00a      	b.n	800a5b6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a5a0:	f7fc ffa4 	bl	80074ec <HAL_GetTick>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	1ad3      	subs	r3, r2, r3
 800a5aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d901      	bls.n	800a5b6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a5b2:	2303      	movs	r3, #3
 800a5b4:	e053      	b.n	800a65e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a5b6:	4b2d      	ldr	r3, [pc, #180]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a5b8:	689b      	ldr	r3, [r3, #8]
 800a5ba:	f003 020c 	and.w	r2, r3, #12
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	009b      	lsls	r3, r3, #2
 800a5c4:	429a      	cmp	r2, r3
 800a5c6:	d1eb      	bne.n	800a5a0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5c8:	4b27      	ldr	r3, [pc, #156]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f003 030f 	and.w	r3, r3, #15
 800a5d0:	683a      	ldr	r2, [r7, #0]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d210      	bcs.n	800a5f8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5d6:	4b24      	ldr	r3, [pc, #144]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f023 020f 	bic.w	r2, r3, #15
 800a5de:	4922      	ldr	r1, [pc, #136]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	4313      	orrs	r3, r2
 800a5e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5e6:	4b20      	ldr	r3, [pc, #128]	; (800a668 <HAL_RCC_ClockConfig+0x1c4>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f003 030f 	and.w	r3, r3, #15
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d001      	beq.n	800a5f8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	e032      	b.n	800a65e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b00      	cmp	r3, #0
 800a602:	d008      	beq.n	800a616 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a604:	4b19      	ldr	r3, [pc, #100]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a606:	689b      	ldr	r3, [r3, #8]
 800a608:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	4916      	ldr	r1, [pc, #88]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a612:	4313      	orrs	r3, r2
 800a614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f003 0308 	and.w	r3, r3, #8
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d009      	beq.n	800a636 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a622:	4b12      	ldr	r3, [pc, #72]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	00db      	lsls	r3, r3, #3
 800a630:	490e      	ldr	r1, [pc, #56]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a632:	4313      	orrs	r3, r2
 800a634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a636:	f000 f821 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800a63a:	4601      	mov	r1, r0
 800a63c:	4b0b      	ldr	r3, [pc, #44]	; (800a66c <HAL_RCC_ClockConfig+0x1c8>)
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	091b      	lsrs	r3, r3, #4
 800a642:	f003 030f 	and.w	r3, r3, #15
 800a646:	4a0a      	ldr	r2, [pc, #40]	; (800a670 <HAL_RCC_ClockConfig+0x1cc>)
 800a648:	5cd3      	ldrb	r3, [r2, r3]
 800a64a:	fa21 f303 	lsr.w	r3, r1, r3
 800a64e:	4a09      	ldr	r2, [pc, #36]	; (800a674 <HAL_RCC_ClockConfig+0x1d0>)
 800a650:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a652:	4b09      	ldr	r3, [pc, #36]	; (800a678 <HAL_RCC_ClockConfig+0x1d4>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4618      	mov	r0, r3
 800a658:	f7fb f95a 	bl	8005910 <HAL_InitTick>

  return HAL_OK;
 800a65c:	2300      	movs	r3, #0
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3710      	adds	r7, #16
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	40023c00 	.word	0x40023c00
 800a66c:	40023800 	.word	0x40023800
 800a670:	0801d838 	.word	0x0801d838
 800a674:	20000000 	.word	0x20000000
 800a678:	20000088 	.word	0x20000088

0800a67c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a67c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a682:	2300      	movs	r3, #0
 800a684:	607b      	str	r3, [r7, #4]
 800a686:	2300      	movs	r3, #0
 800a688:	60fb      	str	r3, [r7, #12]
 800a68a:	2300      	movs	r3, #0
 800a68c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a68e:	2300      	movs	r3, #0
 800a690:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a692:	4b63      	ldr	r3, [pc, #396]	; (800a820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	f003 030c 	and.w	r3, r3, #12
 800a69a:	2b04      	cmp	r3, #4
 800a69c:	d007      	beq.n	800a6ae <HAL_RCC_GetSysClockFreq+0x32>
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d008      	beq.n	800a6b4 <HAL_RCC_GetSysClockFreq+0x38>
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	f040 80b4 	bne.w	800a810 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a6a8:	4b5e      	ldr	r3, [pc, #376]	; (800a824 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a6aa:	60bb      	str	r3, [r7, #8]
      break;
 800a6ac:	e0b3      	b.n	800a816 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a6ae:	4b5e      	ldr	r3, [pc, #376]	; (800a828 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a6b0:	60bb      	str	r3, [r7, #8]
      break;
 800a6b2:	e0b0      	b.n	800a816 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a6b4:	4b5a      	ldr	r3, [pc, #360]	; (800a820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a6b6:	685b      	ldr	r3, [r3, #4]
 800a6b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a6bc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a6be:	4b58      	ldr	r3, [pc, #352]	; (800a820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a6c0:	685b      	ldr	r3, [r3, #4]
 800a6c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d04a      	beq.n	800a760 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a6ca:	4b55      	ldr	r3, [pc, #340]	; (800a820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	099b      	lsrs	r3, r3, #6
 800a6d0:	f04f 0400 	mov.w	r4, #0
 800a6d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a6d8:	f04f 0200 	mov.w	r2, #0
 800a6dc:	ea03 0501 	and.w	r5, r3, r1
 800a6e0:	ea04 0602 	and.w	r6, r4, r2
 800a6e4:	4629      	mov	r1, r5
 800a6e6:	4632      	mov	r2, r6
 800a6e8:	f04f 0300 	mov.w	r3, #0
 800a6ec:	f04f 0400 	mov.w	r4, #0
 800a6f0:	0154      	lsls	r4, r2, #5
 800a6f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a6f6:	014b      	lsls	r3, r1, #5
 800a6f8:	4619      	mov	r1, r3
 800a6fa:	4622      	mov	r2, r4
 800a6fc:	1b49      	subs	r1, r1, r5
 800a6fe:	eb62 0206 	sbc.w	r2, r2, r6
 800a702:	f04f 0300 	mov.w	r3, #0
 800a706:	f04f 0400 	mov.w	r4, #0
 800a70a:	0194      	lsls	r4, r2, #6
 800a70c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a710:	018b      	lsls	r3, r1, #6
 800a712:	1a5b      	subs	r3, r3, r1
 800a714:	eb64 0402 	sbc.w	r4, r4, r2
 800a718:	f04f 0100 	mov.w	r1, #0
 800a71c:	f04f 0200 	mov.w	r2, #0
 800a720:	00e2      	lsls	r2, r4, #3
 800a722:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a726:	00d9      	lsls	r1, r3, #3
 800a728:	460b      	mov	r3, r1
 800a72a:	4614      	mov	r4, r2
 800a72c:	195b      	adds	r3, r3, r5
 800a72e:	eb44 0406 	adc.w	r4, r4, r6
 800a732:	f04f 0100 	mov.w	r1, #0
 800a736:	f04f 0200 	mov.w	r2, #0
 800a73a:	0262      	lsls	r2, r4, #9
 800a73c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a740:	0259      	lsls	r1, r3, #9
 800a742:	460b      	mov	r3, r1
 800a744:	4614      	mov	r4, r2
 800a746:	4618      	mov	r0, r3
 800a748:	4621      	mov	r1, r4
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f04f 0400 	mov.w	r4, #0
 800a750:	461a      	mov	r2, r3
 800a752:	4623      	mov	r3, r4
 800a754:	f7f6 fa90 	bl	8000c78 <__aeabi_uldivmod>
 800a758:	4603      	mov	r3, r0
 800a75a:	460c      	mov	r4, r1
 800a75c:	60fb      	str	r3, [r7, #12]
 800a75e:	e049      	b.n	800a7f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a760:	4b2f      	ldr	r3, [pc, #188]	; (800a820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	099b      	lsrs	r3, r3, #6
 800a766:	f04f 0400 	mov.w	r4, #0
 800a76a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a76e:	f04f 0200 	mov.w	r2, #0
 800a772:	ea03 0501 	and.w	r5, r3, r1
 800a776:	ea04 0602 	and.w	r6, r4, r2
 800a77a:	4629      	mov	r1, r5
 800a77c:	4632      	mov	r2, r6
 800a77e:	f04f 0300 	mov.w	r3, #0
 800a782:	f04f 0400 	mov.w	r4, #0
 800a786:	0154      	lsls	r4, r2, #5
 800a788:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a78c:	014b      	lsls	r3, r1, #5
 800a78e:	4619      	mov	r1, r3
 800a790:	4622      	mov	r2, r4
 800a792:	1b49      	subs	r1, r1, r5
 800a794:	eb62 0206 	sbc.w	r2, r2, r6
 800a798:	f04f 0300 	mov.w	r3, #0
 800a79c:	f04f 0400 	mov.w	r4, #0
 800a7a0:	0194      	lsls	r4, r2, #6
 800a7a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a7a6:	018b      	lsls	r3, r1, #6
 800a7a8:	1a5b      	subs	r3, r3, r1
 800a7aa:	eb64 0402 	sbc.w	r4, r4, r2
 800a7ae:	f04f 0100 	mov.w	r1, #0
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	00e2      	lsls	r2, r4, #3
 800a7b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a7bc:	00d9      	lsls	r1, r3, #3
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	195b      	adds	r3, r3, r5
 800a7c4:	eb44 0406 	adc.w	r4, r4, r6
 800a7c8:	f04f 0100 	mov.w	r1, #0
 800a7cc:	f04f 0200 	mov.w	r2, #0
 800a7d0:	02a2      	lsls	r2, r4, #10
 800a7d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a7d6:	0299      	lsls	r1, r3, #10
 800a7d8:	460b      	mov	r3, r1
 800a7da:	4614      	mov	r4, r2
 800a7dc:	4618      	mov	r0, r3
 800a7de:	4621      	mov	r1, r4
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f04f 0400 	mov.w	r4, #0
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4623      	mov	r3, r4
 800a7ea:	f7f6 fa45 	bl	8000c78 <__aeabi_uldivmod>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	460c      	mov	r4, r1
 800a7f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a7f4:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	0c1b      	lsrs	r3, r3, #16
 800a7fa:	f003 0303 	and.w	r3, r3, #3
 800a7fe:	3301      	adds	r3, #1
 800a800:	005b      	lsls	r3, r3, #1
 800a802:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a804:	68fa      	ldr	r2, [r7, #12]
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	fbb2 f3f3 	udiv	r3, r2, r3
 800a80c:	60bb      	str	r3, [r7, #8]
      break;
 800a80e:	e002      	b.n	800a816 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a810:	4b04      	ldr	r3, [pc, #16]	; (800a824 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a812:	60bb      	str	r3, [r7, #8]
      break;
 800a814:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a816:	68bb      	ldr	r3, [r7, #8]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3714      	adds	r7, #20
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a820:	40023800 	.word	0x40023800
 800a824:	00f42400 	.word	0x00f42400
 800a828:	007a1200 	.word	0x007a1200

0800a82c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a82c:	b480      	push	{r7}
 800a82e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a830:	4b03      	ldr	r3, [pc, #12]	; (800a840 <HAL_RCC_GetHCLKFreq+0x14>)
 800a832:	681b      	ldr	r3, [r3, #0]
}
 800a834:	4618      	mov	r0, r3
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	20000000 	.word	0x20000000

0800a844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a848:	f7ff fff0 	bl	800a82c <HAL_RCC_GetHCLKFreq>
 800a84c:	4601      	mov	r1, r0
 800a84e:	4b05      	ldr	r3, [pc, #20]	; (800a864 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	0a9b      	lsrs	r3, r3, #10
 800a854:	f003 0307 	and.w	r3, r3, #7
 800a858:	4a03      	ldr	r2, [pc, #12]	; (800a868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a85a:	5cd3      	ldrb	r3, [r2, r3]
 800a85c:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a860:	4618      	mov	r0, r3
 800a862:	bd80      	pop	{r7, pc}
 800a864:	40023800 	.word	0x40023800
 800a868:	0801d848 	.word	0x0801d848

0800a86c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a870:	f7ff ffdc 	bl	800a82c <HAL_RCC_GetHCLKFreq>
 800a874:	4601      	mov	r1, r0
 800a876:	4b05      	ldr	r3, [pc, #20]	; (800a88c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a878:	689b      	ldr	r3, [r3, #8]
 800a87a:	0b5b      	lsrs	r3, r3, #13
 800a87c:	f003 0307 	and.w	r3, r3, #7
 800a880:	4a03      	ldr	r2, [pc, #12]	; (800a890 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a882:	5cd3      	ldrb	r3, [r2, r3]
 800a884:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a888:	4618      	mov	r0, r3
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	40023800 	.word	0x40023800
 800a890:	0801d848 	.word	0x0801d848

0800a894 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
 800a89c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	220f      	movs	r2, #15
 800a8a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a8a4:	4b12      	ldr	r3, [pc, #72]	; (800a8f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f003 0203 	and.w	r2, r3, #3
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a8b0:	4b0f      	ldr	r3, [pc, #60]	; (800a8f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a8b2:	689b      	ldr	r3, [r3, #8]
 800a8b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a8bc:	4b0c      	ldr	r3, [pc, #48]	; (800a8f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a8be:	689b      	ldr	r3, [r3, #8]
 800a8c0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a8c8:	4b09      	ldr	r3, [pc, #36]	; (800a8f0 <HAL_RCC_GetClockConfig+0x5c>)
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	08db      	lsrs	r3, r3, #3
 800a8ce:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a8d6:	4b07      	ldr	r3, [pc, #28]	; (800a8f4 <HAL_RCC_GetClockConfig+0x60>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 020f 	and.w	r2, r3, #15
 800a8de:	683b      	ldr	r3, [r7, #0]
 800a8e0:	601a      	str	r2, [r3, #0]
}
 800a8e2:	bf00      	nop
 800a8e4:	370c      	adds	r7, #12
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ec:	4770      	bx	lr
 800a8ee:	bf00      	nop
 800a8f0:	40023800 	.word	0x40023800
 800a8f4:	40023c00 	.word	0x40023c00

0800a8f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b088      	sub	sp, #32
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a904:	2300      	movs	r3, #0
 800a906:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a908:	2300      	movs	r3, #0
 800a90a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a90c:	2300      	movs	r3, #0
 800a90e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f003 0301 	and.w	r3, r3, #1
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d012      	beq.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a920:	4b69      	ldr	r3, [pc, #420]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	4a68      	ldr	r2, [pc, #416]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a926:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a92a:	6093      	str	r3, [r2, #8]
 800a92c:	4b66      	ldr	r3, [pc, #408]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a92e:	689a      	ldr	r2, [r3, #8]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a934:	4964      	ldr	r1, [pc, #400]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a936:	4313      	orrs	r3, r2
 800a938:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a942:	2301      	movs	r3, #1
 800a944:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d017      	beq.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a952:	4b5d      	ldr	r3, [pc, #372]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a954:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a958:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a960:	4959      	ldr	r1, [pc, #356]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a962:	4313      	orrs	r3, r2
 800a964:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a96c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a970:	d101      	bne.n	800a976 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a972:	2301      	movs	r3, #1
 800a974:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d101      	bne.n	800a982 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a97e:	2301      	movs	r3, #1
 800a980:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d017      	beq.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800a98e:	4b4e      	ldr	r3, [pc, #312]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a994:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a99c:	494a      	ldr	r1, [pc, #296]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a99e:	4313      	orrs	r3, r2
 800a9a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a9ac:	d101      	bne.n	800a9b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d101      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d001      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f003 0320 	and.w	r3, r3, #32
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f000 808b 	beq.w	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a9dc:	4b3a      	ldr	r3, [pc, #232]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9e0:	4a39      	ldr	r2, [pc, #228]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a9e6:	6413      	str	r3, [r2, #64]	; 0x40
 800a9e8:	4b37      	ldr	r3, [pc, #220]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a9f0:	60bb      	str	r3, [r7, #8]
 800a9f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a9f4:	4b35      	ldr	r3, [pc, #212]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a34      	ldr	r2, [pc, #208]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800a9fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa00:	f7fc fd74 	bl	80074ec <HAL_GetTick>
 800aa04:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa06:	e008      	b.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa08:	f7fc fd70 	bl	80074ec <HAL_GetTick>
 800aa0c:	4602      	mov	r2, r0
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	1ad3      	subs	r3, r2, r3
 800aa12:	2b64      	cmp	r3, #100	; 0x64
 800aa14:	d901      	bls.n	800aa1a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800aa16:	2303      	movs	r3, #3
 800aa18:	e31e      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa1a:	4b2c      	ldr	r3, [pc, #176]	; (800aacc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d0f0      	beq.n	800aa08 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aa26:	4b28      	ldr	r3, [pc, #160]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa2e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aa30:	693b      	ldr	r3, [r7, #16]
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d035      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa3e:	693a      	ldr	r2, [r7, #16]
 800aa40:	429a      	cmp	r2, r3
 800aa42:	d02e      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aa44:	4b20      	ldr	r3, [pc, #128]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aa4c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aa4e:	4b1e      	ldr	r3, [pc, #120]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa52:	4a1d      	ldr	r2, [pc, #116]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aa58:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aa5a:	4b1b      	ldr	r3, [pc, #108]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa5e:	4a1a      	ldr	r2, [pc, #104]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aa64:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800aa66:	4a18      	ldr	r2, [pc, #96]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aa6c:	4b16      	ldr	r3, [pc, #88]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa70:	f003 0301 	and.w	r3, r3, #1
 800aa74:	2b01      	cmp	r3, #1
 800aa76:	d114      	bne.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aa78:	f7fc fd38 	bl	80074ec <HAL_GetTick>
 800aa7c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa7e:	e00a      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aa80:	f7fc fd34 	bl	80074ec <HAL_GetTick>
 800aa84:	4602      	mov	r2, r0
 800aa86:	697b      	ldr	r3, [r7, #20]
 800aa88:	1ad3      	subs	r3, r2, r3
 800aa8a:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d901      	bls.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e2e0      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aa96:	4b0c      	ldr	r3, [pc, #48]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aa9a:	f003 0302 	and.w	r3, r3, #2
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0ee      	beq.n	800aa80 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaae:	d111      	bne.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800aab0:	4b05      	ldr	r3, [pc, #20]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800aabc:	4b04      	ldr	r3, [pc, #16]	; (800aad0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800aabe:	400b      	ands	r3, r1
 800aac0:	4901      	ldr	r1, [pc, #4]	; (800aac8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	608b      	str	r3, [r1, #8]
 800aac6:	e00b      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800aac8:	40023800 	.word	0x40023800
 800aacc:	40007000 	.word	0x40007000
 800aad0:	0ffffcff 	.word	0x0ffffcff
 800aad4:	4bac      	ldr	r3, [pc, #688]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	4aab      	ldr	r2, [pc, #684]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aada:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800aade:	6093      	str	r3, [r2, #8]
 800aae0:	4ba9      	ldr	r3, [pc, #676]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aaec:	49a6      	ldr	r1, [pc, #664]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f003 0310 	and.w	r3, r3, #16
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d010      	beq.n	800ab20 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aafe:	4ba2      	ldr	r3, [pc, #648]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab04:	4aa0      	ldr	r2, [pc, #640]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ab0e:	4b9e      	ldr	r3, [pc, #632]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab10:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab18:	499b      	ldr	r1, [pc, #620]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00a      	beq.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ab2c:	4b96      	ldr	r3, [pc, #600]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab32:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab3a:	4993      	ldr	r1, [pc, #588]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab3c:	4313      	orrs	r3, r2
 800ab3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d00a      	beq.n	800ab64 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ab4e:	4b8e      	ldr	r3, [pc, #568]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab54:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab5c:	498a      	ldr	r1, [pc, #552]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d00a      	beq.n	800ab86 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ab70:	4b85      	ldr	r3, [pc, #532]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab76:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab7e:	4982      	ldr	r1, [pc, #520]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab80:	4313      	orrs	r3, r2
 800ab82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00a      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ab92:	4b7d      	ldr	r3, [pc, #500]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab98:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba0:	4979      	ldr	r1, [pc, #484]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aba2:	4313      	orrs	r3, r2
 800aba4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d00a      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800abb4:	4b74      	ldr	r3, [pc, #464]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abba:	f023 0203 	bic.w	r2, r3, #3
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abc2:	4971      	ldr	r1, [pc, #452]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abc4:	4313      	orrs	r3, r2
 800abc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800abd6:	4b6c      	ldr	r3, [pc, #432]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abdc:	f023 020c 	bic.w	r2, r3, #12
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800abe4:	4968      	ldr	r1, [pc, #416]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abe6:	4313      	orrs	r3, r2
 800abe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d00a      	beq.n	800ac0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800abf8:	4b63      	ldr	r3, [pc, #396]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac06:	4960      	ldr	r1, [pc, #384]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ac1a:	4b5b      	ldr	r3, [pc, #364]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac28:	4957      	ldr	r1, [pc, #348]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00a      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ac3c:	4b52      	ldr	r3, [pc, #328]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac4a:	494f      	ldr	r1, [pc, #316]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac4c:	4313      	orrs	r3, r2
 800ac4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d00a      	beq.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ac5e:	4b4a      	ldr	r3, [pc, #296]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac6c:	4946      	ldr	r1, [pc, #280]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00a      	beq.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ac80:	4b41      	ldr	r3, [pc, #260]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac8e:	493e      	ldr	r1, [pc, #248]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac90:	4313      	orrs	r3, r2
 800ac92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d00a      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aca2:	4b39      	ldr	r3, [pc, #228]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aca8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acb0:	4935      	ldr	r1, [pc, #212]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acb2:	4313      	orrs	r3, r2
 800acb4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800acc4:	4b30      	ldr	r3, [pc, #192]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800acd2:	492d      	ldr	r1, [pc, #180]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acd4:	4313      	orrs	r3, r2
 800acd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d011      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ace6:	4b28      	ldr	r3, [pc, #160]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ace8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acf4:	4924      	ldr	r1, [pc, #144]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acf6:	4313      	orrs	r3, r2
 800acf8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad04:	d101      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ad06:	2301      	movs	r3, #1
 800ad08:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00a      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad16:	4b1c      	ldr	r3, [pc, #112]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad24:	4918      	ldr	r1, [pc, #96]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00b      	beq.n	800ad50 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800ad38:	4b13      	ldr	r3, [pc, #76]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ad48:	490f      	ldr	r1, [pc, #60]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad4a:	4313      	orrs	r3, r2
 800ad4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d005      	beq.n	800ad62 <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad5e:	f040 80d8 	bne.w	800af12 <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ad62:	4b09      	ldr	r3, [pc, #36]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	4a08      	ldr	r2, [pc, #32]	; (800ad88 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad68:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ad6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ad6e:	f7fc fbbd 	bl	80074ec <HAL_GetTick>
 800ad72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad74:	e00a      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ad76:	f7fc fbb9 	bl	80074ec <HAL_GetTick>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	697b      	ldr	r3, [r7, #20]
 800ad7e:	1ad3      	subs	r3, r2, r3
 800ad80:	2b64      	cmp	r3, #100	; 0x64
 800ad82:	d903      	bls.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ad84:	2303      	movs	r3, #3
 800ad86:	e167      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800ad88:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ad8c:	4bad      	ldr	r3, [pc, #692]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d1ee      	bne.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	f003 0301 	and.w	r3, r3, #1
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d021      	beq.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d11d      	bne.n	800ade8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800adac:	4ba5      	ldr	r3, [pc, #660]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800adae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adb2:	0c1b      	lsrs	r3, r3, #16
 800adb4:	f003 0303 	and.w	r3, r3, #3
 800adb8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800adba:	4ba2      	ldr	r3, [pc, #648]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800adbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800adc0:	0e1b      	lsrs	r3, r3, #24
 800adc2:	f003 030f 	and.w	r3, r3, #15
 800adc6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	019a      	lsls	r2, r3, #6
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	041b      	lsls	r3, r3, #16
 800add2:	431a      	orrs	r2, r3
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	061b      	lsls	r3, r3, #24
 800add8:	431a      	orrs	r2, r3
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	071b      	lsls	r3, r3, #28
 800ade0:	4998      	ldr	r1, [pc, #608]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ade2:	4313      	orrs	r3, r2
 800ade4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d004      	beq.n	800adfe <HAL_RCCEx_PeriphCLKConfig+0x506>
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adf8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800adfc:	d00a      	beq.n	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d02e      	beq.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae12:	d129      	bne.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ae14:	4b8b      	ldr	r3, [pc, #556]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae1a:	0c1b      	lsrs	r3, r3, #16
 800ae1c:	f003 0303 	and.w	r3, r3, #3
 800ae20:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ae22:	4b88      	ldr	r3, [pc, #544]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae28:	0f1b      	lsrs	r3, r3, #28
 800ae2a:	f003 0307 	and.w	r3, r3, #7
 800ae2e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	019a      	lsls	r2, r3, #6
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	041b      	lsls	r3, r3, #16
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	68db      	ldr	r3, [r3, #12]
 800ae40:	061b      	lsls	r3, r3, #24
 800ae42:	431a      	orrs	r2, r3
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	071b      	lsls	r3, r3, #28
 800ae48:	497e      	ldr	r1, [pc, #504]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae4a:	4313      	orrs	r3, r2
 800ae4c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800ae50:	4b7c      	ldr	r3, [pc, #496]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae56:	f023 021f 	bic.w	r2, r3, #31
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	4978      	ldr	r1, [pc, #480]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae62:	4313      	orrs	r3, r2
 800ae64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d01d      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ae74:	4b73      	ldr	r3, [pc, #460]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae7a:	0e1b      	lsrs	r3, r3, #24
 800ae7c:	f003 030f 	and.w	r3, r3, #15
 800ae80:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ae82:	4b70      	ldr	r3, [pc, #448]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae88:	0f1b      	lsrs	r3, r3, #28
 800ae8a:	f003 0307 	and.w	r3, r3, #7
 800ae8e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	019a      	lsls	r2, r3, #6
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	691b      	ldr	r3, [r3, #16]
 800ae9a:	041b      	lsls	r3, r3, #16
 800ae9c:	431a      	orrs	r2, r3
 800ae9e:	693b      	ldr	r3, [r7, #16]
 800aea0:	061b      	lsls	r3, r3, #24
 800aea2:	431a      	orrs	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	071b      	lsls	r3, r3, #28
 800aea8:	4966      	ldr	r1, [pc, #408]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aeaa:	4313      	orrs	r3, r2
 800aeac:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d011      	beq.n	800aee0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	685b      	ldr	r3, [r3, #4]
 800aec0:	019a      	lsls	r2, r3, #6
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	691b      	ldr	r3, [r3, #16]
 800aec6:	041b      	lsls	r3, r3, #16
 800aec8:	431a      	orrs	r2, r3
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	061b      	lsls	r3, r3, #24
 800aed0:	431a      	orrs	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	689b      	ldr	r3, [r3, #8]
 800aed6:	071b      	lsls	r3, r3, #28
 800aed8:	495a      	ldr	r1, [pc, #360]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aeda:	4313      	orrs	r3, r2
 800aedc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800aee0:	4b58      	ldr	r3, [pc, #352]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a57      	ldr	r2, [pc, #348]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aee6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800aeea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aeec:	f7fc fafe 	bl	80074ec <HAL_GetTick>
 800aef0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800aef2:	e008      	b.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800aef4:	f7fc fafa 	bl	80074ec <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	2b64      	cmp	r3, #100	; 0x64
 800af00:	d901      	bls.n	800af06 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e0a8      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af06:	4b4f      	ldr	r3, [pc, #316]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d0f0      	beq.n	800aef4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	2b01      	cmp	r3, #1
 800af16:	f040 809e 	bne.w	800b056 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800af1a:	4b4a      	ldr	r3, [pc, #296]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	4a49      	ldr	r2, [pc, #292]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af26:	f7fc fae1 	bl	80074ec <HAL_GetTick>
 800af2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800af2c:	e008      	b.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800af2e:	f7fc fadd 	bl	80074ec <HAL_GetTick>
 800af32:	4602      	mov	r2, r0
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	1ad3      	subs	r3, r2, r3
 800af38:	2b64      	cmp	r3, #100	; 0x64
 800af3a:	d901      	bls.n	800af40 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af3c:	2303      	movs	r3, #3
 800af3e:	e08b      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800af40:	4b40      	ldr	r3, [pc, #256]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af4c:	d0ef      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af56:	2b00      	cmp	r3, #0
 800af58:	d003      	beq.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d009      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d02e      	beq.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af72:	2b00      	cmp	r3, #0
 800af74:	d12a      	bne.n	800afcc <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800af76:	4b33      	ldr	r3, [pc, #204]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af7c:	0c1b      	lsrs	r3, r3, #16
 800af7e:	f003 0303 	and.w	r3, r3, #3
 800af82:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800af84:	4b2f      	ldr	r3, [pc, #188]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af8a:	0f1b      	lsrs	r3, r3, #28
 800af8c:	f003 0307 	and.w	r3, r3, #7
 800af90:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	019a      	lsls	r2, r3, #6
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	041b      	lsls	r3, r3, #16
 800af9c:	431a      	orrs	r2, r3
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	699b      	ldr	r3, [r3, #24]
 800afa2:	061b      	lsls	r3, r3, #24
 800afa4:	431a      	orrs	r2, r3
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	071b      	lsls	r3, r3, #28
 800afaa:	4926      	ldr	r1, [pc, #152]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afac:	4313      	orrs	r3, r2
 800afae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800afb2:	4b24      	ldr	r3, [pc, #144]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800afb8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afc0:	3b01      	subs	r3, #1
 800afc2:	021b      	lsls	r3, r3, #8
 800afc4:	491f      	ldr	r1, [pc, #124]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afc6:	4313      	orrs	r3, r2
 800afc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d022      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x726>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afdc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afe0:	d11d      	bne.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800afe2:	4b18      	ldr	r3, [pc, #96]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afe8:	0e1b      	lsrs	r3, r3, #24
 800afea:	f003 030f 	and.w	r3, r3, #15
 800afee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800aff0:	4b14      	ldr	r3, [pc, #80]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff6:	0f1b      	lsrs	r3, r3, #28
 800aff8:	f003 0307 	and.w	r3, r3, #7
 800affc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	695b      	ldr	r3, [r3, #20]
 800b002:	019a      	lsls	r2, r3, #6
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	6a1b      	ldr	r3, [r3, #32]
 800b008:	041b      	lsls	r3, r3, #16
 800b00a:	431a      	orrs	r2, r3
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	061b      	lsls	r3, r3, #24
 800b010:	431a      	orrs	r2, r3
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	071b      	lsls	r3, r3, #28
 800b016:	490b      	ldr	r1, [pc, #44]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b018:	4313      	orrs	r3, r2
 800b01a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b01e:	4b09      	ldr	r3, [pc, #36]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	4a08      	ldr	r2, [pc, #32]	; (800b044 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b024:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b028:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b02a:	f7fc fa5f 	bl	80074ec <HAL_GetTick>
 800b02e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b030:	e00a      	b.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b032:	f7fc fa5b 	bl	80074ec <HAL_GetTick>
 800b036:	4602      	mov	r2, r0
 800b038:	697b      	ldr	r3, [r7, #20]
 800b03a:	1ad3      	subs	r3, r2, r3
 800b03c:	2b64      	cmp	r3, #100	; 0x64
 800b03e:	d903      	bls.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b040:	2303      	movs	r3, #3
 800b042:	e009      	b.n	800b058 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800b044:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b048:	4b05      	ldr	r3, [pc, #20]	; (800b060 <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b050:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b054:	d1ed      	bne.n	800b032 <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 800b056:	2300      	movs	r3, #0
}
 800b058:	4618      	mov	r0, r3
 800b05a:	3720      	adds	r7, #32
 800b05c:	46bd      	mov	sp, r7
 800b05e:	bd80      	pop	{r7, pc}
 800b060:	40023800 	.word	0x40023800

0800b064 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b082      	sub	sp, #8
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d101      	bne.n	800b076 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b072:	2301      	movs	r3, #1
 800b074:	e022      	b.n	800b0bc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b07c:	b2db      	uxtb	r3, r3
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d105      	bne.n	800b08e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2200      	movs	r2, #0
 800b086:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f7f9 ffe9 	bl	8005060 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2203      	movs	r2, #3
 800b092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b096:	6878      	ldr	r0, [r7, #4]
 800b098:	f000 f814 	bl	800b0c4 <HAL_SD_InitCard>
 800b09c:	4603      	mov	r3, r0
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d001      	beq.n	800b0a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b0a2:	2301      	movs	r3, #1
 800b0a4:	e00a      	b.n	800b0bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}

0800b0c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b0c4:	b5b0      	push	{r4, r5, r7, lr}
 800b0c6:	b08e      	sub	sp, #56	; 0x38
 800b0c8:	af04      	add	r7, sp, #16
 800b0ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b0cc:	2300      	movs	r3, #0
 800b0ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b0d8:	2300      	movs	r3, #0
 800b0da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b0e0:	2376      	movs	r3, #118	; 0x76
 800b0e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681d      	ldr	r5, [r3, #0]
 800b0e8:	466c      	mov	r4, sp
 800b0ea:	f107 0314 	add.w	r3, r7, #20
 800b0ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b0f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b0f6:	f107 0308 	add.w	r3, r7, #8
 800b0fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	f003 fe87 	bl	800ee10 <SDMMC_Init>
 800b102:	4603      	mov	r3, r0
 800b104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d001      	beq.n	800b114 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b110:	2301      	movs	r3, #1
 800b112:	e03b      	b.n	800b18c <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685a      	ldr	r2, [r3, #4]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b122:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4618      	mov	r0, r3
 800b12a:	f003 febb 	bl	800eea4 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b13c:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 ffca 	bl	800c0d8 <SD_PowerON>
 800b144:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d00b      	beq.n	800b164 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2201      	movs	r2, #1
 800b150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b158:	6a3b      	ldr	r3, [r7, #32]
 800b15a:	431a      	orrs	r2, r3
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b160:	2301      	movs	r3, #1
 800b162:	e013      	b.n	800b18c <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f000 fee9 	bl	800bf3c <SD_InitCard>
 800b16a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b16c:	6a3b      	ldr	r3, [r7, #32]
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d00b      	beq.n	800b18a <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2201      	movs	r2, #1
 800b176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	431a      	orrs	r2, r3
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e000      	b.n	800b18c <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800b18a:	2300      	movs	r3, #0
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3728      	adds	r7, #40	; 0x28
 800b190:	46bd      	mov	sp, r7
 800b192:	bdb0      	pop	{r4, r5, r7, pc}

0800b194 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b08c      	sub	sp, #48	; 0x30
 800b198:	af00      	add	r7, sp, #0
 800b19a:	60f8      	str	r0, [r7, #12]
 800b19c:	60b9      	str	r1, [r7, #8]
 800b19e:	607a      	str	r2, [r7, #4]
 800b1a0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d107      	bne.n	800b1bc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1b0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e0cc      	b.n	800b356 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b1c2:	b2db      	uxtb	r3, r3
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	f040 80c5 	bne.w	800b354 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b1d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	441a      	add	r2, r3
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b1da:	429a      	cmp	r2, r3
 800b1dc:	d907      	bls.n	800b1ee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e0b3      	b.n	800b356 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	2203      	movs	r2, #3
 800b1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b20c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b212:	4a53      	ldr	r2, [pc, #332]	; (800b360 <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b214:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b21a:	4a52      	ldr	r2, [pc, #328]	; (800b364 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800b21c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b222:	2200      	movs	r2, #0
 800b224:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3380      	adds	r3, #128	; 0x80
 800b230:	4619      	mov	r1, r3
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	025b      	lsls	r3, r3, #9
 800b238:	089b      	lsrs	r3, r3, #2
 800b23a:	f7fc ff75 	bl	8008128 <HAL_DMA_Start_IT>
 800b23e:	4603      	mov	r3, r0
 800b240:	2b00      	cmp	r3, #0
 800b242:	d017      	beq.n	800b274 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b252:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4a43      	ldr	r2, [pc, #268]	; (800b368 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b25a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b260:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	2201      	movs	r2, #1
 800b26c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	e070      	b.n	800b356 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f042 0208 	orr.w	r2, r2, #8
 800b282:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d002      	beq.n	800b292 <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800b28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b28e:	025b      	lsls	r3, r3, #9
 800b290:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b29a:	4618      	mov	r0, r3
 800b29c:	f003 fe96 	bl	800efcc <SDMMC_CmdBlockLength>
 800b2a0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d00f      	beq.n	800b2c8 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a2e      	ldr	r2, [pc, #184]	; (800b368 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b2ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b2c4:	2301      	movs	r3, #1
 800b2c6:	e046      	b.n	800b356 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b2c8:	f04f 33ff 	mov.w	r3, #4294967295
 800b2cc:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	025b      	lsls	r3, r3, #9
 800b2d2:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b2d4:	2390      	movs	r3, #144	; 0x90
 800b2d6:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b2d8:	2302      	movs	r3, #2
 800b2da:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	f107 0210 	add.w	r2, r7, #16
 800b2ec:	4611      	mov	r1, r2
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f003 fe40 	bl	800ef74 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	2b01      	cmp	r3, #1
 800b2f8:	d90a      	bls.n	800b310 <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2282      	movs	r2, #130	; 0x82
 800b2fe:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b306:	4618      	mov	r0, r3
 800b308:	f003 fea4 	bl	800f054 <SDMMC_CmdReadMultiBlock>
 800b30c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b30e:	e009      	b.n	800b324 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2281      	movs	r2, #129	; 0x81
 800b314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b31c:	4618      	mov	r0, r3
 800b31e:	f003 fe77 	bl	800f010 <SDMMC_CmdReadSingleBlock>
 800b322:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b326:	2b00      	cmp	r3, #0
 800b328:	d012      	beq.n	800b350 <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	4a0e      	ldr	r2, [pc, #56]	; (800b368 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b330:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b338:	431a      	orrs	r2, r3
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	2201      	movs	r2, #1
 800b342:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2200      	movs	r2, #0
 800b34a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	e002      	b.n	800b356 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800b350:	2300      	movs	r3, #0
 800b352:	e000      	b.n	800b356 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800b354:	2302      	movs	r3, #2
  }
}
 800b356:	4618      	mov	r0, r3
 800b358:	3730      	adds	r7, #48	; 0x30
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}
 800b35e:	bf00      	nop
 800b360:	0800bd4b 	.word	0x0800bd4b
 800b364:	0800bdbd 	.word	0x0800bdbd
 800b368:	004005ff 	.word	0x004005ff

0800b36c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08c      	sub	sp, #48	; 0x30
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
 800b378:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d107      	bne.n	800b394 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b388:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b390:	2301      	movs	r3, #1
 800b392:	e0cf      	b.n	800b534 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b39a:	b2db      	uxtb	r3, r3
 800b39c:	2b01      	cmp	r3, #1
 800b39e:	f040 80c8 	bne.w	800b532 <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	441a      	add	r2, r3
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3b2:	429a      	cmp	r2, r3
 800b3b4:	d907      	bls.n	800b3c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	e0b6      	b.n	800b534 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	f042 021a 	orr.w	r2, r2, #26
 800b3e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3ea:	4a54      	ldr	r2, [pc, #336]	; (800b53c <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b3ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3f2:	4a53      	ldr	r2, [pc, #332]	; (800b540 <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b3f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b402:	2b01      	cmp	r3, #1
 800b404:	d002      	beq.n	800b40c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b408:	025b      	lsls	r3, r3, #9
 800b40a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b414:	4618      	mov	r0, r3
 800b416:	f003 fdd9 	bl	800efcc <SDMMC_CmdBlockLength>
 800b41a:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d00f      	beq.n	800b442 <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a47      	ldr	r2, [pc, #284]	; (800b544 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b428:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b42e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b430:	431a      	orrs	r2, r3
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	2201      	movs	r2, #1
 800b43a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e078      	b.n	800b534 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	2b01      	cmp	r3, #1
 800b446:	d90a      	bls.n	800b45e <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	22a0      	movs	r2, #160	; 0xa0
 800b44c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b454:	4618      	mov	r0, r3
 800b456:	f003 fe41 	bl	800f0dc <SDMMC_CmdWriteMultiBlock>
 800b45a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b45c:	e009      	b.n	800b472 <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2290      	movs	r2, #144	; 0x90
 800b462:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b46a:	4618      	mov	r0, r3
 800b46c:	f003 fe14 	bl	800f098 <SDMMC_CmdWriteSingleBlock>
 800b470:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b474:	2b00      	cmp	r3, #0
 800b476:	d012      	beq.n	800b49e <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	4a31      	ldr	r2, [pc, #196]	; (800b544 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b47e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b486:	431a      	orrs	r2, r3
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	2201      	movs	r2, #1
 800b490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	2200      	movs	r2, #0
 800b498:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b49a:	2301      	movs	r3, #1
 800b49c:	e04a      	b.n	800b534 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f042 0208 	orr.w	r2, r2, #8
 800b4ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b4b2:	68b9      	ldr	r1, [r7, #8]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3380      	adds	r3, #128	; 0x80
 800b4ba:	461a      	mov	r2, r3
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	025b      	lsls	r3, r3, #9
 800b4c0:	089b      	lsrs	r3, r3, #2
 800b4c2:	f7fc fe31 	bl	8008128 <HAL_DMA_Start_IT>
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d01a      	beq.n	800b502 <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f022 021a 	bic.w	r2, r2, #26
 800b4da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4a18      	ldr	r2, [pc, #96]	; (800b544 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b4e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b4fe:	2301      	movs	r3, #1
 800b500:	e018      	b.n	800b534 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b502:	f04f 33ff 	mov.w	r3, #4294967295
 800b506:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b508:	683b      	ldr	r3, [r7, #0]
 800b50a:	025b      	lsls	r3, r3, #9
 800b50c:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b50e:	2390      	movs	r3, #144	; 0x90
 800b510:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b512:	2300      	movs	r3, #0
 800b514:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b516:	2300      	movs	r3, #0
 800b518:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b51a:	2301      	movs	r3, #1
 800b51c:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f107 0210 	add.w	r2, r7, #16
 800b526:	4611      	mov	r1, r2
 800b528:	4618      	mov	r0, r3
 800b52a:	f003 fd23 	bl	800ef74 <SDMMC_ConfigData>

      return HAL_OK;
 800b52e:	2300      	movs	r3, #0
 800b530:	e000      	b.n	800b534 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b532:	2302      	movs	r3, #2
  }
}
 800b534:	4618      	mov	r0, r3
 800b536:	3730      	adds	r7, #48	; 0x30
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	0800bd21 	.word	0x0800bd21
 800b540:	0800bdbd 	.word	0x0800bdbd
 800b544:	004005ff 	.word	0x004005ff

0800b548 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b554:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d008      	beq.n	800b576 <HAL_SD_IRQHandler+0x2e>
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f003 0308 	and.w	r3, r3, #8
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d003      	beq.n	800b576 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 ffc8 	bl	800c504 <SD_Read_IT>
 800b574:	e153      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b57c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b580:	2b00      	cmp	r3, #0
 800b582:	f000 808d 	beq.w	800b6a0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b58e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681a      	ldr	r2, [r3, #0]
 800b59a:	4ba3      	ldr	r3, [pc, #652]	; (800b828 <HAL_SD_IRQHandler+0x2e0>)
 800b59c:	400b      	ands	r3, r1
 800b59e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f022 0201 	bic.w	r2, r2, #1
 800b5ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	f003 0308 	and.w	r3, r3, #8
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d039      	beq.n	800b62e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f003 0302 	and.w	r3, r3, #2
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d104      	bne.n	800b5ce <HAL_SD_IRQHandler+0x86>
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f003 0320 	and.w	r3, r3, #32
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d011      	beq.n	800b5f2 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f003 fda4 	bl	800f120 <SDMMC_CmdStopTransfer>
 800b5d8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d008      	beq.n	800b5f2 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	431a      	orrs	r2, r3
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f000 f921 	bl	800b834 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f240 523a 	movw	r2, #1338	; 0x53a
 800b5fa:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2200      	movs	r2, #0
 800b608:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	f003 0301 	and.w	r3, r3, #1
 800b610:	2b00      	cmp	r3, #0
 800b612:	d104      	bne.n	800b61e <HAL_SD_IRQHandler+0xd6>
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f003 0302 	and.w	r3, r3, #2
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d003      	beq.n	800b626 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f005 fd26 	bl	8011070 <HAL_SD_RxCpltCallback>
 800b624:	e0fb      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b626:	6878      	ldr	r0, [r7, #4]
 800b628:	f005 fd18 	bl	801105c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b62c:	e0f7      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b634:	2b00      	cmp	r3, #0
 800b636:	f000 80f2 	beq.w	800b81e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f003 0320 	and.w	r3, r3, #32
 800b640:	2b00      	cmp	r3, #0
 800b642:	d011      	beq.n	800b668 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	4618      	mov	r0, r3
 800b64a:	f003 fd69 	bl	800f120 <SDMMC_CmdStopTransfer>
 800b64e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d008      	beq.n	800b668 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	431a      	orrs	r2, r3
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 f8e6 	bl	800b834 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	f040 80d5 	bne.w	800b81e <HAL_SD_IRQHandler+0x2d6>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f003 0302 	and.w	r3, r3, #2
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	f040 80cf 	bne.w	800b81e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f022 0208 	bic.w	r2, r2, #8
 800b68e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2201      	movs	r2, #1
 800b694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b698:	6878      	ldr	r0, [r7, #4]
 800b69a:	f005 fcdf 	bl	801105c <HAL_SD_TxCpltCallback>
}
 800b69e:	e0be      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d008      	beq.n	800b6c0 <HAL_SD_IRQHandler+0x178>
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f003 0308 	and.w	r3, r3, #8
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d003      	beq.n	800b6c0 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 ff74 	bl	800c5a6 <SD_Write_IT>
 800b6be:	e0ae      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c6:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	f000 80a7 	beq.w	800b81e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6d6:	f003 0302 	and.w	r3, r3, #2
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d005      	beq.n	800b6ea <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e2:	f043 0202 	orr.w	r2, r3, #2
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6f0:	f003 0308 	and.w	r3, r3, #8
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d005      	beq.n	800b704 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fc:	f043 0208 	orr.w	r2, r3, #8
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	681b      	ldr	r3, [r3, #0]
 800b708:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b70a:	f003 0320 	and.w	r3, r3, #32
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d005      	beq.n	800b71e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b716:	f043 0220 	orr.w	r2, r3, #32
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b724:	f003 0310 	and.w	r3, r3, #16
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d005      	beq.n	800b738 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b730:	f043 0210 	orr.w	r2, r3, #16
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f240 523a 	movw	r2, #1338	; 0x53a
 800b740:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b750:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4618      	mov	r0, r3
 800b758:	f003 fce2 	bl	800f120 <SDMMC_CmdStopTransfer>
 800b75c:	4602      	mov	r2, r0
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b762:	431a      	orrs	r2, r3
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f003 0308 	and.w	r3, r3, #8
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d00a      	beq.n	800b788 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2201      	movs	r2, #1
 800b776:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2200      	movs	r2, #0
 800b77e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f000 f857 	bl	800b834 <HAL_SD_ErrorCallback>
}
 800b786:	e04a      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d045      	beq.n	800b81e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	f003 0310 	and.w	r3, r3, #16
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d104      	bne.n	800b7a6 <HAL_SD_IRQHandler+0x25e>
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f003 0320 	and.w	r3, r3, #32
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d011      	beq.n	800b7ca <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7aa:	4a20      	ldr	r2, [pc, #128]	; (800b82c <HAL_SD_IRQHandler+0x2e4>)
 800b7ac:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fc fd88 	bl	80082c8 <HAL_DMA_Abort_IT>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d02f      	beq.n	800b81e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c2:	4618      	mov	r0, r3
 800b7c4:	f000 fb4c 	bl	800be60 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b7c8:	e029      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	f003 0301 	and.w	r3, r3, #1
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d104      	bne.n	800b7de <HAL_SD_IRQHandler+0x296>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	f003 0302 	and.w	r3, r3, #2
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d011      	beq.n	800b802 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7e2:	4a13      	ldr	r2, [pc, #76]	; (800b830 <HAL_SD_IRQHandler+0x2e8>)
 800b7e4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fc fd6c 	bl	80082c8 <HAL_DMA_Abort_IT>
 800b7f0:	4603      	mov	r3, r0
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d013      	beq.n	800b81e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f000 fb67 	bl	800bece <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b800:	e00d      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	2200      	movs	r2, #0
 800b806:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b816:	6878      	ldr	r0, [r7, #4]
 800b818:	f005 fc16 	bl	8011048 <HAL_SD_AbortCallback>
}
 800b81c:	e7ff      	b.n	800b81e <HAL_SD_IRQHandler+0x2d6>
 800b81e:	bf00      	nop
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	ffff3ec5 	.word	0xffff3ec5
 800b82c:	0800be61 	.word	0x0800be61
 800b830:	0800becf 	.word	0x0800becf

0800b834 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b834:	b480      	push	{r7}
 800b836:	b083      	sub	sp, #12
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr

0800b848 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
 800b850:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b856:	0f9b      	lsrs	r3, r3, #30
 800b858:	b2da      	uxtb	r2, r3
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b862:	0e9b      	lsrs	r3, r3, #26
 800b864:	b2db      	uxtb	r3, r3
 800b866:	f003 030f 	and.w	r3, r3, #15
 800b86a:	b2da      	uxtb	r2, r3
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b874:	0e1b      	lsrs	r3, r3, #24
 800b876:	b2db      	uxtb	r3, r3
 800b878:	f003 0303 	and.w	r3, r3, #3
 800b87c:	b2da      	uxtb	r2, r3
 800b87e:	683b      	ldr	r3, [r7, #0]
 800b880:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b886:	0c1b      	lsrs	r3, r3, #16
 800b888:	b2da      	uxtb	r2, r3
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b892:	0a1b      	lsrs	r3, r3, #8
 800b894:	b2da      	uxtb	r2, r3
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b89e:	b2da      	uxtb	r2, r3
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8a8:	0d1b      	lsrs	r3, r3, #20
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	683b      	ldr	r3, [r7, #0]
 800b8ae:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8b4:	0c1b      	lsrs	r3, r3, #16
 800b8b6:	b2db      	uxtb	r3, r3
 800b8b8:	f003 030f 	and.w	r3, r3, #15
 800b8bc:	b2da      	uxtb	r2, r3
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8c6:	0bdb      	lsrs	r3, r3, #15
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	f003 0301 	and.w	r3, r3, #1
 800b8ce:	b2da      	uxtb	r2, r3
 800b8d0:	683b      	ldr	r3, [r7, #0]
 800b8d2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8d8:	0b9b      	lsrs	r3, r3, #14
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	f003 0301 	and.w	r3, r3, #1
 800b8e0:	b2da      	uxtb	r2, r3
 800b8e2:	683b      	ldr	r3, [r7, #0]
 800b8e4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8ea:	0b5b      	lsrs	r3, r3, #13
 800b8ec:	b2db      	uxtb	r3, r3
 800b8ee:	f003 0301 	and.w	r3, r3, #1
 800b8f2:	b2da      	uxtb	r2, r3
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8fc:	0b1b      	lsrs	r3, r3, #12
 800b8fe:	b2db      	uxtb	r3, r3
 800b900:	f003 0301 	and.w	r3, r3, #1
 800b904:	b2da      	uxtb	r2, r3
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	2200      	movs	r2, #0
 800b90e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b914:	2b00      	cmp	r3, #0
 800b916:	d163      	bne.n	800b9e0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b91c:	009a      	lsls	r2, r3, #2
 800b91e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b922:	4013      	ands	r3, r2
 800b924:	687a      	ldr	r2, [r7, #4]
 800b926:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b928:	0f92      	lsrs	r2, r2, #30
 800b92a:	431a      	orrs	r2, r3
 800b92c:	683b      	ldr	r3, [r7, #0]
 800b92e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b934:	0edb      	lsrs	r3, r3, #27
 800b936:	b2db      	uxtb	r3, r3
 800b938:	f003 0307 	and.w	r3, r3, #7
 800b93c:	b2da      	uxtb	r2, r3
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b946:	0e1b      	lsrs	r3, r3, #24
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	b2da      	uxtb	r2, r3
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b958:	0d5b      	lsrs	r3, r3, #21
 800b95a:	b2db      	uxtb	r3, r3
 800b95c:	f003 0307 	and.w	r3, r3, #7
 800b960:	b2da      	uxtb	r2, r3
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b96a:	0c9b      	lsrs	r3, r3, #18
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	f003 0307 	and.w	r3, r3, #7
 800b972:	b2da      	uxtb	r2, r3
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b97c:	0bdb      	lsrs	r3, r3, #15
 800b97e:	b2db      	uxtb	r3, r3
 800b980:	f003 0307 	and.w	r3, r3, #7
 800b984:	b2da      	uxtb	r2, r3
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	1c5a      	adds	r2, r3, #1
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	7e1b      	ldrb	r3, [r3, #24]
 800b998:	b2db      	uxtb	r3, r3
 800b99a:	f003 0307 	and.w	r3, r3, #7
 800b99e:	3302      	adds	r3, #2
 800b9a0:	2201      	movs	r2, #1
 800b9a2:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800b9aa:	fb02 f203 	mul.w	r2, r2, r3
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	7a1b      	ldrb	r3, [r3, #8]
 800b9b6:	b2db      	uxtb	r3, r3
 800b9b8:	f003 030f 	and.w	r3, r3, #15
 800b9bc:	2201      	movs	r2, #1
 800b9be:	409a      	lsls	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9c8:	687a      	ldr	r2, [r7, #4]
 800b9ca:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800b9cc:	0a52      	lsrs	r2, r2, #9
 800b9ce:	fb02 f203 	mul.w	r2, r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9dc:	661a      	str	r2, [r3, #96]	; 0x60
 800b9de:	e031      	b.n	800ba44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9e4:	2b01      	cmp	r3, #1
 800b9e6:	d11d      	bne.n	800ba24 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9ec:	041b      	lsls	r3, r3, #16
 800b9ee:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9f6:	0c1b      	lsrs	r3, r3, #16
 800b9f8:	431a      	orrs	r2, r3
 800b9fa:	683b      	ldr	r3, [r7, #0]
 800b9fc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	3301      	adds	r3, #1
 800ba04:	029a      	lsls	r2, r3, #10
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba18:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	661a      	str	r2, [r3, #96]	; 0x60
 800ba22:	e00f      	b.n	800ba44 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	4a58      	ldr	r2, [pc, #352]	; (800bb8c <HAL_SD_GetCardCSD+0x344>)
 800ba2a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ba40:	2301      	movs	r3, #1
 800ba42:	e09d      	b.n	800bb80 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba48:	0b9b      	lsrs	r3, r3, #14
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	f003 0301 	and.w	r3, r3, #1
 800ba50:	b2da      	uxtb	r2, r3
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba5a:	09db      	lsrs	r3, r3, #7
 800ba5c:	b2db      	uxtb	r3, r3
 800ba5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba72:	b2da      	uxtb	r2, r3
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba7c:	0fdb      	lsrs	r3, r3, #31
 800ba7e:	b2da      	uxtb	r2, r3
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba88:	0f5b      	lsrs	r3, r3, #29
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	f003 0303 	and.w	r3, r3, #3
 800ba90:	b2da      	uxtb	r2, r3
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ba9a:	0e9b      	lsrs	r3, r3, #26
 800ba9c:	b2db      	uxtb	r3, r3
 800ba9e:	f003 0307 	and.w	r3, r3, #7
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baac:	0d9b      	lsrs	r3, r3, #22
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	f003 030f 	and.w	r3, r3, #15
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800babe:	0d5b      	lsrs	r3, r3, #21
 800bac0:	b2db      	uxtb	r3, r3
 800bac2:	f003 0301 	and.w	r3, r3, #1
 800bac6:	b2da      	uxtb	r2, r3
 800bac8:	683b      	ldr	r3, [r7, #0]
 800baca:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bada:	0c1b      	lsrs	r3, r3, #16
 800badc:	b2db      	uxtb	r3, r3
 800bade:	f003 0301 	and.w	r3, r3, #1
 800bae2:	b2da      	uxtb	r2, r3
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baee:	0bdb      	lsrs	r3, r3, #15
 800baf0:	b2db      	uxtb	r3, r3
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	b2da      	uxtb	r2, r3
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb02:	0b9b      	lsrs	r3, r3, #14
 800bb04:	b2db      	uxtb	r3, r3
 800bb06:	f003 0301 	and.w	r3, r3, #1
 800bb0a:	b2da      	uxtb	r2, r3
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	0b5b      	lsrs	r3, r3, #13
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	f003 0301 	and.w	r3, r3, #1
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb2a:	0b1b      	lsrs	r3, r3, #12
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	f003 0301 	and.w	r3, r3, #1
 800bb32:	b2da      	uxtb	r2, r3
 800bb34:	683b      	ldr	r3, [r7, #0]
 800bb36:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3e:	0a9b      	lsrs	r3, r3, #10
 800bb40:	b2db      	uxtb	r3, r3
 800bb42:	f003 0303 	and.w	r3, r3, #3
 800bb46:	b2da      	uxtb	r2, r3
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb52:	0a1b      	lsrs	r3, r3, #8
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 0303 	and.w	r3, r3, #3
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb66:	085b      	lsrs	r3, r3, #1
 800bb68:	b2db      	uxtb	r3, r3
 800bb6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb6e:	b2da      	uxtb	r2, r3
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bb7e:	2300      	movs	r3, #0
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	370c      	adds	r7, #12
 800bb84:	46bd      	mov	sp, r7
 800bb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8a:	4770      	bx	lr
 800bb8c:	004005ff 	.word	0x004005ff

0800bb90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b083      	sub	sp, #12
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	6078      	str	r0, [r7, #4]
 800bb98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bbae:	683b      	ldr	r3, [r7, #0]
 800bbb0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bbb6:	683b      	ldr	r3, [r7, #0]
 800bbb8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bbce:	683b      	ldr	r3, [r7, #0]
 800bbd0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bbda:	2300      	movs	r3, #0
}
 800bbdc:	4618      	mov	r0, r3
 800bbde:	370c      	adds	r7, #12
 800bbe0:	46bd      	mov	sp, r7
 800bbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe6:	4770      	bx	lr

0800bbe8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bbe8:	b5b0      	push	{r4, r5, r7, lr}
 800bbea:	b08e      	sub	sp, #56	; 0x38
 800bbec:	af04      	add	r7, sp, #16
 800bbee:	6078      	str	r0, [r7, #4]
 800bbf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	2203      	movs	r2, #3
 800bbf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbfe:	2b03      	cmp	r3, #3
 800bc00:	d02e      	beq.n	800bc60 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bc02:	683b      	ldr	r3, [r7, #0]
 800bc04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc08:	d106      	bne.n	800bc18 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc0e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	639a      	str	r2, [r3, #56]	; 0x38
 800bc16:	e029      	b.n	800bc6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bc18:	683b      	ldr	r3, [r7, #0]
 800bc1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc1e:	d10a      	bne.n	800bc36 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f000 fb0f 	bl	800c244 <SD_WideBus_Enable>
 800bc26:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc2e:	431a      	orrs	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	639a      	str	r2, [r3, #56]	; 0x38
 800bc34:	e01a      	b.n	800bc6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d10a      	bne.n	800bc52 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fb4c 	bl	800c2da <SD_WideBus_Disable>
 800bc42:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	431a      	orrs	r2, r3
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	639a      	str	r2, [r3, #56]	; 0x38
 800bc50:	e00c      	b.n	800bc6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc56:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	639a      	str	r2, [r3, #56]	; 0x38
 800bc5e:	e005      	b.n	800bc6c <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d009      	beq.n	800bc88 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a18      	ldr	r2, [pc, #96]	; (800bcdc <HAL_SD_ConfigWideBusOperation+0xf4>)
 800bc7a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2201      	movs	r2, #1
 800bc80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bc84:	2301      	movs	r3, #1
 800bc86:	e024      	b.n	800bcd2 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	685b      	ldr	r3, [r3, #4]
 800bc8c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	68db      	ldr	r3, [r3, #12]
 800bc98:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	695b      	ldr	r3, [r3, #20]
 800bca2:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	699b      	ldr	r3, [r3, #24]
 800bca8:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681d      	ldr	r5, [r3, #0]
 800bcae:	466c      	mov	r4, sp
 800bcb0:	f107 0318 	add.w	r3, r7, #24
 800bcb4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bcb8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bcbc:	f107 030c 	add.w	r3, r7, #12
 800bcc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f003 f8a4 	bl	800ee10 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	2201      	movs	r2, #1
 800bccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bcd0:	2300      	movs	r3, #0
}
 800bcd2:	4618      	mov	r0, r3
 800bcd4:	3728      	adds	r7, #40	; 0x28
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bdb0      	pop	{r4, r5, r7, pc}
 800bcda:	bf00      	nop
 800bcdc:	004005ff 	.word	0x004005ff

0800bce0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b086      	sub	sp, #24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bce8:	2300      	movs	r3, #0
 800bcea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bcec:	f107 030c 	add.w	r3, r7, #12
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fa7e 	bl	800c1f4 <SD_SendStatus>
 800bcf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d005      	beq.n	800bd0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd04:	697b      	ldr	r3, [r7, #20]
 800bd06:	431a      	orrs	r2, r3
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	0a5b      	lsrs	r3, r3, #9
 800bd10:	f003 030f 	and.w	r3, r3, #15
 800bd14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bd16:	693b      	ldr	r3, [r7, #16]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd20:	b480      	push	{r7}
 800bd22:	b085      	sub	sp, #20
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd2c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bd3e:	bf00      	nop
 800bd40:	3714      	adds	r7, #20
 800bd42:	46bd      	mov	sp, r7
 800bd44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd48:	4770      	bx	lr

0800bd4a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bd4a:	b580      	push	{r7, lr}
 800bd4c:	b084      	sub	sp, #16
 800bd4e:	af00      	add	r7, sp, #0
 800bd50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd56:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd5c:	2b82      	cmp	r3, #130	; 0x82
 800bd5e:	d111      	bne.n	800bd84 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	4618      	mov	r0, r3
 800bd66:	f003 f9db 	bl	800f120 <SDMMC_CmdStopTransfer>
 800bd6a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d008      	beq.n	800bd84 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	431a      	orrs	r2, r3
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800bd7e:	68f8      	ldr	r0, [r7, #12]
 800bd80:	f7ff fd58 	bl	800b834 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	f022 0208 	bic.w	r2, r2, #8
 800bd92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f240 523a 	movw	r2, #1338	; 0x53a
 800bd9c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	2201      	movs	r2, #1
 800bda2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800bdac:	68f8      	ldr	r0, [r7, #12]
 800bdae:	f005 f95f 	bl	8011070 <HAL_SD_RxCpltCallback>
#endif
}
 800bdb2:	bf00      	nop
 800bdb4:	3710      	adds	r7, #16
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
	...

0800bdbc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800bdbc:	b580      	push	{r7, lr}
 800bdbe:	b086      	sub	sp, #24
 800bdc0:	af00      	add	r7, sp, #0
 800bdc2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdc8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bdca:	6878      	ldr	r0, [r7, #4]
 800bdcc:	f7fc fc28 	bl	8008620 <HAL_DMA_GetError>
 800bdd0:	4603      	mov	r3, r0
 800bdd2:	2b02      	cmp	r3, #2
 800bdd4:	d03e      	beq.n	800be54 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800bdd6:	697b      	ldr	r3, [r7, #20]
 800bdd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bddc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800bdde:	697b      	ldr	r3, [r7, #20]
 800bde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bde4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	2b01      	cmp	r3, #1
 800bdea:	d002      	beq.n	800bdf2 <SD_DMAError+0x36>
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	2b01      	cmp	r3, #1
 800bdf0:	d12d      	bne.n	800be4e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bdf2:	697b      	ldr	r3, [r7, #20]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	4a19      	ldr	r2, [pc, #100]	; (800be5c <SD_DMAError+0xa0>)
 800bdf8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800bdfa:	697b      	ldr	r3, [r7, #20]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be00:	697b      	ldr	r3, [r7, #20]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800be08:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be12:	697b      	ldr	r3, [r7, #20]
 800be14:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800be16:	6978      	ldr	r0, [r7, #20]
 800be18:	f7ff ff62 	bl	800bce0 <HAL_SD_GetCardState>
 800be1c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	2b06      	cmp	r3, #6
 800be22:	d002      	beq.n	800be2a <SD_DMAError+0x6e>
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2b05      	cmp	r3, #5
 800be28:	d10a      	bne.n	800be40 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4618      	mov	r0, r3
 800be30:	f003 f976 	bl	800f120 <SDMMC_CmdStopTransfer>
 800be34:	4602      	mov	r2, r0
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be3a:	431a      	orrs	r2, r3
 800be3c:	697b      	ldr	r3, [r7, #20]
 800be3e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800be48:	697b      	ldr	r3, [r7, #20]
 800be4a:	2200      	movs	r2, #0
 800be4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800be4e:	6978      	ldr	r0, [r7, #20]
 800be50:	f7ff fcf0 	bl	800b834 <HAL_SD_ErrorCallback>
#endif
  }
}
 800be54:	bf00      	nop
 800be56:	3718      	adds	r7, #24
 800be58:	46bd      	mov	sp, r7
 800be5a:	bd80      	pop	{r7, pc}
 800be5c:	004005ff 	.word	0x004005ff

0800be60 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800be60:	b580      	push	{r7, lr}
 800be62:	b084      	sub	sp, #16
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be6c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f240 523a 	movw	r2, #1338	; 0x53a
 800be76:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800be78:	68f8      	ldr	r0, [r7, #12]
 800be7a:	f7ff ff31 	bl	800bce0 <HAL_SD_GetCardState>
 800be7e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	2201      	movs	r2, #1
 800be84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2200      	movs	r2, #0
 800be8c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800be8e:	68bb      	ldr	r3, [r7, #8]
 800be90:	2b06      	cmp	r3, #6
 800be92:	d002      	beq.n	800be9a <SD_DMATxAbort+0x3a>
 800be94:	68bb      	ldr	r3, [r7, #8]
 800be96:	2b05      	cmp	r3, #5
 800be98:	d10a      	bne.n	800beb0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	4618      	mov	r0, r3
 800bea0:	f003 f93e 	bl	800f120 <SDMMC_CmdStopTransfer>
 800bea4:	4602      	mov	r2, r0
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beaa:	431a      	orrs	r2, r3
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d103      	bne.n	800bec0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800beb8:	68f8      	ldr	r0, [r7, #12]
 800beba:	f005 f8c5 	bl	8011048 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bebe:	e002      	b.n	800bec6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bec0:	68f8      	ldr	r0, [r7, #12]
 800bec2:	f7ff fcb7 	bl	800b834 <HAL_SD_ErrorCallback>
}
 800bec6:	bf00      	nop
 800bec8:	3710      	adds	r7, #16
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}

0800bece <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bece:	b580      	push	{r7, lr}
 800bed0:	b084      	sub	sp, #16
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beda:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f240 523a 	movw	r2, #1338	; 0x53a
 800bee4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bee6:	68f8      	ldr	r0, [r7, #12]
 800bee8:	f7ff fefa 	bl	800bce0 <HAL_SD_GetCardState>
 800beec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	2201      	movs	r2, #1
 800bef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2200      	movs	r2, #0
 800befa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	2b06      	cmp	r3, #6
 800bf00:	d002      	beq.n	800bf08 <SD_DMARxAbort+0x3a>
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	2b05      	cmp	r3, #5
 800bf06:	d10a      	bne.n	800bf1e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	f003 f907 	bl	800f120 <SDMMC_CmdStopTransfer>
 800bf12:	4602      	mov	r2, r0
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf18:	431a      	orrs	r2, r3
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bf26:	68f8      	ldr	r0, [r7, #12]
 800bf28:	f005 f88e 	bl	8011048 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bf2c:	e002      	b.n	800bf34 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bf2e:	68f8      	ldr	r0, [r7, #12]
 800bf30:	f7ff fc80 	bl	800b834 <HAL_SD_ErrorCallback>
}
 800bf34:	bf00      	nop
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bf3c:	b5b0      	push	{r4, r5, r7, lr}
 800bf3e:	b094      	sub	sp, #80	; 0x50
 800bf40:	af04      	add	r7, sp, #16
 800bf42:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bf44:	2301      	movs	r3, #1
 800bf46:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f002 ffb8 	bl	800eec2 <SDMMC_GetPowerState>
 800bf52:	4603      	mov	r3, r0
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d102      	bne.n	800bf5e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bf58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bf5c:	e0b7      	b.n	800c0ce <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf62:	2b03      	cmp	r3, #3
 800bf64:	d02f      	beq.n	800bfc6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f003 f9e3 	bl	800f336 <SDMMC_CmdSendCID>
 800bf70:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d001      	beq.n	800bf7c <SD_InitCard+0x40>
    {
      return errorstate;
 800bf78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf7a:	e0a8      	b.n	800c0ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2100      	movs	r1, #0
 800bf82:	4618      	mov	r0, r3
 800bf84:	f002 ffe3 	bl	800ef4e <SDMMC_GetResponse>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	2104      	movs	r1, #4
 800bf94:	4618      	mov	r0, r3
 800bf96:	f002 ffda 	bl	800ef4e <SDMMC_GetResponse>
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	2108      	movs	r1, #8
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f002 ffd1 	bl	800ef4e <SDMMC_GetResponse>
 800bfac:	4602      	mov	r2, r0
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	210c      	movs	r1, #12
 800bfb8:	4618      	mov	r0, r3
 800bfba:	f002 ffc8 	bl	800ef4e <SDMMC_GetResponse>
 800bfbe:	4602      	mov	r2, r0
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfca:	2b03      	cmp	r3, #3
 800bfcc:	d00d      	beq.n	800bfea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f107 020e 	add.w	r2, r7, #14
 800bfd6:	4611      	mov	r1, r2
 800bfd8:	4618      	mov	r0, r3
 800bfda:	f003 f9e9 	bl	800f3b0 <SDMMC_CmdSetRelAdd>
 800bfde:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d001      	beq.n	800bfea <SD_InitCard+0xae>
    {
      return errorstate;
 800bfe6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe8:	e071      	b.n	800c0ce <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfee:	2b03      	cmp	r3, #3
 800bff0:	d036      	beq.n	800c060 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800bff2:	89fb      	ldrh	r3, [r7, #14]
 800bff4:	461a      	mov	r2, r3
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681a      	ldr	r2, [r3, #0]
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c002:	041b      	lsls	r3, r3, #16
 800c004:	4619      	mov	r1, r3
 800c006:	4610      	mov	r0, r2
 800c008:	f003 f9b3 	bl	800f372 <SDMMC_CmdSendCSD>
 800c00c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c00e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d001      	beq.n	800c018 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c016:	e05a      	b.n	800c0ce <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	2100      	movs	r1, #0
 800c01e:	4618      	mov	r0, r3
 800c020:	f002 ff95 	bl	800ef4e <SDMMC_GetResponse>
 800c024:	4602      	mov	r2, r0
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	2104      	movs	r1, #4
 800c030:	4618      	mov	r0, r3
 800c032:	f002 ff8c 	bl	800ef4e <SDMMC_GetResponse>
 800c036:	4602      	mov	r2, r0
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	2108      	movs	r1, #8
 800c042:	4618      	mov	r0, r3
 800c044:	f002 ff83 	bl	800ef4e <SDMMC_GetResponse>
 800c048:	4602      	mov	r2, r0
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	210c      	movs	r1, #12
 800c054:	4618      	mov	r0, r3
 800c056:	f002 ff7a 	bl	800ef4e <SDMMC_GetResponse>
 800c05a:	4602      	mov	r2, r0
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2104      	movs	r1, #4
 800c066:	4618      	mov	r0, r3
 800c068:	f002 ff71 	bl	800ef4e <SDMMC_GetResponse>
 800c06c:	4603      	mov	r3, r0
 800c06e:	0d1a      	lsrs	r2, r3, #20
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c074:	f107 0310 	add.w	r3, r7, #16
 800c078:	4619      	mov	r1, r3
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f7ff fbe4 	bl	800b848 <HAL_SD_GetCardCSD>
 800c080:	4603      	mov	r3, r0
 800c082:	2b00      	cmp	r3, #0
 800c084:	d002      	beq.n	800c08c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c086:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c08a:	e020      	b.n	800c0ce <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	6819      	ldr	r1, [r3, #0]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c094:	041b      	lsls	r3, r3, #16
 800c096:	f04f 0400 	mov.w	r4, #0
 800c09a:	461a      	mov	r2, r3
 800c09c:	4623      	mov	r3, r4
 800c09e:	4608      	mov	r0, r1
 800c0a0:	f003 f860 	bl	800f164 <SDMMC_CmdSelDesel>
 800c0a4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <SD_InitCard+0x174>
  {
    return errorstate;
 800c0ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0ae:	e00e      	b.n	800c0ce <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681d      	ldr	r5, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	466c      	mov	r4, sp
 800c0b8:	f103 0210 	add.w	r2, r3, #16
 800c0bc:	ca07      	ldmia	r2, {r0, r1, r2}
 800c0be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0c2:	3304      	adds	r3, #4
 800c0c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0c6:	4628      	mov	r0, r5
 800c0c8:	f002 fea2 	bl	800ee10 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c0cc:	2300      	movs	r3, #0
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3740      	adds	r7, #64	; 0x40
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c0d8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c0d8:	b580      	push	{r7, lr}
 800c0da:	b086      	sub	sp, #24
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	617b      	str	r3, [r7, #20]
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f003 f85a 	bl	800f1aa <SDMMC_CmdGoIdleState>
 800c0f6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d001      	beq.n	800c102 <SD_PowerON+0x2a>
  {
    return errorstate;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	e072      	b.n	800c1e8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	4618      	mov	r0, r3
 800c108:	f003 f86d 	bl	800f1e6 <SDMMC_CmdOperCond>
 800c10c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00d      	beq.n	800c130 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2200      	movs	r2, #0
 800c118:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4618      	mov	r0, r3
 800c120:	f003 f843 	bl	800f1aa <SDMMC_CmdGoIdleState>
 800c124:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d004      	beq.n	800c136 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	e05b      	b.n	800c1e8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2201      	movs	r2, #1
 800c134:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c13a:	2b01      	cmp	r3, #1
 800c13c:	d137      	bne.n	800c1ae <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	2100      	movs	r1, #0
 800c144:	4618      	mov	r0, r3
 800c146:	f003 f86d 	bl	800f224 <SDMMC_CmdAppCommand>
 800c14a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d02d      	beq.n	800c1ae <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c152:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c156:	e047      	b.n	800c1e8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	2100      	movs	r1, #0
 800c15e:	4618      	mov	r0, r3
 800c160:	f003 f860 	bl	800f224 <SDMMC_CmdAppCommand>
 800c164:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d001      	beq.n	800c170 <SD_PowerON+0x98>
    {
      return errorstate;
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	e03b      	b.n	800c1e8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	491e      	ldr	r1, [pc, #120]	; (800c1f0 <SD_PowerON+0x118>)
 800c176:	4618      	mov	r0, r3
 800c178:	f003 f876 	bl	800f268 <SDMMC_CmdAppOperCommand>
 800c17c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2b00      	cmp	r3, #0
 800c182:	d002      	beq.n	800c18a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c188:	e02e      	b.n	800c1e8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2100      	movs	r1, #0
 800c190:	4618      	mov	r0, r3
 800c192:	f002 fedc 	bl	800ef4e <SDMMC_GetResponse>
 800c196:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	0fdb      	lsrs	r3, r3, #31
 800c19c:	2b01      	cmp	r3, #1
 800c19e:	d101      	bne.n	800c1a4 <SD_PowerON+0xcc>
 800c1a0:	2301      	movs	r3, #1
 800c1a2:	e000      	b.n	800c1a6 <SD_PowerON+0xce>
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	613b      	str	r3, [r7, #16]

    count++;
 800c1a8:	68bb      	ldr	r3, [r7, #8]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c1b4:	4293      	cmp	r3, r2
 800c1b6:	d802      	bhi.n	800c1be <SD_PowerON+0xe6>
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d0cc      	beq.n	800c158 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c1c4:	4293      	cmp	r3, r2
 800c1c6:	d902      	bls.n	800c1ce <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c1c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c1cc:	e00c      	b.n	800c1e8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d003      	beq.n	800c1e0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	2201      	movs	r2, #1
 800c1dc:	645a      	str	r2, [r3, #68]	; 0x44
 800c1de:	e002      	b.n	800c1e6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3718      	adds	r7, #24
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	c1100000 	.word	0xc1100000

0800c1f4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b084      	sub	sp, #16
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
 800c1fc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c1fe:	683b      	ldr	r3, [r7, #0]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d102      	bne.n	800c20a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c204:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c208:	e018      	b.n	800c23c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c212:	041b      	lsls	r3, r3, #16
 800c214:	4619      	mov	r1, r3
 800c216:	4610      	mov	r0, r2
 800c218:	f003 f8eb 	bl	800f3f2 <SDMMC_CmdSendStatus>
 800c21c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d001      	beq.n	800c228 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	e009      	b.n	800c23c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	2100      	movs	r1, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f002 fe8d 	bl	800ef4e <SDMMC_GetResponse>
 800c234:	4602      	mov	r2, r0
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	3710      	adds	r7, #16
 800c240:	46bd      	mov	sp, r7
 800c242:	bd80      	pop	{r7, pc}

0800c244 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c244:	b580      	push	{r7, lr}
 800c246:	b086      	sub	sp, #24
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c24c:	2300      	movs	r3, #0
 800c24e:	60fb      	str	r3, [r7, #12]
 800c250:	2300      	movs	r3, #0
 800c252:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	2100      	movs	r1, #0
 800c25a:	4618      	mov	r0, r3
 800c25c:	f002 fe77 	bl	800ef4e <SDMMC_GetResponse>
 800c260:	4603      	mov	r3, r0
 800c262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c266:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c26a:	d102      	bne.n	800c272 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c26c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c270:	e02f      	b.n	800c2d2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c272:	f107 030c 	add.w	r3, r7, #12
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 f879 	bl	800c370 <SD_FindSCR>
 800c27e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d001      	beq.n	800c28a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	e023      	b.n	800c2d2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c290:	2b00      	cmp	r3, #0
 800c292:	d01c      	beq.n	800c2ce <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681a      	ldr	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c29c:	041b      	lsls	r3, r3, #16
 800c29e:	4619      	mov	r1, r3
 800c2a0:	4610      	mov	r0, r2
 800c2a2:	f002 ffbf 	bl	800f224 <SDMMC_CmdAppCommand>
 800c2a6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d001      	beq.n	800c2b2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	e00f      	b.n	800c2d2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	2102      	movs	r1, #2
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f002 fff9 	bl	800f2b0 <SDMMC_CmdBusWidth>
 800c2be:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d001      	beq.n	800c2ca <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	e003      	b.n	800c2d2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	e001      	b.n	800c2d2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c2ce:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	3718      	adds	r7, #24
 800c2d6:	46bd      	mov	sp, r7
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b086      	sub	sp, #24
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	60fb      	str	r3, [r7, #12]
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2100      	movs	r1, #0
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f002 fe2c 	bl	800ef4e <SDMMC_GetResponse>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c300:	d102      	bne.n	800c308 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c302:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c306:	e02f      	b.n	800c368 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c308:	f107 030c 	add.w	r3, r7, #12
 800c30c:	4619      	mov	r1, r3
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f000 f82e 	bl	800c370 <SD_FindSCR>
 800c314:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c316:	697b      	ldr	r3, [r7, #20]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d001      	beq.n	800c320 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c31c:	697b      	ldr	r3, [r7, #20]
 800c31e:	e023      	b.n	800c368 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c326:	2b00      	cmp	r3, #0
 800c328:	d01c      	beq.n	800c364 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681a      	ldr	r2, [r3, #0]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c332:	041b      	lsls	r3, r3, #16
 800c334:	4619      	mov	r1, r3
 800c336:	4610      	mov	r0, r2
 800c338:	f002 ff74 	bl	800f224 <SDMMC_CmdAppCommand>
 800c33c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d001      	beq.n	800c348 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	e00f      	b.n	800c368 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2100      	movs	r1, #0
 800c34e:	4618      	mov	r0, r3
 800c350:	f002 ffae 	bl	800f2b0 <SDMMC_CmdBusWidth>
 800c354:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d001      	beq.n	800c360 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	e003      	b.n	800c368 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c360:	2300      	movs	r3, #0
 800c362:	e001      	b.n	800c368 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c364:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c368:	4618      	mov	r0, r3
 800c36a:	3718      	adds	r7, #24
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bd80      	pop	{r7, pc}

0800c370 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c370:	b590      	push	{r4, r7, lr}
 800c372:	b08f      	sub	sp, #60	; 0x3c
 800c374:	af00      	add	r7, sp, #0
 800c376:	6078      	str	r0, [r7, #4]
 800c378:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c37a:	f7fb f8b7 	bl	80074ec <HAL_GetTick>
 800c37e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c380:	2300      	movs	r3, #0
 800c382:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c384:	2300      	movs	r3, #0
 800c386:	60bb      	str	r3, [r7, #8]
 800c388:	2300      	movs	r3, #0
 800c38a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	2108      	movs	r1, #8
 800c396:	4618      	mov	r0, r3
 800c398:	f002 fe18 	bl	800efcc <SDMMC_CmdBlockLength>
 800c39c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c39e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d001      	beq.n	800c3a8 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c3a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3a6:	e0a9      	b.n	800c4fc <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681a      	ldr	r2, [r3, #0]
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3b0:	041b      	lsls	r3, r3, #16
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	f002 ff35 	bl	800f224 <SDMMC_CmdAppCommand>
 800c3ba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d001      	beq.n	800c3c6 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c3c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3c4:	e09a      	b.n	800c4fc <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c3c6:	f04f 33ff 	mov.w	r3, #4294967295
 800c3ca:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c3cc:	2308      	movs	r3, #8
 800c3ce:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c3d0:	2330      	movs	r3, #48	; 0x30
 800c3d2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c3d4:	2302      	movs	r3, #2
 800c3d6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c3d8:	2300      	movs	r3, #0
 800c3da:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c3dc:	2301      	movs	r3, #1
 800c3de:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	f107 0210 	add.w	r2, r7, #16
 800c3e8:	4611      	mov	r1, r2
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	f002 fdc2 	bl	800ef74 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f002 ff7d 	bl	800f2f4 <SDMMC_CmdSendSCR>
 800c3fa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c3fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d022      	beq.n	800c448 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c404:	e07a      	b.n	800c4fc <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c40c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c410:	2b00      	cmp	r3, #0
 800c412:	d00e      	beq.n	800c432 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	6819      	ldr	r1, [r3, #0]
 800c418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c41a:	009b      	lsls	r3, r3, #2
 800c41c:	f107 0208 	add.w	r2, r7, #8
 800c420:	18d4      	adds	r4, r2, r3
 800c422:	4608      	mov	r0, r1
 800c424:	f002 fd20 	bl	800ee68 <SDMMC_ReadFIFO>
 800c428:	4603      	mov	r3, r0
 800c42a:	6023      	str	r3, [r4, #0]
      index++;
 800c42c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c42e:	3301      	adds	r3, #1
 800c430:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c432:	f7fb f85b 	bl	80074ec <HAL_GetTick>
 800c436:	4602      	mov	r2, r0
 800c438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43a:	1ad3      	subs	r3, r2, r3
 800c43c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c440:	d102      	bne.n	800c448 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c446:	e059      	b.n	800c4fc <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c44e:	f240 432a 	movw	r3, #1066	; 0x42a
 800c452:	4013      	ands	r3, r2
 800c454:	2b00      	cmp	r3, #0
 800c456:	d0d6      	beq.n	800c406 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45e:	f003 0308 	and.w	r3, r3, #8
 800c462:	2b00      	cmp	r3, #0
 800c464:	d005      	beq.n	800c472 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2208      	movs	r2, #8
 800c46c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c46e:	2308      	movs	r3, #8
 800c470:	e044      	b.n	800c4fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c478:	f003 0302 	and.w	r3, r3, #2
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d005      	beq.n	800c48c <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	2202      	movs	r2, #2
 800c486:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c488:	2302      	movs	r3, #2
 800c48a:	e037      	b.n	800c4fc <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c492:	f003 0320 	and.w	r3, r3, #32
 800c496:	2b00      	cmp	r3, #0
 800c498:	d005      	beq.n	800c4a6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2220      	movs	r2, #32
 800c4a0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c4a2:	2320      	movs	r3, #32
 800c4a4:	e02a      	b.n	800c4fc <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f240 523a 	movw	r2, #1338	; 0x53a
 800c4ae:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c4b0:	68fb      	ldr	r3, [r7, #12]
 800c4b2:	061a      	lsls	r2, r3, #24
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	021b      	lsls	r3, r3, #8
 800c4b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4bc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	0a1b      	lsrs	r3, r3, #8
 800c4c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c4c6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	0e1b      	lsrs	r3, r3, #24
 800c4cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d0:	601a      	str	r2, [r3, #0]
    scr++;
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d4:	3304      	adds	r3, #4
 800c4d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	061a      	lsls	r2, r3, #24
 800c4dc:	68bb      	ldr	r3, [r7, #8]
 800c4de:	021b      	lsls	r3, r3, #8
 800c4e0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c4e4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	0a1b      	lsrs	r3, r3, #8
 800c4ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c4ee:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	0e1b      	lsrs	r3, r3, #24
 800c4f4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c4fa:	2300      	movs	r3, #0
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	373c      	adds	r7, #60	; 0x3c
 800c500:	46bd      	mov	sp, r7
 800c502:	bd90      	pop	{r4, r7, pc}

0800c504 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b086      	sub	sp, #24
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c510:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c516:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d03f      	beq.n	800c59e <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c51e:	2300      	movs	r3, #0
 800c520:	617b      	str	r3, [r7, #20]
 800c522:	e033      	b.n	800c58c <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	4618      	mov	r0, r3
 800c52a:	f002 fc9d 	bl	800ee68 <SDMMC_ReadFIFO>
 800c52e:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c530:	68bb      	ldr	r3, [r7, #8]
 800c532:	b2da      	uxtb	r2, r3
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	3301      	adds	r3, #1
 800c53c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c53e:	693b      	ldr	r3, [r7, #16]
 800c540:	3b01      	subs	r3, #1
 800c542:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	0a1b      	lsrs	r3, r3, #8
 800c548:	b2da      	uxtb	r2, r3
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	3301      	adds	r3, #1
 800c552:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	3b01      	subs	r3, #1
 800c558:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	0c1b      	lsrs	r3, r3, #16
 800c55e:	b2da      	uxtb	r2, r3
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	3301      	adds	r3, #1
 800c568:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c56a:	693b      	ldr	r3, [r7, #16]
 800c56c:	3b01      	subs	r3, #1
 800c56e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	0e1b      	lsrs	r3, r3, #24
 800c574:	b2da      	uxtb	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	3301      	adds	r3, #1
 800c57e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c580:	693b      	ldr	r3, [r7, #16]
 800c582:	3b01      	subs	r3, #1
 800c584:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	3301      	adds	r3, #1
 800c58a:	617b      	str	r3, [r7, #20]
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b07      	cmp	r3, #7
 800c590:	d9c8      	bls.n	800c524 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	68fa      	ldr	r2, [r7, #12]
 800c596:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	693a      	ldr	r2, [r7, #16]
 800c59c:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c59e:	bf00      	nop
 800c5a0:	3718      	adds	r7, #24
 800c5a2:	46bd      	mov	sp, r7
 800c5a4:	bd80      	pop	{r7, pc}

0800c5a6 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c5a6:	b580      	push	{r7, lr}
 800c5a8:	b086      	sub	sp, #24
 800c5aa:	af00      	add	r7, sp, #0
 800c5ac:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a1b      	ldr	r3, [r3, #32]
 800c5b2:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b8:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d043      	beq.n	800c648 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c5c0:	2300      	movs	r3, #0
 800c5c2:	617b      	str	r3, [r7, #20]
 800c5c4:	e037      	b.n	800c636 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	781b      	ldrb	r3, [r3, #0]
 800c5ca:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	3301      	adds	r3, #1
 800c5d0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	3b01      	subs	r3, #1
 800c5d6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	021a      	lsls	r2, r3, #8
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	4313      	orrs	r3, r2
 800c5e2:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	3301      	adds	r3, #1
 800c5e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	3b01      	subs	r3, #1
 800c5ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	041a      	lsls	r2, r3, #16
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	3301      	adds	r3, #1
 800c600:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	3b01      	subs	r3, #1
 800c606:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	781b      	ldrb	r3, [r3, #0]
 800c60c:	061a      	lsls	r2, r3, #24
 800c60e:	68bb      	ldr	r3, [r7, #8]
 800c610:	4313      	orrs	r3, r2
 800c612:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	3301      	adds	r3, #1
 800c618:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	3b01      	subs	r3, #1
 800c61e:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	f107 0208 	add.w	r2, r7, #8
 800c628:	4611      	mov	r1, r2
 800c62a:	4618      	mov	r0, r3
 800c62c:	f002 fc29 	bl	800ee82 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	3301      	adds	r3, #1
 800c634:	617b      	str	r3, [r7, #20]
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	2b07      	cmp	r3, #7
 800c63a:	d9c4      	bls.n	800c5c6 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	68fa      	ldr	r2, [r7, #12]
 800c640:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c648:	bf00      	nop
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b084      	sub	sp, #16
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d101      	bne.n	800c662 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c65e:	2301      	movs	r3, #1
 800c660:	e084      	b.n	800c76c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	2200      	movs	r2, #0
 800c666:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d106      	bne.n	800c682 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	2200      	movs	r2, #0
 800c678:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c67c:	6878      	ldr	r0, [r7, #4]
 800c67e:	f7f8 fdd9 	bl	8005234 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	2202      	movs	r2, #2
 800c686:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	681a      	ldr	r2, [r3, #0]
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c698:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6a2:	d902      	bls.n	800c6aa <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	60fb      	str	r3, [r7, #12]
 800c6a8:	e002      	b.n	800c6b0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c6aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6ae:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	68db      	ldr	r3, [r3, #12]
 800c6b4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c6b8:	d007      	beq.n	800c6ca <HAL_SPI_Init+0x7a>
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	68db      	ldr	r3, [r3, #12]
 800c6be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6c2:	d002      	beq.n	800c6ca <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d10b      	bne.n	800c6ea <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c6da:	d903      	bls.n	800c6e4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2202      	movs	r2, #2
 800c6e0:	631a      	str	r2, [r3, #48]	; 0x30
 800c6e2:	e002      	b.n	800c6ea <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2201      	movs	r2, #1
 800c6e8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	685a      	ldr	r2, [r3, #4]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	689b      	ldr	r3, [r3, #8]
 800c6f2:	431a      	orrs	r2, r3
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	691b      	ldr	r3, [r3, #16]
 800c6f8:	431a      	orrs	r2, r3
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	431a      	orrs	r2, r3
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	699b      	ldr	r3, [r3, #24]
 800c704:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c708:	431a      	orrs	r2, r3
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	69db      	ldr	r3, [r3, #28]
 800c70e:	431a      	orrs	r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6a1b      	ldr	r3, [r3, #32]
 800c714:	ea42 0103 	orr.w	r1, r2, r3
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	430a      	orrs	r2, r1
 800c722:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	699b      	ldr	r3, [r3, #24]
 800c728:	0c1b      	lsrs	r3, r3, #16
 800c72a:	f003 0204 	and.w	r2, r3, #4
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c732:	431a      	orrs	r2, r3
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c738:	431a      	orrs	r2, r3
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	ea42 0103 	orr.w	r1, r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	430a      	orrs	r2, r1
 800c74a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	69da      	ldr	r2, [r3, #28]
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c75a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2200      	movs	r2, #0
 800c760:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2201      	movs	r2, #1
 800c766:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c76a:	2300      	movs	r3, #0
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3710      	adds	r7, #16
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b086      	sub	sp, #24
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c782:	2300      	movs	r3, #0
 800c784:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	689b      	ldr	r3, [r3, #8]
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d110      	bne.n	800c7b0 <HAL_SPI_Receive_DMA+0x3c>
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c796:	d10b      	bne.n	800c7b0 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	2204      	movs	r2, #4
 800c79c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c7a0:	88fb      	ldrh	r3, [r7, #6]
 800c7a2:	68ba      	ldr	r2, [r7, #8]
 800c7a4:	68b9      	ldr	r1, [r7, #8]
 800c7a6:	68f8      	ldr	r0, [r7, #12]
 800c7a8:	f000 f900 	bl	800c9ac <HAL_SPI_TransmitReceive_DMA>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	e0f3      	b.n	800c998 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c7b6:	2b01      	cmp	r3, #1
 800c7b8:	d101      	bne.n	800c7be <HAL_SPI_Receive_DMA+0x4a>
 800c7ba:	2302      	movs	r3, #2
 800c7bc:	e0ec      	b.n	800c998 <HAL_SPI_Receive_DMA+0x224>
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b01      	cmp	r3, #1
 800c7d0:	d002      	beq.n	800c7d8 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800c7d2:	2302      	movs	r3, #2
 800c7d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c7d6:	e0da      	b.n	800c98e <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800c7d8:	68bb      	ldr	r3, [r7, #8]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d002      	beq.n	800c7e4 <HAL_SPI_Receive_DMA+0x70>
 800c7de:	88fb      	ldrh	r3, [r7, #6]
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d102      	bne.n	800c7ea <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c7e8:	e0d1      	b.n	800c98e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2204      	movs	r2, #4
 800c7ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	2200      	movs	r2, #0
 800c7f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	68ba      	ldr	r2, [r7, #8]
 800c7fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	88fa      	ldrh	r2, [r7, #6]
 800c802:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	88fa      	ldrh	r2, [r7, #6]
 800c80a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c80e:	68fb      	ldr	r3, [r7, #12]
 800c810:	2200      	movs	r2, #0
 800c812:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2200      	movs	r2, #0
 800c818:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	2200      	movs	r2, #0
 800c81e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	2200      	movs	r2, #0
 800c824:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	689b      	ldr	r3, [r3, #8]
 800c82a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c82e:	d107      	bne.n	800c840 <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	681a      	ldr	r2, [r3, #0]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c83e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	685a      	ldr	r2, [r3, #4]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c84e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c858:	d908      	bls.n	800c86c <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	685a      	ldr	r2, [r3, #4]
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c868:	605a      	str	r2, [r3, #4]
 800c86a:	e042      	b.n	800c8f2 <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	685a      	ldr	r2, [r3, #4]
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c87a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c880:	699b      	ldr	r3, [r3, #24]
 800c882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c886:	d134      	bne.n	800c8f2 <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c888:	68fb      	ldr	r3, [r7, #12]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	685a      	ldr	r2, [r3, #4]
 800c88e:	68fb      	ldr	r3, [r7, #12]
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c896:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c89e:	b29b      	uxth	r3, r3
 800c8a0:	f003 0301 	and.w	r3, r3, #1
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d111      	bne.n	800c8cc <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	685a      	ldr	r2, [r3, #4]
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8b6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	085b      	lsrs	r3, r3, #1
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c8ca:	e012      	b.n	800c8f2 <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	685a      	ldr	r2, [r3, #4]
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c8da:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c8e2:	b29b      	uxth	r3, r3
 800c8e4:	085b      	lsrs	r3, r3, #1
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	b29a      	uxth	r2, r3
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8f6:	4a2a      	ldr	r2, [pc, #168]	; (800c9a0 <HAL_SPI_Receive_DMA+0x22c>)
 800c8f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8fe:	4a29      	ldr	r2, [pc, #164]	; (800c9a4 <HAL_SPI_Receive_DMA+0x230>)
 800c900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c906:	4a28      	ldr	r2, [pc, #160]	; (800c9a8 <HAL_SPI_Receive_DMA+0x234>)
 800c908:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c90e:	2200      	movs	r2, #0
 800c910:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	330c      	adds	r3, #12
 800c91c:	4619      	mov	r1, r3
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c922:	461a      	mov	r2, r3
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c92a:	b29b      	uxth	r3, r3
 800c92c:	f7fb fbfc 	bl	8008128 <HAL_DMA_Start_IT>
 800c930:	4603      	mov	r3, r0
 800c932:	2b00      	cmp	r3, #0
 800c934:	d00c      	beq.n	800c950 <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c93a:	f043 0210 	orr.w	r2, r3, #16
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	2201      	movs	r2, #1
 800c94a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c94e:	e01e      	b.n	800c98e <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c95a:	2b40      	cmp	r3, #64	; 0x40
 800c95c:	d007      	beq.n	800c96e <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	681a      	ldr	r2, [r3, #0]
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c96c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	685a      	ldr	r2, [r3, #4]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f042 0220 	orr.w	r2, r2, #32
 800c97c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f042 0201 	orr.w	r2, r2, #1
 800c98c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800c996:	7dfb      	ldrb	r3, [r7, #23]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3718      	adds	r7, #24
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	0800d02d 	.word	0x0800d02d
 800c9a4:	0800cf15 	.word	0x0800cf15
 800c9a8:	0800d065 	.word	0x0800d065

0800c9ac <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
 800c9b8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d101      	bne.n	800c9cc <HAL_SPI_TransmitReceive_DMA+0x20>
 800c9c8:	2302      	movs	r3, #2
 800c9ca:	e16c      	b.n	800cca6 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9da:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800c9e2:	7dbb      	ldrb	r3, [r7, #22]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d00d      	beq.n	800ca04 <HAL_SPI_TransmitReceive_DMA+0x58>
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9ee:	d106      	bne.n	800c9fe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	689b      	ldr	r3, [r3, #8]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d102      	bne.n	800c9fe <HAL_SPI_TransmitReceive_DMA+0x52>
 800c9f8:	7dbb      	ldrb	r3, [r7, #22]
 800c9fa:	2b04      	cmp	r3, #4
 800c9fc:	d002      	beq.n	800ca04 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800c9fe:	2302      	movs	r3, #2
 800ca00:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca02:	e14b      	b.n	800cc9c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d005      	beq.n	800ca16 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ca10:	887b      	ldrh	r3, [r7, #2]
 800ca12:	2b00      	cmp	r3, #0
 800ca14:	d102      	bne.n	800ca1c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ca16:	2301      	movs	r3, #1
 800ca18:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca1a:	e13f      	b.n	800cc9c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	2b04      	cmp	r3, #4
 800ca26:	d003      	beq.n	800ca30 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	2205      	movs	r2, #5
 800ca2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	68ba      	ldr	r2, [r7, #8]
 800ca3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	887a      	ldrh	r2, [r7, #2]
 800ca40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	887a      	ldrh	r2, [r7, #2]
 800ca46:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	687a      	ldr	r2, [r7, #4]
 800ca4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	887a      	ldrh	r2, [r7, #2]
 800ca52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	887a      	ldrh	r2, [r7, #2]
 800ca5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	2200      	movs	r2, #0
 800ca62:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2200      	movs	r2, #0
 800ca68:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	685a      	ldr	r2, [r3, #4]
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800ca78:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca82:	d908      	bls.n	800ca96 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	685a      	ldr	r2, [r3, #4]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca92:	605a      	str	r2, [r3, #4]
 800ca94:	e06f      	b.n	800cb76 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	685a      	ldr	r2, [r3, #4]
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800caa4:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cab0:	d126      	bne.n	800cb00 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cab6:	f003 0301 	and.w	r3, r3, #1
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d10f      	bne.n	800cade <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	685a      	ldr	r2, [r3, #4]
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cacc:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cad2:	b29b      	uxth	r3, r3
 800cad4:	085b      	lsrs	r3, r3, #1
 800cad6:	b29a      	uxth	r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cadc:	e010      	b.n	800cb00 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	685a      	ldr	r2, [r3, #4]
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800caec:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	085b      	lsrs	r3, r3, #1
 800caf6:	b29b      	uxth	r3, r3
 800caf8:	3301      	adds	r3, #1
 800cafa:	b29a      	uxth	r2, r3
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb04:	699b      	ldr	r3, [r3, #24]
 800cb06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb0a:	d134      	bne.n	800cb76 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	685a      	ldr	r2, [r3, #4]
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb1a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb22:	b29b      	uxth	r3, r3
 800cb24:	f003 0301 	and.w	r3, r3, #1
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d111      	bne.n	800cb50 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	685a      	ldr	r2, [r3, #4]
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cb3a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb42:	b29b      	uxth	r3, r3
 800cb44:	085b      	lsrs	r3, r3, #1
 800cb46:	b29a      	uxth	r2, r3
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cb4e:	e012      	b.n	800cb76 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cb5e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb66:	b29b      	uxth	r3, r3
 800cb68:	085b      	lsrs	r3, r3, #1
 800cb6a:	b29b      	uxth	r3, r3
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	b29a      	uxth	r2, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b04      	cmp	r3, #4
 800cb80:	d108      	bne.n	800cb94 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb86:	4a4a      	ldr	r2, [pc, #296]	; (800ccb0 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cb88:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb8e:	4a49      	ldr	r2, [pc, #292]	; (800ccb4 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800cb90:	63da      	str	r2, [r3, #60]	; 0x3c
 800cb92:	e007      	b.n	800cba4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb98:	4a47      	ldr	r2, [pc, #284]	; (800ccb8 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800cb9a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba0:	4a46      	ldr	r2, [pc, #280]	; (800ccbc <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cba2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cba8:	4a45      	ldr	r2, [pc, #276]	; (800ccc0 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800cbaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	330c      	adds	r3, #12
 800cbbe:	4619      	mov	r1, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbc4:	461a      	mov	r2, r3
 800cbc6:	68fb      	ldr	r3, [r7, #12]
 800cbc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbcc:	b29b      	uxth	r3, r3
 800cbce:	f7fb faab 	bl	8008128 <HAL_DMA_Start_IT>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d00c      	beq.n	800cbf2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cbdc:	f043 0210 	orr.w	r2, r3, #16
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cbe4:	2301      	movs	r3, #1
 800cbe6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	2201      	movs	r2, #1
 800cbec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cbf0:	e054      	b.n	800cc9c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	685a      	ldr	r2, [r3, #4]
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	f042 0201 	orr.w	r2, r2, #1
 800cc00:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc06:	2200      	movs	r2, #0
 800cc08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc0e:	2200      	movs	r2, #0
 800cc10:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc16:	2200      	movs	r2, #0
 800cc18:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc1e:	2200      	movs	r2, #0
 800cc20:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc2a:	4619      	mov	r1, r3
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	330c      	adds	r3, #12
 800cc32:	461a      	mov	r2, r3
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	f7fb fa75 	bl	8008128 <HAL_DMA_Start_IT>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d00c      	beq.n	800cc5e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc48:	f043 0210 	orr.w	r2, r3, #16
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cc50:	2301      	movs	r3, #1
 800cc52:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	2201      	movs	r2, #1
 800cc58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cc5c:	e01e      	b.n	800cc9c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc68:	2b40      	cmp	r3, #64	; 0x40
 800cc6a:	d007      	beq.n	800cc7c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	681a      	ldr	r2, [r3, #0]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cc7a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	685a      	ldr	r2, [r3, #4]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f042 0220 	orr.w	r2, r2, #32
 800cc8a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	685a      	ldr	r2, [r3, #4]
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f042 0202 	orr.w	r2, r2, #2
 800cc9a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cca4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	3718      	adds	r7, #24
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	bd80      	pop	{r7, pc}
 800ccae:	bf00      	nop
 800ccb0:	0800d02d 	.word	0x0800d02d
 800ccb4:	0800cf15 	.word	0x0800cf15
 800ccb8:	0800d049 	.word	0x0800d049
 800ccbc:	0800cf9b 	.word	0x0800cf9b
 800ccc0:	0800d065 	.word	0x0800d065

0800ccc4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b088      	sub	sp, #32
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	685b      	ldr	r3, [r3, #4]
 800ccd2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ccdc:	69bb      	ldr	r3, [r7, #24]
 800ccde:	099b      	lsrs	r3, r3, #6
 800cce0:	f003 0301 	and.w	r3, r3, #1
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d10f      	bne.n	800cd08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cce8:	69bb      	ldr	r3, [r7, #24]
 800ccea:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d00a      	beq.n	800cd08 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ccf2:	69fb      	ldr	r3, [r7, #28]
 800ccf4:	099b      	lsrs	r3, r3, #6
 800ccf6:	f003 0301 	and.w	r3, r3, #1
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d004      	beq.n	800cd08 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	4798      	blx	r3
    return;
 800cd06:	e0d8      	b.n	800ceba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cd08:	69bb      	ldr	r3, [r7, #24]
 800cd0a:	085b      	lsrs	r3, r3, #1
 800cd0c:	f003 0301 	and.w	r3, r3, #1
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d00a      	beq.n	800cd2a <HAL_SPI_IRQHandler+0x66>
 800cd14:	69fb      	ldr	r3, [r7, #28]
 800cd16:	09db      	lsrs	r3, r3, #7
 800cd18:	f003 0301 	and.w	r3, r3, #1
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d004      	beq.n	800cd2a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	4798      	blx	r3
    return;
 800cd28:	e0c7      	b.n	800ceba <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	095b      	lsrs	r3, r3, #5
 800cd2e:	f003 0301 	and.w	r3, r3, #1
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d10c      	bne.n	800cd50 <HAL_SPI_IRQHandler+0x8c>
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	099b      	lsrs	r3, r3, #6
 800cd3a:	f003 0301 	and.w	r3, r3, #1
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d106      	bne.n	800cd50 <HAL_SPI_IRQHandler+0x8c>
 800cd42:	69bb      	ldr	r3, [r7, #24]
 800cd44:	0a1b      	lsrs	r3, r3, #8
 800cd46:	f003 0301 	and.w	r3, r3, #1
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	f000 80b5 	beq.w	800ceba <HAL_SPI_IRQHandler+0x1f6>
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	095b      	lsrs	r3, r3, #5
 800cd54:	f003 0301 	and.w	r3, r3, #1
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	f000 80ae 	beq.w	800ceba <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cd5e:	69bb      	ldr	r3, [r7, #24]
 800cd60:	099b      	lsrs	r3, r3, #6
 800cd62:	f003 0301 	and.w	r3, r3, #1
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d023      	beq.n	800cdb2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd70:	b2db      	uxtb	r3, r3
 800cd72:	2b03      	cmp	r3, #3
 800cd74:	d011      	beq.n	800cd9a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cd7a:	f043 0204 	orr.w	r2, r3, #4
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd82:	2300      	movs	r3, #0
 800cd84:	617b      	str	r3, [r7, #20]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68db      	ldr	r3, [r3, #12]
 800cd8c:	617b      	str	r3, [r7, #20]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	689b      	ldr	r3, [r3, #8]
 800cd94:	617b      	str	r3, [r7, #20]
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	e00b      	b.n	800cdb2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	613b      	str	r3, [r7, #16]
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	68db      	ldr	r3, [r3, #12]
 800cda4:	613b      	str	r3, [r7, #16]
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	689b      	ldr	r3, [r3, #8]
 800cdac:	613b      	str	r3, [r7, #16]
 800cdae:	693b      	ldr	r3, [r7, #16]
        return;
 800cdb0:	e083      	b.n	800ceba <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	095b      	lsrs	r3, r3, #5
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d014      	beq.n	800cde8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdc2:	f043 0201 	orr.w	r2, r3, #1
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cdca:	2300      	movs	r3, #0
 800cdcc:	60fb      	str	r3, [r7, #12]
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	689b      	ldr	r3, [r3, #8]
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	681b      	ldr	r3, [r3, #0]
 800cdda:	681a      	ldr	r2, [r3, #0]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cde4:	601a      	str	r2, [r3, #0]
 800cde6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	0a1b      	lsrs	r3, r3, #8
 800cdec:	f003 0301 	and.w	r3, r3, #1
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	d00c      	beq.n	800ce0e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdf8:	f043 0208 	orr.w	r2, r3, #8
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce00:	2300      	movs	r3, #0
 800ce02:	60bb      	str	r3, [r7, #8]
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	60bb      	str	r3, [r7, #8]
 800ce0c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d050      	beq.n	800ceb8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	685a      	ldr	r2, [r3, #4]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ce24:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2201      	movs	r2, #1
 800ce2a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ce2e:	69fb      	ldr	r3, [r7, #28]
 800ce30:	f003 0302 	and.w	r3, r3, #2
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d104      	bne.n	800ce42 <HAL_SPI_IRQHandler+0x17e>
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	f003 0301 	and.w	r3, r3, #1
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d034      	beq.n	800ceac <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	685a      	ldr	r2, [r3, #4]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f022 0203 	bic.w	r2, r2, #3
 800ce50:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d011      	beq.n	800ce7e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce5e:	4a18      	ldr	r2, [pc, #96]	; (800cec0 <HAL_SPI_IRQHandler+0x1fc>)
 800ce60:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fb fa2e 	bl	80082c8 <HAL_DMA_Abort_IT>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d005      	beq.n	800ce7e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce76:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d016      	beq.n	800ceb4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce8a:	4a0d      	ldr	r2, [pc, #52]	; (800cec0 <HAL_SPI_IRQHandler+0x1fc>)
 800ce8c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7fb fa18 	bl	80082c8 <HAL_DMA_Abort_IT>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d00a      	beq.n	800ceb4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cea2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800ceaa:	e003      	b.n	800ceb4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f000 f827 	bl	800cf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800ceb2:	e000      	b.n	800ceb6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800ceb4:	bf00      	nop
    return;
 800ceb6:	bf00      	nop
 800ceb8:	bf00      	nop
  }
}
 800ceba:	3720      	adds	r7, #32
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}
 800cec0:	0800d0a5 	.word	0x0800d0a5

0800cec4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cecc:	bf00      	nop
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cee0:	bf00      	nop
 800cee2:	370c      	adds	r7, #12
 800cee4:	46bd      	mov	sp, r7
 800cee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceea:	4770      	bx	lr

0800ceec <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800ceec:	b480      	push	{r7}
 800ceee:	b083      	sub	sp, #12
 800cef0:	af00      	add	r7, sp, #0
 800cef2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800cef4:	bf00      	nop
 800cef6:	370c      	adds	r7, #12
 800cef8:	46bd      	mov	sp, r7
 800cefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cefe:	4770      	bx	lr

0800cf00 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cf00:	b480      	push	{r7}
 800cf02:	b083      	sub	sp, #12
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cf08:	bf00      	nop
 800cf0a:	370c      	adds	r7, #12
 800cf0c:	46bd      	mov	sp, r7
 800cf0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf12:	4770      	bx	lr

0800cf14 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf14:	b580      	push	{r7, lr}
 800cf16:	b084      	sub	sp, #16
 800cf18:	af00      	add	r7, sp, #0
 800cf1a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf20:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf22:	f7fa fae3 	bl	80074ec <HAL_GetTick>
 800cf26:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cf36:	d02a      	beq.n	800cf8e <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	681b      	ldr	r3, [r3, #0]
 800cf3c:	685a      	ldr	r2, [r3, #4]
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	f022 0220 	bic.w	r2, r2, #32
 800cf46:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cf48:	68fb      	ldr	r3, [r7, #12]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	685a      	ldr	r2, [r3, #4]
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f022 0203 	bic.w	r2, r2, #3
 800cf56:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	2164      	movs	r1, #100	; 0x64
 800cf5c:	68f8      	ldr	r0, [r7, #12]
 800cf5e:	f000 f98d 	bl	800d27c <SPI_EndRxTransaction>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d002      	beq.n	800cf6e <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	2220      	movs	r2, #32
 800cf6c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2200      	movs	r2, #0
 800cf72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d003      	beq.n	800cf8e <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800cf86:	68f8      	ldr	r0, [r7, #12]
 800cf88:	f7ff ffba 	bl	800cf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800cf8c:	e002      	b.n	800cf94 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800cf8e:	68f8      	ldr	r0, [r7, #12]
 800cf90:	f7f9 fd8e 	bl	8006ab0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800cf94:	3710      	adds	r7, #16
 800cf96:	46bd      	mov	sp, r7
 800cf98:	bd80      	pop	{r7, pc}

0800cf9a <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf9a:	b580      	push	{r7, lr}
 800cf9c:	b084      	sub	sp, #16
 800cf9e:	af00      	add	r7, sp, #0
 800cfa0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfa6:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cfa8:	f7fa faa0 	bl	80074ec <HAL_GetTick>
 800cfac:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	681b      	ldr	r3, [r3, #0]
 800cfb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfb8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfbc:	d030      	beq.n	800d020 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	685a      	ldr	r2, [r3, #4]
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	f022 0220 	bic.w	r2, r2, #32
 800cfcc:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cfce:	68ba      	ldr	r2, [r7, #8]
 800cfd0:	2164      	movs	r1, #100	; 0x64
 800cfd2:	68f8      	ldr	r0, [r7, #12]
 800cfd4:	f000 f9aa 	bl	800d32c <SPI_EndRxTxTransaction>
 800cfd8:	4603      	mov	r3, r0
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d005      	beq.n	800cfea <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfe2:	f043 0220 	orr.w	r2, r3, #32
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f022 0203 	bic.w	r2, r2, #3
 800cff8:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	2200      	movs	r2, #0
 800cffe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2200      	movs	r2, #0
 800d004:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	2201      	movs	r2, #1
 800d00c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d014:	2b00      	cmp	r3, #0
 800d016:	d003      	beq.n	800d020 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d018:	68f8      	ldr	r0, [r7, #12]
 800d01a:	f7ff ff71 	bl	800cf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d01e:	e002      	b.n	800d026 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d020:	68f8      	ldr	r0, [r7, #12]
 800d022:	f7ff ff4f 	bl	800cec4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d026:	3710      	adds	r7, #16
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b084      	sub	sp, #16
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d038:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d03a:	68f8      	ldr	r0, [r7, #12]
 800d03c:	f7ff ff4c 	bl	800ced8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d040:	bf00      	nop
 800d042:	3710      	adds	r7, #16
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d054:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	f7ff ff48 	bl	800ceec <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d05c:	bf00      	nop
 800d05e:	3710      	adds	r7, #16
 800d060:	46bd      	mov	sp, r7
 800d062:	bd80      	pop	{r7, pc}

0800d064 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d070:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	685a      	ldr	r2, [r3, #4]
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	f022 0203 	bic.w	r2, r2, #3
 800d080:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d086:	f043 0210 	orr.w	r2, r3, #16
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2201      	movs	r2, #1
 800d092:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d096:	68f8      	ldr	r0, [r7, #12]
 800d098:	f7ff ff32 	bl	800cf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d09c:	bf00      	nop
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	2200      	movs	r2, #0
 800d0b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d0ba:	68fb      	ldr	r3, [r7, #12]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d0c0:	68f8      	ldr	r0, [r7, #12]
 800d0c2:	f7ff ff1d 	bl	800cf00 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0c6:	bf00      	nop
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}

0800d0ce <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d0ce:	b580      	push	{r7, lr}
 800d0d0:	b084      	sub	sp, #16
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	60f8      	str	r0, [r7, #12]
 800d0d6:	60b9      	str	r1, [r7, #8]
 800d0d8:	603b      	str	r3, [r7, #0]
 800d0da:	4613      	mov	r3, r2
 800d0dc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d0de:	e04c      	b.n	800d17a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0e6:	d048      	beq.n	800d17a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d0e8:	f7fa fa00 	bl	80074ec <HAL_GetTick>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	69bb      	ldr	r3, [r7, #24]
 800d0f0:	1ad3      	subs	r3, r2, r3
 800d0f2:	683a      	ldr	r2, [r7, #0]
 800d0f4:	429a      	cmp	r2, r3
 800d0f6:	d902      	bls.n	800d0fe <SPI_WaitFlagStateUntilTimeout+0x30>
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d13d      	bne.n	800d17a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	685a      	ldr	r2, [r3, #4]
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d10c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d116:	d111      	bne.n	800d13c <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	689b      	ldr	r3, [r3, #8]
 800d11c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d120:	d004      	beq.n	800d12c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	689b      	ldr	r3, [r3, #8]
 800d126:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d12a:	d107      	bne.n	800d13c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d12c:	68fb      	ldr	r3, [r7, #12]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	681a      	ldr	r2, [r3, #0]
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d13a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d144:	d10f      	bne.n	800d166 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	681a      	ldr	r2, [r3, #0]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d154:	601a      	str	r2, [r3, #0]
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	681a      	ldr	r2, [r3, #0]
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	681b      	ldr	r3, [r3, #0]
 800d160:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d164:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	2201      	movs	r2, #1
 800d16a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d176:	2303      	movs	r3, #3
 800d178:	e00f      	b.n	800d19a <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	689a      	ldr	r2, [r3, #8]
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	4013      	ands	r3, r2
 800d184:	68ba      	ldr	r2, [r7, #8]
 800d186:	429a      	cmp	r2, r3
 800d188:	bf0c      	ite	eq
 800d18a:	2301      	moveq	r3, #1
 800d18c:	2300      	movne	r3, #0
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	461a      	mov	r2, r3
 800d192:	79fb      	ldrb	r3, [r7, #7]
 800d194:	429a      	cmp	r2, r3
 800d196:	d1a3      	bne.n	800d0e0 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d198:	2300      	movs	r3, #0
}
 800d19a:	4618      	mov	r0, r3
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d1a2:	b580      	push	{r7, lr}
 800d1a4:	b084      	sub	sp, #16
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	60f8      	str	r0, [r7, #12]
 800d1aa:	60b9      	str	r1, [r7, #8]
 800d1ac:	607a      	str	r2, [r7, #4]
 800d1ae:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800d1b0:	e057      	b.n	800d262 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d1b2:	68bb      	ldr	r3, [r7, #8]
 800d1b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d1b8:	d106      	bne.n	800d1c8 <SPI_WaitFifoStateUntilTimeout+0x26>
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d103      	bne.n	800d1c8 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	330c      	adds	r3, #12
 800d1c6:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1ce:	d048      	beq.n	800d262 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d1d0:	f7fa f98c 	bl	80074ec <HAL_GetTick>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	1ad3      	subs	r3, r2, r3
 800d1da:	683a      	ldr	r2, [r7, #0]
 800d1dc:	429a      	cmp	r2, r3
 800d1de:	d902      	bls.n	800d1e6 <SPI_WaitFifoStateUntilTimeout+0x44>
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	2b00      	cmp	r3, #0
 800d1e4:	d13d      	bne.n	800d262 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
 800d1f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d1f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d1fe:	d111      	bne.n	800d224 <SPI_WaitFifoStateUntilTimeout+0x82>
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	689b      	ldr	r3, [r3, #8]
 800d204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d208:	d004      	beq.n	800d214 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d212:	d107      	bne.n	800d224 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	681a      	ldr	r2, [r3, #0]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	681b      	ldr	r3, [r3, #0]
 800d21e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d222:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d22c:	d10f      	bne.n	800d24e <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	681a      	ldr	r2, [r3, #0]
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d23c:	601a      	str	r2, [r3, #0]
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	681a      	ldr	r2, [r3, #0]
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d24c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	2201      	movs	r2, #1
 800d252:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	2200      	movs	r2, #0
 800d25a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d25e:	2303      	movs	r3, #3
 800d260:	e008      	b.n	800d274 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	689a      	ldr	r2, [r3, #8]
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	4013      	ands	r3, r2
 800d26c:	687a      	ldr	r2, [r7, #4]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d19f      	bne.n	800d1b2 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800d272:	2300      	movs	r3, #0
}
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af02      	add	r7, sp, #8
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	60b9      	str	r1, [r7, #8]
 800d286:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	685b      	ldr	r3, [r3, #4]
 800d28c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d290:	d111      	bne.n	800d2b6 <SPI_EndRxTransaction+0x3a>
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	689b      	ldr	r3, [r3, #8]
 800d296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d29a:	d004      	beq.n	800d2a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	689b      	ldr	r3, [r3, #8]
 800d2a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2a4:	d107      	bne.n	800d2b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	681a      	ldr	r2, [r3, #0]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d2b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	9300      	str	r3, [sp, #0]
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	2180      	movs	r1, #128	; 0x80
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	f7ff ff04 	bl	800d0ce <SPI_WaitFlagStateUntilTimeout>
 800d2c6:	4603      	mov	r3, r0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d007      	beq.n	800d2dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2d0:	f043 0220 	orr.w	r2, r3, #32
 800d2d4:	68fb      	ldr	r3, [r7, #12]
 800d2d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d2d8:	2303      	movs	r3, #3
 800d2da:	e023      	b.n	800d324 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	685b      	ldr	r3, [r3, #4]
 800d2e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d2e4:	d11d      	bne.n	800d322 <SPI_EndRxTransaction+0xa6>
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2ee:	d004      	beq.n	800d2fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d2f8:	d113      	bne.n	800d322 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	9300      	str	r3, [sp, #0]
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	2200      	movs	r2, #0
 800d302:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f7ff ff4b 	bl	800d1a2 <SPI_WaitFifoStateUntilTimeout>
 800d30c:	4603      	mov	r3, r0
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d007      	beq.n	800d322 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d312:	68fb      	ldr	r3, [r7, #12]
 800d314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d316:	f043 0220 	orr.w	r2, r3, #32
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d31e:	2303      	movs	r3, #3
 800d320:	e000      	b.n	800d324 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d322:	2300      	movs	r3, #0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3710      	adds	r7, #16
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b086      	sub	sp, #24
 800d330:	af02      	add	r7, sp, #8
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	9300      	str	r3, [sp, #0]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	2200      	movs	r2, #0
 800d340:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d344:	68f8      	ldr	r0, [r7, #12]
 800d346:	f7ff ff2c 	bl	800d1a2 <SPI_WaitFifoStateUntilTimeout>
 800d34a:	4603      	mov	r3, r0
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d007      	beq.n	800d360 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d354:	f043 0220 	orr.w	r2, r3, #32
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d35c:	2303      	movs	r3, #3
 800d35e:	e027      	b.n	800d3b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	9300      	str	r3, [sp, #0]
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	2200      	movs	r2, #0
 800d368:	2180      	movs	r1, #128	; 0x80
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f7ff feaf 	bl	800d0ce <SPI_WaitFlagStateUntilTimeout>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d007      	beq.n	800d386 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d37a:	f043 0220 	orr.w	r2, r3, #32
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d382:	2303      	movs	r3, #3
 800d384:	e014      	b.n	800d3b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	9300      	str	r3, [sp, #0]
 800d38a:	68bb      	ldr	r3, [r7, #8]
 800d38c:	2200      	movs	r2, #0
 800d38e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d392:	68f8      	ldr	r0, [r7, #12]
 800d394:	f7ff ff05 	bl	800d1a2 <SPI_WaitFifoStateUntilTimeout>
 800d398:	4603      	mov	r3, r0
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d007      	beq.n	800d3ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3a2:	f043 0220 	orr.w	r2, r3, #32
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d3aa:	2303      	movs	r3, #3
 800d3ac:	e000      	b.n	800d3b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}

0800d3b8 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800d3b8:	b480      	push	{r7}
 800d3ba:	b085      	sub	sp, #20
 800d3bc:	af00      	add	r7, sp, #0
 800d3be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d3c4:	e00c      	b.n	800d3e0 <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800d3c6:	7bfb      	ldrb	r3, [r7, #15]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	68db      	ldr	r3, [r3, #12]
 800d3d2:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800d3d4:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800d3d6:	7bfb      	ldrb	r3, [r7, #15]
 800d3d8:	2b04      	cmp	r3, #4
 800d3da:	d101      	bne.n	800d3e0 <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800d3dc:	2303      	movs	r3, #3
 800d3de:	e007      	b.n	800d3f0 <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	689b      	ldr	r3, [r3, #8]
 800d3e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d1eb      	bne.n	800d3c6 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800d3ee:	2300      	movs	r3, #0
}
 800d3f0:	4618      	mov	r0, r3
 800d3f2:	3714      	adds	r7, #20
 800d3f4:	46bd      	mov	sp, r7
 800d3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3fa:	4770      	bx	lr

0800d3fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d101      	bne.n	800d40e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d40a:	2301      	movs	r3, #1
 800d40c:	e01d      	b.n	800d44a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d414:	b2db      	uxtb	r3, r3
 800d416:	2b00      	cmp	r3, #0
 800d418:	d106      	bne.n	800d428 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	2200      	movs	r2, #0
 800d41e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d422:	6878      	ldr	r0, [r7, #4]
 800d424:	f000 f815 	bl	800d452 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	2202      	movs	r2, #2
 800d42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681a      	ldr	r2, [r3, #0]
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	3304      	adds	r3, #4
 800d438:	4619      	mov	r1, r3
 800d43a:	4610      	mov	r0, r2
 800d43c:	f000 f986 	bl	800d74c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2201      	movs	r2, #1
 800d444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d448:	2300      	movs	r3, #0
}
 800d44a:	4618      	mov	r0, r3
 800d44c:	3708      	adds	r7, #8
 800d44e:	46bd      	mov	sp, r7
 800d450:	bd80      	pop	{r7, pc}

0800d452 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d452:	b480      	push	{r7}
 800d454:	b083      	sub	sp, #12
 800d456:	af00      	add	r7, sp, #0
 800d458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d45a:	bf00      	nop
 800d45c:	370c      	adds	r7, #12
 800d45e:	46bd      	mov	sp, r7
 800d460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d464:	4770      	bx	lr
	...

0800d468 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d468:	b480      	push	{r7}
 800d46a:	b085      	sub	sp, #20
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	68da      	ldr	r2, [r3, #12]
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f042 0201 	orr.w	r2, r2, #1
 800d47e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	689a      	ldr	r2, [r3, #8]
 800d486:	4b0c      	ldr	r3, [pc, #48]	; (800d4b8 <HAL_TIM_Base_Start_IT+0x50>)
 800d488:	4013      	ands	r3, r2
 800d48a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d48c:	68fb      	ldr	r3, [r7, #12]
 800d48e:	2b06      	cmp	r3, #6
 800d490:	d00b      	beq.n	800d4aa <HAL_TIM_Base_Start_IT+0x42>
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d498:	d007      	beq.n	800d4aa <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	681a      	ldr	r2, [r3, #0]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f042 0201 	orr.w	r2, r2, #1
 800d4a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d4aa:	2300      	movs	r3, #0
}
 800d4ac:	4618      	mov	r0, r3
 800d4ae:	3714      	adds	r7, #20
 800d4b0:	46bd      	mov	sp, r7
 800d4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b6:	4770      	bx	lr
 800d4b8:	00010007 	.word	0x00010007

0800d4bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	b082      	sub	sp, #8
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	691b      	ldr	r3, [r3, #16]
 800d4ca:	f003 0302 	and.w	r3, r3, #2
 800d4ce:	2b02      	cmp	r3, #2
 800d4d0:	d122      	bne.n	800d518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	68db      	ldr	r3, [r3, #12]
 800d4d8:	f003 0302 	and.w	r3, r3, #2
 800d4dc:	2b02      	cmp	r3, #2
 800d4de:	d11b      	bne.n	800d518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	681b      	ldr	r3, [r3, #0]
 800d4e4:	f06f 0202 	mvn.w	r2, #2
 800d4e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	2201      	movs	r2, #1
 800d4ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	699b      	ldr	r3, [r3, #24]
 800d4f6:	f003 0303 	and.w	r3, r3, #3
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d003      	beq.n	800d506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 f905 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d504:	e005      	b.n	800d512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f000 f8f7 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f000 f908 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2200      	movs	r2, #0
 800d516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	691b      	ldr	r3, [r3, #16]
 800d51e:	f003 0304 	and.w	r3, r3, #4
 800d522:	2b04      	cmp	r3, #4
 800d524:	d122      	bne.n	800d56c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	68db      	ldr	r3, [r3, #12]
 800d52c:	f003 0304 	and.w	r3, r3, #4
 800d530:	2b04      	cmp	r3, #4
 800d532:	d11b      	bne.n	800d56c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	f06f 0204 	mvn.w	r2, #4
 800d53c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	2202      	movs	r2, #2
 800d542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	699b      	ldr	r3, [r3, #24]
 800d54a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d003      	beq.n	800d55a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f8db 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d558:	e005      	b.n	800d566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d55a:	6878      	ldr	r0, [r7, #4]
 800d55c:	f000 f8cd 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d560:	6878      	ldr	r0, [r7, #4]
 800d562:	f000 f8de 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2200      	movs	r2, #0
 800d56a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	691b      	ldr	r3, [r3, #16]
 800d572:	f003 0308 	and.w	r3, r3, #8
 800d576:	2b08      	cmp	r3, #8
 800d578:	d122      	bne.n	800d5c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	68db      	ldr	r3, [r3, #12]
 800d580:	f003 0308 	and.w	r3, r3, #8
 800d584:	2b08      	cmp	r3, #8
 800d586:	d11b      	bne.n	800d5c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f06f 0208 	mvn.w	r2, #8
 800d590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2204      	movs	r2, #4
 800d596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	69db      	ldr	r3, [r3, #28]
 800d59e:	f003 0303 	and.w	r3, r3, #3
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d003      	beq.n	800d5ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f000 f8b1 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d5ac:	e005      	b.n	800d5ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5ae:	6878      	ldr	r0, [r7, #4]
 800d5b0:	f000 f8a3 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f8b4 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2200      	movs	r2, #0
 800d5be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	691b      	ldr	r3, [r3, #16]
 800d5c6:	f003 0310 	and.w	r3, r3, #16
 800d5ca:	2b10      	cmp	r3, #16
 800d5cc:	d122      	bne.n	800d614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	68db      	ldr	r3, [r3, #12]
 800d5d4:	f003 0310 	and.w	r3, r3, #16
 800d5d8:	2b10      	cmp	r3, #16
 800d5da:	d11b      	bne.n	800d614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	f06f 0210 	mvn.w	r2, #16
 800d5e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	2208      	movs	r2, #8
 800d5ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	69db      	ldr	r3, [r3, #28]
 800d5f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d003      	beq.n	800d602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f000 f887 	bl	800d70e <HAL_TIM_IC_CaptureCallback>
 800d600:	e005      	b.n	800d60e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f000 f879 	bl	800d6fa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 f88a 	bl	800d722 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2200      	movs	r2, #0
 800d612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	691b      	ldr	r3, [r3, #16]
 800d61a:	f003 0301 	and.w	r3, r3, #1
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d10e      	bne.n	800d640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68db      	ldr	r3, [r3, #12]
 800d628:	f003 0301 	and.w	r3, r3, #1
 800d62c:	2b01      	cmp	r3, #1
 800d62e:	d107      	bne.n	800d640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	f06f 0201 	mvn.w	r2, #1
 800d638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7f7 fc40 	bl	8004ec0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	691b      	ldr	r3, [r3, #16]
 800d646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d64a:	2b80      	cmp	r3, #128	; 0x80
 800d64c:	d10e      	bne.n	800d66c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	68db      	ldr	r3, [r3, #12]
 800d654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d658:	2b80      	cmp	r3, #128	; 0x80
 800d65a:	d107      	bne.n	800d66c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d666:	6878      	ldr	r0, [r7, #4]
 800d668:	f000 f91a 	bl	800d8a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	691b      	ldr	r3, [r3, #16]
 800d672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d67a:	d10e      	bne.n	800d69a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68db      	ldr	r3, [r3, #12]
 800d682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d686:	2b80      	cmp	r3, #128	; 0x80
 800d688:	d107      	bne.n	800d69a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d692:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 f90d 	bl	800d8b4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	691b      	ldr	r3, [r3, #16]
 800d6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6a4:	2b40      	cmp	r3, #64	; 0x40
 800d6a6:	d10e      	bne.n	800d6c6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	68db      	ldr	r3, [r3, #12]
 800d6ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d6b2:	2b40      	cmp	r3, #64	; 0x40
 800d6b4:	d107      	bne.n	800d6c6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d6be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d6c0:	6878      	ldr	r0, [r7, #4]
 800d6c2:	f000 f838 	bl	800d736 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	691b      	ldr	r3, [r3, #16]
 800d6cc:	f003 0320 	and.w	r3, r3, #32
 800d6d0:	2b20      	cmp	r3, #32
 800d6d2:	d10e      	bne.n	800d6f2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	f003 0320 	and.w	r3, r3, #32
 800d6de:	2b20      	cmp	r3, #32
 800d6e0:	d107      	bne.n	800d6f2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	f06f 0220 	mvn.w	r2, #32
 800d6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 f8cd 	bl	800d88c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d6f2:	bf00      	nop
 800d6f4:	3708      	adds	r7, #8
 800d6f6:	46bd      	mov	sp, r7
 800d6f8:	bd80      	pop	{r7, pc}

0800d6fa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d6fa:	b480      	push	{r7}
 800d6fc:	b083      	sub	sp, #12
 800d6fe:	af00      	add	r7, sp, #0
 800d700:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d702:	bf00      	nop
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d70e:	b480      	push	{r7}
 800d710:	b083      	sub	sp, #12
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d716:	bf00      	nop
 800d718:	370c      	adds	r7, #12
 800d71a:	46bd      	mov	sp, r7
 800d71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d720:	4770      	bx	lr

0800d722 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d722:	b480      	push	{r7}
 800d724:	b083      	sub	sp, #12
 800d726:	af00      	add	r7, sp, #0
 800d728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d72a:	bf00      	nop
 800d72c:	370c      	adds	r7, #12
 800d72e:	46bd      	mov	sp, r7
 800d730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d734:	4770      	bx	lr

0800d736 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d736:	b480      	push	{r7}
 800d738:	b083      	sub	sp, #12
 800d73a:	af00      	add	r7, sp, #0
 800d73c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d73e:	bf00      	nop
 800d740:	370c      	adds	r7, #12
 800d742:	46bd      	mov	sp, r7
 800d744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d748:	4770      	bx	lr
	...

0800d74c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d74c:	b480      	push	{r7}
 800d74e:	b085      	sub	sp, #20
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	4a40      	ldr	r2, [pc, #256]	; (800d860 <TIM_Base_SetConfig+0x114>)
 800d760:	4293      	cmp	r3, r2
 800d762:	d013      	beq.n	800d78c <TIM_Base_SetConfig+0x40>
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d76a:	d00f      	beq.n	800d78c <TIM_Base_SetConfig+0x40>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a3d      	ldr	r2, [pc, #244]	; (800d864 <TIM_Base_SetConfig+0x118>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d00b      	beq.n	800d78c <TIM_Base_SetConfig+0x40>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	4a3c      	ldr	r2, [pc, #240]	; (800d868 <TIM_Base_SetConfig+0x11c>)
 800d778:	4293      	cmp	r3, r2
 800d77a:	d007      	beq.n	800d78c <TIM_Base_SetConfig+0x40>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	4a3b      	ldr	r2, [pc, #236]	; (800d86c <TIM_Base_SetConfig+0x120>)
 800d780:	4293      	cmp	r3, r2
 800d782:	d003      	beq.n	800d78c <TIM_Base_SetConfig+0x40>
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	4a3a      	ldr	r2, [pc, #232]	; (800d870 <TIM_Base_SetConfig+0x124>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d108      	bne.n	800d79e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d792:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	68fa      	ldr	r2, [r7, #12]
 800d79a:	4313      	orrs	r3, r2
 800d79c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	4a2f      	ldr	r2, [pc, #188]	; (800d860 <TIM_Base_SetConfig+0x114>)
 800d7a2:	4293      	cmp	r3, r2
 800d7a4:	d02b      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7ac:	d027      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	4a2c      	ldr	r2, [pc, #176]	; (800d864 <TIM_Base_SetConfig+0x118>)
 800d7b2:	4293      	cmp	r3, r2
 800d7b4:	d023      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	4a2b      	ldr	r2, [pc, #172]	; (800d868 <TIM_Base_SetConfig+0x11c>)
 800d7ba:	4293      	cmp	r3, r2
 800d7bc:	d01f      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	4a2a      	ldr	r2, [pc, #168]	; (800d86c <TIM_Base_SetConfig+0x120>)
 800d7c2:	4293      	cmp	r3, r2
 800d7c4:	d01b      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	4a29      	ldr	r2, [pc, #164]	; (800d870 <TIM_Base_SetConfig+0x124>)
 800d7ca:	4293      	cmp	r3, r2
 800d7cc:	d017      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	4a28      	ldr	r2, [pc, #160]	; (800d874 <TIM_Base_SetConfig+0x128>)
 800d7d2:	4293      	cmp	r3, r2
 800d7d4:	d013      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	4a27      	ldr	r2, [pc, #156]	; (800d878 <TIM_Base_SetConfig+0x12c>)
 800d7da:	4293      	cmp	r3, r2
 800d7dc:	d00f      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	4a26      	ldr	r2, [pc, #152]	; (800d87c <TIM_Base_SetConfig+0x130>)
 800d7e2:	4293      	cmp	r3, r2
 800d7e4:	d00b      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	4a25      	ldr	r2, [pc, #148]	; (800d880 <TIM_Base_SetConfig+0x134>)
 800d7ea:	4293      	cmp	r3, r2
 800d7ec:	d007      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	4a24      	ldr	r2, [pc, #144]	; (800d884 <TIM_Base_SetConfig+0x138>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d003      	beq.n	800d7fe <TIM_Base_SetConfig+0xb2>
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	4a23      	ldr	r2, [pc, #140]	; (800d888 <TIM_Base_SetConfig+0x13c>)
 800d7fa:	4293      	cmp	r3, r2
 800d7fc:	d108      	bne.n	800d810 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	68db      	ldr	r3, [r3, #12]
 800d80a:	68fa      	ldr	r2, [r7, #12]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	4313      	orrs	r3, r2
 800d81c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	68fa      	ldr	r2, [r7, #12]
 800d822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	689a      	ldr	r2, [r3, #8]
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	4a0a      	ldr	r2, [pc, #40]	; (800d860 <TIM_Base_SetConfig+0x114>)
 800d838:	4293      	cmp	r3, r2
 800d83a:	d003      	beq.n	800d844 <TIM_Base_SetConfig+0xf8>
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	4a0c      	ldr	r2, [pc, #48]	; (800d870 <TIM_Base_SetConfig+0x124>)
 800d840:	4293      	cmp	r3, r2
 800d842:	d103      	bne.n	800d84c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d844:	683b      	ldr	r3, [r7, #0]
 800d846:	691a      	ldr	r2, [r3, #16]
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	615a      	str	r2, [r3, #20]
}
 800d852:	bf00      	nop
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr
 800d85e:	bf00      	nop
 800d860:	40010000 	.word	0x40010000
 800d864:	40000400 	.word	0x40000400
 800d868:	40000800 	.word	0x40000800
 800d86c:	40000c00 	.word	0x40000c00
 800d870:	40010400 	.word	0x40010400
 800d874:	40014000 	.word	0x40014000
 800d878:	40014400 	.word	0x40014400
 800d87c:	40014800 	.word	0x40014800
 800d880:	40001800 	.word	0x40001800
 800d884:	40001c00 	.word	0x40001c00
 800d888:	40002000 	.word	0x40002000

0800d88c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b083      	sub	sp, #12
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d894:	bf00      	nop
 800d896:	370c      	adds	r7, #12
 800d898:	46bd      	mov	sp, r7
 800d89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d89e:	4770      	bx	lr

0800d8a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d8a0:	b480      	push	{r7}
 800d8a2:	b083      	sub	sp, #12
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d8a8:	bf00      	nop
 800d8aa:	370c      	adds	r7, #12
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b2:	4770      	bx	lr

0800d8b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d8b4:	b480      	push	{r7}
 800d8b6:	b083      	sub	sp, #12
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d8bc:	bf00      	nop
 800d8be:	370c      	adds	r7, #12
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8c6:	4770      	bx	lr

0800d8c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b082      	sub	sp, #8
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d101      	bne.n	800d8da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e040      	b.n	800d95c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d106      	bne.n	800d8f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7f7 fe2c 	bl	8005548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2224      	movs	r2, #36	; 0x24
 800d8f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	681a      	ldr	r2, [r3, #0]
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	f022 0201 	bic.w	r2, r2, #1
 800d904:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 fd06 	bl	800e318 <UART_SetConfig>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b01      	cmp	r3, #1
 800d910:	d101      	bne.n	800d916 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d912:	2301      	movs	r3, #1
 800d914:	e022      	b.n	800d95c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d002      	beq.n	800d924 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 ffa4 	bl	800e86c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	685a      	ldr	r2, [r3, #4]
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d932:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	689a      	ldr	r2, [r3, #8]
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d942:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	681a      	ldr	r2, [r3, #0]
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	f042 0201 	orr.w	r2, r2, #1
 800d952:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f001 f82b 	bl	800e9b0 <UART_CheckIdleState>
 800d95a:	4603      	mov	r3, r0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	3708      	adds	r7, #8
 800d960:	46bd      	mov	sp, r7
 800d962:	bd80      	pop	{r7, pc}

0800d964 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d964:	b580      	push	{r7, lr}
 800d966:	b08a      	sub	sp, #40	; 0x28
 800d968:	af02      	add	r7, sp, #8
 800d96a:	60f8      	str	r0, [r7, #12]
 800d96c:	60b9      	str	r1, [r7, #8]
 800d96e:	603b      	str	r3, [r7, #0]
 800d970:	4613      	mov	r3, r2
 800d972:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d978:	2b20      	cmp	r3, #32
 800d97a:	d17f      	bne.n	800da7c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800d97c:	68bb      	ldr	r3, [r7, #8]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d002      	beq.n	800d988 <HAL_UART_Transmit+0x24>
 800d982:	88fb      	ldrh	r3, [r7, #6]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d101      	bne.n	800d98c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d988:	2301      	movs	r3, #1
 800d98a:	e078      	b.n	800da7e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800d992:	2b01      	cmp	r3, #1
 800d994:	d101      	bne.n	800d99a <HAL_UART_Transmit+0x36>
 800d996:	2302      	movs	r3, #2
 800d998:	e071      	b.n	800da7e <HAL_UART_Transmit+0x11a>
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	2201      	movs	r2, #1
 800d99e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2221      	movs	r2, #33	; 0x21
 800d9ac:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800d9ae:	f7f9 fd9d 	bl	80074ec <HAL_GetTick>
 800d9b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	88fa      	ldrh	r2, [r7, #6]
 800d9b8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	88fa      	ldrh	r2, [r7, #6]
 800d9c0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d9cc:	d108      	bne.n	800d9e0 <HAL_UART_Transmit+0x7c>
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	691b      	ldr	r3, [r3, #16]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d104      	bne.n	800d9e0 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	61bb      	str	r3, [r7, #24]
 800d9de:	e003      	b.n	800d9e8 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800d9f0:	e02c      	b.n	800da4c <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	9300      	str	r3, [sp, #0]
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	2200      	movs	r2, #0
 800d9fa:	2180      	movs	r1, #128	; 0x80
 800d9fc:	68f8      	ldr	r0, [r7, #12]
 800d9fe:	f001 f806 	bl	800ea0e <UART_WaitOnFlagUntilTimeout>
 800da02:	4603      	mov	r3, r0
 800da04:	2b00      	cmp	r3, #0
 800da06:	d001      	beq.n	800da0c <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	e038      	b.n	800da7e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d10b      	bne.n	800da2a <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da12:	69bb      	ldr	r3, [r7, #24]
 800da14:	881b      	ldrh	r3, [r3, #0]
 800da16:	461a      	mov	r2, r3
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da20:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800da22:	69bb      	ldr	r3, [r7, #24]
 800da24:	3302      	adds	r3, #2
 800da26:	61bb      	str	r3, [r7, #24]
 800da28:	e007      	b.n	800da3a <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da2a:	69fb      	ldr	r3, [r7, #28]
 800da2c:	781a      	ldrb	r2, [r3, #0]
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800da34:	69fb      	ldr	r3, [r7, #28]
 800da36:	3301      	adds	r3, #1
 800da38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da40:	b29b      	uxth	r3, r3
 800da42:	3b01      	subs	r3, #1
 800da44:	b29a      	uxth	r2, r3
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800da52:	b29b      	uxth	r3, r3
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1cc      	bne.n	800d9f2 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da58:	683b      	ldr	r3, [r7, #0]
 800da5a:	9300      	str	r3, [sp, #0]
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	2200      	movs	r2, #0
 800da60:	2140      	movs	r1, #64	; 0x40
 800da62:	68f8      	ldr	r0, [r7, #12]
 800da64:	f000 ffd3 	bl	800ea0e <UART_WaitOnFlagUntilTimeout>
 800da68:	4603      	mov	r3, r0
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d001      	beq.n	800da72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800da6e:	2303      	movs	r3, #3
 800da70:	e005      	b.n	800da7e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	2220      	movs	r2, #32
 800da76:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800da78:	2300      	movs	r3, #0
 800da7a:	e000      	b.n	800da7e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800da7c:	2302      	movs	r3, #2
  }
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3720      	adds	r7, #32
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}

0800da86 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da86:	b580      	push	{r7, lr}
 800da88:	b08a      	sub	sp, #40	; 0x28
 800da8a:	af02      	add	r7, sp, #8
 800da8c:	60f8      	str	r0, [r7, #12]
 800da8e:	60b9      	str	r1, [r7, #8]
 800da90:	603b      	str	r3, [r7, #0]
 800da92:	4613      	mov	r3, r2
 800da94:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800da9a:	2b20      	cmp	r3, #32
 800da9c:	f040 80ba 	bne.w	800dc14 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 800daa0:	68bb      	ldr	r3, [r7, #8]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d002      	beq.n	800daac <HAL_UART_Receive+0x26>
 800daa6:	88fb      	ldrh	r3, [r7, #6]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d101      	bne.n	800dab0 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800daac:	2301      	movs	r3, #1
 800daae:	e0b2      	b.n	800dc16 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d101      	bne.n	800dabe <HAL_UART_Receive+0x38>
 800daba:	2302      	movs	r3, #2
 800dabc:	e0ab      	b.n	800dc16 <HAL_UART_Receive+0x190>
 800dabe:	68fb      	ldr	r3, [r7, #12]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	2200      	movs	r2, #0
 800daca:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	2222      	movs	r2, #34	; 0x22
 800dad0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800dad2:	f7f9 fd0b 	bl	80074ec <HAL_GetTick>
 800dad6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	88fa      	ldrh	r2, [r7, #6]
 800dadc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	88fa      	ldrh	r2, [r7, #6]
 800dae4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800daf0:	d10e      	bne.n	800db10 <HAL_UART_Receive+0x8a>
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	691b      	ldr	r3, [r3, #16]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d105      	bne.n	800db06 <HAL_UART_Receive+0x80>
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	f240 12ff 	movw	r2, #511	; 0x1ff
 800db00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db04:	e02d      	b.n	800db62 <HAL_UART_Receive+0xdc>
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	22ff      	movs	r2, #255	; 0xff
 800db0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db0e:	e028      	b.n	800db62 <HAL_UART_Receive+0xdc>
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	689b      	ldr	r3, [r3, #8]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d10d      	bne.n	800db34 <HAL_UART_Receive+0xae>
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	691b      	ldr	r3, [r3, #16]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d104      	bne.n	800db2a <HAL_UART_Receive+0xa4>
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	22ff      	movs	r2, #255	; 0xff
 800db24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db28:	e01b      	b.n	800db62 <HAL_UART_Receive+0xdc>
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	227f      	movs	r2, #127	; 0x7f
 800db2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db32:	e016      	b.n	800db62 <HAL_UART_Receive+0xdc>
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	689b      	ldr	r3, [r3, #8]
 800db38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db3c:	d10d      	bne.n	800db5a <HAL_UART_Receive+0xd4>
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	691b      	ldr	r3, [r3, #16]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d104      	bne.n	800db50 <HAL_UART_Receive+0xca>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	227f      	movs	r2, #127	; 0x7f
 800db4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db4e:	e008      	b.n	800db62 <HAL_UART_Receive+0xdc>
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	223f      	movs	r2, #63	; 0x3f
 800db54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db58:	e003      	b.n	800db62 <HAL_UART_Receive+0xdc>
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	2200      	movs	r2, #0
 800db5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db68:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	689b      	ldr	r3, [r3, #8]
 800db6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db72:	d108      	bne.n	800db86 <HAL_UART_Receive+0x100>
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	691b      	ldr	r3, [r3, #16]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d104      	bne.n	800db86 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 800db7c:	2300      	movs	r3, #0
 800db7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	61bb      	str	r3, [r7, #24]
 800db84:	e003      	b.n	800db8e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800db8a:	2300      	movs	r3, #0
 800db8c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2200      	movs	r2, #0
 800db92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800db96:	e032      	b.n	800dbfe <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	9300      	str	r3, [sp, #0]
 800db9c:	697b      	ldr	r3, [r7, #20]
 800db9e:	2200      	movs	r2, #0
 800dba0:	2120      	movs	r1, #32
 800dba2:	68f8      	ldr	r0, [r7, #12]
 800dba4:	f000 ff33 	bl	800ea0e <UART_WaitOnFlagUntilTimeout>
 800dba8:	4603      	mov	r3, r0
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d001      	beq.n	800dbb2 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 800dbae:	2303      	movs	r3, #3
 800dbb0:	e031      	b.n	800dc16 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 800dbb2:	69fb      	ldr	r3, [r7, #28]
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d10c      	bne.n	800dbd2 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800dbb8:	68fb      	ldr	r3, [r7, #12]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbbe:	b29a      	uxth	r2, r3
 800dbc0:	8a7b      	ldrh	r3, [r7, #18]
 800dbc2:	4013      	ands	r3, r2
 800dbc4:	b29a      	uxth	r2, r3
 800dbc6:	69bb      	ldr	r3, [r7, #24]
 800dbc8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800dbca:	69bb      	ldr	r3, [r7, #24]
 800dbcc:	3302      	adds	r3, #2
 800dbce:	61bb      	str	r3, [r7, #24]
 800dbd0:	e00c      	b.n	800dbec <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbd8:	b2da      	uxtb	r2, r3
 800dbda:	8a7b      	ldrh	r3, [r7, #18]
 800dbdc:	b2db      	uxtb	r3, r3
 800dbde:	4013      	ands	r3, r2
 800dbe0:	b2da      	uxtb	r2, r3
 800dbe2:	69fb      	ldr	r3, [r7, #28]
 800dbe4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	3b01      	subs	r3, #1
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d1c6      	bne.n	800db98 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dc0a:	68fb      	ldr	r3, [r7, #12]
 800dc0c:	2220      	movs	r2, #32
 800dc0e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800dc10:	2300      	movs	r3, #0
 800dc12:	e000      	b.n	800dc16 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 800dc14:	2302      	movs	r3, #2
  }
}
 800dc16:	4618      	mov	r0, r3
 800dc18:	3720      	adds	r7, #32
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	bd80      	pop	{r7, pc}
	...

0800dc20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc20:	b480      	push	{r7}
 800dc22:	b085      	sub	sp, #20
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	60f8      	str	r0, [r7, #12]
 800dc28:	60b9      	str	r1, [r7, #8]
 800dc2a:	4613      	mov	r3, r2
 800dc2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc32:	2b20      	cmp	r3, #32
 800dc34:	f040 808a 	bne.w	800dd4c <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc38:	68bb      	ldr	r3, [r7, #8]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d002      	beq.n	800dc44 <HAL_UART_Receive_IT+0x24>
 800dc3e:	88fb      	ldrh	r3, [r7, #6]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d101      	bne.n	800dc48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dc44:	2301      	movs	r3, #1
 800dc46:	e082      	b.n	800dd4e <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d101      	bne.n	800dc56 <HAL_UART_Receive_IT+0x36>
 800dc52:	2302      	movs	r3, #2
 800dc54:	e07b      	b.n	800dd4e <HAL_UART_Receive_IT+0x12e>
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	68ba      	ldr	r2, [r7, #8]
 800dc62:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	88fa      	ldrh	r2, [r7, #6]
 800dc68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	88fa      	ldrh	r2, [r7, #6]
 800dc70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dc82:	d10e      	bne.n	800dca2 <HAL_UART_Receive_IT+0x82>
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d105      	bne.n	800dc98 <HAL_UART_Receive_IT+0x78>
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dc92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dc96:	e02d      	b.n	800dcf4 <HAL_UART_Receive_IT+0xd4>
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	22ff      	movs	r2, #255	; 0xff
 800dc9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dca0:	e028      	b.n	800dcf4 <HAL_UART_Receive_IT+0xd4>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	689b      	ldr	r3, [r3, #8]
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d10d      	bne.n	800dcc6 <HAL_UART_Receive_IT+0xa6>
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d104      	bne.n	800dcbc <HAL_UART_Receive_IT+0x9c>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	22ff      	movs	r2, #255	; 0xff
 800dcb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dcba:	e01b      	b.n	800dcf4 <HAL_UART_Receive_IT+0xd4>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	227f      	movs	r2, #127	; 0x7f
 800dcc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dcc4:	e016      	b.n	800dcf4 <HAL_UART_Receive_IT+0xd4>
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	689b      	ldr	r3, [r3, #8]
 800dcca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcce:	d10d      	bne.n	800dcec <HAL_UART_Receive_IT+0xcc>
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	691b      	ldr	r3, [r3, #16]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d104      	bne.n	800dce2 <HAL_UART_Receive_IT+0xc2>
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	227f      	movs	r2, #127	; 0x7f
 800dcdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dce0:	e008      	b.n	800dcf4 <HAL_UART_Receive_IT+0xd4>
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	223f      	movs	r2, #63	; 0x3f
 800dce6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dcea:	e003      	b.n	800dcf4 <HAL_UART_Receive_IT+0xd4>
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2222      	movs	r2, #34	; 0x22
 800dcfe:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	689a      	ldr	r2, [r3, #8]
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f042 0201 	orr.w	r2, r2, #1
 800dd0e:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	689b      	ldr	r3, [r3, #8]
 800dd14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd18:	d107      	bne.n	800dd2a <HAL_UART_Receive_IT+0x10a>
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	691b      	ldr	r3, [r3, #16]
 800dd1e:	2b00      	cmp	r3, #0
 800dd20:	d103      	bne.n	800dd2a <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	4a0d      	ldr	r2, [pc, #52]	; (800dd5c <HAL_UART_Receive_IT+0x13c>)
 800dd26:	661a      	str	r2, [r3, #96]	; 0x60
 800dd28:	e002      	b.n	800dd30 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	4a0c      	ldr	r2, [pc, #48]	; (800dd60 <HAL_UART_Receive_IT+0x140>)
 800dd2e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	2200      	movs	r2, #0
 800dd34:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	681a      	ldr	r2, [r3, #0]
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800dd46:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	e000      	b.n	800dd4e <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800dd4c:	2302      	movs	r3, #2
  }
}
 800dd4e:	4618      	mov	r0, r3
 800dd50:	3714      	adds	r7, #20
 800dd52:	46bd      	mov	sp, r7
 800dd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	0800ed6b 	.word	0x0800ed6b
 800dd60:	0800ecc5 	.word	0x0800ecc5

0800dd64 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	60f8      	str	r0, [r7, #12]
 800dd6c:	60b9      	str	r1, [r7, #8]
 800dd6e:	4613      	mov	r3, r2
 800dd70:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd76:	2b20      	cmp	r3, #32
 800dd78:	d16c      	bne.n	800de54 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800dd7a:	68bb      	ldr	r3, [r7, #8]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d002      	beq.n	800dd86 <HAL_UART_Receive_DMA+0x22>
 800dd80:	88fb      	ldrh	r3, [r7, #6]
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d101      	bne.n	800dd8a <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800dd86:	2301      	movs	r3, #1
 800dd88:	e065      	b.n	800de56 <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dd90:	2b01      	cmp	r3, #1
 800dd92:	d101      	bne.n	800dd98 <HAL_UART_Receive_DMA+0x34>
 800dd94:	2302      	movs	r3, #2
 800dd96:	e05e      	b.n	800de56 <HAL_UART_Receive_DMA+0xf2>
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2201      	movs	r2, #1
 800dd9c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	88fa      	ldrh	r2, [r7, #6]
 800ddaa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ddae:	68fb      	ldr	r3, [r7, #12]
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	2222      	movs	r2, #34	; 0x22
 800ddb8:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d02a      	beq.n	800de18 <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc6:	4a26      	ldr	r2, [pc, #152]	; (800de60 <HAL_UART_Receive_DMA+0xfc>)
 800ddc8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddce:	4a25      	ldr	r2, [pc, #148]	; (800de64 <HAL_UART_Receive_DMA+0x100>)
 800ddd0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd6:	4a24      	ldr	r2, [pc, #144]	; (800de68 <HAL_UART_Receive_DMA+0x104>)
 800ddd8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddde:	2200      	movs	r2, #0
 800dde0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	3324      	adds	r3, #36	; 0x24
 800ddec:	4619      	mov	r1, r3
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ddf2:	461a      	mov	r2, r3
 800ddf4:	88fb      	ldrh	r3, [r7, #6]
 800ddf6:	f7fa f997 	bl	8008128 <HAL_DMA_Start_IT>
 800ddfa:	4603      	mov	r3, r0
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00b      	beq.n	800de18 <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2210      	movs	r2, #16
 800de04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	2200      	movs	r2, #0
 800de0a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2220      	movs	r2, #32
 800de12:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800de14:	2301      	movs	r3, #1
 800de16:	e01e      	b.n	800de56 <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	2200      	movs	r2, #0
 800de1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de2e:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	689a      	ldr	r2, [r3, #8]
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f042 0201 	orr.w	r2, r2, #1
 800de3e:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	689a      	ldr	r2, [r3, #8]
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de4e:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800de50:	2300      	movs	r3, #0
 800de52:	e000      	b.n	800de56 <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800de54:	2302      	movs	r3, #2
  }
}
 800de56:	4618      	mov	r0, r3
 800de58:	3710      	adds	r7, #16
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	0800eb6f 	.word	0x0800eb6f
 800de64:	0800ebd3 	.word	0x0800ebd3
 800de68:	0800ebef 	.word	0x0800ebef

0800de6c <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800de6c:	b480      	push	{r7}
 800de6e:	b085      	sub	sp, #20
 800de70:	af00      	add	r7, sp, #0
 800de72:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de78:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de7e:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800de86:	2b01      	cmp	r3, #1
 800de88:	d101      	bne.n	800de8e <HAL_UART_DMAPause+0x22>
 800de8a:	2302      	movs	r3, #2
 800de8c:	e03c      	b.n	800df08 <HAL_UART_DMAPause+0x9c>
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	2201      	movs	r2, #1
 800de92:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	689b      	ldr	r3, [r3, #8]
 800de9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea0:	2b80      	cmp	r3, #128	; 0x80
 800dea2:	d10a      	bne.n	800deba <HAL_UART_DMAPause+0x4e>
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	2b21      	cmp	r3, #33	; 0x21
 800dea8:	d107      	bne.n	800deba <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	689a      	ldr	r2, [r3, #8]
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800deb8:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	689b      	ldr	r3, [r3, #8]
 800dec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dec4:	2b40      	cmp	r3, #64	; 0x40
 800dec6:	d11a      	bne.n	800defe <HAL_UART_DMAPause+0x92>
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	2b22      	cmp	r3, #34	; 0x22
 800decc:	d117      	bne.n	800defe <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dedc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	689a      	ldr	r2, [r3, #8]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	f022 0201 	bic.w	r2, r2, #1
 800deec:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	689a      	ldr	r2, [r3, #8]
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800defc:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	2200      	movs	r2, #0
 800df02:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800df06:	2300      	movs	r3, #0
}
 800df08:	4618      	mov	r0, r3
 800df0a:	3714      	adds	r7, #20
 800df0c:	46bd      	mov	sp, r7
 800df0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df12:	4770      	bx	lr

0800df14 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800df14:	b480      	push	{r7}
 800df16:	b083      	sub	sp, #12
 800df18:	af00      	add	r7, sp, #0
 800df1a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800df22:	2b01      	cmp	r3, #1
 800df24:	d101      	bne.n	800df2a <HAL_UART_DMAResume+0x16>
 800df26:	2302      	movs	r3, #2
 800df28:	e034      	b.n	800df94 <HAL_UART_DMAResume+0x80>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2201      	movs	r2, #1
 800df2e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800df36:	2b21      	cmp	r3, #33	; 0x21
 800df38:	d107      	bne.n	800df4a <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	681b      	ldr	r3, [r3, #0]
 800df3e:	689a      	ldr	r2, [r3, #8]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800df48:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df4e:	2b22      	cmp	r3, #34	; 0x22
 800df50:	d11b      	bne.n	800df8a <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	2208      	movs	r2, #8
 800df58:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800df68:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	689a      	ldr	r2, [r3, #8]
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	f042 0201 	orr.w	r2, r2, #1
 800df78:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	689a      	ldr	r2, [r3, #8]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800df88:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b084      	sub	sp, #16
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfac:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfb2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	689b      	ldr	r3, [r3, #8]
 800dfba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dfbe:	2b80      	cmp	r3, #128	; 0x80
 800dfc0:	d126      	bne.n	800e010 <HAL_UART_DMAStop+0x70>
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2b21      	cmp	r3, #33	; 0x21
 800dfc6:	d123      	bne.n	800e010 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	689a      	ldr	r2, [r3, #8]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dfd6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d014      	beq.n	800e00a <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	f7fa f8ff 	bl	80081e8 <HAL_DMA_Abort>
 800dfea:	4603      	mov	r3, r0
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d00c      	beq.n	800e00a <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fa fb13 	bl	8008620 <HAL_DMA_GetError>
 800dffa:	4603      	mov	r3, r0
 800dffc:	2b20      	cmp	r3, #32
 800dffe:	d104      	bne.n	800e00a <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	2210      	movs	r2, #16
 800e004:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e006:	2303      	movs	r3, #3
 800e008:	e031      	b.n	800e06e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e00a:	6878      	ldr	r0, [r7, #4]
 800e00c:	f000 fd7a 	bl	800eb04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e01a:	2b40      	cmp	r3, #64	; 0x40
 800e01c:	d126      	bne.n	800e06c <HAL_UART_DMAStop+0xcc>
 800e01e:	68bb      	ldr	r3, [r7, #8]
 800e020:	2b22      	cmp	r3, #34	; 0x22
 800e022:	d123      	bne.n	800e06c <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	689a      	ldr	r2, [r3, #8]
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e032:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e038:	2b00      	cmp	r3, #0
 800e03a:	d014      	beq.n	800e066 <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e040:	4618      	mov	r0, r3
 800e042:	f7fa f8d1 	bl	80081e8 <HAL_DMA_Abort>
 800e046:	4603      	mov	r3, r0
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d00c      	beq.n	800e066 <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e050:	4618      	mov	r0, r3
 800e052:	f7fa fae5 	bl	8008620 <HAL_DMA_GetError>
 800e056:	4603      	mov	r3, r0
 800e058:	2b20      	cmp	r3, #32
 800e05a:	d104      	bne.n	800e066 <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	2210      	movs	r2, #16
 800e060:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e062:	2303      	movs	r3, #3
 800e064:	e003      	b.n	800e06e <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 fd61 	bl	800eb2e <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
	...

0800e078 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b088      	sub	sp, #32
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	69db      	ldr	r3, [r3, #28]
 800e086:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	689b      	ldr	r3, [r3, #8]
 800e096:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e098:	69fa      	ldr	r2, [r7, #28]
 800e09a:	f640 030f 	movw	r3, #2063	; 0x80f
 800e09e:	4013      	ands	r3, r2
 800e0a0:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d113      	bne.n	800e0d0 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	f003 0320 	and.w	r3, r3, #32
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d00e      	beq.n	800e0d0 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e0b2:	69bb      	ldr	r3, [r7, #24]
 800e0b4:	f003 0320 	and.w	r3, r3, #32
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d009      	beq.n	800e0d0 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f000 8100 	beq.w	800e2c6 <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	4798      	blx	r3
      }
      return;
 800e0ce:	e0fa      	b.n	800e2c6 <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e0d0:	693b      	ldr	r3, [r7, #16]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 80d5 	beq.w	800e282 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	f003 0301 	and.w	r3, r3, #1
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d105      	bne.n	800e0ee <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800e0e2:	69bb      	ldr	r3, [r7, #24]
 800e0e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	f000 80ca 	beq.w	800e282 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e0ee:	69fb      	ldr	r3, [r7, #28]
 800e0f0:	f003 0301 	and.w	r3, r3, #1
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d00e      	beq.n	800e116 <HAL_UART_IRQHandler+0x9e>
 800e0f8:	69bb      	ldr	r3, [r7, #24]
 800e0fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d009      	beq.n	800e116 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e102:	687b      	ldr	r3, [r7, #4]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	2201      	movs	r2, #1
 800e108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e10e:	f043 0201 	orr.w	r2, r3, #1
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	f003 0302 	and.w	r3, r3, #2
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d00e      	beq.n	800e13e <HAL_UART_IRQHandler+0xc6>
 800e120:	697b      	ldr	r3, [r7, #20]
 800e122:	f003 0301 	and.w	r3, r3, #1
 800e126:	2b00      	cmp	r3, #0
 800e128:	d009      	beq.n	800e13e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	2202      	movs	r2, #2
 800e130:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e136:	f043 0204 	orr.w	r2, r3, #4
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	f003 0304 	and.w	r3, r3, #4
 800e144:	2b00      	cmp	r3, #0
 800e146:	d00e      	beq.n	800e166 <HAL_UART_IRQHandler+0xee>
 800e148:	697b      	ldr	r3, [r7, #20]
 800e14a:	f003 0301 	and.w	r3, r3, #1
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d009      	beq.n	800e166 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2204      	movs	r2, #4
 800e158:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e15e:	f043 0202 	orr.w	r2, r3, #2
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	f003 0308 	and.w	r3, r3, #8
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d013      	beq.n	800e198 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	f003 0320 	and.w	r3, r3, #32
 800e176:	2b00      	cmp	r3, #0
 800e178:	d104      	bne.n	800e184 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e17a:	697b      	ldr	r3, [r7, #20]
 800e17c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e180:	2b00      	cmp	r3, #0
 800e182:	d009      	beq.n	800e198 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	2208      	movs	r2, #8
 800e18a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e190:	f043 0208 	orr.w	r2, r3, #8
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e198:	69fb      	ldr	r3, [r7, #28]
 800e19a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00f      	beq.n	800e1c2 <HAL_UART_IRQHandler+0x14a>
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00a      	beq.n	800e1c2 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e1b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1ba:	f043 0220 	orr.w	r2, r3, #32
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d07f      	beq.n	800e2ca <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e1ca:	69fb      	ldr	r3, [r7, #28]
 800e1cc:	f003 0320 	and.w	r3, r3, #32
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d00c      	beq.n	800e1ee <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	f003 0320 	and.w	r3, r3, #32
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d007      	beq.n	800e1ee <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d003      	beq.n	800e1ee <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1f2:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1fe:	2b40      	cmp	r3, #64	; 0x40
 800e200:	d004      	beq.n	800e20c <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d031      	beq.n	800e270 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fc8e 	bl	800eb2e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e21c:	2b40      	cmp	r3, #64	; 0x40
 800e21e:	d123      	bne.n	800e268 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	689a      	ldr	r2, [r3, #8]
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e22e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e234:	2b00      	cmp	r3, #0
 800e236:	d013      	beq.n	800e260 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e23c:	4a26      	ldr	r2, [pc, #152]	; (800e2d8 <HAL_UART_IRQHandler+0x260>)
 800e23e:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e244:	4618      	mov	r0, r3
 800e246:	f7fa f83f 	bl	80082c8 <HAL_DMA_Abort_IT>
 800e24a:	4603      	mov	r3, r0
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d016      	beq.n	800e27e <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e25a:	4610      	mov	r0, r2
 800e25c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e25e:	e00e      	b.n	800e27e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 f84f 	bl	800e304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e266:	e00a      	b.n	800e27e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f84b 	bl	800e304 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e26e:	e006      	b.n	800e27e <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e270:	6878      	ldr	r0, [r7, #4]
 800e272:	f000 f847 	bl	800e304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	2200      	movs	r2, #0
 800e27a:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800e27c:	e025      	b.n	800e2ca <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e27e:	bf00      	nop
    return;
 800e280:	e023      	b.n	800e2ca <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e282:	69fb      	ldr	r3, [r7, #28]
 800e284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00d      	beq.n	800e2a8 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e28c:	69bb      	ldr	r3, [r7, #24]
 800e28e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e292:	2b00      	cmp	r3, #0
 800e294:	d008      	beq.n	800e2a8 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d017      	beq.n	800e2ce <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	4798      	blx	r3
    }
    return;
 800e2a6:	e012      	b.n	800e2ce <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d00e      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x258>
 800e2b2:	69bb      	ldr	r3, [r7, #24]
 800e2b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d009      	beq.n	800e2d0 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fce8 	bl	800ec92 <UART_EndTransmit_IT>
    return;
 800e2c2:	bf00      	nop
 800e2c4:	e004      	b.n	800e2d0 <HAL_UART_IRQHandler+0x258>
      return;
 800e2c6:	bf00      	nop
 800e2c8:	e002      	b.n	800e2d0 <HAL_UART_IRQHandler+0x258>
    return;
 800e2ca:	bf00      	nop
 800e2cc:	e000      	b.n	800e2d0 <HAL_UART_IRQHandler+0x258>
    return;
 800e2ce:	bf00      	nop
  }

}
 800e2d0:	3720      	adds	r7, #32
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	bf00      	nop
 800e2d8:	0800ec67 	.word	0x0800ec67

0800e2dc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b083      	sub	sp, #12
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e2e4:	bf00      	nop
 800e2e6:	370c      	adds	r7, #12
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b083      	sub	sp, #12
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e2f8:	bf00      	nop
 800e2fa:	370c      	adds	r7, #12
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e302:	4770      	bx	lr

0800e304 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e304:	b480      	push	{r7}
 800e306:	b083      	sub	sp, #12
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e30c:	bf00      	nop
 800e30e:	370c      	adds	r7, #12
 800e310:	46bd      	mov	sp, r7
 800e312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e316:	4770      	bx	lr

0800e318 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e318:	b580      	push	{r7, lr}
 800e31a:	b088      	sub	sp, #32
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e320:	2300      	movs	r3, #0
 800e322:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e324:	2300      	movs	r3, #0
 800e326:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	689a      	ldr	r2, [r3, #8]
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	691b      	ldr	r3, [r3, #16]
 800e330:	431a      	orrs	r2, r3
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	695b      	ldr	r3, [r3, #20]
 800e336:	431a      	orrs	r2, r3
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	69db      	ldr	r3, [r3, #28]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e340:	687b      	ldr	r3, [r7, #4]
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	681a      	ldr	r2, [r3, #0]
 800e346:	4bb1      	ldr	r3, [pc, #708]	; (800e60c <UART_SetConfig+0x2f4>)
 800e348:	4013      	ands	r3, r2
 800e34a:	687a      	ldr	r2, [r7, #4]
 800e34c:	6812      	ldr	r2, [r2, #0]
 800e34e:	6939      	ldr	r1, [r7, #16]
 800e350:	430b      	orrs	r3, r1
 800e352:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	68da      	ldr	r2, [r3, #12]
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	430a      	orrs	r2, r1
 800e368:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	699b      	ldr	r3, [r3, #24]
 800e36e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6a1b      	ldr	r3, [r3, #32]
 800e374:	693a      	ldr	r2, [r7, #16]
 800e376:	4313      	orrs	r3, r2
 800e378:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	689b      	ldr	r3, [r3, #8]
 800e380:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	693a      	ldr	r2, [r7, #16]
 800e38a:	430a      	orrs	r2, r1
 800e38c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	4a9f      	ldr	r2, [pc, #636]	; (800e610 <UART_SetConfig+0x2f8>)
 800e394:	4293      	cmp	r3, r2
 800e396:	d121      	bne.n	800e3dc <UART_SetConfig+0xc4>
 800e398:	4b9e      	ldr	r3, [pc, #632]	; (800e614 <UART_SetConfig+0x2fc>)
 800e39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e39e:	f003 0303 	and.w	r3, r3, #3
 800e3a2:	2b03      	cmp	r3, #3
 800e3a4:	d816      	bhi.n	800e3d4 <UART_SetConfig+0xbc>
 800e3a6:	a201      	add	r2, pc, #4	; (adr r2, 800e3ac <UART_SetConfig+0x94>)
 800e3a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3ac:	0800e3bd 	.word	0x0800e3bd
 800e3b0:	0800e3c9 	.word	0x0800e3c9
 800e3b4:	0800e3c3 	.word	0x0800e3c3
 800e3b8:	0800e3cf 	.word	0x0800e3cf
 800e3bc:	2301      	movs	r3, #1
 800e3be:	77fb      	strb	r3, [r7, #31]
 800e3c0:	e151      	b.n	800e666 <UART_SetConfig+0x34e>
 800e3c2:	2302      	movs	r3, #2
 800e3c4:	77fb      	strb	r3, [r7, #31]
 800e3c6:	e14e      	b.n	800e666 <UART_SetConfig+0x34e>
 800e3c8:	2304      	movs	r3, #4
 800e3ca:	77fb      	strb	r3, [r7, #31]
 800e3cc:	e14b      	b.n	800e666 <UART_SetConfig+0x34e>
 800e3ce:	2308      	movs	r3, #8
 800e3d0:	77fb      	strb	r3, [r7, #31]
 800e3d2:	e148      	b.n	800e666 <UART_SetConfig+0x34e>
 800e3d4:	2310      	movs	r3, #16
 800e3d6:	77fb      	strb	r3, [r7, #31]
 800e3d8:	bf00      	nop
 800e3da:	e144      	b.n	800e666 <UART_SetConfig+0x34e>
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	4a8d      	ldr	r2, [pc, #564]	; (800e618 <UART_SetConfig+0x300>)
 800e3e2:	4293      	cmp	r3, r2
 800e3e4:	d134      	bne.n	800e450 <UART_SetConfig+0x138>
 800e3e6:	4b8b      	ldr	r3, [pc, #556]	; (800e614 <UART_SetConfig+0x2fc>)
 800e3e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3ec:	f003 030c 	and.w	r3, r3, #12
 800e3f0:	2b0c      	cmp	r3, #12
 800e3f2:	d829      	bhi.n	800e448 <UART_SetConfig+0x130>
 800e3f4:	a201      	add	r2, pc, #4	; (adr r2, 800e3fc <UART_SetConfig+0xe4>)
 800e3f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3fa:	bf00      	nop
 800e3fc:	0800e431 	.word	0x0800e431
 800e400:	0800e449 	.word	0x0800e449
 800e404:	0800e449 	.word	0x0800e449
 800e408:	0800e449 	.word	0x0800e449
 800e40c:	0800e43d 	.word	0x0800e43d
 800e410:	0800e449 	.word	0x0800e449
 800e414:	0800e449 	.word	0x0800e449
 800e418:	0800e449 	.word	0x0800e449
 800e41c:	0800e437 	.word	0x0800e437
 800e420:	0800e449 	.word	0x0800e449
 800e424:	0800e449 	.word	0x0800e449
 800e428:	0800e449 	.word	0x0800e449
 800e42c:	0800e443 	.word	0x0800e443
 800e430:	2300      	movs	r3, #0
 800e432:	77fb      	strb	r3, [r7, #31]
 800e434:	e117      	b.n	800e666 <UART_SetConfig+0x34e>
 800e436:	2302      	movs	r3, #2
 800e438:	77fb      	strb	r3, [r7, #31]
 800e43a:	e114      	b.n	800e666 <UART_SetConfig+0x34e>
 800e43c:	2304      	movs	r3, #4
 800e43e:	77fb      	strb	r3, [r7, #31]
 800e440:	e111      	b.n	800e666 <UART_SetConfig+0x34e>
 800e442:	2308      	movs	r3, #8
 800e444:	77fb      	strb	r3, [r7, #31]
 800e446:	e10e      	b.n	800e666 <UART_SetConfig+0x34e>
 800e448:	2310      	movs	r3, #16
 800e44a:	77fb      	strb	r3, [r7, #31]
 800e44c:	bf00      	nop
 800e44e:	e10a      	b.n	800e666 <UART_SetConfig+0x34e>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a71      	ldr	r2, [pc, #452]	; (800e61c <UART_SetConfig+0x304>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d120      	bne.n	800e49c <UART_SetConfig+0x184>
 800e45a:	4b6e      	ldr	r3, [pc, #440]	; (800e614 <UART_SetConfig+0x2fc>)
 800e45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e460:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e464:	2b10      	cmp	r3, #16
 800e466:	d00f      	beq.n	800e488 <UART_SetConfig+0x170>
 800e468:	2b10      	cmp	r3, #16
 800e46a:	d802      	bhi.n	800e472 <UART_SetConfig+0x15a>
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d005      	beq.n	800e47c <UART_SetConfig+0x164>
 800e470:	e010      	b.n	800e494 <UART_SetConfig+0x17c>
 800e472:	2b20      	cmp	r3, #32
 800e474:	d005      	beq.n	800e482 <UART_SetConfig+0x16a>
 800e476:	2b30      	cmp	r3, #48	; 0x30
 800e478:	d009      	beq.n	800e48e <UART_SetConfig+0x176>
 800e47a:	e00b      	b.n	800e494 <UART_SetConfig+0x17c>
 800e47c:	2300      	movs	r3, #0
 800e47e:	77fb      	strb	r3, [r7, #31]
 800e480:	e0f1      	b.n	800e666 <UART_SetConfig+0x34e>
 800e482:	2302      	movs	r3, #2
 800e484:	77fb      	strb	r3, [r7, #31]
 800e486:	e0ee      	b.n	800e666 <UART_SetConfig+0x34e>
 800e488:	2304      	movs	r3, #4
 800e48a:	77fb      	strb	r3, [r7, #31]
 800e48c:	e0eb      	b.n	800e666 <UART_SetConfig+0x34e>
 800e48e:	2308      	movs	r3, #8
 800e490:	77fb      	strb	r3, [r7, #31]
 800e492:	e0e8      	b.n	800e666 <UART_SetConfig+0x34e>
 800e494:	2310      	movs	r3, #16
 800e496:	77fb      	strb	r3, [r7, #31]
 800e498:	bf00      	nop
 800e49a:	e0e4      	b.n	800e666 <UART_SetConfig+0x34e>
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	4a5f      	ldr	r2, [pc, #380]	; (800e620 <UART_SetConfig+0x308>)
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	d120      	bne.n	800e4e8 <UART_SetConfig+0x1d0>
 800e4a6:	4b5b      	ldr	r3, [pc, #364]	; (800e614 <UART_SetConfig+0x2fc>)
 800e4a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e4b0:	2b40      	cmp	r3, #64	; 0x40
 800e4b2:	d00f      	beq.n	800e4d4 <UART_SetConfig+0x1bc>
 800e4b4:	2b40      	cmp	r3, #64	; 0x40
 800e4b6:	d802      	bhi.n	800e4be <UART_SetConfig+0x1a6>
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d005      	beq.n	800e4c8 <UART_SetConfig+0x1b0>
 800e4bc:	e010      	b.n	800e4e0 <UART_SetConfig+0x1c8>
 800e4be:	2b80      	cmp	r3, #128	; 0x80
 800e4c0:	d005      	beq.n	800e4ce <UART_SetConfig+0x1b6>
 800e4c2:	2bc0      	cmp	r3, #192	; 0xc0
 800e4c4:	d009      	beq.n	800e4da <UART_SetConfig+0x1c2>
 800e4c6:	e00b      	b.n	800e4e0 <UART_SetConfig+0x1c8>
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	77fb      	strb	r3, [r7, #31]
 800e4cc:	e0cb      	b.n	800e666 <UART_SetConfig+0x34e>
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	77fb      	strb	r3, [r7, #31]
 800e4d2:	e0c8      	b.n	800e666 <UART_SetConfig+0x34e>
 800e4d4:	2304      	movs	r3, #4
 800e4d6:	77fb      	strb	r3, [r7, #31]
 800e4d8:	e0c5      	b.n	800e666 <UART_SetConfig+0x34e>
 800e4da:	2308      	movs	r3, #8
 800e4dc:	77fb      	strb	r3, [r7, #31]
 800e4de:	e0c2      	b.n	800e666 <UART_SetConfig+0x34e>
 800e4e0:	2310      	movs	r3, #16
 800e4e2:	77fb      	strb	r3, [r7, #31]
 800e4e4:	bf00      	nop
 800e4e6:	e0be      	b.n	800e666 <UART_SetConfig+0x34e>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	4a4d      	ldr	r2, [pc, #308]	; (800e624 <UART_SetConfig+0x30c>)
 800e4ee:	4293      	cmp	r3, r2
 800e4f0:	d124      	bne.n	800e53c <UART_SetConfig+0x224>
 800e4f2:	4b48      	ldr	r3, [pc, #288]	; (800e614 <UART_SetConfig+0x2fc>)
 800e4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e4fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e500:	d012      	beq.n	800e528 <UART_SetConfig+0x210>
 800e502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e506:	d802      	bhi.n	800e50e <UART_SetConfig+0x1f6>
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d007      	beq.n	800e51c <UART_SetConfig+0x204>
 800e50c:	e012      	b.n	800e534 <UART_SetConfig+0x21c>
 800e50e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e512:	d006      	beq.n	800e522 <UART_SetConfig+0x20a>
 800e514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e518:	d009      	beq.n	800e52e <UART_SetConfig+0x216>
 800e51a:	e00b      	b.n	800e534 <UART_SetConfig+0x21c>
 800e51c:	2300      	movs	r3, #0
 800e51e:	77fb      	strb	r3, [r7, #31]
 800e520:	e0a1      	b.n	800e666 <UART_SetConfig+0x34e>
 800e522:	2302      	movs	r3, #2
 800e524:	77fb      	strb	r3, [r7, #31]
 800e526:	e09e      	b.n	800e666 <UART_SetConfig+0x34e>
 800e528:	2304      	movs	r3, #4
 800e52a:	77fb      	strb	r3, [r7, #31]
 800e52c:	e09b      	b.n	800e666 <UART_SetConfig+0x34e>
 800e52e:	2308      	movs	r3, #8
 800e530:	77fb      	strb	r3, [r7, #31]
 800e532:	e098      	b.n	800e666 <UART_SetConfig+0x34e>
 800e534:	2310      	movs	r3, #16
 800e536:	77fb      	strb	r3, [r7, #31]
 800e538:	bf00      	nop
 800e53a:	e094      	b.n	800e666 <UART_SetConfig+0x34e>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	4a39      	ldr	r2, [pc, #228]	; (800e628 <UART_SetConfig+0x310>)
 800e542:	4293      	cmp	r3, r2
 800e544:	d124      	bne.n	800e590 <UART_SetConfig+0x278>
 800e546:	4b33      	ldr	r3, [pc, #204]	; (800e614 <UART_SetConfig+0x2fc>)
 800e548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e54c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e554:	d012      	beq.n	800e57c <UART_SetConfig+0x264>
 800e556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e55a:	d802      	bhi.n	800e562 <UART_SetConfig+0x24a>
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d007      	beq.n	800e570 <UART_SetConfig+0x258>
 800e560:	e012      	b.n	800e588 <UART_SetConfig+0x270>
 800e562:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e566:	d006      	beq.n	800e576 <UART_SetConfig+0x25e>
 800e568:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e56c:	d009      	beq.n	800e582 <UART_SetConfig+0x26a>
 800e56e:	e00b      	b.n	800e588 <UART_SetConfig+0x270>
 800e570:	2301      	movs	r3, #1
 800e572:	77fb      	strb	r3, [r7, #31]
 800e574:	e077      	b.n	800e666 <UART_SetConfig+0x34e>
 800e576:	2302      	movs	r3, #2
 800e578:	77fb      	strb	r3, [r7, #31]
 800e57a:	e074      	b.n	800e666 <UART_SetConfig+0x34e>
 800e57c:	2304      	movs	r3, #4
 800e57e:	77fb      	strb	r3, [r7, #31]
 800e580:	e071      	b.n	800e666 <UART_SetConfig+0x34e>
 800e582:	2308      	movs	r3, #8
 800e584:	77fb      	strb	r3, [r7, #31]
 800e586:	e06e      	b.n	800e666 <UART_SetConfig+0x34e>
 800e588:	2310      	movs	r3, #16
 800e58a:	77fb      	strb	r3, [r7, #31]
 800e58c:	bf00      	nop
 800e58e:	e06a      	b.n	800e666 <UART_SetConfig+0x34e>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	4a25      	ldr	r2, [pc, #148]	; (800e62c <UART_SetConfig+0x314>)
 800e596:	4293      	cmp	r3, r2
 800e598:	d124      	bne.n	800e5e4 <UART_SetConfig+0x2cc>
 800e59a:	4b1e      	ldr	r3, [pc, #120]	; (800e614 <UART_SetConfig+0x2fc>)
 800e59c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5a0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e5a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5a8:	d012      	beq.n	800e5d0 <UART_SetConfig+0x2b8>
 800e5aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5ae:	d802      	bhi.n	800e5b6 <UART_SetConfig+0x29e>
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d007      	beq.n	800e5c4 <UART_SetConfig+0x2ac>
 800e5b4:	e012      	b.n	800e5dc <UART_SetConfig+0x2c4>
 800e5b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e5ba:	d006      	beq.n	800e5ca <UART_SetConfig+0x2b2>
 800e5bc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e5c0:	d009      	beq.n	800e5d6 <UART_SetConfig+0x2be>
 800e5c2:	e00b      	b.n	800e5dc <UART_SetConfig+0x2c4>
 800e5c4:	2300      	movs	r3, #0
 800e5c6:	77fb      	strb	r3, [r7, #31]
 800e5c8:	e04d      	b.n	800e666 <UART_SetConfig+0x34e>
 800e5ca:	2302      	movs	r3, #2
 800e5cc:	77fb      	strb	r3, [r7, #31]
 800e5ce:	e04a      	b.n	800e666 <UART_SetConfig+0x34e>
 800e5d0:	2304      	movs	r3, #4
 800e5d2:	77fb      	strb	r3, [r7, #31]
 800e5d4:	e047      	b.n	800e666 <UART_SetConfig+0x34e>
 800e5d6:	2308      	movs	r3, #8
 800e5d8:	77fb      	strb	r3, [r7, #31]
 800e5da:	e044      	b.n	800e666 <UART_SetConfig+0x34e>
 800e5dc:	2310      	movs	r3, #16
 800e5de:	77fb      	strb	r3, [r7, #31]
 800e5e0:	bf00      	nop
 800e5e2:	e040      	b.n	800e666 <UART_SetConfig+0x34e>
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	4a11      	ldr	r2, [pc, #68]	; (800e630 <UART_SetConfig+0x318>)
 800e5ea:	4293      	cmp	r3, r2
 800e5ec:	d139      	bne.n	800e662 <UART_SetConfig+0x34a>
 800e5ee:	4b09      	ldr	r3, [pc, #36]	; (800e614 <UART_SetConfig+0x2fc>)
 800e5f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e5f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e5fc:	d027      	beq.n	800e64e <UART_SetConfig+0x336>
 800e5fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e602:	d817      	bhi.n	800e634 <UART_SetConfig+0x31c>
 800e604:	2b00      	cmp	r3, #0
 800e606:	d01c      	beq.n	800e642 <UART_SetConfig+0x32a>
 800e608:	e027      	b.n	800e65a <UART_SetConfig+0x342>
 800e60a:	bf00      	nop
 800e60c:	efff69f3 	.word	0xefff69f3
 800e610:	40011000 	.word	0x40011000
 800e614:	40023800 	.word	0x40023800
 800e618:	40004400 	.word	0x40004400
 800e61c:	40004800 	.word	0x40004800
 800e620:	40004c00 	.word	0x40004c00
 800e624:	40005000 	.word	0x40005000
 800e628:	40011400 	.word	0x40011400
 800e62c:	40007800 	.word	0x40007800
 800e630:	40007c00 	.word	0x40007c00
 800e634:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e638:	d006      	beq.n	800e648 <UART_SetConfig+0x330>
 800e63a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e63e:	d009      	beq.n	800e654 <UART_SetConfig+0x33c>
 800e640:	e00b      	b.n	800e65a <UART_SetConfig+0x342>
 800e642:	2300      	movs	r3, #0
 800e644:	77fb      	strb	r3, [r7, #31]
 800e646:	e00e      	b.n	800e666 <UART_SetConfig+0x34e>
 800e648:	2302      	movs	r3, #2
 800e64a:	77fb      	strb	r3, [r7, #31]
 800e64c:	e00b      	b.n	800e666 <UART_SetConfig+0x34e>
 800e64e:	2304      	movs	r3, #4
 800e650:	77fb      	strb	r3, [r7, #31]
 800e652:	e008      	b.n	800e666 <UART_SetConfig+0x34e>
 800e654:	2308      	movs	r3, #8
 800e656:	77fb      	strb	r3, [r7, #31]
 800e658:	e005      	b.n	800e666 <UART_SetConfig+0x34e>
 800e65a:	2310      	movs	r3, #16
 800e65c:	77fb      	strb	r3, [r7, #31]
 800e65e:	bf00      	nop
 800e660:	e001      	b.n	800e666 <UART_SetConfig+0x34e>
 800e662:	2310      	movs	r3, #16
 800e664:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	69db      	ldr	r3, [r3, #28]
 800e66a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e66e:	d17f      	bne.n	800e770 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800e670:	7ffb      	ldrb	r3, [r7, #31]
 800e672:	2b08      	cmp	r3, #8
 800e674:	d85c      	bhi.n	800e730 <UART_SetConfig+0x418>
 800e676:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <UART_SetConfig+0x364>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e6a1 	.word	0x0800e6a1
 800e680:	0800e6c1 	.word	0x0800e6c1
 800e684:	0800e6e1 	.word	0x0800e6e1
 800e688:	0800e731 	.word	0x0800e731
 800e68c:	0800e6f9 	.word	0x0800e6f9
 800e690:	0800e731 	.word	0x0800e731
 800e694:	0800e731 	.word	0x0800e731
 800e698:	0800e731 	.word	0x0800e731
 800e69c:	0800e719 	.word	0x0800e719
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6a0:	f7fc f8d0 	bl	800a844 <HAL_RCC_GetPCLK1Freq>
 800e6a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	005a      	lsls	r2, r3, #1
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	085b      	lsrs	r3, r3, #1
 800e6b0:	441a      	add	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	61bb      	str	r3, [r7, #24]
        break;
 800e6be:	e03a      	b.n	800e736 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6c0:	f7fc f8d4 	bl	800a86c <HAL_RCC_GetPCLK2Freq>
 800e6c4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	005a      	lsls	r2, r3, #1
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	085b      	lsrs	r3, r3, #1
 800e6d0:	441a      	add	r2, r3
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	685b      	ldr	r3, [r3, #4]
 800e6d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6da:	b29b      	uxth	r3, r3
 800e6dc:	61bb      	str	r3, [r7, #24]
        break;
 800e6de:	e02a      	b.n	800e736 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	685b      	ldr	r3, [r3, #4]
 800e6e4:	085a      	lsrs	r2, r3, #1
 800e6e6:	4b5f      	ldr	r3, [pc, #380]	; (800e864 <UART_SetConfig+0x54c>)
 800e6e8:	4413      	add	r3, r2
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	6852      	ldr	r2, [r2, #4]
 800e6ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	61bb      	str	r3, [r7, #24]
        break;
 800e6f6:	e01e      	b.n	800e736 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e6f8:	f7fb ffc0 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800e6fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	005a      	lsls	r2, r3, #1
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	685b      	ldr	r3, [r3, #4]
 800e706:	085b      	lsrs	r3, r3, #1
 800e708:	441a      	add	r2, r3
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	685b      	ldr	r3, [r3, #4]
 800e70e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e712:	b29b      	uxth	r3, r3
 800e714:	61bb      	str	r3, [r7, #24]
        break;
 800e716:	e00e      	b.n	800e736 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	685b      	ldr	r3, [r3, #4]
 800e71c:	085b      	lsrs	r3, r3, #1
 800e71e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	685b      	ldr	r3, [r3, #4]
 800e726:	fbb2 f3f3 	udiv	r3, r2, r3
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	61bb      	str	r3, [r7, #24]
        break;
 800e72e:	e002      	b.n	800e736 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800e730:	2301      	movs	r3, #1
 800e732:	75fb      	strb	r3, [r7, #23]
        break;
 800e734:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	2b0f      	cmp	r3, #15
 800e73a:	d916      	bls.n	800e76a <UART_SetConfig+0x452>
 800e73c:	69bb      	ldr	r3, [r7, #24]
 800e73e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e742:	d212      	bcs.n	800e76a <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	b29b      	uxth	r3, r3
 800e748:	f023 030f 	bic.w	r3, r3, #15
 800e74c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	085b      	lsrs	r3, r3, #1
 800e752:	b29b      	uxth	r3, r3
 800e754:	f003 0307 	and.w	r3, r3, #7
 800e758:	b29a      	uxth	r2, r3
 800e75a:	897b      	ldrh	r3, [r7, #10]
 800e75c:	4313      	orrs	r3, r2
 800e75e:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	897a      	ldrh	r2, [r7, #10]
 800e766:	60da      	str	r2, [r3, #12]
 800e768:	e070      	b.n	800e84c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e76a:	2301      	movs	r3, #1
 800e76c:	75fb      	strb	r3, [r7, #23]
 800e76e:	e06d      	b.n	800e84c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800e770:	7ffb      	ldrb	r3, [r7, #31]
 800e772:	2b08      	cmp	r3, #8
 800e774:	d859      	bhi.n	800e82a <UART_SetConfig+0x512>
 800e776:	a201      	add	r2, pc, #4	; (adr r2, 800e77c <UART_SetConfig+0x464>)
 800e778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77c:	0800e7a1 	.word	0x0800e7a1
 800e780:	0800e7bf 	.word	0x0800e7bf
 800e784:	0800e7dd 	.word	0x0800e7dd
 800e788:	0800e82b 	.word	0x0800e82b
 800e78c:	0800e7f5 	.word	0x0800e7f5
 800e790:	0800e82b 	.word	0x0800e82b
 800e794:	0800e82b 	.word	0x0800e82b
 800e798:	0800e82b 	.word	0x0800e82b
 800e79c:	0800e813 	.word	0x0800e813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7a0:	f7fc f850 	bl	800a844 <HAL_RCC_GetPCLK1Freq>
 800e7a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	685b      	ldr	r3, [r3, #4]
 800e7aa:	085a      	lsrs	r2, r3, #1
 800e7ac:	68fb      	ldr	r3, [r7, #12]
 800e7ae:	441a      	add	r2, r3
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	61bb      	str	r3, [r7, #24]
        break;
 800e7bc:	e038      	b.n	800e830 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7be:	f7fc f855 	bl	800a86c <HAL_RCC_GetPCLK2Freq>
 800e7c2:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	085a      	lsrs	r2, r3, #1
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	441a      	add	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	685b      	ldr	r3, [r3, #4]
 800e7d2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	61bb      	str	r3, [r7, #24]
        break;
 800e7da:	e029      	b.n	800e830 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	685b      	ldr	r3, [r3, #4]
 800e7e0:	085a      	lsrs	r2, r3, #1
 800e7e2:	4b21      	ldr	r3, [pc, #132]	; (800e868 <UART_SetConfig+0x550>)
 800e7e4:	4413      	add	r3, r2
 800e7e6:	687a      	ldr	r2, [r7, #4]
 800e7e8:	6852      	ldr	r2, [r2, #4]
 800e7ea:	fbb3 f3f2 	udiv	r3, r3, r2
 800e7ee:	b29b      	uxth	r3, r3
 800e7f0:	61bb      	str	r3, [r7, #24]
        break;
 800e7f2:	e01d      	b.n	800e830 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7f4:	f7fb ff42 	bl	800a67c <HAL_RCC_GetSysClockFreq>
 800e7f8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	085a      	lsrs	r2, r3, #1
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	441a      	add	r2, r3
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	fbb2 f3f3 	udiv	r3, r2, r3
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	61bb      	str	r3, [r7, #24]
        break;
 800e810:	e00e      	b.n	800e830 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	085b      	lsrs	r3, r3, #1
 800e818:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	685b      	ldr	r3, [r3, #4]
 800e820:	fbb2 f3f3 	udiv	r3, r2, r3
 800e824:	b29b      	uxth	r3, r3
 800e826:	61bb      	str	r3, [r7, #24]
        break;
 800e828:	e002      	b.n	800e830 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	75fb      	strb	r3, [r7, #23]
        break;
 800e82e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	2b0f      	cmp	r3, #15
 800e834:	d908      	bls.n	800e848 <UART_SetConfig+0x530>
 800e836:	69bb      	ldr	r3, [r7, #24]
 800e838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e83c:	d204      	bcs.n	800e848 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	69ba      	ldr	r2, [r7, #24]
 800e844:	60da      	str	r2, [r3, #12]
 800e846:	e001      	b.n	800e84c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e848:	2301      	movs	r3, #1
 800e84a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	2200      	movs	r2, #0
 800e850:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800e858:	7dfb      	ldrb	r3, [r7, #23]
}
 800e85a:	4618      	mov	r0, r3
 800e85c:	3720      	adds	r7, #32
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	01e84800 	.word	0x01e84800
 800e868:	00f42400 	.word	0x00f42400

0800e86c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b083      	sub	sp, #12
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e878:	f003 0301 	and.w	r3, r3, #1
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d00a      	beq.n	800e896 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	685b      	ldr	r3, [r3, #4]
 800e886:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	681b      	ldr	r3, [r3, #0]
 800e892:	430a      	orrs	r2, r1
 800e894:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e89a:	f003 0302 	and.w	r3, r3, #2
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d00a      	beq.n	800e8b8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	430a      	orrs	r2, r1
 800e8b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8bc:	f003 0304 	and.w	r3, r3, #4
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d00a      	beq.n	800e8da <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	685b      	ldr	r3, [r3, #4]
 800e8ca:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	430a      	orrs	r2, r1
 800e8d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8de:	f003 0308 	and.w	r3, r3, #8
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d00a      	beq.n	800e8fc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	430a      	orrs	r2, r1
 800e8fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e900:	f003 0310 	and.w	r3, r3, #16
 800e904:	2b00      	cmp	r3, #0
 800e906:	d00a      	beq.n	800e91e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	689b      	ldr	r3, [r3, #8]
 800e90e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	430a      	orrs	r2, r1
 800e91c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e922:	f003 0320 	and.w	r3, r3, #32
 800e926:	2b00      	cmp	r3, #0
 800e928:	d00a      	beq.n	800e940 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	681b      	ldr	r3, [r3, #0]
 800e92e:	689b      	ldr	r3, [r3, #8]
 800e930:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	430a      	orrs	r2, r1
 800e93e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d01a      	beq.n	800e982 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	685b      	ldr	r3, [r3, #4]
 800e952:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	430a      	orrs	r2, r1
 800e960:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e96a:	d10a      	bne.n	800e982 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	681b      	ldr	r3, [r3, #0]
 800e97e:	430a      	orrs	r2, r1
 800e980:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00a      	beq.n	800e9a4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	685b      	ldr	r3, [r3, #4]
 800e994:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	430a      	orrs	r2, r1
 800e9a2:	605a      	str	r2, [r3, #4]
  }
}
 800e9a4:	bf00      	nop
 800e9a6:	370c      	adds	r7, #12
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e9b0:	b580      	push	{r7, lr}
 800e9b2:	b086      	sub	sp, #24
 800e9b4:	af02      	add	r7, sp, #8
 800e9b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2200      	movs	r2, #0
 800e9bc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e9be:	f7f8 fd95 	bl	80074ec <HAL_GetTick>
 800e9c2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	f003 0308 	and.w	r3, r3, #8
 800e9ce:	2b08      	cmp	r3, #8
 800e9d0:	d10e      	bne.n	800e9f0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e9d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e9d6:	9300      	str	r3, [sp, #0]
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 f814 	bl	800ea0e <UART_WaitOnFlagUntilTimeout>
 800e9e6:	4603      	mov	r3, r0
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d001      	beq.n	800e9f0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e9ec:	2303      	movs	r3, #3
 800e9ee:	e00a      	b.n	800ea06 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2220      	movs	r2, #32
 800e9f4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	2220      	movs	r2, #32
 800e9fa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3710      	adds	r7, #16
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd80      	pop	{r7, pc}

0800ea0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b084      	sub	sp, #16
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	60f8      	str	r0, [r7, #12]
 800ea16:	60b9      	str	r1, [r7, #8]
 800ea18:	603b      	str	r3, [r7, #0]
 800ea1a:	4613      	mov	r3, r2
 800ea1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea1e:	e05d      	b.n	800eadc <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea20:	69bb      	ldr	r3, [r7, #24]
 800ea22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea26:	d059      	beq.n	800eadc <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea28:	f7f8 fd60 	bl	80074ec <HAL_GetTick>
 800ea2c:	4602      	mov	r2, r0
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	1ad3      	subs	r3, r2, r3
 800ea32:	69ba      	ldr	r2, [r7, #24]
 800ea34:	429a      	cmp	r2, r3
 800ea36:	d302      	bcc.n	800ea3e <UART_WaitOnFlagUntilTimeout+0x30>
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d11b      	bne.n	800ea76 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ea3e:	68fb      	ldr	r3, [r7, #12]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800ea4c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	681b      	ldr	r3, [r3, #0]
 800ea52:	689a      	ldr	r2, [r3, #8]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	f022 0201 	bic.w	r2, r2, #1
 800ea5c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	2220      	movs	r2, #32
 800ea62:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2220      	movs	r2, #32
 800ea68:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800ea72:	2303      	movs	r3, #3
 800ea74:	e042      	b.n	800eafc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f003 0304 	and.w	r3, r3, #4
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d02b      	beq.n	800eadc <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	69db      	ldr	r3, [r3, #28]
 800ea8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ea8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ea92:	d123      	bne.n	800eadc <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	681b      	ldr	r3, [r3, #0]
 800ea98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ea9c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eaac:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	689a      	ldr	r2, [r3, #8]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f022 0201 	bic.w	r2, r2, #1
 800eabc:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	2220      	movs	r2, #32
 800eac2:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	2220      	movs	r2, #32
 800eac8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	2220      	movs	r2, #32
 800eace:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	2200      	movs	r2, #0
 800ead4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800ead8:	2303      	movs	r3, #3
 800eada:	e00f      	b.n	800eafc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	69da      	ldr	r2, [r3, #28]
 800eae2:	68bb      	ldr	r3, [r7, #8]
 800eae4:	4013      	ands	r3, r2
 800eae6:	68ba      	ldr	r2, [r7, #8]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	bf0c      	ite	eq
 800eaec:	2301      	moveq	r3, #1
 800eaee:	2300      	movne	r3, #0
 800eaf0:	b2db      	uxtb	r3, r3
 800eaf2:	461a      	mov	r2, r3
 800eaf4:	79fb      	ldrb	r3, [r7, #7]
 800eaf6:	429a      	cmp	r2, r3
 800eaf8:	d092      	beq.n	800ea20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eafa:	2300      	movs	r3, #0
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3710      	adds	r7, #16
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}

0800eb04 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb04:	b480      	push	{r7}
 800eb06:	b083      	sub	sp, #12
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800eb1a:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2220      	movs	r2, #32
 800eb20:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eb22:	bf00      	nop
 800eb24:	370c      	adds	r7, #12
 800eb26:	46bd      	mov	sp, r7
 800eb28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb2c:	4770      	bx	lr

0800eb2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eb2e:	b480      	push	{r7}
 800eb30:	b083      	sub	sp, #12
 800eb32:	af00      	add	r7, sp, #0
 800eb34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eb44:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	689a      	ldr	r2, [r3, #8]
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f022 0201 	bic.w	r2, r2, #1
 800eb54:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	2220      	movs	r2, #32
 800eb5a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2200      	movs	r2, #0
 800eb60:	661a      	str	r2, [r3, #96]	; 0x60
}
 800eb62:	bf00      	nop
 800eb64:	370c      	adds	r7, #12
 800eb66:	46bd      	mov	sp, r7
 800eb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6c:	4770      	bx	lr

0800eb6e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eb6e:	b580      	push	{r7, lr}
 800eb70:	b084      	sub	sp, #16
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb7a:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	69db      	ldr	r3, [r3, #28]
 800eb80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800eb84:	d01e      	beq.n	800ebc4 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2200      	movs	r2, #0
 800eb8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	681a      	ldr	r2, [r3, #0]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800eb9c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	689a      	ldr	r2, [r3, #8]
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	f022 0201 	bic.w	r2, r2, #1
 800ebac:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	689a      	ldr	r2, [r3, #8]
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ebbc:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ebbe:	68fb      	ldr	r3, [r7, #12]
 800ebc0:	2220      	movs	r2, #32
 800ebc2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	f7f8 fbd9 	bl	800737c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebca:	bf00      	nop
 800ebcc:	3710      	adds	r7, #16
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	bd80      	pop	{r7, pc}

0800ebd2 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ebd2:	b580      	push	{r7, lr}
 800ebd4:	b084      	sub	sp, #16
 800ebd6:	af00      	add	r7, sp, #0
 800ebd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ebe0:	68f8      	ldr	r0, [r7, #12]
 800ebe2:	f7ff fb85 	bl	800e2f0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ebe6:	bf00      	nop
 800ebe8:	3710      	adds	r7, #16
 800ebea:	46bd      	mov	sp, r7
 800ebec:	bd80      	pop	{r7, pc}

0800ebee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ebee:	b580      	push	{r7, lr}
 800ebf0:	b086      	sub	sp, #24
 800ebf2:	af00      	add	r7, sp, #0
 800ebf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebfa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec00:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ec02:	697b      	ldr	r3, [r7, #20]
 800ec04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec06:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ec08:	697b      	ldr	r3, [r7, #20]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	689b      	ldr	r3, [r3, #8]
 800ec0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec12:	2b80      	cmp	r3, #128	; 0x80
 800ec14:	d109      	bne.n	800ec2a <UART_DMAError+0x3c>
 800ec16:	693b      	ldr	r3, [r7, #16]
 800ec18:	2b21      	cmp	r3, #33	; 0x21
 800ec1a:	d106      	bne.n	800ec2a <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ec24:	6978      	ldr	r0, [r7, #20]
 800ec26:	f7ff ff6d 	bl	800eb04 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	689b      	ldr	r3, [r3, #8]
 800ec30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec34:	2b40      	cmp	r3, #64	; 0x40
 800ec36:	d109      	bne.n	800ec4c <UART_DMAError+0x5e>
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b22      	cmp	r3, #34	; 0x22
 800ec3c:	d106      	bne.n	800ec4c <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	2200      	movs	r2, #0
 800ec42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ec46:	6978      	ldr	r0, [r7, #20]
 800ec48:	f7ff ff71 	bl	800eb2e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec50:	f043 0210 	orr.w	r2, r3, #16
 800ec54:	697b      	ldr	r3, [r7, #20]
 800ec56:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec58:	6978      	ldr	r0, [r7, #20]
 800ec5a:	f7ff fb53 	bl	800e304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec5e:	bf00      	nop
 800ec60:	3718      	adds	r7, #24
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}

0800ec66 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ec66:	b580      	push	{r7, lr}
 800ec68:	b084      	sub	sp, #16
 800ec6a:	af00      	add	r7, sp, #0
 800ec6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ec74:	68fb      	ldr	r3, [r7, #12]
 800ec76:	2200      	movs	r2, #0
 800ec78:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	2200      	movs	r2, #0
 800ec80:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ec84:	68f8      	ldr	r0, [r7, #12]
 800ec86:	f7ff fb3d 	bl	800e304 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec8a:	bf00      	nop
 800ec8c:	3710      	adds	r7, #16
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}

0800ec92 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ec92:	b580      	push	{r7, lr}
 800ec94:	b082      	sub	sp, #8
 800ec96:	af00      	add	r7, sp, #0
 800ec98:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	681a      	ldr	r2, [r3, #0]
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eca8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	2220      	movs	r2, #32
 800ecae:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2200      	movs	r2, #0
 800ecb4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ecb6:	6878      	ldr	r0, [r7, #4]
 800ecb8:	f7ff fb10 	bl	800e2dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecbc:	bf00      	nop
 800ecbe:	3708      	adds	r7, #8
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}

0800ecc4 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b084      	sub	sp, #16
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ecd2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ecd8:	2b22      	cmp	r3, #34	; 0x22
 800ecda:	d13a      	bne.n	800ed52 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ece2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ece4:	89bb      	ldrh	r3, [r7, #12]
 800ece6:	b2d9      	uxtb	r1, r3
 800ece8:	89fb      	ldrh	r3, [r7, #14]
 800ecea:	b2da      	uxtb	r2, r3
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecf0:	400a      	ands	r2, r1
 800ecf2:	b2d2      	uxtb	r2, r2
 800ecf4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ecfa:	1c5a      	adds	r2, r3, #1
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ed06:	b29b      	uxth	r3, r3
 800ed08:	3b01      	subs	r3, #1
 800ed0a:	b29a      	uxth	r2, r3
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ed18:	b29b      	uxth	r3, r3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d121      	bne.n	800ed62 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	681b      	ldr	r3, [r3, #0]
 800ed22:	681a      	ldr	r2, [r3, #0]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ed2c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	689a      	ldr	r2, [r3, #8]
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	f022 0201 	bic.w	r2, r2, #1
 800ed3c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2220      	movs	r2, #32
 800ed42:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	2200      	movs	r2, #0
 800ed48:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ed4a:	6878      	ldr	r0, [r7, #4]
 800ed4c:	f7f8 fb16 	bl	800737c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ed50:	e007      	b.n	800ed62 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	699a      	ldr	r2, [r3, #24]
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	f042 0208 	orr.w	r2, r2, #8
 800ed60:	619a      	str	r2, [r3, #24]
}
 800ed62:	bf00      	nop
 800ed64:	3710      	adds	r7, #16
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}

0800ed6a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ed6a:	b580      	push	{r7, lr}
 800ed6c:	b084      	sub	sp, #16
 800ed6e:	af00      	add	r7, sp, #0
 800ed70:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed78:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed7e:	2b22      	cmp	r3, #34	; 0x22
 800ed80:	d13a      	bne.n	800edf8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed88:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed8e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ed90:	89ba      	ldrh	r2, [r7, #12]
 800ed92:	89fb      	ldrh	r3, [r7, #14]
 800ed94:	4013      	ands	r3, r2
 800ed96:	b29a      	uxth	r2, r3
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eda0:	1c9a      	adds	r2, r3, #2
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800edac:	b29b      	uxth	r3, r3
 800edae:	3b01      	subs	r3, #1
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d121      	bne.n	800ee08 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	681a      	ldr	r2, [r3, #0]
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800edd2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	689a      	ldr	r2, [r3, #8]
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	f022 0201 	bic.w	r2, r2, #1
 800ede2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2220      	movs	r2, #32
 800ede8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	2200      	movs	r2, #0
 800edee:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800edf0:	6878      	ldr	r0, [r7, #4]
 800edf2:	f7f8 fac3 	bl	800737c <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800edf6:	e007      	b.n	800ee08 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	699a      	ldr	r2, [r3, #24]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	681b      	ldr	r3, [r3, #0]
 800ee02:	f042 0208 	orr.w	r2, r2, #8
 800ee06:	619a      	str	r2, [r3, #24]
}
 800ee08:	bf00      	nop
 800ee0a:	3710      	adds	r7, #16
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	bd80      	pop	{r7, pc}

0800ee10 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ee10:	b084      	sub	sp, #16
 800ee12:	b480      	push	{r7}
 800ee14:	b085      	sub	sp, #20
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
 800ee1a:	f107 001c 	add.w	r0, r7, #28
 800ee1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ee22:	2300      	movs	r3, #0
 800ee24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ee26:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ee28:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ee2a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ee2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ee2e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ee30:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ee32:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ee34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ee36:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ee38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ee3a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ee3c:	68fa      	ldr	r2, [r7, #12]
 800ee3e:	4313      	orrs	r3, r2
 800ee40:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	685a      	ldr	r2, [r3, #4]
 800ee46:	4b07      	ldr	r3, [pc, #28]	; (800ee64 <SDMMC_Init+0x54>)
 800ee48:	4013      	ands	r3, r2
 800ee4a:	68fa      	ldr	r2, [r7, #12]
 800ee4c:	431a      	orrs	r2, r3
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ee52:	2300      	movs	r3, #0
}
 800ee54:	4618      	mov	r0, r3
 800ee56:	3714      	adds	r7, #20
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	b004      	add	sp, #16
 800ee60:	4770      	bx	lr
 800ee62:	bf00      	nop
 800ee64:	ffff8100 	.word	0xffff8100

0800ee68 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b083      	sub	sp, #12
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ee76:	4618      	mov	r0, r3
 800ee78:	370c      	adds	r7, #12
 800ee7a:	46bd      	mov	sp, r7
 800ee7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee80:	4770      	bx	lr

0800ee82 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ee82:	b480      	push	{r7}
 800ee84:	b083      	sub	sp, #12
 800ee86:	af00      	add	r7, sp, #0
 800ee88:	6078      	str	r0, [r7, #4]
 800ee8a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ee8c:	683b      	ldr	r3, [r7, #0]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ee96:	2300      	movs	r3, #0
}
 800ee98:	4618      	mov	r0, r3
 800ee9a:	370c      	adds	r7, #12
 800ee9c:	46bd      	mov	sp, r7
 800ee9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea2:	4770      	bx	lr

0800eea4 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800eea4:	b580      	push	{r7, lr}
 800eea6:	b082      	sub	sp, #8
 800eea8:	af00      	add	r7, sp, #0
 800eeaa:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2203      	movs	r2, #3
 800eeb0:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800eeb2:	2002      	movs	r0, #2
 800eeb4:	f7f8 fb26 	bl	8007504 <HAL_Delay>
  
  return HAL_OK;
 800eeb8:	2300      	movs	r3, #0
}
 800eeba:	4618      	mov	r0, r3
 800eebc:	3708      	adds	r7, #8
 800eebe:	46bd      	mov	sp, r7
 800eec0:	bd80      	pop	{r7, pc}

0800eec2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800eec2:	b480      	push	{r7}
 800eec4:	b083      	sub	sp, #12
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	f003 0303 	and.w	r3, r3, #3
}
 800eed2:	4618      	mov	r0, r3
 800eed4:	370c      	adds	r7, #12
 800eed6:	46bd      	mov	sp, r7
 800eed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eedc:	4770      	bx	lr
	...

0800eee0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b085      	sub	sp, #20
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	681a      	ldr	r2, [r3, #0]
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800eefe:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ef04:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ef06:	683b      	ldr	r3, [r7, #0]
 800ef08:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ef0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	4313      	orrs	r3, r2
 800ef10:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	68da      	ldr	r2, [r3, #12]
 800ef16:	4b06      	ldr	r3, [pc, #24]	; (800ef30 <SDMMC_SendCommand+0x50>)
 800ef18:	4013      	ands	r3, r2
 800ef1a:	68fa      	ldr	r2, [r7, #12]
 800ef1c:	431a      	orrs	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ef22:	2300      	movs	r3, #0
}
 800ef24:	4618      	mov	r0, r3
 800ef26:	3714      	adds	r7, #20
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2e:	4770      	bx	lr
 800ef30:	fffff000 	.word	0xfffff000

0800ef34 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ef34:	b480      	push	{r7}
 800ef36:	b083      	sub	sp, #12
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	691b      	ldr	r3, [r3, #16]
 800ef40:	b2db      	uxtb	r3, r3
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	370c      	adds	r7, #12
 800ef46:	46bd      	mov	sp, r7
 800ef48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4c:	4770      	bx	lr

0800ef4e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ef4e:	b480      	push	{r7}
 800ef50:	b085      	sub	sp, #20
 800ef52:	af00      	add	r7, sp, #0
 800ef54:	6078      	str	r0, [r7, #4]
 800ef56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	3314      	adds	r3, #20
 800ef5c:	461a      	mov	r2, r3
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	4413      	add	r3, r2
 800ef62:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681b      	ldr	r3, [r3, #0]
}  
 800ef68:	4618      	mov	r0, r3
 800ef6a:	3714      	adds	r7, #20
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr

0800ef74 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ef74:	b480      	push	{r7}
 800ef76:	b085      	sub	sp, #20
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
 800ef7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	685a      	ldr	r2, [r3, #4]
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ef92:	683b      	ldr	r3, [r7, #0]
 800ef94:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ef96:	683b      	ldr	r3, [r7, #0]
 800ef98:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ef9a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ef9c:	683b      	ldr	r3, [r7, #0]
 800ef9e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800efa0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800efa2:	683b      	ldr	r3, [r7, #0]
 800efa4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800efa6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800efa8:	68fa      	ldr	r2, [r7, #12]
 800efaa:	4313      	orrs	r3, r2
 800efac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	431a      	orrs	r2, r3
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800efbe:	2300      	movs	r3, #0

}
 800efc0:	4618      	mov	r0, r3
 800efc2:	3714      	adds	r7, #20
 800efc4:	46bd      	mov	sp, r7
 800efc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efca:	4770      	bx	lr

0800efcc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800efcc:	b580      	push	{r7, lr}
 800efce:	b088      	sub	sp, #32
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800efda:	2310      	movs	r3, #16
 800efdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efde:	2340      	movs	r3, #64	; 0x40
 800efe0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efe2:	2300      	movs	r3, #0
 800efe4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efec:	f107 0308 	add.w	r3, r7, #8
 800eff0:	4619      	mov	r1, r3
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f7ff ff74 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800eff8:	f241 3288 	movw	r2, #5000	; 0x1388
 800effc:	2110      	movs	r1, #16
 800effe:	6878      	ldr	r0, [r7, #4]
 800f000:	f000 fa42 	bl	800f488 <SDMMC_GetCmdResp1>
 800f004:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f006:	69fb      	ldr	r3, [r7, #28]
}
 800f008:	4618      	mov	r0, r3
 800f00a:	3720      	adds	r7, #32
 800f00c:	46bd      	mov	sp, r7
 800f00e:	bd80      	pop	{r7, pc}

0800f010 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b088      	sub	sp, #32
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f01e:	2311      	movs	r3, #17
 800f020:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f022:	2340      	movs	r3, #64	; 0x40
 800f024:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f026:	2300      	movs	r3, #0
 800f028:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f02a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f02e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f030:	f107 0308 	add.w	r3, r7, #8
 800f034:	4619      	mov	r1, r3
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f7ff ff52 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f03c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f040:	2111      	movs	r1, #17
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 fa20 	bl	800f488 <SDMMC_GetCmdResp1>
 800f048:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f04a:	69fb      	ldr	r3, [r7, #28]
}
 800f04c:	4618      	mov	r0, r3
 800f04e:	3720      	adds	r7, #32
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b088      	sub	sp, #32
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
 800f05c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f062:	2312      	movs	r3, #18
 800f064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f066:	2340      	movs	r3, #64	; 0x40
 800f068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f06a:	2300      	movs	r3, #0
 800f06c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f06e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f072:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f074:	f107 0308 	add.w	r3, r7, #8
 800f078:	4619      	mov	r1, r3
 800f07a:	6878      	ldr	r0, [r7, #4]
 800f07c:	f7ff ff30 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f080:	f241 3288 	movw	r2, #5000	; 0x1388
 800f084:	2112      	movs	r1, #18
 800f086:	6878      	ldr	r0, [r7, #4]
 800f088:	f000 f9fe 	bl	800f488 <SDMMC_GetCmdResp1>
 800f08c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f08e:	69fb      	ldr	r3, [r7, #28]
}
 800f090:	4618      	mov	r0, r3
 800f092:	3720      	adds	r7, #32
 800f094:	46bd      	mov	sp, r7
 800f096:	bd80      	pop	{r7, pc}

0800f098 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f098:	b580      	push	{r7, lr}
 800f09a:	b088      	sub	sp, #32
 800f09c:	af00      	add	r7, sp, #0
 800f09e:	6078      	str	r0, [r7, #4]
 800f0a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f0a6:	2318      	movs	r3, #24
 800f0a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0aa:	2340      	movs	r3, #64	; 0x40
 800f0ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0b8:	f107 0308 	add.w	r3, r7, #8
 800f0bc:	4619      	mov	r1, r3
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	f7ff ff0e 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f0c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0c8:	2118      	movs	r1, #24
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f000 f9dc 	bl	800f488 <SDMMC_GetCmdResp1>
 800f0d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0d2:	69fb      	ldr	r3, [r7, #28]
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3720      	adds	r7, #32
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	bd80      	pop	{r7, pc}

0800f0dc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b088      	sub	sp, #32
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
 800f0e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f0ea:	2319      	movs	r3, #25
 800f0ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0ee:	2340      	movs	r3, #64	; 0x40
 800f0f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0f2:	2300      	movs	r3, #0
 800f0f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0fa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0fc:	f107 0308 	add.w	r3, r7, #8
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7ff feec 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f108:	f241 3288 	movw	r2, #5000	; 0x1388
 800f10c:	2119      	movs	r1, #25
 800f10e:	6878      	ldr	r0, [r7, #4]
 800f110:	f000 f9ba 	bl	800f488 <SDMMC_GetCmdResp1>
 800f114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f116:	69fb      	ldr	r3, [r7, #28]
}
 800f118:	4618      	mov	r0, r3
 800f11a:	3720      	adds	r7, #32
 800f11c:	46bd      	mov	sp, r7
 800f11e:	bd80      	pop	{r7, pc}

0800f120 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f120:	b580      	push	{r7, lr}
 800f122:	b088      	sub	sp, #32
 800f124:	af00      	add	r7, sp, #0
 800f126:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f128:	2300      	movs	r3, #0
 800f12a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f12c:	230c      	movs	r3, #12
 800f12e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f130:	2340      	movs	r3, #64	; 0x40
 800f132:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f134:	2300      	movs	r3, #0
 800f136:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f13c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f13e:	f107 0308 	add.w	r3, r7, #8
 800f142:	4619      	mov	r1, r3
 800f144:	6878      	ldr	r0, [r7, #4]
 800f146:	f7ff fecb 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f14a:	4a05      	ldr	r2, [pc, #20]	; (800f160 <SDMMC_CmdStopTransfer+0x40>)
 800f14c:	210c      	movs	r1, #12
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 f99a 	bl	800f488 <SDMMC_GetCmdResp1>
 800f154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f156:	69fb      	ldr	r3, [r7, #28]
}
 800f158:	4618      	mov	r0, r3
 800f15a:	3720      	adds	r7, #32
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	05f5e100 	.word	0x05f5e100

0800f164 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b08a      	sub	sp, #40	; 0x28
 800f168:	af00      	add	r7, sp, #0
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f174:	2307      	movs	r3, #7
 800f176:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f178:	2340      	movs	r3, #64	; 0x40
 800f17a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f17c:	2300      	movs	r3, #0
 800f17e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f184:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f186:	f107 0310 	add.w	r3, r7, #16
 800f18a:	4619      	mov	r1, r3
 800f18c:	68f8      	ldr	r0, [r7, #12]
 800f18e:	f7ff fea7 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f192:	f241 3288 	movw	r2, #5000	; 0x1388
 800f196:	2107      	movs	r1, #7
 800f198:	68f8      	ldr	r0, [r7, #12]
 800f19a:	f000 f975 	bl	800f488 <SDMMC_GetCmdResp1>
 800f19e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3728      	adds	r7, #40	; 0x28
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	bd80      	pop	{r7, pc}

0800f1aa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f1aa:	b580      	push	{r7, lr}
 800f1ac:	b088      	sub	sp, #32
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f1b2:	2300      	movs	r3, #0
 800f1b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1c8:	f107 0308 	add.w	r3, r7, #8
 800f1cc:	4619      	mov	r1, r3
 800f1ce:	6878      	ldr	r0, [r7, #4]
 800f1d0:	f7ff fe86 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f000 f92f 	bl	800f438 <SDMMC_GetCmdError>
 800f1da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1dc:	69fb      	ldr	r3, [r7, #28]
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3720      	adds	r7, #32
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}

0800f1e6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f1e6:	b580      	push	{r7, lr}
 800f1e8:	b088      	sub	sp, #32
 800f1ea:	af00      	add	r7, sp, #0
 800f1ec:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f1ee:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f1f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f1f4:	2308      	movs	r3, #8
 800f1f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1f8:	2340      	movs	r3, #64	; 0x40
 800f1fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f204:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f206:	f107 0308 	add.w	r3, r7, #8
 800f20a:	4619      	mov	r1, r3
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f7ff fe67 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f212:	6878      	ldr	r0, [r7, #4]
 800f214:	f000 fb18 	bl	800f848 <SDMMC_GetCmdResp7>
 800f218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f21a:	69fb      	ldr	r3, [r7, #28]
}
 800f21c:	4618      	mov	r0, r3
 800f21e:	3720      	adds	r7, #32
 800f220:	46bd      	mov	sp, r7
 800f222:	bd80      	pop	{r7, pc}

0800f224 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f224:	b580      	push	{r7, lr}
 800f226:	b088      	sub	sp, #32
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f22e:	683b      	ldr	r3, [r7, #0]
 800f230:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f232:	2337      	movs	r3, #55	; 0x37
 800f234:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f236:	2340      	movs	r3, #64	; 0x40
 800f238:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f23a:	2300      	movs	r3, #0
 800f23c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f23e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f242:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f244:	f107 0308 	add.w	r3, r7, #8
 800f248:	4619      	mov	r1, r3
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff fe48 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f250:	f241 3288 	movw	r2, #5000	; 0x1388
 800f254:	2137      	movs	r1, #55	; 0x37
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f000 f916 	bl	800f488 <SDMMC_GetCmdResp1>
 800f25c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f25e:	69fb      	ldr	r3, [r7, #28]
}
 800f260:	4618      	mov	r0, r3
 800f262:	3720      	adds	r7, #32
 800f264:	46bd      	mov	sp, r7
 800f266:	bd80      	pop	{r7, pc}

0800f268 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b088      	sub	sp, #32
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f272:	683a      	ldr	r2, [r7, #0]
 800f274:	4b0d      	ldr	r3, [pc, #52]	; (800f2ac <SDMMC_CmdAppOperCommand+0x44>)
 800f276:	4313      	orrs	r3, r2
 800f278:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f27a:	2329      	movs	r3, #41	; 0x29
 800f27c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f27e:	2340      	movs	r3, #64	; 0x40
 800f280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f282:	2300      	movs	r3, #0
 800f284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f286:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f28a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f28c:	f107 0308 	add.w	r3, r7, #8
 800f290:	4619      	mov	r1, r3
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	f7ff fe24 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 fa27 	bl	800f6ec <SDMMC_GetCmdResp3>
 800f29e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2a0:	69fb      	ldr	r3, [r7, #28]
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	3720      	adds	r7, #32
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	bd80      	pop	{r7, pc}
 800f2aa:	bf00      	nop
 800f2ac:	80100000 	.word	0x80100000

0800f2b0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f2b0:	b580      	push	{r7, lr}
 800f2b2:	b088      	sub	sp, #32
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f2ba:	683b      	ldr	r3, [r7, #0]
 800f2bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f2be:	2306      	movs	r3, #6
 800f2c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2c2:	2340      	movs	r3, #64	; 0x40
 800f2c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2d0:	f107 0308 	add.w	r3, r7, #8
 800f2d4:	4619      	mov	r1, r3
 800f2d6:	6878      	ldr	r0, [r7, #4]
 800f2d8:	f7ff fe02 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2e0:	2106      	movs	r1, #6
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f8d0 	bl	800f488 <SDMMC_GetCmdResp1>
 800f2e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2ea:	69fb      	ldr	r3, [r7, #28]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3720      	adds	r7, #32
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	bd80      	pop	{r7, pc}

0800f2f4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b088      	sub	sp, #32
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f300:	2333      	movs	r3, #51	; 0x33
 800f302:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f304:	2340      	movs	r3, #64	; 0x40
 800f306:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f308:	2300      	movs	r3, #0
 800f30a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f30c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f310:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f312:	f107 0308 	add.w	r3, r7, #8
 800f316:	4619      	mov	r1, r3
 800f318:	6878      	ldr	r0, [r7, #4]
 800f31a:	f7ff fde1 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f31e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f322:	2133      	movs	r1, #51	; 0x33
 800f324:	6878      	ldr	r0, [r7, #4]
 800f326:	f000 f8af 	bl	800f488 <SDMMC_GetCmdResp1>
 800f32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f32c:	69fb      	ldr	r3, [r7, #28]
}
 800f32e:	4618      	mov	r0, r3
 800f330:	3720      	adds	r7, #32
 800f332:	46bd      	mov	sp, r7
 800f334:	bd80      	pop	{r7, pc}

0800f336 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f336:	b580      	push	{r7, lr}
 800f338:	b088      	sub	sp, #32
 800f33a:	af00      	add	r7, sp, #0
 800f33c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f33e:	2300      	movs	r3, #0
 800f340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f342:	2302      	movs	r3, #2
 800f344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f346:	23c0      	movs	r3, #192	; 0xc0
 800f348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f34a:	2300      	movs	r3, #0
 800f34c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f34e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f352:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f354:	f107 0308 	add.w	r3, r7, #8
 800f358:	4619      	mov	r1, r3
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f7ff fdc0 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f000 f97d 	bl	800f660 <SDMMC_GetCmdResp2>
 800f366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f368:	69fb      	ldr	r3, [r7, #28]
}
 800f36a:	4618      	mov	r0, r3
 800f36c:	3720      	adds	r7, #32
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f372:	b580      	push	{r7, lr}
 800f374:	b088      	sub	sp, #32
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
 800f37a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f37c:	683b      	ldr	r3, [r7, #0]
 800f37e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f380:	2309      	movs	r3, #9
 800f382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f384:	23c0      	movs	r3, #192	; 0xc0
 800f386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f388:	2300      	movs	r3, #0
 800f38a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f38c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f390:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f392:	f107 0308 	add.w	r3, r7, #8
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff fda1 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f000 f95e 	bl	800f660 <SDMMC_GetCmdResp2>
 800f3a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3a6:	69fb      	ldr	r3, [r7, #28]
}
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3720      	adds	r7, #32
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f3b0:	b580      	push	{r7, lr}
 800f3b2:	b088      	sub	sp, #32
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f3ba:	2300      	movs	r3, #0
 800f3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f3be:	2303      	movs	r3, #3
 800f3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f3c2:	2340      	movs	r3, #64	; 0x40
 800f3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3c6:	2300      	movs	r3, #0
 800f3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3d0:	f107 0308 	add.w	r3, r7, #8
 800f3d4:	4619      	mov	r1, r3
 800f3d6:	6878      	ldr	r0, [r7, #4]
 800f3d8:	f7ff fd82 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f3dc:	683a      	ldr	r2, [r7, #0]
 800f3de:	2103      	movs	r1, #3
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 f9bd 	bl	800f760 <SDMMC_GetCmdResp6>
 800f3e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3e8:	69fb      	ldr	r3, [r7, #28]
}
 800f3ea:	4618      	mov	r0, r3
 800f3ec:	3720      	adds	r7, #32
 800f3ee:	46bd      	mov	sp, r7
 800f3f0:	bd80      	pop	{r7, pc}

0800f3f2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f3f2:	b580      	push	{r7, lr}
 800f3f4:	b088      	sub	sp, #32
 800f3f6:	af00      	add	r7, sp, #0
 800f3f8:	6078      	str	r0, [r7, #4]
 800f3fa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f3fc:	683b      	ldr	r3, [r7, #0]
 800f3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f400:	230d      	movs	r3, #13
 800f402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f404:	2340      	movs	r3, #64	; 0x40
 800f406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f408:	2300      	movs	r3, #0
 800f40a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f410:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f412:	f107 0308 	add.w	r3, r7, #8
 800f416:	4619      	mov	r1, r3
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7ff fd61 	bl	800eee0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f41e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f422:	210d      	movs	r1, #13
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f000 f82f 	bl	800f488 <SDMMC_GetCmdResp1>
 800f42a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f42c:	69fb      	ldr	r3, [r7, #28]
}
 800f42e:	4618      	mov	r0, r3
 800f430:	3720      	adds	r7, #32
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}
	...

0800f438 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f438:	b490      	push	{r4, r7}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f440:	4b0f      	ldr	r3, [pc, #60]	; (800f480 <SDMMC_GetCmdError+0x48>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	4a0f      	ldr	r2, [pc, #60]	; (800f484 <SDMMC_GetCmdError+0x4c>)
 800f446:	fba2 2303 	umull	r2, r3, r2, r3
 800f44a:	0a5b      	lsrs	r3, r3, #9
 800f44c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f450:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f454:	4623      	mov	r3, r4
 800f456:	1e5c      	subs	r4, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d102      	bne.n	800f462 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f45c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f460:	e009      	b.n	800f476 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f466:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d0f2      	beq.n	800f454 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	22c5      	movs	r2, #197	; 0xc5
 800f472:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f474:	2300      	movs	r3, #0
}
 800f476:	4618      	mov	r0, r3
 800f478:	3708      	adds	r7, #8
 800f47a:	46bd      	mov	sp, r7
 800f47c:	bc90      	pop	{r4, r7}
 800f47e:	4770      	bx	lr
 800f480:	20000000 	.word	0x20000000
 800f484:	10624dd3 	.word	0x10624dd3

0800f488 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f488:	b590      	push	{r4, r7, lr}
 800f48a:	b087      	sub	sp, #28
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	60f8      	str	r0, [r7, #12]
 800f490:	460b      	mov	r3, r1
 800f492:	607a      	str	r2, [r7, #4]
 800f494:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f496:	4b6f      	ldr	r3, [pc, #444]	; (800f654 <SDMMC_GetCmdResp1+0x1cc>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	4a6f      	ldr	r2, [pc, #444]	; (800f658 <SDMMC_GetCmdResp1+0x1d0>)
 800f49c:	fba2 2303 	umull	r2, r3, r2, r3
 800f4a0:	0a5b      	lsrs	r3, r3, #9
 800f4a2:	687a      	ldr	r2, [r7, #4]
 800f4a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f4a8:	4623      	mov	r3, r4
 800f4aa:	1e5c      	subs	r4, r3, #1
 800f4ac:	2b00      	cmp	r3, #0
 800f4ae:	d102      	bne.n	800f4b6 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4b4:	e0c9      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ba:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4bc:	697b      	ldr	r3, [r7, #20]
 800f4be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d0f0      	beq.n	800f4a8 <SDMMC_GetCmdResp1+0x20>
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d1eb      	bne.n	800f4a8 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f4d0:	68fb      	ldr	r3, [r7, #12]
 800f4d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4d4:	f003 0304 	and.w	r3, r3, #4
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d004      	beq.n	800f4e6 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	2204      	movs	r2, #4
 800f4e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f4e2:	2304      	movs	r3, #4
 800f4e4:	e0b1      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4ea:	f003 0301 	and.w	r3, r3, #1
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d004      	beq.n	800f4fc <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	2201      	movs	r2, #1
 800f4f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f4f8:	2301      	movs	r3, #1
 800f4fa:	e0a6      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	22c5      	movs	r2, #197	; 0xc5
 800f500:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f502:	68f8      	ldr	r0, [r7, #12]
 800f504:	f7ff fd16 	bl	800ef34 <SDMMC_GetCommandResponse>
 800f508:	4603      	mov	r3, r0
 800f50a:	461a      	mov	r2, r3
 800f50c:	7afb      	ldrb	r3, [r7, #11]
 800f50e:	4293      	cmp	r3, r2
 800f510:	d001      	beq.n	800f516 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f512:	2301      	movs	r3, #1
 800f514:	e099      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f516:	2100      	movs	r1, #0
 800f518:	68f8      	ldr	r0, [r7, #12]
 800f51a:	f7ff fd18 	bl	800ef4e <SDMMC_GetResponse>
 800f51e:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f520:	693a      	ldr	r2, [r7, #16]
 800f522:	4b4e      	ldr	r3, [pc, #312]	; (800f65c <SDMMC_GetCmdResp1+0x1d4>)
 800f524:	4013      	ands	r3, r2
 800f526:	2b00      	cmp	r3, #0
 800f528:	d101      	bne.n	800f52e <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f52a:	2300      	movs	r3, #0
 800f52c:	e08d      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	2b00      	cmp	r3, #0
 800f532:	da02      	bge.n	800f53a <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f534:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f538:	e087      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f53a:	693b      	ldr	r3, [r7, #16]
 800f53c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f540:	2b00      	cmp	r3, #0
 800f542:	d001      	beq.n	800f548 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f544:	2340      	movs	r3, #64	; 0x40
 800f546:	e080      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d001      	beq.n	800f556 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f552:	2380      	movs	r3, #128	; 0x80
 800f554:	e079      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d002      	beq.n	800f566 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f560:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f564:	e071      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f566:	693b      	ldr	r3, [r7, #16]
 800f568:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d002      	beq.n	800f576 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f570:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f574:	e069      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f576:	693b      	ldr	r3, [r7, #16]
 800f578:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d002      	beq.n	800f586 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f580:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f584:	e061      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f586:	693b      	ldr	r3, [r7, #16]
 800f588:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d002      	beq.n	800f596 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f590:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f594:	e059      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f5a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f5a4:	e051      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d002      	beq.n	800f5b6 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f5b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f5b4:	e049      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f5b6:	693b      	ldr	r3, [r7, #16]
 800f5b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d002      	beq.n	800f5c6 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f5c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f5c4:	e041      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f5c6:	693b      	ldr	r3, [r7, #16]
 800f5c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d002      	beq.n	800f5d6 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f5d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5d4:	e039      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f5d6:	693b      	ldr	r3, [r7, #16]
 800f5d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d002      	beq.n	800f5e6 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f5e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f5e4:	e031      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f5e6:	693b      	ldr	r3, [r7, #16]
 800f5e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d002      	beq.n	800f5f6 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f5f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f5f4:	e029      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f5f6:	693b      	ldr	r3, [r7, #16]
 800f5f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d002      	beq.n	800f606 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f600:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f604:	e021      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d002      	beq.n	800f616 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f610:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f614:	e019      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d002      	beq.n	800f626 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f620:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f624:	e011      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f626:	693b      	ldr	r3, [r7, #16]
 800f628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d002      	beq.n	800f636 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f630:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f634:	e009      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f636:	693b      	ldr	r3, [r7, #16]
 800f638:	f003 0308 	and.w	r3, r3, #8
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d002      	beq.n	800f646 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f640:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f644:	e001      	b.n	800f64a <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f646:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	371c      	adds	r7, #28
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd90      	pop	{r4, r7, pc}
 800f652:	bf00      	nop
 800f654:	20000000 	.word	0x20000000
 800f658:	10624dd3 	.word	0x10624dd3
 800f65c:	fdffe008 	.word	0xfdffe008

0800f660 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f660:	b490      	push	{r4, r7}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f668:	4b1e      	ldr	r3, [pc, #120]	; (800f6e4 <SDMMC_GetCmdResp2+0x84>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	4a1e      	ldr	r2, [pc, #120]	; (800f6e8 <SDMMC_GetCmdResp2+0x88>)
 800f66e:	fba2 2303 	umull	r2, r3, r2, r3
 800f672:	0a5b      	lsrs	r3, r3, #9
 800f674:	f241 3288 	movw	r2, #5000	; 0x1388
 800f678:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f67c:	4623      	mov	r3, r4
 800f67e:	1e5c      	subs	r4, r3, #1
 800f680:	2b00      	cmp	r3, #0
 800f682:	d102      	bne.n	800f68a <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f684:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f688:	e026      	b.n	800f6d8 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f68e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f696:	2b00      	cmp	r3, #0
 800f698:	d0f0      	beq.n	800f67c <SDMMC_GetCmdResp2+0x1c>
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d1eb      	bne.n	800f67c <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6a8:	f003 0304 	and.w	r3, r3, #4
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	2204      	movs	r2, #4
 800f6b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6b6:	2304      	movs	r3, #4
 800f6b8:	e00e      	b.n	800f6d8 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d004      	beq.n	800f6d0 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	2201      	movs	r2, #1
 800f6ca:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6cc:	2301      	movs	r3, #1
 800f6ce:	e003      	b.n	800f6d8 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	22c5      	movs	r2, #197	; 0xc5
 800f6d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f6d6:	2300      	movs	r3, #0
}
 800f6d8:	4618      	mov	r0, r3
 800f6da:	3710      	adds	r7, #16
 800f6dc:	46bd      	mov	sp, r7
 800f6de:	bc90      	pop	{r4, r7}
 800f6e0:	4770      	bx	lr
 800f6e2:	bf00      	nop
 800f6e4:	20000000 	.word	0x20000000
 800f6e8:	10624dd3 	.word	0x10624dd3

0800f6ec <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f6ec:	b490      	push	{r4, r7}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f6f4:	4b18      	ldr	r3, [pc, #96]	; (800f758 <SDMMC_GetCmdResp3+0x6c>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	4a18      	ldr	r2, [pc, #96]	; (800f75c <SDMMC_GetCmdResp3+0x70>)
 800f6fa:	fba2 2303 	umull	r2, r3, r2, r3
 800f6fe:	0a5b      	lsrs	r3, r3, #9
 800f700:	f241 3288 	movw	r2, #5000	; 0x1388
 800f704:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f708:	4623      	mov	r3, r4
 800f70a:	1e5c      	subs	r4, r3, #1
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d102      	bne.n	800f716 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f710:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f714:	e01b      	b.n	800f74e <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f71a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f722:	2b00      	cmp	r3, #0
 800f724:	d0f0      	beq.n	800f708 <SDMMC_GetCmdResp3+0x1c>
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d1eb      	bne.n	800f708 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f734:	f003 0304 	and.w	r3, r3, #4
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d004      	beq.n	800f746 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	2204      	movs	r2, #4
 800f740:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f742:	2304      	movs	r3, #4
 800f744:	e003      	b.n	800f74e <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	22c5      	movs	r2, #197	; 0xc5
 800f74a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f74c:	2300      	movs	r3, #0
}
 800f74e:	4618      	mov	r0, r3
 800f750:	3710      	adds	r7, #16
 800f752:	46bd      	mov	sp, r7
 800f754:	bc90      	pop	{r4, r7}
 800f756:	4770      	bx	lr
 800f758:	20000000 	.word	0x20000000
 800f75c:	10624dd3 	.word	0x10624dd3

0800f760 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f760:	b590      	push	{r4, r7, lr}
 800f762:	b087      	sub	sp, #28
 800f764:	af00      	add	r7, sp, #0
 800f766:	60f8      	str	r0, [r7, #12]
 800f768:	460b      	mov	r3, r1
 800f76a:	607a      	str	r2, [r7, #4]
 800f76c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f76e:	4b34      	ldr	r3, [pc, #208]	; (800f840 <SDMMC_GetCmdResp6+0xe0>)
 800f770:	681b      	ldr	r3, [r3, #0]
 800f772:	4a34      	ldr	r2, [pc, #208]	; (800f844 <SDMMC_GetCmdResp6+0xe4>)
 800f774:	fba2 2303 	umull	r2, r3, r2, r3
 800f778:	0a5b      	lsrs	r3, r3, #9
 800f77a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f77e:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f782:	4623      	mov	r3, r4
 800f784:	1e5c      	subs	r4, r3, #1
 800f786:	2b00      	cmp	r3, #0
 800f788:	d102      	bne.n	800f790 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f78a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f78e:	e052      	b.n	800f836 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f794:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f796:	697b      	ldr	r3, [r7, #20]
 800f798:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d0f0      	beq.n	800f782 <SDMMC_GetCmdResp6+0x22>
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f7a6:	2b00      	cmp	r3, #0
 800f7a8:	d1eb      	bne.n	800f782 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ae:	f003 0304 	and.w	r3, r3, #4
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d004      	beq.n	800f7c0 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	2204      	movs	r2, #4
 800f7ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f7bc:	2304      	movs	r3, #4
 800f7be:	e03a      	b.n	800f836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7c4:	f003 0301 	and.w	r3, r3, #1
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d004      	beq.n	800f7d6 <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	2201      	movs	r2, #1
 800f7d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f7d2:	2301      	movs	r3, #1
 800f7d4:	e02f      	b.n	800f836 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	f7ff fbac 	bl	800ef34 <SDMMC_GetCommandResponse>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	461a      	mov	r2, r3
 800f7e0:	7afb      	ldrb	r3, [r7, #11]
 800f7e2:	4293      	cmp	r3, r2
 800f7e4:	d001      	beq.n	800f7ea <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f7e6:	2301      	movs	r3, #1
 800f7e8:	e025      	b.n	800f836 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	22c5      	movs	r2, #197	; 0xc5
 800f7ee:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f7ff fbab 	bl	800ef4e <SDMMC_GetResponse>
 800f7f8:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f7fa:	693b      	ldr	r3, [r7, #16]
 800f7fc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f800:	2b00      	cmp	r3, #0
 800f802:	d106      	bne.n	800f812 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f804:	693b      	ldr	r3, [r7, #16]
 800f806:	0c1b      	lsrs	r3, r3, #16
 800f808:	b29a      	uxth	r2, r3
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f80e:	2300      	movs	r3, #0
 800f810:	e011      	b.n	800f836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f812:	693b      	ldr	r3, [r7, #16]
 800f814:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f81c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f820:	e009      	b.n	800f836 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f822:	693b      	ldr	r3, [r7, #16]
 800f824:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d002      	beq.n	800f832 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f82c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f830:	e001      	b.n	800f836 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f836:	4618      	mov	r0, r3
 800f838:	371c      	adds	r7, #28
 800f83a:	46bd      	mov	sp, r7
 800f83c:	bd90      	pop	{r4, r7, pc}
 800f83e:	bf00      	nop
 800f840:	20000000 	.word	0x20000000
 800f844:	10624dd3 	.word	0x10624dd3

0800f848 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f848:	b490      	push	{r4, r7}
 800f84a:	b084      	sub	sp, #16
 800f84c:	af00      	add	r7, sp, #0
 800f84e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f850:	4b21      	ldr	r3, [pc, #132]	; (800f8d8 <SDMMC_GetCmdResp7+0x90>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	4a21      	ldr	r2, [pc, #132]	; (800f8dc <SDMMC_GetCmdResp7+0x94>)
 800f856:	fba2 2303 	umull	r2, r3, r2, r3
 800f85a:	0a5b      	lsrs	r3, r3, #9
 800f85c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f860:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f864:	4623      	mov	r3, r4
 800f866:	1e5c      	subs	r4, r3, #1
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d102      	bne.n	800f872 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f86c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f870:	e02c      	b.n	800f8cc <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f876:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d0f0      	beq.n	800f864 <SDMMC_GetCmdResp7+0x1c>
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d1eb      	bne.n	800f864 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f890:	f003 0304 	and.w	r3, r3, #4
 800f894:	2b00      	cmp	r3, #0
 800f896:	d004      	beq.n	800f8a2 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2204      	movs	r2, #4
 800f89c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f89e:	2304      	movs	r3, #4
 800f8a0:	e014      	b.n	800f8cc <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8a6:	f003 0301 	and.w	r3, r3, #1
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d004      	beq.n	800f8b8 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	2201      	movs	r2, #1
 800f8b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	e009      	b.n	800f8cc <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d002      	beq.n	800f8ca <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	2240      	movs	r2, #64	; 0x40
 800f8c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f8ca:	2300      	movs	r3, #0
  
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3710      	adds	r7, #16
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bc90      	pop	{r4, r7}
 800f8d4:	4770      	bx	lr
 800f8d6:	bf00      	nop
 800f8d8:	20000000 	.word	0x20000000
 800f8dc:	10624dd3 	.word	0x10624dd3

0800f8e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f8e0:	b084      	sub	sp, #16
 800f8e2:	b580      	push	{r7, lr}
 800f8e4:	b084      	sub	sp, #16
 800f8e6:	af00      	add	r7, sp, #0
 800f8e8:	6078      	str	r0, [r7, #4]
 800f8ea:	f107 001c 	add.w	r0, r7, #28
 800f8ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8f4:	2b01      	cmp	r3, #1
 800f8f6:	d120      	bne.n	800f93a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f8fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	68da      	ldr	r2, [r3, #12]
 800f908:	4b20      	ldr	r3, [pc, #128]	; (800f98c <USB_CoreInit+0xac>)
 800f90a:	4013      	ands	r3, r2
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	68db      	ldr	r3, [r3, #12]
 800f914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f91c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f91e:	2b01      	cmp	r3, #1
 800f920:	d105      	bne.n	800f92e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	68db      	ldr	r3, [r3, #12]
 800f926:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f001 fac4 	bl	8010ebc <USB_CoreReset>
 800f934:	4603      	mov	r3, r0
 800f936:	73fb      	strb	r3, [r7, #15]
 800f938:	e010      	b.n	800f95c <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68db      	ldr	r3, [r3, #12]
 800f93e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f946:	6878      	ldr	r0, [r7, #4]
 800f948:	f001 fab8 	bl	8010ebc <USB_CoreReset>
 800f94c:	4603      	mov	r3, r0
 800f94e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f954:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f95c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d10b      	bne.n	800f97a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	f043 0206 	orr.w	r2, r3, #6
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	f043 0220 	orr.w	r2, r3, #32
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f986:	b004      	add	sp, #16
 800f988:	4770      	bx	lr
 800f98a:	bf00      	nop
 800f98c:	ffbdffbf 	.word	0xffbdffbf

0800f990 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f990:	b480      	push	{r7}
 800f992:	b087      	sub	sp, #28
 800f994:	af00      	add	r7, sp, #0
 800f996:	60f8      	str	r0, [r7, #12]
 800f998:	60b9      	str	r1, [r7, #8]
 800f99a:	4613      	mov	r3, r2
 800f99c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f99e:	79fb      	ldrb	r3, [r7, #7]
 800f9a0:	2b02      	cmp	r3, #2
 800f9a2:	d165      	bne.n	800fa70 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f9a4:	68bb      	ldr	r3, [r7, #8]
 800f9a6:	4a41      	ldr	r2, [pc, #260]	; (800faac <USB_SetTurnaroundTime+0x11c>)
 800f9a8:	4293      	cmp	r3, r2
 800f9aa:	d906      	bls.n	800f9ba <USB_SetTurnaroundTime+0x2a>
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	4a40      	ldr	r2, [pc, #256]	; (800fab0 <USB_SetTurnaroundTime+0x120>)
 800f9b0:	4293      	cmp	r3, r2
 800f9b2:	d802      	bhi.n	800f9ba <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f9b4:	230f      	movs	r3, #15
 800f9b6:	617b      	str	r3, [r7, #20]
 800f9b8:	e062      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f9ba:	68bb      	ldr	r3, [r7, #8]
 800f9bc:	4a3c      	ldr	r2, [pc, #240]	; (800fab0 <USB_SetTurnaroundTime+0x120>)
 800f9be:	4293      	cmp	r3, r2
 800f9c0:	d906      	bls.n	800f9d0 <USB_SetTurnaroundTime+0x40>
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	4a3b      	ldr	r2, [pc, #236]	; (800fab4 <USB_SetTurnaroundTime+0x124>)
 800f9c6:	4293      	cmp	r3, r2
 800f9c8:	d802      	bhi.n	800f9d0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f9ca:	230e      	movs	r3, #14
 800f9cc:	617b      	str	r3, [r7, #20]
 800f9ce:	e057      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	4a38      	ldr	r2, [pc, #224]	; (800fab4 <USB_SetTurnaroundTime+0x124>)
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d906      	bls.n	800f9e6 <USB_SetTurnaroundTime+0x56>
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	4a37      	ldr	r2, [pc, #220]	; (800fab8 <USB_SetTurnaroundTime+0x128>)
 800f9dc:	4293      	cmp	r3, r2
 800f9de:	d802      	bhi.n	800f9e6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f9e0:	230d      	movs	r3, #13
 800f9e2:	617b      	str	r3, [r7, #20]
 800f9e4:	e04c      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f9e6:	68bb      	ldr	r3, [r7, #8]
 800f9e8:	4a33      	ldr	r2, [pc, #204]	; (800fab8 <USB_SetTurnaroundTime+0x128>)
 800f9ea:	4293      	cmp	r3, r2
 800f9ec:	d906      	bls.n	800f9fc <USB_SetTurnaroundTime+0x6c>
 800f9ee:	68bb      	ldr	r3, [r7, #8]
 800f9f0:	4a32      	ldr	r2, [pc, #200]	; (800fabc <USB_SetTurnaroundTime+0x12c>)
 800f9f2:	4293      	cmp	r3, r2
 800f9f4:	d802      	bhi.n	800f9fc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f9f6:	230c      	movs	r3, #12
 800f9f8:	617b      	str	r3, [r7, #20]
 800f9fa:	e041      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	4a2f      	ldr	r2, [pc, #188]	; (800fabc <USB_SetTurnaroundTime+0x12c>)
 800fa00:	4293      	cmp	r3, r2
 800fa02:	d906      	bls.n	800fa12 <USB_SetTurnaroundTime+0x82>
 800fa04:	68bb      	ldr	r3, [r7, #8]
 800fa06:	4a2e      	ldr	r2, [pc, #184]	; (800fac0 <USB_SetTurnaroundTime+0x130>)
 800fa08:	4293      	cmp	r3, r2
 800fa0a:	d802      	bhi.n	800fa12 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fa0c:	230b      	movs	r3, #11
 800fa0e:	617b      	str	r3, [r7, #20]
 800fa10:	e036      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fa12:	68bb      	ldr	r3, [r7, #8]
 800fa14:	4a2a      	ldr	r2, [pc, #168]	; (800fac0 <USB_SetTurnaroundTime+0x130>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d906      	bls.n	800fa28 <USB_SetTurnaroundTime+0x98>
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	4a29      	ldr	r2, [pc, #164]	; (800fac4 <USB_SetTurnaroundTime+0x134>)
 800fa1e:	4293      	cmp	r3, r2
 800fa20:	d802      	bhi.n	800fa28 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fa22:	230a      	movs	r3, #10
 800fa24:	617b      	str	r3, [r7, #20]
 800fa26:	e02b      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	4a26      	ldr	r2, [pc, #152]	; (800fac4 <USB_SetTurnaroundTime+0x134>)
 800fa2c:	4293      	cmp	r3, r2
 800fa2e:	d906      	bls.n	800fa3e <USB_SetTurnaroundTime+0xae>
 800fa30:	68bb      	ldr	r3, [r7, #8]
 800fa32:	4a25      	ldr	r2, [pc, #148]	; (800fac8 <USB_SetTurnaroundTime+0x138>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d802      	bhi.n	800fa3e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800fa38:	2309      	movs	r3, #9
 800fa3a:	617b      	str	r3, [r7, #20]
 800fa3c:	e020      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fa3e:	68bb      	ldr	r3, [r7, #8]
 800fa40:	4a21      	ldr	r2, [pc, #132]	; (800fac8 <USB_SetTurnaroundTime+0x138>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d906      	bls.n	800fa54 <USB_SetTurnaroundTime+0xc4>
 800fa46:	68bb      	ldr	r3, [r7, #8]
 800fa48:	4a20      	ldr	r2, [pc, #128]	; (800facc <USB_SetTurnaroundTime+0x13c>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d802      	bhi.n	800fa54 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fa4e:	2308      	movs	r3, #8
 800fa50:	617b      	str	r3, [r7, #20]
 800fa52:	e015      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	4a1d      	ldr	r2, [pc, #116]	; (800facc <USB_SetTurnaroundTime+0x13c>)
 800fa58:	4293      	cmp	r3, r2
 800fa5a:	d906      	bls.n	800fa6a <USB_SetTurnaroundTime+0xda>
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	4a1c      	ldr	r2, [pc, #112]	; (800fad0 <USB_SetTurnaroundTime+0x140>)
 800fa60:	4293      	cmp	r3, r2
 800fa62:	d802      	bhi.n	800fa6a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fa64:	2307      	movs	r3, #7
 800fa66:	617b      	str	r3, [r7, #20]
 800fa68:	e00a      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fa6a:	2306      	movs	r3, #6
 800fa6c:	617b      	str	r3, [r7, #20]
 800fa6e:	e007      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fa70:	79fb      	ldrb	r3, [r7, #7]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d102      	bne.n	800fa7c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800fa76:	2309      	movs	r3, #9
 800fa78:	617b      	str	r3, [r7, #20]
 800fa7a:	e001      	b.n	800fa80 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800fa7c:	2309      	movs	r3, #9
 800fa7e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	68db      	ldr	r3, [r3, #12]
 800fa84:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fa88:	68fb      	ldr	r3, [r7, #12]
 800fa8a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fa8c:	68fb      	ldr	r3, [r7, #12]
 800fa8e:	68da      	ldr	r2, [r3, #12]
 800fa90:	697b      	ldr	r3, [r7, #20]
 800fa92:	029b      	lsls	r3, r3, #10
 800fa94:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fa98:	431a      	orrs	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fa9e:	2300      	movs	r3, #0
}
 800faa0:	4618      	mov	r0, r3
 800faa2:	371c      	adds	r7, #28
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr
 800faac:	00d8acbf 	.word	0x00d8acbf
 800fab0:	00e4e1bf 	.word	0x00e4e1bf
 800fab4:	00f423ff 	.word	0x00f423ff
 800fab8:	0106737f 	.word	0x0106737f
 800fabc:	011a499f 	.word	0x011a499f
 800fac0:	01312cff 	.word	0x01312cff
 800fac4:	014ca43f 	.word	0x014ca43f
 800fac8:	016e35ff 	.word	0x016e35ff
 800facc:	01a6ab1f 	.word	0x01a6ab1f
 800fad0:	01e847ff 	.word	0x01e847ff

0800fad4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fad4:	b480      	push	{r7}
 800fad6:	b083      	sub	sp, #12
 800fad8:	af00      	add	r7, sp, #0
 800fada:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	689b      	ldr	r3, [r3, #8]
 800fae0:	f043 0201 	orr.w	r2, r3, #1
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fae8:	2300      	movs	r3, #0
}
 800faea:	4618      	mov	r0, r3
 800faec:	370c      	adds	r7, #12
 800faee:	46bd      	mov	sp, r7
 800faf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf4:	4770      	bx	lr

0800faf6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800faf6:	b480      	push	{r7}
 800faf8:	b083      	sub	sp, #12
 800fafa:	af00      	add	r7, sp, #0
 800fafc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	689b      	ldr	r3, [r3, #8]
 800fb02:	f023 0201 	bic.w	r2, r3, #1
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb0a:	2300      	movs	r3, #0
}
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	370c      	adds	r7, #12
 800fb10:	46bd      	mov	sp, r7
 800fb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb16:	4770      	bx	lr

0800fb18 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	460b      	mov	r3, r1
 800fb22:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	68db      	ldr	r3, [r3, #12]
 800fb28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fb30:	78fb      	ldrb	r3, [r7, #3]
 800fb32:	2b01      	cmp	r3, #1
 800fb34:	d106      	bne.n	800fb44 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	68db      	ldr	r3, [r3, #12]
 800fb3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	60da      	str	r2, [r3, #12]
 800fb42:	e00b      	b.n	800fb5c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fb44:	78fb      	ldrb	r3, [r7, #3]
 800fb46:	2b00      	cmp	r3, #0
 800fb48:	d106      	bne.n	800fb58 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	68db      	ldr	r3, [r3, #12]
 800fb4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	60da      	str	r2, [r3, #12]
 800fb56:	e001      	b.n	800fb5c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e003      	b.n	800fb64 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fb5c:	2032      	movs	r0, #50	; 0x32
 800fb5e:	f7f7 fcd1 	bl	8007504 <HAL_Delay>

  return HAL_OK;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fb6c:	b084      	sub	sp, #16
 800fb6e:	b580      	push	{r7, lr}
 800fb70:	b086      	sub	sp, #24
 800fb72:	af00      	add	r7, sp, #0
 800fb74:	6078      	str	r0, [r7, #4]
 800fb76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fb7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fb86:	2300      	movs	r3, #0
 800fb88:	613b      	str	r3, [r7, #16]
 800fb8a:	e009      	b.n	800fba0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fb8c:	687a      	ldr	r2, [r7, #4]
 800fb8e:	693b      	ldr	r3, [r7, #16]
 800fb90:	3340      	adds	r3, #64	; 0x40
 800fb92:	009b      	lsls	r3, r3, #2
 800fb94:	4413      	add	r3, r2
 800fb96:	2200      	movs	r2, #0
 800fb98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fb9a:	693b      	ldr	r3, [r7, #16]
 800fb9c:	3301      	adds	r3, #1
 800fb9e:	613b      	str	r3, [r7, #16]
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	2b0e      	cmp	r3, #14
 800fba4:	d9f2      	bls.n	800fb8c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fba6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d11c      	bne.n	800fbe6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fbb2:	685b      	ldr	r3, [r3, #4]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fbba:	f043 0302 	orr.w	r3, r3, #2
 800fbbe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fbc0:	687b      	ldr	r3, [r7, #4]
 800fbc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbc4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	601a      	str	r2, [r3, #0]
 800fbe4:	e005      	b.n	800fbf2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fbea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fbf2:	68fb      	ldr	r3, [r7, #12]
 800fbf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fbf8:	461a      	mov	r2, r3
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fbfe:	68fb      	ldr	r3, [r7, #12]
 800fc00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc04:	4619      	mov	r1, r3
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc0c:	461a      	mov	r2, r3
 800fc0e:	680b      	ldr	r3, [r1, #0]
 800fc10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc14:	2b01      	cmp	r3, #1
 800fc16:	d10c      	bne.n	800fc32 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d104      	bne.n	800fc28 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc1e:	2100      	movs	r1, #0
 800fc20:	6878      	ldr	r0, [r7, #4]
 800fc22:	f000 f959 	bl	800fed8 <USB_SetDevSpeed>
 800fc26:	e018      	b.n	800fc5a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc28:	2101      	movs	r1, #1
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f000 f954 	bl	800fed8 <USB_SetDevSpeed>
 800fc30:	e013      	b.n	800fc5a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800fc32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc34:	2b03      	cmp	r3, #3
 800fc36:	d10c      	bne.n	800fc52 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d104      	bne.n	800fc48 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc3e:	2100      	movs	r1, #0
 800fc40:	6878      	ldr	r0, [r7, #4]
 800fc42:	f000 f949 	bl	800fed8 <USB_SetDevSpeed>
 800fc46:	e008      	b.n	800fc5a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc48:	2101      	movs	r1, #1
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f000 f944 	bl	800fed8 <USB_SetDevSpeed>
 800fc50:	e003      	b.n	800fc5a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fc52:	2103      	movs	r1, #3
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 f93f 	bl	800fed8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fc5a:	2110      	movs	r1, #16
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f000 f8f3 	bl	800fe48 <USB_FlushTxFifo>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d001      	beq.n	800fc6c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800fc68:	2301      	movs	r3, #1
 800fc6a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f000 f911 	bl	800fe94 <USB_FlushRxFifo>
 800fc72:	4603      	mov	r3, r0
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800fc78:	2301      	movs	r3, #1
 800fc7a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc82:	461a      	mov	r2, r3
 800fc84:	2300      	movs	r3, #0
 800fc86:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc8e:	461a      	mov	r2, r3
 800fc90:	2300      	movs	r3, #0
 800fc92:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fca0:	2300      	movs	r3, #0
 800fca2:	613b      	str	r3, [r7, #16]
 800fca4:	e043      	b.n	800fd2e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	015a      	lsls	r2, r3, #5
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	4413      	add	r3, r2
 800fcae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fcb8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fcbc:	d118      	bne.n	800fcf0 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800fcbe:	693b      	ldr	r3, [r7, #16]
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d10a      	bne.n	800fcda <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	015a      	lsls	r2, r3, #5
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	4413      	add	r3, r2
 800fccc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcd0:	461a      	mov	r2, r3
 800fcd2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fcd6:	6013      	str	r3, [r2, #0]
 800fcd8:	e013      	b.n	800fd02 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fcda:	693b      	ldr	r3, [r7, #16]
 800fcdc:	015a      	lsls	r2, r3, #5
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	4413      	add	r3, r2
 800fce2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fce6:	461a      	mov	r2, r3
 800fce8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fcec:	6013      	str	r3, [r2, #0]
 800fcee:	e008      	b.n	800fd02 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	015a      	lsls	r2, r3, #5
 800fcf4:	68fb      	ldr	r3, [r7, #12]
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fcfc:	461a      	mov	r2, r3
 800fcfe:	2300      	movs	r3, #0
 800fd00:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fd02:	693b      	ldr	r3, [r7, #16]
 800fd04:	015a      	lsls	r2, r3, #5
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	4413      	add	r3, r2
 800fd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd0e:	461a      	mov	r2, r3
 800fd10:	2300      	movs	r3, #0
 800fd12:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fd14:	693b      	ldr	r3, [r7, #16]
 800fd16:	015a      	lsls	r2, r3, #5
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	4413      	add	r3, r2
 800fd1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd20:	461a      	mov	r2, r3
 800fd22:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fd26:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd28:	693b      	ldr	r3, [r7, #16]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	613b      	str	r3, [r7, #16]
 800fd2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd30:	693a      	ldr	r2, [r7, #16]
 800fd32:	429a      	cmp	r2, r3
 800fd34:	d3b7      	bcc.n	800fca6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd36:	2300      	movs	r3, #0
 800fd38:	613b      	str	r3, [r7, #16]
 800fd3a:	e043      	b.n	800fdc4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	015a      	lsls	r2, r3, #5
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	4413      	add	r3, r2
 800fd44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd52:	d118      	bne.n	800fd86 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d10a      	bne.n	800fd70 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fd5a:	693b      	ldr	r3, [r7, #16]
 800fd5c:	015a      	lsls	r2, r3, #5
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	4413      	add	r3, r2
 800fd62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd66:	461a      	mov	r2, r3
 800fd68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fd6c:	6013      	str	r3, [r2, #0]
 800fd6e:	e013      	b.n	800fd98 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fd70:	693b      	ldr	r3, [r7, #16]
 800fd72:	015a      	lsls	r2, r3, #5
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	4413      	add	r3, r2
 800fd78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd7c:	461a      	mov	r2, r3
 800fd7e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fd82:	6013      	str	r3, [r2, #0]
 800fd84:	e008      	b.n	800fd98 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fd86:	693b      	ldr	r3, [r7, #16]
 800fd88:	015a      	lsls	r2, r3, #5
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	4413      	add	r3, r2
 800fd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd92:	461a      	mov	r2, r3
 800fd94:	2300      	movs	r3, #0
 800fd96:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	015a      	lsls	r2, r3, #5
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	4413      	add	r3, r2
 800fda0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fda4:	461a      	mov	r2, r3
 800fda6:	2300      	movs	r3, #0
 800fda8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	015a      	lsls	r2, r3, #5
 800fdae:	68fb      	ldr	r3, [r7, #12]
 800fdb0:	4413      	add	r3, r2
 800fdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdb6:	461a      	mov	r2, r3
 800fdb8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fdbc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdbe:	693b      	ldr	r3, [r7, #16]
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	613b      	str	r3, [r7, #16]
 800fdc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdc6:	693a      	ldr	r2, [r7, #16]
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d3b7      	bcc.n	800fd3c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	68fa      	ldr	r2, [r7, #12]
 800fdd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fdda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fdde:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	2200      	movs	r2, #0
 800fde4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fdec:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fdee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdf0:	2b00      	cmp	r3, #0
 800fdf2:	d105      	bne.n	800fe00 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	699b      	ldr	r3, [r3, #24]
 800fdf8:	f043 0210 	orr.w	r2, r3, #16
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fe00:	687b      	ldr	r3, [r7, #4]
 800fe02:	699a      	ldr	r2, [r3, #24]
 800fe04:	4b0e      	ldr	r3, [pc, #56]	; (800fe40 <USB_DevInit+0x2d4>)
 800fe06:	4313      	orrs	r3, r2
 800fe08:	687a      	ldr	r2, [r7, #4]
 800fe0a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fe0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d005      	beq.n	800fe1e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	699b      	ldr	r3, [r3, #24]
 800fe16:	f043 0208 	orr.w	r2, r3, #8
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fe1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe20:	2b01      	cmp	r3, #1
 800fe22:	d105      	bne.n	800fe30 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	699a      	ldr	r2, [r3, #24]
 800fe28:	4b06      	ldr	r3, [pc, #24]	; (800fe44 <USB_DevInit+0x2d8>)
 800fe2a:	4313      	orrs	r3, r2
 800fe2c:	687a      	ldr	r2, [r7, #4]
 800fe2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fe30:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe32:	4618      	mov	r0, r3
 800fe34:	3718      	adds	r7, #24
 800fe36:	46bd      	mov	sp, r7
 800fe38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe3c:	b004      	add	sp, #16
 800fe3e:	4770      	bx	lr
 800fe40:	803c3800 	.word	0x803c3800
 800fe44:	40000004 	.word	0x40000004

0800fe48 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fe48:	b480      	push	{r7}
 800fe4a:	b085      	sub	sp, #20
 800fe4c:	af00      	add	r7, sp, #0
 800fe4e:	6078      	str	r0, [r7, #4]
 800fe50:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fe52:	2300      	movs	r3, #0
 800fe54:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fe56:	683b      	ldr	r3, [r7, #0]
 800fe58:	019b      	lsls	r3, r3, #6
 800fe5a:	f043 0220 	orr.w	r2, r3, #32
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fe62:	68fb      	ldr	r3, [r7, #12]
 800fe64:	3301      	adds	r3, #1
 800fe66:	60fb      	str	r3, [r7, #12]
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	4a09      	ldr	r2, [pc, #36]	; (800fe90 <USB_FlushTxFifo+0x48>)
 800fe6c:	4293      	cmp	r3, r2
 800fe6e:	d901      	bls.n	800fe74 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fe70:	2303      	movs	r3, #3
 800fe72:	e006      	b.n	800fe82 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	691b      	ldr	r3, [r3, #16]
 800fe78:	f003 0320 	and.w	r3, r3, #32
 800fe7c:	2b20      	cmp	r3, #32
 800fe7e:	d0f0      	beq.n	800fe62 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	3714      	adds	r7, #20
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr
 800fe8e:	bf00      	nop
 800fe90:	00030d40 	.word	0x00030d40

0800fe94 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
 800fe9a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2210      	movs	r2, #16
 800fea4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fea6:	68fb      	ldr	r3, [r7, #12]
 800fea8:	3301      	adds	r3, #1
 800feaa:	60fb      	str	r3, [r7, #12]
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	4a09      	ldr	r2, [pc, #36]	; (800fed4 <USB_FlushRxFifo+0x40>)
 800feb0:	4293      	cmp	r3, r2
 800feb2:	d901      	bls.n	800feb8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800feb4:	2303      	movs	r3, #3
 800feb6:	e006      	b.n	800fec6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	691b      	ldr	r3, [r3, #16]
 800febc:	f003 0310 	and.w	r3, r3, #16
 800fec0:	2b10      	cmp	r3, #16
 800fec2:	d0f0      	beq.n	800fea6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fec4:	2300      	movs	r3, #0
}
 800fec6:	4618      	mov	r0, r3
 800fec8:	3714      	adds	r7, #20
 800feca:	46bd      	mov	sp, r7
 800fecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed0:	4770      	bx	lr
 800fed2:	bf00      	nop
 800fed4:	00030d40 	.word	0x00030d40

0800fed8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fed8:	b480      	push	{r7}
 800feda:	b085      	sub	sp, #20
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	460b      	mov	r3, r1
 800fee2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800feee:	681a      	ldr	r2, [r3, #0]
 800fef0:	78fb      	ldrb	r3, [r7, #3]
 800fef2:	68f9      	ldr	r1, [r7, #12]
 800fef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fef8:	4313      	orrs	r3, r2
 800fefa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fefc:	2300      	movs	r3, #0
}
 800fefe:	4618      	mov	r0, r3
 800ff00:	3714      	adds	r7, #20
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr

0800ff0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ff0a:	b480      	push	{r7}
 800ff0c:	b087      	sub	sp, #28
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff1c:	689b      	ldr	r3, [r3, #8]
 800ff1e:	f003 0306 	and.w	r3, r3, #6
 800ff22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d102      	bne.n	800ff30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	75fb      	strb	r3, [r7, #23]
 800ff2e:	e00a      	b.n	800ff46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d002      	beq.n	800ff3c <USB_GetDevSpeed+0x32>
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	2b06      	cmp	r3, #6
 800ff3a:	d102      	bne.n	800ff42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ff3c:	2302      	movs	r3, #2
 800ff3e:	75fb      	strb	r3, [r7, #23]
 800ff40:	e001      	b.n	800ff46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ff42:	230f      	movs	r3, #15
 800ff44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ff46:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff48:	4618      	mov	r0, r3
 800ff4a:	371c      	adds	r7, #28
 800ff4c:	46bd      	mov	sp, r7
 800ff4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff52:	4770      	bx	lr

0800ff54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff54:	b480      	push	{r7}
 800ff56:	b085      	sub	sp, #20
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
 800ff5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff62:	683b      	ldr	r3, [r7, #0]
 800ff64:	781b      	ldrb	r3, [r3, #0]
 800ff66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ff68:	683b      	ldr	r3, [r7, #0]
 800ff6a:	785b      	ldrb	r3, [r3, #1]
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d139      	bne.n	800ffe4 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff76:	69da      	ldr	r2, [r3, #28]
 800ff78:	683b      	ldr	r3, [r7, #0]
 800ff7a:	781b      	ldrb	r3, [r3, #0]
 800ff7c:	f003 030f 	and.w	r3, r3, #15
 800ff80:	2101      	movs	r1, #1
 800ff82:	fa01 f303 	lsl.w	r3, r1, r3
 800ff86:	b29b      	uxth	r3, r3
 800ff88:	68f9      	ldr	r1, [r7, #12]
 800ff8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	015a      	lsls	r2, r3, #5
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	4413      	add	r3, r2
 800ff9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d153      	bne.n	8010050 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffa8:	68bb      	ldr	r3, [r7, #8]
 800ffaa:	015a      	lsls	r2, r3, #5
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	4413      	add	r3, r2
 800ffb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffb4:	681a      	ldr	r2, [r3, #0]
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	689b      	ldr	r3, [r3, #8]
 800ffba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ffbe:	683b      	ldr	r3, [r7, #0]
 800ffc0:	78db      	ldrb	r3, [r3, #3]
 800ffc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	059b      	lsls	r3, r3, #22
 800ffca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ffcc:	431a      	orrs	r2, r3
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	0159      	lsls	r1, r3, #5
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	440b      	add	r3, r1
 800ffd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffda:	4619      	mov	r1, r3
 800ffdc:	4b20      	ldr	r3, [pc, #128]	; (8010060 <USB_ActivateEndpoint+0x10c>)
 800ffde:	4313      	orrs	r3, r2
 800ffe0:	600b      	str	r3, [r1, #0]
 800ffe2:	e035      	b.n	8010050 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffea:	69da      	ldr	r2, [r3, #28]
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f003 030f 	and.w	r3, r3, #15
 800fff4:	2101      	movs	r1, #1
 800fff6:	fa01 f303 	lsl.w	r3, r1, r3
 800fffa:	041b      	lsls	r3, r3, #16
 800fffc:	68f9      	ldr	r1, [r7, #12]
 800fffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010002:	4313      	orrs	r3, r2
 8010004:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	015a      	lsls	r2, r3, #5
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	4413      	add	r3, r2
 801000e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010018:	2b00      	cmp	r3, #0
 801001a:	d119      	bne.n	8010050 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	78db      	ldrb	r3, [r3, #3]
 8010036:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010038:	430b      	orrs	r3, r1
 801003a:	431a      	orrs	r2, r3
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	0159      	lsls	r1, r3, #5
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	440b      	add	r3, r1
 8010044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010048:	4619      	mov	r1, r3
 801004a:	4b05      	ldr	r3, [pc, #20]	; (8010060 <USB_ActivateEndpoint+0x10c>)
 801004c:	4313      	orrs	r3, r2
 801004e:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010050:	2300      	movs	r3, #0
}
 8010052:	4618      	mov	r0, r3
 8010054:	3714      	adds	r7, #20
 8010056:	46bd      	mov	sp, r7
 8010058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801005c:	4770      	bx	lr
 801005e:	bf00      	nop
 8010060:	10008000 	.word	0x10008000

08010064 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010072:	683b      	ldr	r3, [r7, #0]
 8010074:	781b      	ldrb	r3, [r3, #0]
 8010076:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010078:	683b      	ldr	r3, [r7, #0]
 801007a:	785b      	ldrb	r3, [r3, #1]
 801007c:	2b01      	cmp	r3, #1
 801007e:	d161      	bne.n	8010144 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010080:	68bb      	ldr	r3, [r7, #8]
 8010082:	015a      	lsls	r2, r3, #5
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	4413      	add	r3, r2
 8010088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801008c:	681b      	ldr	r3, [r3, #0]
 801008e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010092:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010096:	d11f      	bne.n	80100d8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	015a      	lsls	r2, r3, #5
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	4413      	add	r3, r2
 80100a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	68ba      	ldr	r2, [r7, #8]
 80100a8:	0151      	lsls	r1, r2, #5
 80100aa:	68fa      	ldr	r2, [r7, #12]
 80100ac:	440a      	add	r2, r1
 80100ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80100b6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80100b8:	68bb      	ldr	r3, [r7, #8]
 80100ba:	015a      	lsls	r2, r3, #5
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	4413      	add	r3, r2
 80100c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100c4:	681b      	ldr	r3, [r3, #0]
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	0151      	lsls	r1, r2, #5
 80100ca:	68fa      	ldr	r2, [r7, #12]
 80100cc:	440a      	add	r2, r1
 80100ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80100d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100d8:	68fb      	ldr	r3, [r7, #12]
 80100da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80100e0:	683b      	ldr	r3, [r7, #0]
 80100e2:	781b      	ldrb	r3, [r3, #0]
 80100e4:	f003 030f 	and.w	r3, r3, #15
 80100e8:	2101      	movs	r1, #1
 80100ea:	fa01 f303 	lsl.w	r3, r1, r3
 80100ee:	b29b      	uxth	r3, r3
 80100f0:	43db      	mvns	r3, r3
 80100f2:	68f9      	ldr	r1, [r7, #12]
 80100f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100f8:	4013      	ands	r3, r2
 80100fa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010102:	69da      	ldr	r2, [r3, #28]
 8010104:	683b      	ldr	r3, [r7, #0]
 8010106:	781b      	ldrb	r3, [r3, #0]
 8010108:	f003 030f 	and.w	r3, r3, #15
 801010c:	2101      	movs	r1, #1
 801010e:	fa01 f303 	lsl.w	r3, r1, r3
 8010112:	b29b      	uxth	r3, r3
 8010114:	43db      	mvns	r3, r3
 8010116:	68f9      	ldr	r1, [r7, #12]
 8010118:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801011c:	4013      	ands	r3, r2
 801011e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010120:	68bb      	ldr	r3, [r7, #8]
 8010122:	015a      	lsls	r2, r3, #5
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	4413      	add	r3, r2
 8010128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801012c:	681a      	ldr	r2, [r3, #0]
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	0159      	lsls	r1, r3, #5
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	440b      	add	r3, r1
 8010136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801013a:	4619      	mov	r1, r3
 801013c:	4b35      	ldr	r3, [pc, #212]	; (8010214 <USB_DeactivateEndpoint+0x1b0>)
 801013e:	4013      	ands	r3, r2
 8010140:	600b      	str	r3, [r1, #0]
 8010142:	e060      	b.n	8010206 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010144:	68bb      	ldr	r3, [r7, #8]
 8010146:	015a      	lsls	r2, r3, #5
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	4413      	add	r3, r2
 801014c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801015a:	d11f      	bne.n	801019c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	015a      	lsls	r2, r3, #5
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	4413      	add	r3, r2
 8010164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010168:	681b      	ldr	r3, [r3, #0]
 801016a:	68ba      	ldr	r2, [r7, #8]
 801016c:	0151      	lsls	r1, r2, #5
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	440a      	add	r2, r1
 8010172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010176:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801017a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 801017c:	68bb      	ldr	r3, [r7, #8]
 801017e:	015a      	lsls	r2, r3, #5
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	4413      	add	r3, r2
 8010184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68ba      	ldr	r2, [r7, #8]
 801018c:	0151      	lsls	r1, r2, #5
 801018e:	68fa      	ldr	r2, [r7, #12]
 8010190:	440a      	add	r2, r1
 8010192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010196:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801019a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	f003 030f 	and.w	r3, r3, #15
 80101ac:	2101      	movs	r1, #1
 80101ae:	fa01 f303 	lsl.w	r3, r1, r3
 80101b2:	041b      	lsls	r3, r3, #16
 80101b4:	43db      	mvns	r3, r3
 80101b6:	68f9      	ldr	r1, [r7, #12]
 80101b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101bc:	4013      	ands	r3, r2
 80101be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101c6:	69da      	ldr	r2, [r3, #28]
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	781b      	ldrb	r3, [r3, #0]
 80101cc:	f003 030f 	and.w	r3, r3, #15
 80101d0:	2101      	movs	r1, #1
 80101d2:	fa01 f303 	lsl.w	r3, r1, r3
 80101d6:	041b      	lsls	r3, r3, #16
 80101d8:	43db      	mvns	r3, r3
 80101da:	68f9      	ldr	r1, [r7, #12]
 80101dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80101e0:	4013      	ands	r3, r2
 80101e2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80101e4:	68bb      	ldr	r3, [r7, #8]
 80101e6:	015a      	lsls	r2, r3, #5
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	4413      	add	r3, r2
 80101ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101f0:	681a      	ldr	r2, [r3, #0]
 80101f2:	68bb      	ldr	r3, [r7, #8]
 80101f4:	0159      	lsls	r1, r3, #5
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	440b      	add	r3, r1
 80101fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101fe:	4619      	mov	r1, r3
 8010200:	4b05      	ldr	r3, [pc, #20]	; (8010218 <USB_DeactivateEndpoint+0x1b4>)
 8010202:	4013      	ands	r3, r2
 8010204:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010206:	2300      	movs	r3, #0
}
 8010208:	4618      	mov	r0, r3
 801020a:	3714      	adds	r7, #20
 801020c:	46bd      	mov	sp, r7
 801020e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010212:	4770      	bx	lr
 8010214:	ec337800 	.word	0xec337800
 8010218:	eff37800 	.word	0xeff37800

0801021c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08a      	sub	sp, #40	; 0x28
 8010220:	af02      	add	r7, sp, #8
 8010222:	60f8      	str	r0, [r7, #12]
 8010224:	60b9      	str	r1, [r7, #8]
 8010226:	4613      	mov	r3, r2
 8010228:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	785b      	ldrb	r3, [r3, #1]
 8010238:	2b01      	cmp	r3, #1
 801023a:	f040 8163 	bne.w	8010504 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801023e:	68bb      	ldr	r3, [r7, #8]
 8010240:	695b      	ldr	r3, [r3, #20]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d132      	bne.n	80102ac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010246:	69bb      	ldr	r3, [r7, #24]
 8010248:	015a      	lsls	r2, r3, #5
 801024a:	69fb      	ldr	r3, [r7, #28]
 801024c:	4413      	add	r3, r2
 801024e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010252:	691a      	ldr	r2, [r3, #16]
 8010254:	69bb      	ldr	r3, [r7, #24]
 8010256:	0159      	lsls	r1, r3, #5
 8010258:	69fb      	ldr	r3, [r7, #28]
 801025a:	440b      	add	r3, r1
 801025c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010260:	4619      	mov	r1, r3
 8010262:	4ba5      	ldr	r3, [pc, #660]	; (80104f8 <USB_EPStartXfer+0x2dc>)
 8010264:	4013      	ands	r3, r2
 8010266:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010268:	69bb      	ldr	r3, [r7, #24]
 801026a:	015a      	lsls	r2, r3, #5
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	4413      	add	r3, r2
 8010270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010274:	691b      	ldr	r3, [r3, #16]
 8010276:	69ba      	ldr	r2, [r7, #24]
 8010278:	0151      	lsls	r1, r2, #5
 801027a:	69fa      	ldr	r2, [r7, #28]
 801027c:	440a      	add	r2, r1
 801027e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010282:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010286:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010288:	69bb      	ldr	r3, [r7, #24]
 801028a:	015a      	lsls	r2, r3, #5
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	4413      	add	r3, r2
 8010290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010294:	691a      	ldr	r2, [r3, #16]
 8010296:	69bb      	ldr	r3, [r7, #24]
 8010298:	0159      	lsls	r1, r3, #5
 801029a:	69fb      	ldr	r3, [r7, #28]
 801029c:	440b      	add	r3, r1
 801029e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102a2:	4619      	mov	r1, r3
 80102a4:	4b95      	ldr	r3, [pc, #596]	; (80104fc <USB_EPStartXfer+0x2e0>)
 80102a6:	4013      	ands	r3, r2
 80102a8:	610b      	str	r3, [r1, #16]
 80102aa:	e074      	b.n	8010396 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80102ac:	69bb      	ldr	r3, [r7, #24]
 80102ae:	015a      	lsls	r2, r3, #5
 80102b0:	69fb      	ldr	r3, [r7, #28]
 80102b2:	4413      	add	r3, r2
 80102b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102b8:	691a      	ldr	r2, [r3, #16]
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	0159      	lsls	r1, r3, #5
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	440b      	add	r3, r1
 80102c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c6:	4619      	mov	r1, r3
 80102c8:	4b8c      	ldr	r3, [pc, #560]	; (80104fc <USB_EPStartXfer+0x2e0>)
 80102ca:	4013      	ands	r3, r2
 80102cc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102ce:	69bb      	ldr	r3, [r7, #24]
 80102d0:	015a      	lsls	r2, r3, #5
 80102d2:	69fb      	ldr	r3, [r7, #28]
 80102d4:	4413      	add	r3, r2
 80102d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102da:	691a      	ldr	r2, [r3, #16]
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	0159      	lsls	r1, r3, #5
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	440b      	add	r3, r1
 80102e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e8:	4619      	mov	r1, r3
 80102ea:	4b83      	ldr	r3, [pc, #524]	; (80104f8 <USB_EPStartXfer+0x2dc>)
 80102ec:	4013      	ands	r3, r2
 80102ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80102f0:	69bb      	ldr	r3, [r7, #24]
 80102f2:	015a      	lsls	r2, r3, #5
 80102f4:	69fb      	ldr	r3, [r7, #28]
 80102f6:	4413      	add	r3, r2
 80102f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102fc:	691a      	ldr	r2, [r3, #16]
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	6959      	ldr	r1, [r3, #20]
 8010302:	68bb      	ldr	r3, [r7, #8]
 8010304:	689b      	ldr	r3, [r3, #8]
 8010306:	440b      	add	r3, r1
 8010308:	1e59      	subs	r1, r3, #1
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	689b      	ldr	r3, [r3, #8]
 801030e:	fbb1 f3f3 	udiv	r3, r1, r3
 8010312:	04d9      	lsls	r1, r3, #19
 8010314:	4b7a      	ldr	r3, [pc, #488]	; (8010500 <USB_EPStartXfer+0x2e4>)
 8010316:	400b      	ands	r3, r1
 8010318:	69b9      	ldr	r1, [r7, #24]
 801031a:	0148      	lsls	r0, r1, #5
 801031c:	69f9      	ldr	r1, [r7, #28]
 801031e:	4401      	add	r1, r0
 8010320:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010324:	4313      	orrs	r3, r2
 8010326:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010328:	69bb      	ldr	r3, [r7, #24]
 801032a:	015a      	lsls	r2, r3, #5
 801032c:	69fb      	ldr	r3, [r7, #28]
 801032e:	4413      	add	r3, r2
 8010330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010334:	691a      	ldr	r2, [r3, #16]
 8010336:	68bb      	ldr	r3, [r7, #8]
 8010338:	695b      	ldr	r3, [r3, #20]
 801033a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801033e:	69b9      	ldr	r1, [r7, #24]
 8010340:	0148      	lsls	r0, r1, #5
 8010342:	69f9      	ldr	r1, [r7, #28]
 8010344:	4401      	add	r1, r0
 8010346:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801034a:	4313      	orrs	r3, r2
 801034c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 801034e:	68bb      	ldr	r3, [r7, #8]
 8010350:	78db      	ldrb	r3, [r3, #3]
 8010352:	2b01      	cmp	r3, #1
 8010354:	d11f      	bne.n	8010396 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010356:	69bb      	ldr	r3, [r7, #24]
 8010358:	015a      	lsls	r2, r3, #5
 801035a:	69fb      	ldr	r3, [r7, #28]
 801035c:	4413      	add	r3, r2
 801035e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010362:	691b      	ldr	r3, [r3, #16]
 8010364:	69ba      	ldr	r2, [r7, #24]
 8010366:	0151      	lsls	r1, r2, #5
 8010368:	69fa      	ldr	r2, [r7, #28]
 801036a:	440a      	add	r2, r1
 801036c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010370:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010374:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8010376:	69bb      	ldr	r3, [r7, #24]
 8010378:	015a      	lsls	r2, r3, #5
 801037a:	69fb      	ldr	r3, [r7, #28]
 801037c:	4413      	add	r3, r2
 801037e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010382:	691b      	ldr	r3, [r3, #16]
 8010384:	69ba      	ldr	r2, [r7, #24]
 8010386:	0151      	lsls	r1, r2, #5
 8010388:	69fa      	ldr	r2, [r7, #28]
 801038a:	440a      	add	r2, r1
 801038c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010390:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010394:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8010396:	79fb      	ldrb	r3, [r7, #7]
 8010398:	2b01      	cmp	r3, #1
 801039a:	d14b      	bne.n	8010434 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801039c:	68bb      	ldr	r3, [r7, #8]
 801039e:	691b      	ldr	r3, [r3, #16]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d009      	beq.n	80103b8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80103a4:	69bb      	ldr	r3, [r7, #24]
 80103a6:	015a      	lsls	r2, r3, #5
 80103a8:	69fb      	ldr	r3, [r7, #28]
 80103aa:	4413      	add	r3, r2
 80103ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103b0:	461a      	mov	r2, r3
 80103b2:	68bb      	ldr	r3, [r7, #8]
 80103b4:	691b      	ldr	r3, [r3, #16]
 80103b6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80103b8:	68bb      	ldr	r3, [r7, #8]
 80103ba:	78db      	ldrb	r3, [r3, #3]
 80103bc:	2b01      	cmp	r3, #1
 80103be:	d128      	bne.n	8010412 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80103c0:	69fb      	ldr	r3, [r7, #28]
 80103c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80103c6:	689b      	ldr	r3, [r3, #8]
 80103c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d110      	bne.n	80103f2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80103d0:	69bb      	ldr	r3, [r7, #24]
 80103d2:	015a      	lsls	r2, r3, #5
 80103d4:	69fb      	ldr	r3, [r7, #28]
 80103d6:	4413      	add	r3, r2
 80103d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	69ba      	ldr	r2, [r7, #24]
 80103e0:	0151      	lsls	r1, r2, #5
 80103e2:	69fa      	ldr	r2, [r7, #28]
 80103e4:	440a      	add	r2, r1
 80103e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80103ee:	6013      	str	r3, [r2, #0]
 80103f0:	e00f      	b.n	8010412 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	015a      	lsls	r2, r3, #5
 80103f6:	69fb      	ldr	r3, [r7, #28]
 80103f8:	4413      	add	r3, r2
 80103fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	69ba      	ldr	r2, [r7, #24]
 8010402:	0151      	lsls	r1, r2, #5
 8010404:	69fa      	ldr	r2, [r7, #28]
 8010406:	440a      	add	r2, r1
 8010408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801040c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010410:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010412:	69bb      	ldr	r3, [r7, #24]
 8010414:	015a      	lsls	r2, r3, #5
 8010416:	69fb      	ldr	r3, [r7, #28]
 8010418:	4413      	add	r3, r2
 801041a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	69ba      	ldr	r2, [r7, #24]
 8010422:	0151      	lsls	r1, r2, #5
 8010424:	69fa      	ldr	r2, [r7, #28]
 8010426:	440a      	add	r2, r1
 8010428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801042c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010430:	6013      	str	r3, [r2, #0]
 8010432:	e133      	b.n	801069c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	015a      	lsls	r2, r3, #5
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	4413      	add	r3, r2
 801043c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	69ba      	ldr	r2, [r7, #24]
 8010444:	0151      	lsls	r1, r2, #5
 8010446:	69fa      	ldr	r2, [r7, #28]
 8010448:	440a      	add	r2, r1
 801044a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801044e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010452:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	78db      	ldrb	r3, [r3, #3]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d015      	beq.n	8010488 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	695b      	ldr	r3, [r3, #20]
 8010460:	2b00      	cmp	r3, #0
 8010462:	f000 811b 	beq.w	801069c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010466:	69fb      	ldr	r3, [r7, #28]
 8010468:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801046c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801046e:	68bb      	ldr	r3, [r7, #8]
 8010470:	781b      	ldrb	r3, [r3, #0]
 8010472:	f003 030f 	and.w	r3, r3, #15
 8010476:	2101      	movs	r1, #1
 8010478:	fa01 f303 	lsl.w	r3, r1, r3
 801047c:	69f9      	ldr	r1, [r7, #28]
 801047e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010482:	4313      	orrs	r3, r2
 8010484:	634b      	str	r3, [r1, #52]	; 0x34
 8010486:	e109      	b.n	801069c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010488:	69fb      	ldr	r3, [r7, #28]
 801048a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801048e:	689b      	ldr	r3, [r3, #8]
 8010490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010494:	2b00      	cmp	r3, #0
 8010496:	d110      	bne.n	80104ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010498:	69bb      	ldr	r3, [r7, #24]
 801049a:	015a      	lsls	r2, r3, #5
 801049c:	69fb      	ldr	r3, [r7, #28]
 801049e:	4413      	add	r3, r2
 80104a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	69ba      	ldr	r2, [r7, #24]
 80104a8:	0151      	lsls	r1, r2, #5
 80104aa:	69fa      	ldr	r2, [r7, #28]
 80104ac:	440a      	add	r2, r1
 80104ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80104b6:	6013      	str	r3, [r2, #0]
 80104b8:	e00f      	b.n	80104da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80104ba:	69bb      	ldr	r3, [r7, #24]
 80104bc:	015a      	lsls	r2, r3, #5
 80104be:	69fb      	ldr	r3, [r7, #28]
 80104c0:	4413      	add	r3, r2
 80104c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	69ba      	ldr	r2, [r7, #24]
 80104ca:	0151      	lsls	r1, r2, #5
 80104cc:	69fa      	ldr	r2, [r7, #28]
 80104ce:	440a      	add	r2, r1
 80104d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80104d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80104da:	68bb      	ldr	r3, [r7, #8]
 80104dc:	68d9      	ldr	r1, [r3, #12]
 80104de:	68bb      	ldr	r3, [r7, #8]
 80104e0:	781a      	ldrb	r2, [r3, #0]
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	695b      	ldr	r3, [r3, #20]
 80104e6:	b298      	uxth	r0, r3
 80104e8:	79fb      	ldrb	r3, [r7, #7]
 80104ea:	9300      	str	r3, [sp, #0]
 80104ec:	4603      	mov	r3, r0
 80104ee:	68f8      	ldr	r0, [r7, #12]
 80104f0:	f000 fa38 	bl	8010964 <USB_WritePacket>
 80104f4:	e0d2      	b.n	801069c <USB_EPStartXfer+0x480>
 80104f6:	bf00      	nop
 80104f8:	e007ffff 	.word	0xe007ffff
 80104fc:	fff80000 	.word	0xfff80000
 8010500:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	015a      	lsls	r2, r3, #5
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	4413      	add	r3, r2
 801050c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010510:	691a      	ldr	r2, [r3, #16]
 8010512:	69bb      	ldr	r3, [r7, #24]
 8010514:	0159      	lsls	r1, r3, #5
 8010516:	69fb      	ldr	r3, [r7, #28]
 8010518:	440b      	add	r3, r1
 801051a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801051e:	4619      	mov	r1, r3
 8010520:	4b61      	ldr	r3, [pc, #388]	; (80106a8 <USB_EPStartXfer+0x48c>)
 8010522:	4013      	ands	r3, r2
 8010524:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010526:	69bb      	ldr	r3, [r7, #24]
 8010528:	015a      	lsls	r2, r3, #5
 801052a:	69fb      	ldr	r3, [r7, #28]
 801052c:	4413      	add	r3, r2
 801052e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010532:	691a      	ldr	r2, [r3, #16]
 8010534:	69bb      	ldr	r3, [r7, #24]
 8010536:	0159      	lsls	r1, r3, #5
 8010538:	69fb      	ldr	r3, [r7, #28]
 801053a:	440b      	add	r3, r1
 801053c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010540:	4619      	mov	r1, r3
 8010542:	4b5a      	ldr	r3, [pc, #360]	; (80106ac <USB_EPStartXfer+0x490>)
 8010544:	4013      	ands	r3, r2
 8010546:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	695b      	ldr	r3, [r3, #20]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d123      	bne.n	8010598 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010550:	69bb      	ldr	r3, [r7, #24]
 8010552:	015a      	lsls	r2, r3, #5
 8010554:	69fb      	ldr	r3, [r7, #28]
 8010556:	4413      	add	r3, r2
 8010558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801055c:	691a      	ldr	r2, [r3, #16]
 801055e:	68bb      	ldr	r3, [r7, #8]
 8010560:	689b      	ldr	r3, [r3, #8]
 8010562:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010566:	69b9      	ldr	r1, [r7, #24]
 8010568:	0148      	lsls	r0, r1, #5
 801056a:	69f9      	ldr	r1, [r7, #28]
 801056c:	4401      	add	r1, r0
 801056e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010572:	4313      	orrs	r3, r2
 8010574:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	015a      	lsls	r2, r3, #5
 801057a:	69fb      	ldr	r3, [r7, #28]
 801057c:	4413      	add	r3, r2
 801057e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010582:	691b      	ldr	r3, [r3, #16]
 8010584:	69ba      	ldr	r2, [r7, #24]
 8010586:	0151      	lsls	r1, r2, #5
 8010588:	69fa      	ldr	r2, [r7, #28]
 801058a:	440a      	add	r2, r1
 801058c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010590:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010594:	6113      	str	r3, [r2, #16]
 8010596:	e033      	b.n	8010600 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010598:	68bb      	ldr	r3, [r7, #8]
 801059a:	695a      	ldr	r2, [r3, #20]
 801059c:	68bb      	ldr	r3, [r7, #8]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	4413      	add	r3, r2
 80105a2:	1e5a      	subs	r2, r3, #1
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	689b      	ldr	r3, [r3, #8]
 80105a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80105ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80105ae:	69bb      	ldr	r3, [r7, #24]
 80105b0:	015a      	lsls	r2, r3, #5
 80105b2:	69fb      	ldr	r3, [r7, #28]
 80105b4:	4413      	add	r3, r2
 80105b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105ba:	691a      	ldr	r2, [r3, #16]
 80105bc:	8afb      	ldrh	r3, [r7, #22]
 80105be:	04d9      	lsls	r1, r3, #19
 80105c0:	4b3b      	ldr	r3, [pc, #236]	; (80106b0 <USB_EPStartXfer+0x494>)
 80105c2:	400b      	ands	r3, r1
 80105c4:	69b9      	ldr	r1, [r7, #24]
 80105c6:	0148      	lsls	r0, r1, #5
 80105c8:	69f9      	ldr	r1, [r7, #28]
 80105ca:	4401      	add	r1, r0
 80105cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105d0:	4313      	orrs	r3, r2
 80105d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80105d4:	69bb      	ldr	r3, [r7, #24]
 80105d6:	015a      	lsls	r2, r3, #5
 80105d8:	69fb      	ldr	r3, [r7, #28]
 80105da:	4413      	add	r3, r2
 80105dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105e0:	691a      	ldr	r2, [r3, #16]
 80105e2:	68bb      	ldr	r3, [r7, #8]
 80105e4:	689b      	ldr	r3, [r3, #8]
 80105e6:	8af9      	ldrh	r1, [r7, #22]
 80105e8:	fb01 f303 	mul.w	r3, r1, r3
 80105ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105f0:	69b9      	ldr	r1, [r7, #24]
 80105f2:	0148      	lsls	r0, r1, #5
 80105f4:	69f9      	ldr	r1, [r7, #28]
 80105f6:	4401      	add	r1, r0
 80105f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105fc:	4313      	orrs	r3, r2
 80105fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010600:	79fb      	ldrb	r3, [r7, #7]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d10d      	bne.n	8010622 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010606:	68bb      	ldr	r3, [r7, #8]
 8010608:	68db      	ldr	r3, [r3, #12]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d009      	beq.n	8010622 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801060e:	68bb      	ldr	r3, [r7, #8]
 8010610:	68d9      	ldr	r1, [r3, #12]
 8010612:	69bb      	ldr	r3, [r7, #24]
 8010614:	015a      	lsls	r2, r3, #5
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	4413      	add	r3, r2
 801061a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801061e:	460a      	mov	r2, r1
 8010620:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010622:	68bb      	ldr	r3, [r7, #8]
 8010624:	78db      	ldrb	r3, [r3, #3]
 8010626:	2b01      	cmp	r3, #1
 8010628:	d128      	bne.n	801067c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801062a:	69fb      	ldr	r3, [r7, #28]
 801062c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010630:	689b      	ldr	r3, [r3, #8]
 8010632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010636:	2b00      	cmp	r3, #0
 8010638:	d110      	bne.n	801065c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801063a:	69bb      	ldr	r3, [r7, #24]
 801063c:	015a      	lsls	r2, r3, #5
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	4413      	add	r3, r2
 8010642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	69ba      	ldr	r2, [r7, #24]
 801064a:	0151      	lsls	r1, r2, #5
 801064c:	69fa      	ldr	r2, [r7, #28]
 801064e:	440a      	add	r2, r1
 8010650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010658:	6013      	str	r3, [r2, #0]
 801065a:	e00f      	b.n	801067c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801065c:	69bb      	ldr	r3, [r7, #24]
 801065e:	015a      	lsls	r2, r3, #5
 8010660:	69fb      	ldr	r3, [r7, #28]
 8010662:	4413      	add	r3, r2
 8010664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	69ba      	ldr	r2, [r7, #24]
 801066c:	0151      	lsls	r1, r2, #5
 801066e:	69fa      	ldr	r2, [r7, #28]
 8010670:	440a      	add	r2, r1
 8010672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801067a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	015a      	lsls	r2, r3, #5
 8010680:	69fb      	ldr	r3, [r7, #28]
 8010682:	4413      	add	r3, r2
 8010684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	69ba      	ldr	r2, [r7, #24]
 801068c:	0151      	lsls	r1, r2, #5
 801068e:	69fa      	ldr	r2, [r7, #28]
 8010690:	440a      	add	r2, r1
 8010692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801069a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801069c:	2300      	movs	r3, #0
}
 801069e:	4618      	mov	r0, r3
 80106a0:	3720      	adds	r7, #32
 80106a2:	46bd      	mov	sp, r7
 80106a4:	bd80      	pop	{r7, pc}
 80106a6:	bf00      	nop
 80106a8:	fff80000 	.word	0xfff80000
 80106ac:	e007ffff 	.word	0xe007ffff
 80106b0:	1ff80000 	.word	0x1ff80000

080106b4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80106b4:	b480      	push	{r7}
 80106b6:	b087      	sub	sp, #28
 80106b8:	af00      	add	r7, sp, #0
 80106ba:	60f8      	str	r0, [r7, #12]
 80106bc:	60b9      	str	r1, [r7, #8]
 80106be:	4613      	mov	r3, r2
 80106c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80106c2:	68fb      	ldr	r3, [r7, #12]
 80106c4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	781b      	ldrb	r3, [r3, #0]
 80106ca:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	785b      	ldrb	r3, [r3, #1]
 80106d0:	2b01      	cmp	r3, #1
 80106d2:	f040 80cd 	bne.w	8010870 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80106d6:	68bb      	ldr	r3, [r7, #8]
 80106d8:	695b      	ldr	r3, [r3, #20]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d132      	bne.n	8010744 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80106de:	693b      	ldr	r3, [r7, #16]
 80106e0:	015a      	lsls	r2, r3, #5
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	4413      	add	r3, r2
 80106e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ea:	691a      	ldr	r2, [r3, #16]
 80106ec:	693b      	ldr	r3, [r7, #16]
 80106ee:	0159      	lsls	r1, r3, #5
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	440b      	add	r3, r1
 80106f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f8:	4619      	mov	r1, r3
 80106fa:	4b98      	ldr	r3, [pc, #608]	; (801095c <USB_EP0StartXfer+0x2a8>)
 80106fc:	4013      	ands	r3, r2
 80106fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	015a      	lsls	r2, r3, #5
 8010704:	697b      	ldr	r3, [r7, #20]
 8010706:	4413      	add	r3, r2
 8010708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801070c:	691b      	ldr	r3, [r3, #16]
 801070e:	693a      	ldr	r2, [r7, #16]
 8010710:	0151      	lsls	r1, r2, #5
 8010712:	697a      	ldr	r2, [r7, #20]
 8010714:	440a      	add	r2, r1
 8010716:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801071a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801071e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010720:	693b      	ldr	r3, [r7, #16]
 8010722:	015a      	lsls	r2, r3, #5
 8010724:	697b      	ldr	r3, [r7, #20]
 8010726:	4413      	add	r3, r2
 8010728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801072c:	691a      	ldr	r2, [r3, #16]
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	0159      	lsls	r1, r3, #5
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	440b      	add	r3, r1
 8010736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801073a:	4619      	mov	r1, r3
 801073c:	4b88      	ldr	r3, [pc, #544]	; (8010960 <USB_EP0StartXfer+0x2ac>)
 801073e:	4013      	ands	r3, r2
 8010740:	610b      	str	r3, [r1, #16]
 8010742:	e04e      	b.n	80107e2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010744:	693b      	ldr	r3, [r7, #16]
 8010746:	015a      	lsls	r2, r3, #5
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	4413      	add	r3, r2
 801074c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010750:	691a      	ldr	r2, [r3, #16]
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	0159      	lsls	r1, r3, #5
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	440b      	add	r3, r1
 801075a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801075e:	4619      	mov	r1, r3
 8010760:	4b7f      	ldr	r3, [pc, #508]	; (8010960 <USB_EP0StartXfer+0x2ac>)
 8010762:	4013      	ands	r3, r2
 8010764:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	015a      	lsls	r2, r3, #5
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	4413      	add	r3, r2
 801076e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010772:	691a      	ldr	r2, [r3, #16]
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	0159      	lsls	r1, r3, #5
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	440b      	add	r3, r1
 801077c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010780:	4619      	mov	r1, r3
 8010782:	4b76      	ldr	r3, [pc, #472]	; (801095c <USB_EP0StartXfer+0x2a8>)
 8010784:	4013      	ands	r3, r2
 8010786:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8010788:	68bb      	ldr	r3, [r7, #8]
 801078a:	695a      	ldr	r2, [r3, #20]
 801078c:	68bb      	ldr	r3, [r7, #8]
 801078e:	689b      	ldr	r3, [r3, #8]
 8010790:	429a      	cmp	r2, r3
 8010792:	d903      	bls.n	801079c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010794:	68bb      	ldr	r3, [r7, #8]
 8010796:	689a      	ldr	r2, [r3, #8]
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801079c:	693b      	ldr	r3, [r7, #16]
 801079e:	015a      	lsls	r2, r3, #5
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	4413      	add	r3, r2
 80107a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a8:	691b      	ldr	r3, [r3, #16]
 80107aa:	693a      	ldr	r2, [r7, #16]
 80107ac:	0151      	lsls	r1, r2, #5
 80107ae:	697a      	ldr	r2, [r7, #20]
 80107b0:	440a      	add	r2, r1
 80107b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80107b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80107bc:	693b      	ldr	r3, [r7, #16]
 80107be:	015a      	lsls	r2, r3, #5
 80107c0:	697b      	ldr	r3, [r7, #20]
 80107c2:	4413      	add	r3, r2
 80107c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c8:	691a      	ldr	r2, [r3, #16]
 80107ca:	68bb      	ldr	r3, [r7, #8]
 80107cc:	695b      	ldr	r3, [r3, #20]
 80107ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107d2:	6939      	ldr	r1, [r7, #16]
 80107d4:	0148      	lsls	r0, r1, #5
 80107d6:	6979      	ldr	r1, [r7, #20]
 80107d8:	4401      	add	r1, r0
 80107da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80107de:	4313      	orrs	r3, r2
 80107e0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80107e2:	79fb      	ldrb	r3, [r7, #7]
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d11e      	bne.n	8010826 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80107e8:	68bb      	ldr	r3, [r7, #8]
 80107ea:	691b      	ldr	r3, [r3, #16]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d009      	beq.n	8010804 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80107f0:	693b      	ldr	r3, [r7, #16]
 80107f2:	015a      	lsls	r2, r3, #5
 80107f4:	697b      	ldr	r3, [r7, #20]
 80107f6:	4413      	add	r3, r2
 80107f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107fc:	461a      	mov	r2, r3
 80107fe:	68bb      	ldr	r3, [r7, #8]
 8010800:	691b      	ldr	r3, [r3, #16]
 8010802:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010804:	693b      	ldr	r3, [r7, #16]
 8010806:	015a      	lsls	r2, r3, #5
 8010808:	697b      	ldr	r3, [r7, #20]
 801080a:	4413      	add	r3, r2
 801080c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	693a      	ldr	r2, [r7, #16]
 8010814:	0151      	lsls	r1, r2, #5
 8010816:	697a      	ldr	r2, [r7, #20]
 8010818:	440a      	add	r2, r1
 801081a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801081e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010822:	6013      	str	r3, [r2, #0]
 8010824:	e092      	b.n	801094c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010826:	693b      	ldr	r3, [r7, #16]
 8010828:	015a      	lsls	r2, r3, #5
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	4413      	add	r3, r2
 801082e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010832:	681b      	ldr	r3, [r3, #0]
 8010834:	693a      	ldr	r2, [r7, #16]
 8010836:	0151      	lsls	r1, r2, #5
 8010838:	697a      	ldr	r2, [r7, #20]
 801083a:	440a      	add	r2, r1
 801083c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010844:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	695b      	ldr	r3, [r3, #20]
 801084a:	2b00      	cmp	r3, #0
 801084c:	d07e      	beq.n	801094c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801084e:	697b      	ldr	r3, [r7, #20]
 8010850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010854:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	781b      	ldrb	r3, [r3, #0]
 801085a:	f003 030f 	and.w	r3, r3, #15
 801085e:	2101      	movs	r1, #1
 8010860:	fa01 f303 	lsl.w	r3, r1, r3
 8010864:	6979      	ldr	r1, [r7, #20]
 8010866:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801086a:	4313      	orrs	r3, r2
 801086c:	634b      	str	r3, [r1, #52]	; 0x34
 801086e:	e06d      	b.n	801094c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	015a      	lsls	r2, r3, #5
 8010874:	697b      	ldr	r3, [r7, #20]
 8010876:	4413      	add	r3, r2
 8010878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801087c:	691a      	ldr	r2, [r3, #16]
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	0159      	lsls	r1, r3, #5
 8010882:	697b      	ldr	r3, [r7, #20]
 8010884:	440b      	add	r3, r1
 8010886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801088a:	4619      	mov	r1, r3
 801088c:	4b34      	ldr	r3, [pc, #208]	; (8010960 <USB_EP0StartXfer+0x2ac>)
 801088e:	4013      	ands	r3, r2
 8010890:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	015a      	lsls	r2, r3, #5
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	4413      	add	r3, r2
 801089a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801089e:	691a      	ldr	r2, [r3, #16]
 80108a0:	693b      	ldr	r3, [r7, #16]
 80108a2:	0159      	lsls	r1, r3, #5
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	440b      	add	r3, r1
 80108a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108ac:	4619      	mov	r1, r3
 80108ae:	4b2b      	ldr	r3, [pc, #172]	; (801095c <USB_EP0StartXfer+0x2a8>)
 80108b0:	4013      	ands	r3, r2
 80108b2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80108b4:	68bb      	ldr	r3, [r7, #8]
 80108b6:	695b      	ldr	r3, [r3, #20]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d003      	beq.n	80108c4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80108bc:	68bb      	ldr	r3, [r7, #8]
 80108be:	689a      	ldr	r2, [r3, #8]
 80108c0:	68bb      	ldr	r3, [r7, #8]
 80108c2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80108c4:	693b      	ldr	r3, [r7, #16]
 80108c6:	015a      	lsls	r2, r3, #5
 80108c8:	697b      	ldr	r3, [r7, #20]
 80108ca:	4413      	add	r3, r2
 80108cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	693a      	ldr	r2, [r7, #16]
 80108d4:	0151      	lsls	r1, r2, #5
 80108d6:	697a      	ldr	r2, [r7, #20]
 80108d8:	440a      	add	r2, r1
 80108da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80108de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80108e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	015a      	lsls	r2, r3, #5
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	4413      	add	r3, r2
 80108ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f0:	691a      	ldr	r2, [r3, #16]
 80108f2:	68bb      	ldr	r3, [r7, #8]
 80108f4:	689b      	ldr	r3, [r3, #8]
 80108f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80108fa:	6939      	ldr	r1, [r7, #16]
 80108fc:	0148      	lsls	r0, r1, #5
 80108fe:	6979      	ldr	r1, [r7, #20]
 8010900:	4401      	add	r1, r0
 8010902:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010906:	4313      	orrs	r3, r2
 8010908:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801090a:	79fb      	ldrb	r3, [r7, #7]
 801090c:	2b01      	cmp	r3, #1
 801090e:	d10d      	bne.n	801092c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010910:	68bb      	ldr	r3, [r7, #8]
 8010912:	68db      	ldr	r3, [r3, #12]
 8010914:	2b00      	cmp	r3, #0
 8010916:	d009      	beq.n	801092c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010918:	68bb      	ldr	r3, [r7, #8]
 801091a:	68d9      	ldr	r1, [r3, #12]
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	015a      	lsls	r2, r3, #5
 8010920:	697b      	ldr	r3, [r7, #20]
 8010922:	4413      	add	r3, r2
 8010924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010928:	460a      	mov	r2, r1
 801092a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801092c:	693b      	ldr	r3, [r7, #16]
 801092e:	015a      	lsls	r2, r3, #5
 8010930:	697b      	ldr	r3, [r7, #20]
 8010932:	4413      	add	r3, r2
 8010934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	693a      	ldr	r2, [r7, #16]
 801093c:	0151      	lsls	r1, r2, #5
 801093e:	697a      	ldr	r2, [r7, #20]
 8010940:	440a      	add	r2, r1
 8010942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010946:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801094a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801094c:	2300      	movs	r3, #0
}
 801094e:	4618      	mov	r0, r3
 8010950:	371c      	adds	r7, #28
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr
 801095a:	bf00      	nop
 801095c:	e007ffff 	.word	0xe007ffff
 8010960:	fff80000 	.word	0xfff80000

08010964 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010964:	b480      	push	{r7}
 8010966:	b089      	sub	sp, #36	; 0x24
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	4611      	mov	r1, r2
 8010970:	461a      	mov	r2, r3
 8010972:	460b      	mov	r3, r1
 8010974:	71fb      	strb	r3, [r7, #7]
 8010976:	4613      	mov	r3, r2
 8010978:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 801097e:	68bb      	ldr	r3, [r7, #8]
 8010980:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010982:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010986:	2b00      	cmp	r3, #0
 8010988:	d11a      	bne.n	80109c0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801098a:	88bb      	ldrh	r3, [r7, #4]
 801098c:	3303      	adds	r3, #3
 801098e:	089b      	lsrs	r3, r3, #2
 8010990:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010992:	2300      	movs	r3, #0
 8010994:	61bb      	str	r3, [r7, #24]
 8010996:	e00f      	b.n	80109b8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010998:	79fb      	ldrb	r3, [r7, #7]
 801099a:	031a      	lsls	r2, r3, #12
 801099c:	697b      	ldr	r3, [r7, #20]
 801099e:	4413      	add	r3, r2
 80109a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109a4:	461a      	mov	r2, r3
 80109a6:	69fb      	ldr	r3, [r7, #28]
 80109a8:	681b      	ldr	r3, [r3, #0]
 80109aa:	6013      	str	r3, [r2, #0]
      pSrc++;
 80109ac:	69fb      	ldr	r3, [r7, #28]
 80109ae:	3304      	adds	r3, #4
 80109b0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80109b2:	69bb      	ldr	r3, [r7, #24]
 80109b4:	3301      	adds	r3, #1
 80109b6:	61bb      	str	r3, [r7, #24]
 80109b8:	69ba      	ldr	r2, [r7, #24]
 80109ba:	693b      	ldr	r3, [r7, #16]
 80109bc:	429a      	cmp	r2, r3
 80109be:	d3eb      	bcc.n	8010998 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	3724      	adds	r7, #36	; 0x24
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr

080109ce <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80109ce:	b480      	push	{r7}
 80109d0:	b089      	sub	sp, #36	; 0x24
 80109d2:	af00      	add	r7, sp, #0
 80109d4:	60f8      	str	r0, [r7, #12]
 80109d6:	60b9      	str	r1, [r7, #8]
 80109d8:	4613      	mov	r3, r2
 80109da:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80109e4:	88fb      	ldrh	r3, [r7, #6]
 80109e6:	3303      	adds	r3, #3
 80109e8:	089b      	lsrs	r3, r3, #2
 80109ea:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80109ec:	2300      	movs	r3, #0
 80109ee:	61bb      	str	r3, [r7, #24]
 80109f0:	e00b      	b.n	8010a0a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80109f2:	697b      	ldr	r3, [r7, #20]
 80109f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80109f8:	681a      	ldr	r2, [r3, #0]
 80109fa:	69fb      	ldr	r3, [r7, #28]
 80109fc:	601a      	str	r2, [r3, #0]
    pDest++;
 80109fe:	69fb      	ldr	r3, [r7, #28]
 8010a00:	3304      	adds	r3, #4
 8010a02:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010a04:	69bb      	ldr	r3, [r7, #24]
 8010a06:	3301      	adds	r3, #1
 8010a08:	61bb      	str	r3, [r7, #24]
 8010a0a:	69ba      	ldr	r2, [r7, #24]
 8010a0c:	693b      	ldr	r3, [r7, #16]
 8010a0e:	429a      	cmp	r2, r3
 8010a10:	d3ef      	bcc.n	80109f2 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010a12:	69fb      	ldr	r3, [r7, #28]
}
 8010a14:	4618      	mov	r0, r3
 8010a16:	3724      	adds	r7, #36	; 0x24
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a1e:	4770      	bx	lr

08010a20 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010a20:	b480      	push	{r7}
 8010a22:	b085      	sub	sp, #20
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010a2e:	683b      	ldr	r3, [r7, #0]
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010a34:	683b      	ldr	r3, [r7, #0]
 8010a36:	785b      	ldrb	r3, [r3, #1]
 8010a38:	2b01      	cmp	r3, #1
 8010a3a:	d12c      	bne.n	8010a96 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a3c:	68bb      	ldr	r3, [r7, #8]
 8010a3e:	015a      	lsls	r2, r3, #5
 8010a40:	68fb      	ldr	r3, [r7, #12]
 8010a42:	4413      	add	r3, r2
 8010a44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a48:	681b      	ldr	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	db12      	blt.n	8010a74 <USB_EPSetStall+0x54>
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d00f      	beq.n	8010a74 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	015a      	lsls	r2, r3, #5
 8010a58:	68fb      	ldr	r3, [r7, #12]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	68ba      	ldr	r2, [r7, #8]
 8010a64:	0151      	lsls	r1, r2, #5
 8010a66:	68fa      	ldr	r2, [r7, #12]
 8010a68:	440a      	add	r2, r1
 8010a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010a72:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010a74:	68bb      	ldr	r3, [r7, #8]
 8010a76:	015a      	lsls	r2, r3, #5
 8010a78:	68fb      	ldr	r3, [r7, #12]
 8010a7a:	4413      	add	r3, r2
 8010a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	68ba      	ldr	r2, [r7, #8]
 8010a84:	0151      	lsls	r1, r2, #5
 8010a86:	68fa      	ldr	r2, [r7, #12]
 8010a88:	440a      	add	r2, r1
 8010a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010a92:	6013      	str	r3, [r2, #0]
 8010a94:	e02b      	b.n	8010aee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	015a      	lsls	r2, r3, #5
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	4413      	add	r3, r2
 8010a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	db12      	blt.n	8010ace <USB_EPSetStall+0xae>
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d00f      	beq.n	8010ace <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010aae:	68bb      	ldr	r3, [r7, #8]
 8010ab0:	015a      	lsls	r2, r3, #5
 8010ab2:	68fb      	ldr	r3, [r7, #12]
 8010ab4:	4413      	add	r3, r2
 8010ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	68ba      	ldr	r2, [r7, #8]
 8010abe:	0151      	lsls	r1, r2, #5
 8010ac0:	68fa      	ldr	r2, [r7, #12]
 8010ac2:	440a      	add	r2, r1
 8010ac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ac8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010acc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010ace:	68bb      	ldr	r3, [r7, #8]
 8010ad0:	015a      	lsls	r2, r3, #5
 8010ad2:	68fb      	ldr	r3, [r7, #12]
 8010ad4:	4413      	add	r3, r2
 8010ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	68ba      	ldr	r2, [r7, #8]
 8010ade:	0151      	lsls	r1, r2, #5
 8010ae0:	68fa      	ldr	r2, [r7, #12]
 8010ae2:	440a      	add	r2, r1
 8010ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ae8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010aec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010aee:	2300      	movs	r3, #0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3714      	adds	r7, #20
 8010af4:	46bd      	mov	sp, r7
 8010af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afa:	4770      	bx	lr

08010afc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010afc:	b480      	push	{r7}
 8010afe:	b085      	sub	sp, #20
 8010b00:	af00      	add	r7, sp, #0
 8010b02:	6078      	str	r0, [r7, #4]
 8010b04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	781b      	ldrb	r3, [r3, #0]
 8010b0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b10:	683b      	ldr	r3, [r7, #0]
 8010b12:	785b      	ldrb	r3, [r3, #1]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d128      	bne.n	8010b6a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010b18:	68bb      	ldr	r3, [r7, #8]
 8010b1a:	015a      	lsls	r2, r3, #5
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	4413      	add	r3, r2
 8010b20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	68ba      	ldr	r2, [r7, #8]
 8010b28:	0151      	lsls	r1, r2, #5
 8010b2a:	68fa      	ldr	r2, [r7, #12]
 8010b2c:	440a      	add	r2, r1
 8010b2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b36:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b38:	683b      	ldr	r3, [r7, #0]
 8010b3a:	78db      	ldrb	r3, [r3, #3]
 8010b3c:	2b03      	cmp	r3, #3
 8010b3e:	d003      	beq.n	8010b48 <USB_EPClearStall+0x4c>
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	78db      	ldrb	r3, [r3, #3]
 8010b44:	2b02      	cmp	r3, #2
 8010b46:	d138      	bne.n	8010bba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	015a      	lsls	r2, r3, #5
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	4413      	add	r3, r2
 8010b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	0151      	lsls	r1, r2, #5
 8010b5a:	68fa      	ldr	r2, [r7, #12]
 8010b5c:	440a      	add	r2, r1
 8010b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	e027      	b.n	8010bba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010b6a:	68bb      	ldr	r3, [r7, #8]
 8010b6c:	015a      	lsls	r2, r3, #5
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	4413      	add	r3, r2
 8010b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b76:	681b      	ldr	r3, [r3, #0]
 8010b78:	68ba      	ldr	r2, [r7, #8]
 8010b7a:	0151      	lsls	r1, r2, #5
 8010b7c:	68fa      	ldr	r2, [r7, #12]
 8010b7e:	440a      	add	r2, r1
 8010b80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b84:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010b88:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010b8a:	683b      	ldr	r3, [r7, #0]
 8010b8c:	78db      	ldrb	r3, [r3, #3]
 8010b8e:	2b03      	cmp	r3, #3
 8010b90:	d003      	beq.n	8010b9a <USB_EPClearStall+0x9e>
 8010b92:	683b      	ldr	r3, [r7, #0]
 8010b94:	78db      	ldrb	r3, [r3, #3]
 8010b96:	2b02      	cmp	r3, #2
 8010b98:	d10f      	bne.n	8010bba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	015a      	lsls	r2, r3, #5
 8010b9e:	68fb      	ldr	r3, [r7, #12]
 8010ba0:	4413      	add	r3, r2
 8010ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	68ba      	ldr	r2, [r7, #8]
 8010baa:	0151      	lsls	r1, r2, #5
 8010bac:	68fa      	ldr	r2, [r7, #12]
 8010bae:	440a      	add	r2, r1
 8010bb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bb8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010bba:	2300      	movs	r3, #0
}
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3714      	adds	r7, #20
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc6:	4770      	bx	lr

08010bc8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010bc8:	b480      	push	{r7}
 8010bca:	b085      	sub	sp, #20
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	460b      	mov	r3, r1
 8010bd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	68fa      	ldr	r2, [r7, #12]
 8010be2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010be6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010bea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bf2:	681a      	ldr	r2, [r3, #0]
 8010bf4:	78fb      	ldrb	r3, [r7, #3]
 8010bf6:	011b      	lsls	r3, r3, #4
 8010bf8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010bfc:	68f9      	ldr	r1, [r7, #12]
 8010bfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c02:	4313      	orrs	r3, r2
 8010c04:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010c06:	2300      	movs	r3, #0
}
 8010c08:	4618      	mov	r0, r3
 8010c0a:	3714      	adds	r7, #20
 8010c0c:	46bd      	mov	sp, r7
 8010c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c12:	4770      	bx	lr

08010c14 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c14:	b580      	push	{r7, lr}
 8010c16:	b084      	sub	sp, #16
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	68fa      	ldr	r2, [r7, #12]
 8010c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c2e:	f023 0302 	bic.w	r3, r3, #2
 8010c32:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010c34:	2003      	movs	r0, #3
 8010c36:	f7f6 fc65 	bl	8007504 <HAL_Delay>

  return HAL_OK;
 8010c3a:	2300      	movs	r3, #0
}
 8010c3c:	4618      	mov	r0, r3
 8010c3e:	3710      	adds	r7, #16
 8010c40:	46bd      	mov	sp, r7
 8010c42:	bd80      	pop	{r7, pc}

08010c44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c44:	b580      	push	{r7, lr}
 8010c46:	b084      	sub	sp, #16
 8010c48:	af00      	add	r7, sp, #0
 8010c4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c56:	685b      	ldr	r3, [r3, #4]
 8010c58:	68fa      	ldr	r2, [r7, #12]
 8010c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c5e:	f043 0302 	orr.w	r3, r3, #2
 8010c62:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010c64:	2003      	movs	r0, #3
 8010c66:	f7f6 fc4d 	bl	8007504 <HAL_Delay>

  return HAL_OK;
 8010c6a:	2300      	movs	r3, #0
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3710      	adds	r7, #16
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010c74:	b480      	push	{r7}
 8010c76:	b085      	sub	sp, #20
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	695b      	ldr	r3, [r3, #20]
 8010c80:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	699b      	ldr	r3, [r3, #24]
 8010c86:	68fa      	ldr	r2, [r7, #12]
 8010c88:	4013      	ands	r3, r2
 8010c8a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010c8c:	68fb      	ldr	r3, [r7, #12]
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3714      	adds	r7, #20
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr

08010c9a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010c9a:	b480      	push	{r7}
 8010c9c:	b085      	sub	sp, #20
 8010c9e:	af00      	add	r7, sp, #0
 8010ca0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cac:	699b      	ldr	r3, [r3, #24]
 8010cae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cb6:	69db      	ldr	r3, [r3, #28]
 8010cb8:	68ba      	ldr	r2, [r7, #8]
 8010cba:	4013      	ands	r3, r2
 8010cbc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010cbe:	68bb      	ldr	r3, [r7, #8]
 8010cc0:	0c1b      	lsrs	r3, r3, #16
}
 8010cc2:	4618      	mov	r0, r3
 8010cc4:	3714      	adds	r7, #20
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ccc:	4770      	bx	lr

08010cce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010cce:	b480      	push	{r7}
 8010cd0:	b085      	sub	sp, #20
 8010cd2:	af00      	add	r7, sp, #0
 8010cd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ce0:	699b      	ldr	r3, [r3, #24]
 8010ce2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cea:	69db      	ldr	r3, [r3, #28]
 8010cec:	68ba      	ldr	r2, [r7, #8]
 8010cee:	4013      	ands	r3, r2
 8010cf0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010cf2:	68bb      	ldr	r3, [r7, #8]
 8010cf4:	b29b      	uxth	r3, r3
}
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	3714      	adds	r7, #20
 8010cfa:	46bd      	mov	sp, r7
 8010cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d00:	4770      	bx	lr

08010d02 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d02:	b480      	push	{r7}
 8010d04:	b085      	sub	sp, #20
 8010d06:	af00      	add	r7, sp, #0
 8010d08:	6078      	str	r0, [r7, #4]
 8010d0a:	460b      	mov	r3, r1
 8010d0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010d12:	78fb      	ldrb	r3, [r7, #3]
 8010d14:	015a      	lsls	r2, r3, #5
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	4413      	add	r3, r2
 8010d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d1e:	689b      	ldr	r3, [r3, #8]
 8010d20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010d22:	68fb      	ldr	r3, [r7, #12]
 8010d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d28:	695b      	ldr	r3, [r3, #20]
 8010d2a:	68ba      	ldr	r2, [r7, #8]
 8010d2c:	4013      	ands	r3, r2
 8010d2e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d30:	68bb      	ldr	r3, [r7, #8]
}
 8010d32:	4618      	mov	r0, r3
 8010d34:	3714      	adds	r7, #20
 8010d36:	46bd      	mov	sp, r7
 8010d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3c:	4770      	bx	lr

08010d3e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d3e:	b480      	push	{r7}
 8010d40:	b087      	sub	sp, #28
 8010d42:	af00      	add	r7, sp, #0
 8010d44:	6078      	str	r0, [r7, #4]
 8010d46:	460b      	mov	r3, r1
 8010d48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010d4e:	697b      	ldr	r3, [r7, #20]
 8010d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d54:	691b      	ldr	r3, [r3, #16]
 8010d56:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010d58:	697b      	ldr	r3, [r7, #20]
 8010d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010d60:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010d62:	78fb      	ldrb	r3, [r7, #3]
 8010d64:	f003 030f 	and.w	r3, r3, #15
 8010d68:	68fa      	ldr	r2, [r7, #12]
 8010d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8010d6e:	01db      	lsls	r3, r3, #7
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	693a      	ldr	r2, [r7, #16]
 8010d74:	4313      	orrs	r3, r2
 8010d76:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010d78:	78fb      	ldrb	r3, [r7, #3]
 8010d7a:	015a      	lsls	r2, r3, #5
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	4413      	add	r3, r2
 8010d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d84:	689b      	ldr	r3, [r3, #8]
 8010d86:	693a      	ldr	r2, [r7, #16]
 8010d88:	4013      	ands	r3, r2
 8010d8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010d8c:	68bb      	ldr	r3, [r7, #8]
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	371c      	adds	r7, #28
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr

08010d9a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010d9a:	b480      	push	{r7}
 8010d9c:	b083      	sub	sp, #12
 8010d9e:	af00      	add	r7, sp, #0
 8010da0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	695b      	ldr	r3, [r3, #20]
 8010da6:	f003 0301 	and.w	r3, r3, #1
}
 8010daa:	4618      	mov	r0, r3
 8010dac:	370c      	adds	r7, #12
 8010dae:	46bd      	mov	sp, r7
 8010db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db4:	4770      	bx	lr
	...

08010db8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010db8:	b480      	push	{r7}
 8010dba:	b085      	sub	sp, #20
 8010dbc:	af00      	add	r7, sp, #0
 8010dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010dc4:	68fb      	ldr	r3, [r7, #12]
 8010dc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dca:	681a      	ldr	r2, [r3, #0]
 8010dcc:	68fb      	ldr	r3, [r7, #12]
 8010dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	4b09      	ldr	r3, [pc, #36]	; (8010dfc <USB_ActivateSetup+0x44>)
 8010dd6:	4013      	ands	r3, r2
 8010dd8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010de0:	685b      	ldr	r3, [r3, #4]
 8010de2:	68fa      	ldr	r2, [r7, #12]
 8010de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010de8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010dec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010dee:	2300      	movs	r3, #0
}
 8010df0:	4618      	mov	r0, r3
 8010df2:	3714      	adds	r7, #20
 8010df4:	46bd      	mov	sp, r7
 8010df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dfa:	4770      	bx	lr
 8010dfc:	fffff800 	.word	0xfffff800

08010e00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010e00:	b480      	push	{r7}
 8010e02:	b087      	sub	sp, #28
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	60f8      	str	r0, [r7, #12]
 8010e08:	460b      	mov	r3, r1
 8010e0a:	607a      	str	r2, [r7, #4]
 8010e0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	333c      	adds	r3, #60	; 0x3c
 8010e16:	3304      	adds	r3, #4
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010e1c:	693b      	ldr	r3, [r7, #16]
 8010e1e:	4a26      	ldr	r2, [pc, #152]	; (8010eb8 <USB_EP0_OutStart+0xb8>)
 8010e20:	4293      	cmp	r3, r2
 8010e22:	d90a      	bls.n	8010e3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e24:	697b      	ldr	r3, [r7, #20]
 8010e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e2a:	681b      	ldr	r3, [r3, #0]
 8010e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010e34:	d101      	bne.n	8010e3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010e36:	2300      	movs	r3, #0
 8010e38:	e037      	b.n	8010eaa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010e3a:	697b      	ldr	r3, [r7, #20]
 8010e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e40:	461a      	mov	r2, r3
 8010e42:	2300      	movs	r3, #0
 8010e44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010e46:	697b      	ldr	r3, [r7, #20]
 8010e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e4c:	691b      	ldr	r3, [r3, #16]
 8010e4e:	697a      	ldr	r2, [r7, #20]
 8010e50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010e58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010e5a:	697b      	ldr	r3, [r7, #20]
 8010e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e60:	691b      	ldr	r3, [r3, #16]
 8010e62:	697a      	ldr	r2, [r7, #20]
 8010e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e68:	f043 0318 	orr.w	r3, r3, #24
 8010e6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010e6e:	697b      	ldr	r3, [r7, #20]
 8010e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e74:	691b      	ldr	r3, [r3, #16]
 8010e76:	697a      	ldr	r2, [r7, #20]
 8010e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010e7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010e80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010e82:	7afb      	ldrb	r3, [r7, #11]
 8010e84:	2b01      	cmp	r3, #1
 8010e86:	d10f      	bne.n	8010ea8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010e88:	697b      	ldr	r3, [r7, #20]
 8010e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e8e:	461a      	mov	r2, r3
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010e94:	697b      	ldr	r3, [r7, #20]
 8010e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	697a      	ldr	r2, [r7, #20]
 8010e9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ea2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010ea6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010ea8:	2300      	movs	r3, #0
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	371c      	adds	r7, #28
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr
 8010eb6:	bf00      	nop
 8010eb8:	4f54300a 	.word	0x4f54300a

08010ebc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b085      	sub	sp, #20
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010ec4:	2300      	movs	r3, #0
 8010ec6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	3301      	adds	r3, #1
 8010ecc:	60fb      	str	r3, [r7, #12]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	4a13      	ldr	r2, [pc, #76]	; (8010f20 <USB_CoreReset+0x64>)
 8010ed2:	4293      	cmp	r3, r2
 8010ed4:	d901      	bls.n	8010eda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010ed6:	2303      	movs	r3, #3
 8010ed8:	e01b      	b.n	8010f12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	691b      	ldr	r3, [r3, #16]
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	daf2      	bge.n	8010ec8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	691b      	ldr	r3, [r3, #16]
 8010eea:	f043 0201 	orr.w	r2, r3, #1
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	3301      	adds	r3, #1
 8010ef6:	60fb      	str	r3, [r7, #12]
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	4a09      	ldr	r2, [pc, #36]	; (8010f20 <USB_CoreReset+0x64>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	d901      	bls.n	8010f04 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010f00:	2303      	movs	r3, #3
 8010f02:	e006      	b.n	8010f12 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	691b      	ldr	r3, [r3, #16]
 8010f08:	f003 0301 	and.w	r3, r3, #1
 8010f0c:	2b01      	cmp	r3, #1
 8010f0e:	d0f0      	beq.n	8010ef2 <USB_CoreReset+0x36>

  return HAL_OK;
 8010f10:	2300      	movs	r3, #0
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3714      	adds	r7, #20
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
 8010f1e:	bf00      	nop
 8010f20:	00030d40 	.word	0x00030d40

08010f24 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8010f24:	b580      	push	{r7, lr}
 8010f26:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f28:	4904      	ldr	r1, [pc, #16]	; (8010f3c <MX_FATFS_Init+0x18>)
 8010f2a:	4805      	ldr	r0, [pc, #20]	; (8010f40 <MX_FATFS_Init+0x1c>)
 8010f2c:	f004 fdaa 	bl	8015a84 <FATFS_LinkDriver>
 8010f30:	4603      	mov	r3, r0
 8010f32:	461a      	mov	r2, r3
 8010f34:	4b03      	ldr	r3, [pc, #12]	; (8010f44 <MX_FATFS_Init+0x20>)
 8010f36:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8010f38:	bf00      	nop
 8010f3a:	bd80      	pop	{r7, pc}
 8010f3c:	2001c76c 	.word	0x2001c76c
 8010f40:	0801d858 	.word	0x0801d858
 8010f44:	2001c768 	.word	0x2001c768

08010f48 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010f48:	b480      	push	{r7}
 8010f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010f4c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8010f4e:	4618      	mov	r0, r3
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr

08010f58 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010f58:	b580      	push	{r7, lr}
 8010f5a:	b082      	sub	sp, #8
 8010f5c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010f5e:	2300      	movs	r3, #0
 8010f60:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010f62:	f000 f896 	bl	8011092 <BSP_SD_IsDetected>
 8010f66:	4603      	mov	r3, r0
 8010f68:	2b01      	cmp	r3, #1
 8010f6a:	d001      	beq.n	8010f70 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010f6c:	2302      	movs	r3, #2
 8010f6e:	e012      	b.n	8010f96 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010f70:	480b      	ldr	r0, [pc, #44]	; (8010fa0 <BSP_SD_Init+0x48>)
 8010f72:	f7fa f877 	bl	800b064 <HAL_SD_Init>
 8010f76:	4603      	mov	r3, r0
 8010f78:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010f7a:	79fb      	ldrb	r3, [r7, #7]
 8010f7c:	2b00      	cmp	r3, #0
 8010f7e:	d109      	bne.n	8010f94 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010f80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010f84:	4806      	ldr	r0, [pc, #24]	; (8010fa0 <BSP_SD_Init+0x48>)
 8010f86:	f7fa fe2f 	bl	800bbe8 <HAL_SD_ConfigWideBusOperation>
 8010f8a:	4603      	mov	r3, r0
 8010f8c:	2b00      	cmp	r3, #0
 8010f8e:	d001      	beq.n	8010f94 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010f90:	2301      	movs	r3, #1
 8010f92:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010f94:	79fb      	ldrb	r3, [r7, #7]
}
 8010f96:	4618      	mov	r0, r3
 8010f98:	3708      	adds	r7, #8
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	2000ba7c 	.word	0x2000ba7c

08010fa4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b086      	sub	sp, #24
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	60f8      	str	r0, [r7, #12]
 8010fac:	60b9      	str	r1, [r7, #8]
 8010fae:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	68ba      	ldr	r2, [r7, #8]
 8010fb8:	68f9      	ldr	r1, [r7, #12]
 8010fba:	4806      	ldr	r0, [pc, #24]	; (8010fd4 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010fbc:	f7fa f8ea 	bl	800b194 <HAL_SD_ReadBlocks_DMA>
 8010fc0:	4603      	mov	r3, r0
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d001      	beq.n	8010fca <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8010fca:	7dfb      	ldrb	r3, [r7, #23]
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3718      	adds	r7, #24
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}
 8010fd4:	2000ba7c 	.word	0x2000ba7c

08010fd8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b086      	sub	sp, #24
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	60f8      	str	r0, [r7, #12]
 8010fe0:	60b9      	str	r1, [r7, #8]
 8010fe2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010fe4:	2300      	movs	r3, #0
 8010fe6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	68ba      	ldr	r2, [r7, #8]
 8010fec:	68f9      	ldr	r1, [r7, #12]
 8010fee:	4806      	ldr	r0, [pc, #24]	; (8011008 <BSP_SD_WriteBlocks_DMA+0x30>)
 8010ff0:	f7fa f9bc 	bl	800b36c <HAL_SD_WriteBlocks_DMA>
 8010ff4:	4603      	mov	r3, r0
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8010ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3718      	adds	r7, #24
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	2000ba7c 	.word	0x2000ba7c

0801100c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011010:	4805      	ldr	r0, [pc, #20]	; (8011028 <BSP_SD_GetCardState+0x1c>)
 8011012:	f7fa fe65 	bl	800bce0 <HAL_SD_GetCardState>
 8011016:	4603      	mov	r3, r0
 8011018:	2b04      	cmp	r3, #4
 801101a:	bf14      	ite	ne
 801101c:	2301      	movne	r3, #1
 801101e:	2300      	moveq	r3, #0
 8011020:	b2db      	uxtb	r3, r3
}
 8011022:	4618      	mov	r0, r3
 8011024:	bd80      	pop	{r7, pc}
 8011026:	bf00      	nop
 8011028:	2000ba7c 	.word	0x2000ba7c

0801102c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011034:	6879      	ldr	r1, [r7, #4]
 8011036:	4803      	ldr	r0, [pc, #12]	; (8011044 <BSP_SD_GetCardInfo+0x18>)
 8011038:	f7fa fdaa 	bl	800bb90 <HAL_SD_GetCardInfo>
}
 801103c:	bf00      	nop
 801103e:	3708      	adds	r7, #8
 8011040:	46bd      	mov	sp, r7
 8011042:	bd80      	pop	{r7, pc}
 8011044:	2000ba7c 	.word	0x2000ba7c

08011048 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8011048:	b580      	push	{r7, lr}
 801104a:	b082      	sub	sp, #8
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8011050:	f000 f818 	bl	8011084 <BSP_SD_AbortCallback>
}
 8011054:	bf00      	nop
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}

0801105c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 801105c:	b580      	push	{r7, lr}
 801105e:	b082      	sub	sp, #8
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8011064:	f000 f9b4 	bl	80113d0 <BSP_SD_WriteCpltCallback>
}
 8011068:	bf00      	nop
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b082      	sub	sp, #8
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8011078:	f000 f9bc 	bl	80113f4 <BSP_SD_ReadCpltCallback>
}
 801107c:	bf00      	nop
 801107e:	3708      	adds	r7, #8
 8011080:	46bd      	mov	sp, r7
 8011082:	bd80      	pop	{r7, pc}

08011084 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8011084:	b480      	push	{r7}
 8011086:	af00      	add	r7, sp, #0

}
 8011088:	bf00      	nop
 801108a:	46bd      	mov	sp, r7
 801108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011090:	4770      	bx	lr

08011092 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011092:	b580      	push	{r7, lr}
 8011094:	b082      	sub	sp, #8
 8011096:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8011098:	2301      	movs	r3, #1
 801109a:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 801109c:	f000 f80c 	bl	80110b8 <BSP_PlatformIsDetected>
 80110a0:	4603      	mov	r3, r0
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d101      	bne.n	80110aa <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80110a6:	2300      	movs	r3, #0
 80110a8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80110aa:	79fb      	ldrb	r3, [r7, #7]
 80110ac:	b2db      	uxtb	r3, r3
}
 80110ae:	4618      	mov	r0, r3
 80110b0:	3708      	adds	r7, #8
 80110b2:	46bd      	mov	sp, r7
 80110b4:	bd80      	pop	{r7, pc}
	...

080110b8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80110b8:	b580      	push	{r7, lr}
 80110ba:	b082      	sub	sp, #8
 80110bc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80110be:	2301      	movs	r3, #1
 80110c0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80110c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80110c6:	4806      	ldr	r0, [pc, #24]	; (80110e0 <BSP_PlatformIsDetected+0x28>)
 80110c8:	f7f7 fd3e 	bl	8008b48 <HAL_GPIO_ReadPin>
 80110cc:	4603      	mov	r3, r0
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d001      	beq.n	80110d6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80110d2:	2300      	movs	r3, #0
 80110d4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 80110d6:	79fb      	ldrb	r3, [r7, #7]
}  
 80110d8:	4618      	mov	r0, r3
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}
 80110e0:	40020800 	.word	0x40020800

080110e4 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b084      	sub	sp, #16
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 80110ec:	f004 fdb4 	bl	8015c58 <osKernelGetTickCount>
 80110f0:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 80110f2:	e006      	b.n	8011102 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80110f4:	f7ff ff8a 	bl	801100c <BSP_SD_GetCardState>
 80110f8:	4603      	mov	r3, r0
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d101      	bne.n	8011102 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80110fe:	2300      	movs	r3, #0
 8011100:	e009      	b.n	8011116 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8011102:	f004 fda9 	bl	8015c58 <osKernelGetTickCount>
 8011106:	4602      	mov	r2, r0
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	1ad3      	subs	r3, r2, r3
 801110c:	687a      	ldr	r2, [r7, #4]
 801110e:	429a      	cmp	r2, r3
 8011110:	d8f0      	bhi.n	80110f4 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011116:	4618      	mov	r0, r3
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
	...

08011120 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011120:	b580      	push	{r7, lr}
 8011122:	b082      	sub	sp, #8
 8011124:	af00      	add	r7, sp, #0
 8011126:	4603      	mov	r3, r0
 8011128:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801112a:	4b0b      	ldr	r3, [pc, #44]	; (8011158 <SD_CheckStatus+0x38>)
 801112c:	2201      	movs	r2, #1
 801112e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011130:	f7ff ff6c 	bl	801100c <BSP_SD_GetCardState>
 8011134:	4603      	mov	r3, r0
 8011136:	2b00      	cmp	r3, #0
 8011138:	d107      	bne.n	801114a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801113a:	4b07      	ldr	r3, [pc, #28]	; (8011158 <SD_CheckStatus+0x38>)
 801113c:	781b      	ldrb	r3, [r3, #0]
 801113e:	b2db      	uxtb	r3, r3
 8011140:	f023 0301 	bic.w	r3, r3, #1
 8011144:	b2da      	uxtb	r2, r3
 8011146:	4b04      	ldr	r3, [pc, #16]	; (8011158 <SD_CheckStatus+0x38>)
 8011148:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801114a:	4b03      	ldr	r3, [pc, #12]	; (8011158 <SD_CheckStatus+0x38>)
 801114c:	781b      	ldrb	r3, [r3, #0]
 801114e:	b2db      	uxtb	r3, r3
}
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}
 8011158:	2000008d 	.word	0x2000008d

0801115c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	4603      	mov	r3, r0
 8011164:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8011166:	4b1c      	ldr	r3, [pc, #112]	; (80111d8 <SD_initialize+0x7c>)
 8011168:	2201      	movs	r2, #1
 801116a:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 801116c:	f004 fd1c 	bl	8015ba8 <osKernelGetState>
 8011170:	4603      	mov	r3, r0
 8011172:	2b02      	cmp	r3, #2
 8011174:	d129      	bne.n	80111ca <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8011176:	f7ff feef 	bl	8010f58 <BSP_SD_Init>
 801117a:	4603      	mov	r3, r0
 801117c:	2b00      	cmp	r3, #0
 801117e:	d107      	bne.n	8011190 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8011180:	79fb      	ldrb	r3, [r7, #7]
 8011182:	4618      	mov	r0, r3
 8011184:	f7ff ffcc 	bl	8011120 <SD_CheckStatus>
 8011188:	4603      	mov	r3, r0
 801118a:	461a      	mov	r2, r3
 801118c:	4b12      	ldr	r3, [pc, #72]	; (80111d8 <SD_initialize+0x7c>)
 801118e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011190:	4b11      	ldr	r3, [pc, #68]	; (80111d8 <SD_initialize+0x7c>)
 8011192:	781b      	ldrb	r3, [r3, #0]
 8011194:	b2db      	uxtb	r3, r3
 8011196:	2b01      	cmp	r3, #1
 8011198:	d017      	beq.n	80111ca <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801119a:	4b10      	ldr	r3, [pc, #64]	; (80111dc <SD_initialize+0x80>)
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d107      	bne.n	80111b2 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 80111a2:	2200      	movs	r2, #0
 80111a4:	2102      	movs	r1, #2
 80111a6:	200a      	movs	r0, #10
 80111a8:	f005 f976 	bl	8016498 <osMessageQueueNew>
 80111ac:	4602      	mov	r2, r0
 80111ae:	4b0b      	ldr	r3, [pc, #44]	; (80111dc <SD_initialize+0x80>)
 80111b0:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 80111b2:	4b0a      	ldr	r3, [pc, #40]	; (80111dc <SD_initialize+0x80>)
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d107      	bne.n	80111ca <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 80111ba:	4b07      	ldr	r3, [pc, #28]	; (80111d8 <SD_initialize+0x7c>)
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	f043 0301 	orr.w	r3, r3, #1
 80111c4:	b2da      	uxtb	r2, r3
 80111c6:	4b04      	ldr	r3, [pc, #16]	; (80111d8 <SD_initialize+0x7c>)
 80111c8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80111ca:	4b03      	ldr	r3, [pc, #12]	; (80111d8 <SD_initialize+0x7c>)
 80111cc:	781b      	ldrb	r3, [r3, #0]
 80111ce:	b2db      	uxtb	r3, r3
}
 80111d0:	4618      	mov	r0, r3
 80111d2:	3708      	adds	r7, #8
 80111d4:	46bd      	mov	sp, r7
 80111d6:	bd80      	pop	{r7, pc}
 80111d8:	2000008d 	.word	0x2000008d
 80111dc:	200003bc 	.word	0x200003bc

080111e0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80111e0:	b580      	push	{r7, lr}
 80111e2:	b082      	sub	sp, #8
 80111e4:	af00      	add	r7, sp, #0
 80111e6:	4603      	mov	r3, r0
 80111e8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80111ea:	79fb      	ldrb	r3, [r7, #7]
 80111ec:	4618      	mov	r0, r3
 80111ee:	f7ff ff97 	bl	8011120 <SD_CheckStatus>
 80111f2:	4603      	mov	r3, r0
}
 80111f4:	4618      	mov	r0, r3
 80111f6:	3708      	adds	r7, #8
 80111f8:	46bd      	mov	sp, r7
 80111fa:	bd80      	pop	{r7, pc}

080111fc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80111fc:	b580      	push	{r7, lr}
 80111fe:	b088      	sub	sp, #32
 8011200:	af00      	add	r7, sp, #0
 8011202:	60b9      	str	r1, [r7, #8]
 8011204:	607a      	str	r2, [r7, #4]
 8011206:	603b      	str	r3, [r7, #0]
 8011208:	4603      	mov	r3, r0
 801120a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 801120c:	2301      	movs	r3, #1
 801120e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011210:	f247 5030 	movw	r0, #30000	; 0x7530
 8011214:	f7ff ff66 	bl	80110e4 <SD_CheckStatusWithTimeout>
 8011218:	4603      	mov	r3, r0
 801121a:	2b00      	cmp	r3, #0
 801121c:	da01      	bge.n	8011222 <SD_read+0x26>
  {
    return res;
 801121e:	7ffb      	ldrb	r3, [r7, #31]
 8011220:	e02f      	b.n	8011282 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011222:	683a      	ldr	r2, [r7, #0]
 8011224:	6879      	ldr	r1, [r7, #4]
 8011226:	68b8      	ldr	r0, [r7, #8]
 8011228:	f7ff febc 	bl	8010fa4 <BSP_SD_ReadBlocks_DMA>
 801122c:	4603      	mov	r3, r0
 801122e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8011230:	7fbb      	ldrb	r3, [r7, #30]
 8011232:	2b00      	cmp	r3, #0
 8011234:	d124      	bne.n	8011280 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8011236:	4b15      	ldr	r3, [pc, #84]	; (801128c <SD_read+0x90>)
 8011238:	6818      	ldr	r0, [r3, #0]
 801123a:	f107 0112 	add.w	r1, r7, #18
 801123e:	f247 5330 	movw	r3, #30000	; 0x7530
 8011242:	2200      	movs	r2, #0
 8011244:	f005 fa22 	bl	801668c <osMessageQueueGet>
 8011248:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801124a:	69bb      	ldr	r3, [r7, #24]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d117      	bne.n	8011280 <SD_read+0x84>
 8011250:	8a7b      	ldrh	r3, [r7, #18]
 8011252:	2b01      	cmp	r3, #1
 8011254:	d114      	bne.n	8011280 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8011256:	f004 fcff 	bl	8015c58 <osKernelGetTickCount>
 801125a:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801125c:	e007      	b.n	801126e <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801125e:	f7ff fed5 	bl	801100c <BSP_SD_GetCardState>
 8011262:	4603      	mov	r3, r0
 8011264:	2b00      	cmp	r3, #0
 8011266:	d102      	bne.n	801126e <SD_read+0x72>
              {
                res = RES_OK;
 8011268:	2300      	movs	r3, #0
 801126a:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 801126c:	e008      	b.n	8011280 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 801126e:	f004 fcf3 	bl	8015c58 <osKernelGetTickCount>
 8011272:	4602      	mov	r2, r0
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	1ad3      	subs	r3, r2, r3
 8011278:	f247 522f 	movw	r2, #29999	; 0x752f
 801127c:	4293      	cmp	r3, r2
 801127e:	d9ee      	bls.n	801125e <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011280:	7ffb      	ldrb	r3, [r7, #31]
}
 8011282:	4618      	mov	r0, r3
 8011284:	3720      	adds	r7, #32
 8011286:	46bd      	mov	sp, r7
 8011288:	bd80      	pop	{r7, pc}
 801128a:	bf00      	nop
 801128c:	200003bc 	.word	0x200003bc

08011290 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011290:	b580      	push	{r7, lr}
 8011292:	b088      	sub	sp, #32
 8011294:	af00      	add	r7, sp, #0
 8011296:	60b9      	str	r1, [r7, #8]
 8011298:	607a      	str	r2, [r7, #4]
 801129a:	603b      	str	r3, [r7, #0]
 801129c:	4603      	mov	r3, r0
 801129e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80112a0:	2301      	movs	r3, #1
 80112a2:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80112a4:	f247 5030 	movw	r0, #30000	; 0x7530
 80112a8:	f7ff ff1c 	bl	80110e4 <SD_CheckStatusWithTimeout>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	da01      	bge.n	80112b6 <SD_write+0x26>
  {
    return res;
 80112b2:	7ffb      	ldrb	r3, [r7, #31]
 80112b4:	e02d      	b.n	8011312 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80112b6:	683a      	ldr	r2, [r7, #0]
 80112b8:	6879      	ldr	r1, [r7, #4]
 80112ba:	68b8      	ldr	r0, [r7, #8]
 80112bc:	f7ff fe8c 	bl	8010fd8 <BSP_SD_WriteBlocks_DMA>
 80112c0:	4603      	mov	r3, r0
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d124      	bne.n	8011310 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80112c6:	4b15      	ldr	r3, [pc, #84]	; (801131c <SD_write+0x8c>)
 80112c8:	6818      	ldr	r0, [r3, #0]
 80112ca:	f107 0112 	add.w	r1, r7, #18
 80112ce:	f247 5330 	movw	r3, #30000	; 0x7530
 80112d2:	2200      	movs	r2, #0
 80112d4:	f005 f9da 	bl	801668c <osMessageQueueGet>
 80112d8:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80112da:	69bb      	ldr	r3, [r7, #24]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d117      	bne.n	8011310 <SD_write+0x80>
 80112e0:	8a7b      	ldrh	r3, [r7, #18]
 80112e2:	2b02      	cmp	r3, #2
 80112e4:	d114      	bne.n	8011310 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80112e6:	f004 fcb7 	bl	8015c58 <osKernelGetTickCount>
 80112ea:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80112ec:	e007      	b.n	80112fe <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112ee:	f7ff fe8d 	bl	801100c <BSP_SD_GetCardState>
 80112f2:	4603      	mov	r3, r0
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d102      	bne.n	80112fe <SD_write+0x6e>
          {
            res = RES_OK;
 80112f8:	2300      	movs	r3, #0
 80112fa:	77fb      	strb	r3, [r7, #31]
            break;
 80112fc:	e008      	b.n	8011310 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80112fe:	f004 fcab 	bl	8015c58 <osKernelGetTickCount>
 8011302:	4602      	mov	r2, r0
 8011304:	697b      	ldr	r3, [r7, #20]
 8011306:	1ad3      	subs	r3, r2, r3
 8011308:	f247 522f 	movw	r2, #29999	; 0x752f
 801130c:	4293      	cmp	r3, r2
 801130e:	d9ee      	bls.n	80112ee <SD_write+0x5e>
    }

  }
#endif

  return res;
 8011310:	7ffb      	ldrb	r3, [r7, #31]
}
 8011312:	4618      	mov	r0, r3
 8011314:	3720      	adds	r7, #32
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	200003bc 	.word	0x200003bc

08011320 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b08c      	sub	sp, #48	; 0x30
 8011324:	af00      	add	r7, sp, #0
 8011326:	4603      	mov	r3, r0
 8011328:	603a      	str	r2, [r7, #0]
 801132a:	71fb      	strb	r3, [r7, #7]
 801132c:	460b      	mov	r3, r1
 801132e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011330:	2301      	movs	r3, #1
 8011332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011336:	4b25      	ldr	r3, [pc, #148]	; (80113cc <SD_ioctl+0xac>)
 8011338:	781b      	ldrb	r3, [r3, #0]
 801133a:	b2db      	uxtb	r3, r3
 801133c:	f003 0301 	and.w	r3, r3, #1
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <SD_ioctl+0x28>
 8011344:	2303      	movs	r3, #3
 8011346:	e03c      	b.n	80113c2 <SD_ioctl+0xa2>

  switch (cmd)
 8011348:	79bb      	ldrb	r3, [r7, #6]
 801134a:	2b03      	cmp	r3, #3
 801134c:	d834      	bhi.n	80113b8 <SD_ioctl+0x98>
 801134e:	a201      	add	r2, pc, #4	; (adr r2, 8011354 <SD_ioctl+0x34>)
 8011350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011354:	08011365 	.word	0x08011365
 8011358:	0801136d 	.word	0x0801136d
 801135c:	08011385 	.word	0x08011385
 8011360:	0801139f 	.word	0x0801139f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011364:	2300      	movs	r3, #0
 8011366:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801136a:	e028      	b.n	80113be <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801136c:	f107 030c 	add.w	r3, r7, #12
 8011370:	4618      	mov	r0, r3
 8011372:	f7ff fe5b 	bl	801102c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8011376:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801137c:	2300      	movs	r3, #0
 801137e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011382:	e01c      	b.n	80113be <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011384:	f107 030c 	add.w	r3, r7, #12
 8011388:	4618      	mov	r0, r3
 801138a:	f7ff fe4f 	bl	801102c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011390:	b29a      	uxth	r2, r3
 8011392:	683b      	ldr	r3, [r7, #0]
 8011394:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8011396:	2300      	movs	r3, #0
 8011398:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801139c:	e00f      	b.n	80113be <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801139e:	f107 030c 	add.w	r3, r7, #12
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7ff fe42 	bl	801102c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80113a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113aa:	0a5a      	lsrs	r2, r3, #9
 80113ac:	683b      	ldr	r3, [r7, #0]
 80113ae:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80113b0:	2300      	movs	r3, #0
 80113b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113b6:	e002      	b.n	80113be <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80113b8:	2304      	movs	r3, #4
 80113ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80113be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80113c2:	4618      	mov	r0, r3
 80113c4:	3730      	adds	r7, #48	; 0x30
 80113c6:	46bd      	mov	sp, r7
 80113c8:	bd80      	pop	{r7, pc}
 80113ca:	bf00      	nop
 80113cc:	2000008d 	.word	0x2000008d

080113d0 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80113d6:	2302      	movs	r3, #2
 80113d8:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80113da:	4b05      	ldr	r3, [pc, #20]	; (80113f0 <BSP_SD_WriteCpltCallback+0x20>)
 80113dc:	6818      	ldr	r0, [r3, #0]
 80113de:	1db9      	adds	r1, r7, #6
 80113e0:	2300      	movs	r3, #0
 80113e2:	2200      	movs	r2, #0
 80113e4:	f005 f8de 	bl	80165a4 <osMessageQueuePut>
#endif
}
 80113e8:	bf00      	nop
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	200003bc 	.word	0x200003bc

080113f4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80113fa:	2301      	movs	r3, #1
 80113fc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80113fe:	4b05      	ldr	r3, [pc, #20]	; (8011414 <BSP_SD_ReadCpltCallback+0x20>)
 8011400:	6818      	ldr	r0, [r3, #0]
 8011402:	1db9      	adds	r1, r7, #6
 8011404:	2300      	movs	r3, #0
 8011406:	2200      	movs	r2, #0
 8011408:	f005 f8cc 	bl	80165a4 <osMessageQueuePut>
#endif
}
 801140c:	bf00      	nop
 801140e:	3708      	adds	r7, #8
 8011410:	46bd      	mov	sp, r7
 8011412:	bd80      	pop	{r7, pc}
 8011414:	200003bc 	.word	0x200003bc

08011418 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
 8011420:	460b      	mov	r3, r1
 8011422:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011424:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8011428:	f009 f912 	bl	801a650 <malloc>
 801142c:	4603      	mov	r3, r0
 801142e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d105      	bne.n	8011442 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	2200      	movs	r2, #0
 801143a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 801143e:	2302      	movs	r3, #2
 8011440:	e066      	b.n	8011510 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	7c1b      	ldrb	r3, [r3, #16]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d119      	bne.n	8011486 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011452:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011456:	2202      	movs	r2, #2
 8011458:	2181      	movs	r1, #129	; 0x81
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f008 ff2b 	bl	801a2b6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	2201      	movs	r2, #1
 8011464:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011466:	f44f 7300 	mov.w	r3, #512	; 0x200
 801146a:	2202      	movs	r2, #2
 801146c:	2101      	movs	r1, #1
 801146e:	6878      	ldr	r0, [r7, #4]
 8011470:	f008 ff21 	bl	801a2b6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2201      	movs	r2, #1
 8011478:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	2210      	movs	r2, #16
 8011480:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011484:	e016      	b.n	80114b4 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011486:	2340      	movs	r3, #64	; 0x40
 8011488:	2202      	movs	r2, #2
 801148a:	2181      	movs	r1, #129	; 0x81
 801148c:	6878      	ldr	r0, [r7, #4]
 801148e:	f008 ff12 	bl	801a2b6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2201      	movs	r2, #1
 8011496:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8011498:	2340      	movs	r3, #64	; 0x40
 801149a:	2202      	movs	r2, #2
 801149c:	2101      	movs	r1, #1
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f008 ff09 	bl	801a2b6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2201      	movs	r2, #1
 80114a8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	2210      	movs	r2, #16
 80114b0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80114b4:	2308      	movs	r3, #8
 80114b6:	2203      	movs	r2, #3
 80114b8:	2182      	movs	r1, #130	; 0x82
 80114ba:	6878      	ldr	r0, [r7, #4]
 80114bc:	f008 fefb 	bl	801a2b6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2201      	movs	r2, #1
 80114c4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114ce:	681b      	ldr	r3, [r3, #0]
 80114d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	2200      	movs	r2, #0
 80114de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	7c1b      	ldrb	r3, [r3, #16]
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d109      	bne.n	80114fe <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80114f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114f4:	2101      	movs	r1, #1
 80114f6:	6878      	ldr	r0, [r7, #4]
 80114f8:	f008 ffcc 	bl	801a494 <USBD_LL_PrepareReceive>
 80114fc:	e007      	b.n	801150e <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011504:	2340      	movs	r3, #64	; 0x40
 8011506:	2101      	movs	r1, #1
 8011508:	6878      	ldr	r0, [r7, #4]
 801150a:	f008 ffc3 	bl	801a494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801150e:	2300      	movs	r3, #0
}
 8011510:	4618      	mov	r0, r3
 8011512:	3710      	adds	r7, #16
 8011514:	46bd      	mov	sp, r7
 8011516:	bd80      	pop	{r7, pc}

08011518 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011518:	b580      	push	{r7, lr}
 801151a:	b084      	sub	sp, #16
 801151c:	af00      	add	r7, sp, #0
 801151e:	6078      	str	r0, [r7, #4]
 8011520:	460b      	mov	r3, r1
 8011522:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011524:	2300      	movs	r3, #0
 8011526:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8011528:	2181      	movs	r1, #129	; 0x81
 801152a:	6878      	ldr	r0, [r7, #4]
 801152c:	f008 fee9 	bl	801a302 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	2200      	movs	r2, #0
 8011534:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8011536:	2101      	movs	r1, #1
 8011538:	6878      	ldr	r0, [r7, #4]
 801153a:	f008 fee2 	bl	801a302 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	2200      	movs	r2, #0
 8011542:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8011546:	2182      	movs	r1, #130	; 0x82
 8011548:	6878      	ldr	r0, [r7, #4]
 801154a:	f008 feda 	bl	801a302 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	2200      	movs	r2, #0
 8011552:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	2200      	movs	r2, #0
 801155a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00e      	beq.n	8011586 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801156e:	685b      	ldr	r3, [r3, #4]
 8011570:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011578:	4618      	mov	r0, r3
 801157a:	f009 f871 	bl	801a660 <free>
    pdev->pClassData = NULL;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8011586:	7bfb      	ldrb	r3, [r7, #15]
}
 8011588:	4618      	mov	r0, r3
 801158a:	3710      	adds	r7, #16
 801158c:	46bd      	mov	sp, r7
 801158e:	bd80      	pop	{r7, pc}

08011590 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b086      	sub	sp, #24
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
 8011598:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115a0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80115a2:	2300      	movs	r3, #0
 80115a4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80115a6:	2300      	movs	r3, #0
 80115a8:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80115aa:	2300      	movs	r3, #0
 80115ac:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80115ae:	683b      	ldr	r3, [r7, #0]
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d03a      	beq.n	8011630 <USBD_CDC_Setup+0xa0>
 80115ba:	2b20      	cmp	r3, #32
 80115bc:	f040 8097 	bne.w	80116ee <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	88db      	ldrh	r3, [r3, #6]
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	d029      	beq.n	801161c <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	b25b      	sxtb	r3, r3
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	da11      	bge.n	80115f6 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115d8:	689b      	ldr	r3, [r3, #8]
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80115de:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80115e0:	683a      	ldr	r2, [r7, #0]
 80115e2:	88d2      	ldrh	r2, [r2, #6]
 80115e4:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80115e6:	6939      	ldr	r1, [r7, #16]
 80115e8:	683b      	ldr	r3, [r7, #0]
 80115ea:	88db      	ldrh	r3, [r3, #6]
 80115ec:	461a      	mov	r2, r3
 80115ee:	6878      	ldr	r0, [r7, #4]
 80115f0:	f001 fac7 	bl	8012b82 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80115f4:	e082      	b.n	80116fc <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80115f6:	683b      	ldr	r3, [r7, #0]
 80115f8:	785a      	ldrb	r2, [r3, #1]
 80115fa:	693b      	ldr	r3, [r7, #16]
 80115fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	88db      	ldrh	r3, [r3, #6]
 8011604:	b2da      	uxtb	r2, r3
 8011606:	693b      	ldr	r3, [r7, #16]
 8011608:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 801160c:	6939      	ldr	r1, [r7, #16]
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	88db      	ldrh	r3, [r3, #6]
 8011612:	461a      	mov	r2, r3
 8011614:	6878      	ldr	r0, [r7, #4]
 8011616:	f001 fae0 	bl	8012bda <USBD_CtlPrepareRx>
    break;
 801161a:	e06f      	b.n	80116fc <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011622:	689b      	ldr	r3, [r3, #8]
 8011624:	683a      	ldr	r2, [r7, #0]
 8011626:	7850      	ldrb	r0, [r2, #1]
 8011628:	2200      	movs	r2, #0
 801162a:	6839      	ldr	r1, [r7, #0]
 801162c:	4798      	blx	r3
    break;
 801162e:	e065      	b.n	80116fc <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011630:	683b      	ldr	r3, [r7, #0]
 8011632:	785b      	ldrb	r3, [r3, #1]
 8011634:	2b0b      	cmp	r3, #11
 8011636:	d84f      	bhi.n	80116d8 <USBD_CDC_Setup+0x148>
 8011638:	a201      	add	r2, pc, #4	; (adr r2, 8011640 <USBD_CDC_Setup+0xb0>)
 801163a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801163e:	bf00      	nop
 8011640:	08011671 	.word	0x08011671
 8011644:	080116e7 	.word	0x080116e7
 8011648:	080116d9 	.word	0x080116d9
 801164c:	080116d9 	.word	0x080116d9
 8011650:	080116d9 	.word	0x080116d9
 8011654:	080116d9 	.word	0x080116d9
 8011658:	080116d9 	.word	0x080116d9
 801165c:	080116d9 	.word	0x080116d9
 8011660:	080116d9 	.word	0x080116d9
 8011664:	080116d9 	.word	0x080116d9
 8011668:	08011699 	.word	0x08011699
 801166c:	080116c1 	.word	0x080116c1
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011676:	2b03      	cmp	r3, #3
 8011678:	d107      	bne.n	801168a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801167a:	f107 030c 	add.w	r3, r7, #12
 801167e:	2202      	movs	r2, #2
 8011680:	4619      	mov	r1, r3
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f001 fa7d 	bl	8012b82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011688:	e030      	b.n	80116ec <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801168a:	6839      	ldr	r1, [r7, #0]
 801168c:	6878      	ldr	r0, [r7, #4]
 801168e:	f001 fa07 	bl	8012aa0 <USBD_CtlError>
        ret = USBD_FAIL;
 8011692:	2303      	movs	r3, #3
 8011694:	75fb      	strb	r3, [r7, #23]
      break;
 8011696:	e029      	b.n	80116ec <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801169e:	2b03      	cmp	r3, #3
 80116a0:	d107      	bne.n	80116b2 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80116a2:	f107 030f 	add.w	r3, r7, #15
 80116a6:	2201      	movs	r2, #1
 80116a8:	4619      	mov	r1, r3
 80116aa:	6878      	ldr	r0, [r7, #4]
 80116ac:	f001 fa69 	bl	8012b82 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80116b0:	e01c      	b.n	80116ec <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80116b2:	6839      	ldr	r1, [r7, #0]
 80116b4:	6878      	ldr	r0, [r7, #4]
 80116b6:	f001 f9f3 	bl	8012aa0 <USBD_CtlError>
        ret = USBD_FAIL;
 80116ba:	2303      	movs	r3, #3
 80116bc:	75fb      	strb	r3, [r7, #23]
      break;
 80116be:	e015      	b.n	80116ec <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116c6:	2b03      	cmp	r3, #3
 80116c8:	d00f      	beq.n	80116ea <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80116ca:	6839      	ldr	r1, [r7, #0]
 80116cc:	6878      	ldr	r0, [r7, #4]
 80116ce:	f001 f9e7 	bl	8012aa0 <USBD_CtlError>
        ret = USBD_FAIL;
 80116d2:	2303      	movs	r3, #3
 80116d4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80116d6:	e008      	b.n	80116ea <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80116d8:	6839      	ldr	r1, [r7, #0]
 80116da:	6878      	ldr	r0, [r7, #4]
 80116dc:	f001 f9e0 	bl	8012aa0 <USBD_CtlError>
      ret = USBD_FAIL;
 80116e0:	2303      	movs	r3, #3
 80116e2:	75fb      	strb	r3, [r7, #23]
      break;
 80116e4:	e002      	b.n	80116ec <USBD_CDC_Setup+0x15c>
      break;
 80116e6:	bf00      	nop
 80116e8:	e008      	b.n	80116fc <USBD_CDC_Setup+0x16c>
      break;
 80116ea:	bf00      	nop
    }
    break;
 80116ec:	e006      	b.n	80116fc <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80116ee:	6839      	ldr	r1, [r7, #0]
 80116f0:	6878      	ldr	r0, [r7, #4]
 80116f2:	f001 f9d5 	bl	8012aa0 <USBD_CtlError>
    ret = USBD_FAIL;
 80116f6:	2303      	movs	r3, #3
 80116f8:	75fb      	strb	r3, [r7, #23]
    break;
 80116fa:	bf00      	nop
  }

  return (uint8_t)ret;
 80116fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3718      	adds	r7, #24
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop

08011708 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b084      	sub	sp, #16
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	460b      	mov	r3, r1
 8011712:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801171a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011722:	2b00      	cmp	r3, #0
 8011724:	d101      	bne.n	801172a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011726:	2303      	movs	r3, #3
 8011728:	e049      	b.n	80117be <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011730:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011732:	78fa      	ldrb	r2, [r7, #3]
 8011734:	6879      	ldr	r1, [r7, #4]
 8011736:	4613      	mov	r3, r2
 8011738:	009b      	lsls	r3, r3, #2
 801173a:	4413      	add	r3, r2
 801173c:	009b      	lsls	r3, r3, #2
 801173e:	440b      	add	r3, r1
 8011740:	3318      	adds	r3, #24
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d029      	beq.n	801179c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8011748:	78fa      	ldrb	r2, [r7, #3]
 801174a:	6879      	ldr	r1, [r7, #4]
 801174c:	4613      	mov	r3, r2
 801174e:	009b      	lsls	r3, r3, #2
 8011750:	4413      	add	r3, r2
 8011752:	009b      	lsls	r3, r3, #2
 8011754:	440b      	add	r3, r1
 8011756:	3318      	adds	r3, #24
 8011758:	681a      	ldr	r2, [r3, #0]
 801175a:	78f9      	ldrb	r1, [r7, #3]
 801175c:	68f8      	ldr	r0, [r7, #12]
 801175e:	460b      	mov	r3, r1
 8011760:	00db      	lsls	r3, r3, #3
 8011762:	1a5b      	subs	r3, r3, r1
 8011764:	009b      	lsls	r3, r3, #2
 8011766:	4403      	add	r3, r0
 8011768:	3344      	adds	r3, #68	; 0x44
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	fbb2 f1f3 	udiv	r1, r2, r3
 8011770:	fb03 f301 	mul.w	r3, r3, r1
 8011774:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011776:	2b00      	cmp	r3, #0
 8011778:	d110      	bne.n	801179c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801177a:	78fa      	ldrb	r2, [r7, #3]
 801177c:	6879      	ldr	r1, [r7, #4]
 801177e:	4613      	mov	r3, r2
 8011780:	009b      	lsls	r3, r3, #2
 8011782:	4413      	add	r3, r2
 8011784:	009b      	lsls	r3, r3, #2
 8011786:	440b      	add	r3, r1
 8011788:	3318      	adds	r3, #24
 801178a:	2200      	movs	r2, #0
 801178c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801178e:	78f9      	ldrb	r1, [r7, #3]
 8011790:	2300      	movs	r3, #0
 8011792:	2200      	movs	r2, #0
 8011794:	6878      	ldr	r0, [r7, #4]
 8011796:	f008 fe5c 	bl	801a452 <USBD_LL_Transmit>
 801179a:	e00f      	b.n	80117bc <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 801179c:	68bb      	ldr	r3, [r7, #8]
 801179e:	2200      	movs	r2, #0
 80117a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80117aa:	691b      	ldr	r3, [r3, #16]
 80117ac:	68ba      	ldr	r2, [r7, #8]
 80117ae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80117b2:	68ba      	ldr	r2, [r7, #8]
 80117b4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80117b8:	78fa      	ldrb	r2, [r7, #3]
 80117ba:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80117bc:	2300      	movs	r3, #0
}
 80117be:	4618      	mov	r0, r3
 80117c0:	3710      	adds	r7, #16
 80117c2:	46bd      	mov	sp, r7
 80117c4:	bd80      	pop	{r7, pc}

080117c6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80117c6:	b580      	push	{r7, lr}
 80117c8:	b084      	sub	sp, #16
 80117ca:	af00      	add	r7, sp, #0
 80117cc:	6078      	str	r0, [r7, #4]
 80117ce:	460b      	mov	r3, r1
 80117d0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117d8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d101      	bne.n	80117e8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80117e4:	2303      	movs	r3, #3
 80117e6:	e015      	b.n	8011814 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80117e8:	78fb      	ldrb	r3, [r7, #3]
 80117ea:	4619      	mov	r1, r3
 80117ec:	6878      	ldr	r0, [r7, #4]
 80117ee:	f008 fe72 	bl	801a4d6 <USBD_LL_GetRxDataSize>
 80117f2:	4602      	mov	r2, r0
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	68fa      	ldr	r2, [r7, #12]
 8011804:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8011808:	68fa      	ldr	r2, [r7, #12]
 801180a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801180e:	4611      	mov	r1, r2
 8011810:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011812:	2300      	movs	r3, #0
}
 8011814:	4618      	mov	r0, r3
 8011816:	3710      	adds	r7, #16
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b084      	sub	sp, #16
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801182a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011832:	2b00      	cmp	r3, #0
 8011834:	d015      	beq.n	8011862 <USBD_CDC_EP0_RxReady+0x46>
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 801183c:	2bff      	cmp	r3, #255	; 0xff
 801183e:	d010      	beq.n	8011862 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011846:	689b      	ldr	r3, [r3, #8]
 8011848:	68fa      	ldr	r2, [r7, #12]
 801184a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 801184e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011850:	68fa      	ldr	r2, [r7, #12]
 8011852:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011856:	b292      	uxth	r2, r2
 8011858:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	22ff      	movs	r2, #255	; 0xff
 801185e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011862:	2300      	movs	r3, #0
}
 8011864:	4618      	mov	r0, r3
 8011866:	3710      	adds	r7, #16
 8011868:	46bd      	mov	sp, r7
 801186a:	bd80      	pop	{r7, pc}

0801186c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801186c:	b480      	push	{r7}
 801186e:	b083      	sub	sp, #12
 8011870:	af00      	add	r7, sp, #0
 8011872:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	2243      	movs	r2, #67	; 0x43
 8011878:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801187a:	4b03      	ldr	r3, [pc, #12]	; (8011888 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 801187c:	4618      	mov	r0, r3
 801187e:	370c      	adds	r7, #12
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	20000118 	.word	0x20000118

0801188c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 801188c:	b480      	push	{r7}
 801188e:	b083      	sub	sp, #12
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	2243      	movs	r2, #67	; 0x43
 8011898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801189a:	4b03      	ldr	r3, [pc, #12]	; (80118a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 801189c:	4618      	mov	r0, r3
 801189e:	370c      	adds	r7, #12
 80118a0:	46bd      	mov	sp, r7
 80118a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a6:	4770      	bx	lr
 80118a8:	200000d4 	.word	0x200000d4

080118ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80118ac:	b480      	push	{r7}
 80118ae:	b083      	sub	sp, #12
 80118b0:	af00      	add	r7, sp, #0
 80118b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	2243      	movs	r2, #67	; 0x43
 80118b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80118ba:	4b03      	ldr	r3, [pc, #12]	; (80118c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80118bc:	4618      	mov	r0, r3
 80118be:	370c      	adds	r7, #12
 80118c0:	46bd      	mov	sp, r7
 80118c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c6:	4770      	bx	lr
 80118c8:	2000015c 	.word	0x2000015c

080118cc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80118cc:	b480      	push	{r7}
 80118ce:	b083      	sub	sp, #12
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	220a      	movs	r2, #10
 80118d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80118da:	4b03      	ldr	r3, [pc, #12]	; (80118e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80118dc:	4618      	mov	r0, r3
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	20000090 	.word	0x20000090

080118ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
 80118f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	2b00      	cmp	r3, #0
 80118fa:	d101      	bne.n	8011900 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80118fc:	2303      	movs	r3, #3
 80118fe:	e004      	b.n	801190a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	683a      	ldr	r2, [r7, #0]
 8011904:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8011908:	2300      	movs	r3, #0
}
 801190a:	4618      	mov	r0, r3
 801190c:	370c      	adds	r7, #12
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr

08011916 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011916:	b480      	push	{r7}
 8011918:	b087      	sub	sp, #28
 801191a:	af00      	add	r7, sp, #0
 801191c:	60f8      	str	r0, [r7, #12]
 801191e:	60b9      	str	r1, [r7, #8]
 8011920:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011928:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	68ba      	ldr	r2, [r7, #8]
 801192e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011932:	697b      	ldr	r3, [r7, #20]
 8011934:	687a      	ldr	r2, [r7, #4]
 8011936:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801193a:	2300      	movs	r3, #0
}
 801193c:	4618      	mov	r0, r3
 801193e:	371c      	adds	r7, #28
 8011940:	46bd      	mov	sp, r7
 8011942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011946:	4770      	bx	lr

08011948 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011948:	b480      	push	{r7}
 801194a:	b085      	sub	sp, #20
 801194c:	af00      	add	r7, sp, #0
 801194e:	6078      	str	r0, [r7, #4]
 8011950:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011958:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	683a      	ldr	r2, [r7, #0]
 801195e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011962:	2300      	movs	r3, #0
}
 8011964:	4618      	mov	r0, r3
 8011966:	3714      	adds	r7, #20
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr

08011970 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b084      	sub	sp, #16
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801197e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011980:	2301      	movs	r3, #1
 8011982:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011984:	687b      	ldr	r3, [r7, #4]
 8011986:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801198a:	2b00      	cmp	r3, #0
 801198c:	d101      	bne.n	8011992 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801198e:	2303      	movs	r3, #3
 8011990:	e01a      	b.n	80119c8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011992:	68bb      	ldr	r3, [r7, #8]
 8011994:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011998:	2b00      	cmp	r3, #0
 801199a:	d114      	bne.n	80119c6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 801199c:	68bb      	ldr	r3, [r7, #8]
 801199e:	2201      	movs	r2, #1
 80119a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80119a4:	68bb      	ldr	r3, [r7, #8]
 80119a6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80119ae:	68bb      	ldr	r3, [r7, #8]
 80119b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80119b4:	68bb      	ldr	r3, [r7, #8]
 80119b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80119ba:	2181      	movs	r1, #129	; 0x81
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f008 fd48 	bl	801a452 <USBD_LL_Transmit>

    ret = USBD_OK;
 80119c2:	2300      	movs	r3, #0
 80119c4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80119c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80119c8:	4618      	mov	r0, r3
 80119ca:	3710      	adds	r7, #16
 80119cc:	46bd      	mov	sp, r7
 80119ce:	bd80      	pop	{r7, pc}

080119d0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80119d0:	b580      	push	{r7, lr}
 80119d2:	b084      	sub	sp, #16
 80119d4:	af00      	add	r7, sp, #0
 80119d6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119de:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d101      	bne.n	80119ee <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80119ea:	2303      	movs	r3, #3
 80119ec:	e016      	b.n	8011a1c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	7c1b      	ldrb	r3, [r3, #16]
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d109      	bne.n	8011a0a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80119f6:	68fb      	ldr	r3, [r7, #12]
 80119f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80119fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a00:	2101      	movs	r1, #1
 8011a02:	6878      	ldr	r0, [r7, #4]
 8011a04:	f008 fd46 	bl	801a494 <USBD_LL_PrepareReceive>
 8011a08:	e007      	b.n	8011a1a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a10:	2340      	movs	r3, #64	; 0x40
 8011a12:	2101      	movs	r1, #1
 8011a14:	6878      	ldr	r0, [r7, #4]
 8011a16:	f008 fd3d 	bl	801a494 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011a1a:	2300      	movs	r3, #0
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b086      	sub	sp, #24
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	60f8      	str	r0, [r7, #12]
 8011a2c:	60b9      	str	r1, [r7, #8]
 8011a2e:	4613      	mov	r3, r2
 8011a30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	d101      	bne.n	8011a3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011a38:	2303      	movs	r3, #3
 8011a3a:	e025      	b.n	8011a88 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d003      	beq.n	8011a4e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2200      	movs	r2, #0
 8011a4a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d003      	beq.n	8011a60 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	2200      	movs	r2, #0
 8011a5c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d003      	beq.n	8011a6e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	68ba      	ldr	r2, [r7, #8]
 8011a6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a6e:	68fb      	ldr	r3, [r7, #12]
 8011a70:	2201      	movs	r2, #1
 8011a72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	79fa      	ldrb	r2, [r7, #7]
 8011a7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011a7c:	68f8      	ldr	r0, [r7, #12]
 8011a7e:	f008 fbb3 	bl	801a1e8 <USBD_LL_Init>
 8011a82:	4603      	mov	r3, r0
 8011a84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3718      	adds	r7, #24
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}

08011a90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011a9e:	683b      	ldr	r3, [r7, #0]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d101      	bne.n	8011aa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011aa4:	2303      	movs	r3, #3
 8011aa6:	e010      	b.n	8011aca <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	683a      	ldr	r2, [r7, #0]
 8011aac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011ab0:	687b      	ldr	r3, [r7, #4]
 8011ab2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ab8:	f107 020e 	add.w	r2, r7, #14
 8011abc:	4610      	mov	r0, r2
 8011abe:	4798      	blx	r3
 8011ac0:	4602      	mov	r2, r0
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011ac8:	2300      	movs	r3, #0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3710      	adds	r7, #16
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}

08011ad2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011ad2:	b580      	push	{r7, lr}
 8011ad4:	b082      	sub	sp, #8
 8011ad6:	af00      	add	r7, sp, #0
 8011ad8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011ada:	6878      	ldr	r0, [r7, #4]
 8011adc:	f008 fbd0 	bl	801a280 <USBD_LL_Start>
 8011ae0:	4603      	mov	r3, r0
}
 8011ae2:	4618      	mov	r0, r3
 8011ae4:	3708      	adds	r7, #8
 8011ae6:	46bd      	mov	sp, r7
 8011ae8:	bd80      	pop	{r7, pc}

08011aea <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011aea:	b480      	push	{r7}
 8011aec:	b083      	sub	sp, #12
 8011aee:	af00      	add	r7, sp, #0
 8011af0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011af2:	2300      	movs	r3, #0
}
 8011af4:	4618      	mov	r0, r3
 8011af6:	370c      	adds	r7, #12
 8011af8:	46bd      	mov	sp, r7
 8011afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011afe:	4770      	bx	lr

08011b00 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b00:	b580      	push	{r7, lr}
 8011b02:	b084      	sub	sp, #16
 8011b04:	af00      	add	r7, sp, #0
 8011b06:	6078      	str	r0, [r7, #4]
 8011b08:	460b      	mov	r3, r1
 8011b0a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011b0c:	2303      	movs	r3, #3
 8011b0e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d009      	beq.n	8011b2e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011b1a:	687b      	ldr	r3, [r7, #4]
 8011b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	78fa      	ldrb	r2, [r7, #3]
 8011b24:	4611      	mov	r1, r2
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	4798      	blx	r3
 8011b2a:	4603      	mov	r3, r0
 8011b2c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3710      	adds	r7, #16
 8011b34:	46bd      	mov	sp, r7
 8011b36:	bd80      	pop	{r7, pc}

08011b38 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b082      	sub	sp, #8
 8011b3c:	af00      	add	r7, sp, #0
 8011b3e:	6078      	str	r0, [r7, #4]
 8011b40:	460b      	mov	r3, r1
 8011b42:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d007      	beq.n	8011b5e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b54:	685b      	ldr	r3, [r3, #4]
 8011b56:	78fa      	ldrb	r2, [r7, #3]
 8011b58:	4611      	mov	r1, r2
 8011b5a:	6878      	ldr	r0, [r7, #4]
 8011b5c:	4798      	blx	r3
  }

  return USBD_OK;
 8011b5e:	2300      	movs	r3, #0
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3708      	adds	r7, #8
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011b68:	b580      	push	{r7, lr}
 8011b6a:	b084      	sub	sp, #16
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b78:	6839      	ldr	r1, [r7, #0]
 8011b7a:	4618      	mov	r0, r3
 8011b7c:	f000 ff56 	bl	8012a2c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	2201      	movs	r2, #1
 8011b84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011b8e:	461a      	mov	r2, r3
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011b9c:	f003 031f 	and.w	r3, r3, #31
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d00e      	beq.n	8011bc2 <USBD_LL_SetupStage+0x5a>
 8011ba4:	2b01      	cmp	r3, #1
 8011ba6:	d302      	bcc.n	8011bae <USBD_LL_SetupStage+0x46>
 8011ba8:	2b02      	cmp	r3, #2
 8011baa:	d014      	beq.n	8011bd6 <USBD_LL_SetupStage+0x6e>
 8011bac:	e01d      	b.n	8011bea <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bb4:	4619      	mov	r1, r3
 8011bb6:	6878      	ldr	r0, [r7, #4]
 8011bb8:	f000 fa18 	bl	8011fec <USBD_StdDevReq>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8011bc0:	e020      	b.n	8011c04 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bc8:	4619      	mov	r1, r3
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 fa7c 	bl	80120c8 <USBD_StdItfReq>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8011bd4:	e016      	b.n	8011c04 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bdc:	4619      	mov	r1, r3
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 fab8 	bl	8012154 <USBD_StdEPReq>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73fb      	strb	r3, [r7, #15]
      break;
 8011be8:	e00c      	b.n	8011c04 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011bf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011bf4:	b2db      	uxtb	r3, r3
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f008 fba1 	bl	801a340 <USBD_LL_StallEP>
 8011bfe:	4603      	mov	r3, r0
 8011c00:	73fb      	strb	r3, [r7, #15]
      break;
 8011c02:	bf00      	nop
  }

  return ret;
 8011c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c06:	4618      	mov	r0, r3
 8011c08:	3710      	adds	r7, #16
 8011c0a:	46bd      	mov	sp, r7
 8011c0c:	bd80      	pop	{r7, pc}

08011c0e <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011c0e:	b580      	push	{r7, lr}
 8011c10:	b086      	sub	sp, #24
 8011c12:	af00      	add	r7, sp, #0
 8011c14:	60f8      	str	r0, [r7, #12]
 8011c16:	460b      	mov	r3, r1
 8011c18:	607a      	str	r2, [r7, #4]
 8011c1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011c1c:	7afb      	ldrb	r3, [r7, #11]
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d137      	bne.n	8011c92 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011c28:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c30:	2b03      	cmp	r3, #3
 8011c32:	d14a      	bne.n	8011cca <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c34:	693b      	ldr	r3, [r7, #16]
 8011c36:	689a      	ldr	r2, [r3, #8]
 8011c38:	693b      	ldr	r3, [r7, #16]
 8011c3a:	68db      	ldr	r3, [r3, #12]
 8011c3c:	429a      	cmp	r2, r3
 8011c3e:	d913      	bls.n	8011c68 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	689a      	ldr	r2, [r3, #8]
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	68db      	ldr	r3, [r3, #12]
 8011c48:	1ad2      	subs	r2, r2, r3
 8011c4a:	693b      	ldr	r3, [r7, #16]
 8011c4c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011c4e:	693b      	ldr	r3, [r7, #16]
 8011c50:	68da      	ldr	r2, [r3, #12]
 8011c52:	693b      	ldr	r3, [r7, #16]
 8011c54:	689b      	ldr	r3, [r3, #8]
 8011c56:	4293      	cmp	r3, r2
 8011c58:	bf28      	it	cs
 8011c5a:	4613      	movcs	r3, r2
 8011c5c:	461a      	mov	r2, r3
 8011c5e:	6879      	ldr	r1, [r7, #4]
 8011c60:	68f8      	ldr	r0, [r7, #12]
 8011c62:	f000 ffd7 	bl	8012c14 <USBD_CtlContinueRx>
 8011c66:	e030      	b.n	8011cca <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c6e:	691b      	ldr	r3, [r3, #16]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d00a      	beq.n	8011c8a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c74:	68fb      	ldr	r3, [r7, #12]
 8011c76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011c7a:	2b03      	cmp	r3, #3
 8011c7c:	d105      	bne.n	8011c8a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011c7e:	68fb      	ldr	r3, [r7, #12]
 8011c80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c84:	691b      	ldr	r3, [r3, #16]
 8011c86:	68f8      	ldr	r0, [r7, #12]
 8011c88:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011c8a:	68f8      	ldr	r0, [r7, #12]
 8011c8c:	f000 ffd3 	bl	8012c36 <USBD_CtlSendStatus>
 8011c90:	e01b      	b.n	8011cca <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c98:	699b      	ldr	r3, [r3, #24]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d013      	beq.n	8011cc6 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c9e:	68fb      	ldr	r3, [r7, #12]
 8011ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011ca4:	2b03      	cmp	r3, #3
 8011ca6:	d10e      	bne.n	8011cc6 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011ca8:	68fb      	ldr	r3, [r7, #12]
 8011caa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cae:	699b      	ldr	r3, [r3, #24]
 8011cb0:	7afa      	ldrb	r2, [r7, #11]
 8011cb2:	4611      	mov	r1, r2
 8011cb4:	68f8      	ldr	r0, [r7, #12]
 8011cb6:	4798      	blx	r3
 8011cb8:	4603      	mov	r3, r0
 8011cba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011cbc:	7dfb      	ldrb	r3, [r7, #23]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d003      	beq.n	8011cca <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011cc2:	7dfb      	ldrb	r3, [r7, #23]
 8011cc4:	e002      	b.n	8011ccc <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	e000      	b.n	8011ccc <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011cca:	2300      	movs	r3, #0
}
 8011ccc:	4618      	mov	r0, r3
 8011cce:	3718      	adds	r7, #24
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b086      	sub	sp, #24
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	60f8      	str	r0, [r7, #12]
 8011cdc:	460b      	mov	r3, r1
 8011cde:	607a      	str	r2, [r7, #4]
 8011ce0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011ce2:	7afb      	ldrb	r3, [r7, #11]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d16a      	bne.n	8011dbe <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011ce8:	68fb      	ldr	r3, [r7, #12]
 8011cea:	3314      	adds	r3, #20
 8011cec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011cee:	68fb      	ldr	r3, [r7, #12]
 8011cf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011cf4:	2b02      	cmp	r3, #2
 8011cf6:	d155      	bne.n	8011da4 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011cf8:	693b      	ldr	r3, [r7, #16]
 8011cfa:	689a      	ldr	r2, [r3, #8]
 8011cfc:	693b      	ldr	r3, [r7, #16]
 8011cfe:	68db      	ldr	r3, [r3, #12]
 8011d00:	429a      	cmp	r2, r3
 8011d02:	d914      	bls.n	8011d2e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d04:	693b      	ldr	r3, [r7, #16]
 8011d06:	689a      	ldr	r2, [r3, #8]
 8011d08:	693b      	ldr	r3, [r7, #16]
 8011d0a:	68db      	ldr	r3, [r3, #12]
 8011d0c:	1ad2      	subs	r2, r2, r3
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011d12:	693b      	ldr	r3, [r7, #16]
 8011d14:	689b      	ldr	r3, [r3, #8]
 8011d16:	461a      	mov	r2, r3
 8011d18:	6879      	ldr	r1, [r7, #4]
 8011d1a:	68f8      	ldr	r0, [r7, #12]
 8011d1c:	f000 ff4c 	bl	8012bb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d20:	2300      	movs	r3, #0
 8011d22:	2200      	movs	r2, #0
 8011d24:	2100      	movs	r1, #0
 8011d26:	68f8      	ldr	r0, [r7, #12]
 8011d28:	f008 fbb4 	bl	801a494 <USBD_LL_PrepareReceive>
 8011d2c:	e03a      	b.n	8011da4 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	68da      	ldr	r2, [r3, #12]
 8011d32:	693b      	ldr	r3, [r7, #16]
 8011d34:	689b      	ldr	r3, [r3, #8]
 8011d36:	429a      	cmp	r2, r3
 8011d38:	d11c      	bne.n	8011d74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011d3a:	693b      	ldr	r3, [r7, #16]
 8011d3c:	685a      	ldr	r2, [r3, #4]
 8011d3e:	693b      	ldr	r3, [r7, #16]
 8011d40:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011d42:	429a      	cmp	r2, r3
 8011d44:	d316      	bcc.n	8011d74 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	685a      	ldr	r2, [r3, #4]
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011d50:	429a      	cmp	r2, r3
 8011d52:	d20f      	bcs.n	8011d74 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011d54:	2200      	movs	r2, #0
 8011d56:	2100      	movs	r1, #0
 8011d58:	68f8      	ldr	r0, [r7, #12]
 8011d5a:	f000 ff2d 	bl	8012bb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2200      	movs	r2, #0
 8011d62:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d66:	2300      	movs	r3, #0
 8011d68:	2200      	movs	r2, #0
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f008 fb91 	bl	801a494 <USBD_LL_PrepareReceive>
 8011d72:	e017      	b.n	8011da4 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d7a:	68db      	ldr	r3, [r3, #12]
 8011d7c:	2b00      	cmp	r3, #0
 8011d7e:	d00a      	beq.n	8011d96 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d80:	68fb      	ldr	r3, [r7, #12]
 8011d82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011d86:	2b03      	cmp	r3, #3
 8011d88:	d105      	bne.n	8011d96 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d90:	68db      	ldr	r3, [r3, #12]
 8011d92:	68f8      	ldr	r0, [r7, #12]
 8011d94:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011d96:	2180      	movs	r1, #128	; 0x80
 8011d98:	68f8      	ldr	r0, [r7, #12]
 8011d9a:	f008 fad1 	bl	801a340 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011d9e:	68f8      	ldr	r0, [r7, #12]
 8011da0:	f000 ff5c 	bl	8012c5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011daa:	2b01      	cmp	r3, #1
 8011dac:	d123      	bne.n	8011df6 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011dae:	68f8      	ldr	r0, [r7, #12]
 8011db0:	f7ff fe9b 	bl	8011aea <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2200      	movs	r2, #0
 8011db8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011dbc:	e01b      	b.n	8011df6 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011dbe:	68fb      	ldr	r3, [r7, #12]
 8011dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dc4:	695b      	ldr	r3, [r3, #20]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d013      	beq.n	8011df2 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011dca:	68fb      	ldr	r3, [r7, #12]
 8011dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011dd0:	2b03      	cmp	r3, #3
 8011dd2:	d10e      	bne.n	8011df2 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dda:	695b      	ldr	r3, [r3, #20]
 8011ddc:	7afa      	ldrb	r2, [r7, #11]
 8011dde:	4611      	mov	r1, r2
 8011de0:	68f8      	ldr	r0, [r7, #12]
 8011de2:	4798      	blx	r3
 8011de4:	4603      	mov	r3, r0
 8011de6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011de8:	7dfb      	ldrb	r3, [r7, #23]
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d003      	beq.n	8011df6 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011dee:	7dfb      	ldrb	r3, [r7, #23]
 8011df0:	e002      	b.n	8011df8 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011df2:	2303      	movs	r3, #3
 8011df4:	e000      	b.n	8011df8 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011df6:	2300      	movs	r3, #0
}
 8011df8:	4618      	mov	r0, r3
 8011dfa:	3718      	adds	r7, #24
 8011dfc:	46bd      	mov	sp, r7
 8011dfe:	bd80      	pop	{r7, pc}

08011e00 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2201      	movs	r2, #1
 8011e0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011e1e:	687b      	ldr	r3, [r7, #4]
 8011e20:	2200      	movs	r2, #0
 8011e22:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d009      	beq.n	8011e44 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e36:	685b      	ldr	r3, [r3, #4]
 8011e38:	687a      	ldr	r2, [r7, #4]
 8011e3a:	6852      	ldr	r2, [r2, #4]
 8011e3c:	b2d2      	uxtb	r2, r2
 8011e3e:	4611      	mov	r1, r2
 8011e40:	6878      	ldr	r0, [r7, #4]
 8011e42:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e44:	2340      	movs	r3, #64	; 0x40
 8011e46:	2200      	movs	r2, #0
 8011e48:	2100      	movs	r1, #0
 8011e4a:	6878      	ldr	r0, [r7, #4]
 8011e4c:	f008 fa33 	bl	801a2b6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2201      	movs	r2, #1
 8011e54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2240      	movs	r2, #64	; 0x40
 8011e5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e60:	2340      	movs	r3, #64	; 0x40
 8011e62:	2200      	movs	r2, #0
 8011e64:	2180      	movs	r1, #128	; 0x80
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f008 fa25 	bl	801a2b6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2201      	movs	r2, #1
 8011e70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	2240      	movs	r2, #64	; 0x40
 8011e76:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011e78:	2300      	movs	r3, #0
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	3708      	adds	r7, #8
 8011e7e:	46bd      	mov	sp, r7
 8011e80:	bd80      	pop	{r7, pc}

08011e82 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011e82:	b480      	push	{r7}
 8011e84:	b083      	sub	sp, #12
 8011e86:	af00      	add	r7, sp, #0
 8011e88:	6078      	str	r0, [r7, #4]
 8011e8a:	460b      	mov	r3, r1
 8011e8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	78fa      	ldrb	r2, [r7, #3]
 8011e92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011e94:	2300      	movs	r3, #0
}
 8011e96:	4618      	mov	r0, r3
 8011e98:	370c      	adds	r7, #12
 8011e9a:	46bd      	mov	sp, r7
 8011e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea0:	4770      	bx	lr

08011ea2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011ea2:	b480      	push	{r7}
 8011ea4:	b083      	sub	sp, #12
 8011ea6:	af00      	add	r7, sp, #0
 8011ea8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011eaa:	687b      	ldr	r3, [r7, #4]
 8011eac:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011eb6:	687b      	ldr	r3, [r7, #4]
 8011eb8:	2204      	movs	r2, #4
 8011eba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011ebe:	2300      	movs	r3, #0
}
 8011ec0:	4618      	mov	r0, r3
 8011ec2:	370c      	adds	r7, #12
 8011ec4:	46bd      	mov	sp, r7
 8011ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eca:	4770      	bx	lr

08011ecc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011ecc:	b480      	push	{r7}
 8011ece:	b083      	sub	sp, #12
 8011ed0:	af00      	add	r7, sp, #0
 8011ed2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eda:	2b04      	cmp	r3, #4
 8011edc:	d105      	bne.n	8011eea <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011eea:	2300      	movs	r3, #0
}
 8011eec:	4618      	mov	r0, r3
 8011eee:	370c      	adds	r7, #12
 8011ef0:	46bd      	mov	sp, r7
 8011ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ef6:	4770      	bx	lr

08011ef8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011ef8:	b580      	push	{r7, lr}
 8011efa:	b082      	sub	sp, #8
 8011efc:	af00      	add	r7, sp, #0
 8011efe:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f06:	2b03      	cmp	r3, #3
 8011f08:	d10b      	bne.n	8011f22 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f10:	69db      	ldr	r3, [r3, #28]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d005      	beq.n	8011f22 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011f16:	687b      	ldr	r3, [r7, #4]
 8011f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f1c:	69db      	ldr	r3, [r3, #28]
 8011f1e:	6878      	ldr	r0, [r7, #4]
 8011f20:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011f22:	2300      	movs	r3, #0
}
 8011f24:	4618      	mov	r0, r3
 8011f26:	3708      	adds	r7, #8
 8011f28:	46bd      	mov	sp, r7
 8011f2a:	bd80      	pop	{r7, pc}

08011f2c <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b083      	sub	sp, #12
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	460b      	mov	r3, r1
 8011f36:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f38:	2300      	movs	r3, #0
}
 8011f3a:	4618      	mov	r0, r3
 8011f3c:	370c      	adds	r7, #12
 8011f3e:	46bd      	mov	sp, r7
 8011f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f44:	4770      	bx	lr

08011f46 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011f46:	b480      	push	{r7}
 8011f48:	b083      	sub	sp, #12
 8011f4a:	af00      	add	r7, sp, #0
 8011f4c:	6078      	str	r0, [r7, #4]
 8011f4e:	460b      	mov	r3, r1
 8011f50:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f52:	2300      	movs	r3, #0
}
 8011f54:	4618      	mov	r0, r3
 8011f56:	370c      	adds	r7, #12
 8011f58:	46bd      	mov	sp, r7
 8011f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f5e:	4770      	bx	lr

08011f60 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011f60:	b480      	push	{r7}
 8011f62:	b083      	sub	sp, #12
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011f68:	2300      	movs	r3, #0
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	370c      	adds	r7, #12
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f74:	4770      	bx	lr

08011f76 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b082      	sub	sp, #8
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2201      	movs	r2, #1
 8011f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d009      	beq.n	8011fa4 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f96:	685b      	ldr	r3, [r3, #4]
 8011f98:	687a      	ldr	r2, [r7, #4]
 8011f9a:	6852      	ldr	r2, [r2, #4]
 8011f9c:	b2d2      	uxtb	r2, r2
 8011f9e:	4611      	mov	r1, r2
 8011fa0:	6878      	ldr	r0, [r7, #4]
 8011fa2:	4798      	blx	r3
  }

  return USBD_OK;
 8011fa4:	2300      	movs	r3, #0
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3708      	adds	r7, #8
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}

08011fae <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011fae:	b480      	push	{r7}
 8011fb0:	b087      	sub	sp, #28
 8011fb2:	af00      	add	r7, sp, #0
 8011fb4:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011fba:	697b      	ldr	r3, [r7, #20]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011fc0:	697b      	ldr	r3, [r7, #20]
 8011fc2:	3301      	adds	r3, #1
 8011fc4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	781b      	ldrb	r3, [r3, #0]
 8011fca:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011fcc:	8a3b      	ldrh	r3, [r7, #16]
 8011fce:	021b      	lsls	r3, r3, #8
 8011fd0:	b21a      	sxth	r2, r3
 8011fd2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011fd6:	4313      	orrs	r3, r2
 8011fd8:	b21b      	sxth	r3, r3
 8011fda:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011fdc:	89fb      	ldrh	r3, [r7, #14]
}
 8011fde:	4618      	mov	r0, r3
 8011fe0:	371c      	adds	r7, #28
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fe8:	4770      	bx	lr
	...

08011fec <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b084      	sub	sp, #16
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
 8011ff4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012002:	2b20      	cmp	r3, #32
 8012004:	d004      	beq.n	8012010 <USBD_StdDevReq+0x24>
 8012006:	2b40      	cmp	r3, #64	; 0x40
 8012008:	d002      	beq.n	8012010 <USBD_StdDevReq+0x24>
 801200a:	2b00      	cmp	r3, #0
 801200c:	d00a      	beq.n	8012024 <USBD_StdDevReq+0x38>
 801200e:	e050      	b.n	80120b2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012016:	689b      	ldr	r3, [r3, #8]
 8012018:	6839      	ldr	r1, [r7, #0]
 801201a:	6878      	ldr	r0, [r7, #4]
 801201c:	4798      	blx	r3
 801201e:	4603      	mov	r3, r0
 8012020:	73fb      	strb	r3, [r7, #15]
    break;
 8012022:	e04b      	b.n	80120bc <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012024:	683b      	ldr	r3, [r7, #0]
 8012026:	785b      	ldrb	r3, [r3, #1]
 8012028:	2b09      	cmp	r3, #9
 801202a:	d83c      	bhi.n	80120a6 <USBD_StdDevReq+0xba>
 801202c:	a201      	add	r2, pc, #4	; (adr r2, 8012034 <USBD_StdDevReq+0x48>)
 801202e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012032:	bf00      	nop
 8012034:	08012089 	.word	0x08012089
 8012038:	0801209d 	.word	0x0801209d
 801203c:	080120a7 	.word	0x080120a7
 8012040:	08012093 	.word	0x08012093
 8012044:	080120a7 	.word	0x080120a7
 8012048:	08012067 	.word	0x08012067
 801204c:	0801205d 	.word	0x0801205d
 8012050:	080120a7 	.word	0x080120a7
 8012054:	0801207f 	.word	0x0801207f
 8012058:	08012071 	.word	0x08012071
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 801205c:	6839      	ldr	r1, [r7, #0]
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f000 f9ce 	bl	8012400 <USBD_GetDescriptor>
      break;
 8012064:	e024      	b.n	80120b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8012066:	6839      	ldr	r1, [r7, #0]
 8012068:	6878      	ldr	r0, [r7, #4]
 801206a:	f000 fb5d 	bl	8012728 <USBD_SetAddress>
      break;
 801206e:	e01f      	b.n	80120b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8012070:	6839      	ldr	r1, [r7, #0]
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f000 fb9a 	bl	80127ac <USBD_SetConfig>
 8012078:	4603      	mov	r3, r0
 801207a:	73fb      	strb	r3, [r7, #15]
      break;
 801207c:	e018      	b.n	80120b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 801207e:	6839      	ldr	r1, [r7, #0]
 8012080:	6878      	ldr	r0, [r7, #4]
 8012082:	f000 fc37 	bl	80128f4 <USBD_GetConfig>
      break;
 8012086:	e013      	b.n	80120b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8012088:	6839      	ldr	r1, [r7, #0]
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f000 fc66 	bl	801295c <USBD_GetStatus>
      break;
 8012090:	e00e      	b.n	80120b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 fc94 	bl	80129c2 <USBD_SetFeature>
      break;
 801209a:	e009      	b.n	80120b0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 801209c:	6839      	ldr	r1, [r7, #0]
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 fca3 	bl	80129ea <USBD_ClrFeature>
      break;
 80120a4:	e004      	b.n	80120b0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80120a6:	6839      	ldr	r1, [r7, #0]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f000 fcf9 	bl	8012aa0 <USBD_CtlError>
      break;
 80120ae:	bf00      	nop
    }
    break;
 80120b0:	e004      	b.n	80120bc <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80120b2:	6839      	ldr	r1, [r7, #0]
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f000 fcf3 	bl	8012aa0 <USBD_CtlError>
    break;
 80120ba:	bf00      	nop
  }

  return ret;
 80120bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3710      	adds	r7, #16
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop

080120c8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b084      	sub	sp, #16
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
 80120d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120d2:	2300      	movs	r3, #0
 80120d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80120de:	2b20      	cmp	r3, #32
 80120e0:	d003      	beq.n	80120ea <USBD_StdItfReq+0x22>
 80120e2:	2b40      	cmp	r3, #64	; 0x40
 80120e4:	d001      	beq.n	80120ea <USBD_StdItfReq+0x22>
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d12a      	bne.n	8012140 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80120f0:	3b01      	subs	r3, #1
 80120f2:	2b02      	cmp	r3, #2
 80120f4:	d81d      	bhi.n	8012132 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80120f6:	683b      	ldr	r3, [r7, #0]
 80120f8:	889b      	ldrh	r3, [r3, #4]
 80120fa:	b2db      	uxtb	r3, r3
 80120fc:	2b01      	cmp	r3, #1
 80120fe:	d813      	bhi.n	8012128 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012106:	689b      	ldr	r3, [r3, #8]
 8012108:	6839      	ldr	r1, [r7, #0]
 801210a:	6878      	ldr	r0, [r7, #4]
 801210c:	4798      	blx	r3
 801210e:	4603      	mov	r3, r0
 8012110:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8012112:	683b      	ldr	r3, [r7, #0]
 8012114:	88db      	ldrh	r3, [r3, #6]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d110      	bne.n	801213c <USBD_StdItfReq+0x74>
 801211a:	7bfb      	ldrb	r3, [r7, #15]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d10d      	bne.n	801213c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8012120:	6878      	ldr	r0, [r7, #4]
 8012122:	f000 fd88 	bl	8012c36 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8012126:	e009      	b.n	801213c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8012128:	6839      	ldr	r1, [r7, #0]
 801212a:	6878      	ldr	r0, [r7, #4]
 801212c:	f000 fcb8 	bl	8012aa0 <USBD_CtlError>
      break;
 8012130:	e004      	b.n	801213c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8012132:	6839      	ldr	r1, [r7, #0]
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f000 fcb3 	bl	8012aa0 <USBD_CtlError>
      break;
 801213a:	e000      	b.n	801213e <USBD_StdItfReq+0x76>
      break;
 801213c:	bf00      	nop
    }
    break;
 801213e:	e004      	b.n	801214a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8012140:	6839      	ldr	r1, [r7, #0]
 8012142:	6878      	ldr	r0, [r7, #4]
 8012144:	f000 fcac 	bl	8012aa0 <USBD_CtlError>
    break;
 8012148:	bf00      	nop
  }

  return ret;
 801214a:	7bfb      	ldrb	r3, [r7, #15]
}
 801214c:	4618      	mov	r0, r3
 801214e:	3710      	adds	r7, #16
 8012150:	46bd      	mov	sp, r7
 8012152:	bd80      	pop	{r7, pc}

08012154 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012154:	b580      	push	{r7, lr}
 8012156:	b084      	sub	sp, #16
 8012158:	af00      	add	r7, sp, #0
 801215a:	6078      	str	r0, [r7, #4]
 801215c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801215e:	2300      	movs	r3, #0
 8012160:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012162:	683b      	ldr	r3, [r7, #0]
 8012164:	889b      	ldrh	r3, [r3, #4]
 8012166:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012168:	683b      	ldr	r3, [r7, #0]
 801216a:	781b      	ldrb	r3, [r3, #0]
 801216c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012170:	2b20      	cmp	r3, #32
 8012172:	d004      	beq.n	801217e <USBD_StdEPReq+0x2a>
 8012174:	2b40      	cmp	r3, #64	; 0x40
 8012176:	d002      	beq.n	801217e <USBD_StdEPReq+0x2a>
 8012178:	2b00      	cmp	r3, #0
 801217a:	d00a      	beq.n	8012192 <USBD_StdEPReq+0x3e>
 801217c:	e135      	b.n	80123ea <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012184:	689b      	ldr	r3, [r3, #8]
 8012186:	6839      	ldr	r1, [r7, #0]
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	4798      	blx	r3
 801218c:	4603      	mov	r3, r0
 801218e:	73fb      	strb	r3, [r7, #15]
    break;
 8012190:	e130      	b.n	80123f4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012192:	683b      	ldr	r3, [r7, #0]
 8012194:	785b      	ldrb	r3, [r3, #1]
 8012196:	2b01      	cmp	r3, #1
 8012198:	d03e      	beq.n	8012218 <USBD_StdEPReq+0xc4>
 801219a:	2b03      	cmp	r3, #3
 801219c:	d002      	beq.n	80121a4 <USBD_StdEPReq+0x50>
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d077      	beq.n	8012292 <USBD_StdEPReq+0x13e>
 80121a2:	e11c      	b.n	80123de <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80121a4:	687b      	ldr	r3, [r7, #4]
 80121a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121aa:	2b02      	cmp	r3, #2
 80121ac:	d002      	beq.n	80121b4 <USBD_StdEPReq+0x60>
 80121ae:	2b03      	cmp	r3, #3
 80121b0:	d015      	beq.n	80121de <USBD_StdEPReq+0x8a>
 80121b2:	e02b      	b.n	801220c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121b4:	7bbb      	ldrb	r3, [r7, #14]
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d00c      	beq.n	80121d4 <USBD_StdEPReq+0x80>
 80121ba:	7bbb      	ldrb	r3, [r7, #14]
 80121bc:	2b80      	cmp	r3, #128	; 0x80
 80121be:	d009      	beq.n	80121d4 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80121c0:	7bbb      	ldrb	r3, [r7, #14]
 80121c2:	4619      	mov	r1, r3
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	f008 f8bb 	bl	801a340 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80121ca:	2180      	movs	r1, #128	; 0x80
 80121cc:	6878      	ldr	r0, [r7, #4]
 80121ce:	f008 f8b7 	bl	801a340 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80121d2:	e020      	b.n	8012216 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f000 fc62 	bl	8012aa0 <USBD_CtlError>
        break;
 80121dc:	e01b      	b.n	8012216 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	885b      	ldrh	r3, [r3, #2]
 80121e2:	2b00      	cmp	r3, #0
 80121e4:	d10e      	bne.n	8012204 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80121e6:	7bbb      	ldrb	r3, [r7, #14]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d00b      	beq.n	8012204 <USBD_StdEPReq+0xb0>
 80121ec:	7bbb      	ldrb	r3, [r7, #14]
 80121ee:	2b80      	cmp	r3, #128	; 0x80
 80121f0:	d008      	beq.n	8012204 <USBD_StdEPReq+0xb0>
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	88db      	ldrh	r3, [r3, #6]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d104      	bne.n	8012204 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80121fa:	7bbb      	ldrb	r3, [r7, #14]
 80121fc:	4619      	mov	r1, r3
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	f008 f89e 	bl	801a340 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8012204:	6878      	ldr	r0, [r7, #4]
 8012206:	f000 fd16 	bl	8012c36 <USBD_CtlSendStatus>

        break;
 801220a:	e004      	b.n	8012216 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 fc46 	bl	8012aa0 <USBD_CtlError>
        break;
 8012214:	bf00      	nop
      }
      break;
 8012216:	e0e7      	b.n	80123e8 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801221e:	2b02      	cmp	r3, #2
 8012220:	d002      	beq.n	8012228 <USBD_StdEPReq+0xd4>
 8012222:	2b03      	cmp	r3, #3
 8012224:	d015      	beq.n	8012252 <USBD_StdEPReq+0xfe>
 8012226:	e02d      	b.n	8012284 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012228:	7bbb      	ldrb	r3, [r7, #14]
 801222a:	2b00      	cmp	r3, #0
 801222c:	d00c      	beq.n	8012248 <USBD_StdEPReq+0xf4>
 801222e:	7bbb      	ldrb	r3, [r7, #14]
 8012230:	2b80      	cmp	r3, #128	; 0x80
 8012232:	d009      	beq.n	8012248 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012234:	7bbb      	ldrb	r3, [r7, #14]
 8012236:	4619      	mov	r1, r3
 8012238:	6878      	ldr	r0, [r7, #4]
 801223a:	f008 f881 	bl	801a340 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801223e:	2180      	movs	r1, #128	; 0x80
 8012240:	6878      	ldr	r0, [r7, #4]
 8012242:	f008 f87d 	bl	801a340 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8012246:	e023      	b.n	8012290 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8012248:	6839      	ldr	r1, [r7, #0]
 801224a:	6878      	ldr	r0, [r7, #4]
 801224c:	f000 fc28 	bl	8012aa0 <USBD_CtlError>
        break;
 8012250:	e01e      	b.n	8012290 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	885b      	ldrh	r3, [r3, #2]
 8012256:	2b00      	cmp	r3, #0
 8012258:	d119      	bne.n	801228e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801225a:	7bbb      	ldrb	r3, [r7, #14]
 801225c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012260:	2b00      	cmp	r3, #0
 8012262:	d004      	beq.n	801226e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012264:	7bbb      	ldrb	r3, [r7, #14]
 8012266:	4619      	mov	r1, r3
 8012268:	6878      	ldr	r0, [r7, #4]
 801226a:	f008 f888 	bl	801a37e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f000 fce1 	bl	8012c36 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801227a:	689b      	ldr	r3, [r3, #8]
 801227c:	6839      	ldr	r1, [r7, #0]
 801227e:	6878      	ldr	r0, [r7, #4]
 8012280:	4798      	blx	r3
        }
        break;
 8012282:	e004      	b.n	801228e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8012284:	6839      	ldr	r1, [r7, #0]
 8012286:	6878      	ldr	r0, [r7, #4]
 8012288:	f000 fc0a 	bl	8012aa0 <USBD_CtlError>
        break;
 801228c:	e000      	b.n	8012290 <USBD_StdEPReq+0x13c>
        break;
 801228e:	bf00      	nop
      }
      break;
 8012290:	e0aa      	b.n	80123e8 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012298:	2b02      	cmp	r3, #2
 801229a:	d002      	beq.n	80122a2 <USBD_StdEPReq+0x14e>
 801229c:	2b03      	cmp	r3, #3
 801229e:	d032      	beq.n	8012306 <USBD_StdEPReq+0x1b2>
 80122a0:	e097      	b.n	80123d2 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122a2:	7bbb      	ldrb	r3, [r7, #14]
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d007      	beq.n	80122b8 <USBD_StdEPReq+0x164>
 80122a8:	7bbb      	ldrb	r3, [r7, #14]
 80122aa:	2b80      	cmp	r3, #128	; 0x80
 80122ac:	d004      	beq.n	80122b8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80122ae:	6839      	ldr	r1, [r7, #0]
 80122b0:	6878      	ldr	r0, [r7, #4]
 80122b2:	f000 fbf5 	bl	8012aa0 <USBD_CtlError>
          break;
 80122b6:	e091      	b.n	80123dc <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122b8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	da0b      	bge.n	80122d8 <USBD_StdEPReq+0x184>
 80122c0:	7bbb      	ldrb	r3, [r7, #14]
 80122c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122c6:	4613      	mov	r3, r2
 80122c8:	009b      	lsls	r3, r3, #2
 80122ca:	4413      	add	r3, r2
 80122cc:	009b      	lsls	r3, r3, #2
 80122ce:	3310      	adds	r3, #16
 80122d0:	687a      	ldr	r2, [r7, #4]
 80122d2:	4413      	add	r3, r2
 80122d4:	3304      	adds	r3, #4
 80122d6:	e00b      	b.n	80122f0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80122d8:	7bbb      	ldrb	r3, [r7, #14]
 80122da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122de:	4613      	mov	r3, r2
 80122e0:	009b      	lsls	r3, r3, #2
 80122e2:	4413      	add	r3, r2
 80122e4:	009b      	lsls	r3, r3, #2
 80122e6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80122ea:	687a      	ldr	r2, [r7, #4]
 80122ec:	4413      	add	r3, r2
 80122ee:	3304      	adds	r3, #4
 80122f0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80122f2:	68bb      	ldr	r3, [r7, #8]
 80122f4:	2200      	movs	r2, #0
 80122f6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	2202      	movs	r2, #2
 80122fc:	4619      	mov	r1, r3
 80122fe:	6878      	ldr	r0, [r7, #4]
 8012300:	f000 fc3f 	bl	8012b82 <USBD_CtlSendData>
        break;
 8012304:	e06a      	b.n	80123dc <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8012306:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801230a:	2b00      	cmp	r3, #0
 801230c:	da11      	bge.n	8012332 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801230e:	7bbb      	ldrb	r3, [r7, #14]
 8012310:	f003 020f 	and.w	r2, r3, #15
 8012314:	6879      	ldr	r1, [r7, #4]
 8012316:	4613      	mov	r3, r2
 8012318:	009b      	lsls	r3, r3, #2
 801231a:	4413      	add	r3, r2
 801231c:	009b      	lsls	r3, r3, #2
 801231e:	440b      	add	r3, r1
 8012320:	3324      	adds	r3, #36	; 0x24
 8012322:	881b      	ldrh	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d117      	bne.n	8012358 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8012328:	6839      	ldr	r1, [r7, #0]
 801232a:	6878      	ldr	r0, [r7, #4]
 801232c:	f000 fbb8 	bl	8012aa0 <USBD_CtlError>
            break;
 8012330:	e054      	b.n	80123dc <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012332:	7bbb      	ldrb	r3, [r7, #14]
 8012334:	f003 020f 	and.w	r2, r3, #15
 8012338:	6879      	ldr	r1, [r7, #4]
 801233a:	4613      	mov	r3, r2
 801233c:	009b      	lsls	r3, r3, #2
 801233e:	4413      	add	r3, r2
 8012340:	009b      	lsls	r3, r3, #2
 8012342:	440b      	add	r3, r1
 8012344:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	2b00      	cmp	r3, #0
 801234c:	d104      	bne.n	8012358 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801234e:	6839      	ldr	r1, [r7, #0]
 8012350:	6878      	ldr	r0, [r7, #4]
 8012352:	f000 fba5 	bl	8012aa0 <USBD_CtlError>
            break;
 8012356:	e041      	b.n	80123dc <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012358:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801235c:	2b00      	cmp	r3, #0
 801235e:	da0b      	bge.n	8012378 <USBD_StdEPReq+0x224>
 8012360:	7bbb      	ldrb	r3, [r7, #14]
 8012362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012366:	4613      	mov	r3, r2
 8012368:	009b      	lsls	r3, r3, #2
 801236a:	4413      	add	r3, r2
 801236c:	009b      	lsls	r3, r3, #2
 801236e:	3310      	adds	r3, #16
 8012370:	687a      	ldr	r2, [r7, #4]
 8012372:	4413      	add	r3, r2
 8012374:	3304      	adds	r3, #4
 8012376:	e00b      	b.n	8012390 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8012378:	7bbb      	ldrb	r3, [r7, #14]
 801237a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801237e:	4613      	mov	r3, r2
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	4413      	add	r3, r2
 8012384:	009b      	lsls	r3, r3, #2
 8012386:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	4413      	add	r3, r2
 801238e:	3304      	adds	r3, #4
 8012390:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012392:	7bbb      	ldrb	r3, [r7, #14]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d002      	beq.n	801239e <USBD_StdEPReq+0x24a>
 8012398:	7bbb      	ldrb	r3, [r7, #14]
 801239a:	2b80      	cmp	r3, #128	; 0x80
 801239c:	d103      	bne.n	80123a6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 801239e:	68bb      	ldr	r3, [r7, #8]
 80123a0:	2200      	movs	r2, #0
 80123a2:	601a      	str	r2, [r3, #0]
 80123a4:	e00e      	b.n	80123c4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80123a6:	7bbb      	ldrb	r3, [r7, #14]
 80123a8:	4619      	mov	r1, r3
 80123aa:	6878      	ldr	r0, [r7, #4]
 80123ac:	f008 f806 	bl	801a3bc <USBD_LL_IsStallEP>
 80123b0:	4603      	mov	r3, r0
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d003      	beq.n	80123be <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	2201      	movs	r2, #1
 80123ba:	601a      	str	r2, [r3, #0]
 80123bc:	e002      	b.n	80123c4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80123be:	68bb      	ldr	r3, [r7, #8]
 80123c0:	2200      	movs	r2, #0
 80123c2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80123c4:	68bb      	ldr	r3, [r7, #8]
 80123c6:	2202      	movs	r2, #2
 80123c8:	4619      	mov	r1, r3
 80123ca:	6878      	ldr	r0, [r7, #4]
 80123cc:	f000 fbd9 	bl	8012b82 <USBD_CtlSendData>
          break;
 80123d0:	e004      	b.n	80123dc <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80123d2:	6839      	ldr	r1, [r7, #0]
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 fb63 	bl	8012aa0 <USBD_CtlError>
        break;
 80123da:	bf00      	nop
      }
      break;
 80123dc:	e004      	b.n	80123e8 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80123de:	6839      	ldr	r1, [r7, #0]
 80123e0:	6878      	ldr	r0, [r7, #4]
 80123e2:	f000 fb5d 	bl	8012aa0 <USBD_CtlError>
      break;
 80123e6:	bf00      	nop
    }
    break;
 80123e8:	e004      	b.n	80123f4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80123ea:	6839      	ldr	r1, [r7, #0]
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f000 fb57 	bl	8012aa0 <USBD_CtlError>
    break;
 80123f2:	bf00      	nop
  }

  return ret;
 80123f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
	...

08012400 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012400:	b580      	push	{r7, lr}
 8012402:	b084      	sub	sp, #16
 8012404:	af00      	add	r7, sp, #0
 8012406:	6078      	str	r0, [r7, #4]
 8012408:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801240a:	2300      	movs	r3, #0
 801240c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801240e:	2300      	movs	r3, #0
 8012410:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012412:	2300      	movs	r3, #0
 8012414:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	885b      	ldrh	r3, [r3, #2]
 801241a:	0a1b      	lsrs	r3, r3, #8
 801241c:	b29b      	uxth	r3, r3
 801241e:	3b01      	subs	r3, #1
 8012420:	2b0e      	cmp	r3, #14
 8012422:	f200 8152 	bhi.w	80126ca <USBD_GetDescriptor+0x2ca>
 8012426:	a201      	add	r2, pc, #4	; (adr r2, 801242c <USBD_GetDescriptor+0x2c>)
 8012428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801242c:	0801249d 	.word	0x0801249d
 8012430:	080124b5 	.word	0x080124b5
 8012434:	080124f5 	.word	0x080124f5
 8012438:	080126cb 	.word	0x080126cb
 801243c:	080126cb 	.word	0x080126cb
 8012440:	0801266b 	.word	0x0801266b
 8012444:	08012697 	.word	0x08012697
 8012448:	080126cb 	.word	0x080126cb
 801244c:	080126cb 	.word	0x080126cb
 8012450:	080126cb 	.word	0x080126cb
 8012454:	080126cb 	.word	0x080126cb
 8012458:	080126cb 	.word	0x080126cb
 801245c:	080126cb 	.word	0x080126cb
 8012460:	080126cb 	.word	0x080126cb
 8012464:	08012469 	.word	0x08012469
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801246e:	69db      	ldr	r3, [r3, #28]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d00b      	beq.n	801248c <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801247a:	69db      	ldr	r3, [r3, #28]
 801247c:	687a      	ldr	r2, [r7, #4]
 801247e:	7c12      	ldrb	r2, [r2, #16]
 8012480:	f107 0108 	add.w	r1, r7, #8
 8012484:	4610      	mov	r0, r2
 8012486:	4798      	blx	r3
 8012488:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801248a:	e126      	b.n	80126da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 801248c:	6839      	ldr	r1, [r7, #0]
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f000 fb06 	bl	8012aa0 <USBD_CtlError>
      err++;
 8012494:	7afb      	ldrb	r3, [r7, #11]
 8012496:	3301      	adds	r3, #1
 8012498:	72fb      	strb	r3, [r7, #11]
    break;
 801249a:	e11e      	b.n	80126da <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	687a      	ldr	r2, [r7, #4]
 80124a6:	7c12      	ldrb	r2, [r2, #16]
 80124a8:	f107 0108 	add.w	r1, r7, #8
 80124ac:	4610      	mov	r0, r2
 80124ae:	4798      	blx	r3
 80124b0:	60f8      	str	r0, [r7, #12]
    break;
 80124b2:	e112      	b.n	80126da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	7c1b      	ldrb	r3, [r3, #16]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d10d      	bne.n	80124d8 <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124c4:	f107 0208 	add.w	r2, r7, #8
 80124c8:	4610      	mov	r0, r2
 80124ca:	4798      	blx	r3
 80124cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	3301      	adds	r3, #1
 80124d2:	2202      	movs	r2, #2
 80124d4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80124d6:	e100      	b.n	80126da <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124e0:	f107 0208 	add.w	r2, r7, #8
 80124e4:	4610      	mov	r0, r2
 80124e6:	4798      	blx	r3
 80124e8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	3301      	adds	r3, #1
 80124ee:	2202      	movs	r2, #2
 80124f0:	701a      	strb	r2, [r3, #0]
    break;
 80124f2:	e0f2      	b.n	80126da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80124f4:	683b      	ldr	r3, [r7, #0]
 80124f6:	885b      	ldrh	r3, [r3, #2]
 80124f8:	b2db      	uxtb	r3, r3
 80124fa:	2b05      	cmp	r3, #5
 80124fc:	f200 80ac 	bhi.w	8012658 <USBD_GetDescriptor+0x258>
 8012500:	a201      	add	r2, pc, #4	; (adr r2, 8012508 <USBD_GetDescriptor+0x108>)
 8012502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012506:	bf00      	nop
 8012508:	08012521 	.word	0x08012521
 801250c:	08012555 	.word	0x08012555
 8012510:	08012589 	.word	0x08012589
 8012514:	080125bd 	.word	0x080125bd
 8012518:	080125f1 	.word	0x080125f1
 801251c:	08012625 	.word	0x08012625
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012526:	685b      	ldr	r3, [r3, #4]
 8012528:	2b00      	cmp	r3, #0
 801252a:	d00b      	beq.n	8012544 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012532:	685b      	ldr	r3, [r3, #4]
 8012534:	687a      	ldr	r2, [r7, #4]
 8012536:	7c12      	ldrb	r2, [r2, #16]
 8012538:	f107 0108 	add.w	r1, r7, #8
 801253c:	4610      	mov	r0, r2
 801253e:	4798      	blx	r3
 8012540:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012542:	e091      	b.n	8012668 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012544:	6839      	ldr	r1, [r7, #0]
 8012546:	6878      	ldr	r0, [r7, #4]
 8012548:	f000 faaa 	bl	8012aa0 <USBD_CtlError>
        err++;
 801254c:	7afb      	ldrb	r3, [r7, #11]
 801254e:	3301      	adds	r3, #1
 8012550:	72fb      	strb	r3, [r7, #11]
      break;
 8012552:	e089      	b.n	8012668 <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d00b      	beq.n	8012578 <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012566:	689b      	ldr	r3, [r3, #8]
 8012568:	687a      	ldr	r2, [r7, #4]
 801256a:	7c12      	ldrb	r2, [r2, #16]
 801256c:	f107 0108 	add.w	r1, r7, #8
 8012570:	4610      	mov	r0, r2
 8012572:	4798      	blx	r3
 8012574:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012576:	e077      	b.n	8012668 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	f000 fa90 	bl	8012aa0 <USBD_CtlError>
        err++;
 8012580:	7afb      	ldrb	r3, [r7, #11]
 8012582:	3301      	adds	r3, #1
 8012584:	72fb      	strb	r3, [r7, #11]
      break;
 8012586:	e06f      	b.n	8012668 <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801258e:	68db      	ldr	r3, [r3, #12]
 8012590:	2b00      	cmp	r3, #0
 8012592:	d00b      	beq.n	80125ac <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	687a      	ldr	r2, [r7, #4]
 801259e:	7c12      	ldrb	r2, [r2, #16]
 80125a0:	f107 0108 	add.w	r1, r7, #8
 80125a4:	4610      	mov	r0, r2
 80125a6:	4798      	blx	r3
 80125a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125aa:	e05d      	b.n	8012668 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80125ac:	6839      	ldr	r1, [r7, #0]
 80125ae:	6878      	ldr	r0, [r7, #4]
 80125b0:	f000 fa76 	bl	8012aa0 <USBD_CtlError>
        err++;
 80125b4:	7afb      	ldrb	r3, [r7, #11]
 80125b6:	3301      	adds	r3, #1
 80125b8:	72fb      	strb	r3, [r7, #11]
      break;
 80125ba:	e055      	b.n	8012668 <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125c2:	691b      	ldr	r3, [r3, #16]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d00b      	beq.n	80125e0 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ce:	691b      	ldr	r3, [r3, #16]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	7c12      	ldrb	r2, [r2, #16]
 80125d4:	f107 0108 	add.w	r1, r7, #8
 80125d8:	4610      	mov	r0, r2
 80125da:	4798      	blx	r3
 80125dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125de:	e043      	b.n	8012668 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80125e0:	6839      	ldr	r1, [r7, #0]
 80125e2:	6878      	ldr	r0, [r7, #4]
 80125e4:	f000 fa5c 	bl	8012aa0 <USBD_CtlError>
        err++;
 80125e8:	7afb      	ldrb	r3, [r7, #11]
 80125ea:	3301      	adds	r3, #1
 80125ec:	72fb      	strb	r3, [r7, #11]
      break;
 80125ee:	e03b      	b.n	8012668 <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125f6:	695b      	ldr	r3, [r3, #20]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00b      	beq.n	8012614 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012602:	695b      	ldr	r3, [r3, #20]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	7c12      	ldrb	r2, [r2, #16]
 8012608:	f107 0108 	add.w	r1, r7, #8
 801260c:	4610      	mov	r0, r2
 801260e:	4798      	blx	r3
 8012610:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012612:	e029      	b.n	8012668 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012614:	6839      	ldr	r1, [r7, #0]
 8012616:	6878      	ldr	r0, [r7, #4]
 8012618:	f000 fa42 	bl	8012aa0 <USBD_CtlError>
        err++;
 801261c:	7afb      	ldrb	r3, [r7, #11]
 801261e:	3301      	adds	r3, #1
 8012620:	72fb      	strb	r3, [r7, #11]
      break;
 8012622:	e021      	b.n	8012668 <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801262a:	699b      	ldr	r3, [r3, #24]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d00b      	beq.n	8012648 <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012636:	699b      	ldr	r3, [r3, #24]
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	7c12      	ldrb	r2, [r2, #16]
 801263c:	f107 0108 	add.w	r1, r7, #8
 8012640:	4610      	mov	r0, r2
 8012642:	4798      	blx	r3
 8012644:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012646:	e00f      	b.n	8012668 <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012648:	6839      	ldr	r1, [r7, #0]
 801264a:	6878      	ldr	r0, [r7, #4]
 801264c:	f000 fa28 	bl	8012aa0 <USBD_CtlError>
        err++;
 8012650:	7afb      	ldrb	r3, [r7, #11]
 8012652:	3301      	adds	r3, #1
 8012654:	72fb      	strb	r3, [r7, #11]
      break;
 8012656:	e007      	b.n	8012668 <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8012658:	6839      	ldr	r1, [r7, #0]
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f000 fa20 	bl	8012aa0 <USBD_CtlError>
      err++;
 8012660:	7afb      	ldrb	r3, [r7, #11]
 8012662:	3301      	adds	r3, #1
 8012664:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8012666:	bf00      	nop
    }
    break;
 8012668:	e037      	b.n	80126da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	7c1b      	ldrb	r3, [r3, #16]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d109      	bne.n	8012686 <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801267a:	f107 0208 	add.w	r2, r7, #8
 801267e:	4610      	mov	r0, r2
 8012680:	4798      	blx	r3
 8012682:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012684:	e029      	b.n	80126da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f000 fa09 	bl	8012aa0 <USBD_CtlError>
      err++;
 801268e:	7afb      	ldrb	r3, [r7, #11]
 8012690:	3301      	adds	r3, #1
 8012692:	72fb      	strb	r3, [r7, #11]
    break;
 8012694:	e021      	b.n	80126da <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	7c1b      	ldrb	r3, [r3, #16]
 801269a:	2b00      	cmp	r3, #0
 801269c:	d10d      	bne.n	80126ba <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 801269e:	687b      	ldr	r3, [r7, #4]
 80126a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126a6:	f107 0208 	add.w	r2, r7, #8
 80126aa:	4610      	mov	r0, r2
 80126ac:	4798      	blx	r3
 80126ae:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	3301      	adds	r3, #1
 80126b4:	2207      	movs	r2, #7
 80126b6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80126b8:	e00f      	b.n	80126da <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80126ba:	6839      	ldr	r1, [r7, #0]
 80126bc:	6878      	ldr	r0, [r7, #4]
 80126be:	f000 f9ef 	bl	8012aa0 <USBD_CtlError>
      err++;
 80126c2:	7afb      	ldrb	r3, [r7, #11]
 80126c4:	3301      	adds	r3, #1
 80126c6:	72fb      	strb	r3, [r7, #11]
    break;
 80126c8:	e007      	b.n	80126da <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80126ca:	6839      	ldr	r1, [r7, #0]
 80126cc:	6878      	ldr	r0, [r7, #4]
 80126ce:	f000 f9e7 	bl	8012aa0 <USBD_CtlError>
    err++;
 80126d2:	7afb      	ldrb	r3, [r7, #11]
 80126d4:	3301      	adds	r3, #1
 80126d6:	72fb      	strb	r3, [r7, #11]
    break;
 80126d8:	bf00      	nop
  }

  if (err != 0U)
 80126da:	7afb      	ldrb	r3, [r7, #11]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d11e      	bne.n	801271e <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80126e0:	683b      	ldr	r3, [r7, #0]
 80126e2:	88db      	ldrh	r3, [r3, #6]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d016      	beq.n	8012716 <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80126e8:	893b      	ldrh	r3, [r7, #8]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00e      	beq.n	801270c <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80126ee:	683b      	ldr	r3, [r7, #0]
 80126f0:	88da      	ldrh	r2, [r3, #6]
 80126f2:	893b      	ldrh	r3, [r7, #8]
 80126f4:	4293      	cmp	r3, r2
 80126f6:	bf28      	it	cs
 80126f8:	4613      	movcs	r3, r2
 80126fa:	b29b      	uxth	r3, r3
 80126fc:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80126fe:	893b      	ldrh	r3, [r7, #8]
 8012700:	461a      	mov	r2, r3
 8012702:	68f9      	ldr	r1, [r7, #12]
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f000 fa3c 	bl	8012b82 <USBD_CtlSendData>
 801270a:	e009      	b.n	8012720 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 801270c:	6839      	ldr	r1, [r7, #0]
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f000 f9c6 	bl	8012aa0 <USBD_CtlError>
 8012714:	e004      	b.n	8012720 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8012716:	6878      	ldr	r0, [r7, #4]
 8012718:	f000 fa8d 	bl	8012c36 <USBD_CtlSendStatus>
 801271c:	e000      	b.n	8012720 <USBD_GetDescriptor+0x320>
    return;
 801271e:	bf00      	nop
    }
  }
}
 8012720:	3710      	adds	r7, #16
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}
 8012726:	bf00      	nop

08012728 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b084      	sub	sp, #16
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
 8012730:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012732:	683b      	ldr	r3, [r7, #0]
 8012734:	889b      	ldrh	r3, [r3, #4]
 8012736:	2b00      	cmp	r3, #0
 8012738:	d130      	bne.n	801279c <USBD_SetAddress+0x74>
 801273a:	683b      	ldr	r3, [r7, #0]
 801273c:	88db      	ldrh	r3, [r3, #6]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d12c      	bne.n	801279c <USBD_SetAddress+0x74>
 8012742:	683b      	ldr	r3, [r7, #0]
 8012744:	885b      	ldrh	r3, [r3, #2]
 8012746:	2b7f      	cmp	r3, #127	; 0x7f
 8012748:	d828      	bhi.n	801279c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801274a:	683b      	ldr	r3, [r7, #0]
 801274c:	885b      	ldrh	r3, [r3, #2]
 801274e:	b2db      	uxtb	r3, r3
 8012750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012754:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801275c:	2b03      	cmp	r3, #3
 801275e:	d104      	bne.n	801276a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012760:	6839      	ldr	r1, [r7, #0]
 8012762:	6878      	ldr	r0, [r7, #4]
 8012764:	f000 f99c 	bl	8012aa0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012768:	e01c      	b.n	80127a4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	7bfa      	ldrb	r2, [r7, #15]
 801276e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012772:	7bfb      	ldrb	r3, [r7, #15]
 8012774:	4619      	mov	r1, r3
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f007 fe4c 	bl	801a414 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801277c:	6878      	ldr	r0, [r7, #4]
 801277e:	f000 fa5a 	bl	8012c36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012782:	7bfb      	ldrb	r3, [r7, #15]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d004      	beq.n	8012792 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	2202      	movs	r2, #2
 801278c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012790:	e008      	b.n	80127a4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	2201      	movs	r2, #1
 8012796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801279a:	e003      	b.n	80127a4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801279c:	6839      	ldr	r1, [r7, #0]
 801279e:	6878      	ldr	r0, [r7, #4]
 80127a0:	f000 f97e 	bl	8012aa0 <USBD_CtlError>
  }
}
 80127a4:	bf00      	nop
 80127a6:	3710      	adds	r7, #16
 80127a8:	46bd      	mov	sp, r7
 80127aa:	bd80      	pop	{r7, pc}

080127ac <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80127b6:	2300      	movs	r3, #0
 80127b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	885b      	ldrh	r3, [r3, #2]
 80127be:	b2da      	uxtb	r2, r3
 80127c0:	4b4b      	ldr	r3, [pc, #300]	; (80128f0 <USBD_SetConfig+0x144>)
 80127c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127c4:	4b4a      	ldr	r3, [pc, #296]	; (80128f0 <USBD_SetConfig+0x144>)
 80127c6:	781b      	ldrb	r3, [r3, #0]
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d905      	bls.n	80127d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80127cc:	6839      	ldr	r1, [r7, #0]
 80127ce:	6878      	ldr	r0, [r7, #4]
 80127d0:	f000 f966 	bl	8012aa0 <USBD_CtlError>
    return USBD_FAIL;
 80127d4:	2303      	movs	r3, #3
 80127d6:	e087      	b.n	80128e8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80127d8:	687b      	ldr	r3, [r7, #4]
 80127da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127de:	2b02      	cmp	r3, #2
 80127e0:	d002      	beq.n	80127e8 <USBD_SetConfig+0x3c>
 80127e2:	2b03      	cmp	r3, #3
 80127e4:	d025      	beq.n	8012832 <USBD_SetConfig+0x86>
 80127e6:	e071      	b.n	80128cc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80127e8:	4b41      	ldr	r3, [pc, #260]	; (80128f0 <USBD_SetConfig+0x144>)
 80127ea:	781b      	ldrb	r3, [r3, #0]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d01c      	beq.n	801282a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80127f0:	4b3f      	ldr	r3, [pc, #252]	; (80128f0 <USBD_SetConfig+0x144>)
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	461a      	mov	r2, r3
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80127fa:	4b3d      	ldr	r3, [pc, #244]	; (80128f0 <USBD_SetConfig+0x144>)
 80127fc:	781b      	ldrb	r3, [r3, #0]
 80127fe:	4619      	mov	r1, r3
 8012800:	6878      	ldr	r0, [r7, #4]
 8012802:	f7ff f97d 	bl	8011b00 <USBD_SetClassConfig>
 8012806:	4603      	mov	r3, r0
 8012808:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801280a:	7bfb      	ldrb	r3, [r7, #15]
 801280c:	2b00      	cmp	r3, #0
 801280e:	d004      	beq.n	801281a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012810:	6839      	ldr	r1, [r7, #0]
 8012812:	6878      	ldr	r0, [r7, #4]
 8012814:	f000 f944 	bl	8012aa0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012818:	e065      	b.n	80128e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 fa0b 	bl	8012c36 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2203      	movs	r2, #3
 8012824:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8012828:	e05d      	b.n	80128e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801282a:	6878      	ldr	r0, [r7, #4]
 801282c:	f000 fa03 	bl	8012c36 <USBD_CtlSendStatus>
    break;
 8012830:	e059      	b.n	80128e6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012832:	4b2f      	ldr	r3, [pc, #188]	; (80128f0 <USBD_SetConfig+0x144>)
 8012834:	781b      	ldrb	r3, [r3, #0]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d112      	bne.n	8012860 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801283a:	687b      	ldr	r3, [r7, #4]
 801283c:	2202      	movs	r2, #2
 801283e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012842:	4b2b      	ldr	r3, [pc, #172]	; (80128f0 <USBD_SetConfig+0x144>)
 8012844:	781b      	ldrb	r3, [r3, #0]
 8012846:	461a      	mov	r2, r3
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801284c:	4b28      	ldr	r3, [pc, #160]	; (80128f0 <USBD_SetConfig+0x144>)
 801284e:	781b      	ldrb	r3, [r3, #0]
 8012850:	4619      	mov	r1, r3
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	f7ff f970 	bl	8011b38 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f000 f9ec 	bl	8012c36 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801285e:	e042      	b.n	80128e6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012860:	4b23      	ldr	r3, [pc, #140]	; (80128f0 <USBD_SetConfig+0x144>)
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	461a      	mov	r2, r3
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	685b      	ldr	r3, [r3, #4]
 801286a:	429a      	cmp	r2, r3
 801286c:	d02a      	beq.n	80128c4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	685b      	ldr	r3, [r3, #4]
 8012872:	b2db      	uxtb	r3, r3
 8012874:	4619      	mov	r1, r3
 8012876:	6878      	ldr	r0, [r7, #4]
 8012878:	f7ff f95e 	bl	8011b38 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 801287c:	4b1c      	ldr	r3, [pc, #112]	; (80128f0 <USBD_SetConfig+0x144>)
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	461a      	mov	r2, r3
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8012886:	4b1a      	ldr	r3, [pc, #104]	; (80128f0 <USBD_SetConfig+0x144>)
 8012888:	781b      	ldrb	r3, [r3, #0]
 801288a:	4619      	mov	r1, r3
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f7ff f937 	bl	8011b00 <USBD_SetClassConfig>
 8012892:	4603      	mov	r3, r0
 8012894:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8012896:	7bfb      	ldrb	r3, [r7, #15]
 8012898:	2b00      	cmp	r3, #0
 801289a:	d00f      	beq.n	80128bc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 801289c:	6839      	ldr	r1, [r7, #0]
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 f8fe 	bl	8012aa0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	b2db      	uxtb	r3, r3
 80128aa:	4619      	mov	r1, r3
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff f943 	bl	8011b38 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2202      	movs	r2, #2
 80128b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80128ba:	e014      	b.n	80128e6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80128bc:	6878      	ldr	r0, [r7, #4]
 80128be:	f000 f9ba 	bl	8012c36 <USBD_CtlSendStatus>
    break;
 80128c2:	e010      	b.n	80128e6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80128c4:	6878      	ldr	r0, [r7, #4]
 80128c6:	f000 f9b6 	bl	8012c36 <USBD_CtlSendStatus>
    break;
 80128ca:	e00c      	b.n	80128e6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80128cc:	6839      	ldr	r1, [r7, #0]
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f000 f8e6 	bl	8012aa0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80128d4:	4b06      	ldr	r3, [pc, #24]	; (80128f0 <USBD_SetConfig+0x144>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	4619      	mov	r1, r3
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f7ff f92c 	bl	8011b38 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80128e0:	2303      	movs	r3, #3
 80128e2:	73fb      	strb	r3, [r7, #15]
    break;
 80128e4:	bf00      	nop
  }

  return ret;
 80128e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80128e8:	4618      	mov	r0, r3
 80128ea:	3710      	adds	r7, #16
 80128ec:	46bd      	mov	sp, r7
 80128ee:	bd80      	pop	{r7, pc}
 80128f0:	200003c0 	.word	0x200003c0

080128f4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128f4:	b580      	push	{r7, lr}
 80128f6:	b082      	sub	sp, #8
 80128f8:	af00      	add	r7, sp, #0
 80128fa:	6078      	str	r0, [r7, #4]
 80128fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	88db      	ldrh	r3, [r3, #6]
 8012902:	2b01      	cmp	r3, #1
 8012904:	d004      	beq.n	8012910 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012906:	6839      	ldr	r1, [r7, #0]
 8012908:	6878      	ldr	r0, [r7, #4]
 801290a:	f000 f8c9 	bl	8012aa0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801290e:	e021      	b.n	8012954 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012916:	2b01      	cmp	r3, #1
 8012918:	db17      	blt.n	801294a <USBD_GetConfig+0x56>
 801291a:	2b02      	cmp	r3, #2
 801291c:	dd02      	ble.n	8012924 <USBD_GetConfig+0x30>
 801291e:	2b03      	cmp	r3, #3
 8012920:	d00b      	beq.n	801293a <USBD_GetConfig+0x46>
 8012922:	e012      	b.n	801294a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	2200      	movs	r2, #0
 8012928:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801292a:	687b      	ldr	r3, [r7, #4]
 801292c:	3308      	adds	r3, #8
 801292e:	2201      	movs	r2, #1
 8012930:	4619      	mov	r1, r3
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 f925 	bl	8012b82 <USBD_CtlSendData>
      break;
 8012938:	e00c      	b.n	8012954 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	3304      	adds	r3, #4
 801293e:	2201      	movs	r2, #1
 8012940:	4619      	mov	r1, r3
 8012942:	6878      	ldr	r0, [r7, #4]
 8012944:	f000 f91d 	bl	8012b82 <USBD_CtlSendData>
      break;
 8012948:	e004      	b.n	8012954 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801294a:	6839      	ldr	r1, [r7, #0]
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f000 f8a7 	bl	8012aa0 <USBD_CtlError>
      break;
 8012952:	bf00      	nop
}
 8012954:	bf00      	nop
 8012956:	3708      	adds	r7, #8
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b082      	sub	sp, #8
 8012960:	af00      	add	r7, sp, #0
 8012962:	6078      	str	r0, [r7, #4]
 8012964:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801296c:	3b01      	subs	r3, #1
 801296e:	2b02      	cmp	r3, #2
 8012970:	d81e      	bhi.n	80129b0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012972:	683b      	ldr	r3, [r7, #0]
 8012974:	88db      	ldrh	r3, [r3, #6]
 8012976:	2b02      	cmp	r3, #2
 8012978:	d004      	beq.n	8012984 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801297a:	6839      	ldr	r1, [r7, #0]
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 f88f 	bl	8012aa0 <USBD_CtlError>
      break;
 8012982:	e01a      	b.n	80129ba <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	2201      	movs	r2, #1
 8012988:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012990:	2b00      	cmp	r3, #0
 8012992:	d005      	beq.n	80129a0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	68db      	ldr	r3, [r3, #12]
 8012998:	f043 0202 	orr.w	r2, r3, #2
 801299c:	687b      	ldr	r3, [r7, #4]
 801299e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	330c      	adds	r3, #12
 80129a4:	2202      	movs	r2, #2
 80129a6:	4619      	mov	r1, r3
 80129a8:	6878      	ldr	r0, [r7, #4]
 80129aa:	f000 f8ea 	bl	8012b82 <USBD_CtlSendData>
    break;
 80129ae:	e004      	b.n	80129ba <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80129b0:	6839      	ldr	r1, [r7, #0]
 80129b2:	6878      	ldr	r0, [r7, #4]
 80129b4:	f000 f874 	bl	8012aa0 <USBD_CtlError>
    break;
 80129b8:	bf00      	nop
  }
}
 80129ba:	bf00      	nop
 80129bc:	3708      	adds	r7, #8
 80129be:	46bd      	mov	sp, r7
 80129c0:	bd80      	pop	{r7, pc}

080129c2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129c2:	b580      	push	{r7, lr}
 80129c4:	b082      	sub	sp, #8
 80129c6:	af00      	add	r7, sp, #0
 80129c8:	6078      	str	r0, [r7, #4]
 80129ca:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129cc:	683b      	ldr	r3, [r7, #0]
 80129ce:	885b      	ldrh	r3, [r3, #2]
 80129d0:	2b01      	cmp	r3, #1
 80129d2:	d106      	bne.n	80129e2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2201      	movs	r2, #1
 80129d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80129dc:	6878      	ldr	r0, [r7, #4]
 80129de:	f000 f92a 	bl	8012c36 <USBD_CtlSendStatus>
  }
}
 80129e2:	bf00      	nop
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b082      	sub	sp, #8
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
 80129f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80129fa:	3b01      	subs	r3, #1
 80129fc:	2b02      	cmp	r3, #2
 80129fe:	d80b      	bhi.n	8012a18 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a00:	683b      	ldr	r3, [r7, #0]
 8012a02:	885b      	ldrh	r3, [r3, #2]
 8012a04:	2b01      	cmp	r3, #1
 8012a06:	d10c      	bne.n	8012a22 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f000 f910 	bl	8012c36 <USBD_CtlSendStatus>
      }
      break;
 8012a16:	e004      	b.n	8012a22 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012a18:	6839      	ldr	r1, [r7, #0]
 8012a1a:	6878      	ldr	r0, [r7, #4]
 8012a1c:	f000 f840 	bl	8012aa0 <USBD_CtlError>
      break;
 8012a20:	e000      	b.n	8012a24 <USBD_ClrFeature+0x3a>
      break;
 8012a22:	bf00      	nop
  }
}
 8012a24:	bf00      	nop
 8012a26:	3708      	adds	r7, #8
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b084      	sub	sp, #16
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
 8012a34:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	781a      	ldrb	r2, [r3, #0]
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012a42:	68fb      	ldr	r3, [r7, #12]
 8012a44:	3301      	adds	r3, #1
 8012a46:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	781a      	ldrb	r2, [r3, #0]
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012a50:	68fb      	ldr	r3, [r7, #12]
 8012a52:	3301      	adds	r3, #1
 8012a54:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012a56:	68f8      	ldr	r0, [r7, #12]
 8012a58:	f7ff faa9 	bl	8011fae <SWAPBYTE>
 8012a5c:	4603      	mov	r3, r0
 8012a5e:	461a      	mov	r2, r3
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	3301      	adds	r3, #1
 8012a68:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	3301      	adds	r3, #1
 8012a6e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012a70:	68f8      	ldr	r0, [r7, #12]
 8012a72:	f7ff fa9c 	bl	8011fae <SWAPBYTE>
 8012a76:	4603      	mov	r3, r0
 8012a78:	461a      	mov	r2, r3
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	3301      	adds	r3, #1
 8012a82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a84:	68fb      	ldr	r3, [r7, #12]
 8012a86:	3301      	adds	r3, #1
 8012a88:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012a8a:	68f8      	ldr	r0, [r7, #12]
 8012a8c:	f7ff fa8f 	bl	8011fae <SWAPBYTE>
 8012a90:	4603      	mov	r3, r0
 8012a92:	461a      	mov	r2, r3
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	80da      	strh	r2, [r3, #6]
}
 8012a98:	bf00      	nop
 8012a9a:	3710      	adds	r7, #16
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}

08012aa0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b082      	sub	sp, #8
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012aaa:	2180      	movs	r1, #128	; 0x80
 8012aac:	6878      	ldr	r0, [r7, #4]
 8012aae:	f007 fc47 	bl	801a340 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	6878      	ldr	r0, [r7, #4]
 8012ab6:	f007 fc43 	bl	801a340 <USBD_LL_StallEP>
}
 8012aba:	bf00      	nop
 8012abc:	3708      	adds	r7, #8
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b086      	sub	sp, #24
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	60f8      	str	r0, [r7, #12]
 8012aca:	60b9      	str	r1, [r7, #8]
 8012acc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012ace:	2300      	movs	r3, #0
 8012ad0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d036      	beq.n	8012b46 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012ad8:	68fb      	ldr	r3, [r7, #12]
 8012ada:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012adc:	6938      	ldr	r0, [r7, #16]
 8012ade:	f000 f836 	bl	8012b4e <USBD_GetLen>
 8012ae2:	4603      	mov	r3, r0
 8012ae4:	3301      	adds	r3, #1
 8012ae6:	b29b      	uxth	r3, r3
 8012ae8:	005b      	lsls	r3, r3, #1
 8012aea:	b29a      	uxth	r2, r3
 8012aec:	687b      	ldr	r3, [r7, #4]
 8012aee:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012af0:	7dfb      	ldrb	r3, [r7, #23]
 8012af2:	68ba      	ldr	r2, [r7, #8]
 8012af4:	4413      	add	r3, r2
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	7812      	ldrb	r2, [r2, #0]
 8012afa:	701a      	strb	r2, [r3, #0]
  idx++;
 8012afc:	7dfb      	ldrb	r3, [r7, #23]
 8012afe:	3301      	adds	r3, #1
 8012b00:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012b02:	7dfb      	ldrb	r3, [r7, #23]
 8012b04:	68ba      	ldr	r2, [r7, #8]
 8012b06:	4413      	add	r3, r2
 8012b08:	2203      	movs	r2, #3
 8012b0a:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b0c:	7dfb      	ldrb	r3, [r7, #23]
 8012b0e:	3301      	adds	r3, #1
 8012b10:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012b12:	e013      	b.n	8012b3c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012b14:	7dfb      	ldrb	r3, [r7, #23]
 8012b16:	68ba      	ldr	r2, [r7, #8]
 8012b18:	4413      	add	r3, r2
 8012b1a:	693a      	ldr	r2, [r7, #16]
 8012b1c:	7812      	ldrb	r2, [r2, #0]
 8012b1e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	3301      	adds	r3, #1
 8012b24:	613b      	str	r3, [r7, #16]
    idx++;
 8012b26:	7dfb      	ldrb	r3, [r7, #23]
 8012b28:	3301      	adds	r3, #1
 8012b2a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012b2c:	7dfb      	ldrb	r3, [r7, #23]
 8012b2e:	68ba      	ldr	r2, [r7, #8]
 8012b30:	4413      	add	r3, r2
 8012b32:	2200      	movs	r2, #0
 8012b34:	701a      	strb	r2, [r3, #0]
    idx++;
 8012b36:	7dfb      	ldrb	r3, [r7, #23]
 8012b38:	3301      	adds	r3, #1
 8012b3a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	781b      	ldrb	r3, [r3, #0]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d1e7      	bne.n	8012b14 <USBD_GetString+0x52>
 8012b44:	e000      	b.n	8012b48 <USBD_GetString+0x86>
    return;
 8012b46:	bf00      	nop
  }
}
 8012b48:	3718      	adds	r7, #24
 8012b4a:	46bd      	mov	sp, r7
 8012b4c:	bd80      	pop	{r7, pc}

08012b4e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012b4e:	b480      	push	{r7}
 8012b50:	b085      	sub	sp, #20
 8012b52:	af00      	add	r7, sp, #0
 8012b54:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012b56:	2300      	movs	r3, #0
 8012b58:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012b5a:	687b      	ldr	r3, [r7, #4]
 8012b5c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012b5e:	e005      	b.n	8012b6c <USBD_GetLen+0x1e>
  {
    len++;
 8012b60:	7bfb      	ldrb	r3, [r7, #15]
 8012b62:	3301      	adds	r3, #1
 8012b64:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012b66:	68bb      	ldr	r3, [r7, #8]
 8012b68:	3301      	adds	r3, #1
 8012b6a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012b6c:	68bb      	ldr	r3, [r7, #8]
 8012b6e:	781b      	ldrb	r3, [r3, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d1f5      	bne.n	8012b60 <USBD_GetLen+0x12>
  }

  return len;
 8012b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b76:	4618      	mov	r0, r3
 8012b78:	3714      	adds	r7, #20
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b80:	4770      	bx	lr

08012b82 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012b82:	b580      	push	{r7, lr}
 8012b84:	b084      	sub	sp, #16
 8012b86:	af00      	add	r7, sp, #0
 8012b88:	60f8      	str	r0, [r7, #12]
 8012b8a:	60b9      	str	r1, [r7, #8]
 8012b8c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012b8e:	68fb      	ldr	r3, [r7, #12]
 8012b90:	2202      	movs	r2, #2
 8012b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012b96:	68fb      	ldr	r3, [r7, #12]
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	687a      	ldr	r2, [r7, #4]
 8012ba0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	68ba      	ldr	r2, [r7, #8]
 8012ba6:	2100      	movs	r1, #0
 8012ba8:	68f8      	ldr	r0, [r7, #12]
 8012baa:	f007 fc52 	bl	801a452 <USBD_LL_Transmit>

  return USBD_OK;
 8012bae:	2300      	movs	r3, #0
}
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	3710      	adds	r7, #16
 8012bb4:	46bd      	mov	sp, r7
 8012bb6:	bd80      	pop	{r7, pc}

08012bb8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012bb8:	b580      	push	{r7, lr}
 8012bba:	b084      	sub	sp, #16
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	60f8      	str	r0, [r7, #12]
 8012bc0:	60b9      	str	r1, [r7, #8]
 8012bc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	68ba      	ldr	r2, [r7, #8]
 8012bc8:	2100      	movs	r1, #0
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f007 fc41 	bl	801a452 <USBD_LL_Transmit>

  return USBD_OK;
 8012bd0:	2300      	movs	r3, #0
}
 8012bd2:	4618      	mov	r0, r3
 8012bd4:	3710      	adds	r7, #16
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}

08012bda <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012bda:	b580      	push	{r7, lr}
 8012bdc:	b084      	sub	sp, #16
 8012bde:	af00      	add	r7, sp, #0
 8012be0:	60f8      	str	r0, [r7, #12]
 8012be2:	60b9      	str	r1, [r7, #8]
 8012be4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012be6:	68fb      	ldr	r3, [r7, #12]
 8012be8:	2203      	movs	r2, #3
 8012bea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012bee:	68fb      	ldr	r3, [r7, #12]
 8012bf0:	687a      	ldr	r2, [r7, #4]
 8012bf2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	687a      	ldr	r2, [r7, #4]
 8012bfa:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	68ba      	ldr	r2, [r7, #8]
 8012c02:	2100      	movs	r1, #0
 8012c04:	68f8      	ldr	r0, [r7, #12]
 8012c06:	f007 fc45 	bl	801a494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c0a:	2300      	movs	r3, #0
}
 8012c0c:	4618      	mov	r0, r3
 8012c0e:	3710      	adds	r7, #16
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}

08012c14 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012c14:	b580      	push	{r7, lr}
 8012c16:	b084      	sub	sp, #16
 8012c18:	af00      	add	r7, sp, #0
 8012c1a:	60f8      	str	r0, [r7, #12]
 8012c1c:	60b9      	str	r1, [r7, #8]
 8012c1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	68ba      	ldr	r2, [r7, #8]
 8012c24:	2100      	movs	r1, #0
 8012c26:	68f8      	ldr	r0, [r7, #12]
 8012c28:	f007 fc34 	bl	801a494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c2c:	2300      	movs	r3, #0
}
 8012c2e:	4618      	mov	r0, r3
 8012c30:	3710      	adds	r7, #16
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bd80      	pop	{r7, pc}

08012c36 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012c36:	b580      	push	{r7, lr}
 8012c38:	b082      	sub	sp, #8
 8012c3a:	af00      	add	r7, sp, #0
 8012c3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2204      	movs	r2, #4
 8012c42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012c46:	2300      	movs	r3, #0
 8012c48:	2200      	movs	r2, #0
 8012c4a:	2100      	movs	r1, #0
 8012c4c:	6878      	ldr	r0, [r7, #4]
 8012c4e:	f007 fc00 	bl	801a452 <USBD_LL_Transmit>

  return USBD_OK;
 8012c52:	2300      	movs	r3, #0
}
 8012c54:	4618      	mov	r0, r3
 8012c56:	3708      	adds	r7, #8
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b082      	sub	sp, #8
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	2205      	movs	r2, #5
 8012c68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c6c:	2300      	movs	r3, #0
 8012c6e:	2200      	movs	r2, #0
 8012c70:	2100      	movs	r1, #0
 8012c72:	6878      	ldr	r0, [r7, #4]
 8012c74:	f007 fc0e 	bl	801a494 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c78:	2300      	movs	r3, #0
}
 8012c7a:	4618      	mov	r0, r3
 8012c7c:	3708      	adds	r7, #8
 8012c7e:	46bd      	mov	sp, r7
 8012c80:	bd80      	pop	{r7, pc}
	...

08012c84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	b084      	sub	sp, #16
 8012c88:	af00      	add	r7, sp, #0
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012c8e:	79fb      	ldrb	r3, [r7, #7]
 8012c90:	4a08      	ldr	r2, [pc, #32]	; (8012cb4 <disk_status+0x30>)
 8012c92:	009b      	lsls	r3, r3, #2
 8012c94:	4413      	add	r3, r2
 8012c96:	685b      	ldr	r3, [r3, #4]
 8012c98:	685b      	ldr	r3, [r3, #4]
 8012c9a:	79fa      	ldrb	r2, [r7, #7]
 8012c9c:	4905      	ldr	r1, [pc, #20]	; (8012cb4 <disk_status+0x30>)
 8012c9e:	440a      	add	r2, r1
 8012ca0:	7a12      	ldrb	r2, [r2, #8]
 8012ca2:	4610      	mov	r0, r2
 8012ca4:	4798      	blx	r3
 8012ca6:	4603      	mov	r3, r0
 8012ca8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012caa:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cac:	4618      	mov	r0, r3
 8012cae:	3710      	adds	r7, #16
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	200003ec 	.word	0x200003ec

08012cb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b084      	sub	sp, #16
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012cc6:	79fb      	ldrb	r3, [r7, #7]
 8012cc8:	4a0d      	ldr	r2, [pc, #52]	; (8012d00 <disk_initialize+0x48>)
 8012cca:	5cd3      	ldrb	r3, [r2, r3]
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d111      	bne.n	8012cf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012cd0:	79fb      	ldrb	r3, [r7, #7]
 8012cd2:	4a0b      	ldr	r2, [pc, #44]	; (8012d00 <disk_initialize+0x48>)
 8012cd4:	2101      	movs	r1, #1
 8012cd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012cd8:	79fb      	ldrb	r3, [r7, #7]
 8012cda:	4a09      	ldr	r2, [pc, #36]	; (8012d00 <disk_initialize+0x48>)
 8012cdc:	009b      	lsls	r3, r3, #2
 8012cde:	4413      	add	r3, r2
 8012ce0:	685b      	ldr	r3, [r3, #4]
 8012ce2:	681b      	ldr	r3, [r3, #0]
 8012ce4:	79fa      	ldrb	r2, [r7, #7]
 8012ce6:	4906      	ldr	r1, [pc, #24]	; (8012d00 <disk_initialize+0x48>)
 8012ce8:	440a      	add	r2, r1
 8012cea:	7a12      	ldrb	r2, [r2, #8]
 8012cec:	4610      	mov	r0, r2
 8012cee:	4798      	blx	r3
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cf6:	4618      	mov	r0, r3
 8012cf8:	3710      	adds	r7, #16
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	200003ec 	.word	0x200003ec

08012d04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012d04:	b590      	push	{r4, r7, lr}
 8012d06:	b087      	sub	sp, #28
 8012d08:	af00      	add	r7, sp, #0
 8012d0a:	60b9      	str	r1, [r7, #8]
 8012d0c:	607a      	str	r2, [r7, #4]
 8012d0e:	603b      	str	r3, [r7, #0]
 8012d10:	4603      	mov	r3, r0
 8012d12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012d14:	7bfb      	ldrb	r3, [r7, #15]
 8012d16:	4a0a      	ldr	r2, [pc, #40]	; (8012d40 <disk_read+0x3c>)
 8012d18:	009b      	lsls	r3, r3, #2
 8012d1a:	4413      	add	r3, r2
 8012d1c:	685b      	ldr	r3, [r3, #4]
 8012d1e:	689c      	ldr	r4, [r3, #8]
 8012d20:	7bfb      	ldrb	r3, [r7, #15]
 8012d22:	4a07      	ldr	r2, [pc, #28]	; (8012d40 <disk_read+0x3c>)
 8012d24:	4413      	add	r3, r2
 8012d26:	7a18      	ldrb	r0, [r3, #8]
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	687a      	ldr	r2, [r7, #4]
 8012d2c:	68b9      	ldr	r1, [r7, #8]
 8012d2e:	47a0      	blx	r4
 8012d30:	4603      	mov	r3, r0
 8012d32:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d34:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	371c      	adds	r7, #28
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd90      	pop	{r4, r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	200003ec 	.word	0x200003ec

08012d44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012d44:	b590      	push	{r4, r7, lr}
 8012d46:	b087      	sub	sp, #28
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	60b9      	str	r1, [r7, #8]
 8012d4c:	607a      	str	r2, [r7, #4]
 8012d4e:	603b      	str	r3, [r7, #0]
 8012d50:	4603      	mov	r3, r0
 8012d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012d54:	7bfb      	ldrb	r3, [r7, #15]
 8012d56:	4a0a      	ldr	r2, [pc, #40]	; (8012d80 <disk_write+0x3c>)
 8012d58:	009b      	lsls	r3, r3, #2
 8012d5a:	4413      	add	r3, r2
 8012d5c:	685b      	ldr	r3, [r3, #4]
 8012d5e:	68dc      	ldr	r4, [r3, #12]
 8012d60:	7bfb      	ldrb	r3, [r7, #15]
 8012d62:	4a07      	ldr	r2, [pc, #28]	; (8012d80 <disk_write+0x3c>)
 8012d64:	4413      	add	r3, r2
 8012d66:	7a18      	ldrb	r0, [r3, #8]
 8012d68:	683b      	ldr	r3, [r7, #0]
 8012d6a:	687a      	ldr	r2, [r7, #4]
 8012d6c:	68b9      	ldr	r1, [r7, #8]
 8012d6e:	47a0      	blx	r4
 8012d70:	4603      	mov	r3, r0
 8012d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d76:	4618      	mov	r0, r3
 8012d78:	371c      	adds	r7, #28
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd90      	pop	{r4, r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	200003ec 	.word	0x200003ec

08012d84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
 8012d8a:	4603      	mov	r3, r0
 8012d8c:	603a      	str	r2, [r7, #0]
 8012d8e:	71fb      	strb	r3, [r7, #7]
 8012d90:	460b      	mov	r3, r1
 8012d92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012d94:	79fb      	ldrb	r3, [r7, #7]
 8012d96:	4a09      	ldr	r2, [pc, #36]	; (8012dbc <disk_ioctl+0x38>)
 8012d98:	009b      	lsls	r3, r3, #2
 8012d9a:	4413      	add	r3, r2
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	691b      	ldr	r3, [r3, #16]
 8012da0:	79fa      	ldrb	r2, [r7, #7]
 8012da2:	4906      	ldr	r1, [pc, #24]	; (8012dbc <disk_ioctl+0x38>)
 8012da4:	440a      	add	r2, r1
 8012da6:	7a10      	ldrb	r0, [r2, #8]
 8012da8:	79b9      	ldrb	r1, [r7, #6]
 8012daa:	683a      	ldr	r2, [r7, #0]
 8012dac:	4798      	blx	r3
 8012dae:	4603      	mov	r3, r0
 8012db0:	73fb      	strb	r3, [r7, #15]
  return res;
 8012db2:	7bfb      	ldrb	r3, [r7, #15]
}
 8012db4:	4618      	mov	r0, r3
 8012db6:	3710      	adds	r7, #16
 8012db8:	46bd      	mov	sp, r7
 8012dba:	bd80      	pop	{r7, pc}
 8012dbc:	200003ec 	.word	0x200003ec

08012dc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012dc0:	b480      	push	{r7}
 8012dc2:	b085      	sub	sp, #20
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	3301      	adds	r3, #1
 8012dcc:	781b      	ldrb	r3, [r3, #0]
 8012dce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012dd0:	89fb      	ldrh	r3, [r7, #14]
 8012dd2:	021b      	lsls	r3, r3, #8
 8012dd4:	b21a      	sxth	r2, r3
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	781b      	ldrb	r3, [r3, #0]
 8012dda:	b21b      	sxth	r3, r3
 8012ddc:	4313      	orrs	r3, r2
 8012dde:	b21b      	sxth	r3, r3
 8012de0:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012de2:	89fb      	ldrh	r3, [r7, #14]
}
 8012de4:	4618      	mov	r0, r3
 8012de6:	3714      	adds	r7, #20
 8012de8:	46bd      	mov	sp, r7
 8012dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dee:	4770      	bx	lr

08012df0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012df0:	b480      	push	{r7}
 8012df2:	b085      	sub	sp, #20
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	3303      	adds	r3, #3
 8012dfc:	781b      	ldrb	r3, [r3, #0]
 8012dfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	021b      	lsls	r3, r3, #8
 8012e04:	687a      	ldr	r2, [r7, #4]
 8012e06:	3202      	adds	r2, #2
 8012e08:	7812      	ldrb	r2, [r2, #0]
 8012e0a:	4313      	orrs	r3, r2
 8012e0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	021b      	lsls	r3, r3, #8
 8012e12:	687a      	ldr	r2, [r7, #4]
 8012e14:	3201      	adds	r2, #1
 8012e16:	7812      	ldrb	r2, [r2, #0]
 8012e18:	4313      	orrs	r3, r2
 8012e1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012e1c:	68fb      	ldr	r3, [r7, #12]
 8012e1e:	021b      	lsls	r3, r3, #8
 8012e20:	687a      	ldr	r2, [r7, #4]
 8012e22:	7812      	ldrb	r2, [r2, #0]
 8012e24:	4313      	orrs	r3, r2
 8012e26:	60fb      	str	r3, [r7, #12]
	return rv;
 8012e28:	68fb      	ldr	r3, [r7, #12]
}
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	3714      	adds	r7, #20
 8012e2e:	46bd      	mov	sp, r7
 8012e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e34:	4770      	bx	lr

08012e36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012e36:	b480      	push	{r7}
 8012e38:	b083      	sub	sp, #12
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	460b      	mov	r3, r1
 8012e40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	1c5a      	adds	r2, r3, #1
 8012e46:	607a      	str	r2, [r7, #4]
 8012e48:	887a      	ldrh	r2, [r7, #2]
 8012e4a:	b2d2      	uxtb	r2, r2
 8012e4c:	701a      	strb	r2, [r3, #0]
 8012e4e:	887b      	ldrh	r3, [r7, #2]
 8012e50:	0a1b      	lsrs	r3, r3, #8
 8012e52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012e54:	687b      	ldr	r3, [r7, #4]
 8012e56:	1c5a      	adds	r2, r3, #1
 8012e58:	607a      	str	r2, [r7, #4]
 8012e5a:	887a      	ldrh	r2, [r7, #2]
 8012e5c:	b2d2      	uxtb	r2, r2
 8012e5e:	701a      	strb	r2, [r3, #0]
}
 8012e60:	bf00      	nop
 8012e62:	370c      	adds	r7, #12
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	1c5a      	adds	r2, r3, #1
 8012e7a:	607a      	str	r2, [r7, #4]
 8012e7c:	683a      	ldr	r2, [r7, #0]
 8012e7e:	b2d2      	uxtb	r2, r2
 8012e80:	701a      	strb	r2, [r3, #0]
 8012e82:	683b      	ldr	r3, [r7, #0]
 8012e84:	0a1b      	lsrs	r3, r3, #8
 8012e86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	1c5a      	adds	r2, r3, #1
 8012e8c:	607a      	str	r2, [r7, #4]
 8012e8e:	683a      	ldr	r2, [r7, #0]
 8012e90:	b2d2      	uxtb	r2, r2
 8012e92:	701a      	strb	r2, [r3, #0]
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	0a1b      	lsrs	r3, r3, #8
 8012e98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	1c5a      	adds	r2, r3, #1
 8012e9e:	607a      	str	r2, [r7, #4]
 8012ea0:	683a      	ldr	r2, [r7, #0]
 8012ea2:	b2d2      	uxtb	r2, r2
 8012ea4:	701a      	strb	r2, [r3, #0]
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	0a1b      	lsrs	r3, r3, #8
 8012eaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	1c5a      	adds	r2, r3, #1
 8012eb0:	607a      	str	r2, [r7, #4]
 8012eb2:	683a      	ldr	r2, [r7, #0]
 8012eb4:	b2d2      	uxtb	r2, r2
 8012eb6:	701a      	strb	r2, [r3, #0]
}
 8012eb8:	bf00      	nop
 8012eba:	370c      	adds	r7, #12
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012ec4:	b480      	push	{r7}
 8012ec6:	b087      	sub	sp, #28
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	60f8      	str	r0, [r7, #12]
 8012ecc:	60b9      	str	r1, [r7, #8]
 8012ece:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012ed4:	68bb      	ldr	r3, [r7, #8]
 8012ed6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d00d      	beq.n	8012efa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012ede:	693a      	ldr	r2, [r7, #16]
 8012ee0:	1c53      	adds	r3, r2, #1
 8012ee2:	613b      	str	r3, [r7, #16]
 8012ee4:	697b      	ldr	r3, [r7, #20]
 8012ee6:	1c59      	adds	r1, r3, #1
 8012ee8:	6179      	str	r1, [r7, #20]
 8012eea:	7812      	ldrb	r2, [r2, #0]
 8012eec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	3b01      	subs	r3, #1
 8012ef2:	607b      	str	r3, [r7, #4]
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d1f1      	bne.n	8012ede <mem_cpy+0x1a>
	}
}
 8012efa:	bf00      	nop
 8012efc:	371c      	adds	r7, #28
 8012efe:	46bd      	mov	sp, r7
 8012f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f04:	4770      	bx	lr

08012f06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012f06:	b480      	push	{r7}
 8012f08:	b087      	sub	sp, #28
 8012f0a:	af00      	add	r7, sp, #0
 8012f0c:	60f8      	str	r0, [r7, #12]
 8012f0e:	60b9      	str	r1, [r7, #8]
 8012f10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012f16:	697b      	ldr	r3, [r7, #20]
 8012f18:	1c5a      	adds	r2, r3, #1
 8012f1a:	617a      	str	r2, [r7, #20]
 8012f1c:	68ba      	ldr	r2, [r7, #8]
 8012f1e:	b2d2      	uxtb	r2, r2
 8012f20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	3b01      	subs	r3, #1
 8012f26:	607b      	str	r3, [r7, #4]
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d1f3      	bne.n	8012f16 <mem_set+0x10>
}
 8012f2e:	bf00      	nop
 8012f30:	371c      	adds	r7, #28
 8012f32:	46bd      	mov	sp, r7
 8012f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f38:	4770      	bx	lr

08012f3a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012f3a:	b480      	push	{r7}
 8012f3c:	b089      	sub	sp, #36	; 0x24
 8012f3e:	af00      	add	r7, sp, #0
 8012f40:	60f8      	str	r0, [r7, #12]
 8012f42:	60b9      	str	r1, [r7, #8]
 8012f44:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	61fb      	str	r3, [r7, #28]
 8012f4a:	68bb      	ldr	r3, [r7, #8]
 8012f4c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012f52:	69fb      	ldr	r3, [r7, #28]
 8012f54:	1c5a      	adds	r2, r3, #1
 8012f56:	61fa      	str	r2, [r7, #28]
 8012f58:	781b      	ldrb	r3, [r3, #0]
 8012f5a:	4619      	mov	r1, r3
 8012f5c:	69bb      	ldr	r3, [r7, #24]
 8012f5e:	1c5a      	adds	r2, r3, #1
 8012f60:	61ba      	str	r2, [r7, #24]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	1acb      	subs	r3, r1, r3
 8012f66:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012f68:	687b      	ldr	r3, [r7, #4]
 8012f6a:	3b01      	subs	r3, #1
 8012f6c:	607b      	str	r3, [r7, #4]
 8012f6e:	687b      	ldr	r3, [r7, #4]
 8012f70:	2b00      	cmp	r3, #0
 8012f72:	d002      	beq.n	8012f7a <mem_cmp+0x40>
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d0eb      	beq.n	8012f52 <mem_cmp+0x18>

	return r;
 8012f7a:	697b      	ldr	r3, [r7, #20]
}
 8012f7c:	4618      	mov	r0, r3
 8012f7e:	3724      	adds	r7, #36	; 0x24
 8012f80:	46bd      	mov	sp, r7
 8012f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f86:	4770      	bx	lr

08012f88 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f88:	b480      	push	{r7}
 8012f8a:	b083      	sub	sp, #12
 8012f8c:	af00      	add	r7, sp, #0
 8012f8e:	6078      	str	r0, [r7, #4]
 8012f90:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012f92:	e002      	b.n	8012f9a <chk_chr+0x12>
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	3301      	adds	r3, #1
 8012f98:	607b      	str	r3, [r7, #4]
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	781b      	ldrb	r3, [r3, #0]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d005      	beq.n	8012fae <chk_chr+0x26>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	461a      	mov	r2, r3
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	4293      	cmp	r3, r2
 8012fac:	d1f2      	bne.n	8012f94 <chk_chr+0xc>
	return *str;
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
}
 8012fb2:	4618      	mov	r0, r3
 8012fb4:	370c      	adds	r7, #12
 8012fb6:	46bd      	mov	sp, r7
 8012fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbc:	4770      	bx	lr

08012fbe <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012fbe:	b580      	push	{r7, lr}
 8012fc0:	b082      	sub	sp, #8
 8012fc2:	af00      	add	r7, sp, #0
 8012fc4:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d009      	beq.n	8012fe0 <lock_fs+0x22>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f002 fd8d 	bl	8015af0 <ff_req_grant>
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <lock_fs+0x22>
 8012fdc:	2301      	movs	r3, #1
 8012fde:	e000      	b.n	8012fe2 <lock_fs+0x24>
 8012fe0:	2300      	movs	r3, #0
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	3708      	adds	r7, #8
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	bd80      	pop	{r7, pc}

08012fea <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8012fea:	b580      	push	{r7, lr}
 8012fec:	b082      	sub	sp, #8
 8012fee:	af00      	add	r7, sp, #0
 8012ff0:	6078      	str	r0, [r7, #4]
 8012ff2:	460b      	mov	r3, r1
 8012ff4:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012ff6:	687b      	ldr	r3, [r7, #4]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d00d      	beq.n	8013018 <unlock_fs+0x2e>
 8012ffc:	78fb      	ldrb	r3, [r7, #3]
 8012ffe:	2b0c      	cmp	r3, #12
 8013000:	d00a      	beq.n	8013018 <unlock_fs+0x2e>
 8013002:	78fb      	ldrb	r3, [r7, #3]
 8013004:	2b0b      	cmp	r3, #11
 8013006:	d007      	beq.n	8013018 <unlock_fs+0x2e>
 8013008:	78fb      	ldrb	r3, [r7, #3]
 801300a:	2b0f      	cmp	r3, #15
 801300c:	d004      	beq.n	8013018 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	68db      	ldr	r3, [r3, #12]
 8013012:	4618      	mov	r0, r3
 8013014:	f002 fd81 	bl	8015b1a <ff_rel_grant>
	}
}
 8013018:	bf00      	nop
 801301a:	3708      	adds	r7, #8
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}

08013020 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801302a:	2300      	movs	r3, #0
 801302c:	60bb      	str	r3, [r7, #8]
 801302e:	68bb      	ldr	r3, [r7, #8]
 8013030:	60fb      	str	r3, [r7, #12]
 8013032:	e029      	b.n	8013088 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013034:	4a27      	ldr	r2, [pc, #156]	; (80130d4 <chk_lock+0xb4>)
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	011b      	lsls	r3, r3, #4
 801303a:	4413      	add	r3, r2
 801303c:	681b      	ldr	r3, [r3, #0]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d01d      	beq.n	801307e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013042:	4a24      	ldr	r2, [pc, #144]	; (80130d4 <chk_lock+0xb4>)
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	011b      	lsls	r3, r3, #4
 8013048:	4413      	add	r3, r2
 801304a:	681a      	ldr	r2, [r3, #0]
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	429a      	cmp	r2, r3
 8013052:	d116      	bne.n	8013082 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013054:	4a1f      	ldr	r2, [pc, #124]	; (80130d4 <chk_lock+0xb4>)
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	011b      	lsls	r3, r3, #4
 801305a:	4413      	add	r3, r2
 801305c:	3304      	adds	r3, #4
 801305e:	681a      	ldr	r2, [r3, #0]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013064:	429a      	cmp	r2, r3
 8013066:	d10c      	bne.n	8013082 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013068:	4a1a      	ldr	r2, [pc, #104]	; (80130d4 <chk_lock+0xb4>)
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	011b      	lsls	r3, r3, #4
 801306e:	4413      	add	r3, r2
 8013070:	3308      	adds	r3, #8
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8013078:	429a      	cmp	r2, r3
 801307a:	d102      	bne.n	8013082 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801307c:	e007      	b.n	801308e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 801307e:	2301      	movs	r3, #1
 8013080:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	3301      	adds	r3, #1
 8013086:	60fb      	str	r3, [r7, #12]
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2b01      	cmp	r3, #1
 801308c:	d9d2      	bls.n	8013034 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 801308e:	68fb      	ldr	r3, [r7, #12]
 8013090:	2b02      	cmp	r3, #2
 8013092:	d109      	bne.n	80130a8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d102      	bne.n	80130a0 <chk_lock+0x80>
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	2b02      	cmp	r3, #2
 801309e:	d101      	bne.n	80130a4 <chk_lock+0x84>
 80130a0:	2300      	movs	r3, #0
 80130a2:	e010      	b.n	80130c6 <chk_lock+0xa6>
 80130a4:	2312      	movs	r3, #18
 80130a6:	e00e      	b.n	80130c6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80130a8:	683b      	ldr	r3, [r7, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d108      	bne.n	80130c0 <chk_lock+0xa0>
 80130ae:	4a09      	ldr	r2, [pc, #36]	; (80130d4 <chk_lock+0xb4>)
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	011b      	lsls	r3, r3, #4
 80130b4:	4413      	add	r3, r2
 80130b6:	330c      	adds	r3, #12
 80130b8:	881b      	ldrh	r3, [r3, #0]
 80130ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130be:	d101      	bne.n	80130c4 <chk_lock+0xa4>
 80130c0:	2310      	movs	r3, #16
 80130c2:	e000      	b.n	80130c6 <chk_lock+0xa6>
 80130c4:	2300      	movs	r3, #0
}
 80130c6:	4618      	mov	r0, r3
 80130c8:	3714      	adds	r7, #20
 80130ca:	46bd      	mov	sp, r7
 80130cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130d0:	4770      	bx	lr
 80130d2:	bf00      	nop
 80130d4:	200003cc 	.word	0x200003cc

080130d8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80130d8:	b480      	push	{r7}
 80130da:	b083      	sub	sp, #12
 80130dc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80130de:	2300      	movs	r3, #0
 80130e0:	607b      	str	r3, [r7, #4]
 80130e2:	e002      	b.n	80130ea <enq_lock+0x12>
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	3301      	adds	r3, #1
 80130e8:	607b      	str	r3, [r7, #4]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b01      	cmp	r3, #1
 80130ee:	d806      	bhi.n	80130fe <enq_lock+0x26>
 80130f0:	4a09      	ldr	r2, [pc, #36]	; (8013118 <enq_lock+0x40>)
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	011b      	lsls	r3, r3, #4
 80130f6:	4413      	add	r3, r2
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d1f2      	bne.n	80130e4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2b02      	cmp	r3, #2
 8013102:	bf14      	ite	ne
 8013104:	2301      	movne	r3, #1
 8013106:	2300      	moveq	r3, #0
 8013108:	b2db      	uxtb	r3, r3
}
 801310a:	4618      	mov	r0, r3
 801310c:	370c      	adds	r7, #12
 801310e:	46bd      	mov	sp, r7
 8013110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013114:	4770      	bx	lr
 8013116:	bf00      	nop
 8013118:	200003cc 	.word	0x200003cc

0801311c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
 8013124:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013126:	2300      	movs	r3, #0
 8013128:	60fb      	str	r3, [r7, #12]
 801312a:	e01f      	b.n	801316c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 801312c:	4a41      	ldr	r2, [pc, #260]	; (8013234 <inc_lock+0x118>)
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	011b      	lsls	r3, r3, #4
 8013132:	4413      	add	r3, r2
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	429a      	cmp	r2, r3
 801313c:	d113      	bne.n	8013166 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 801313e:	4a3d      	ldr	r2, [pc, #244]	; (8013234 <inc_lock+0x118>)
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	011b      	lsls	r3, r3, #4
 8013144:	4413      	add	r3, r2
 8013146:	3304      	adds	r3, #4
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 801314e:	429a      	cmp	r2, r3
 8013150:	d109      	bne.n	8013166 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013152:	4a38      	ldr	r2, [pc, #224]	; (8013234 <inc_lock+0x118>)
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	011b      	lsls	r3, r3, #4
 8013158:	4413      	add	r3, r2
 801315a:	3308      	adds	r3, #8
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013162:	429a      	cmp	r2, r3
 8013164:	d006      	beq.n	8013174 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	3301      	adds	r3, #1
 801316a:	60fb      	str	r3, [r7, #12]
 801316c:	68fb      	ldr	r3, [r7, #12]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d9dc      	bls.n	801312c <inc_lock+0x10>
 8013172:	e000      	b.n	8013176 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013174:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	2b02      	cmp	r3, #2
 801317a:	d132      	bne.n	80131e2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 801317c:	2300      	movs	r3, #0
 801317e:	60fb      	str	r3, [r7, #12]
 8013180:	e002      	b.n	8013188 <inc_lock+0x6c>
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	3301      	adds	r3, #1
 8013186:	60fb      	str	r3, [r7, #12]
 8013188:	68fb      	ldr	r3, [r7, #12]
 801318a:	2b01      	cmp	r3, #1
 801318c:	d806      	bhi.n	801319c <inc_lock+0x80>
 801318e:	4a29      	ldr	r2, [pc, #164]	; (8013234 <inc_lock+0x118>)
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	011b      	lsls	r3, r3, #4
 8013194:	4413      	add	r3, r2
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	2b00      	cmp	r3, #0
 801319a:	d1f2      	bne.n	8013182 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2b02      	cmp	r3, #2
 80131a0:	d101      	bne.n	80131a6 <inc_lock+0x8a>
 80131a2:	2300      	movs	r3, #0
 80131a4:	e040      	b.n	8013228 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681a      	ldr	r2, [r3, #0]
 80131aa:	4922      	ldr	r1, [pc, #136]	; (8013234 <inc_lock+0x118>)
 80131ac:	68fb      	ldr	r3, [r7, #12]
 80131ae:	011b      	lsls	r3, r3, #4
 80131b0:	440b      	add	r3, r1
 80131b2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	689a      	ldr	r2, [r3, #8]
 80131b8:	491e      	ldr	r1, [pc, #120]	; (8013234 <inc_lock+0x118>)
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	011b      	lsls	r3, r3, #4
 80131be:	440b      	add	r3, r1
 80131c0:	3304      	adds	r3, #4
 80131c2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	695a      	ldr	r2, [r3, #20]
 80131c8:	491a      	ldr	r1, [pc, #104]	; (8013234 <inc_lock+0x118>)
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	011b      	lsls	r3, r3, #4
 80131ce:	440b      	add	r3, r1
 80131d0:	3308      	adds	r3, #8
 80131d2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80131d4:	4a17      	ldr	r2, [pc, #92]	; (8013234 <inc_lock+0x118>)
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	011b      	lsls	r3, r3, #4
 80131da:	4413      	add	r3, r2
 80131dc:	330c      	adds	r3, #12
 80131de:	2200      	movs	r2, #0
 80131e0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80131e2:	683b      	ldr	r3, [r7, #0]
 80131e4:	2b00      	cmp	r3, #0
 80131e6:	d009      	beq.n	80131fc <inc_lock+0xe0>
 80131e8:	4a12      	ldr	r2, [pc, #72]	; (8013234 <inc_lock+0x118>)
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	011b      	lsls	r3, r3, #4
 80131ee:	4413      	add	r3, r2
 80131f0:	330c      	adds	r3, #12
 80131f2:	881b      	ldrh	r3, [r3, #0]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d001      	beq.n	80131fc <inc_lock+0xe0>
 80131f8:	2300      	movs	r3, #0
 80131fa:	e015      	b.n	8013228 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80131fc:	683b      	ldr	r3, [r7, #0]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d108      	bne.n	8013214 <inc_lock+0xf8>
 8013202:	4a0c      	ldr	r2, [pc, #48]	; (8013234 <inc_lock+0x118>)
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	011b      	lsls	r3, r3, #4
 8013208:	4413      	add	r3, r2
 801320a:	330c      	adds	r3, #12
 801320c:	881b      	ldrh	r3, [r3, #0]
 801320e:	3301      	adds	r3, #1
 8013210:	b29a      	uxth	r2, r3
 8013212:	e001      	b.n	8013218 <inc_lock+0xfc>
 8013214:	f44f 7280 	mov.w	r2, #256	; 0x100
 8013218:	4906      	ldr	r1, [pc, #24]	; (8013234 <inc_lock+0x118>)
 801321a:	68fb      	ldr	r3, [r7, #12]
 801321c:	011b      	lsls	r3, r3, #4
 801321e:	440b      	add	r3, r1
 8013220:	330c      	adds	r3, #12
 8013222:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	3301      	adds	r3, #1
}
 8013228:	4618      	mov	r0, r3
 801322a:	3714      	adds	r7, #20
 801322c:	46bd      	mov	sp, r7
 801322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013232:	4770      	bx	lr
 8013234:	200003cc 	.word	0x200003cc

08013238 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8013238:	b480      	push	{r7}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	3b01      	subs	r3, #1
 8013244:	607b      	str	r3, [r7, #4]
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	2b01      	cmp	r3, #1
 801324a:	d825      	bhi.n	8013298 <dec_lock+0x60>
		n = Files[i].ctr;
 801324c:	4a17      	ldr	r2, [pc, #92]	; (80132ac <dec_lock+0x74>)
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	011b      	lsls	r3, r3, #4
 8013252:	4413      	add	r3, r2
 8013254:	330c      	adds	r3, #12
 8013256:	881b      	ldrh	r3, [r3, #0]
 8013258:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801325a:	89fb      	ldrh	r3, [r7, #14]
 801325c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013260:	d101      	bne.n	8013266 <dec_lock+0x2e>
 8013262:	2300      	movs	r3, #0
 8013264:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8013266:	89fb      	ldrh	r3, [r7, #14]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d002      	beq.n	8013272 <dec_lock+0x3a>
 801326c:	89fb      	ldrh	r3, [r7, #14]
 801326e:	3b01      	subs	r3, #1
 8013270:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013272:	4a0e      	ldr	r2, [pc, #56]	; (80132ac <dec_lock+0x74>)
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	011b      	lsls	r3, r3, #4
 8013278:	4413      	add	r3, r2
 801327a:	330c      	adds	r3, #12
 801327c:	89fa      	ldrh	r2, [r7, #14]
 801327e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013280:	89fb      	ldrh	r3, [r7, #14]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d105      	bne.n	8013292 <dec_lock+0x5a>
 8013286:	4a09      	ldr	r2, [pc, #36]	; (80132ac <dec_lock+0x74>)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	011b      	lsls	r3, r3, #4
 801328c:	4413      	add	r3, r2
 801328e:	2200      	movs	r2, #0
 8013290:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013292:	2300      	movs	r3, #0
 8013294:	737b      	strb	r3, [r7, #13]
 8013296:	e001      	b.n	801329c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8013298:	2302      	movs	r3, #2
 801329a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 801329c:	7b7b      	ldrb	r3, [r7, #13]
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3714      	adds	r7, #20
 80132a2:	46bd      	mov	sp, r7
 80132a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	200003cc 	.word	0x200003cc

080132b0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80132b0:	b480      	push	{r7}
 80132b2:	b085      	sub	sp, #20
 80132b4:	af00      	add	r7, sp, #0
 80132b6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80132b8:	2300      	movs	r3, #0
 80132ba:	60fb      	str	r3, [r7, #12]
 80132bc:	e010      	b.n	80132e0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80132be:	4a0d      	ldr	r2, [pc, #52]	; (80132f4 <clear_lock+0x44>)
 80132c0:	68fb      	ldr	r3, [r7, #12]
 80132c2:	011b      	lsls	r3, r3, #4
 80132c4:	4413      	add	r3, r2
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	687a      	ldr	r2, [r7, #4]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d105      	bne.n	80132da <clear_lock+0x2a>
 80132ce:	4a09      	ldr	r2, [pc, #36]	; (80132f4 <clear_lock+0x44>)
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	011b      	lsls	r3, r3, #4
 80132d4:	4413      	add	r3, r2
 80132d6:	2200      	movs	r2, #0
 80132d8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	3301      	adds	r3, #1
 80132de:	60fb      	str	r3, [r7, #12]
 80132e0:	68fb      	ldr	r3, [r7, #12]
 80132e2:	2b01      	cmp	r3, #1
 80132e4:	d9eb      	bls.n	80132be <clear_lock+0xe>
	}
}
 80132e6:	bf00      	nop
 80132e8:	3714      	adds	r7, #20
 80132ea:	46bd      	mov	sp, r7
 80132ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f0:	4770      	bx	lr
 80132f2:	bf00      	nop
 80132f4:	200003cc 	.word	0x200003cc

080132f8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b086      	sub	sp, #24
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013300:	2300      	movs	r3, #0
 8013302:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	78db      	ldrb	r3, [r3, #3]
 8013308:	2b00      	cmp	r3, #0
 801330a:	d034      	beq.n	8013376 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013310:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	7858      	ldrb	r0, [r3, #1]
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801331c:	2301      	movs	r3, #1
 801331e:	697a      	ldr	r2, [r7, #20]
 8013320:	f7ff fd10 	bl	8012d44 <disk_write>
 8013324:	4603      	mov	r3, r0
 8013326:	2b00      	cmp	r3, #0
 8013328:	d002      	beq.n	8013330 <sync_window+0x38>
			res = FR_DISK_ERR;
 801332a:	2301      	movs	r3, #1
 801332c:	73fb      	strb	r3, [r7, #15]
 801332e:	e022      	b.n	8013376 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	2200      	movs	r2, #0
 8013334:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801333a:	697a      	ldr	r2, [r7, #20]
 801333c:	1ad2      	subs	r2, r2, r3
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	69db      	ldr	r3, [r3, #28]
 8013342:	429a      	cmp	r2, r3
 8013344:	d217      	bcs.n	8013376 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	789b      	ldrb	r3, [r3, #2]
 801334a:	613b      	str	r3, [r7, #16]
 801334c:	e010      	b.n	8013370 <sync_window+0x78>
					wsect += fs->fsize;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	69db      	ldr	r3, [r3, #28]
 8013352:	697a      	ldr	r2, [r7, #20]
 8013354:	4413      	add	r3, r2
 8013356:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	7858      	ldrb	r0, [r3, #1]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013362:	2301      	movs	r3, #1
 8013364:	697a      	ldr	r2, [r7, #20]
 8013366:	f7ff fced 	bl	8012d44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801336a:	693b      	ldr	r3, [r7, #16]
 801336c:	3b01      	subs	r3, #1
 801336e:	613b      	str	r3, [r7, #16]
 8013370:	693b      	ldr	r3, [r7, #16]
 8013372:	2b01      	cmp	r3, #1
 8013374:	d8eb      	bhi.n	801334e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8013376:	7bfb      	ldrb	r3, [r7, #15]
}
 8013378:	4618      	mov	r0, r3
 801337a:	3718      	adds	r7, #24
 801337c:	46bd      	mov	sp, r7
 801337e:	bd80      	pop	{r7, pc}

08013380 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013380:	b580      	push	{r7, lr}
 8013382:	b084      	sub	sp, #16
 8013384:	af00      	add	r7, sp, #0
 8013386:	6078      	str	r0, [r7, #4]
 8013388:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801338a:	2300      	movs	r3, #0
 801338c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013392:	683a      	ldr	r2, [r7, #0]
 8013394:	429a      	cmp	r2, r3
 8013396:	d01b      	beq.n	80133d0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8013398:	6878      	ldr	r0, [r7, #4]
 801339a:	f7ff ffad 	bl	80132f8 <sync_window>
 801339e:	4603      	mov	r3, r0
 80133a0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80133a2:	7bfb      	ldrb	r3, [r7, #15]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d113      	bne.n	80133d0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	7858      	ldrb	r0, [r3, #1]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80133b2:	2301      	movs	r3, #1
 80133b4:	683a      	ldr	r2, [r7, #0]
 80133b6:	f7ff fca5 	bl	8012d04 <disk_read>
 80133ba:	4603      	mov	r3, r0
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d004      	beq.n	80133ca <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80133c0:	f04f 33ff 	mov.w	r3, #4294967295
 80133c4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80133c6:	2301      	movs	r3, #1
 80133c8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	683a      	ldr	r2, [r7, #0]
 80133ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80133d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133d2:	4618      	mov	r0, r3
 80133d4:	3710      	adds	r7, #16
 80133d6:	46bd      	mov	sp, r7
 80133d8:	bd80      	pop	{r7, pc}
	...

080133dc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b084      	sub	sp, #16
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80133e4:	6878      	ldr	r0, [r7, #4]
 80133e6:	f7ff ff87 	bl	80132f8 <sync_window>
 80133ea:	4603      	mov	r3, r0
 80133ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80133ee:	7bfb      	ldrb	r3, [r7, #15]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d158      	bne.n	80134a6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	2b03      	cmp	r3, #3
 80133fa:	d148      	bne.n	801348e <sync_fs+0xb2>
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	791b      	ldrb	r3, [r3, #4]
 8013400:	2b01      	cmp	r3, #1
 8013402:	d144      	bne.n	801348e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	3334      	adds	r3, #52	; 0x34
 8013408:	f44f 7200 	mov.w	r2, #512	; 0x200
 801340c:	2100      	movs	r1, #0
 801340e:	4618      	mov	r0, r3
 8013410:	f7ff fd79 	bl	8012f06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	3334      	adds	r3, #52	; 0x34
 8013418:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801341c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013420:	4618      	mov	r0, r3
 8013422:	f7ff fd08 	bl	8012e36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	3334      	adds	r3, #52	; 0x34
 801342a:	4921      	ldr	r1, [pc, #132]	; (80134b0 <sync_fs+0xd4>)
 801342c:	4618      	mov	r0, r3
 801342e:	f7ff fd1d 	bl	8012e6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	3334      	adds	r3, #52	; 0x34
 8013436:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801343a:	491e      	ldr	r1, [pc, #120]	; (80134b4 <sync_fs+0xd8>)
 801343c:	4618      	mov	r0, r3
 801343e:	f7ff fd15 	bl	8012e6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	3334      	adds	r3, #52	; 0x34
 8013446:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	695b      	ldr	r3, [r3, #20]
 801344e:	4619      	mov	r1, r3
 8013450:	4610      	mov	r0, r2
 8013452:	f7ff fd0b 	bl	8012e6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	3334      	adds	r3, #52	; 0x34
 801345a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	691b      	ldr	r3, [r3, #16]
 8013462:	4619      	mov	r1, r3
 8013464:	4610      	mov	r0, r2
 8013466:	f7ff fd01 	bl	8012e6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	6a1b      	ldr	r3, [r3, #32]
 801346e:	1c5a      	adds	r2, r3, #1
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	7858      	ldrb	r0, [r3, #1]
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013482:	2301      	movs	r3, #1
 8013484:	f7ff fc5e 	bl	8012d44 <disk_write>
			fs->fsi_flag = 0;
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	2200      	movs	r2, #0
 801348c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	785b      	ldrb	r3, [r3, #1]
 8013492:	2200      	movs	r2, #0
 8013494:	2100      	movs	r1, #0
 8013496:	4618      	mov	r0, r3
 8013498:	f7ff fc74 	bl	8012d84 <disk_ioctl>
 801349c:	4603      	mov	r3, r0
 801349e:	2b00      	cmp	r3, #0
 80134a0:	d001      	beq.n	80134a6 <sync_fs+0xca>
 80134a2:	2301      	movs	r3, #1
 80134a4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80134a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80134a8:	4618      	mov	r0, r3
 80134aa:	3710      	adds	r7, #16
 80134ac:	46bd      	mov	sp, r7
 80134ae:	bd80      	pop	{r7, pc}
 80134b0:	41615252 	.word	0x41615252
 80134b4:	61417272 	.word	0x61417272

080134b8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80134b8:	b480      	push	{r7}
 80134ba:	b083      	sub	sp, #12
 80134bc:	af00      	add	r7, sp, #0
 80134be:	6078      	str	r0, [r7, #4]
 80134c0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80134c2:	683b      	ldr	r3, [r7, #0]
 80134c4:	3b02      	subs	r3, #2
 80134c6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	699b      	ldr	r3, [r3, #24]
 80134cc:	3b02      	subs	r3, #2
 80134ce:	683a      	ldr	r2, [r7, #0]
 80134d0:	429a      	cmp	r2, r3
 80134d2:	d301      	bcc.n	80134d8 <clust2sect+0x20>
 80134d4:	2300      	movs	r3, #0
 80134d6:	e008      	b.n	80134ea <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80134d8:	687b      	ldr	r3, [r7, #4]
 80134da:	895b      	ldrh	r3, [r3, #10]
 80134dc:	461a      	mov	r2, r3
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	fb03 f202 	mul.w	r2, r3, r2
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134e8:	4413      	add	r3, r2
}
 80134ea:	4618      	mov	r0, r3
 80134ec:	370c      	adds	r7, #12
 80134ee:	46bd      	mov	sp, r7
 80134f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134f4:	4770      	bx	lr

080134f6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80134f6:	b580      	push	{r7, lr}
 80134f8:	b086      	sub	sp, #24
 80134fa:	af00      	add	r7, sp, #0
 80134fc:	6078      	str	r0, [r7, #4]
 80134fe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	681b      	ldr	r3, [r3, #0]
 8013504:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8013506:	683b      	ldr	r3, [r7, #0]
 8013508:	2b01      	cmp	r3, #1
 801350a:	d904      	bls.n	8013516 <get_fat+0x20>
 801350c:	693b      	ldr	r3, [r7, #16]
 801350e:	699b      	ldr	r3, [r3, #24]
 8013510:	683a      	ldr	r2, [r7, #0]
 8013512:	429a      	cmp	r2, r3
 8013514:	d302      	bcc.n	801351c <get_fat+0x26>
		val = 1;	/* Internal error */
 8013516:	2301      	movs	r3, #1
 8013518:	617b      	str	r3, [r7, #20]
 801351a:	e08c      	b.n	8013636 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 801351c:	f04f 33ff 	mov.w	r3, #4294967295
 8013520:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013522:	693b      	ldr	r3, [r7, #16]
 8013524:	781b      	ldrb	r3, [r3, #0]
 8013526:	2b02      	cmp	r3, #2
 8013528:	d045      	beq.n	80135b6 <get_fat+0xc0>
 801352a:	2b03      	cmp	r3, #3
 801352c:	d05d      	beq.n	80135ea <get_fat+0xf4>
 801352e:	2b01      	cmp	r3, #1
 8013530:	d177      	bne.n	8013622 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013532:	683b      	ldr	r3, [r7, #0]
 8013534:	60fb      	str	r3, [r7, #12]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	085b      	lsrs	r3, r3, #1
 801353a:	68fa      	ldr	r2, [r7, #12]
 801353c:	4413      	add	r3, r2
 801353e:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	0a5b      	lsrs	r3, r3, #9
 8013548:	4413      	add	r3, r2
 801354a:	4619      	mov	r1, r3
 801354c:	6938      	ldr	r0, [r7, #16]
 801354e:	f7ff ff17 	bl	8013380 <move_window>
 8013552:	4603      	mov	r3, r0
 8013554:	2b00      	cmp	r3, #0
 8013556:	d167      	bne.n	8013628 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	1c5a      	adds	r2, r3, #1
 801355c:	60fa      	str	r2, [r7, #12]
 801355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013562:	693a      	ldr	r2, [r7, #16]
 8013564:	4413      	add	r3, r2
 8013566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801356a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801356c:	693b      	ldr	r3, [r7, #16]
 801356e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	0a5b      	lsrs	r3, r3, #9
 8013574:	4413      	add	r3, r2
 8013576:	4619      	mov	r1, r3
 8013578:	6938      	ldr	r0, [r7, #16]
 801357a:	f7ff ff01 	bl	8013380 <move_window>
 801357e:	4603      	mov	r3, r0
 8013580:	2b00      	cmp	r3, #0
 8013582:	d153      	bne.n	801362c <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801358a:	693a      	ldr	r2, [r7, #16]
 801358c:	4413      	add	r3, r2
 801358e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013592:	021b      	lsls	r3, r3, #8
 8013594:	461a      	mov	r2, r3
 8013596:	68bb      	ldr	r3, [r7, #8]
 8013598:	4313      	orrs	r3, r2
 801359a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801359c:	683b      	ldr	r3, [r7, #0]
 801359e:	f003 0301 	and.w	r3, r3, #1
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d002      	beq.n	80135ac <get_fat+0xb6>
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	091b      	lsrs	r3, r3, #4
 80135aa:	e002      	b.n	80135b2 <get_fat+0xbc>
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80135b2:	617b      	str	r3, [r7, #20]
			break;
 80135b4:	e03f      	b.n	8013636 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80135b6:	693b      	ldr	r3, [r7, #16]
 80135b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	0a1b      	lsrs	r3, r3, #8
 80135be:	4413      	add	r3, r2
 80135c0:	4619      	mov	r1, r3
 80135c2:	6938      	ldr	r0, [r7, #16]
 80135c4:	f7ff fedc 	bl	8013380 <move_window>
 80135c8:	4603      	mov	r3, r0
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d130      	bne.n	8013630 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80135ce:	693b      	ldr	r3, [r7, #16]
 80135d0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	005b      	lsls	r3, r3, #1
 80135d8:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80135dc:	4413      	add	r3, r2
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ff fbee 	bl	8012dc0 <ld_word>
 80135e4:	4603      	mov	r3, r0
 80135e6:	617b      	str	r3, [r7, #20]
			break;
 80135e8:	e025      	b.n	8013636 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80135ea:	693b      	ldr	r3, [r7, #16]
 80135ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135ee:	683b      	ldr	r3, [r7, #0]
 80135f0:	09db      	lsrs	r3, r3, #7
 80135f2:	4413      	add	r3, r2
 80135f4:	4619      	mov	r1, r3
 80135f6:	6938      	ldr	r0, [r7, #16]
 80135f8:	f7ff fec2 	bl	8013380 <move_window>
 80135fc:	4603      	mov	r3, r0
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d118      	bne.n	8013634 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013610:	4413      	add	r3, r2
 8013612:	4618      	mov	r0, r3
 8013614:	f7ff fbec 	bl	8012df0 <ld_dword>
 8013618:	4603      	mov	r3, r0
 801361a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 801361e:	617b      	str	r3, [r7, #20]
			break;
 8013620:	e009      	b.n	8013636 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013622:	2301      	movs	r3, #1
 8013624:	617b      	str	r3, [r7, #20]
 8013626:	e006      	b.n	8013636 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013628:	bf00      	nop
 801362a:	e004      	b.n	8013636 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801362c:	bf00      	nop
 801362e:	e002      	b.n	8013636 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013630:	bf00      	nop
 8013632:	e000      	b.n	8013636 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013634:	bf00      	nop
		}
	}

	return val;
 8013636:	697b      	ldr	r3, [r7, #20]
}
 8013638:	4618      	mov	r0, r3
 801363a:	3718      	adds	r7, #24
 801363c:	46bd      	mov	sp, r7
 801363e:	bd80      	pop	{r7, pc}

08013640 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013640:	b590      	push	{r4, r7, lr}
 8013642:	b089      	sub	sp, #36	; 0x24
 8013644:	af00      	add	r7, sp, #0
 8013646:	60f8      	str	r0, [r7, #12]
 8013648:	60b9      	str	r1, [r7, #8]
 801364a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801364c:	2302      	movs	r3, #2
 801364e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013650:	68bb      	ldr	r3, [r7, #8]
 8013652:	2b01      	cmp	r3, #1
 8013654:	f240 80d6 	bls.w	8013804 <put_fat+0x1c4>
 8013658:	68fb      	ldr	r3, [r7, #12]
 801365a:	699b      	ldr	r3, [r3, #24]
 801365c:	68ba      	ldr	r2, [r7, #8]
 801365e:	429a      	cmp	r2, r3
 8013660:	f080 80d0 	bcs.w	8013804 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	781b      	ldrb	r3, [r3, #0]
 8013668:	2b02      	cmp	r3, #2
 801366a:	d073      	beq.n	8013754 <put_fat+0x114>
 801366c:	2b03      	cmp	r3, #3
 801366e:	f000 8091 	beq.w	8013794 <put_fat+0x154>
 8013672:	2b01      	cmp	r3, #1
 8013674:	f040 80c6 	bne.w	8013804 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8013678:	68bb      	ldr	r3, [r7, #8]
 801367a:	61bb      	str	r3, [r7, #24]
 801367c:	69bb      	ldr	r3, [r7, #24]
 801367e:	085b      	lsrs	r3, r3, #1
 8013680:	69ba      	ldr	r2, [r7, #24]
 8013682:	4413      	add	r3, r2
 8013684:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801368a:	69bb      	ldr	r3, [r7, #24]
 801368c:	0a5b      	lsrs	r3, r3, #9
 801368e:	4413      	add	r3, r2
 8013690:	4619      	mov	r1, r3
 8013692:	68f8      	ldr	r0, [r7, #12]
 8013694:	f7ff fe74 	bl	8013380 <move_window>
 8013698:	4603      	mov	r3, r0
 801369a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801369c:	7ffb      	ldrb	r3, [r7, #31]
 801369e:	2b00      	cmp	r3, #0
 80136a0:	f040 80a9 	bne.w	80137f6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80136a4:	68fb      	ldr	r3, [r7, #12]
 80136a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80136aa:	69bb      	ldr	r3, [r7, #24]
 80136ac:	1c59      	adds	r1, r3, #1
 80136ae:	61b9      	str	r1, [r7, #24]
 80136b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136b4:	4413      	add	r3, r2
 80136b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80136b8:	68bb      	ldr	r3, [r7, #8]
 80136ba:	f003 0301 	and.w	r3, r3, #1
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d00d      	beq.n	80136de <put_fat+0x9e>
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	b25b      	sxtb	r3, r3
 80136c8:	f003 030f 	and.w	r3, r3, #15
 80136cc:	b25a      	sxtb	r2, r3
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	b2db      	uxtb	r3, r3
 80136d2:	011b      	lsls	r3, r3, #4
 80136d4:	b25b      	sxtb	r3, r3
 80136d6:	4313      	orrs	r3, r2
 80136d8:	b25b      	sxtb	r3, r3
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	e001      	b.n	80136e2 <put_fat+0xa2>
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	b2db      	uxtb	r3, r3
 80136e2:	697a      	ldr	r2, [r7, #20]
 80136e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80136e6:	68fb      	ldr	r3, [r7, #12]
 80136e8:	2201      	movs	r2, #1
 80136ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80136f0:	69bb      	ldr	r3, [r7, #24]
 80136f2:	0a5b      	lsrs	r3, r3, #9
 80136f4:	4413      	add	r3, r2
 80136f6:	4619      	mov	r1, r3
 80136f8:	68f8      	ldr	r0, [r7, #12]
 80136fa:	f7ff fe41 	bl	8013380 <move_window>
 80136fe:	4603      	mov	r3, r0
 8013700:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013702:	7ffb      	ldrb	r3, [r7, #31]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d178      	bne.n	80137fa <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013714:	4413      	add	r3, r2
 8013716:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8013718:	68bb      	ldr	r3, [r7, #8]
 801371a:	f003 0301 	and.w	r3, r3, #1
 801371e:	2b00      	cmp	r3, #0
 8013720:	d003      	beq.n	801372a <put_fat+0xea>
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	091b      	lsrs	r3, r3, #4
 8013726:	b2db      	uxtb	r3, r3
 8013728:	e00e      	b.n	8013748 <put_fat+0x108>
 801372a:	697b      	ldr	r3, [r7, #20]
 801372c:	781b      	ldrb	r3, [r3, #0]
 801372e:	b25b      	sxtb	r3, r3
 8013730:	f023 030f 	bic.w	r3, r3, #15
 8013734:	b25a      	sxtb	r2, r3
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	0a1b      	lsrs	r3, r3, #8
 801373a:	b25b      	sxtb	r3, r3
 801373c:	f003 030f 	and.w	r3, r3, #15
 8013740:	b25b      	sxtb	r3, r3
 8013742:	4313      	orrs	r3, r2
 8013744:	b25b      	sxtb	r3, r3
 8013746:	b2db      	uxtb	r3, r3
 8013748:	697a      	ldr	r2, [r7, #20]
 801374a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2201      	movs	r2, #1
 8013750:	70da      	strb	r2, [r3, #3]
			break;
 8013752:	e057      	b.n	8013804 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013754:	68fb      	ldr	r3, [r7, #12]
 8013756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013758:	68bb      	ldr	r3, [r7, #8]
 801375a:	0a1b      	lsrs	r3, r3, #8
 801375c:	4413      	add	r3, r2
 801375e:	4619      	mov	r1, r3
 8013760:	68f8      	ldr	r0, [r7, #12]
 8013762:	f7ff fe0d 	bl	8013380 <move_window>
 8013766:	4603      	mov	r3, r0
 8013768:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801376a:	7ffb      	ldrb	r3, [r7, #31]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d146      	bne.n	80137fe <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013770:	68fb      	ldr	r3, [r7, #12]
 8013772:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013776:	68bb      	ldr	r3, [r7, #8]
 8013778:	005b      	lsls	r3, r3, #1
 801377a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801377e:	4413      	add	r3, r2
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	b292      	uxth	r2, r2
 8013784:	4611      	mov	r1, r2
 8013786:	4618      	mov	r0, r3
 8013788:	f7ff fb55 	bl	8012e36 <st_word>
			fs->wflag = 1;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2201      	movs	r2, #1
 8013790:	70da      	strb	r2, [r3, #3]
			break;
 8013792:	e037      	b.n	8013804 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013794:	68fb      	ldr	r3, [r7, #12]
 8013796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013798:	68bb      	ldr	r3, [r7, #8]
 801379a:	09db      	lsrs	r3, r3, #7
 801379c:	4413      	add	r3, r2
 801379e:	4619      	mov	r1, r3
 80137a0:	68f8      	ldr	r0, [r7, #12]
 80137a2:	f7ff fded 	bl	8013380 <move_window>
 80137a6:	4603      	mov	r3, r0
 80137a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80137aa:	7ffb      	ldrb	r3, [r7, #31]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d128      	bne.n	8013802 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137bc:	68bb      	ldr	r3, [r7, #8]
 80137be:	009b      	lsls	r3, r3, #2
 80137c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80137c4:	4413      	add	r3, r2
 80137c6:	4618      	mov	r0, r3
 80137c8:	f7ff fb12 	bl	8012df0 <ld_dword>
 80137cc:	4603      	mov	r3, r0
 80137ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80137d2:	4323      	orrs	r3, r4
 80137d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137dc:	68bb      	ldr	r3, [r7, #8]
 80137de:	009b      	lsls	r3, r3, #2
 80137e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80137e4:	4413      	add	r3, r2
 80137e6:	6879      	ldr	r1, [r7, #4]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7ff fb3f 	bl	8012e6c <st_dword>
			fs->wflag = 1;
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2201      	movs	r2, #1
 80137f2:	70da      	strb	r2, [r3, #3]
			break;
 80137f4:	e006      	b.n	8013804 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80137f6:	bf00      	nop
 80137f8:	e004      	b.n	8013804 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80137fa:	bf00      	nop
 80137fc:	e002      	b.n	8013804 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80137fe:	bf00      	nop
 8013800:	e000      	b.n	8013804 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013802:	bf00      	nop
		}
	}
	return res;
 8013804:	7ffb      	ldrb	r3, [r7, #31]
}
 8013806:	4618      	mov	r0, r3
 8013808:	3724      	adds	r7, #36	; 0x24
 801380a:	46bd      	mov	sp, r7
 801380c:	bd90      	pop	{r4, r7, pc}

0801380e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801380e:	b580      	push	{r7, lr}
 8013810:	b088      	sub	sp, #32
 8013812:	af00      	add	r7, sp, #0
 8013814:	60f8      	str	r0, [r7, #12]
 8013816:	60b9      	str	r1, [r7, #8]
 8013818:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801381a:	2300      	movs	r3, #0
 801381c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013824:	68bb      	ldr	r3, [r7, #8]
 8013826:	2b01      	cmp	r3, #1
 8013828:	d904      	bls.n	8013834 <remove_chain+0x26>
 801382a:	69bb      	ldr	r3, [r7, #24]
 801382c:	699b      	ldr	r3, [r3, #24]
 801382e:	68ba      	ldr	r2, [r7, #8]
 8013830:	429a      	cmp	r2, r3
 8013832:	d301      	bcc.n	8013838 <remove_chain+0x2a>
 8013834:	2302      	movs	r3, #2
 8013836:	e04b      	b.n	80138d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d00c      	beq.n	8013858 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801383e:	f04f 32ff 	mov.w	r2, #4294967295
 8013842:	6879      	ldr	r1, [r7, #4]
 8013844:	69b8      	ldr	r0, [r7, #24]
 8013846:	f7ff fefb 	bl	8013640 <put_fat>
 801384a:	4603      	mov	r3, r0
 801384c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801384e:	7ffb      	ldrb	r3, [r7, #31]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d001      	beq.n	8013858 <remove_chain+0x4a>
 8013854:	7ffb      	ldrb	r3, [r7, #31]
 8013856:	e03b      	b.n	80138d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8013858:	68b9      	ldr	r1, [r7, #8]
 801385a:	68f8      	ldr	r0, [r7, #12]
 801385c:	f7ff fe4b 	bl	80134f6 <get_fat>
 8013860:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d031      	beq.n	80138cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8013868:	697b      	ldr	r3, [r7, #20]
 801386a:	2b01      	cmp	r3, #1
 801386c:	d101      	bne.n	8013872 <remove_chain+0x64>
 801386e:	2302      	movs	r3, #2
 8013870:	e02e      	b.n	80138d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013878:	d101      	bne.n	801387e <remove_chain+0x70>
 801387a:	2301      	movs	r3, #1
 801387c:	e028      	b.n	80138d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801387e:	2200      	movs	r2, #0
 8013880:	68b9      	ldr	r1, [r7, #8]
 8013882:	69b8      	ldr	r0, [r7, #24]
 8013884:	f7ff fedc 	bl	8013640 <put_fat>
 8013888:	4603      	mov	r3, r0
 801388a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801388c:	7ffb      	ldrb	r3, [r7, #31]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d001      	beq.n	8013896 <remove_chain+0x88>
 8013892:	7ffb      	ldrb	r3, [r7, #31]
 8013894:	e01c      	b.n	80138d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8013896:	69bb      	ldr	r3, [r7, #24]
 8013898:	695a      	ldr	r2, [r3, #20]
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	699b      	ldr	r3, [r3, #24]
 801389e:	3b02      	subs	r3, #2
 80138a0:	429a      	cmp	r2, r3
 80138a2:	d20b      	bcs.n	80138bc <remove_chain+0xae>
			fs->free_clst++;
 80138a4:	69bb      	ldr	r3, [r7, #24]
 80138a6:	695b      	ldr	r3, [r3, #20]
 80138a8:	1c5a      	adds	r2, r3, #1
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	791b      	ldrb	r3, [r3, #4]
 80138b2:	f043 0301 	orr.w	r3, r3, #1
 80138b6:	b2da      	uxtb	r2, r3
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80138bc:	697b      	ldr	r3, [r7, #20]
 80138be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	699b      	ldr	r3, [r3, #24]
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	429a      	cmp	r2, r3
 80138c8:	d3c6      	bcc.n	8013858 <remove_chain+0x4a>
 80138ca:	e000      	b.n	80138ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80138cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80138ce:	2300      	movs	r3, #0
}
 80138d0:	4618      	mov	r0, r3
 80138d2:	3720      	adds	r7, #32
 80138d4:	46bd      	mov	sp, r7
 80138d6:	bd80      	pop	{r7, pc}

080138d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b088      	sub	sp, #32
 80138dc:	af00      	add	r7, sp, #0
 80138de:	6078      	str	r0, [r7, #4]
 80138e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80138e8:	683b      	ldr	r3, [r7, #0]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d10d      	bne.n	801390a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80138ee:	693b      	ldr	r3, [r7, #16]
 80138f0:	691b      	ldr	r3, [r3, #16]
 80138f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80138f4:	69bb      	ldr	r3, [r7, #24]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d004      	beq.n	8013904 <create_chain+0x2c>
 80138fa:	693b      	ldr	r3, [r7, #16]
 80138fc:	699b      	ldr	r3, [r3, #24]
 80138fe:	69ba      	ldr	r2, [r7, #24]
 8013900:	429a      	cmp	r2, r3
 8013902:	d31b      	bcc.n	801393c <create_chain+0x64>
 8013904:	2301      	movs	r3, #1
 8013906:	61bb      	str	r3, [r7, #24]
 8013908:	e018      	b.n	801393c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801390a:	6839      	ldr	r1, [r7, #0]
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f7ff fdf2 	bl	80134f6 <get_fat>
 8013912:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2b01      	cmp	r3, #1
 8013918:	d801      	bhi.n	801391e <create_chain+0x46>
 801391a:	2301      	movs	r3, #1
 801391c:	e070      	b.n	8013a00 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 801391e:	68fb      	ldr	r3, [r7, #12]
 8013920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013924:	d101      	bne.n	801392a <create_chain+0x52>
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	e06a      	b.n	8013a00 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801392a:	693b      	ldr	r3, [r7, #16]
 801392c:	699b      	ldr	r3, [r3, #24]
 801392e:	68fa      	ldr	r2, [r7, #12]
 8013930:	429a      	cmp	r2, r3
 8013932:	d201      	bcs.n	8013938 <create_chain+0x60>
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	e063      	b.n	8013a00 <create_chain+0x128>
		scl = clst;
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 801393c:	69bb      	ldr	r3, [r7, #24]
 801393e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	3301      	adds	r3, #1
 8013944:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8013946:	693b      	ldr	r3, [r7, #16]
 8013948:	699b      	ldr	r3, [r3, #24]
 801394a:	69fa      	ldr	r2, [r7, #28]
 801394c:	429a      	cmp	r2, r3
 801394e:	d307      	bcc.n	8013960 <create_chain+0x88>
				ncl = 2;
 8013950:	2302      	movs	r3, #2
 8013952:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013954:	69fa      	ldr	r2, [r7, #28]
 8013956:	69bb      	ldr	r3, [r7, #24]
 8013958:	429a      	cmp	r2, r3
 801395a:	d901      	bls.n	8013960 <create_chain+0x88>
 801395c:	2300      	movs	r3, #0
 801395e:	e04f      	b.n	8013a00 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013960:	69f9      	ldr	r1, [r7, #28]
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f7ff fdc7 	bl	80134f6 <get_fat>
 8013968:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801396a:	68fb      	ldr	r3, [r7, #12]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d00e      	beq.n	801398e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	2b01      	cmp	r3, #1
 8013974:	d003      	beq.n	801397e <create_chain+0xa6>
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	f1b3 3fff 	cmp.w	r3, #4294967295
 801397c:	d101      	bne.n	8013982 <create_chain+0xaa>
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	e03e      	b.n	8013a00 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013982:	69fa      	ldr	r2, [r7, #28]
 8013984:	69bb      	ldr	r3, [r7, #24]
 8013986:	429a      	cmp	r2, r3
 8013988:	d1da      	bne.n	8013940 <create_chain+0x68>
 801398a:	2300      	movs	r3, #0
 801398c:	e038      	b.n	8013a00 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801398e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013990:	f04f 32ff 	mov.w	r2, #4294967295
 8013994:	69f9      	ldr	r1, [r7, #28]
 8013996:	6938      	ldr	r0, [r7, #16]
 8013998:	f7ff fe52 	bl	8013640 <put_fat>
 801399c:	4603      	mov	r3, r0
 801399e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80139a0:	7dfb      	ldrb	r3, [r7, #23]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d109      	bne.n	80139ba <create_chain+0xe2>
 80139a6:	683b      	ldr	r3, [r7, #0]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d006      	beq.n	80139ba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80139ac:	69fa      	ldr	r2, [r7, #28]
 80139ae:	6839      	ldr	r1, [r7, #0]
 80139b0:	6938      	ldr	r0, [r7, #16]
 80139b2:	f7ff fe45 	bl	8013640 <put_fat>
 80139b6:	4603      	mov	r3, r0
 80139b8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80139ba:	7dfb      	ldrb	r3, [r7, #23]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d116      	bne.n	80139ee <create_chain+0x116>
		fs->last_clst = ncl;
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	69fa      	ldr	r2, [r7, #28]
 80139c4:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	695a      	ldr	r2, [r3, #20]
 80139ca:	693b      	ldr	r3, [r7, #16]
 80139cc:	699b      	ldr	r3, [r3, #24]
 80139ce:	3b02      	subs	r3, #2
 80139d0:	429a      	cmp	r2, r3
 80139d2:	d804      	bhi.n	80139de <create_chain+0x106>
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	695b      	ldr	r3, [r3, #20]
 80139d8:	1e5a      	subs	r2, r3, #1
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	791b      	ldrb	r3, [r3, #4]
 80139e2:	f043 0301 	orr.w	r3, r3, #1
 80139e6:	b2da      	uxtb	r2, r3
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	711a      	strb	r2, [r3, #4]
 80139ec:	e007      	b.n	80139fe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80139ee:	7dfb      	ldrb	r3, [r7, #23]
 80139f0:	2b01      	cmp	r3, #1
 80139f2:	d102      	bne.n	80139fa <create_chain+0x122>
 80139f4:	f04f 33ff 	mov.w	r3, #4294967295
 80139f8:	e000      	b.n	80139fc <create_chain+0x124>
 80139fa:	2301      	movs	r3, #1
 80139fc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80139fe:	69fb      	ldr	r3, [r7, #28]
}
 8013a00:	4618      	mov	r0, r3
 8013a02:	3720      	adds	r7, #32
 8013a04:	46bd      	mov	sp, r7
 8013a06:	bd80      	pop	{r7, pc}

08013a08 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b087      	sub	sp, #28
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
 8013a10:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a1c:	3304      	adds	r3, #4
 8013a1e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	0a5b      	lsrs	r3, r3, #9
 8013a24:	68fa      	ldr	r2, [r7, #12]
 8013a26:	8952      	ldrh	r2, [r2, #10]
 8013a28:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a2c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	1d1a      	adds	r2, r3, #4
 8013a32:	613a      	str	r2, [r7, #16]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013a38:	68bb      	ldr	r3, [r7, #8]
 8013a3a:	2b00      	cmp	r3, #0
 8013a3c:	d101      	bne.n	8013a42 <clmt_clust+0x3a>
 8013a3e:	2300      	movs	r3, #0
 8013a40:	e010      	b.n	8013a64 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013a42:	697a      	ldr	r2, [r7, #20]
 8013a44:	68bb      	ldr	r3, [r7, #8]
 8013a46:	429a      	cmp	r2, r3
 8013a48:	d307      	bcc.n	8013a5a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013a4a:	697a      	ldr	r2, [r7, #20]
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	1ad3      	subs	r3, r2, r3
 8013a50:	617b      	str	r3, [r7, #20]
 8013a52:	693b      	ldr	r3, [r7, #16]
 8013a54:	3304      	adds	r3, #4
 8013a56:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a58:	e7e9      	b.n	8013a2e <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013a5a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013a5c:	693b      	ldr	r3, [r7, #16]
 8013a5e:	681a      	ldr	r2, [r3, #0]
 8013a60:	697b      	ldr	r3, [r7, #20]
 8013a62:	4413      	add	r3, r2
}
 8013a64:	4618      	mov	r0, r3
 8013a66:	371c      	adds	r7, #28
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6e:	4770      	bx	lr

08013a70 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b086      	sub	sp, #24
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
 8013a78:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013a7a:	687b      	ldr	r3, [r7, #4]
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a86:	d204      	bcs.n	8013a92 <dir_sdi+0x22>
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	f003 031f 	and.w	r3, r3, #31
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d001      	beq.n	8013a96 <dir_sdi+0x26>
		return FR_INT_ERR;
 8013a92:	2302      	movs	r3, #2
 8013a94:	e063      	b.n	8013b5e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	683a      	ldr	r2, [r7, #0]
 8013a9a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	689b      	ldr	r3, [r3, #8]
 8013aa0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d106      	bne.n	8013ab6 <dir_sdi+0x46>
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	781b      	ldrb	r3, [r3, #0]
 8013aac:	2b02      	cmp	r3, #2
 8013aae:	d902      	bls.n	8013ab6 <dir_sdi+0x46>
		clst = fs->dirbase;
 8013ab0:	693b      	ldr	r3, [r7, #16]
 8013ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ab4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d10c      	bne.n	8013ad6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	095b      	lsrs	r3, r3, #5
 8013ac0:	693a      	ldr	r2, [r7, #16]
 8013ac2:	8912      	ldrh	r2, [r2, #8]
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d301      	bcc.n	8013acc <dir_sdi+0x5c>
 8013ac8:	2302      	movs	r3, #2
 8013aca:	e048      	b.n	8013b5e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013acc:	693b      	ldr	r3, [r7, #16]
 8013ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	61da      	str	r2, [r3, #28]
 8013ad4:	e029      	b.n	8013b2a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013ad6:	693b      	ldr	r3, [r7, #16]
 8013ad8:	895b      	ldrh	r3, [r3, #10]
 8013ada:	025b      	lsls	r3, r3, #9
 8013adc:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013ade:	e019      	b.n	8013b14 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	6979      	ldr	r1, [r7, #20]
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	f7ff fd06 	bl	80134f6 <get_fat>
 8013aea:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013aec:	697b      	ldr	r3, [r7, #20]
 8013aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013af2:	d101      	bne.n	8013af8 <dir_sdi+0x88>
 8013af4:	2301      	movs	r3, #1
 8013af6:	e032      	b.n	8013b5e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013af8:	697b      	ldr	r3, [r7, #20]
 8013afa:	2b01      	cmp	r3, #1
 8013afc:	d904      	bls.n	8013b08 <dir_sdi+0x98>
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	697a      	ldr	r2, [r7, #20]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d301      	bcc.n	8013b0c <dir_sdi+0x9c>
 8013b08:	2302      	movs	r3, #2
 8013b0a:	e028      	b.n	8013b5e <dir_sdi+0xee>
			ofs -= csz;
 8013b0c:	683a      	ldr	r2, [r7, #0]
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	1ad3      	subs	r3, r2, r3
 8013b12:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013b14:	683a      	ldr	r2, [r7, #0]
 8013b16:	68fb      	ldr	r3, [r7, #12]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d2e1      	bcs.n	8013ae0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013b1c:	6979      	ldr	r1, [r7, #20]
 8013b1e:	6938      	ldr	r0, [r7, #16]
 8013b20:	f7ff fcca 	bl	80134b8 <clust2sect>
 8013b24:	4602      	mov	r2, r0
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	697a      	ldr	r2, [r7, #20]
 8013b2e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	69db      	ldr	r3, [r3, #28]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <dir_sdi+0xcc>
 8013b38:	2302      	movs	r3, #2
 8013b3a:	e010      	b.n	8013b5e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	69da      	ldr	r2, [r3, #28]
 8013b40:	683b      	ldr	r3, [r7, #0]
 8013b42:	0a5b      	lsrs	r3, r3, #9
 8013b44:	441a      	add	r2, r3
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013b4a:	693b      	ldr	r3, [r7, #16]
 8013b4c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b50:	683b      	ldr	r3, [r7, #0]
 8013b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b56:	441a      	add	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013b5c:	2300      	movs	r3, #0
}
 8013b5e:	4618      	mov	r0, r3
 8013b60:	3718      	adds	r7, #24
 8013b62:	46bd      	mov	sp, r7
 8013b64:	bd80      	pop	{r7, pc}

08013b66 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013b66:	b580      	push	{r7, lr}
 8013b68:	b086      	sub	sp, #24
 8013b6a:	af00      	add	r7, sp, #0
 8013b6c:	6078      	str	r0, [r7, #4]
 8013b6e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013b70:	687b      	ldr	r3, [r7, #4]
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	695b      	ldr	r3, [r3, #20]
 8013b7a:	3320      	adds	r3, #32
 8013b7c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013b7e:	687b      	ldr	r3, [r7, #4]
 8013b80:	69db      	ldr	r3, [r3, #28]
 8013b82:	2b00      	cmp	r3, #0
 8013b84:	d003      	beq.n	8013b8e <dir_next+0x28>
 8013b86:	68bb      	ldr	r3, [r7, #8]
 8013b88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013b8c:	d301      	bcc.n	8013b92 <dir_next+0x2c>
 8013b8e:	2304      	movs	r3, #4
 8013b90:	e0aa      	b.n	8013ce8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	f040 8098 	bne.w	8013cce <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	69db      	ldr	r3, [r3, #28]
 8013ba2:	1c5a      	adds	r2, r3, #1
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013ba8:	687b      	ldr	r3, [r7, #4]
 8013baa:	699b      	ldr	r3, [r3, #24]
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d10b      	bne.n	8013bc8 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013bb0:	68bb      	ldr	r3, [r7, #8]
 8013bb2:	095b      	lsrs	r3, r3, #5
 8013bb4:	68fa      	ldr	r2, [r7, #12]
 8013bb6:	8912      	ldrh	r2, [r2, #8]
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	f0c0 8088 	bcc.w	8013cce <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	61da      	str	r2, [r3, #28]
 8013bc4:	2304      	movs	r3, #4
 8013bc6:	e08f      	b.n	8013ce8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	0a5b      	lsrs	r3, r3, #9
 8013bcc:	68fa      	ldr	r2, [r7, #12]
 8013bce:	8952      	ldrh	r2, [r2, #10]
 8013bd0:	3a01      	subs	r2, #1
 8013bd2:	4013      	ands	r3, r2
 8013bd4:	2b00      	cmp	r3, #0
 8013bd6:	d17a      	bne.n	8013cce <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013bd8:	687a      	ldr	r2, [r7, #4]
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	699b      	ldr	r3, [r3, #24]
 8013bde:	4619      	mov	r1, r3
 8013be0:	4610      	mov	r0, r2
 8013be2:	f7ff fc88 	bl	80134f6 <get_fat>
 8013be6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	2b01      	cmp	r3, #1
 8013bec:	d801      	bhi.n	8013bf2 <dir_next+0x8c>
 8013bee:	2302      	movs	r3, #2
 8013bf0:	e07a      	b.n	8013ce8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013bf8:	d101      	bne.n	8013bfe <dir_next+0x98>
 8013bfa:	2301      	movs	r3, #1
 8013bfc:	e074      	b.n	8013ce8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	699b      	ldr	r3, [r3, #24]
 8013c02:	697a      	ldr	r2, [r7, #20]
 8013c04:	429a      	cmp	r2, r3
 8013c06:	d358      	bcc.n	8013cba <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013c08:	683b      	ldr	r3, [r7, #0]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d104      	bne.n	8013c18 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2200      	movs	r2, #0
 8013c12:	61da      	str	r2, [r3, #28]
 8013c14:	2304      	movs	r3, #4
 8013c16:	e067      	b.n	8013ce8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013c18:	687a      	ldr	r2, [r7, #4]
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	699b      	ldr	r3, [r3, #24]
 8013c1e:	4619      	mov	r1, r3
 8013c20:	4610      	mov	r0, r2
 8013c22:	f7ff fe59 	bl	80138d8 <create_chain>
 8013c26:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d101      	bne.n	8013c32 <dir_next+0xcc>
 8013c2e:	2307      	movs	r3, #7
 8013c30:	e05a      	b.n	8013ce8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	2b01      	cmp	r3, #1
 8013c36:	d101      	bne.n	8013c3c <dir_next+0xd6>
 8013c38:	2302      	movs	r3, #2
 8013c3a:	e055      	b.n	8013ce8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c42:	d101      	bne.n	8013c48 <dir_next+0xe2>
 8013c44:	2301      	movs	r3, #1
 8013c46:	e04f      	b.n	8013ce8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013c48:	68f8      	ldr	r0, [r7, #12]
 8013c4a:	f7ff fb55 	bl	80132f8 <sync_window>
 8013c4e:	4603      	mov	r3, r0
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	d001      	beq.n	8013c58 <dir_next+0xf2>
 8013c54:	2301      	movs	r3, #1
 8013c56:	e047      	b.n	8013ce8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013c58:	68fb      	ldr	r3, [r7, #12]
 8013c5a:	3334      	adds	r3, #52	; 0x34
 8013c5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c60:	2100      	movs	r1, #0
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7ff f94f 	bl	8012f06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013c68:	2300      	movs	r3, #0
 8013c6a:	613b      	str	r3, [r7, #16]
 8013c6c:	6979      	ldr	r1, [r7, #20]
 8013c6e:	68f8      	ldr	r0, [r7, #12]
 8013c70:	f7ff fc22 	bl	80134b8 <clust2sect>
 8013c74:	4602      	mov	r2, r0
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	631a      	str	r2, [r3, #48]	; 0x30
 8013c7a:	e012      	b.n	8013ca2 <dir_next+0x13c>
						fs->wflag = 1;
 8013c7c:	68fb      	ldr	r3, [r7, #12]
 8013c7e:	2201      	movs	r2, #1
 8013c80:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f7ff fb38 	bl	80132f8 <sync_window>
 8013c88:	4603      	mov	r3, r0
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d001      	beq.n	8013c92 <dir_next+0x12c>
 8013c8e:	2301      	movs	r3, #1
 8013c90:	e02a      	b.n	8013ce8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	3301      	adds	r3, #1
 8013c96:	613b      	str	r3, [r7, #16]
 8013c98:	68fb      	ldr	r3, [r7, #12]
 8013c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013c9c:	1c5a      	adds	r2, r3, #1
 8013c9e:	68fb      	ldr	r3, [r7, #12]
 8013ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	895b      	ldrh	r3, [r3, #10]
 8013ca6:	461a      	mov	r2, r3
 8013ca8:	693b      	ldr	r3, [r7, #16]
 8013caa:	4293      	cmp	r3, r2
 8013cac:	d3e6      	bcc.n	8013c7c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	1ad2      	subs	r2, r2, r3
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	697a      	ldr	r2, [r7, #20]
 8013cbe:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013cc0:	6979      	ldr	r1, [r7, #20]
 8013cc2:	68f8      	ldr	r0, [r7, #12]
 8013cc4:	f7ff fbf8 	bl	80134b8 <clust2sect>
 8013cc8:	4602      	mov	r2, r0
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	68ba      	ldr	r2, [r7, #8]
 8013cd2:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013ce0:	441a      	add	r2, r3
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013ce6:	2300      	movs	r3, #0
}
 8013ce8:	4618      	mov	r0, r3
 8013cea:	3718      	adds	r7, #24
 8013cec:	46bd      	mov	sp, r7
 8013cee:	bd80      	pop	{r7, pc}

08013cf0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013cf0:	b580      	push	{r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	6078      	str	r0, [r7, #4]
 8013cf8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013d00:	2100      	movs	r1, #0
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f7ff feb4 	bl	8013a70 <dir_sdi>
 8013d08:	4603      	mov	r3, r0
 8013d0a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d0c:	7dfb      	ldrb	r3, [r7, #23]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d12b      	bne.n	8013d6a <dir_alloc+0x7a>
		n = 0;
 8013d12:	2300      	movs	r3, #0
 8013d14:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	69db      	ldr	r3, [r3, #28]
 8013d1a:	4619      	mov	r1, r3
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f7ff fb2f 	bl	8013380 <move_window>
 8013d22:	4603      	mov	r3, r0
 8013d24:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013d26:	7dfb      	ldrb	r3, [r7, #23]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d11d      	bne.n	8013d68 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	6a1b      	ldr	r3, [r3, #32]
 8013d30:	781b      	ldrb	r3, [r3, #0]
 8013d32:	2be5      	cmp	r3, #229	; 0xe5
 8013d34:	d004      	beq.n	8013d40 <dir_alloc+0x50>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6a1b      	ldr	r3, [r3, #32]
 8013d3a:	781b      	ldrb	r3, [r3, #0]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d107      	bne.n	8013d50 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013d40:	693b      	ldr	r3, [r7, #16]
 8013d42:	3301      	adds	r3, #1
 8013d44:	613b      	str	r3, [r7, #16]
 8013d46:	693a      	ldr	r2, [r7, #16]
 8013d48:	683b      	ldr	r3, [r7, #0]
 8013d4a:	429a      	cmp	r2, r3
 8013d4c:	d102      	bne.n	8013d54 <dir_alloc+0x64>
 8013d4e:	e00c      	b.n	8013d6a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013d50:	2300      	movs	r3, #0
 8013d52:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013d54:	2101      	movs	r1, #1
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f7ff ff05 	bl	8013b66 <dir_next>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013d60:	7dfb      	ldrb	r3, [r7, #23]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d0d7      	beq.n	8013d16 <dir_alloc+0x26>
 8013d66:	e000      	b.n	8013d6a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013d68:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013d6a:	7dfb      	ldrb	r3, [r7, #23]
 8013d6c:	2b04      	cmp	r3, #4
 8013d6e:	d101      	bne.n	8013d74 <dir_alloc+0x84>
 8013d70:	2307      	movs	r3, #7
 8013d72:	75fb      	strb	r3, [r7, #23]
	return res;
 8013d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d76:	4618      	mov	r0, r3
 8013d78:	3718      	adds	r7, #24
 8013d7a:	46bd      	mov	sp, r7
 8013d7c:	bd80      	pop	{r7, pc}

08013d7e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013d7e:	b580      	push	{r7, lr}
 8013d80:	b084      	sub	sp, #16
 8013d82:	af00      	add	r7, sp, #0
 8013d84:	6078      	str	r0, [r7, #4]
 8013d86:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013d88:	683b      	ldr	r3, [r7, #0]
 8013d8a:	331a      	adds	r3, #26
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7ff f817 	bl	8012dc0 <ld_word>
 8013d92:	4603      	mov	r3, r0
 8013d94:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	781b      	ldrb	r3, [r3, #0]
 8013d9a:	2b03      	cmp	r3, #3
 8013d9c:	d109      	bne.n	8013db2 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	3314      	adds	r3, #20
 8013da2:	4618      	mov	r0, r3
 8013da4:	f7ff f80c 	bl	8012dc0 <ld_word>
 8013da8:	4603      	mov	r3, r0
 8013daa:	041b      	lsls	r3, r3, #16
 8013dac:	68fa      	ldr	r2, [r7, #12]
 8013dae:	4313      	orrs	r3, r2
 8013db0:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013db2:	68fb      	ldr	r3, [r7, #12]
}
 8013db4:	4618      	mov	r0, r3
 8013db6:	3710      	adds	r7, #16
 8013db8:	46bd      	mov	sp, r7
 8013dba:	bd80      	pop	{r7, pc}

08013dbc <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013dbc:	b580      	push	{r7, lr}
 8013dbe:	b084      	sub	sp, #16
 8013dc0:	af00      	add	r7, sp, #0
 8013dc2:	60f8      	str	r0, [r7, #12]
 8013dc4:	60b9      	str	r1, [r7, #8]
 8013dc6:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013dc8:	68bb      	ldr	r3, [r7, #8]
 8013dca:	331a      	adds	r3, #26
 8013dcc:	687a      	ldr	r2, [r7, #4]
 8013dce:	b292      	uxth	r2, r2
 8013dd0:	4611      	mov	r1, r2
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	f7ff f82f 	bl	8012e36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013dd8:	68fb      	ldr	r3, [r7, #12]
 8013dda:	781b      	ldrb	r3, [r3, #0]
 8013ddc:	2b03      	cmp	r3, #3
 8013dde:	d109      	bne.n	8013df4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013de0:	68bb      	ldr	r3, [r7, #8]
 8013de2:	f103 0214 	add.w	r2, r3, #20
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	0c1b      	lsrs	r3, r3, #16
 8013dea:	b29b      	uxth	r3, r3
 8013dec:	4619      	mov	r1, r3
 8013dee:	4610      	mov	r0, r2
 8013df0:	f7ff f821 	bl	8012e36 <st_word>
	}
}
 8013df4:	bf00      	nop
 8013df6:	3710      	adds	r7, #16
 8013df8:	46bd      	mov	sp, r7
 8013dfa:	bd80      	pop	{r7, pc}

08013dfc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013dfc:	b580      	push	{r7, lr}
 8013dfe:	b086      	sub	sp, #24
 8013e00:	af00      	add	r7, sp, #0
 8013e02:	6078      	str	r0, [r7, #4]
 8013e04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013e06:	2304      	movs	r3, #4
 8013e08:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013e10:	e03c      	b.n	8013e8c <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	69db      	ldr	r3, [r3, #28]
 8013e16:	4619      	mov	r1, r3
 8013e18:	6938      	ldr	r0, [r7, #16]
 8013e1a:	f7ff fab1 	bl	8013380 <move_window>
 8013e1e:	4603      	mov	r3, r0
 8013e20:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013e22:	7dfb      	ldrb	r3, [r7, #23]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d136      	bne.n	8013e96 <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	6a1b      	ldr	r3, [r3, #32]
 8013e2c:	781b      	ldrb	r3, [r3, #0]
 8013e2e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013e30:	7bfb      	ldrb	r3, [r7, #15]
 8013e32:	2b00      	cmp	r3, #0
 8013e34:	d102      	bne.n	8013e3c <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013e36:	2304      	movs	r3, #4
 8013e38:	75fb      	strb	r3, [r7, #23]
 8013e3a:	e031      	b.n	8013ea0 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a1b      	ldr	r3, [r3, #32]
 8013e40:	330b      	adds	r3, #11
 8013e42:	781b      	ldrb	r3, [r3, #0]
 8013e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e48:	73bb      	strb	r3, [r7, #14]
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	7bba      	ldrb	r2, [r7, #14]
 8013e4e:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013e50:	7bfb      	ldrb	r3, [r7, #15]
 8013e52:	2be5      	cmp	r3, #229	; 0xe5
 8013e54:	d011      	beq.n	8013e7a <dir_read+0x7e>
 8013e56:	7bfb      	ldrb	r3, [r7, #15]
 8013e58:	2b2e      	cmp	r3, #46	; 0x2e
 8013e5a:	d00e      	beq.n	8013e7a <dir_read+0x7e>
 8013e5c:	7bbb      	ldrb	r3, [r7, #14]
 8013e5e:	2b0f      	cmp	r3, #15
 8013e60:	d00b      	beq.n	8013e7a <dir_read+0x7e>
 8013e62:	7bbb      	ldrb	r3, [r7, #14]
 8013e64:	f023 0320 	bic.w	r3, r3, #32
 8013e68:	2b08      	cmp	r3, #8
 8013e6a:	bf0c      	ite	eq
 8013e6c:	2301      	moveq	r3, #1
 8013e6e:	2300      	movne	r3, #0
 8013e70:	b2db      	uxtb	r3, r3
 8013e72:	461a      	mov	r2, r3
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d00f      	beq.n	8013e9a <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013e7a:	2100      	movs	r1, #0
 8013e7c:	6878      	ldr	r0, [r7, #4]
 8013e7e:	f7ff fe72 	bl	8013b66 <dir_next>
 8013e82:	4603      	mov	r3, r0
 8013e84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013e86:	7dfb      	ldrb	r3, [r7, #23]
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d108      	bne.n	8013e9e <dir_read+0xa2>
	while (dp->sect) {
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	69db      	ldr	r3, [r3, #28]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d1be      	bne.n	8013e12 <dir_read+0x16>
 8013e94:	e004      	b.n	8013ea0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013e96:	bf00      	nop
 8013e98:	e002      	b.n	8013ea0 <dir_read+0xa4>
				break;
 8013e9a:	bf00      	nop
 8013e9c:	e000      	b.n	8013ea0 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013e9e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013ea0:	7dfb      	ldrb	r3, [r7, #23]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d002      	beq.n	8013eac <dir_read+0xb0>
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	2200      	movs	r2, #0
 8013eaa:	61da      	str	r2, [r3, #28]
	return res;
 8013eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8013eae:	4618      	mov	r0, r3
 8013eb0:	3718      	adds	r7, #24
 8013eb2:	46bd      	mov	sp, r7
 8013eb4:	bd80      	pop	{r7, pc}

08013eb6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013eb6:	b580      	push	{r7, lr}
 8013eb8:	b086      	sub	sp, #24
 8013eba:	af00      	add	r7, sp, #0
 8013ebc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013ebe:	687b      	ldr	r3, [r7, #4]
 8013ec0:	681b      	ldr	r3, [r3, #0]
 8013ec2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013ec4:	2100      	movs	r1, #0
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f7ff fdd2 	bl	8013a70 <dir_sdi>
 8013ecc:	4603      	mov	r3, r0
 8013ece:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013ed0:	7dfb      	ldrb	r3, [r7, #23]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	d001      	beq.n	8013eda <dir_find+0x24>
 8013ed6:	7dfb      	ldrb	r3, [r7, #23]
 8013ed8:	e03e      	b.n	8013f58 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	69db      	ldr	r3, [r3, #28]
 8013ede:	4619      	mov	r1, r3
 8013ee0:	6938      	ldr	r0, [r7, #16]
 8013ee2:	f7ff fa4d 	bl	8013380 <move_window>
 8013ee6:	4603      	mov	r3, r0
 8013ee8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013eea:	7dfb      	ldrb	r3, [r7, #23]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d12f      	bne.n	8013f50 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6a1b      	ldr	r3, [r3, #32]
 8013ef4:	781b      	ldrb	r3, [r3, #0]
 8013ef6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013ef8:	7bfb      	ldrb	r3, [r7, #15]
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d102      	bne.n	8013f04 <dir_find+0x4e>
 8013efe:	2304      	movs	r3, #4
 8013f00:	75fb      	strb	r3, [r7, #23]
 8013f02:	e028      	b.n	8013f56 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	6a1b      	ldr	r3, [r3, #32]
 8013f08:	330b      	adds	r3, #11
 8013f0a:	781b      	ldrb	r3, [r3, #0]
 8013f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f10:	b2da      	uxtb	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013f16:	687b      	ldr	r3, [r7, #4]
 8013f18:	6a1b      	ldr	r3, [r3, #32]
 8013f1a:	330b      	adds	r3, #11
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	f003 0308 	and.w	r3, r3, #8
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d10a      	bne.n	8013f3c <dir_find+0x86>
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	6a18      	ldr	r0, [r3, #32]
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	3324      	adds	r3, #36	; 0x24
 8013f2e:	220b      	movs	r2, #11
 8013f30:	4619      	mov	r1, r3
 8013f32:	f7ff f802 	bl	8012f3a <mem_cmp>
 8013f36:	4603      	mov	r3, r0
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d00b      	beq.n	8013f54 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013f3c:	2100      	movs	r1, #0
 8013f3e:	6878      	ldr	r0, [r7, #4]
 8013f40:	f7ff fe11 	bl	8013b66 <dir_next>
 8013f44:	4603      	mov	r3, r0
 8013f46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013f48:	7dfb      	ldrb	r3, [r7, #23]
 8013f4a:	2b00      	cmp	r3, #0
 8013f4c:	d0c5      	beq.n	8013eda <dir_find+0x24>
 8013f4e:	e002      	b.n	8013f56 <dir_find+0xa0>
		if (res != FR_OK) break;
 8013f50:	bf00      	nop
 8013f52:	e000      	b.n	8013f56 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013f54:	bf00      	nop

	return res;
 8013f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f58:	4618      	mov	r0, r3
 8013f5a:	3718      	adds	r7, #24
 8013f5c:	46bd      	mov	sp, r7
 8013f5e:	bd80      	pop	{r7, pc}

08013f60 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013f60:	b580      	push	{r7, lr}
 8013f62:	b084      	sub	sp, #16
 8013f64:	af00      	add	r7, sp, #0
 8013f66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	681b      	ldr	r3, [r3, #0]
 8013f6c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013f6e:	2101      	movs	r1, #1
 8013f70:	6878      	ldr	r0, [r7, #4]
 8013f72:	f7ff febd 	bl	8013cf0 <dir_alloc>
 8013f76:	4603      	mov	r3, r0
 8013f78:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013f7a:	7bfb      	ldrb	r3, [r7, #15]
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d11c      	bne.n	8013fba <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	69db      	ldr	r3, [r3, #28]
 8013f84:	4619      	mov	r1, r3
 8013f86:	68b8      	ldr	r0, [r7, #8]
 8013f88:	f7ff f9fa 	bl	8013380 <move_window>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013f90:	7bfb      	ldrb	r3, [r7, #15]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d111      	bne.n	8013fba <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6a1b      	ldr	r3, [r3, #32]
 8013f9a:	2220      	movs	r2, #32
 8013f9c:	2100      	movs	r1, #0
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	f7fe ffb1 	bl	8012f06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	6a18      	ldr	r0, [r3, #32]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	3324      	adds	r3, #36	; 0x24
 8013fac:	220b      	movs	r2, #11
 8013fae:	4619      	mov	r1, r3
 8013fb0:	f7fe ff88 	bl	8012ec4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	2201      	movs	r2, #1
 8013fb8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013fba:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fbc:	4618      	mov	r0, r3
 8013fbe:	3710      	adds	r7, #16
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b086      	sub	sp, #24
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]
 8013fcc:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013fce:	683b      	ldr	r3, [r7, #0]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	69db      	ldr	r3, [r3, #28]
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d04e      	beq.n	801407a <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8013fdc:	2300      	movs	r3, #0
 8013fde:	613b      	str	r3, [r7, #16]
 8013fe0:	693b      	ldr	r3, [r7, #16]
 8013fe2:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8013fe4:	e021      	b.n	801402a <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	6a1a      	ldr	r2, [r3, #32]
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	1c59      	adds	r1, r3, #1
 8013fee:	6179      	str	r1, [r7, #20]
 8013ff0:	4413      	add	r3, r2
 8013ff2:	781b      	ldrb	r3, [r3, #0]
 8013ff4:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8013ff6:	7bfb      	ldrb	r3, [r7, #15]
 8013ff8:	2b20      	cmp	r3, #32
 8013ffa:	d100      	bne.n	8013ffe <get_fileinfo+0x3a>
 8013ffc:	e015      	b.n	801402a <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013ffe:	7bfb      	ldrb	r3, [r7, #15]
 8014000:	2b05      	cmp	r3, #5
 8014002:	d101      	bne.n	8014008 <get_fileinfo+0x44>
 8014004:	23e5      	movs	r3, #229	; 0xe5
 8014006:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8014008:	697b      	ldr	r3, [r7, #20]
 801400a:	2b09      	cmp	r3, #9
 801400c:	d106      	bne.n	801401c <get_fileinfo+0x58>
 801400e:	693b      	ldr	r3, [r7, #16]
 8014010:	1c5a      	adds	r2, r3, #1
 8014012:	613a      	str	r2, [r7, #16]
 8014014:	683a      	ldr	r2, [r7, #0]
 8014016:	4413      	add	r3, r2
 8014018:	222e      	movs	r2, #46	; 0x2e
 801401a:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 801401c:	693b      	ldr	r3, [r7, #16]
 801401e:	1c5a      	adds	r2, r3, #1
 8014020:	613a      	str	r2, [r7, #16]
 8014022:	683a      	ldr	r2, [r7, #0]
 8014024:	4413      	add	r3, r2
 8014026:	7bfa      	ldrb	r2, [r7, #15]
 8014028:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	2b0a      	cmp	r3, #10
 801402e:	d9da      	bls.n	8013fe6 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8014030:	683a      	ldr	r2, [r7, #0]
 8014032:	693b      	ldr	r3, [r7, #16]
 8014034:	4413      	add	r3, r2
 8014036:	3309      	adds	r3, #9
 8014038:	2200      	movs	r2, #0
 801403a:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6a1b      	ldr	r3, [r3, #32]
 8014040:	7ada      	ldrb	r2, [r3, #11]
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6a1b      	ldr	r3, [r3, #32]
 801404a:	331c      	adds	r3, #28
 801404c:	4618      	mov	r0, r3
 801404e:	f7fe fecf 	bl	8012df0 <ld_dword>
 8014052:	4602      	mov	r2, r0
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	6a1b      	ldr	r3, [r3, #32]
 801405c:	3316      	adds	r3, #22
 801405e:	4618      	mov	r0, r3
 8014060:	f7fe fec6 	bl	8012df0 <ld_dword>
 8014064:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	b29a      	uxth	r2, r3
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	80da      	strh	r2, [r3, #6]
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	0c1b      	lsrs	r3, r3, #16
 8014072:	b29a      	uxth	r2, r3
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	809a      	strh	r2, [r3, #4]
 8014078:	e000      	b.n	801407c <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801407a:	bf00      	nop
}
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
	...

08014084 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8014084:	b480      	push	{r7}
 8014086:	b085      	sub	sp, #20
 8014088:	af00      	add	r7, sp, #0
 801408a:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	1c59      	adds	r1, r3, #1
 8014092:	687a      	ldr	r2, [r7, #4]
 8014094:	6011      	str	r1, [r2, #0]
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801409a:	89fb      	ldrh	r3, [r7, #14]
 801409c:	2b60      	cmp	r3, #96	; 0x60
 801409e:	d905      	bls.n	80140ac <get_achar+0x28>
 80140a0:	89fb      	ldrh	r3, [r7, #14]
 80140a2:	2b7a      	cmp	r3, #122	; 0x7a
 80140a4:	d802      	bhi.n	80140ac <get_achar+0x28>
 80140a6:	89fb      	ldrh	r3, [r7, #14]
 80140a8:	3b20      	subs	r3, #32
 80140aa:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80140ac:	89fb      	ldrh	r3, [r7, #14]
 80140ae:	2b7f      	cmp	r3, #127	; 0x7f
 80140b0:	d904      	bls.n	80140bc <get_achar+0x38>
 80140b2:	89fb      	ldrh	r3, [r7, #14]
 80140b4:	3b80      	subs	r3, #128	; 0x80
 80140b6:	4a05      	ldr	r2, [pc, #20]	; (80140cc <get_achar+0x48>)
 80140b8:	5cd3      	ldrb	r3, [r2, r3]
 80140ba:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80140bc:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3714      	adds	r7, #20
 80140c2:	46bd      	mov	sp, r7
 80140c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140c8:	4770      	bx	lr
 80140ca:	bf00      	nop
 80140cc:	0801d86c 	.word	0x0801d86c

080140d0 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b08a      	sub	sp, #40	; 0x28
 80140d4:	af00      	add	r7, sp, #0
 80140d6:	60f8      	str	r0, [r7, #12]
 80140d8:	60b9      	str	r1, [r7, #8]
 80140da:	607a      	str	r2, [r7, #4]
 80140dc:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 80140de:	e009      	b.n	80140f4 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80140e0:	f107 0308 	add.w	r3, r7, #8
 80140e4:	4618      	mov	r0, r3
 80140e6:	f7ff ffcd 	bl	8014084 <get_achar>
 80140ea:	4603      	mov	r3, r0
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d101      	bne.n	80140f4 <pattern_matching+0x24>
 80140f0:	2300      	movs	r3, #0
 80140f2:	e064      	b.n	80141be <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	1e5a      	subs	r2, r3, #1
 80140f8:	607a      	str	r2, [r7, #4]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d1f0      	bne.n	80140e0 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	781b      	ldrb	r3, [r3, #0]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d104      	bne.n	8014110 <pattern_matching+0x40>
 8014106:	683b      	ldr	r3, [r7, #0]
 8014108:	2b00      	cmp	r3, #0
 801410a:	d001      	beq.n	8014110 <pattern_matching+0x40>
 801410c:	2301      	movs	r3, #1
 801410e:	e056      	b.n	80141be <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8014110:	68fb      	ldr	r3, [r7, #12]
 8014112:	617b      	str	r3, [r7, #20]
 8014114:	68bb      	ldr	r3, [r7, #8]
 8014116:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	781b      	ldrb	r3, [r3, #0]
 801411c:	2b3f      	cmp	r3, #63	; 0x3f
 801411e:	d003      	beq.n	8014128 <pattern_matching+0x58>
 8014120:	697b      	ldr	r3, [r7, #20]
 8014122:	781b      	ldrb	r3, [r3, #0]
 8014124:	2b2a      	cmp	r3, #42	; 0x2a
 8014126:	d126      	bne.n	8014176 <pattern_matching+0xa6>
				nm = nx = 0;
 8014128:	2300      	movs	r3, #0
 801412a:	61fb      	str	r3, [r7, #28]
 801412c:	69fb      	ldr	r3, [r7, #28]
 801412e:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	1c5a      	adds	r2, r3, #1
 8014134:	617a      	str	r2, [r7, #20]
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	2b3f      	cmp	r3, #63	; 0x3f
 801413a:	d103      	bne.n	8014144 <pattern_matching+0x74>
 801413c:	6a3b      	ldr	r3, [r7, #32]
 801413e:	3301      	adds	r3, #1
 8014140:	623b      	str	r3, [r7, #32]
 8014142:	e001      	b.n	8014148 <pattern_matching+0x78>
 8014144:	2301      	movs	r3, #1
 8014146:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 8014148:	697b      	ldr	r3, [r7, #20]
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	2b3f      	cmp	r3, #63	; 0x3f
 801414e:	d0ef      	beq.n	8014130 <pattern_matching+0x60>
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	781b      	ldrb	r3, [r3, #0]
 8014154:	2b2a      	cmp	r3, #42	; 0x2a
 8014156:	d0eb      	beq.n	8014130 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8014158:	6978      	ldr	r0, [r7, #20]
 801415a:	6939      	ldr	r1, [r7, #16]
 801415c:	69fb      	ldr	r3, [r7, #28]
 801415e:	6a3a      	ldr	r2, [r7, #32]
 8014160:	f7ff ffb6 	bl	80140d0 <pattern_matching>
 8014164:	4603      	mov	r3, r0
 8014166:	2b00      	cmp	r3, #0
 8014168:	d001      	beq.n	801416e <pattern_matching+0x9e>
 801416a:	2301      	movs	r3, #1
 801416c:	e027      	b.n	80141be <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 801416e:	693b      	ldr	r3, [r7, #16]
 8014170:	781b      	ldrb	r3, [r3, #0]
 8014172:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014174:	e017      	b.n	80141a6 <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 8014176:	f107 0314 	add.w	r3, r7, #20
 801417a:	4618      	mov	r0, r3
 801417c:	f7ff ff82 	bl	8014084 <get_achar>
 8014180:	4603      	mov	r3, r0
 8014182:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8014184:	f107 0310 	add.w	r3, r7, #16
 8014188:	4618      	mov	r0, r3
 801418a:	f7ff ff7b 	bl	8014084 <get_achar>
 801418e:	4603      	mov	r3, r0
 8014190:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8014192:	8b7a      	ldrh	r2, [r7, #26]
 8014194:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014196:	429a      	cmp	r2, r3
 8014198:	d104      	bne.n	80141a4 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801419a:	8b7b      	ldrh	r3, [r7, #26]
 801419c:	2b00      	cmp	r3, #0
 801419e:	d1bb      	bne.n	8014118 <pattern_matching+0x48>
 80141a0:	2301      	movs	r3, #1
 80141a2:	e00c      	b.n	80141be <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80141a4:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80141a6:	f107 0308 	add.w	r3, r7, #8
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7ff ff6a 	bl	8014084 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	d002      	beq.n	80141bc <pattern_matching+0xec>
 80141b6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d1a9      	bne.n	8014110 <pattern_matching+0x40>

	return 0;
 80141bc:	2300      	movs	r3, #0
}
 80141be:	4618      	mov	r0, r3
 80141c0:	3728      	adds	r7, #40	; 0x28
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
	...

080141c8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b088      	sub	sp, #32
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
 80141d0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80141d2:	683b      	ldr	r3, [r7, #0]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	60fb      	str	r3, [r7, #12]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	3324      	adds	r3, #36	; 0x24
 80141dc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80141de:	220b      	movs	r2, #11
 80141e0:	2120      	movs	r1, #32
 80141e2:	68b8      	ldr	r0, [r7, #8]
 80141e4:	f7fe fe8f 	bl	8012f06 <mem_set>
	si = i = 0; ni = 8;
 80141e8:	2300      	movs	r3, #0
 80141ea:	613b      	str	r3, [r7, #16]
 80141ec:	693b      	ldr	r3, [r7, #16]
 80141ee:	617b      	str	r3, [r7, #20]
 80141f0:	2308      	movs	r3, #8
 80141f2:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	1c5a      	adds	r2, r3, #1
 80141f8:	617a      	str	r2, [r7, #20]
 80141fa:	68fa      	ldr	r2, [r7, #12]
 80141fc:	4413      	add	r3, r2
 80141fe:	781b      	ldrb	r3, [r3, #0]
 8014200:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014202:	7ffb      	ldrb	r3, [r7, #31]
 8014204:	2b20      	cmp	r3, #32
 8014206:	d94e      	bls.n	80142a6 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8014208:	7ffb      	ldrb	r3, [r7, #31]
 801420a:	2b2f      	cmp	r3, #47	; 0x2f
 801420c:	d006      	beq.n	801421c <create_name+0x54>
 801420e:	7ffb      	ldrb	r3, [r7, #31]
 8014210:	2b5c      	cmp	r3, #92	; 0x5c
 8014212:	d110      	bne.n	8014236 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014214:	e002      	b.n	801421c <create_name+0x54>
 8014216:	697b      	ldr	r3, [r7, #20]
 8014218:	3301      	adds	r3, #1
 801421a:	617b      	str	r3, [r7, #20]
 801421c:	68fa      	ldr	r2, [r7, #12]
 801421e:	697b      	ldr	r3, [r7, #20]
 8014220:	4413      	add	r3, r2
 8014222:	781b      	ldrb	r3, [r3, #0]
 8014224:	2b2f      	cmp	r3, #47	; 0x2f
 8014226:	d0f6      	beq.n	8014216 <create_name+0x4e>
 8014228:	68fa      	ldr	r2, [r7, #12]
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	4413      	add	r3, r2
 801422e:	781b      	ldrb	r3, [r3, #0]
 8014230:	2b5c      	cmp	r3, #92	; 0x5c
 8014232:	d0f0      	beq.n	8014216 <create_name+0x4e>
			break;
 8014234:	e038      	b.n	80142a8 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8014236:	7ffb      	ldrb	r3, [r7, #31]
 8014238:	2b2e      	cmp	r3, #46	; 0x2e
 801423a:	d003      	beq.n	8014244 <create_name+0x7c>
 801423c:	693a      	ldr	r2, [r7, #16]
 801423e:	69bb      	ldr	r3, [r7, #24]
 8014240:	429a      	cmp	r2, r3
 8014242:	d30c      	bcc.n	801425e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014244:	69bb      	ldr	r3, [r7, #24]
 8014246:	2b0b      	cmp	r3, #11
 8014248:	d002      	beq.n	8014250 <create_name+0x88>
 801424a:	7ffb      	ldrb	r3, [r7, #31]
 801424c:	2b2e      	cmp	r3, #46	; 0x2e
 801424e:	d001      	beq.n	8014254 <create_name+0x8c>
 8014250:	2306      	movs	r3, #6
 8014252:	e044      	b.n	80142de <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014254:	2308      	movs	r3, #8
 8014256:	613b      	str	r3, [r7, #16]
 8014258:	230b      	movs	r3, #11
 801425a:	61bb      	str	r3, [r7, #24]
			continue;
 801425c:	e022      	b.n	80142a4 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801425e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014262:	2b00      	cmp	r3, #0
 8014264:	da04      	bge.n	8014270 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8014266:	7ffb      	ldrb	r3, [r7, #31]
 8014268:	3b80      	subs	r3, #128	; 0x80
 801426a:	4a1f      	ldr	r2, [pc, #124]	; (80142e8 <create_name+0x120>)
 801426c:	5cd3      	ldrb	r3, [r2, r3]
 801426e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014270:	7ffb      	ldrb	r3, [r7, #31]
 8014272:	4619      	mov	r1, r3
 8014274:	481d      	ldr	r0, [pc, #116]	; (80142ec <create_name+0x124>)
 8014276:	f7fe fe87 	bl	8012f88 <chk_chr>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d001      	beq.n	8014284 <create_name+0xbc>
 8014280:	2306      	movs	r3, #6
 8014282:	e02c      	b.n	80142de <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014284:	7ffb      	ldrb	r3, [r7, #31]
 8014286:	2b60      	cmp	r3, #96	; 0x60
 8014288:	d905      	bls.n	8014296 <create_name+0xce>
 801428a:	7ffb      	ldrb	r3, [r7, #31]
 801428c:	2b7a      	cmp	r3, #122	; 0x7a
 801428e:	d802      	bhi.n	8014296 <create_name+0xce>
 8014290:	7ffb      	ldrb	r3, [r7, #31]
 8014292:	3b20      	subs	r3, #32
 8014294:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8014296:	693b      	ldr	r3, [r7, #16]
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	613a      	str	r2, [r7, #16]
 801429c:	68ba      	ldr	r2, [r7, #8]
 801429e:	4413      	add	r3, r2
 80142a0:	7ffa      	ldrb	r2, [r7, #31]
 80142a2:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80142a4:	e7a6      	b.n	80141f4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80142a6:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80142a8:	68fa      	ldr	r2, [r7, #12]
 80142aa:	697b      	ldr	r3, [r7, #20]
 80142ac:	441a      	add	r2, r3
 80142ae:	683b      	ldr	r3, [r7, #0]
 80142b0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80142b2:	693b      	ldr	r3, [r7, #16]
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d101      	bne.n	80142bc <create_name+0xf4>
 80142b8:	2306      	movs	r3, #6
 80142ba:	e010      	b.n	80142de <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	781b      	ldrb	r3, [r3, #0]
 80142c0:	2be5      	cmp	r3, #229	; 0xe5
 80142c2:	d102      	bne.n	80142ca <create_name+0x102>
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	2205      	movs	r2, #5
 80142c8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80142ca:	7ffb      	ldrb	r3, [r7, #31]
 80142cc:	2b20      	cmp	r3, #32
 80142ce:	d801      	bhi.n	80142d4 <create_name+0x10c>
 80142d0:	2204      	movs	r2, #4
 80142d2:	e000      	b.n	80142d6 <create_name+0x10e>
 80142d4:	2200      	movs	r2, #0
 80142d6:	68bb      	ldr	r3, [r7, #8]
 80142d8:	330b      	adds	r3, #11
 80142da:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80142dc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80142de:	4618      	mov	r0, r3
 80142e0:	3720      	adds	r7, #32
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	0801d86c 	.word	0x0801d86c
 80142ec:	0801d62c 	.word	0x0801d62c

080142f0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80142f0:	b580      	push	{r7, lr}
 80142f2:	b086      	sub	sp, #24
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
 80142f8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80142fe:	693b      	ldr	r3, [r7, #16]
 8014300:	681b      	ldr	r3, [r3, #0]
 8014302:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014304:	e002      	b.n	801430c <follow_path+0x1c>
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	3301      	adds	r3, #1
 801430a:	603b      	str	r3, [r7, #0]
 801430c:	683b      	ldr	r3, [r7, #0]
 801430e:	781b      	ldrb	r3, [r3, #0]
 8014310:	2b2f      	cmp	r3, #47	; 0x2f
 8014312:	d0f8      	beq.n	8014306 <follow_path+0x16>
 8014314:	683b      	ldr	r3, [r7, #0]
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	2b5c      	cmp	r3, #92	; 0x5c
 801431a:	d0f4      	beq.n	8014306 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 801431c:	693b      	ldr	r3, [r7, #16]
 801431e:	2200      	movs	r2, #0
 8014320:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014322:	683b      	ldr	r3, [r7, #0]
 8014324:	781b      	ldrb	r3, [r3, #0]
 8014326:	2b1f      	cmp	r3, #31
 8014328:	d80a      	bhi.n	8014340 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801432a:	687b      	ldr	r3, [r7, #4]
 801432c:	2280      	movs	r2, #128	; 0x80
 801432e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014332:	2100      	movs	r1, #0
 8014334:	6878      	ldr	r0, [r7, #4]
 8014336:	f7ff fb9b 	bl	8013a70 <dir_sdi>
 801433a:	4603      	mov	r3, r0
 801433c:	75fb      	strb	r3, [r7, #23]
 801433e:	e043      	b.n	80143c8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014340:	463b      	mov	r3, r7
 8014342:	4619      	mov	r1, r3
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f7ff ff3f 	bl	80141c8 <create_name>
 801434a:	4603      	mov	r3, r0
 801434c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801434e:	7dfb      	ldrb	r3, [r7, #23]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d134      	bne.n	80143be <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014354:	6878      	ldr	r0, [r7, #4]
 8014356:	f7ff fdae 	bl	8013eb6 <dir_find>
 801435a:	4603      	mov	r3, r0
 801435c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801435e:	687b      	ldr	r3, [r7, #4]
 8014360:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014364:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8014366:	7dfb      	ldrb	r3, [r7, #23]
 8014368:	2b00      	cmp	r3, #0
 801436a:	d00a      	beq.n	8014382 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 801436c:	7dfb      	ldrb	r3, [r7, #23]
 801436e:	2b04      	cmp	r3, #4
 8014370:	d127      	bne.n	80143c2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014372:	7afb      	ldrb	r3, [r7, #11]
 8014374:	f003 0304 	and.w	r3, r3, #4
 8014378:	2b00      	cmp	r3, #0
 801437a:	d122      	bne.n	80143c2 <follow_path+0xd2>
 801437c:	2305      	movs	r3, #5
 801437e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014380:	e01f      	b.n	80143c2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014382:	7afb      	ldrb	r3, [r7, #11]
 8014384:	f003 0304 	and.w	r3, r3, #4
 8014388:	2b00      	cmp	r3, #0
 801438a:	d11c      	bne.n	80143c6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	799b      	ldrb	r3, [r3, #6]
 8014390:	f003 0310 	and.w	r3, r3, #16
 8014394:	2b00      	cmp	r3, #0
 8014396:	d102      	bne.n	801439e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8014398:	2305      	movs	r3, #5
 801439a:	75fb      	strb	r3, [r7, #23]
 801439c:	e014      	b.n	80143c8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801439e:	68fb      	ldr	r3, [r7, #12]
 80143a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	695b      	ldr	r3, [r3, #20]
 80143a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143ac:	4413      	add	r3, r2
 80143ae:	4619      	mov	r1, r3
 80143b0:	68f8      	ldr	r0, [r7, #12]
 80143b2:	f7ff fce4 	bl	8013d7e <ld_clust>
 80143b6:	4602      	mov	r2, r0
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80143bc:	e7c0      	b.n	8014340 <follow_path+0x50>
			if (res != FR_OK) break;
 80143be:	bf00      	nop
 80143c0:	e002      	b.n	80143c8 <follow_path+0xd8>
				break;
 80143c2:	bf00      	nop
 80143c4:	e000      	b.n	80143c8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80143c6:	bf00      	nop
			}
		}
	}

	return res;
 80143c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80143ca:	4618      	mov	r0, r3
 80143cc:	3718      	adds	r7, #24
 80143ce:	46bd      	mov	sp, r7
 80143d0:	bd80      	pop	{r7, pc}

080143d2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80143d2:	b480      	push	{r7}
 80143d4:	b087      	sub	sp, #28
 80143d6:	af00      	add	r7, sp, #0
 80143d8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80143da:	f04f 33ff 	mov.w	r3, #4294967295
 80143de:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681b      	ldr	r3, [r3, #0]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d031      	beq.n	801444c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	617b      	str	r3, [r7, #20]
 80143ee:	e002      	b.n	80143f6 <get_ldnumber+0x24>
 80143f0:	697b      	ldr	r3, [r7, #20]
 80143f2:	3301      	adds	r3, #1
 80143f4:	617b      	str	r3, [r7, #20]
 80143f6:	697b      	ldr	r3, [r7, #20]
 80143f8:	781b      	ldrb	r3, [r3, #0]
 80143fa:	2b20      	cmp	r3, #32
 80143fc:	d903      	bls.n	8014406 <get_ldnumber+0x34>
 80143fe:	697b      	ldr	r3, [r7, #20]
 8014400:	781b      	ldrb	r3, [r3, #0]
 8014402:	2b3a      	cmp	r3, #58	; 0x3a
 8014404:	d1f4      	bne.n	80143f0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8014406:	697b      	ldr	r3, [r7, #20]
 8014408:	781b      	ldrb	r3, [r3, #0]
 801440a:	2b3a      	cmp	r3, #58	; 0x3a
 801440c:	d11c      	bne.n	8014448 <get_ldnumber+0x76>
			tp = *path;
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	1c5a      	adds	r2, r3, #1
 8014418:	60fa      	str	r2, [r7, #12]
 801441a:	781b      	ldrb	r3, [r3, #0]
 801441c:	3b30      	subs	r3, #48	; 0x30
 801441e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014420:	68bb      	ldr	r3, [r7, #8]
 8014422:	2b09      	cmp	r3, #9
 8014424:	d80e      	bhi.n	8014444 <get_ldnumber+0x72>
 8014426:	68fa      	ldr	r2, [r7, #12]
 8014428:	697b      	ldr	r3, [r7, #20]
 801442a:	429a      	cmp	r2, r3
 801442c:	d10a      	bne.n	8014444 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d107      	bne.n	8014444 <get_ldnumber+0x72>
					vol = (int)i;
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	3301      	adds	r3, #1
 801443c:	617b      	str	r3, [r7, #20]
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	697a      	ldr	r2, [r7, #20]
 8014442:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	e002      	b.n	801444e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8014448:	2300      	movs	r3, #0
 801444a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801444c:	693b      	ldr	r3, [r7, #16]
}
 801444e:	4618      	mov	r0, r3
 8014450:	371c      	adds	r7, #28
 8014452:	46bd      	mov	sp, r7
 8014454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014458:	4770      	bx	lr
	...

0801445c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801445c:	b580      	push	{r7, lr}
 801445e:	b082      	sub	sp, #8
 8014460:	af00      	add	r7, sp, #0
 8014462:	6078      	str	r0, [r7, #4]
 8014464:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	2200      	movs	r2, #0
 801446a:	70da      	strb	r2, [r3, #3]
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	f04f 32ff 	mov.w	r2, #4294967295
 8014472:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014474:	6839      	ldr	r1, [r7, #0]
 8014476:	6878      	ldr	r0, [r7, #4]
 8014478:	f7fe ff82 	bl	8013380 <move_window>
 801447c:	4603      	mov	r3, r0
 801447e:	2b00      	cmp	r3, #0
 8014480:	d001      	beq.n	8014486 <check_fs+0x2a>
 8014482:	2304      	movs	r3, #4
 8014484:	e038      	b.n	80144f8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	3334      	adds	r3, #52	; 0x34
 801448a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801448e:	4618      	mov	r0, r3
 8014490:	f7fe fc96 	bl	8012dc0 <ld_word>
 8014494:	4603      	mov	r3, r0
 8014496:	461a      	mov	r2, r3
 8014498:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801449c:	429a      	cmp	r2, r3
 801449e:	d001      	beq.n	80144a4 <check_fs+0x48>
 80144a0:	2303      	movs	r3, #3
 80144a2:	e029      	b.n	80144f8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144aa:	2be9      	cmp	r3, #233	; 0xe9
 80144ac:	d009      	beq.n	80144c2 <check_fs+0x66>
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144b4:	2beb      	cmp	r3, #235	; 0xeb
 80144b6:	d11e      	bne.n	80144f6 <check_fs+0x9a>
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80144be:	2b90      	cmp	r3, #144	; 0x90
 80144c0:	d119      	bne.n	80144f6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	3334      	adds	r3, #52	; 0x34
 80144c6:	3336      	adds	r3, #54	; 0x36
 80144c8:	4618      	mov	r0, r3
 80144ca:	f7fe fc91 	bl	8012df0 <ld_dword>
 80144ce:	4603      	mov	r3, r0
 80144d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80144d4:	4a0a      	ldr	r2, [pc, #40]	; (8014500 <check_fs+0xa4>)
 80144d6:	4293      	cmp	r3, r2
 80144d8:	d101      	bne.n	80144de <check_fs+0x82>
 80144da:	2300      	movs	r3, #0
 80144dc:	e00c      	b.n	80144f8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	3334      	adds	r3, #52	; 0x34
 80144e2:	3352      	adds	r3, #82	; 0x52
 80144e4:	4618      	mov	r0, r3
 80144e6:	f7fe fc83 	bl	8012df0 <ld_dword>
 80144ea:	4602      	mov	r2, r0
 80144ec:	4b05      	ldr	r3, [pc, #20]	; (8014504 <check_fs+0xa8>)
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d101      	bne.n	80144f6 <check_fs+0x9a>
 80144f2:	2300      	movs	r3, #0
 80144f4:	e000      	b.n	80144f8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80144f6:	2302      	movs	r3, #2
}
 80144f8:	4618      	mov	r0, r3
 80144fa:	3708      	adds	r7, #8
 80144fc:	46bd      	mov	sp, r7
 80144fe:	bd80      	pop	{r7, pc}
 8014500:	00544146 	.word	0x00544146
 8014504:	33544146 	.word	0x33544146

08014508 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8014508:	b580      	push	{r7, lr}
 801450a:	b096      	sub	sp, #88	; 0x58
 801450c:	af00      	add	r7, sp, #0
 801450e:	60f8      	str	r0, [r7, #12]
 8014510:	60b9      	str	r1, [r7, #8]
 8014512:	4613      	mov	r3, r2
 8014514:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8014516:	68bb      	ldr	r3, [r7, #8]
 8014518:	2200      	movs	r2, #0
 801451a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801451c:	68f8      	ldr	r0, [r7, #12]
 801451e:	f7ff ff58 	bl	80143d2 <get_ldnumber>
 8014522:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014526:	2b00      	cmp	r3, #0
 8014528:	da01      	bge.n	801452e <find_volume+0x26>
 801452a:	230b      	movs	r3, #11
 801452c:	e236      	b.n	801499c <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801452e:	4aac      	ldr	r2, [pc, #688]	; (80147e0 <find_volume+0x2d8>)
 8014530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014536:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8014538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801453a:	2b00      	cmp	r3, #0
 801453c:	d101      	bne.n	8014542 <find_volume+0x3a>
 801453e:	230c      	movs	r3, #12
 8014540:	e22c      	b.n	801499c <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8014542:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014544:	f7fe fd3b 	bl	8012fbe <lock_fs>
 8014548:	4603      	mov	r3, r0
 801454a:	2b00      	cmp	r3, #0
 801454c:	d101      	bne.n	8014552 <find_volume+0x4a>
 801454e:	230f      	movs	r3, #15
 8014550:	e224      	b.n	801499c <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8014552:	68bb      	ldr	r3, [r7, #8]
 8014554:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014556:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8014558:	79fb      	ldrb	r3, [r7, #7]
 801455a:	f023 0301 	bic.w	r3, r3, #1
 801455e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	2b00      	cmp	r3, #0
 8014566:	d01a      	beq.n	801459e <find_volume+0x96>
		stat = disk_status(fs->drv);
 8014568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801456a:	785b      	ldrb	r3, [r3, #1]
 801456c:	4618      	mov	r0, r3
 801456e:	f7fe fb89 	bl	8012c84 <disk_status>
 8014572:	4603      	mov	r3, r0
 8014574:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8014578:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801457c:	f003 0301 	and.w	r3, r3, #1
 8014580:	2b00      	cmp	r3, #0
 8014582:	d10c      	bne.n	801459e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014584:	79fb      	ldrb	r3, [r7, #7]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d007      	beq.n	801459a <find_volume+0x92>
 801458a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801458e:	f003 0304 	and.w	r3, r3, #4
 8014592:	2b00      	cmp	r3, #0
 8014594:	d001      	beq.n	801459a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8014596:	230a      	movs	r3, #10
 8014598:	e200      	b.n	801499c <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801459a:	2300      	movs	r3, #0
 801459c:	e1fe      	b.n	801499c <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801459e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145a0:	2200      	movs	r2, #0
 80145a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80145a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145a6:	b2da      	uxtb	r2, r3
 80145a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80145ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ae:	785b      	ldrb	r3, [r3, #1]
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7fe fb81 	bl	8012cb8 <disk_initialize>
 80145b6:	4603      	mov	r3, r0
 80145b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80145bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145c0:	f003 0301 	and.w	r3, r3, #1
 80145c4:	2b00      	cmp	r3, #0
 80145c6:	d001      	beq.n	80145cc <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80145c8:	2303      	movs	r3, #3
 80145ca:	e1e7      	b.n	801499c <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80145cc:	79fb      	ldrb	r3, [r7, #7]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d007      	beq.n	80145e2 <find_volume+0xda>
 80145d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145d6:	f003 0304 	and.w	r3, r3, #4
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d001      	beq.n	80145e2 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80145de:	230a      	movs	r3, #10
 80145e0:	e1dc      	b.n	801499c <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80145e2:	2300      	movs	r3, #0
 80145e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80145e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80145e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145ea:	f7ff ff37 	bl	801445c <check_fs>
 80145ee:	4603      	mov	r3, r0
 80145f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80145f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80145f8:	2b02      	cmp	r3, #2
 80145fa:	d14b      	bne.n	8014694 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80145fc:	2300      	movs	r3, #0
 80145fe:	643b      	str	r3, [r7, #64]	; 0x40
 8014600:	e01f      	b.n	8014642 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014602:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014604:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014608:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801460a:	011b      	lsls	r3, r3, #4
 801460c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014610:	4413      	add	r3, r2
 8014612:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014616:	3304      	adds	r3, #4
 8014618:	781b      	ldrb	r3, [r3, #0]
 801461a:	2b00      	cmp	r3, #0
 801461c:	d006      	beq.n	801462c <find_volume+0x124>
 801461e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014620:	3308      	adds	r3, #8
 8014622:	4618      	mov	r0, r3
 8014624:	f7fe fbe4 	bl	8012df0 <ld_dword>
 8014628:	4602      	mov	r2, r0
 801462a:	e000      	b.n	801462e <find_volume+0x126>
 801462c:	2200      	movs	r2, #0
 801462e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014630:	009b      	lsls	r3, r3, #2
 8014632:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8014636:	440b      	add	r3, r1
 8014638:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801463c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801463e:	3301      	adds	r3, #1
 8014640:	643b      	str	r3, [r7, #64]	; 0x40
 8014642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014644:	2b03      	cmp	r3, #3
 8014646:	d9dc      	bls.n	8014602 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8014648:	2300      	movs	r3, #0
 801464a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801464c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801464e:	2b00      	cmp	r3, #0
 8014650:	d002      	beq.n	8014658 <find_volume+0x150>
 8014652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014654:	3b01      	subs	r3, #1
 8014656:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8014658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801465a:	009b      	lsls	r3, r3, #2
 801465c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014660:	4413      	add	r3, r2
 8014662:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8014666:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8014668:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801466a:	2b00      	cmp	r3, #0
 801466c:	d005      	beq.n	801467a <find_volume+0x172>
 801466e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014670:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014672:	f7ff fef3 	bl	801445c <check_fs>
 8014676:	4603      	mov	r3, r0
 8014678:	e000      	b.n	801467c <find_volume+0x174>
 801467a:	2303      	movs	r3, #3
 801467c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014680:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014684:	2b01      	cmp	r3, #1
 8014686:	d905      	bls.n	8014694 <find_volume+0x18c>
 8014688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801468a:	3301      	adds	r3, #1
 801468c:	643b      	str	r3, [r7, #64]	; 0x40
 801468e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014690:	2b03      	cmp	r3, #3
 8014692:	d9e1      	bls.n	8014658 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014698:	2b04      	cmp	r3, #4
 801469a:	d101      	bne.n	80146a0 <find_volume+0x198>
 801469c:	2301      	movs	r3, #1
 801469e:	e17d      	b.n	801499c <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80146a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146a4:	2b01      	cmp	r3, #1
 80146a6:	d901      	bls.n	80146ac <find_volume+0x1a4>
 80146a8:	230d      	movs	r3, #13
 80146aa:	e177      	b.n	801499c <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80146ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ae:	3334      	adds	r3, #52	; 0x34
 80146b0:	330b      	adds	r3, #11
 80146b2:	4618      	mov	r0, r3
 80146b4:	f7fe fb84 	bl	8012dc0 <ld_word>
 80146b8:	4603      	mov	r3, r0
 80146ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146be:	d001      	beq.n	80146c4 <find_volume+0x1bc>
 80146c0:	230d      	movs	r3, #13
 80146c2:	e16b      	b.n	801499c <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80146c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c6:	3334      	adds	r3, #52	; 0x34
 80146c8:	3316      	adds	r3, #22
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fe fb78 	bl	8012dc0 <ld_word>
 80146d0:	4603      	mov	r3, r0
 80146d2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80146d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d106      	bne.n	80146e8 <find_volume+0x1e0>
 80146da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146dc:	3334      	adds	r3, #52	; 0x34
 80146de:	3324      	adds	r3, #36	; 0x24
 80146e0:	4618      	mov	r0, r3
 80146e2:	f7fe fb85 	bl	8012df0 <ld_dword>
 80146e6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80146e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80146ec:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80146ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f0:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80146f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80146f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fa:	789b      	ldrb	r3, [r3, #2]
 80146fc:	2b01      	cmp	r3, #1
 80146fe:	d005      	beq.n	801470c <find_volume+0x204>
 8014700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014702:	789b      	ldrb	r3, [r3, #2]
 8014704:	2b02      	cmp	r3, #2
 8014706:	d001      	beq.n	801470c <find_volume+0x204>
 8014708:	230d      	movs	r3, #13
 801470a:	e147      	b.n	801499c <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470e:	789b      	ldrb	r3, [r3, #2]
 8014710:	461a      	mov	r2, r3
 8014712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014714:	fb02 f303 	mul.w	r3, r2, r3
 8014718:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801471a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014720:	b29a      	uxth	r2, r3
 8014722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014724:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8014726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014728:	895b      	ldrh	r3, [r3, #10]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d008      	beq.n	8014740 <find_volume+0x238>
 801472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014730:	895b      	ldrh	r3, [r3, #10]
 8014732:	461a      	mov	r2, r3
 8014734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014736:	895b      	ldrh	r3, [r3, #10]
 8014738:	3b01      	subs	r3, #1
 801473a:	4013      	ands	r3, r2
 801473c:	2b00      	cmp	r3, #0
 801473e:	d001      	beq.n	8014744 <find_volume+0x23c>
 8014740:	230d      	movs	r3, #13
 8014742:	e12b      	b.n	801499c <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014746:	3334      	adds	r3, #52	; 0x34
 8014748:	3311      	adds	r3, #17
 801474a:	4618      	mov	r0, r3
 801474c:	f7fe fb38 	bl	8012dc0 <ld_word>
 8014750:	4603      	mov	r3, r0
 8014752:	461a      	mov	r2, r3
 8014754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014756:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8014758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475a:	891b      	ldrh	r3, [r3, #8]
 801475c:	f003 030f 	and.w	r3, r3, #15
 8014760:	b29b      	uxth	r3, r3
 8014762:	2b00      	cmp	r3, #0
 8014764:	d001      	beq.n	801476a <find_volume+0x262>
 8014766:	230d      	movs	r3, #13
 8014768:	e118      	b.n	801499c <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476c:	3334      	adds	r3, #52	; 0x34
 801476e:	3313      	adds	r3, #19
 8014770:	4618      	mov	r0, r3
 8014772:	f7fe fb25 	bl	8012dc0 <ld_word>
 8014776:	4603      	mov	r3, r0
 8014778:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801477a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801477c:	2b00      	cmp	r3, #0
 801477e:	d106      	bne.n	801478e <find_volume+0x286>
 8014780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014782:	3334      	adds	r3, #52	; 0x34
 8014784:	3320      	adds	r3, #32
 8014786:	4618      	mov	r0, r3
 8014788:	f7fe fb32 	bl	8012df0 <ld_dword>
 801478c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801478e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014790:	3334      	adds	r3, #52	; 0x34
 8014792:	330e      	adds	r3, #14
 8014794:	4618      	mov	r0, r3
 8014796:	f7fe fb13 	bl	8012dc0 <ld_word>
 801479a:	4603      	mov	r3, r0
 801479c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801479e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d101      	bne.n	80147a8 <find_volume+0x2a0>
 80147a4:	230d      	movs	r3, #13
 80147a6:	e0f9      	b.n	801499c <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80147a8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147ac:	4413      	add	r3, r2
 80147ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147b0:	8912      	ldrh	r2, [r2, #8]
 80147b2:	0912      	lsrs	r2, r2, #4
 80147b4:	b292      	uxth	r2, r2
 80147b6:	4413      	add	r3, r2
 80147b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80147ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147be:	429a      	cmp	r2, r3
 80147c0:	d201      	bcs.n	80147c6 <find_volume+0x2be>
 80147c2:	230d      	movs	r3, #13
 80147c4:	e0ea      	b.n	801499c <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80147c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ca:	1ad3      	subs	r3, r2, r3
 80147cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147ce:	8952      	ldrh	r2, [r2, #10]
 80147d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80147d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80147d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d103      	bne.n	80147e4 <find_volume+0x2dc>
 80147dc:	230d      	movs	r3, #13
 80147de:	e0dd      	b.n	801499c <find_volume+0x494>
 80147e0:	200003c4 	.word	0x200003c4
		fmt = FS_FAT32;
 80147e4:	2303      	movs	r3, #3
 80147e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80147ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ec:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80147f0:	4293      	cmp	r3, r2
 80147f2:	d802      	bhi.n	80147fa <find_volume+0x2f2>
 80147f4:	2302      	movs	r3, #2
 80147f6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fc:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014800:	4293      	cmp	r3, r2
 8014802:	d802      	bhi.n	801480a <find_volume+0x302>
 8014804:	2301      	movs	r3, #1
 8014806:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801480a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480c:	1c9a      	adds	r2, r3, #2
 801480e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014810:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014814:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014816:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8014818:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801481a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801481c:	441a      	add	r2, r3
 801481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014820:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014822:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014826:	441a      	add	r2, r3
 8014828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801482a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801482c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014830:	2b03      	cmp	r3, #3
 8014832:	d11e      	bne.n	8014872 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014836:	3334      	adds	r3, #52	; 0x34
 8014838:	332a      	adds	r3, #42	; 0x2a
 801483a:	4618      	mov	r0, r3
 801483c:	f7fe fac0 	bl	8012dc0 <ld_word>
 8014840:	4603      	mov	r3, r0
 8014842:	2b00      	cmp	r3, #0
 8014844:	d001      	beq.n	801484a <find_volume+0x342>
 8014846:	230d      	movs	r3, #13
 8014848:	e0a8      	b.n	801499c <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801484a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484c:	891b      	ldrh	r3, [r3, #8]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d001      	beq.n	8014856 <find_volume+0x34e>
 8014852:	230d      	movs	r3, #13
 8014854:	e0a2      	b.n	801499c <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8014856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014858:	3334      	adds	r3, #52	; 0x34
 801485a:	332c      	adds	r3, #44	; 0x2c
 801485c:	4618      	mov	r0, r3
 801485e:	f7fe fac7 	bl	8012df0 <ld_dword>
 8014862:	4602      	mov	r2, r0
 8014864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014866:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8014868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801486a:	699b      	ldr	r3, [r3, #24]
 801486c:	009b      	lsls	r3, r3, #2
 801486e:	647b      	str	r3, [r7, #68]	; 0x44
 8014870:	e01f      	b.n	80148b2 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014874:	891b      	ldrh	r3, [r3, #8]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d101      	bne.n	801487e <find_volume+0x376>
 801487a:	230d      	movs	r3, #13
 801487c:	e08e      	b.n	801499c <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801487e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014880:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014884:	441a      	add	r2, r3
 8014886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014888:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801488a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801488e:	2b02      	cmp	r3, #2
 8014890:	d103      	bne.n	801489a <find_volume+0x392>
 8014892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014894:	699b      	ldr	r3, [r3, #24]
 8014896:	005b      	lsls	r3, r3, #1
 8014898:	e00a      	b.n	80148b0 <find_volume+0x3a8>
 801489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489c:	699a      	ldr	r2, [r3, #24]
 801489e:	4613      	mov	r3, r2
 80148a0:	005b      	lsls	r3, r3, #1
 80148a2:	4413      	add	r3, r2
 80148a4:	085a      	lsrs	r2, r3, #1
 80148a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a8:	699b      	ldr	r3, [r3, #24]
 80148aa:	f003 0301 	and.w	r3, r3, #1
 80148ae:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80148b0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80148b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b4:	69da      	ldr	r2, [r3, #28]
 80148b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148b8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80148bc:	0a5b      	lsrs	r3, r3, #9
 80148be:	429a      	cmp	r2, r3
 80148c0:	d201      	bcs.n	80148c6 <find_volume+0x3be>
 80148c2:	230d      	movs	r3, #13
 80148c4:	e06a      	b.n	801499c <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80148c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c8:	f04f 32ff 	mov.w	r2, #4294967295
 80148cc:	615a      	str	r2, [r3, #20]
 80148ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d0:	695a      	ldr	r2, [r3, #20]
 80148d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80148d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148d8:	2280      	movs	r2, #128	; 0x80
 80148da:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80148dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148e0:	2b03      	cmp	r3, #3
 80148e2:	d149      	bne.n	8014978 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80148e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e6:	3334      	adds	r3, #52	; 0x34
 80148e8:	3330      	adds	r3, #48	; 0x30
 80148ea:	4618      	mov	r0, r3
 80148ec:	f7fe fa68 	bl	8012dc0 <ld_word>
 80148f0:	4603      	mov	r3, r0
 80148f2:	2b01      	cmp	r3, #1
 80148f4:	d140      	bne.n	8014978 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80148f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80148f8:	3301      	adds	r3, #1
 80148fa:	4619      	mov	r1, r3
 80148fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80148fe:	f7fe fd3f 	bl	8013380 <move_window>
 8014902:	4603      	mov	r3, r0
 8014904:	2b00      	cmp	r3, #0
 8014906:	d137      	bne.n	8014978 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 8014908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801490a:	2200      	movs	r2, #0
 801490c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801490e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014910:	3334      	adds	r3, #52	; 0x34
 8014912:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014916:	4618      	mov	r0, r3
 8014918:	f7fe fa52 	bl	8012dc0 <ld_word>
 801491c:	4603      	mov	r3, r0
 801491e:	461a      	mov	r2, r3
 8014920:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014924:	429a      	cmp	r2, r3
 8014926:	d127      	bne.n	8014978 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801492a:	3334      	adds	r3, #52	; 0x34
 801492c:	4618      	mov	r0, r3
 801492e:	f7fe fa5f 	bl	8012df0 <ld_dword>
 8014932:	4602      	mov	r2, r0
 8014934:	4b1b      	ldr	r3, [pc, #108]	; (80149a4 <find_volume+0x49c>)
 8014936:	429a      	cmp	r2, r3
 8014938:	d11e      	bne.n	8014978 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801493a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493c:	3334      	adds	r3, #52	; 0x34
 801493e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014942:	4618      	mov	r0, r3
 8014944:	f7fe fa54 	bl	8012df0 <ld_dword>
 8014948:	4602      	mov	r2, r0
 801494a:	4b17      	ldr	r3, [pc, #92]	; (80149a8 <find_volume+0x4a0>)
 801494c:	429a      	cmp	r2, r3
 801494e:	d113      	bne.n	8014978 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014952:	3334      	adds	r3, #52	; 0x34
 8014954:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8014958:	4618      	mov	r0, r3
 801495a:	f7fe fa49 	bl	8012df0 <ld_dword>
 801495e:	4602      	mov	r2, r0
 8014960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014962:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014966:	3334      	adds	r3, #52	; 0x34
 8014968:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801496c:	4618      	mov	r0, r3
 801496e:	f7fe fa3f 	bl	8012df0 <ld_dword>
 8014972:	4602      	mov	r2, r0
 8014974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014976:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8014978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801497e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014980:	4b0a      	ldr	r3, [pc, #40]	; (80149ac <find_volume+0x4a4>)
 8014982:	881b      	ldrh	r3, [r3, #0]
 8014984:	3301      	adds	r3, #1
 8014986:	b29a      	uxth	r2, r3
 8014988:	4b08      	ldr	r3, [pc, #32]	; (80149ac <find_volume+0x4a4>)
 801498a:	801a      	strh	r2, [r3, #0]
 801498c:	4b07      	ldr	r3, [pc, #28]	; (80149ac <find_volume+0x4a4>)
 801498e:	881a      	ldrh	r2, [r3, #0]
 8014990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014992:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014994:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014996:	f7fe fc8b 	bl	80132b0 <clear_lock>
#endif
	return FR_OK;
 801499a:	2300      	movs	r3, #0
}
 801499c:	4618      	mov	r0, r3
 801499e:	3758      	adds	r7, #88	; 0x58
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd80      	pop	{r7, pc}
 80149a4:	41615252 	.word	0x41615252
 80149a8:	61417272 	.word	0x61417272
 80149ac:	200003c8 	.word	0x200003c8

080149b0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80149b0:	b580      	push	{r7, lr}
 80149b2:	b084      	sub	sp, #16
 80149b4:	af00      	add	r7, sp, #0
 80149b6:	6078      	str	r0, [r7, #4]
 80149b8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80149ba:	2309      	movs	r3, #9
 80149bc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	2b00      	cmp	r3, #0
 80149c2:	d02e      	beq.n	8014a22 <validate+0x72>
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d02a      	beq.n	8014a22 <validate+0x72>
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	781b      	ldrb	r3, [r3, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d025      	beq.n	8014a22 <validate+0x72>
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	889a      	ldrh	r2, [r3, #4]
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	88db      	ldrh	r3, [r3, #6]
 80149e0:	429a      	cmp	r2, r3
 80149e2:	d11e      	bne.n	8014a22 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	4618      	mov	r0, r3
 80149ea:	f7fe fae8 	bl	8012fbe <lock_fs>
 80149ee:	4603      	mov	r3, r0
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d014      	beq.n	8014a1e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	785b      	ldrb	r3, [r3, #1]
 80149fa:	4618      	mov	r0, r3
 80149fc:	f7fe f942 	bl	8012c84 <disk_status>
 8014a00:	4603      	mov	r3, r0
 8014a02:	f003 0301 	and.w	r3, r3, #1
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d102      	bne.n	8014a10 <validate+0x60>
				res = FR_OK;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	73fb      	strb	r3, [r7, #15]
 8014a0e:	e008      	b.n	8014a22 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	681b      	ldr	r3, [r3, #0]
 8014a14:	2100      	movs	r1, #0
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7fe fae7 	bl	8012fea <unlock_fs>
 8014a1c:	e001      	b.n	8014a22 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014a1e:	230f      	movs	r3, #15
 8014a20:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014a22:	7bfb      	ldrb	r3, [r7, #15]
 8014a24:	2b00      	cmp	r3, #0
 8014a26:	d102      	bne.n	8014a2e <validate+0x7e>
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	681b      	ldr	r3, [r3, #0]
 8014a2c:	e000      	b.n	8014a30 <validate+0x80>
 8014a2e:	2300      	movs	r3, #0
 8014a30:	683a      	ldr	r2, [r7, #0]
 8014a32:	6013      	str	r3, [r2, #0]
	return res;
 8014a34:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a36:	4618      	mov	r0, r3
 8014a38:	3710      	adds	r7, #16
 8014a3a:	46bd      	mov	sp, r7
 8014a3c:	bd80      	pop	{r7, pc}
	...

08014a40 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b088      	sub	sp, #32
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	4613      	mov	r3, r2
 8014a4c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014a52:	f107 0310 	add.w	r3, r7, #16
 8014a56:	4618      	mov	r0, r3
 8014a58:	f7ff fcbb 	bl	80143d2 <get_ldnumber>
 8014a5c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a5e:	69fb      	ldr	r3, [r7, #28]
 8014a60:	2b00      	cmp	r3, #0
 8014a62:	da01      	bge.n	8014a68 <f_mount+0x28>
 8014a64:	230b      	movs	r3, #11
 8014a66:	e048      	b.n	8014afa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014a68:	4a26      	ldr	r2, [pc, #152]	; (8014b04 <f_mount+0xc4>)
 8014a6a:	69fb      	ldr	r3, [r7, #28]
 8014a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a70:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014a72:	69bb      	ldr	r3, [r7, #24]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d00f      	beq.n	8014a98 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014a78:	69b8      	ldr	r0, [r7, #24]
 8014a7a:	f7fe fc19 	bl	80132b0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014a7e:	69bb      	ldr	r3, [r7, #24]
 8014a80:	68db      	ldr	r3, [r3, #12]
 8014a82:	4618      	mov	r0, r3
 8014a84:	f001 f828 	bl	8015ad8 <ff_del_syncobj>
 8014a88:	4603      	mov	r3, r0
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	d101      	bne.n	8014a92 <f_mount+0x52>
 8014a8e:	2302      	movs	r3, #2
 8014a90:	e033      	b.n	8014afa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014a92:	69bb      	ldr	r3, [r7, #24]
 8014a94:	2200      	movs	r2, #0
 8014a96:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014a98:	68fb      	ldr	r3, [r7, #12]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d00f      	beq.n	8014abe <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	2200      	movs	r2, #0
 8014aa2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	b2da      	uxtb	r2, r3
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	330c      	adds	r3, #12
 8014aac:	4619      	mov	r1, r3
 8014aae:	4610      	mov	r0, r2
 8014ab0:	f000 fff7 	bl	8015aa2 <ff_cre_syncobj>
 8014ab4:	4603      	mov	r3, r0
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d101      	bne.n	8014abe <f_mount+0x7e>
 8014aba:	2302      	movs	r3, #2
 8014abc:	e01d      	b.n	8014afa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014abe:	68fa      	ldr	r2, [r7, #12]
 8014ac0:	4910      	ldr	r1, [pc, #64]	; (8014b04 <f_mount+0xc4>)
 8014ac2:	69fb      	ldr	r3, [r7, #28]
 8014ac4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d002      	beq.n	8014ad4 <f_mount+0x94>
 8014ace:	79fb      	ldrb	r3, [r7, #7]
 8014ad0:	2b01      	cmp	r3, #1
 8014ad2:	d001      	beq.n	8014ad8 <f_mount+0x98>
 8014ad4:	2300      	movs	r3, #0
 8014ad6:	e010      	b.n	8014afa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014ad8:	f107 010c 	add.w	r1, r7, #12
 8014adc:	f107 0308 	add.w	r3, r7, #8
 8014ae0:	2200      	movs	r2, #0
 8014ae2:	4618      	mov	r0, r3
 8014ae4:	f7ff fd10 	bl	8014508 <find_volume>
 8014ae8:	4603      	mov	r3, r0
 8014aea:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	7dfa      	ldrb	r2, [r7, #23]
 8014af0:	4611      	mov	r1, r2
 8014af2:	4618      	mov	r0, r3
 8014af4:	f7fe fa79 	bl	8012fea <unlock_fs>
 8014af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8014afa:	4618      	mov	r0, r3
 8014afc:	3720      	adds	r7, #32
 8014afe:	46bd      	mov	sp, r7
 8014b00:	bd80      	pop	{r7, pc}
 8014b02:	bf00      	nop
 8014b04:	200003c4 	.word	0x200003c4

08014b08 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b09a      	sub	sp, #104	; 0x68
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	60f8      	str	r0, [r7, #12]
 8014b10:	60b9      	str	r1, [r7, #8]
 8014b12:	4613      	mov	r3, r2
 8014b14:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014b16:	68fb      	ldr	r3, [r7, #12]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d101      	bne.n	8014b20 <f_open+0x18>
 8014b1c:	2309      	movs	r3, #9
 8014b1e:	e1b4      	b.n	8014e8a <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014b20:	79fb      	ldrb	r3, [r7, #7]
 8014b22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b26:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014b28:	79fa      	ldrb	r2, [r7, #7]
 8014b2a:	f107 0114 	add.w	r1, r7, #20
 8014b2e:	f107 0308 	add.w	r3, r7, #8
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7ff fce8 	bl	8014508 <find_volume>
 8014b38:	4603      	mov	r3, r0
 8014b3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014b3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	f040 8191 	bne.w	8014e6a <f_open+0x362>
		dj.obj.fs = fs;
 8014b48:	697b      	ldr	r3, [r7, #20]
 8014b4a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014b4c:	68ba      	ldr	r2, [r7, #8]
 8014b4e:	f107 0318 	add.w	r3, r7, #24
 8014b52:	4611      	mov	r1, r2
 8014b54:	4618      	mov	r0, r3
 8014b56:	f7ff fbcb 	bl	80142f0 <follow_path>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014b60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d11a      	bne.n	8014b9e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014b68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014b6c:	b25b      	sxtb	r3, r3
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	da03      	bge.n	8014b7a <f_open+0x72>
				res = FR_INVALID_NAME;
 8014b72:	2306      	movs	r3, #6
 8014b74:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014b78:	e011      	b.n	8014b9e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014b7a:	79fb      	ldrb	r3, [r7, #7]
 8014b7c:	f023 0301 	bic.w	r3, r3, #1
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	bf14      	ite	ne
 8014b84:	2301      	movne	r3, #1
 8014b86:	2300      	moveq	r3, #0
 8014b88:	b2db      	uxtb	r3, r3
 8014b8a:	461a      	mov	r2, r3
 8014b8c:	f107 0318 	add.w	r3, r7, #24
 8014b90:	4611      	mov	r1, r2
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7fe fa44 	bl	8013020 <chk_lock>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014b9e:	79fb      	ldrb	r3, [r7, #7]
 8014ba0:	f003 031c 	and.w	r3, r3, #28
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d07f      	beq.n	8014ca8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014ba8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d017      	beq.n	8014be0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014bb0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014bb4:	2b04      	cmp	r3, #4
 8014bb6:	d10e      	bne.n	8014bd6 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014bb8:	f7fe fa8e 	bl	80130d8 <enq_lock>
 8014bbc:	4603      	mov	r3, r0
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d006      	beq.n	8014bd0 <f_open+0xc8>
 8014bc2:	f107 0318 	add.w	r3, r7, #24
 8014bc6:	4618      	mov	r0, r3
 8014bc8:	f7ff f9ca 	bl	8013f60 <dir_register>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	e000      	b.n	8014bd2 <f_open+0xca>
 8014bd0:	2312      	movs	r3, #18
 8014bd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014bd6:	79fb      	ldrb	r3, [r7, #7]
 8014bd8:	f043 0308 	orr.w	r3, r3, #8
 8014bdc:	71fb      	strb	r3, [r7, #7]
 8014bde:	e010      	b.n	8014c02 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014be0:	7fbb      	ldrb	r3, [r7, #30]
 8014be2:	f003 0311 	and.w	r3, r3, #17
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d003      	beq.n	8014bf2 <f_open+0xea>
					res = FR_DENIED;
 8014bea:	2307      	movs	r3, #7
 8014bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014bf0:	e007      	b.n	8014c02 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014bf2:	79fb      	ldrb	r3, [r7, #7]
 8014bf4:	f003 0304 	and.w	r3, r3, #4
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d002      	beq.n	8014c02 <f_open+0xfa>
 8014bfc:	2308      	movs	r3, #8
 8014bfe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014c02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d168      	bne.n	8014cdc <f_open+0x1d4>
 8014c0a:	79fb      	ldrb	r3, [r7, #7]
 8014c0c:	f003 0308 	and.w	r3, r3, #8
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d063      	beq.n	8014cdc <f_open+0x1d4>
				dw = GET_FATTIME();
 8014c14:	f7fc f998 	bl	8010f48 <get_fattime>
 8014c18:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c1c:	330e      	adds	r3, #14
 8014c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7fe f923 	bl	8012e6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014c26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c28:	3316      	adds	r3, #22
 8014c2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c2c:	4618      	mov	r0, r3
 8014c2e:	f7fe f91d 	bl	8012e6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c34:	330b      	adds	r3, #11
 8014c36:	2220      	movs	r2, #32
 8014c38:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014c3a:	697b      	ldr	r3, [r7, #20]
 8014c3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c3e:	4611      	mov	r1, r2
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7ff f89c 	bl	8013d7e <ld_clust>
 8014c46:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014c48:	697b      	ldr	r3, [r7, #20]
 8014c4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c4c:	2200      	movs	r2, #0
 8014c4e:	4618      	mov	r0, r3
 8014c50:	f7ff f8b4 	bl	8013dbc <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c56:	331c      	adds	r3, #28
 8014c58:	2100      	movs	r1, #0
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f7fe f906 	bl	8012e6c <st_dword>
					fs->wflag = 1;
 8014c60:	697b      	ldr	r3, [r7, #20]
 8014c62:	2201      	movs	r2, #1
 8014c64:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d037      	beq.n	8014cdc <f_open+0x1d4>
						dw = fs->winsect;
 8014c6c:	697b      	ldr	r3, [r7, #20]
 8014c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c70:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014c72:	f107 0318 	add.w	r3, r7, #24
 8014c76:	2200      	movs	r2, #0
 8014c78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014c7a:	4618      	mov	r0, r3
 8014c7c:	f7fe fdc7 	bl	801380e <remove_chain>
 8014c80:	4603      	mov	r3, r0
 8014c82:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014c86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d126      	bne.n	8014cdc <f_open+0x1d4>
							res = move_window(fs, dw);
 8014c8e:	697b      	ldr	r3, [r7, #20]
 8014c90:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c92:	4618      	mov	r0, r3
 8014c94:	f7fe fb74 	bl	8013380 <move_window>
 8014c98:	4603      	mov	r3, r0
 8014c9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014c9e:	697b      	ldr	r3, [r7, #20]
 8014ca0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014ca2:	3a01      	subs	r2, #1
 8014ca4:	611a      	str	r2, [r3, #16]
 8014ca6:	e019      	b.n	8014cdc <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014ca8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014cac:	2b00      	cmp	r3, #0
 8014cae:	d115      	bne.n	8014cdc <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014cb0:	7fbb      	ldrb	r3, [r7, #30]
 8014cb2:	f003 0310 	and.w	r3, r3, #16
 8014cb6:	2b00      	cmp	r3, #0
 8014cb8:	d003      	beq.n	8014cc2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014cba:	2304      	movs	r3, #4
 8014cbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014cc0:	e00c      	b.n	8014cdc <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014cc2:	79fb      	ldrb	r3, [r7, #7]
 8014cc4:	f003 0302 	and.w	r3, r3, #2
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d007      	beq.n	8014cdc <f_open+0x1d4>
 8014ccc:	7fbb      	ldrb	r3, [r7, #30]
 8014cce:	f003 0301 	and.w	r3, r3, #1
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d002      	beq.n	8014cdc <f_open+0x1d4>
						res = FR_DENIED;
 8014cd6:	2307      	movs	r3, #7
 8014cd8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d128      	bne.n	8014d36 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014ce4:	79fb      	ldrb	r3, [r7, #7]
 8014ce6:	f003 0308 	and.w	r3, r3, #8
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d003      	beq.n	8014cf6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014cee:	79fb      	ldrb	r3, [r7, #7]
 8014cf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014cf4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014cf6:	697b      	ldr	r3, [r7, #20]
 8014cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014cfa:	68fb      	ldr	r3, [r7, #12]
 8014cfc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014cfe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d00:	68fb      	ldr	r3, [r7, #12]
 8014d02:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014d04:	79fb      	ldrb	r3, [r7, #7]
 8014d06:	f023 0301 	bic.w	r3, r3, #1
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	bf14      	ite	ne
 8014d0e:	2301      	movne	r3, #1
 8014d10:	2300      	moveq	r3, #0
 8014d12:	b2db      	uxtb	r3, r3
 8014d14:	461a      	mov	r2, r3
 8014d16:	f107 0318 	add.w	r3, r7, #24
 8014d1a:	4611      	mov	r1, r2
 8014d1c:	4618      	mov	r0, r3
 8014d1e:	f7fe f9fd 	bl	801311c <inc_lock>
 8014d22:	4602      	mov	r2, r0
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	691b      	ldr	r3, [r3, #16]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d102      	bne.n	8014d36 <f_open+0x22e>
 8014d30:	2302      	movs	r3, #2
 8014d32:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014d36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	f040 8095 	bne.w	8014e6a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d44:	4611      	mov	r1, r2
 8014d46:	4618      	mov	r0, r3
 8014d48:	f7ff f819 	bl	8013d7e <ld_clust>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d54:	331c      	adds	r3, #28
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fe f84a 	bl	8012df0 <ld_dword>
 8014d5c:	4602      	mov	r2, r0
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	2200      	movs	r2, #0
 8014d66:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014d68:	697a      	ldr	r2, [r7, #20]
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014d6e:	697b      	ldr	r3, [r7, #20]
 8014d70:	88da      	ldrh	r2, [r3, #6]
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	79fa      	ldrb	r2, [r7, #7]
 8014d7a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014d7c:	68fb      	ldr	r3, [r7, #12]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014d82:	68fb      	ldr	r3, [r7, #12]
 8014d84:	2200      	movs	r2, #0
 8014d86:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014d88:	68fb      	ldr	r3, [r7, #12]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	3330      	adds	r3, #48	; 0x30
 8014d92:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014d96:	2100      	movs	r1, #0
 8014d98:	4618      	mov	r0, r3
 8014d9a:	f7fe f8b4 	bl	8012f06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014d9e:	79fb      	ldrb	r3, [r7, #7]
 8014da0:	f003 0320 	and.w	r3, r3, #32
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d060      	beq.n	8014e6a <f_open+0x362>
 8014da8:	68fb      	ldr	r3, [r7, #12]
 8014daa:	68db      	ldr	r3, [r3, #12]
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d05c      	beq.n	8014e6a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	68da      	ldr	r2, [r3, #12]
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014db8:	697b      	ldr	r3, [r7, #20]
 8014dba:	895b      	ldrh	r3, [r3, #10]
 8014dbc:	025b      	lsls	r3, r3, #9
 8014dbe:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014dc0:	68fb      	ldr	r3, [r7, #12]
 8014dc2:	689b      	ldr	r3, [r3, #8]
 8014dc4:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014dc6:	68fb      	ldr	r3, [r7, #12]
 8014dc8:	68db      	ldr	r3, [r3, #12]
 8014dca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014dcc:	e016      	b.n	8014dfc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014dd2:	4618      	mov	r0, r3
 8014dd4:	f7fe fb8f 	bl	80134f6 <get_fat>
 8014dd8:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8014dda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ddc:	2b01      	cmp	r3, #1
 8014dde:	d802      	bhi.n	8014de6 <f_open+0x2de>
 8014de0:	2302      	movs	r3, #2
 8014de2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014dec:	d102      	bne.n	8014df4 <f_open+0x2ec>
 8014dee:	2301      	movs	r3, #1
 8014df0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014df4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014df8:	1ad3      	subs	r3, r2, r3
 8014dfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014dfc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	d103      	bne.n	8014e0c <f_open+0x304>
 8014e04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	d8e0      	bhi.n	8014dce <f_open+0x2c6>
				}
				fp->clust = clst;
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014e10:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d127      	bne.n	8014e6a <f_open+0x362>
 8014e1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d022      	beq.n	8014e6a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014e24:	697b      	ldr	r3, [r7, #20]
 8014e26:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7fe fb45 	bl	80134b8 <clust2sect>
 8014e2e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014e30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d103      	bne.n	8014e3e <f_open+0x336>
						res = FR_INT_ERR;
 8014e36:	2302      	movs	r3, #2
 8014e38:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014e3c:	e015      	b.n	8014e6a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e40:	0a5a      	lsrs	r2, r3, #9
 8014e42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e44:	441a      	add	r2, r3
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014e4a:	697b      	ldr	r3, [r7, #20]
 8014e4c:	7858      	ldrb	r0, [r3, #1]
 8014e4e:	68fb      	ldr	r3, [r7, #12]
 8014e50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e54:	68fb      	ldr	r3, [r7, #12]
 8014e56:	6a1a      	ldr	r2, [r3, #32]
 8014e58:	2301      	movs	r3, #1
 8014e5a:	f7fd ff53 	bl	8012d04 <disk_read>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d002      	beq.n	8014e6a <f_open+0x362>
 8014e64:	2301      	movs	r3, #1
 8014e66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e6e:	2b00      	cmp	r3, #0
 8014e70:	d002      	beq.n	8014e78 <f_open+0x370>
 8014e72:	68fb      	ldr	r3, [r7, #12]
 8014e74:	2200      	movs	r2, #0
 8014e76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014e78:	697b      	ldr	r3, [r7, #20]
 8014e7a:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8014e7e:	4611      	mov	r1, r2
 8014e80:	4618      	mov	r0, r3
 8014e82:	f7fe f8b2 	bl	8012fea <unlock_fs>
 8014e86:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	3768      	adds	r7, #104	; 0x68
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}

08014e92 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014e92:	b580      	push	{r7, lr}
 8014e94:	b08c      	sub	sp, #48	; 0x30
 8014e96:	af00      	add	r7, sp, #0
 8014e98:	60f8      	str	r0, [r7, #12]
 8014e9a:	60b9      	str	r1, [r7, #8]
 8014e9c:	607a      	str	r2, [r7, #4]
 8014e9e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014ea4:	683b      	ldr	r3, [r7, #0]
 8014ea6:	2200      	movs	r2, #0
 8014ea8:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014eaa:	68fb      	ldr	r3, [r7, #12]
 8014eac:	f107 0210 	add.w	r2, r7, #16
 8014eb0:	4611      	mov	r1, r2
 8014eb2:	4618      	mov	r0, r3
 8014eb4:	f7ff fd7c 	bl	80149b0 <validate>
 8014eb8:	4603      	mov	r3, r0
 8014eba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ec2:	2b00      	cmp	r3, #0
 8014ec4:	d107      	bne.n	8014ed6 <f_write+0x44>
 8014ec6:	68fb      	ldr	r3, [r7, #12]
 8014ec8:	7d5b      	ldrb	r3, [r3, #21]
 8014eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d009      	beq.n	8014eea <f_write+0x58>
 8014ed6:	693b      	ldr	r3, [r7, #16]
 8014ed8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014edc:	4611      	mov	r1, r2
 8014ede:	4618      	mov	r0, r3
 8014ee0:	f7fe f883 	bl	8012fea <unlock_fs>
 8014ee4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ee8:	e173      	b.n	80151d2 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014eea:	68fb      	ldr	r3, [r7, #12]
 8014eec:	7d1b      	ldrb	r3, [r3, #20]
 8014eee:	f003 0302 	and.w	r3, r3, #2
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d106      	bne.n	8014f04 <f_write+0x72>
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	2107      	movs	r1, #7
 8014efa:	4618      	mov	r0, r3
 8014efc:	f7fe f875 	bl	8012fea <unlock_fs>
 8014f00:	2307      	movs	r3, #7
 8014f02:	e166      	b.n	80151d2 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	699a      	ldr	r2, [r3, #24]
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	441a      	add	r2, r3
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	699b      	ldr	r3, [r3, #24]
 8014f10:	429a      	cmp	r2, r3
 8014f12:	f080 814b 	bcs.w	80151ac <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	699b      	ldr	r3, [r3, #24]
 8014f1a:	43db      	mvns	r3, r3
 8014f1c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014f1e:	e145      	b.n	80151ac <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	699b      	ldr	r3, [r3, #24]
 8014f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	f040 8101 	bne.w	8015130 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014f2e:	68fb      	ldr	r3, [r7, #12]
 8014f30:	699b      	ldr	r3, [r3, #24]
 8014f32:	0a5b      	lsrs	r3, r3, #9
 8014f34:	693a      	ldr	r2, [r7, #16]
 8014f36:	8952      	ldrh	r2, [r2, #10]
 8014f38:	3a01      	subs	r2, #1
 8014f3a:	4013      	ands	r3, r2
 8014f3c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014f3e:	69bb      	ldr	r3, [r7, #24]
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d14d      	bne.n	8014fe0 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	699b      	ldr	r3, [r3, #24]
 8014f48:	2b00      	cmp	r3, #0
 8014f4a:	d10c      	bne.n	8014f66 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	689b      	ldr	r3, [r3, #8]
 8014f50:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d11a      	bne.n	8014f8e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	2100      	movs	r1, #0
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	f7fe fcbb 	bl	80138d8 <create_chain>
 8014f62:	62b8      	str	r0, [r7, #40]	; 0x28
 8014f64:	e013      	b.n	8014f8e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014f66:	68fb      	ldr	r3, [r7, #12]
 8014f68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f6a:	2b00      	cmp	r3, #0
 8014f6c:	d007      	beq.n	8014f7e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014f6e:	68fb      	ldr	r3, [r7, #12]
 8014f70:	699b      	ldr	r3, [r3, #24]
 8014f72:	4619      	mov	r1, r3
 8014f74:	68f8      	ldr	r0, [r7, #12]
 8014f76:	f7fe fd47 	bl	8013a08 <clmt_clust>
 8014f7a:	62b8      	str	r0, [r7, #40]	; 0x28
 8014f7c:	e007      	b.n	8014f8e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014f7e:	68fa      	ldr	r2, [r7, #12]
 8014f80:	68fb      	ldr	r3, [r7, #12]
 8014f82:	69db      	ldr	r3, [r3, #28]
 8014f84:	4619      	mov	r1, r3
 8014f86:	4610      	mov	r0, r2
 8014f88:	f7fe fca6 	bl	80138d8 <create_chain>
 8014f8c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	f000 8110 	beq.w	80151b6 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	d109      	bne.n	8014fb0 <f_write+0x11e>
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	2202      	movs	r2, #2
 8014fa0:	755a      	strb	r2, [r3, #21]
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	2102      	movs	r1, #2
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f7fe f81f 	bl	8012fea <unlock_fs>
 8014fac:	2302      	movs	r3, #2
 8014fae:	e110      	b.n	80151d2 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fb6:	d109      	bne.n	8014fcc <f_write+0x13a>
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	2201      	movs	r2, #1
 8014fbc:	755a      	strb	r2, [r3, #21]
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	2101      	movs	r1, #1
 8014fc2:	4618      	mov	r0, r3
 8014fc4:	f7fe f811 	bl	8012fea <unlock_fs>
 8014fc8:	2301      	movs	r3, #1
 8014fca:	e102      	b.n	80151d2 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fd0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	689b      	ldr	r3, [r3, #8]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d102      	bne.n	8014fe0 <f_write+0x14e>
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fde:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	7d1b      	ldrb	r3, [r3, #20]
 8014fe4:	b25b      	sxtb	r3, r3
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	da1d      	bge.n	8015026 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014fea:	693b      	ldr	r3, [r7, #16]
 8014fec:	7858      	ldrb	r0, [r3, #1]
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	6a1a      	ldr	r2, [r3, #32]
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	f7fd fea3 	bl	8012d44 <disk_write>
 8014ffe:	4603      	mov	r3, r0
 8015000:	2b00      	cmp	r3, #0
 8015002:	d009      	beq.n	8015018 <f_write+0x186>
 8015004:	68fb      	ldr	r3, [r7, #12]
 8015006:	2201      	movs	r2, #1
 8015008:	755a      	strb	r2, [r3, #21]
 801500a:	693b      	ldr	r3, [r7, #16]
 801500c:	2101      	movs	r1, #1
 801500e:	4618      	mov	r0, r3
 8015010:	f7fd ffeb 	bl	8012fea <unlock_fs>
 8015014:	2301      	movs	r3, #1
 8015016:	e0dc      	b.n	80151d2 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	7d1b      	ldrb	r3, [r3, #20]
 801501c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015020:	b2da      	uxtb	r2, r3
 8015022:	68fb      	ldr	r3, [r7, #12]
 8015024:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8015026:	693a      	ldr	r2, [r7, #16]
 8015028:	68fb      	ldr	r3, [r7, #12]
 801502a:	69db      	ldr	r3, [r3, #28]
 801502c:	4619      	mov	r1, r3
 801502e:	4610      	mov	r0, r2
 8015030:	f7fe fa42 	bl	80134b8 <clust2sect>
 8015034:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8015036:	697b      	ldr	r3, [r7, #20]
 8015038:	2b00      	cmp	r3, #0
 801503a:	d109      	bne.n	8015050 <f_write+0x1be>
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	2202      	movs	r2, #2
 8015040:	755a      	strb	r2, [r3, #21]
 8015042:	693b      	ldr	r3, [r7, #16]
 8015044:	2102      	movs	r1, #2
 8015046:	4618      	mov	r0, r3
 8015048:	f7fd ffcf 	bl	8012fea <unlock_fs>
 801504c:	2302      	movs	r3, #2
 801504e:	e0c0      	b.n	80151d2 <f_write+0x340>
			sect += csect;
 8015050:	697a      	ldr	r2, [r7, #20]
 8015052:	69bb      	ldr	r3, [r7, #24]
 8015054:	4413      	add	r3, r2
 8015056:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	0a5b      	lsrs	r3, r3, #9
 801505c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801505e:	6a3b      	ldr	r3, [r7, #32]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d041      	beq.n	80150e8 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015064:	69ba      	ldr	r2, [r7, #24]
 8015066:	6a3b      	ldr	r3, [r7, #32]
 8015068:	4413      	add	r3, r2
 801506a:	693a      	ldr	r2, [r7, #16]
 801506c:	8952      	ldrh	r2, [r2, #10]
 801506e:	4293      	cmp	r3, r2
 8015070:	d905      	bls.n	801507e <f_write+0x1ec>
					cc = fs->csize - csect;
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	895b      	ldrh	r3, [r3, #10]
 8015076:	461a      	mov	r2, r3
 8015078:	69bb      	ldr	r3, [r7, #24]
 801507a:	1ad3      	subs	r3, r2, r3
 801507c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801507e:	693b      	ldr	r3, [r7, #16]
 8015080:	7858      	ldrb	r0, [r3, #1]
 8015082:	6a3b      	ldr	r3, [r7, #32]
 8015084:	697a      	ldr	r2, [r7, #20]
 8015086:	69f9      	ldr	r1, [r7, #28]
 8015088:	f7fd fe5c 	bl	8012d44 <disk_write>
 801508c:	4603      	mov	r3, r0
 801508e:	2b00      	cmp	r3, #0
 8015090:	d009      	beq.n	80150a6 <f_write+0x214>
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	2201      	movs	r2, #1
 8015096:	755a      	strb	r2, [r3, #21]
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	2101      	movs	r1, #1
 801509c:	4618      	mov	r0, r3
 801509e:	f7fd ffa4 	bl	8012fea <unlock_fs>
 80150a2:	2301      	movs	r3, #1
 80150a4:	e095      	b.n	80151d2 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	6a1a      	ldr	r2, [r3, #32]
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	1ad3      	subs	r3, r2, r3
 80150ae:	6a3a      	ldr	r2, [r7, #32]
 80150b0:	429a      	cmp	r2, r3
 80150b2:	d915      	bls.n	80150e0 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80150b4:	68fb      	ldr	r3, [r7, #12]
 80150b6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6a1a      	ldr	r2, [r3, #32]
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	025b      	lsls	r3, r3, #9
 80150c4:	69fa      	ldr	r2, [r7, #28]
 80150c6:	4413      	add	r3, r2
 80150c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150cc:	4619      	mov	r1, r3
 80150ce:	f7fd fef9 	bl	8012ec4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	7d1b      	ldrb	r3, [r3, #20]
 80150d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150da:	b2da      	uxtb	r2, r3
 80150dc:	68fb      	ldr	r3, [r7, #12]
 80150de:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80150e0:	6a3b      	ldr	r3, [r7, #32]
 80150e2:	025b      	lsls	r3, r3, #9
 80150e4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80150e6:	e044      	b.n	8015172 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80150e8:	68fb      	ldr	r3, [r7, #12]
 80150ea:	6a1b      	ldr	r3, [r3, #32]
 80150ec:	697a      	ldr	r2, [r7, #20]
 80150ee:	429a      	cmp	r2, r3
 80150f0:	d01b      	beq.n	801512a <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	699a      	ldr	r2, [r3, #24]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d215      	bcs.n	801512a <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80150fe:	693b      	ldr	r3, [r7, #16]
 8015100:	7858      	ldrb	r0, [r3, #1]
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015108:	2301      	movs	r3, #1
 801510a:	697a      	ldr	r2, [r7, #20]
 801510c:	f7fd fdfa 	bl	8012d04 <disk_read>
 8015110:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015112:	2b00      	cmp	r3, #0
 8015114:	d009      	beq.n	801512a <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	2201      	movs	r2, #1
 801511a:	755a      	strb	r2, [r3, #21]
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	2101      	movs	r1, #1
 8015120:	4618      	mov	r0, r3
 8015122:	f7fd ff62 	bl	8012fea <unlock_fs>
 8015126:	2301      	movs	r3, #1
 8015128:	e053      	b.n	80151d2 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	697a      	ldr	r2, [r7, #20]
 801512e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015130:	68fb      	ldr	r3, [r7, #12]
 8015132:	699b      	ldr	r3, [r3, #24]
 8015134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015138:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801513c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015140:	687b      	ldr	r3, [r7, #4]
 8015142:	429a      	cmp	r2, r3
 8015144:	d901      	bls.n	801514a <f_write+0x2b8>
 8015146:	687b      	ldr	r3, [r7, #4]
 8015148:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	699b      	ldr	r3, [r3, #24]
 8015154:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015158:	4413      	add	r3, r2
 801515a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801515c:	69f9      	ldr	r1, [r7, #28]
 801515e:	4618      	mov	r0, r3
 8015160:	f7fd feb0 	bl	8012ec4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	7d1b      	ldrb	r3, [r3, #20]
 8015168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801516c:	b2da      	uxtb	r2, r3
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015172:	69fa      	ldr	r2, [r7, #28]
 8015174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015176:	4413      	add	r3, r2
 8015178:	61fb      	str	r3, [r7, #28]
 801517a:	68fb      	ldr	r3, [r7, #12]
 801517c:	699a      	ldr	r2, [r3, #24]
 801517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015180:	441a      	add	r2, r3
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	619a      	str	r2, [r3, #24]
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	68da      	ldr	r2, [r3, #12]
 801518a:	68fb      	ldr	r3, [r7, #12]
 801518c:	699b      	ldr	r3, [r3, #24]
 801518e:	429a      	cmp	r2, r3
 8015190:	bf38      	it	cc
 8015192:	461a      	movcc	r2, r3
 8015194:	68fb      	ldr	r3, [r7, #12]
 8015196:	60da      	str	r2, [r3, #12]
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801519e:	441a      	add	r2, r3
 80151a0:	683b      	ldr	r3, [r7, #0]
 80151a2:	601a      	str	r2, [r3, #0]
 80151a4:	687a      	ldr	r2, [r7, #4]
 80151a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151a8:	1ad3      	subs	r3, r2, r3
 80151aa:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	f47f aeb6 	bne.w	8014f20 <f_write+0x8e>
 80151b4:	e000      	b.n	80151b8 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80151b6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80151b8:	68fb      	ldr	r3, [r7, #12]
 80151ba:	7d1b      	ldrb	r3, [r3, #20]
 80151bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151c0:	b2da      	uxtb	r2, r3
 80151c2:	68fb      	ldr	r3, [r7, #12]
 80151c4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80151c6:	693b      	ldr	r3, [r7, #16]
 80151c8:	2100      	movs	r1, #0
 80151ca:	4618      	mov	r0, r3
 80151cc:	f7fd ff0d 	bl	8012fea <unlock_fs>
 80151d0:	2300      	movs	r3, #0
}
 80151d2:	4618      	mov	r0, r3
 80151d4:	3730      	adds	r7, #48	; 0x30
 80151d6:	46bd      	mov	sp, r7
 80151d8:	bd80      	pop	{r7, pc}

080151da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80151da:	b580      	push	{r7, lr}
 80151dc:	b086      	sub	sp, #24
 80151de:	af00      	add	r7, sp, #0
 80151e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	f107 0208 	add.w	r2, r7, #8
 80151e8:	4611      	mov	r1, r2
 80151ea:	4618      	mov	r0, r3
 80151ec:	f7ff fbe0 	bl	80149b0 <validate>
 80151f0:	4603      	mov	r3, r0
 80151f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80151f4:	7dfb      	ldrb	r3, [r7, #23]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d16d      	bne.n	80152d6 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	7d1b      	ldrb	r3, [r3, #20]
 80151fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015202:	2b00      	cmp	r3, #0
 8015204:	d067      	beq.n	80152d6 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	7d1b      	ldrb	r3, [r3, #20]
 801520a:	b25b      	sxtb	r3, r3
 801520c:	2b00      	cmp	r3, #0
 801520e:	da1a      	bge.n	8015246 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015210:	68bb      	ldr	r3, [r7, #8]
 8015212:	7858      	ldrb	r0, [r3, #1]
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6a1a      	ldr	r2, [r3, #32]
 801521e:	2301      	movs	r3, #1
 8015220:	f7fd fd90 	bl	8012d44 <disk_write>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d006      	beq.n	8015238 <f_sync+0x5e>
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	2101      	movs	r1, #1
 801522e:	4618      	mov	r0, r3
 8015230:	f7fd fedb 	bl	8012fea <unlock_fs>
 8015234:	2301      	movs	r3, #1
 8015236:	e055      	b.n	80152e4 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	7d1b      	ldrb	r3, [r3, #20]
 801523c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015240:	b2da      	uxtb	r2, r3
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8015246:	f7fb fe7f 	bl	8010f48 <get_fattime>
 801524a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 801524c:	68ba      	ldr	r2, [r7, #8]
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015252:	4619      	mov	r1, r3
 8015254:	4610      	mov	r0, r2
 8015256:	f7fe f893 	bl	8013380 <move_window>
 801525a:	4603      	mov	r3, r0
 801525c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 801525e:	7dfb      	ldrb	r3, [r7, #23]
 8015260:	2b00      	cmp	r3, #0
 8015262:	d138      	bne.n	80152d6 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015268:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	330b      	adds	r3, #11
 801526e:	781a      	ldrb	r2, [r3, #0]
 8015270:	68fb      	ldr	r3, [r7, #12]
 8015272:	330b      	adds	r3, #11
 8015274:	f042 0220 	orr.w	r2, r2, #32
 8015278:	b2d2      	uxtb	r2, r2
 801527a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 801527c:	687b      	ldr	r3, [r7, #4]
 801527e:	6818      	ldr	r0, [r3, #0]
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	689b      	ldr	r3, [r3, #8]
 8015284:	461a      	mov	r2, r3
 8015286:	68f9      	ldr	r1, [r7, #12]
 8015288:	f7fe fd98 	bl	8013dbc <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801528c:	68fb      	ldr	r3, [r7, #12]
 801528e:	f103 021c 	add.w	r2, r3, #28
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	68db      	ldr	r3, [r3, #12]
 8015296:	4619      	mov	r1, r3
 8015298:	4610      	mov	r0, r2
 801529a:	f7fd fde7 	bl	8012e6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	3316      	adds	r3, #22
 80152a2:	6939      	ldr	r1, [r7, #16]
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7fd fde1 	bl	8012e6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	3312      	adds	r3, #18
 80152ae:	2100      	movs	r1, #0
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7fd fdc0 	bl	8012e36 <st_word>
					fs->wflag = 1;
 80152b6:	68bb      	ldr	r3, [r7, #8]
 80152b8:	2201      	movs	r2, #1
 80152ba:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	4618      	mov	r0, r3
 80152c0:	f7fe f88c 	bl	80133dc <sync_fs>
 80152c4:	4603      	mov	r3, r0
 80152c6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	7d1b      	ldrb	r3, [r3, #20]
 80152cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80152d0:	b2da      	uxtb	r2, r3
 80152d2:	687b      	ldr	r3, [r7, #4]
 80152d4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80152d6:	68bb      	ldr	r3, [r7, #8]
 80152d8:	7dfa      	ldrb	r2, [r7, #23]
 80152da:	4611      	mov	r1, r2
 80152dc:	4618      	mov	r0, r3
 80152de:	f7fd fe84 	bl	8012fea <unlock_fs>
 80152e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3718      	adds	r7, #24
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b090      	sub	sp, #64	; 0x40
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f107 0208 	add.w	r2, r7, #8
 80152fc:	4611      	mov	r1, r2
 80152fe:	4618      	mov	r0, r3
 8015300:	f7ff fb56 	bl	80149b0 <validate>
 8015304:	4603      	mov	r3, r0
 8015306:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801530a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801530e:	2b00      	cmp	r3, #0
 8015310:	d103      	bne.n	801531a <f_lseek+0x2e>
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	7d5b      	ldrb	r3, [r3, #21]
 8015316:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801531a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 801531e:	2b00      	cmp	r3, #0
 8015320:	d009      	beq.n	8015336 <f_lseek+0x4a>
 8015322:	68bb      	ldr	r3, [r7, #8]
 8015324:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015328:	4611      	mov	r1, r2
 801532a:	4618      	mov	r0, r3
 801532c:	f7fd fe5d 	bl	8012fea <unlock_fs>
 8015330:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015334:	e229      	b.n	801578a <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801533a:	2b00      	cmp	r3, #0
 801533c:	f000 80ea 	beq.w	8015514 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015340:	683b      	ldr	r3, [r7, #0]
 8015342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015346:	d164      	bne.n	8015412 <f_lseek+0x126>
			tbl = fp->cltbl;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801534c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 801534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015350:	1d1a      	adds	r2, r3, #4
 8015352:	627a      	str	r2, [r7, #36]	; 0x24
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	617b      	str	r3, [r7, #20]
 8015358:	2302      	movs	r3, #2
 801535a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	689b      	ldr	r3, [r3, #8]
 8015360:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015364:	2b00      	cmp	r3, #0
 8015366:	d044      	beq.n	80153f2 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8015368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801536a:	613b      	str	r3, [r7, #16]
 801536c:	2300      	movs	r3, #0
 801536e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015372:	3302      	adds	r3, #2
 8015374:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8015376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015378:	60fb      	str	r3, [r7, #12]
 801537a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801537c:	3301      	adds	r3, #1
 801537e:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015384:	4618      	mov	r0, r3
 8015386:	f7fe f8b6 	bl	80134f6 <get_fat>
 801538a:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 801538c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538e:	2b01      	cmp	r3, #1
 8015390:	d809      	bhi.n	80153a6 <f_lseek+0xba>
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	2202      	movs	r2, #2
 8015396:	755a      	strb	r2, [r3, #21]
 8015398:	68bb      	ldr	r3, [r7, #8]
 801539a:	2102      	movs	r1, #2
 801539c:	4618      	mov	r0, r3
 801539e:	f7fd fe24 	bl	8012fea <unlock_fs>
 80153a2:	2302      	movs	r3, #2
 80153a4:	e1f1      	b.n	801578a <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80153a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153ac:	d109      	bne.n	80153c2 <f_lseek+0xd6>
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	2201      	movs	r2, #1
 80153b2:	755a      	strb	r2, [r3, #21]
 80153b4:	68bb      	ldr	r3, [r7, #8]
 80153b6:	2101      	movs	r1, #1
 80153b8:	4618      	mov	r0, r3
 80153ba:	f7fd fe16 	bl	8012fea <unlock_fs>
 80153be:	2301      	movs	r3, #1
 80153c0:	e1e3      	b.n	801578a <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	3301      	adds	r3, #1
 80153c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153c8:	429a      	cmp	r2, r3
 80153ca:	d0d4      	beq.n	8015376 <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80153cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153ce:	697b      	ldr	r3, [r7, #20]
 80153d0:	429a      	cmp	r2, r3
 80153d2:	d809      	bhi.n	80153e8 <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80153d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153d6:	1d1a      	adds	r2, r3, #4
 80153d8:	627a      	str	r2, [r7, #36]	; 0x24
 80153da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153dc:	601a      	str	r2, [r3, #0]
 80153de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153e0:	1d1a      	adds	r2, r3, #4
 80153e2:	627a      	str	r2, [r7, #36]	; 0x24
 80153e4:	693a      	ldr	r2, [r7, #16]
 80153e6:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80153e8:	68bb      	ldr	r3, [r7, #8]
 80153ea:	699b      	ldr	r3, [r3, #24]
 80153ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153ee:	429a      	cmp	r2, r3
 80153f0:	d3ba      	bcc.n	8015368 <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80153f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153f8:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80153fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153fc:	697b      	ldr	r3, [r7, #20]
 80153fe:	429a      	cmp	r2, r3
 8015400:	d803      	bhi.n	801540a <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8015402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015404:	2200      	movs	r2, #0
 8015406:	601a      	str	r2, [r3, #0]
 8015408:	e1b6      	b.n	8015778 <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801540a:	2311      	movs	r3, #17
 801540c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015410:	e1b2      	b.n	8015778 <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	68db      	ldr	r3, [r3, #12]
 8015416:	683a      	ldr	r2, [r7, #0]
 8015418:	429a      	cmp	r2, r3
 801541a:	d902      	bls.n	8015422 <f_lseek+0x136>
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	68db      	ldr	r3, [r3, #12]
 8015420:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015422:	687b      	ldr	r3, [r7, #4]
 8015424:	683a      	ldr	r2, [r7, #0]
 8015426:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	2b00      	cmp	r3, #0
 801542c:	f000 81a4 	beq.w	8015778 <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015430:	683b      	ldr	r3, [r7, #0]
 8015432:	3b01      	subs	r3, #1
 8015434:	4619      	mov	r1, r3
 8015436:	6878      	ldr	r0, [r7, #4]
 8015438:	f7fe fae6 	bl	8013a08 <clmt_clust>
 801543c:	4602      	mov	r2, r0
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	69db      	ldr	r3, [r3, #28]
 8015448:	4619      	mov	r1, r3
 801544a:	4610      	mov	r0, r2
 801544c:	f7fe f834 	bl	80134b8 <clust2sect>
 8015450:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015452:	69bb      	ldr	r3, [r7, #24]
 8015454:	2b00      	cmp	r3, #0
 8015456:	d109      	bne.n	801546c <f_lseek+0x180>
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	2202      	movs	r2, #2
 801545c:	755a      	strb	r2, [r3, #21]
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	2102      	movs	r1, #2
 8015462:	4618      	mov	r0, r3
 8015464:	f7fd fdc1 	bl	8012fea <unlock_fs>
 8015468:	2302      	movs	r3, #2
 801546a:	e18e      	b.n	801578a <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 801546c:	683b      	ldr	r3, [r7, #0]
 801546e:	3b01      	subs	r3, #1
 8015470:	0a5b      	lsrs	r3, r3, #9
 8015472:	68ba      	ldr	r2, [r7, #8]
 8015474:	8952      	ldrh	r2, [r2, #10]
 8015476:	3a01      	subs	r2, #1
 8015478:	4013      	ands	r3, r2
 801547a:	69ba      	ldr	r2, [r7, #24]
 801547c:	4413      	add	r3, r2
 801547e:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	699b      	ldr	r3, [r3, #24]
 8015484:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015488:	2b00      	cmp	r3, #0
 801548a:	f000 8175 	beq.w	8015778 <f_lseek+0x48c>
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	6a1b      	ldr	r3, [r3, #32]
 8015492:	69ba      	ldr	r2, [r7, #24]
 8015494:	429a      	cmp	r2, r3
 8015496:	f000 816f 	beq.w	8015778 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	7d1b      	ldrb	r3, [r3, #20]
 801549e:	b25b      	sxtb	r3, r3
 80154a0:	2b00      	cmp	r3, #0
 80154a2:	da1d      	bge.n	80154e0 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80154a4:	68bb      	ldr	r3, [r7, #8]
 80154a6:	7858      	ldrb	r0, [r3, #1]
 80154a8:	687b      	ldr	r3, [r7, #4]
 80154aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	6a1a      	ldr	r2, [r3, #32]
 80154b2:	2301      	movs	r3, #1
 80154b4:	f7fd fc46 	bl	8012d44 <disk_write>
 80154b8:	4603      	mov	r3, r0
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d009      	beq.n	80154d2 <f_lseek+0x1e6>
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	2201      	movs	r2, #1
 80154c2:	755a      	strb	r2, [r3, #21]
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	2101      	movs	r1, #1
 80154c8:	4618      	mov	r0, r3
 80154ca:	f7fd fd8e 	bl	8012fea <unlock_fs>
 80154ce:	2301      	movs	r3, #1
 80154d0:	e15b      	b.n	801578a <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	7d1b      	ldrb	r3, [r3, #20]
 80154d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154da:	b2da      	uxtb	r2, r3
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80154e0:	68bb      	ldr	r3, [r7, #8]
 80154e2:	7858      	ldrb	r0, [r3, #1]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154ea:	2301      	movs	r3, #1
 80154ec:	69ba      	ldr	r2, [r7, #24]
 80154ee:	f7fd fc09 	bl	8012d04 <disk_read>
 80154f2:	4603      	mov	r3, r0
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d009      	beq.n	801550c <f_lseek+0x220>
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	2201      	movs	r2, #1
 80154fc:	755a      	strb	r2, [r3, #21]
 80154fe:	68bb      	ldr	r3, [r7, #8]
 8015500:	2101      	movs	r1, #1
 8015502:	4618      	mov	r0, r3
 8015504:	f7fd fd71 	bl	8012fea <unlock_fs>
 8015508:	2301      	movs	r3, #1
 801550a:	e13e      	b.n	801578a <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	69ba      	ldr	r2, [r7, #24]
 8015510:	621a      	str	r2, [r3, #32]
 8015512:	e131      	b.n	8015778 <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	68db      	ldr	r3, [r3, #12]
 8015518:	683a      	ldr	r2, [r7, #0]
 801551a:	429a      	cmp	r2, r3
 801551c:	d908      	bls.n	8015530 <f_lseek+0x244>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	7d1b      	ldrb	r3, [r3, #20]
 8015522:	f003 0302 	and.w	r3, r3, #2
 8015526:	2b00      	cmp	r3, #0
 8015528:	d102      	bne.n	8015530 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	68db      	ldr	r3, [r3, #12]
 801552e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	699b      	ldr	r3, [r3, #24]
 8015534:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8015536:	2300      	movs	r3, #0
 8015538:	637b      	str	r3, [r7, #52]	; 0x34
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801553e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015540:	683b      	ldr	r3, [r7, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	f000 80c0 	beq.w	80156c8 <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8015548:	68bb      	ldr	r3, [r7, #8]
 801554a:	895b      	ldrh	r3, [r3, #10]
 801554c:	025b      	lsls	r3, r3, #9
 801554e:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015550:	6a3b      	ldr	r3, [r7, #32]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d01b      	beq.n	801558e <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8015556:	683b      	ldr	r3, [r7, #0]
 8015558:	1e5a      	subs	r2, r3, #1
 801555a:	69fb      	ldr	r3, [r7, #28]
 801555c:	fbb2 f2f3 	udiv	r2, r2, r3
 8015560:	6a3b      	ldr	r3, [r7, #32]
 8015562:	1e59      	subs	r1, r3, #1
 8015564:	69fb      	ldr	r3, [r7, #28]
 8015566:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801556a:	429a      	cmp	r2, r3
 801556c:	d30f      	bcc.n	801558e <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 801556e:	6a3b      	ldr	r3, [r7, #32]
 8015570:	1e5a      	subs	r2, r3, #1
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	425b      	negs	r3, r3
 8015576:	401a      	ands	r2, r3
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 801557c:	687b      	ldr	r3, [r7, #4]
 801557e:	699b      	ldr	r3, [r3, #24]
 8015580:	683a      	ldr	r2, [r7, #0]
 8015582:	1ad3      	subs	r3, r2, r3
 8015584:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	69db      	ldr	r3, [r3, #28]
 801558a:	63bb      	str	r3, [r7, #56]	; 0x38
 801558c:	e02c      	b.n	80155e8 <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	689b      	ldr	r3, [r3, #8]
 8015592:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015596:	2b00      	cmp	r3, #0
 8015598:	d123      	bne.n	80155e2 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	2100      	movs	r1, #0
 801559e:	4618      	mov	r0, r3
 80155a0:	f7fe f99a 	bl	80138d8 <create_chain>
 80155a4:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80155a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155a8:	2b01      	cmp	r3, #1
 80155aa:	d109      	bne.n	80155c0 <f_lseek+0x2d4>
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2202      	movs	r2, #2
 80155b0:	755a      	strb	r2, [r3, #21]
 80155b2:	68bb      	ldr	r3, [r7, #8]
 80155b4:	2102      	movs	r1, #2
 80155b6:	4618      	mov	r0, r3
 80155b8:	f7fd fd17 	bl	8012fea <unlock_fs>
 80155bc:	2302      	movs	r3, #2
 80155be:	e0e4      	b.n	801578a <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80155c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155c6:	d109      	bne.n	80155dc <f_lseek+0x2f0>
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2201      	movs	r2, #1
 80155cc:	755a      	strb	r2, [r3, #21]
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	2101      	movs	r1, #1
 80155d2:	4618      	mov	r0, r3
 80155d4:	f7fd fd09 	bl	8012fea <unlock_fs>
 80155d8:	2301      	movs	r3, #1
 80155da:	e0d6      	b.n	801578a <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80155e0:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80155e6:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80155e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	d06c      	beq.n	80156c8 <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80155ee:	e044      	b.n	801567a <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80155f0:	683a      	ldr	r2, [r7, #0]
 80155f2:	69fb      	ldr	r3, [r7, #28]
 80155f4:	1ad3      	subs	r3, r2, r3
 80155f6:	603b      	str	r3, [r7, #0]
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	699a      	ldr	r2, [r3, #24]
 80155fc:	69fb      	ldr	r3, [r7, #28]
 80155fe:	441a      	add	r2, r3
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	7d1b      	ldrb	r3, [r3, #20]
 8015608:	f003 0302 	and.w	r3, r3, #2
 801560c:	2b00      	cmp	r3, #0
 801560e:	d00b      	beq.n	8015628 <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015614:	4618      	mov	r0, r3
 8015616:	f7fe f95f 	bl	80138d8 <create_chain>
 801561a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 801561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801561e:	2b00      	cmp	r3, #0
 8015620:	d108      	bne.n	8015634 <f_lseek+0x348>
							ofs = 0; break;
 8015622:	2300      	movs	r3, #0
 8015624:	603b      	str	r3, [r7, #0]
 8015626:	e02c      	b.n	8015682 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801562c:	4618      	mov	r0, r3
 801562e:	f7fd ff62 	bl	80134f6 <get_fat>
 8015632:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015636:	f1b3 3fff 	cmp.w	r3, #4294967295
 801563a:	d109      	bne.n	8015650 <f_lseek+0x364>
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2201      	movs	r2, #1
 8015640:	755a      	strb	r2, [r3, #21]
 8015642:	68bb      	ldr	r3, [r7, #8]
 8015644:	2101      	movs	r1, #1
 8015646:	4618      	mov	r0, r3
 8015648:	f7fd fccf 	bl	8012fea <unlock_fs>
 801564c:	2301      	movs	r3, #1
 801564e:	e09c      	b.n	801578a <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015652:	2b01      	cmp	r3, #1
 8015654:	d904      	bls.n	8015660 <f_lseek+0x374>
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	699b      	ldr	r3, [r3, #24]
 801565a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801565c:	429a      	cmp	r2, r3
 801565e:	d309      	bcc.n	8015674 <f_lseek+0x388>
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2202      	movs	r2, #2
 8015664:	755a      	strb	r2, [r3, #21]
 8015666:	68bb      	ldr	r3, [r7, #8]
 8015668:	2102      	movs	r1, #2
 801566a:	4618      	mov	r0, r3
 801566c:	f7fd fcbd 	bl	8012fea <unlock_fs>
 8015670:	2302      	movs	r3, #2
 8015672:	e08a      	b.n	801578a <f_lseek+0x49e>
					fp->clust = clst;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015678:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801567a:	683a      	ldr	r2, [r7, #0]
 801567c:	69fb      	ldr	r3, [r7, #28]
 801567e:	429a      	cmp	r2, r3
 8015680:	d8b6      	bhi.n	80155f0 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	699a      	ldr	r2, [r3, #24]
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	441a      	add	r2, r3
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015694:	2b00      	cmp	r3, #0
 8015696:	d017      	beq.n	80156c8 <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8015698:	68bb      	ldr	r3, [r7, #8]
 801569a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801569c:	4618      	mov	r0, r3
 801569e:	f7fd ff0b 	bl	80134b8 <clust2sect>
 80156a2:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80156a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	d109      	bne.n	80156be <f_lseek+0x3d2>
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2202      	movs	r2, #2
 80156ae:	755a      	strb	r2, [r3, #21]
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	2102      	movs	r1, #2
 80156b4:	4618      	mov	r0, r3
 80156b6:	f7fd fc98 	bl	8012fea <unlock_fs>
 80156ba:	2302      	movs	r3, #2
 80156bc:	e065      	b.n	801578a <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80156be:	683b      	ldr	r3, [r7, #0]
 80156c0:	0a5b      	lsrs	r3, r3, #9
 80156c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156c4:	4413      	add	r3, r2
 80156c6:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	699a      	ldr	r2, [r3, #24]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	68db      	ldr	r3, [r3, #12]
 80156d0:	429a      	cmp	r2, r3
 80156d2:	d90a      	bls.n	80156ea <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	699a      	ldr	r2, [r3, #24]
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	7d1b      	ldrb	r3, [r3, #20]
 80156e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156e4:	b2da      	uxtb	r2, r3
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	699b      	ldr	r3, [r3, #24]
 80156ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156f2:	2b00      	cmp	r3, #0
 80156f4:	d040      	beq.n	8015778 <f_lseek+0x48c>
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6a1b      	ldr	r3, [r3, #32]
 80156fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d03b      	beq.n	8015778 <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015700:	687b      	ldr	r3, [r7, #4]
 8015702:	7d1b      	ldrb	r3, [r3, #20]
 8015704:	b25b      	sxtb	r3, r3
 8015706:	2b00      	cmp	r3, #0
 8015708:	da1d      	bge.n	8015746 <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801570a:	68bb      	ldr	r3, [r7, #8]
 801570c:	7858      	ldrb	r0, [r3, #1]
 801570e:	687b      	ldr	r3, [r7, #4]
 8015710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6a1a      	ldr	r2, [r3, #32]
 8015718:	2301      	movs	r3, #1
 801571a:	f7fd fb13 	bl	8012d44 <disk_write>
 801571e:	4603      	mov	r3, r0
 8015720:	2b00      	cmp	r3, #0
 8015722:	d009      	beq.n	8015738 <f_lseek+0x44c>
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2201      	movs	r2, #1
 8015728:	755a      	strb	r2, [r3, #21]
 801572a:	68bb      	ldr	r3, [r7, #8]
 801572c:	2101      	movs	r1, #1
 801572e:	4618      	mov	r0, r3
 8015730:	f7fd fc5b 	bl	8012fea <unlock_fs>
 8015734:	2301      	movs	r3, #1
 8015736:	e028      	b.n	801578a <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	7d1b      	ldrb	r3, [r3, #20]
 801573c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015740:	b2da      	uxtb	r2, r3
 8015742:	687b      	ldr	r3, [r7, #4]
 8015744:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8015746:	68bb      	ldr	r3, [r7, #8]
 8015748:	7858      	ldrb	r0, [r3, #1]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015750:	2301      	movs	r3, #1
 8015752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015754:	f7fd fad6 	bl	8012d04 <disk_read>
 8015758:	4603      	mov	r3, r0
 801575a:	2b00      	cmp	r3, #0
 801575c:	d009      	beq.n	8015772 <f_lseek+0x486>
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2201      	movs	r2, #1
 8015762:	755a      	strb	r2, [r3, #21]
 8015764:	68bb      	ldr	r3, [r7, #8]
 8015766:	2101      	movs	r1, #1
 8015768:	4618      	mov	r0, r3
 801576a:	f7fd fc3e 	bl	8012fea <unlock_fs>
 801576e:	2301      	movs	r3, #1
 8015770:	e00b      	b.n	801578a <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015776:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801577e:	4611      	mov	r1, r2
 8015780:	4618      	mov	r0, r3
 8015782:	f7fd fc32 	bl	8012fea <unlock_fs>
 8015786:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801578a:	4618      	mov	r0, r3
 801578c:	3740      	adds	r7, #64	; 0x40
 801578e:	46bd      	mov	sp, r7
 8015790:	bd80      	pop	{r7, pc}

08015792 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015792:	b580      	push	{r7, lr}
 8015794:	b086      	sub	sp, #24
 8015796:	af00      	add	r7, sp, #0
 8015798:	6078      	str	r0, [r7, #4]
 801579a:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 801579c:	687b      	ldr	r3, [r7, #4]
 801579e:	2b00      	cmp	r3, #0
 80157a0:	d101      	bne.n	80157a6 <f_opendir+0x14>
 80157a2:	2309      	movs	r3, #9
 80157a4:	e06a      	b.n	801587c <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80157aa:	f107 010c 	add.w	r1, r7, #12
 80157ae:	463b      	mov	r3, r7
 80157b0:	2200      	movs	r2, #0
 80157b2:	4618      	mov	r0, r3
 80157b4:	f7fe fea8 	bl	8014508 <find_volume>
 80157b8:	4603      	mov	r3, r0
 80157ba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80157bc:	7dfb      	ldrb	r3, [r7, #23]
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d14f      	bne.n	8015862 <f_opendir+0xd0>
		obj->fs = fs;
 80157c2:	68fa      	ldr	r2, [r7, #12]
 80157c4:	693b      	ldr	r3, [r7, #16]
 80157c6:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	4619      	mov	r1, r3
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f7fe fd8f 	bl	80142f0 <follow_path>
 80157d2:	4603      	mov	r3, r0
 80157d4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80157d6:	7dfb      	ldrb	r3, [r7, #23]
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d13d      	bne.n	8015858 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80157e2:	b25b      	sxtb	r3, r3
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	db12      	blt.n	801580e <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80157e8:	693b      	ldr	r3, [r7, #16]
 80157ea:	799b      	ldrb	r3, [r3, #6]
 80157ec:	f003 0310 	and.w	r3, r3, #16
 80157f0:	2b00      	cmp	r3, #0
 80157f2:	d00a      	beq.n	801580a <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80157f4:	68fa      	ldr	r2, [r7, #12]
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	6a1b      	ldr	r3, [r3, #32]
 80157fa:	4619      	mov	r1, r3
 80157fc:	4610      	mov	r0, r2
 80157fe:	f7fe fabe 	bl	8013d7e <ld_clust>
 8015802:	4602      	mov	r2, r0
 8015804:	693b      	ldr	r3, [r7, #16]
 8015806:	609a      	str	r2, [r3, #8]
 8015808:	e001      	b.n	801580e <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801580a:	2305      	movs	r3, #5
 801580c:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 801580e:	7dfb      	ldrb	r3, [r7, #23]
 8015810:	2b00      	cmp	r3, #0
 8015812:	d121      	bne.n	8015858 <f_opendir+0xc6>
				obj->id = fs->id;
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	88da      	ldrh	r2, [r3, #6]
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801581c:	2100      	movs	r1, #0
 801581e:	6878      	ldr	r0, [r7, #4]
 8015820:	f7fe f926 	bl	8013a70 <dir_sdi>
 8015824:	4603      	mov	r3, r0
 8015826:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8015828:	7dfb      	ldrb	r3, [r7, #23]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d114      	bne.n	8015858 <f_opendir+0xc6>
					if (obj->sclust) {
 801582e:	693b      	ldr	r3, [r7, #16]
 8015830:	689b      	ldr	r3, [r3, #8]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d00d      	beq.n	8015852 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8015836:	2100      	movs	r1, #0
 8015838:	6878      	ldr	r0, [r7, #4]
 801583a:	f7fd fc6f 	bl	801311c <inc_lock>
 801583e:	4602      	mov	r2, r0
 8015840:	693b      	ldr	r3, [r7, #16]
 8015842:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015844:	693b      	ldr	r3, [r7, #16]
 8015846:	691b      	ldr	r3, [r3, #16]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d105      	bne.n	8015858 <f_opendir+0xc6>
 801584c:	2312      	movs	r3, #18
 801584e:	75fb      	strb	r3, [r7, #23]
 8015850:	e002      	b.n	8015858 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015852:	693b      	ldr	r3, [r7, #16]
 8015854:	2200      	movs	r2, #0
 8015856:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8015858:	7dfb      	ldrb	r3, [r7, #23]
 801585a:	2b04      	cmp	r3, #4
 801585c:	d101      	bne.n	8015862 <f_opendir+0xd0>
 801585e:	2305      	movs	r3, #5
 8015860:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015862:	7dfb      	ldrb	r3, [r7, #23]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d002      	beq.n	801586e <f_opendir+0xdc>
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	2200      	movs	r2, #0
 801586c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	7dfa      	ldrb	r2, [r7, #23]
 8015872:	4611      	mov	r1, r2
 8015874:	4618      	mov	r0, r3
 8015876:	f7fd fbb8 	bl	8012fea <unlock_fs>
 801587a:	7dfb      	ldrb	r3, [r7, #23]
}
 801587c:	4618      	mov	r0, r3
 801587e:	3718      	adds	r7, #24
 8015880:	46bd      	mov	sp, r7
 8015882:	bd80      	pop	{r7, pc}

08015884 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	f107 0208 	add.w	r2, r7, #8
 8015892:	4611      	mov	r1, r2
 8015894:	4618      	mov	r0, r3
 8015896:	f7ff f88b 	bl	80149b0 <validate>
 801589a:	4603      	mov	r3, r0
 801589c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801589e:	7bfb      	ldrb	r3, [r7, #15]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d115      	bne.n	80158d0 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	691b      	ldr	r3, [r3, #16]
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d006      	beq.n	80158ba <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	691b      	ldr	r3, [r3, #16]
 80158b0:	4618      	mov	r0, r3
 80158b2:	f7fd fcc1 	bl	8013238 <dec_lock>
 80158b6:	4603      	mov	r3, r0
 80158b8:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80158ba:	7bfb      	ldrb	r3, [r7, #15]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d102      	bne.n	80158c6 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	2200      	movs	r2, #0
 80158c4:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80158c6:	68bb      	ldr	r3, [r7, #8]
 80158c8:	2100      	movs	r1, #0
 80158ca:	4618      	mov	r0, r3
 80158cc:	f7fd fb8d 	bl	8012fea <unlock_fs>
#endif
	}
	return res;
 80158d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80158d2:	4618      	mov	r0, r3
 80158d4:	3710      	adds	r7, #16
 80158d6:	46bd      	mov	sp, r7
 80158d8:	bd80      	pop	{r7, pc}

080158da <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80158da:	b580      	push	{r7, lr}
 80158dc:	b084      	sub	sp, #16
 80158de:	af00      	add	r7, sp, #0
 80158e0:	6078      	str	r0, [r7, #4]
 80158e2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	f107 0208 	add.w	r2, r7, #8
 80158ea:	4611      	mov	r1, r2
 80158ec:	4618      	mov	r0, r3
 80158ee:	f7ff f85f 	bl	80149b0 <validate>
 80158f2:	4603      	mov	r3, r0
 80158f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80158f6:	7bfb      	ldrb	r3, [r7, #15]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d126      	bne.n	801594a <f_readdir+0x70>
		if (!fno) {
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	2b00      	cmp	r3, #0
 8015900:	d106      	bne.n	8015910 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015902:	2100      	movs	r1, #0
 8015904:	6878      	ldr	r0, [r7, #4]
 8015906:	f7fe f8b3 	bl	8013a70 <dir_sdi>
 801590a:	4603      	mov	r3, r0
 801590c:	73fb      	strb	r3, [r7, #15]
 801590e:	e01c      	b.n	801594a <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015910:	2100      	movs	r1, #0
 8015912:	6878      	ldr	r0, [r7, #4]
 8015914:	f7fe fa72 	bl	8013dfc <dir_read>
 8015918:	4603      	mov	r3, r0
 801591a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 801591c:	7bfb      	ldrb	r3, [r7, #15]
 801591e:	2b04      	cmp	r3, #4
 8015920:	d101      	bne.n	8015926 <f_readdir+0x4c>
 8015922:	2300      	movs	r3, #0
 8015924:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8015926:	7bfb      	ldrb	r3, [r7, #15]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d10e      	bne.n	801594a <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 801592c:	6839      	ldr	r1, [r7, #0]
 801592e:	6878      	ldr	r0, [r7, #4]
 8015930:	f7fe fb48 	bl	8013fc4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015934:	2100      	movs	r1, #0
 8015936:	6878      	ldr	r0, [r7, #4]
 8015938:	f7fe f915 	bl	8013b66 <dir_next>
 801593c:	4603      	mov	r3, r0
 801593e:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015940:	7bfb      	ldrb	r3, [r7, #15]
 8015942:	2b04      	cmp	r3, #4
 8015944:	d101      	bne.n	801594a <f_readdir+0x70>
 8015946:	2300      	movs	r3, #0
 8015948:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801594a:	68bb      	ldr	r3, [r7, #8]
 801594c:	7bfa      	ldrb	r2, [r7, #15]
 801594e:	4611      	mov	r1, r2
 8015950:	4618      	mov	r0, r3
 8015952:	f7fd fb4a 	bl	8012fea <unlock_fs>
 8015956:	7bfb      	ldrb	r3, [r7, #15]
}
 8015958:	4618      	mov	r0, r3
 801595a:	3710      	adds	r7, #16
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8015960:	b580      	push	{r7, lr}
 8015962:	b084      	sub	sp, #16
 8015964:	af00      	add	r7, sp, #0
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801596a:	6839      	ldr	r1, [r7, #0]
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f7ff ffb4 	bl	80158da <f_readdir>
 8015972:	4603      	mov	r3, r0
 8015974:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8015976:	7bfb      	ldrb	r3, [r7, #15]
 8015978:	2b00      	cmp	r3, #0
 801597a:	d114      	bne.n	80159a6 <f_findnext+0x46>
 801597c:	683b      	ldr	r3, [r7, #0]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d011      	beq.n	80159a6 <f_findnext+0x46>
 8015982:	683b      	ldr	r3, [r7, #0]
 8015984:	7a5b      	ldrb	r3, [r3, #9]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d00d      	beq.n	80159a6 <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801598e:	683b      	ldr	r3, [r7, #0]
 8015990:	f103 0109 	add.w	r1, r3, #9
 8015994:	2300      	movs	r3, #0
 8015996:	2200      	movs	r2, #0
 8015998:	f7fe fb9a 	bl	80140d0 <pattern_matching>
 801599c:	4603      	mov	r3, r0
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d100      	bne.n	80159a4 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80159a2:	e7e2      	b.n	801596a <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80159a4:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80159a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80159a8:	4618      	mov	r0, r3
 80159aa:	3710      	adds	r7, #16
 80159ac:	46bd      	mov	sp, r7
 80159ae:	bd80      	pop	{r7, pc}

080159b0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80159b0:	b580      	push	{r7, lr}
 80159b2:	b086      	sub	sp, #24
 80159b4:	af00      	add	r7, sp, #0
 80159b6:	60f8      	str	r0, [r7, #12]
 80159b8:	60b9      	str	r1, [r7, #8]
 80159ba:	607a      	str	r2, [r7, #4]
 80159bc:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80159be:	68fb      	ldr	r3, [r7, #12]
 80159c0:	683a      	ldr	r2, [r7, #0]
 80159c2:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80159c4:	6879      	ldr	r1, [r7, #4]
 80159c6:	68f8      	ldr	r0, [r7, #12]
 80159c8:	f7ff fee3 	bl	8015792 <f_opendir>
 80159cc:	4603      	mov	r3, r0
 80159ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80159d0:	7dfb      	ldrb	r3, [r7, #23]
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d105      	bne.n	80159e2 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 80159d6:	68b9      	ldr	r1, [r7, #8]
 80159d8:	68f8      	ldr	r0, [r7, #12]
 80159da:	f7ff ffc1 	bl	8015960 <f_findnext>
 80159de:	4603      	mov	r3, r0
 80159e0:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80159e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3718      	adds	r7, #24
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}

080159ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80159ec:	b480      	push	{r7}
 80159ee:	b087      	sub	sp, #28
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	4613      	mov	r3, r2
 80159f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80159fa:	2301      	movs	r3, #1
 80159fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80159fe:	2300      	movs	r3, #0
 8015a00:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015a02:	4b1f      	ldr	r3, [pc, #124]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a04:	7a5b      	ldrb	r3, [r3, #9]
 8015a06:	b2db      	uxtb	r3, r3
 8015a08:	2b00      	cmp	r3, #0
 8015a0a:	d131      	bne.n	8015a70 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015a0c:	4b1c      	ldr	r3, [pc, #112]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a0e:	7a5b      	ldrb	r3, [r3, #9]
 8015a10:	b2db      	uxtb	r3, r3
 8015a12:	461a      	mov	r2, r3
 8015a14:	4b1a      	ldr	r3, [pc, #104]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a16:	2100      	movs	r1, #0
 8015a18:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015a1a:	4b19      	ldr	r3, [pc, #100]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a1c:	7a5b      	ldrb	r3, [r3, #9]
 8015a1e:	b2db      	uxtb	r3, r3
 8015a20:	4a17      	ldr	r2, [pc, #92]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a22:	009b      	lsls	r3, r3, #2
 8015a24:	4413      	add	r3, r2
 8015a26:	68fa      	ldr	r2, [r7, #12]
 8015a28:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015a2a:	4b15      	ldr	r3, [pc, #84]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a2c:	7a5b      	ldrb	r3, [r3, #9]
 8015a2e:	b2db      	uxtb	r3, r3
 8015a30:	461a      	mov	r2, r3
 8015a32:	4b13      	ldr	r3, [pc, #76]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a34:	4413      	add	r3, r2
 8015a36:	79fa      	ldrb	r2, [r7, #7]
 8015a38:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015a3a:	4b11      	ldr	r3, [pc, #68]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a3c:	7a5b      	ldrb	r3, [r3, #9]
 8015a3e:	b2db      	uxtb	r3, r3
 8015a40:	1c5a      	adds	r2, r3, #1
 8015a42:	b2d1      	uxtb	r1, r2
 8015a44:	4a0e      	ldr	r2, [pc, #56]	; (8015a80 <FATFS_LinkDriverEx+0x94>)
 8015a46:	7251      	strb	r1, [r2, #9]
 8015a48:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015a4a:	7dbb      	ldrb	r3, [r7, #22]
 8015a4c:	3330      	adds	r3, #48	; 0x30
 8015a4e:	b2da      	uxtb	r2, r3
 8015a50:	68bb      	ldr	r3, [r7, #8]
 8015a52:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	3301      	adds	r3, #1
 8015a58:	223a      	movs	r2, #58	; 0x3a
 8015a5a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015a5c:	68bb      	ldr	r3, [r7, #8]
 8015a5e:	3302      	adds	r3, #2
 8015a60:	222f      	movs	r2, #47	; 0x2f
 8015a62:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	3303      	adds	r3, #3
 8015a68:	2200      	movs	r2, #0
 8015a6a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	371c      	adds	r7, #28
 8015a76:	46bd      	mov	sp, r7
 8015a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7c:	4770      	bx	lr
 8015a7e:	bf00      	nop
 8015a80:	200003ec 	.word	0x200003ec

08015a84 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015a84:	b580      	push	{r7, lr}
 8015a86:	b082      	sub	sp, #8
 8015a88:	af00      	add	r7, sp, #0
 8015a8a:	6078      	str	r0, [r7, #4]
 8015a8c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015a8e:	2200      	movs	r2, #0
 8015a90:	6839      	ldr	r1, [r7, #0]
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	f7ff ffaa 	bl	80159ec <FATFS_LinkDriverEx>
 8015a98:	4603      	mov	r3, r0
}
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	3708      	adds	r7, #8
 8015a9e:	46bd      	mov	sp, r7
 8015aa0:	bd80      	pop	{r7, pc}

08015aa2 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015aa2:	b580      	push	{r7, lr}
 8015aa4:	b084      	sub	sp, #16
 8015aa6:	af00      	add	r7, sp, #0
 8015aa8:	4603      	mov	r3, r0
 8015aaa:	6039      	str	r1, [r7, #0]
 8015aac:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015aae:	2200      	movs	r2, #0
 8015ab0:	2101      	movs	r1, #1
 8015ab2:	2001      	movs	r0, #1
 8015ab4:	f000 fb5e 	bl	8016174 <osSemaphoreNew>
 8015ab8:	4602      	mov	r2, r0
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	681b      	ldr	r3, [r3, #0]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	bf14      	ite	ne
 8015ac6:	2301      	movne	r3, #1
 8015ac8:	2300      	moveq	r3, #0
 8015aca:	b2db      	uxtb	r3, r3
 8015acc:	60fb      	str	r3, [r7, #12]

    return ret;
 8015ace:	68fb      	ldr	r3, [r7, #12]
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}

08015ad8 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b082      	sub	sp, #8
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015ae0:	6878      	ldr	r0, [r7, #4]
 8015ae2:	f000 fca3 	bl	801642c <osSemaphoreDelete>
#endif
    return 1;
 8015ae6:	2301      	movs	r3, #1
}
 8015ae8:	4618      	mov	r0, r3
 8015aea:	3708      	adds	r7, #8
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bd80      	pop	{r7, pc}

08015af0 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b084      	sub	sp, #16
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015af8:	2300      	movs	r3, #0
 8015afa:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015afc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f000 fbd5 	bl	80162b0 <osSemaphoreAcquire>
 8015b06:	4603      	mov	r3, r0
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d101      	bne.n	8015b10 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015b0c:	2301      	movs	r3, #1
 8015b0e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015b10:	68fb      	ldr	r3, [r7, #12]
}
 8015b12:	4618      	mov	r0, r3
 8015b14:	3710      	adds	r7, #16
 8015b16:	46bd      	mov	sp, r7
 8015b18:	bd80      	pop	{r7, pc}

08015b1a <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015b1a:	b580      	push	{r7, lr}
 8015b1c:	b082      	sub	sp, #8
 8015b1e:	af00      	add	r7, sp, #0
 8015b20:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015b22:	6878      	ldr	r0, [r7, #4]
 8015b24:	f000 fc2a 	bl	801637c <osSemaphoreRelease>
#endif
}
 8015b28:	bf00      	nop
 8015b2a:	3708      	adds	r7, #8
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}

08015b30 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015b30:	b480      	push	{r7}
 8015b32:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8015b34:	bf00      	nop
 8015b36:	46bd      	mov	sp, r7
 8015b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3c:	4770      	bx	lr
	...

08015b40 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015b40:	b480      	push	{r7}
 8015b42:	b085      	sub	sp, #20
 8015b44:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b46:	f3ef 8305 	mrs	r3, IPSR
 8015b4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8015b4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d10f      	bne.n	8015b72 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b52:	f3ef 8310 	mrs	r3, PRIMASK
 8015b56:	607b      	str	r3, [r7, #4]
  return(result);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	2b00      	cmp	r3, #0
 8015b5c:	d105      	bne.n	8015b6a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8015b62:	603b      	str	r3, [r7, #0]
  return(result);
 8015b64:	683b      	ldr	r3, [r7, #0]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d007      	beq.n	8015b7a <osKernelInitialize+0x3a>
 8015b6a:	4b0e      	ldr	r3, [pc, #56]	; (8015ba4 <osKernelInitialize+0x64>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	2b02      	cmp	r3, #2
 8015b70:	d103      	bne.n	8015b7a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8015b72:	f06f 0305 	mvn.w	r3, #5
 8015b76:	60fb      	str	r3, [r7, #12]
 8015b78:	e00c      	b.n	8015b94 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015b7a:	4b0a      	ldr	r3, [pc, #40]	; (8015ba4 <osKernelInitialize+0x64>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	2b00      	cmp	r3, #0
 8015b80:	d105      	bne.n	8015b8e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015b82:	4b08      	ldr	r3, [pc, #32]	; (8015ba4 <osKernelInitialize+0x64>)
 8015b84:	2201      	movs	r2, #1
 8015b86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015b88:	2300      	movs	r3, #0
 8015b8a:	60fb      	str	r3, [r7, #12]
 8015b8c:	e002      	b.n	8015b94 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8015b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8015b92:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015b94:	68fb      	ldr	r3, [r7, #12]
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3714      	adds	r7, #20
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ba0:	4770      	bx	lr
 8015ba2:	bf00      	nop
 8015ba4:	200003f8 	.word	0x200003f8

08015ba8 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b082      	sub	sp, #8
 8015bac:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8015bae:	f002 fe7b 	bl	80188a8 <xTaskGetSchedulerState>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	2b00      	cmp	r3, #0
 8015bb6:	d004      	beq.n	8015bc2 <osKernelGetState+0x1a>
 8015bb8:	2b02      	cmp	r3, #2
 8015bba:	d105      	bne.n	8015bc8 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8015bbc:	2302      	movs	r3, #2
 8015bbe:	607b      	str	r3, [r7, #4]
      break;
 8015bc0:	e00c      	b.n	8015bdc <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8015bc2:	2303      	movs	r3, #3
 8015bc4:	607b      	str	r3, [r7, #4]
      break;
 8015bc6:	e009      	b.n	8015bdc <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8015bc8:	4b07      	ldr	r3, [pc, #28]	; (8015be8 <osKernelGetState+0x40>)
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d102      	bne.n	8015bd6 <osKernelGetState+0x2e>
        state = osKernelReady;
 8015bd0:	2301      	movs	r3, #1
 8015bd2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015bd4:	e001      	b.n	8015bda <osKernelGetState+0x32>
        state = osKernelInactive;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	607b      	str	r3, [r7, #4]
      break;
 8015bda:	bf00      	nop
  }

  return (state);
 8015bdc:	687b      	ldr	r3, [r7, #4]
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	3708      	adds	r7, #8
 8015be2:	46bd      	mov	sp, r7
 8015be4:	bd80      	pop	{r7, pc}
 8015be6:	bf00      	nop
 8015be8:	200003f8 	.word	0x200003f8

08015bec <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015bec:	b580      	push	{r7, lr}
 8015bee:	b084      	sub	sp, #16
 8015bf0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bf2:	f3ef 8305 	mrs	r3, IPSR
 8015bf6:	60bb      	str	r3, [r7, #8]
  return(result);
 8015bf8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d10f      	bne.n	8015c1e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8015c02:	607b      	str	r3, [r7, #4]
  return(result);
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	2b00      	cmp	r3, #0
 8015c08:	d105      	bne.n	8015c16 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8015c0e:	603b      	str	r3, [r7, #0]
  return(result);
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d007      	beq.n	8015c26 <osKernelStart+0x3a>
 8015c16:	4b0f      	ldr	r3, [pc, #60]	; (8015c54 <osKernelStart+0x68>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b02      	cmp	r3, #2
 8015c1c:	d103      	bne.n	8015c26 <osKernelStart+0x3a>
    stat = osErrorISR;
 8015c1e:	f06f 0305 	mvn.w	r3, #5
 8015c22:	60fb      	str	r3, [r7, #12]
 8015c24:	e010      	b.n	8015c48 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015c26:	4b0b      	ldr	r3, [pc, #44]	; (8015c54 <osKernelStart+0x68>)
 8015c28:	681b      	ldr	r3, [r3, #0]
 8015c2a:	2b01      	cmp	r3, #1
 8015c2c:	d109      	bne.n	8015c42 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015c2e:	f7ff ff7f 	bl	8015b30 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015c32:	4b08      	ldr	r3, [pc, #32]	; (8015c54 <osKernelStart+0x68>)
 8015c34:	2202      	movs	r2, #2
 8015c36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015c38:	f002 f9c8 	bl	8017fcc <vTaskStartScheduler>
      stat = osOK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	60fb      	str	r3, [r7, #12]
 8015c40:	e002      	b.n	8015c48 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8015c42:	f04f 33ff 	mov.w	r3, #4294967295
 8015c46:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015c48:	68fb      	ldr	r3, [r7, #12]
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3710      	adds	r7, #16
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd80      	pop	{r7, pc}
 8015c52:	bf00      	nop
 8015c54:	200003f8 	.word	0x200003f8

08015c58 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b084      	sub	sp, #16
 8015c5c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c5e:	f3ef 8305 	mrs	r3, IPSR
 8015c62:	60bb      	str	r3, [r7, #8]
  return(result);
 8015c64:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015c66:	2b00      	cmp	r3, #0
 8015c68:	d10f      	bne.n	8015c8a <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8015c6e:	607b      	str	r3, [r7, #4]
  return(result);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d105      	bne.n	8015c82 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015c76:	f3ef 8311 	mrs	r3, BASEPRI
 8015c7a:	603b      	str	r3, [r7, #0]
  return(result);
 8015c7c:	683b      	ldr	r3, [r7, #0]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d007      	beq.n	8015c92 <osKernelGetTickCount+0x3a>
 8015c82:	4b08      	ldr	r3, [pc, #32]	; (8015ca4 <osKernelGetTickCount+0x4c>)
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	2b02      	cmp	r3, #2
 8015c88:	d103      	bne.n	8015c92 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8015c8a:	f002 fac3 	bl	8018214 <xTaskGetTickCountFromISR>
 8015c8e:	60f8      	str	r0, [r7, #12]
 8015c90:	e002      	b.n	8015c98 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8015c92:	f002 faaf 	bl	80181f4 <xTaskGetTickCount>
 8015c96:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8015c98:	68fb      	ldr	r3, [r7, #12]
}
 8015c9a:	4618      	mov	r0, r3
 8015c9c:	3710      	adds	r7, #16
 8015c9e:	46bd      	mov	sp, r7
 8015ca0:	bd80      	pop	{r7, pc}
 8015ca2:	bf00      	nop
 8015ca4:	200003f8 	.word	0x200003f8

08015ca8 <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8015ca8:	b480      	push	{r7}
 8015caa:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8015cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb8:	4770      	bx	lr
	...

08015cbc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b090      	sub	sp, #64	; 0x40
 8015cc0:	af04      	add	r7, sp, #16
 8015cc2:	60f8      	str	r0, [r7, #12]
 8015cc4:	60b9      	str	r1, [r7, #8]
 8015cc6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ccc:	f3ef 8305 	mrs	r3, IPSR
 8015cd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8015cd2:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f040 808f 	bne.w	8015df8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015cda:	f3ef 8310 	mrs	r3, PRIMASK
 8015cde:	61bb      	str	r3, [r7, #24]
  return(result);
 8015ce0:	69bb      	ldr	r3, [r7, #24]
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d105      	bne.n	8015cf2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015ce6:	f3ef 8311 	mrs	r3, BASEPRI
 8015cea:	617b      	str	r3, [r7, #20]
  return(result);
 8015cec:	697b      	ldr	r3, [r7, #20]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d003      	beq.n	8015cfa <osThreadNew+0x3e>
 8015cf2:	4b44      	ldr	r3, [pc, #272]	; (8015e04 <osThreadNew+0x148>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2b02      	cmp	r3, #2
 8015cf8:	d07e      	beq.n	8015df8 <osThreadNew+0x13c>
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d07b      	beq.n	8015df8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8015d00:	2380      	movs	r3, #128	; 0x80
 8015d02:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8015d04:	2318      	movs	r3, #24
 8015d06:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8015d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8015d10:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d045      	beq.n	8015da4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8015d18:	687b      	ldr	r3, [r7, #4]
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d002      	beq.n	8015d26 <osThreadNew+0x6a>
        name = attr->name;
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	681b      	ldr	r3, [r3, #0]
 8015d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	699b      	ldr	r3, [r3, #24]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d002      	beq.n	8015d34 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	699b      	ldr	r3, [r3, #24]
 8015d32:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d36:	2b00      	cmp	r3, #0
 8015d38:	d008      	beq.n	8015d4c <osThreadNew+0x90>
 8015d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3c:	2b38      	cmp	r3, #56	; 0x38
 8015d3e:	d805      	bhi.n	8015d4c <osThreadNew+0x90>
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	685b      	ldr	r3, [r3, #4]
 8015d44:	f003 0301 	and.w	r3, r3, #1
 8015d48:	2b00      	cmp	r3, #0
 8015d4a:	d001      	beq.n	8015d50 <osThreadNew+0x94>
        return (NULL);
 8015d4c:	2300      	movs	r3, #0
 8015d4e:	e054      	b.n	8015dfa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	695b      	ldr	r3, [r3, #20]
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d003      	beq.n	8015d60 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	695b      	ldr	r3, [r3, #20]
 8015d5c:	089b      	lsrs	r3, r3, #2
 8015d5e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	689b      	ldr	r3, [r3, #8]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d00e      	beq.n	8015d86 <osThreadNew+0xca>
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	68db      	ldr	r3, [r3, #12]
 8015d6c:	2b5b      	cmp	r3, #91	; 0x5b
 8015d6e:	d90a      	bls.n	8015d86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d006      	beq.n	8015d86 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d78:	687b      	ldr	r3, [r7, #4]
 8015d7a:	695b      	ldr	r3, [r3, #20]
 8015d7c:	2b00      	cmp	r3, #0
 8015d7e:	d002      	beq.n	8015d86 <osThreadNew+0xca>
        mem = 1;
 8015d80:	2301      	movs	r3, #1
 8015d82:	623b      	str	r3, [r7, #32]
 8015d84:	e010      	b.n	8015da8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	689b      	ldr	r3, [r3, #8]
 8015d8a:	2b00      	cmp	r3, #0
 8015d8c:	d10c      	bne.n	8015da8 <osThreadNew+0xec>
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	68db      	ldr	r3, [r3, #12]
 8015d92:	2b00      	cmp	r3, #0
 8015d94:	d108      	bne.n	8015da8 <osThreadNew+0xec>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	691b      	ldr	r3, [r3, #16]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d104      	bne.n	8015da8 <osThreadNew+0xec>
          mem = 0;
 8015d9e:	2300      	movs	r3, #0
 8015da0:	623b      	str	r3, [r7, #32]
 8015da2:	e001      	b.n	8015da8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8015da4:	2300      	movs	r3, #0
 8015da6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	2b01      	cmp	r3, #1
 8015dac:	d110      	bne.n	8015dd0 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8015db2:	687a      	ldr	r2, [r7, #4]
 8015db4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015db6:	9202      	str	r2, [sp, #8]
 8015db8:	9301      	str	r3, [sp, #4]
 8015dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dbc:	9300      	str	r3, [sp, #0]
 8015dbe:	68bb      	ldr	r3, [r7, #8]
 8015dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015dc4:	68f8      	ldr	r0, [r7, #12]
 8015dc6:	f001 fea5 	bl	8017b14 <xTaskCreateStatic>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	613b      	str	r3, [r7, #16]
 8015dce:	e013      	b.n	8015df8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8015dd0:	6a3b      	ldr	r3, [r7, #32]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d110      	bne.n	8015df8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dd8:	b29a      	uxth	r2, r3
 8015dda:	f107 0310 	add.w	r3, r7, #16
 8015dde:	9301      	str	r3, [sp, #4]
 8015de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de2:	9300      	str	r3, [sp, #0]
 8015de4:	68bb      	ldr	r3, [r7, #8]
 8015de6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f001 fef3 	bl	8017bd4 <xTaskCreate>
 8015dee:	4603      	mov	r3, r0
 8015df0:	2b01      	cmp	r3, #1
 8015df2:	d001      	beq.n	8015df8 <osThreadNew+0x13c>
          hTask = NULL;
 8015df4:	2300      	movs	r3, #0
 8015df6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015df8:	693b      	ldr	r3, [r7, #16]
}
 8015dfa:	4618      	mov	r0, r3
 8015dfc:	3730      	adds	r7, #48	; 0x30
 8015dfe:	46bd      	mov	sp, r7
 8015e00:	bd80      	pop	{r7, pc}
 8015e02:	bf00      	nop
 8015e04:	200003f8 	.word	0x200003f8

08015e08 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8015e08:	b580      	push	{r7, lr}
 8015e0a:	b086      	sub	sp, #24
 8015e0c:	af00      	add	r7, sp, #0
 8015e0e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e10:	f3ef 8305 	mrs	r3, IPSR
 8015e14:	613b      	str	r3, [r7, #16]
  return(result);
 8015e16:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d10f      	bne.n	8015e3c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e1c:	f3ef 8310 	mrs	r3, PRIMASK
 8015e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d105      	bne.n	8015e34 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015e28:	f3ef 8311 	mrs	r3, BASEPRI
 8015e2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e2e:	68bb      	ldr	r3, [r7, #8]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d007      	beq.n	8015e44 <osDelay+0x3c>
 8015e34:	4b0a      	ldr	r3, [pc, #40]	; (8015e60 <osDelay+0x58>)
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	2b02      	cmp	r3, #2
 8015e3a:	d103      	bne.n	8015e44 <osDelay+0x3c>
    stat = osErrorISR;
 8015e3c:	f06f 0305 	mvn.w	r3, #5
 8015e40:	617b      	str	r3, [r7, #20]
 8015e42:	e007      	b.n	8015e54 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8015e44:	2300      	movs	r3, #0
 8015e46:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	2b00      	cmp	r3, #0
 8015e4c:	d002      	beq.n	8015e54 <osDelay+0x4c>
      vTaskDelay(ticks);
 8015e4e:	6878      	ldr	r0, [r7, #4]
 8015e50:	f002 f886 	bl	8017f60 <vTaskDelay>
    }
  }

  return (stat);
 8015e54:	697b      	ldr	r3, [r7, #20]
}
 8015e56:	4618      	mov	r0, r3
 8015e58:	3718      	adds	r7, #24
 8015e5a:	46bd      	mov	sp, r7
 8015e5c:	bd80      	pop	{r7, pc}
 8015e5e:	bf00      	nop
 8015e60:	200003f8 	.word	0x200003f8

08015e64 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8015e64:	b580      	push	{r7, lr}
 8015e66:	b088      	sub	sp, #32
 8015e68:	af00      	add	r7, sp, #0
 8015e6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e6c:	f3ef 8305 	mrs	r3, IPSR
 8015e70:	617b      	str	r3, [r7, #20]
  return(result);
 8015e72:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d10f      	bne.n	8015e98 <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e78:	f3ef 8310 	mrs	r3, PRIMASK
 8015e7c:	613b      	str	r3, [r7, #16]
  return(result);
 8015e7e:	693b      	ldr	r3, [r7, #16]
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d105      	bne.n	8015e90 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015e84:	f3ef 8311 	mrs	r3, BASEPRI
 8015e88:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e8a:	68fb      	ldr	r3, [r7, #12]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d007      	beq.n	8015ea0 <osDelayUntil+0x3c>
 8015e90:	4b13      	ldr	r3, [pc, #76]	; (8015ee0 <osDelayUntil+0x7c>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	2b02      	cmp	r3, #2
 8015e96:	d103      	bne.n	8015ea0 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8015e98:	f06f 0305 	mvn.w	r3, #5
 8015e9c:	61fb      	str	r3, [r7, #28]
 8015e9e:	e019      	b.n	8015ed4 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8015ea4:	f002 f9a6 	bl	80181f4 <xTaskGetTickCount>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	687a      	ldr	r2, [r7, #4]
 8015eb0:	1ad3      	subs	r3, r2, r3
 8015eb2:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d009      	beq.n	8015ece <osDelayUntil+0x6a>
 8015eba:	69bb      	ldr	r3, [r7, #24]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	db06      	blt.n	8015ece <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8015ec0:	f107 0308 	add.w	r3, r7, #8
 8015ec4:	69b9      	ldr	r1, [r7, #24]
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f001 ffca 	bl	8017e60 <vTaskDelayUntil>
 8015ecc:	e002      	b.n	8015ed4 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8015ece:	f06f 0303 	mvn.w	r3, #3
 8015ed2:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8015ed4:	69fb      	ldr	r3, [r7, #28]
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	3720      	adds	r7, #32
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}
 8015ede:	bf00      	nop
 8015ee0:	200003f8 	.word	0x200003f8

08015ee4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b08a      	sub	sp, #40	; 0x28
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015eec:	2300      	movs	r3, #0
 8015eee:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ef0:	f3ef 8305 	mrs	r3, IPSR
 8015ef4:	613b      	str	r3, [r7, #16]
  return(result);
 8015ef6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	f040 8085 	bne.w	8016008 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015efe:	f3ef 8310 	mrs	r3, PRIMASK
 8015f02:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f04:	68fb      	ldr	r3, [r7, #12]
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d105      	bne.n	8015f16 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015f0a:	f3ef 8311 	mrs	r3, BASEPRI
 8015f0e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f10:	68bb      	ldr	r3, [r7, #8]
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d003      	beq.n	8015f1e <osMutexNew+0x3a>
 8015f16:	4b3f      	ldr	r3, [pc, #252]	; (8016014 <osMutexNew+0x130>)
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	2b02      	cmp	r3, #2
 8015f1c:	d074      	beq.n	8016008 <osMutexNew+0x124>
    if (attr != NULL) {
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d003      	beq.n	8015f2c <osMutexNew+0x48>
      type = attr->attr_bits;
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	685b      	ldr	r3, [r3, #4]
 8015f28:	623b      	str	r3, [r7, #32]
 8015f2a:	e001      	b.n	8015f30 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8015f2c:	2300      	movs	r3, #0
 8015f2e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015f30:	6a3b      	ldr	r3, [r7, #32]
 8015f32:	f003 0301 	and.w	r3, r3, #1
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d002      	beq.n	8015f40 <osMutexNew+0x5c>
      rmtx = 1U;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	61fb      	str	r3, [r7, #28]
 8015f3e:	e001      	b.n	8015f44 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8015f40:	2300      	movs	r3, #0
 8015f42:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015f44:	6a3b      	ldr	r3, [r7, #32]
 8015f46:	f003 0308 	and.w	r3, r3, #8
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d15c      	bne.n	8016008 <osMutexNew+0x124>
      mem = -1;
 8015f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8015f52:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d015      	beq.n	8015f86 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	689b      	ldr	r3, [r3, #8]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d006      	beq.n	8015f70 <osMutexNew+0x8c>
 8015f62:	687b      	ldr	r3, [r7, #4]
 8015f64:	68db      	ldr	r3, [r3, #12]
 8015f66:	2b4f      	cmp	r3, #79	; 0x4f
 8015f68:	d902      	bls.n	8015f70 <osMutexNew+0x8c>
          mem = 1;
 8015f6a:	2301      	movs	r3, #1
 8015f6c:	61bb      	str	r3, [r7, #24]
 8015f6e:	e00c      	b.n	8015f8a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	689b      	ldr	r3, [r3, #8]
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d108      	bne.n	8015f8a <osMutexNew+0xa6>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	68db      	ldr	r3, [r3, #12]
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d104      	bne.n	8015f8a <osMutexNew+0xa6>
            mem = 0;
 8015f80:	2300      	movs	r3, #0
 8015f82:	61bb      	str	r3, [r7, #24]
 8015f84:	e001      	b.n	8015f8a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8015f86:	2300      	movs	r3, #0
 8015f88:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8015f8a:	69bb      	ldr	r3, [r7, #24]
 8015f8c:	2b01      	cmp	r3, #1
 8015f8e:	d112      	bne.n	8015fb6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8015f90:	69fb      	ldr	r3, [r7, #28]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d007      	beq.n	8015fa6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	689b      	ldr	r3, [r3, #8]
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	2004      	movs	r0, #4
 8015f9e:	f000 fe4c 	bl	8016c3a <xQueueCreateMutexStatic>
 8015fa2:	6278      	str	r0, [r7, #36]	; 0x24
 8015fa4:	e016      	b.n	8015fd4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	689b      	ldr	r3, [r3, #8]
 8015faa:	4619      	mov	r1, r3
 8015fac:	2001      	movs	r0, #1
 8015fae:	f000 fe44 	bl	8016c3a <xQueueCreateMutexStatic>
 8015fb2:	6278      	str	r0, [r7, #36]	; 0x24
 8015fb4:	e00e      	b.n	8015fd4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8015fb6:	69bb      	ldr	r3, [r7, #24]
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d10b      	bne.n	8015fd4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8015fbc:	69fb      	ldr	r3, [r7, #28]
 8015fbe:	2b00      	cmp	r3, #0
 8015fc0:	d004      	beq.n	8015fcc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8015fc2:	2004      	movs	r0, #4
 8015fc4:	f000 fe21 	bl	8016c0a <xQueueCreateMutex>
 8015fc8:	6278      	str	r0, [r7, #36]	; 0x24
 8015fca:	e003      	b.n	8015fd4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8015fcc:	2001      	movs	r0, #1
 8015fce:	f000 fe1c 	bl	8016c0a <xQueueCreateMutex>
 8015fd2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d00c      	beq.n	8015ff4 <osMutexNew+0x110>
        if (attr != NULL) {
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d003      	beq.n	8015fe8 <osMutexNew+0x104>
          name = attr->name;
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	617b      	str	r3, [r7, #20]
 8015fe6:	e001      	b.n	8015fec <osMutexNew+0x108>
        } else {
          name = NULL;
 8015fe8:	2300      	movs	r3, #0
 8015fea:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8015fec:	6979      	ldr	r1, [r7, #20]
 8015fee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ff0:	f001 fd0a 	bl	8017a08 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d006      	beq.n	8016008 <osMutexNew+0x124>
 8015ffa:	69fb      	ldr	r3, [r7, #28]
 8015ffc:	2b00      	cmp	r3, #0
 8015ffe:	d003      	beq.n	8016008 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8016000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016002:	f043 0301 	orr.w	r3, r3, #1
 8016006:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8016008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801600a:	4618      	mov	r0, r3
 801600c:	3728      	adds	r7, #40	; 0x28
 801600e:	46bd      	mov	sp, r7
 8016010:	bd80      	pop	{r7, pc}
 8016012:	bf00      	nop
 8016014:	200003f8 	.word	0x200003f8

08016018 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8016018:	b580      	push	{r7, lr}
 801601a:	b088      	sub	sp, #32
 801601c:	af00      	add	r7, sp, #0
 801601e:	6078      	str	r0, [r7, #4]
 8016020:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	f023 0301 	bic.w	r3, r3, #1
 8016028:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	f003 0301 	and.w	r3, r3, #1
 8016030:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8016032:	2300      	movs	r3, #0
 8016034:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016036:	f3ef 8305 	mrs	r3, IPSR
 801603a:	613b      	str	r3, [r7, #16]
  return(result);
 801603c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801603e:	2b00      	cmp	r3, #0
 8016040:	d10f      	bne.n	8016062 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016042:	f3ef 8310 	mrs	r3, PRIMASK
 8016046:	60fb      	str	r3, [r7, #12]
  return(result);
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	2b00      	cmp	r3, #0
 801604c:	d105      	bne.n	801605a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801604e:	f3ef 8311 	mrs	r3, BASEPRI
 8016052:	60bb      	str	r3, [r7, #8]
  return(result);
 8016054:	68bb      	ldr	r3, [r7, #8]
 8016056:	2b00      	cmp	r3, #0
 8016058:	d007      	beq.n	801606a <osMutexAcquire+0x52>
 801605a:	4b1d      	ldr	r3, [pc, #116]	; (80160d0 <osMutexAcquire+0xb8>)
 801605c:	681b      	ldr	r3, [r3, #0]
 801605e:	2b02      	cmp	r3, #2
 8016060:	d103      	bne.n	801606a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8016062:	f06f 0305 	mvn.w	r3, #5
 8016066:	61fb      	str	r3, [r7, #28]
 8016068:	e02c      	b.n	80160c4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801606a:	69bb      	ldr	r3, [r7, #24]
 801606c:	2b00      	cmp	r3, #0
 801606e:	d103      	bne.n	8016078 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8016070:	f06f 0303 	mvn.w	r3, #3
 8016074:	61fb      	str	r3, [r7, #28]
 8016076:	e025      	b.n	80160c4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8016078:	697b      	ldr	r3, [r7, #20]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d011      	beq.n	80160a2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 801607e:	6839      	ldr	r1, [r7, #0]
 8016080:	69b8      	ldr	r0, [r7, #24]
 8016082:	f000 fe2a 	bl	8016cda <xQueueTakeMutexRecursive>
 8016086:	4603      	mov	r3, r0
 8016088:	2b01      	cmp	r3, #1
 801608a:	d01b      	beq.n	80160c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d003      	beq.n	801609a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8016092:	f06f 0301 	mvn.w	r3, #1
 8016096:	61fb      	str	r3, [r7, #28]
 8016098:	e014      	b.n	80160c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 801609a:	f06f 0302 	mvn.w	r3, #2
 801609e:	61fb      	str	r3, [r7, #28]
 80160a0:	e010      	b.n	80160c4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80160a2:	6839      	ldr	r1, [r7, #0]
 80160a4:	69b8      	ldr	r0, [r7, #24]
 80160a6:	f001 f9cf 	bl	8017448 <xQueueSemaphoreTake>
 80160aa:	4603      	mov	r3, r0
 80160ac:	2b01      	cmp	r3, #1
 80160ae:	d009      	beq.n	80160c4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d003      	beq.n	80160be <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80160b6:	f06f 0301 	mvn.w	r3, #1
 80160ba:	61fb      	str	r3, [r7, #28]
 80160bc:	e002      	b.n	80160c4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80160be:	f06f 0302 	mvn.w	r3, #2
 80160c2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80160c4:	69fb      	ldr	r3, [r7, #28]
}
 80160c6:	4618      	mov	r0, r3
 80160c8:	3720      	adds	r7, #32
 80160ca:	46bd      	mov	sp, r7
 80160cc:	bd80      	pop	{r7, pc}
 80160ce:	bf00      	nop
 80160d0:	200003f8 	.word	0x200003f8

080160d4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80160d4:	b580      	push	{r7, lr}
 80160d6:	b088      	sub	sp, #32
 80160d8:	af00      	add	r7, sp, #0
 80160da:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	f023 0301 	bic.w	r3, r3, #1
 80160e2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f003 0301 	and.w	r3, r3, #1
 80160ea:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80160ec:	2300      	movs	r3, #0
 80160ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80160f0:	f3ef 8305 	mrs	r3, IPSR
 80160f4:	613b      	str	r3, [r7, #16]
  return(result);
 80160f6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d10f      	bne.n	801611c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80160fc:	f3ef 8310 	mrs	r3, PRIMASK
 8016100:	60fb      	str	r3, [r7, #12]
  return(result);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d105      	bne.n	8016114 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016108:	f3ef 8311 	mrs	r3, BASEPRI
 801610c:	60bb      	str	r3, [r7, #8]
  return(result);
 801610e:	68bb      	ldr	r3, [r7, #8]
 8016110:	2b00      	cmp	r3, #0
 8016112:	d007      	beq.n	8016124 <osMutexRelease+0x50>
 8016114:	4b16      	ldr	r3, [pc, #88]	; (8016170 <osMutexRelease+0x9c>)
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	2b02      	cmp	r3, #2
 801611a:	d103      	bne.n	8016124 <osMutexRelease+0x50>
    stat = osErrorISR;
 801611c:	f06f 0305 	mvn.w	r3, #5
 8016120:	61fb      	str	r3, [r7, #28]
 8016122:	e01f      	b.n	8016164 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8016124:	69bb      	ldr	r3, [r7, #24]
 8016126:	2b00      	cmp	r3, #0
 8016128:	d103      	bne.n	8016132 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801612a:	f06f 0303 	mvn.w	r3, #3
 801612e:	61fb      	str	r3, [r7, #28]
 8016130:	e018      	b.n	8016164 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8016132:	697b      	ldr	r3, [r7, #20]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d009      	beq.n	801614c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8016138:	69b8      	ldr	r0, [r7, #24]
 801613a:	f000 fd99 	bl	8016c70 <xQueueGiveMutexRecursive>
 801613e:	4603      	mov	r3, r0
 8016140:	2b01      	cmp	r3, #1
 8016142:	d00f      	beq.n	8016164 <osMutexRelease+0x90>
        stat = osErrorResource;
 8016144:	f06f 0302 	mvn.w	r3, #2
 8016148:	61fb      	str	r3, [r7, #28]
 801614a:	e00b      	b.n	8016164 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 801614c:	2300      	movs	r3, #0
 801614e:	2200      	movs	r2, #0
 8016150:	2100      	movs	r1, #0
 8016152:	69b8      	ldr	r0, [r7, #24]
 8016154:	f000 fe66 	bl	8016e24 <xQueueGenericSend>
 8016158:	4603      	mov	r3, r0
 801615a:	2b01      	cmp	r3, #1
 801615c:	d002      	beq.n	8016164 <osMutexRelease+0x90>
        stat = osErrorResource;
 801615e:	f06f 0302 	mvn.w	r3, #2
 8016162:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8016164:	69fb      	ldr	r3, [r7, #28]
}
 8016166:	4618      	mov	r0, r3
 8016168:	3720      	adds	r7, #32
 801616a:	46bd      	mov	sp, r7
 801616c:	bd80      	pop	{r7, pc}
 801616e:	bf00      	nop
 8016170:	200003f8 	.word	0x200003f8

08016174 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8016174:	b580      	push	{r7, lr}
 8016176:	b08c      	sub	sp, #48	; 0x30
 8016178:	af02      	add	r7, sp, #8
 801617a:	60f8      	str	r0, [r7, #12]
 801617c:	60b9      	str	r1, [r7, #8]
 801617e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8016180:	2300      	movs	r3, #0
 8016182:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016184:	f3ef 8305 	mrs	r3, IPSR
 8016188:	61bb      	str	r3, [r7, #24]
  return(result);
 801618a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801618c:	2b00      	cmp	r3, #0
 801618e:	f040 8087 	bne.w	80162a0 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016192:	f3ef 8310 	mrs	r3, PRIMASK
 8016196:	617b      	str	r3, [r7, #20]
  return(result);
 8016198:	697b      	ldr	r3, [r7, #20]
 801619a:	2b00      	cmp	r3, #0
 801619c:	d105      	bne.n	80161aa <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801619e:	f3ef 8311 	mrs	r3, BASEPRI
 80161a2:	613b      	str	r3, [r7, #16]
  return(result);
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	d003      	beq.n	80161b2 <osSemaphoreNew+0x3e>
 80161aa:	4b40      	ldr	r3, [pc, #256]	; (80162ac <osSemaphoreNew+0x138>)
 80161ac:	681b      	ldr	r3, [r3, #0]
 80161ae:	2b02      	cmp	r3, #2
 80161b0:	d076      	beq.n	80162a0 <osSemaphoreNew+0x12c>
 80161b2:	68fb      	ldr	r3, [r7, #12]
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d073      	beq.n	80162a0 <osSemaphoreNew+0x12c>
 80161b8:	68ba      	ldr	r2, [r7, #8]
 80161ba:	68fb      	ldr	r3, [r7, #12]
 80161bc:	429a      	cmp	r2, r3
 80161be:	d86f      	bhi.n	80162a0 <osSemaphoreNew+0x12c>
    mem = -1;
 80161c0:	f04f 33ff 	mov.w	r3, #4294967295
 80161c4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d015      	beq.n	80161f8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	689b      	ldr	r3, [r3, #8]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d006      	beq.n	80161e2 <osSemaphoreNew+0x6e>
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	68db      	ldr	r3, [r3, #12]
 80161d8:	2b4f      	cmp	r3, #79	; 0x4f
 80161da:	d902      	bls.n	80161e2 <osSemaphoreNew+0x6e>
        mem = 1;
 80161dc:	2301      	movs	r3, #1
 80161de:	623b      	str	r3, [r7, #32]
 80161e0:	e00c      	b.n	80161fc <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	689b      	ldr	r3, [r3, #8]
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d108      	bne.n	80161fc <osSemaphoreNew+0x88>
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	68db      	ldr	r3, [r3, #12]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	d104      	bne.n	80161fc <osSemaphoreNew+0x88>
          mem = 0;
 80161f2:	2300      	movs	r3, #0
 80161f4:	623b      	str	r3, [r7, #32]
 80161f6:	e001      	b.n	80161fc <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80161f8:	2300      	movs	r3, #0
 80161fa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80161fc:	6a3b      	ldr	r3, [r7, #32]
 80161fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016202:	d04d      	beq.n	80162a0 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	2b01      	cmp	r3, #1
 8016208:	d129      	bne.n	801625e <osSemaphoreNew+0xea>
        if (mem == 1) {
 801620a:	6a3b      	ldr	r3, [r7, #32]
 801620c:	2b01      	cmp	r3, #1
 801620e:	d10b      	bne.n	8016228 <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	689a      	ldr	r2, [r3, #8]
 8016214:	2303      	movs	r3, #3
 8016216:	9300      	str	r3, [sp, #0]
 8016218:	4613      	mov	r3, r2
 801621a:	2200      	movs	r2, #0
 801621c:	2100      	movs	r1, #0
 801621e:	2001      	movs	r0, #1
 8016220:	f000 fbf8 	bl	8016a14 <xQueueGenericCreateStatic>
 8016224:	6278      	str	r0, [r7, #36]	; 0x24
 8016226:	e005      	b.n	8016234 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8016228:	2203      	movs	r2, #3
 801622a:	2100      	movs	r1, #0
 801622c:	2001      	movs	r0, #1
 801622e:	f000 fc6e 	bl	8016b0e <xQueueGenericCreate>
 8016232:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8016234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016236:	2b00      	cmp	r3, #0
 8016238:	d022      	beq.n	8016280 <osSemaphoreNew+0x10c>
 801623a:	68bb      	ldr	r3, [r7, #8]
 801623c:	2b00      	cmp	r3, #0
 801623e:	d01f      	beq.n	8016280 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016240:	2300      	movs	r3, #0
 8016242:	2200      	movs	r2, #0
 8016244:	2100      	movs	r1, #0
 8016246:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016248:	f000 fdec 	bl	8016e24 <xQueueGenericSend>
 801624c:	4603      	mov	r3, r0
 801624e:	2b01      	cmp	r3, #1
 8016250:	d016      	beq.n	8016280 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8016252:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016254:	f001 fa8b 	bl	801776e <vQueueDelete>
            hSemaphore = NULL;
 8016258:	2300      	movs	r3, #0
 801625a:	627b      	str	r3, [r7, #36]	; 0x24
 801625c:	e010      	b.n	8016280 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 801625e:	6a3b      	ldr	r3, [r7, #32]
 8016260:	2b01      	cmp	r3, #1
 8016262:	d108      	bne.n	8016276 <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	689b      	ldr	r3, [r3, #8]
 8016268:	461a      	mov	r2, r3
 801626a:	68b9      	ldr	r1, [r7, #8]
 801626c:	68f8      	ldr	r0, [r7, #12]
 801626e:	f000 fd6b 	bl	8016d48 <xQueueCreateCountingSemaphoreStatic>
 8016272:	6278      	str	r0, [r7, #36]	; 0x24
 8016274:	e004      	b.n	8016280 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8016276:	68b9      	ldr	r1, [r7, #8]
 8016278:	68f8      	ldr	r0, [r7, #12]
 801627a:	f000 fd9e 	bl	8016dba <xQueueCreateCountingSemaphore>
 801627e:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8016280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016282:	2b00      	cmp	r3, #0
 8016284:	d00c      	beq.n	80162a0 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2b00      	cmp	r3, #0
 801628a:	d003      	beq.n	8016294 <osSemaphoreNew+0x120>
          name = attr->name;
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	681b      	ldr	r3, [r3, #0]
 8016290:	61fb      	str	r3, [r7, #28]
 8016292:	e001      	b.n	8016298 <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8016294:	2300      	movs	r3, #0
 8016296:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8016298:	69f9      	ldr	r1, [r7, #28]
 801629a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801629c:	f001 fbb4 	bl	8017a08 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80162a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80162a2:	4618      	mov	r0, r3
 80162a4:	3728      	adds	r7, #40	; 0x28
 80162a6:	46bd      	mov	sp, r7
 80162a8:	bd80      	pop	{r7, pc}
 80162aa:	bf00      	nop
 80162ac:	200003f8 	.word	0x200003f8

080162b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b088      	sub	sp, #32
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	6078      	str	r0, [r7, #4]
 80162b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80162be:	2300      	movs	r3, #0
 80162c0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80162c2:	69bb      	ldr	r3, [r7, #24]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d103      	bne.n	80162d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80162c8:	f06f 0303 	mvn.w	r3, #3
 80162cc:	61fb      	str	r3, [r7, #28]
 80162ce:	e04b      	b.n	8016368 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162d0:	f3ef 8305 	mrs	r3, IPSR
 80162d4:	617b      	str	r3, [r7, #20]
  return(result);
 80162d6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d10f      	bne.n	80162fc <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162dc:	f3ef 8310 	mrs	r3, PRIMASK
 80162e0:	613b      	str	r3, [r7, #16]
  return(result);
 80162e2:	693b      	ldr	r3, [r7, #16]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d105      	bne.n	80162f4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80162e8:	f3ef 8311 	mrs	r3, BASEPRI
 80162ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	d026      	beq.n	8016342 <osSemaphoreAcquire+0x92>
 80162f4:	4b1f      	ldr	r3, [pc, #124]	; (8016374 <osSemaphoreAcquire+0xc4>)
 80162f6:	681b      	ldr	r3, [r3, #0]
 80162f8:	2b02      	cmp	r3, #2
 80162fa:	d122      	bne.n	8016342 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80162fc:	683b      	ldr	r3, [r7, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d003      	beq.n	801630a <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8016302:	f06f 0303 	mvn.w	r3, #3
 8016306:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8016308:	e02d      	b.n	8016366 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801630a:	2300      	movs	r3, #0
 801630c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801630e:	f107 0308 	add.w	r3, r7, #8
 8016312:	461a      	mov	r2, r3
 8016314:	2100      	movs	r1, #0
 8016316:	69b8      	ldr	r0, [r7, #24]
 8016318:	f001 f9a6 	bl	8017668 <xQueueReceiveFromISR>
 801631c:	4603      	mov	r3, r0
 801631e:	2b01      	cmp	r3, #1
 8016320:	d003      	beq.n	801632a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8016322:	f06f 0302 	mvn.w	r3, #2
 8016326:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8016328:	e01d      	b.n	8016366 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801632a:	68bb      	ldr	r3, [r7, #8]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d01a      	beq.n	8016366 <osSemaphoreAcquire+0xb6>
 8016330:	4b11      	ldr	r3, [pc, #68]	; (8016378 <osSemaphoreAcquire+0xc8>)
 8016332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016336:	601a      	str	r2, [r3, #0]
 8016338:	f3bf 8f4f 	dsb	sy
 801633c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8016340:	e011      	b.n	8016366 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8016342:	6839      	ldr	r1, [r7, #0]
 8016344:	69b8      	ldr	r0, [r7, #24]
 8016346:	f001 f87f 	bl	8017448 <xQueueSemaphoreTake>
 801634a:	4603      	mov	r3, r0
 801634c:	2b01      	cmp	r3, #1
 801634e:	d00b      	beq.n	8016368 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8016350:	683b      	ldr	r3, [r7, #0]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d003      	beq.n	801635e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8016356:	f06f 0301 	mvn.w	r3, #1
 801635a:	61fb      	str	r3, [r7, #28]
 801635c:	e004      	b.n	8016368 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 801635e:	f06f 0302 	mvn.w	r3, #2
 8016362:	61fb      	str	r3, [r7, #28]
 8016364:	e000      	b.n	8016368 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8016366:	bf00      	nop
      }
    }
  }

  return (stat);
 8016368:	69fb      	ldr	r3, [r7, #28]
}
 801636a:	4618      	mov	r0, r3
 801636c:	3720      	adds	r7, #32
 801636e:	46bd      	mov	sp, r7
 8016370:	bd80      	pop	{r7, pc}
 8016372:	bf00      	nop
 8016374:	200003f8 	.word	0x200003f8
 8016378:	e000ed04 	.word	0xe000ed04

0801637c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 801637c:	b580      	push	{r7, lr}
 801637e:	b088      	sub	sp, #32
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8016388:	2300      	movs	r3, #0
 801638a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 801638c:	69bb      	ldr	r3, [r7, #24]
 801638e:	2b00      	cmp	r3, #0
 8016390:	d103      	bne.n	801639a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8016392:	f06f 0303 	mvn.w	r3, #3
 8016396:	61fb      	str	r3, [r7, #28]
 8016398:	e03e      	b.n	8016418 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801639a:	f3ef 8305 	mrs	r3, IPSR
 801639e:	617b      	str	r3, [r7, #20]
  return(result);
 80163a0:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d10f      	bne.n	80163c6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163a6:	f3ef 8310 	mrs	r3, PRIMASK
 80163aa:	613b      	str	r3, [r7, #16]
  return(result);
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d105      	bne.n	80163be <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80163b2:	f3ef 8311 	mrs	r3, BASEPRI
 80163b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d01e      	beq.n	80163fc <osSemaphoreRelease+0x80>
 80163be:	4b19      	ldr	r3, [pc, #100]	; (8016424 <osSemaphoreRelease+0xa8>)
 80163c0:	681b      	ldr	r3, [r3, #0]
 80163c2:	2b02      	cmp	r3, #2
 80163c4:	d11a      	bne.n	80163fc <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80163c6:	2300      	movs	r3, #0
 80163c8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80163ca:	f107 0308 	add.w	r3, r7, #8
 80163ce:	4619      	mov	r1, r3
 80163d0:	69b8      	ldr	r0, [r7, #24]
 80163d2:	f000 fec5 	bl	8017160 <xQueueGiveFromISR>
 80163d6:	4603      	mov	r3, r0
 80163d8:	2b01      	cmp	r3, #1
 80163da:	d003      	beq.n	80163e4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80163dc:	f06f 0302 	mvn.w	r3, #2
 80163e0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80163e2:	e018      	b.n	8016416 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80163e4:	68bb      	ldr	r3, [r7, #8]
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d015      	beq.n	8016416 <osSemaphoreRelease+0x9a>
 80163ea:	4b0f      	ldr	r3, [pc, #60]	; (8016428 <osSemaphoreRelease+0xac>)
 80163ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80163f0:	601a      	str	r2, [r3, #0]
 80163f2:	f3bf 8f4f 	dsb	sy
 80163f6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80163fa:	e00c      	b.n	8016416 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80163fc:	2300      	movs	r3, #0
 80163fe:	2200      	movs	r2, #0
 8016400:	2100      	movs	r1, #0
 8016402:	69b8      	ldr	r0, [r7, #24]
 8016404:	f000 fd0e 	bl	8016e24 <xQueueGenericSend>
 8016408:	4603      	mov	r3, r0
 801640a:	2b01      	cmp	r3, #1
 801640c:	d004      	beq.n	8016418 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 801640e:	f06f 0302 	mvn.w	r3, #2
 8016412:	61fb      	str	r3, [r7, #28]
 8016414:	e000      	b.n	8016418 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8016416:	bf00      	nop
    }
  }

  return (stat);
 8016418:	69fb      	ldr	r3, [r7, #28]
}
 801641a:	4618      	mov	r0, r3
 801641c:	3720      	adds	r7, #32
 801641e:	46bd      	mov	sp, r7
 8016420:	bd80      	pop	{r7, pc}
 8016422:	bf00      	nop
 8016424:	200003f8 	.word	0x200003f8
 8016428:	e000ed04 	.word	0xe000ed04

0801642c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801642c:	b580      	push	{r7, lr}
 801642e:	b088      	sub	sp, #32
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016434:	687b      	ldr	r3, [r7, #4]
 8016436:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016438:	f3ef 8305 	mrs	r3, IPSR
 801643c:	617b      	str	r3, [r7, #20]
  return(result);
 801643e:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016440:	2b00      	cmp	r3, #0
 8016442:	d10f      	bne.n	8016464 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016444:	f3ef 8310 	mrs	r3, PRIMASK
 8016448:	613b      	str	r3, [r7, #16]
  return(result);
 801644a:	693b      	ldr	r3, [r7, #16]
 801644c:	2b00      	cmp	r3, #0
 801644e:	d105      	bne.n	801645c <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016450:	f3ef 8311 	mrs	r3, BASEPRI
 8016454:	60fb      	str	r3, [r7, #12]
  return(result);
 8016456:	68fb      	ldr	r3, [r7, #12]
 8016458:	2b00      	cmp	r3, #0
 801645a:	d007      	beq.n	801646c <osSemaphoreDelete+0x40>
 801645c:	4b0d      	ldr	r3, [pc, #52]	; (8016494 <osSemaphoreDelete+0x68>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	2b02      	cmp	r3, #2
 8016462:	d103      	bne.n	801646c <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8016464:	f06f 0305 	mvn.w	r3, #5
 8016468:	61fb      	str	r3, [r7, #28]
 801646a:	e00e      	b.n	801648a <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 801646c:	69bb      	ldr	r3, [r7, #24]
 801646e:	2b00      	cmp	r3, #0
 8016470:	d103      	bne.n	801647a <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8016472:	f06f 0303 	mvn.w	r3, #3
 8016476:	61fb      	str	r3, [r7, #28]
 8016478:	e007      	b.n	801648a <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801647a:	69b8      	ldr	r0, [r7, #24]
 801647c:	f001 faec 	bl	8017a58 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8016480:	2300      	movs	r3, #0
 8016482:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8016484:	69b8      	ldr	r0, [r7, #24]
 8016486:	f001 f972 	bl	801776e <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801648a:	69fb      	ldr	r3, [r7, #28]
}
 801648c:	4618      	mov	r0, r3
 801648e:	3720      	adds	r7, #32
 8016490:	46bd      	mov	sp, r7
 8016492:	bd80      	pop	{r7, pc}
 8016494:	200003f8 	.word	0x200003f8

08016498 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8016498:	b580      	push	{r7, lr}
 801649a:	b08c      	sub	sp, #48	; 0x30
 801649c:	af02      	add	r7, sp, #8
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80164a4:	2300      	movs	r3, #0
 80164a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80164a8:	f3ef 8305 	mrs	r3, IPSR
 80164ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80164ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d170      	bne.n	8016596 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164b4:	f3ef 8310 	mrs	r3, PRIMASK
 80164b8:	617b      	str	r3, [r7, #20]
  return(result);
 80164ba:	697b      	ldr	r3, [r7, #20]
 80164bc:	2b00      	cmp	r3, #0
 80164be:	d105      	bne.n	80164cc <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80164c0:	f3ef 8311 	mrs	r3, BASEPRI
 80164c4:	613b      	str	r3, [r7, #16]
  return(result);
 80164c6:	693b      	ldr	r3, [r7, #16]
 80164c8:	2b00      	cmp	r3, #0
 80164ca:	d003      	beq.n	80164d4 <osMessageQueueNew+0x3c>
 80164cc:	4b34      	ldr	r3, [pc, #208]	; (80165a0 <osMessageQueueNew+0x108>)
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2b02      	cmp	r3, #2
 80164d2:	d060      	beq.n	8016596 <osMessageQueueNew+0xfe>
 80164d4:	68fb      	ldr	r3, [r7, #12]
 80164d6:	2b00      	cmp	r3, #0
 80164d8:	d05d      	beq.n	8016596 <osMessageQueueNew+0xfe>
 80164da:	68bb      	ldr	r3, [r7, #8]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d05a      	beq.n	8016596 <osMessageQueueNew+0xfe>
    mem = -1;
 80164e0:	f04f 33ff 	mov.w	r3, #4294967295
 80164e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	2b00      	cmp	r3, #0
 80164ea:	d029      	beq.n	8016540 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	689b      	ldr	r3, [r3, #8]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d012      	beq.n	801651a <osMessageQueueNew+0x82>
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	68db      	ldr	r3, [r3, #12]
 80164f8:	2b4f      	cmp	r3, #79	; 0x4f
 80164fa:	d90e      	bls.n	801651a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016500:	2b00      	cmp	r3, #0
 8016502:	d00a      	beq.n	801651a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	695a      	ldr	r2, [r3, #20]
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	68b9      	ldr	r1, [r7, #8]
 801650c:	fb01 f303 	mul.w	r3, r1, r3
 8016510:	429a      	cmp	r2, r3
 8016512:	d302      	bcc.n	801651a <osMessageQueueNew+0x82>
        mem = 1;
 8016514:	2301      	movs	r3, #1
 8016516:	623b      	str	r3, [r7, #32]
 8016518:	e014      	b.n	8016544 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	689b      	ldr	r3, [r3, #8]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d110      	bne.n	8016544 <osMessageQueueNew+0xac>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	68db      	ldr	r3, [r3, #12]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d10c      	bne.n	8016544 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801652e:	2b00      	cmp	r3, #0
 8016530:	d108      	bne.n	8016544 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	695b      	ldr	r3, [r3, #20]
 8016536:	2b00      	cmp	r3, #0
 8016538:	d104      	bne.n	8016544 <osMessageQueueNew+0xac>
          mem = 0;
 801653a:	2300      	movs	r3, #0
 801653c:	623b      	str	r3, [r7, #32]
 801653e:	e001      	b.n	8016544 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8016540:	2300      	movs	r3, #0
 8016542:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8016544:	6a3b      	ldr	r3, [r7, #32]
 8016546:	2b01      	cmp	r3, #1
 8016548:	d10c      	bne.n	8016564 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801654a:	687b      	ldr	r3, [r7, #4]
 801654c:	691a      	ldr	r2, [r3, #16]
 801654e:	687b      	ldr	r3, [r7, #4]
 8016550:	6899      	ldr	r1, [r3, #8]
 8016552:	2300      	movs	r3, #0
 8016554:	9300      	str	r3, [sp, #0]
 8016556:	460b      	mov	r3, r1
 8016558:	68b9      	ldr	r1, [r7, #8]
 801655a:	68f8      	ldr	r0, [r7, #12]
 801655c:	f000 fa5a 	bl	8016a14 <xQueueGenericCreateStatic>
 8016560:	6278      	str	r0, [r7, #36]	; 0x24
 8016562:	e008      	b.n	8016576 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8016564:	6a3b      	ldr	r3, [r7, #32]
 8016566:	2b00      	cmp	r3, #0
 8016568:	d105      	bne.n	8016576 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801656a:	2200      	movs	r2, #0
 801656c:	68b9      	ldr	r1, [r7, #8]
 801656e:	68f8      	ldr	r0, [r7, #12]
 8016570:	f000 facd 	bl	8016b0e <xQueueGenericCreate>
 8016574:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8016576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016578:	2b00      	cmp	r3, #0
 801657a:	d00c      	beq.n	8016596 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d003      	beq.n	801658a <osMessageQueueNew+0xf2>
        name = attr->name;
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	681b      	ldr	r3, [r3, #0]
 8016586:	61fb      	str	r3, [r7, #28]
 8016588:	e001      	b.n	801658e <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801658a:	2300      	movs	r3, #0
 801658c:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 801658e:	69f9      	ldr	r1, [r7, #28]
 8016590:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016592:	f001 fa39 	bl	8017a08 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8016596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016598:	4618      	mov	r0, r3
 801659a:	3728      	adds	r7, #40	; 0x28
 801659c:	46bd      	mov	sp, r7
 801659e:	bd80      	pop	{r7, pc}
 80165a0:	200003f8 	.word	0x200003f8

080165a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80165a4:	b580      	push	{r7, lr}
 80165a6:	b08a      	sub	sp, #40	; 0x28
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	60f8      	str	r0, [r7, #12]
 80165ac:	60b9      	str	r1, [r7, #8]
 80165ae:	603b      	str	r3, [r7, #0]
 80165b0:	4613      	mov	r3, r2
 80165b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80165b8:	2300      	movs	r3, #0
 80165ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80165bc:	f3ef 8305 	mrs	r3, IPSR
 80165c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80165c2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d10f      	bne.n	80165e8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165c8:	f3ef 8310 	mrs	r3, PRIMASK
 80165cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80165ce:	69bb      	ldr	r3, [r7, #24]
 80165d0:	2b00      	cmp	r3, #0
 80165d2:	d105      	bne.n	80165e0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80165d4:	f3ef 8311 	mrs	r3, BASEPRI
 80165d8:	617b      	str	r3, [r7, #20]
  return(result);
 80165da:	697b      	ldr	r3, [r7, #20]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d02c      	beq.n	801663a <osMessageQueuePut+0x96>
 80165e0:	4b28      	ldr	r3, [pc, #160]	; (8016684 <osMessageQueuePut+0xe0>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	2b02      	cmp	r3, #2
 80165e6:	d128      	bne.n	801663a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80165e8:	6a3b      	ldr	r3, [r7, #32]
 80165ea:	2b00      	cmp	r3, #0
 80165ec:	d005      	beq.n	80165fa <osMessageQueuePut+0x56>
 80165ee:	68bb      	ldr	r3, [r7, #8]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d002      	beq.n	80165fa <osMessageQueuePut+0x56>
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d003      	beq.n	8016602 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80165fa:	f06f 0303 	mvn.w	r3, #3
 80165fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016600:	e039      	b.n	8016676 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8016602:	2300      	movs	r3, #0
 8016604:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8016606:	f107 0210 	add.w	r2, r7, #16
 801660a:	2300      	movs	r3, #0
 801660c:	68b9      	ldr	r1, [r7, #8]
 801660e:	6a38      	ldr	r0, [r7, #32]
 8016610:	f000 fd0a 	bl	8017028 <xQueueGenericSendFromISR>
 8016614:	4603      	mov	r3, r0
 8016616:	2b01      	cmp	r3, #1
 8016618:	d003      	beq.n	8016622 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801661a:	f06f 0302 	mvn.w	r3, #2
 801661e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016620:	e029      	b.n	8016676 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d026      	beq.n	8016676 <osMessageQueuePut+0xd2>
 8016628:	4b17      	ldr	r3, [pc, #92]	; (8016688 <osMessageQueuePut+0xe4>)
 801662a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801662e:	601a      	str	r2, [r3, #0]
 8016630:	f3bf 8f4f 	dsb	sy
 8016634:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016638:	e01d      	b.n	8016676 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801663a:	6a3b      	ldr	r3, [r7, #32]
 801663c:	2b00      	cmp	r3, #0
 801663e:	d002      	beq.n	8016646 <osMessageQueuePut+0xa2>
 8016640:	68bb      	ldr	r3, [r7, #8]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d103      	bne.n	801664e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8016646:	f06f 0303 	mvn.w	r3, #3
 801664a:	627b      	str	r3, [r7, #36]	; 0x24
 801664c:	e014      	b.n	8016678 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 801664e:	2300      	movs	r3, #0
 8016650:	683a      	ldr	r2, [r7, #0]
 8016652:	68b9      	ldr	r1, [r7, #8]
 8016654:	6a38      	ldr	r0, [r7, #32]
 8016656:	f000 fbe5 	bl	8016e24 <xQueueGenericSend>
 801665a:	4603      	mov	r3, r0
 801665c:	2b01      	cmp	r3, #1
 801665e:	d00b      	beq.n	8016678 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8016660:	683b      	ldr	r3, [r7, #0]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d003      	beq.n	801666e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8016666:	f06f 0301 	mvn.w	r3, #1
 801666a:	627b      	str	r3, [r7, #36]	; 0x24
 801666c:	e004      	b.n	8016678 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 801666e:	f06f 0302 	mvn.w	r3, #2
 8016672:	627b      	str	r3, [r7, #36]	; 0x24
 8016674:	e000      	b.n	8016678 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016676:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8016678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801667a:	4618      	mov	r0, r3
 801667c:	3728      	adds	r7, #40	; 0x28
 801667e:	46bd      	mov	sp, r7
 8016680:	bd80      	pop	{r7, pc}
 8016682:	bf00      	nop
 8016684:	200003f8 	.word	0x200003f8
 8016688:	e000ed04 	.word	0xe000ed04

0801668c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801668c:	b580      	push	{r7, lr}
 801668e:	b08a      	sub	sp, #40	; 0x28
 8016690:	af00      	add	r7, sp, #0
 8016692:	60f8      	str	r0, [r7, #12]
 8016694:	60b9      	str	r1, [r7, #8]
 8016696:	607a      	str	r2, [r7, #4]
 8016698:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801669e:	2300      	movs	r3, #0
 80166a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166a2:	f3ef 8305 	mrs	r3, IPSR
 80166a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80166a8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d10f      	bne.n	80166ce <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166ae:	f3ef 8310 	mrs	r3, PRIMASK
 80166b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80166b4:	69bb      	ldr	r3, [r7, #24]
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d105      	bne.n	80166c6 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80166ba:	f3ef 8311 	mrs	r3, BASEPRI
 80166be:	617b      	str	r3, [r7, #20]
  return(result);
 80166c0:	697b      	ldr	r3, [r7, #20]
 80166c2:	2b00      	cmp	r3, #0
 80166c4:	d02c      	beq.n	8016720 <osMessageQueueGet+0x94>
 80166c6:	4b28      	ldr	r3, [pc, #160]	; (8016768 <osMessageQueueGet+0xdc>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	2b02      	cmp	r3, #2
 80166cc:	d128      	bne.n	8016720 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80166ce:	6a3b      	ldr	r3, [r7, #32]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d005      	beq.n	80166e0 <osMessageQueueGet+0x54>
 80166d4:	68bb      	ldr	r3, [r7, #8]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d002      	beq.n	80166e0 <osMessageQueueGet+0x54>
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	2b00      	cmp	r3, #0
 80166de:	d003      	beq.n	80166e8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80166e0:	f06f 0303 	mvn.w	r3, #3
 80166e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80166e6:	e038      	b.n	801675a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80166e8:	2300      	movs	r3, #0
 80166ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80166ec:	f107 0310 	add.w	r3, r7, #16
 80166f0:	461a      	mov	r2, r3
 80166f2:	68b9      	ldr	r1, [r7, #8]
 80166f4:	6a38      	ldr	r0, [r7, #32]
 80166f6:	f000 ffb7 	bl	8017668 <xQueueReceiveFromISR>
 80166fa:	4603      	mov	r3, r0
 80166fc:	2b01      	cmp	r3, #1
 80166fe:	d003      	beq.n	8016708 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8016700:	f06f 0302 	mvn.w	r3, #2
 8016704:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016706:	e028      	b.n	801675a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8016708:	693b      	ldr	r3, [r7, #16]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d025      	beq.n	801675a <osMessageQueueGet+0xce>
 801670e:	4b17      	ldr	r3, [pc, #92]	; (801676c <osMessageQueueGet+0xe0>)
 8016710:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016714:	601a      	str	r2, [r3, #0]
 8016716:	f3bf 8f4f 	dsb	sy
 801671a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801671e:	e01c      	b.n	801675a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016720:	6a3b      	ldr	r3, [r7, #32]
 8016722:	2b00      	cmp	r3, #0
 8016724:	d002      	beq.n	801672c <osMessageQueueGet+0xa0>
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d103      	bne.n	8016734 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 801672c:	f06f 0303 	mvn.w	r3, #3
 8016730:	627b      	str	r3, [r7, #36]	; 0x24
 8016732:	e013      	b.n	801675c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016734:	683a      	ldr	r2, [r7, #0]
 8016736:	68b9      	ldr	r1, [r7, #8]
 8016738:	6a38      	ldr	r0, [r7, #32]
 801673a:	f000 fda3 	bl	8017284 <xQueueReceive>
 801673e:	4603      	mov	r3, r0
 8016740:	2b01      	cmp	r3, #1
 8016742:	d00b      	beq.n	801675c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8016744:	683b      	ldr	r3, [r7, #0]
 8016746:	2b00      	cmp	r3, #0
 8016748:	d003      	beq.n	8016752 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801674a:	f06f 0301 	mvn.w	r3, #1
 801674e:	627b      	str	r3, [r7, #36]	; 0x24
 8016750:	e004      	b.n	801675c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8016752:	f06f 0302 	mvn.w	r3, #2
 8016756:	627b      	str	r3, [r7, #36]	; 0x24
 8016758:	e000      	b.n	801675c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801675a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801675e:	4618      	mov	r0, r3
 8016760:	3728      	adds	r7, #40	; 0x28
 8016762:	46bd      	mov	sp, r7
 8016764:	bd80      	pop	{r7, pc}
 8016766:	bf00      	nop
 8016768:	200003f8 	.word	0x200003f8
 801676c:	e000ed04 	.word	0xe000ed04

08016770 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016770:	b480      	push	{r7}
 8016772:	b085      	sub	sp, #20
 8016774:	af00      	add	r7, sp, #0
 8016776:	60f8      	str	r0, [r7, #12]
 8016778:	60b9      	str	r1, [r7, #8]
 801677a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	4a07      	ldr	r2, [pc, #28]	; (801679c <vApplicationGetIdleTaskMemory+0x2c>)
 8016780:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016782:	68bb      	ldr	r3, [r7, #8]
 8016784:	4a06      	ldr	r2, [pc, #24]	; (80167a0 <vApplicationGetIdleTaskMemory+0x30>)
 8016786:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2280      	movs	r2, #128	; 0x80
 801678c:	601a      	str	r2, [r3, #0]
}
 801678e:	bf00      	nop
 8016790:	3714      	adds	r7, #20
 8016792:	46bd      	mov	sp, r7
 8016794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop
 801679c:	200003fc 	.word	0x200003fc
 80167a0:	20000458 	.word	0x20000458

080167a4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80167a4:	b480      	push	{r7}
 80167a6:	b085      	sub	sp, #20
 80167a8:	af00      	add	r7, sp, #0
 80167aa:	60f8      	str	r0, [r7, #12]
 80167ac:	60b9      	str	r1, [r7, #8]
 80167ae:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	4a07      	ldr	r2, [pc, #28]	; (80167d0 <vApplicationGetTimerTaskMemory+0x2c>)
 80167b4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80167b6:	68bb      	ldr	r3, [r7, #8]
 80167b8:	4a06      	ldr	r2, [pc, #24]	; (80167d4 <vApplicationGetTimerTaskMemory+0x30>)
 80167ba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167c2:	601a      	str	r2, [r3, #0]
}
 80167c4:	bf00      	nop
 80167c6:	3714      	adds	r7, #20
 80167c8:	46bd      	mov	sp, r7
 80167ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ce:	4770      	bx	lr
 80167d0:	20000658 	.word	0x20000658
 80167d4:	200006b4 	.word	0x200006b4

080167d8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80167d8:	b480      	push	{r7}
 80167da:	b083      	sub	sp, #12
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f103 0208 	add.w	r2, r3, #8
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f04f 32ff 	mov.w	r2, #4294967295
 80167f0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	f103 0208 	add.w	r2, r3, #8
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f103 0208 	add.w	r2, r3, #8
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	2200      	movs	r2, #0
 801680a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801680c:	bf00      	nop
 801680e:	370c      	adds	r7, #12
 8016810:	46bd      	mov	sp, r7
 8016812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016816:	4770      	bx	lr

08016818 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8016818:	b480      	push	{r7}
 801681a:	b083      	sub	sp, #12
 801681c:	af00      	add	r7, sp, #0
 801681e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	2200      	movs	r2, #0
 8016824:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8016826:	bf00      	nop
 8016828:	370c      	adds	r7, #12
 801682a:	46bd      	mov	sp, r7
 801682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016830:	4770      	bx	lr

08016832 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016832:	b480      	push	{r7}
 8016834:	b085      	sub	sp, #20
 8016836:	af00      	add	r7, sp, #0
 8016838:	6078      	str	r0, [r7, #4]
 801683a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016842:	683b      	ldr	r3, [r7, #0]
 8016844:	68fa      	ldr	r2, [r7, #12]
 8016846:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8016848:	68fb      	ldr	r3, [r7, #12]
 801684a:	689a      	ldr	r2, [r3, #8]
 801684c:	683b      	ldr	r3, [r7, #0]
 801684e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	689b      	ldr	r3, [r3, #8]
 8016854:	683a      	ldr	r2, [r7, #0]
 8016856:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	683a      	ldr	r2, [r7, #0]
 801685c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801685e:	683b      	ldr	r3, [r7, #0]
 8016860:	687a      	ldr	r2, [r7, #4]
 8016862:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	1c5a      	adds	r2, r3, #1
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	601a      	str	r2, [r3, #0]
}
 801686e:	bf00      	nop
 8016870:	3714      	adds	r7, #20
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr

0801687a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801687a:	b480      	push	{r7}
 801687c:	b085      	sub	sp, #20
 801687e:	af00      	add	r7, sp, #0
 8016880:	6078      	str	r0, [r7, #4]
 8016882:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016884:	683b      	ldr	r3, [r7, #0]
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801688a:	68bb      	ldr	r3, [r7, #8]
 801688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016890:	d103      	bne.n	801689a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	691b      	ldr	r3, [r3, #16]
 8016896:	60fb      	str	r3, [r7, #12]
 8016898:	e00c      	b.n	80168b4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801689a:	687b      	ldr	r3, [r7, #4]
 801689c:	3308      	adds	r3, #8
 801689e:	60fb      	str	r3, [r7, #12]
 80168a0:	e002      	b.n	80168a8 <vListInsert+0x2e>
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	685b      	ldr	r3, [r3, #4]
 80168a6:	60fb      	str	r3, [r7, #12]
 80168a8:	68fb      	ldr	r3, [r7, #12]
 80168aa:	685b      	ldr	r3, [r3, #4]
 80168ac:	681b      	ldr	r3, [r3, #0]
 80168ae:	68ba      	ldr	r2, [r7, #8]
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d2f6      	bcs.n	80168a2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80168b4:	68fb      	ldr	r3, [r7, #12]
 80168b6:	685a      	ldr	r2, [r3, #4]
 80168b8:	683b      	ldr	r3, [r7, #0]
 80168ba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80168bc:	683b      	ldr	r3, [r7, #0]
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	683a      	ldr	r2, [r7, #0]
 80168c2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80168c4:	683b      	ldr	r3, [r7, #0]
 80168c6:	68fa      	ldr	r2, [r7, #12]
 80168c8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	683a      	ldr	r2, [r7, #0]
 80168ce:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	687a      	ldr	r2, [r7, #4]
 80168d4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80168d6:	687b      	ldr	r3, [r7, #4]
 80168d8:	681b      	ldr	r3, [r3, #0]
 80168da:	1c5a      	adds	r2, r3, #1
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	601a      	str	r2, [r3, #0]
}
 80168e0:	bf00      	nop
 80168e2:	3714      	adds	r7, #20
 80168e4:	46bd      	mov	sp, r7
 80168e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ea:	4770      	bx	lr

080168ec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80168ec:	b480      	push	{r7}
 80168ee:	b085      	sub	sp, #20
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	691b      	ldr	r3, [r3, #16]
 80168f8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	685b      	ldr	r3, [r3, #4]
 80168fe:	687a      	ldr	r2, [r7, #4]
 8016900:	6892      	ldr	r2, [r2, #8]
 8016902:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	689b      	ldr	r3, [r3, #8]
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	6852      	ldr	r2, [r2, #4]
 801690c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801690e:	68fb      	ldr	r3, [r7, #12]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	687a      	ldr	r2, [r7, #4]
 8016914:	429a      	cmp	r2, r3
 8016916:	d103      	bne.n	8016920 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	689a      	ldr	r2, [r3, #8]
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	2200      	movs	r2, #0
 8016924:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	1e5a      	subs	r2, r3, #1
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	681b      	ldr	r3, [r3, #0]
}
 8016934:	4618      	mov	r0, r3
 8016936:	3714      	adds	r7, #20
 8016938:	46bd      	mov	sp, r7
 801693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801693e:	4770      	bx	lr

08016940 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016940:	b580      	push	{r7, lr}
 8016942:	b084      	sub	sp, #16
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801694a:	687b      	ldr	r3, [r7, #4]
 801694c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	2b00      	cmp	r3, #0
 8016952:	d10b      	bne.n	801696c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016958:	b672      	cpsid	i
 801695a:	f383 8811 	msr	BASEPRI, r3
 801695e:	f3bf 8f6f 	isb	sy
 8016962:	f3bf 8f4f 	dsb	sy
 8016966:	b662      	cpsie	i
 8016968:	60bb      	str	r3, [r7, #8]
 801696a:	e7fe      	b.n	801696a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 801696c:	f002 fddc 	bl	8019528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016970:	68fb      	ldr	r3, [r7, #12]
 8016972:	681a      	ldr	r2, [r3, #0]
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016978:	68f9      	ldr	r1, [r7, #12]
 801697a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801697c:	fb01 f303 	mul.w	r3, r1, r3
 8016980:	441a      	add	r2, r3
 8016982:	68fb      	ldr	r3, [r7, #12]
 8016984:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	2200      	movs	r2, #0
 801698a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801698c:	68fb      	ldr	r3, [r7, #12]
 801698e:	681a      	ldr	r2, [r3, #0]
 8016990:	68fb      	ldr	r3, [r7, #12]
 8016992:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801699c:	3b01      	subs	r3, #1
 801699e:	68f9      	ldr	r1, [r7, #12]
 80169a0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80169a2:	fb01 f303 	mul.w	r3, r1, r3
 80169a6:	441a      	add	r2, r3
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	22ff      	movs	r2, #255	; 0xff
 80169b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80169b4:	68fb      	ldr	r3, [r7, #12]
 80169b6:	22ff      	movs	r2, #255	; 0xff
 80169b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80169bc:	683b      	ldr	r3, [r7, #0]
 80169be:	2b00      	cmp	r3, #0
 80169c0:	d114      	bne.n	80169ec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80169c2:	68fb      	ldr	r3, [r7, #12]
 80169c4:	691b      	ldr	r3, [r3, #16]
 80169c6:	2b00      	cmp	r3, #0
 80169c8:	d01a      	beq.n	8016a00 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	3310      	adds	r3, #16
 80169ce:	4618      	mov	r0, r3
 80169d0:	f001 fd9c 	bl	801850c <xTaskRemoveFromEventList>
 80169d4:	4603      	mov	r3, r0
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	d012      	beq.n	8016a00 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80169da:	4b0d      	ldr	r3, [pc, #52]	; (8016a10 <xQueueGenericReset+0xd0>)
 80169dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169e0:	601a      	str	r2, [r3, #0]
 80169e2:	f3bf 8f4f 	dsb	sy
 80169e6:	f3bf 8f6f 	isb	sy
 80169ea:	e009      	b.n	8016a00 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	3310      	adds	r3, #16
 80169f0:	4618      	mov	r0, r3
 80169f2:	f7ff fef1 	bl	80167d8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	3324      	adds	r3, #36	; 0x24
 80169fa:	4618      	mov	r0, r3
 80169fc:	f7ff feec 	bl	80167d8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016a00:	f002 fdc4 	bl	801958c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016a04:	2301      	movs	r3, #1
}
 8016a06:	4618      	mov	r0, r3
 8016a08:	3710      	adds	r7, #16
 8016a0a:	46bd      	mov	sp, r7
 8016a0c:	bd80      	pop	{r7, pc}
 8016a0e:	bf00      	nop
 8016a10:	e000ed04 	.word	0xe000ed04

08016a14 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016a14:	b580      	push	{r7, lr}
 8016a16:	b08e      	sub	sp, #56	; 0x38
 8016a18:	af02      	add	r7, sp, #8
 8016a1a:	60f8      	str	r0, [r7, #12]
 8016a1c:	60b9      	str	r1, [r7, #8]
 8016a1e:	607a      	str	r2, [r7, #4]
 8016a20:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d10b      	bne.n	8016a40 <xQueueGenericCreateStatic+0x2c>
 8016a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a2c:	b672      	cpsid	i
 8016a2e:	f383 8811 	msr	BASEPRI, r3
 8016a32:	f3bf 8f6f 	isb	sy
 8016a36:	f3bf 8f4f 	dsb	sy
 8016a3a:	b662      	cpsie	i
 8016a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a3e:	e7fe      	b.n	8016a3e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d10b      	bne.n	8016a5e <xQueueGenericCreateStatic+0x4a>
 8016a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a4a:	b672      	cpsid	i
 8016a4c:	f383 8811 	msr	BASEPRI, r3
 8016a50:	f3bf 8f6f 	isb	sy
 8016a54:	f3bf 8f4f 	dsb	sy
 8016a58:	b662      	cpsie	i
 8016a5a:	627b      	str	r3, [r7, #36]	; 0x24
 8016a5c:	e7fe      	b.n	8016a5c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d002      	beq.n	8016a6a <xQueueGenericCreateStatic+0x56>
 8016a64:	68bb      	ldr	r3, [r7, #8]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d001      	beq.n	8016a6e <xQueueGenericCreateStatic+0x5a>
 8016a6a:	2301      	movs	r3, #1
 8016a6c:	e000      	b.n	8016a70 <xQueueGenericCreateStatic+0x5c>
 8016a6e:	2300      	movs	r3, #0
 8016a70:	2b00      	cmp	r3, #0
 8016a72:	d10b      	bne.n	8016a8c <xQueueGenericCreateStatic+0x78>
 8016a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a78:	b672      	cpsid	i
 8016a7a:	f383 8811 	msr	BASEPRI, r3
 8016a7e:	f3bf 8f6f 	isb	sy
 8016a82:	f3bf 8f4f 	dsb	sy
 8016a86:	b662      	cpsie	i
 8016a88:	623b      	str	r3, [r7, #32]
 8016a8a:	e7fe      	b.n	8016a8a <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2b00      	cmp	r3, #0
 8016a90:	d102      	bne.n	8016a98 <xQueueGenericCreateStatic+0x84>
 8016a92:	68bb      	ldr	r3, [r7, #8]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d101      	bne.n	8016a9c <xQueueGenericCreateStatic+0x88>
 8016a98:	2301      	movs	r3, #1
 8016a9a:	e000      	b.n	8016a9e <xQueueGenericCreateStatic+0x8a>
 8016a9c:	2300      	movs	r3, #0
 8016a9e:	2b00      	cmp	r3, #0
 8016aa0:	d10b      	bne.n	8016aba <xQueueGenericCreateStatic+0xa6>
 8016aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aa6:	b672      	cpsid	i
 8016aa8:	f383 8811 	msr	BASEPRI, r3
 8016aac:	f3bf 8f6f 	isb	sy
 8016ab0:	f3bf 8f4f 	dsb	sy
 8016ab4:	b662      	cpsie	i
 8016ab6:	61fb      	str	r3, [r7, #28]
 8016ab8:	e7fe      	b.n	8016ab8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016aba:	2350      	movs	r3, #80	; 0x50
 8016abc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016abe:	697b      	ldr	r3, [r7, #20]
 8016ac0:	2b50      	cmp	r3, #80	; 0x50
 8016ac2:	d00b      	beq.n	8016adc <xQueueGenericCreateStatic+0xc8>
 8016ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ac8:	b672      	cpsid	i
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	b662      	cpsie	i
 8016ad8:	61bb      	str	r3, [r7, #24]
 8016ada:	e7fe      	b.n	8016ada <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016adc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016ade:	683b      	ldr	r3, [r7, #0]
 8016ae0:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d00d      	beq.n	8016b04 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016aea:	2201      	movs	r2, #1
 8016aec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016af0:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af6:	9300      	str	r3, [sp, #0]
 8016af8:	4613      	mov	r3, r2
 8016afa:	687a      	ldr	r2, [r7, #4]
 8016afc:	68b9      	ldr	r1, [r7, #8]
 8016afe:	68f8      	ldr	r0, [r7, #12]
 8016b00:	f000 f846 	bl	8016b90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016b06:	4618      	mov	r0, r3
 8016b08:	3730      	adds	r7, #48	; 0x30
 8016b0a:	46bd      	mov	sp, r7
 8016b0c:	bd80      	pop	{r7, pc}

08016b0e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016b0e:	b580      	push	{r7, lr}
 8016b10:	b08a      	sub	sp, #40	; 0x28
 8016b12:	af02      	add	r7, sp, #8
 8016b14:	60f8      	str	r0, [r7, #12]
 8016b16:	60b9      	str	r1, [r7, #8]
 8016b18:	4613      	mov	r3, r2
 8016b1a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d10b      	bne.n	8016b3a <xQueueGenericCreate+0x2c>
 8016b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b26:	b672      	cpsid	i
 8016b28:	f383 8811 	msr	BASEPRI, r3
 8016b2c:	f3bf 8f6f 	isb	sy
 8016b30:	f3bf 8f4f 	dsb	sy
 8016b34:	b662      	cpsie	i
 8016b36:	613b      	str	r3, [r7, #16]
 8016b38:	e7fe      	b.n	8016b38 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016b3a:	68bb      	ldr	r3, [r7, #8]
 8016b3c:	2b00      	cmp	r3, #0
 8016b3e:	d102      	bne.n	8016b46 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016b40:	2300      	movs	r3, #0
 8016b42:	61fb      	str	r3, [r7, #28]
 8016b44:	e004      	b.n	8016b50 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b46:	68fb      	ldr	r3, [r7, #12]
 8016b48:	68ba      	ldr	r2, [r7, #8]
 8016b4a:	fb02 f303 	mul.w	r3, r2, r3
 8016b4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016b50:	69fb      	ldr	r3, [r7, #28]
 8016b52:	3350      	adds	r3, #80	; 0x50
 8016b54:	4618      	mov	r0, r3
 8016b56:	f002 fe09 	bl	801976c <pvPortMalloc>
 8016b5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016b5c:	69bb      	ldr	r3, [r7, #24]
 8016b5e:	2b00      	cmp	r3, #0
 8016b60:	d011      	beq.n	8016b86 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016b62:	69bb      	ldr	r3, [r7, #24]
 8016b64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b66:	697b      	ldr	r3, [r7, #20]
 8016b68:	3350      	adds	r3, #80	; 0x50
 8016b6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016b6c:	69bb      	ldr	r3, [r7, #24]
 8016b6e:	2200      	movs	r2, #0
 8016b70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b74:	79fa      	ldrb	r2, [r7, #7]
 8016b76:	69bb      	ldr	r3, [r7, #24]
 8016b78:	9300      	str	r3, [sp, #0]
 8016b7a:	4613      	mov	r3, r2
 8016b7c:	697a      	ldr	r2, [r7, #20]
 8016b7e:	68b9      	ldr	r1, [r7, #8]
 8016b80:	68f8      	ldr	r0, [r7, #12]
 8016b82:	f000 f805 	bl	8016b90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b86:	69bb      	ldr	r3, [r7, #24]
	}
 8016b88:	4618      	mov	r0, r3
 8016b8a:	3720      	adds	r7, #32
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}

08016b90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016b90:	b580      	push	{r7, lr}
 8016b92:	b084      	sub	sp, #16
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	60f8      	str	r0, [r7, #12]
 8016b98:	60b9      	str	r1, [r7, #8]
 8016b9a:	607a      	str	r2, [r7, #4]
 8016b9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016b9e:	68bb      	ldr	r3, [r7, #8]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d103      	bne.n	8016bac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016ba4:	69bb      	ldr	r3, [r7, #24]
 8016ba6:	69ba      	ldr	r2, [r7, #24]
 8016ba8:	601a      	str	r2, [r3, #0]
 8016baa:	e002      	b.n	8016bb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016bac:	69bb      	ldr	r3, [r7, #24]
 8016bae:	687a      	ldr	r2, [r7, #4]
 8016bb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016bb2:	69bb      	ldr	r3, [r7, #24]
 8016bb4:	68fa      	ldr	r2, [r7, #12]
 8016bb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	68ba      	ldr	r2, [r7, #8]
 8016bbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016bbe:	2101      	movs	r1, #1
 8016bc0:	69b8      	ldr	r0, [r7, #24]
 8016bc2:	f7ff febd 	bl	8016940 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016bc6:	69bb      	ldr	r3, [r7, #24]
 8016bc8:	78fa      	ldrb	r2, [r7, #3]
 8016bca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016bce:	bf00      	nop
 8016bd0:	3710      	adds	r7, #16
 8016bd2:	46bd      	mov	sp, r7
 8016bd4:	bd80      	pop	{r7, pc}

08016bd6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016bd6:	b580      	push	{r7, lr}
 8016bd8:	b082      	sub	sp, #8
 8016bda:	af00      	add	r7, sp, #0
 8016bdc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	2b00      	cmp	r3, #0
 8016be2:	d00e      	beq.n	8016c02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016be4:	687b      	ldr	r3, [r7, #4]
 8016be6:	2200      	movs	r2, #0
 8016be8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	2200      	movs	r2, #0
 8016bee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016bf6:	2300      	movs	r3, #0
 8016bf8:	2200      	movs	r2, #0
 8016bfa:	2100      	movs	r1, #0
 8016bfc:	6878      	ldr	r0, [r7, #4]
 8016bfe:	f000 f911 	bl	8016e24 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016c02:	bf00      	nop
 8016c04:	3708      	adds	r7, #8
 8016c06:	46bd      	mov	sp, r7
 8016c08:	bd80      	pop	{r7, pc}

08016c0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016c0a:	b580      	push	{r7, lr}
 8016c0c:	b086      	sub	sp, #24
 8016c0e:	af00      	add	r7, sp, #0
 8016c10:	4603      	mov	r3, r0
 8016c12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016c14:	2301      	movs	r3, #1
 8016c16:	617b      	str	r3, [r7, #20]
 8016c18:	2300      	movs	r3, #0
 8016c1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016c1c:	79fb      	ldrb	r3, [r7, #7]
 8016c1e:	461a      	mov	r2, r3
 8016c20:	6939      	ldr	r1, [r7, #16]
 8016c22:	6978      	ldr	r0, [r7, #20]
 8016c24:	f7ff ff73 	bl	8016b0e <xQueueGenericCreate>
 8016c28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016c2a:	68f8      	ldr	r0, [r7, #12]
 8016c2c:	f7ff ffd3 	bl	8016bd6 <prvInitialiseMutex>

		return xNewQueue;
 8016c30:	68fb      	ldr	r3, [r7, #12]
	}
 8016c32:	4618      	mov	r0, r3
 8016c34:	3718      	adds	r7, #24
 8016c36:	46bd      	mov	sp, r7
 8016c38:	bd80      	pop	{r7, pc}

08016c3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016c3a:	b580      	push	{r7, lr}
 8016c3c:	b088      	sub	sp, #32
 8016c3e:	af02      	add	r7, sp, #8
 8016c40:	4603      	mov	r3, r0
 8016c42:	6039      	str	r1, [r7, #0]
 8016c44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016c46:	2301      	movs	r3, #1
 8016c48:	617b      	str	r3, [r7, #20]
 8016c4a:	2300      	movs	r3, #0
 8016c4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016c4e:	79fb      	ldrb	r3, [r7, #7]
 8016c50:	9300      	str	r3, [sp, #0]
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	2200      	movs	r2, #0
 8016c56:	6939      	ldr	r1, [r7, #16]
 8016c58:	6978      	ldr	r0, [r7, #20]
 8016c5a:	f7ff fedb 	bl	8016a14 <xQueueGenericCreateStatic>
 8016c5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016c60:	68f8      	ldr	r0, [r7, #12]
 8016c62:	f7ff ffb8 	bl	8016bd6 <prvInitialiseMutex>

		return xNewQueue;
 8016c66:	68fb      	ldr	r3, [r7, #12]
	}
 8016c68:	4618      	mov	r0, r3
 8016c6a:	3718      	adds	r7, #24
 8016c6c:	46bd      	mov	sp, r7
 8016c6e:	bd80      	pop	{r7, pc}

08016c70 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016c70:	b590      	push	{r4, r7, lr}
 8016c72:	b087      	sub	sp, #28
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016c78:	687b      	ldr	r3, [r7, #4]
 8016c7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016c7c:	693b      	ldr	r3, [r7, #16]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d10b      	bne.n	8016c9a <xQueueGiveMutexRecursive+0x2a>
 8016c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c86:	b672      	cpsid	i
 8016c88:	f383 8811 	msr	BASEPRI, r3
 8016c8c:	f3bf 8f6f 	isb	sy
 8016c90:	f3bf 8f4f 	dsb	sy
 8016c94:	b662      	cpsie	i
 8016c96:	60fb      	str	r3, [r7, #12]
 8016c98:	e7fe      	b.n	8016c98 <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016c9a:	693b      	ldr	r3, [r7, #16]
 8016c9c:	689c      	ldr	r4, [r3, #8]
 8016c9e:	f001 fdf3 	bl	8018888 <xTaskGetCurrentTaskHandle>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	429c      	cmp	r4, r3
 8016ca6:	d111      	bne.n	8016ccc <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016ca8:	693b      	ldr	r3, [r7, #16]
 8016caa:	68db      	ldr	r3, [r3, #12]
 8016cac:	1e5a      	subs	r2, r3, #1
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016cb2:	693b      	ldr	r3, [r7, #16]
 8016cb4:	68db      	ldr	r3, [r3, #12]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d105      	bne.n	8016cc6 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016cba:	2300      	movs	r3, #0
 8016cbc:	2200      	movs	r2, #0
 8016cbe:	2100      	movs	r1, #0
 8016cc0:	6938      	ldr	r0, [r7, #16]
 8016cc2:	f000 f8af 	bl	8016e24 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016cc6:	2301      	movs	r3, #1
 8016cc8:	617b      	str	r3, [r7, #20]
 8016cca:	e001      	b.n	8016cd0 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016ccc:	2300      	movs	r3, #0
 8016cce:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016cd0:	697b      	ldr	r3, [r7, #20]
	}
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	371c      	adds	r7, #28
 8016cd6:	46bd      	mov	sp, r7
 8016cd8:	bd90      	pop	{r4, r7, pc}

08016cda <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016cda:	b590      	push	{r4, r7, lr}
 8016cdc:	b087      	sub	sp, #28
 8016cde:	af00      	add	r7, sp, #0
 8016ce0:	6078      	str	r0, [r7, #4]
 8016ce2:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016ce8:	693b      	ldr	r3, [r7, #16]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d10b      	bne.n	8016d06 <xQueueTakeMutexRecursive+0x2c>
 8016cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cf2:	b672      	cpsid	i
 8016cf4:	f383 8811 	msr	BASEPRI, r3
 8016cf8:	f3bf 8f6f 	isb	sy
 8016cfc:	f3bf 8f4f 	dsb	sy
 8016d00:	b662      	cpsie	i
 8016d02:	60fb      	str	r3, [r7, #12]
 8016d04:	e7fe      	b.n	8016d04 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016d06:	693b      	ldr	r3, [r7, #16]
 8016d08:	689c      	ldr	r4, [r3, #8]
 8016d0a:	f001 fdbd 	bl	8018888 <xTaskGetCurrentTaskHandle>
 8016d0e:	4603      	mov	r3, r0
 8016d10:	429c      	cmp	r4, r3
 8016d12:	d107      	bne.n	8016d24 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	68db      	ldr	r3, [r3, #12]
 8016d18:	1c5a      	adds	r2, r3, #1
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016d1e:	2301      	movs	r3, #1
 8016d20:	617b      	str	r3, [r7, #20]
 8016d22:	e00c      	b.n	8016d3e <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016d24:	6839      	ldr	r1, [r7, #0]
 8016d26:	6938      	ldr	r0, [r7, #16]
 8016d28:	f000 fb8e 	bl	8017448 <xQueueSemaphoreTake>
 8016d2c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016d2e:	697b      	ldr	r3, [r7, #20]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	d004      	beq.n	8016d3e <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016d34:	693b      	ldr	r3, [r7, #16]
 8016d36:	68db      	ldr	r3, [r3, #12]
 8016d38:	1c5a      	adds	r2, r3, #1
 8016d3a:	693b      	ldr	r3, [r7, #16]
 8016d3c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016d3e:	697b      	ldr	r3, [r7, #20]
	}
 8016d40:	4618      	mov	r0, r3
 8016d42:	371c      	adds	r7, #28
 8016d44:	46bd      	mov	sp, r7
 8016d46:	bd90      	pop	{r4, r7, pc}

08016d48 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016d48:	b580      	push	{r7, lr}
 8016d4a:	b08a      	sub	sp, #40	; 0x28
 8016d4c:	af02      	add	r7, sp, #8
 8016d4e:	60f8      	str	r0, [r7, #12]
 8016d50:	60b9      	str	r1, [r7, #8]
 8016d52:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016d54:	68fb      	ldr	r3, [r7, #12]
 8016d56:	2b00      	cmp	r3, #0
 8016d58:	d10b      	bne.n	8016d72 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8016d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d5e:	b672      	cpsid	i
 8016d60:	f383 8811 	msr	BASEPRI, r3
 8016d64:	f3bf 8f6f 	isb	sy
 8016d68:	f3bf 8f4f 	dsb	sy
 8016d6c:	b662      	cpsie	i
 8016d6e:	61bb      	str	r3, [r7, #24]
 8016d70:	e7fe      	b.n	8016d70 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016d72:	68ba      	ldr	r2, [r7, #8]
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	429a      	cmp	r2, r3
 8016d78:	d90b      	bls.n	8016d92 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8016d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d7e:	b672      	cpsid	i
 8016d80:	f383 8811 	msr	BASEPRI, r3
 8016d84:	f3bf 8f6f 	isb	sy
 8016d88:	f3bf 8f4f 	dsb	sy
 8016d8c:	b662      	cpsie	i
 8016d8e:	617b      	str	r3, [r7, #20]
 8016d90:	e7fe      	b.n	8016d90 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016d92:	2302      	movs	r3, #2
 8016d94:	9300      	str	r3, [sp, #0]
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	2200      	movs	r2, #0
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	68f8      	ldr	r0, [r7, #12]
 8016d9e:	f7ff fe39 	bl	8016a14 <xQueueGenericCreateStatic>
 8016da2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016da4:	69fb      	ldr	r3, [r7, #28]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d002      	beq.n	8016db0 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016daa:	69fb      	ldr	r3, [r7, #28]
 8016dac:	68ba      	ldr	r2, [r7, #8]
 8016dae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016db0:	69fb      	ldr	r3, [r7, #28]
	}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3720      	adds	r7, #32
 8016db6:	46bd      	mov	sp, r7
 8016db8:	bd80      	pop	{r7, pc}

08016dba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016dba:	b580      	push	{r7, lr}
 8016dbc:	b086      	sub	sp, #24
 8016dbe:	af00      	add	r7, sp, #0
 8016dc0:	6078      	str	r0, [r7, #4]
 8016dc2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d10b      	bne.n	8016de2 <xQueueCreateCountingSemaphore+0x28>
 8016dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dce:	b672      	cpsid	i
 8016dd0:	f383 8811 	msr	BASEPRI, r3
 8016dd4:	f3bf 8f6f 	isb	sy
 8016dd8:	f3bf 8f4f 	dsb	sy
 8016ddc:	b662      	cpsie	i
 8016dde:	613b      	str	r3, [r7, #16]
 8016de0:	e7fe      	b.n	8016de0 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016de2:	683a      	ldr	r2, [r7, #0]
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	429a      	cmp	r2, r3
 8016de8:	d90b      	bls.n	8016e02 <xQueueCreateCountingSemaphore+0x48>
 8016dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dee:	b672      	cpsid	i
 8016df0:	f383 8811 	msr	BASEPRI, r3
 8016df4:	f3bf 8f6f 	isb	sy
 8016df8:	f3bf 8f4f 	dsb	sy
 8016dfc:	b662      	cpsie	i
 8016dfe:	60fb      	str	r3, [r7, #12]
 8016e00:	e7fe      	b.n	8016e00 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016e02:	2202      	movs	r2, #2
 8016e04:	2100      	movs	r1, #0
 8016e06:	6878      	ldr	r0, [r7, #4]
 8016e08:	f7ff fe81 	bl	8016b0e <xQueueGenericCreate>
 8016e0c:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016e0e:	697b      	ldr	r3, [r7, #20]
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d002      	beq.n	8016e1a <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016e14:	697b      	ldr	r3, [r7, #20]
 8016e16:	683a      	ldr	r2, [r7, #0]
 8016e18:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016e1a:	697b      	ldr	r3, [r7, #20]
	}
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	3718      	adds	r7, #24
 8016e20:	46bd      	mov	sp, r7
 8016e22:	bd80      	pop	{r7, pc}

08016e24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b08e      	sub	sp, #56	; 0x38
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	60b9      	str	r1, [r7, #8]
 8016e2e:	607a      	str	r2, [r7, #4]
 8016e30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016e32:	2300      	movs	r3, #0
 8016e34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	d10b      	bne.n	8016e58 <xQueueGenericSend+0x34>
 8016e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e44:	b672      	cpsid	i
 8016e46:	f383 8811 	msr	BASEPRI, r3
 8016e4a:	f3bf 8f6f 	isb	sy
 8016e4e:	f3bf 8f4f 	dsb	sy
 8016e52:	b662      	cpsie	i
 8016e54:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e56:	e7fe      	b.n	8016e56 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e58:	68bb      	ldr	r3, [r7, #8]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d103      	bne.n	8016e66 <xQueueGenericSend+0x42>
 8016e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d101      	bne.n	8016e6a <xQueueGenericSend+0x46>
 8016e66:	2301      	movs	r3, #1
 8016e68:	e000      	b.n	8016e6c <xQueueGenericSend+0x48>
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d10b      	bne.n	8016e88 <xQueueGenericSend+0x64>
 8016e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e74:	b672      	cpsid	i
 8016e76:	f383 8811 	msr	BASEPRI, r3
 8016e7a:	f3bf 8f6f 	isb	sy
 8016e7e:	f3bf 8f4f 	dsb	sy
 8016e82:	b662      	cpsie	i
 8016e84:	627b      	str	r3, [r7, #36]	; 0x24
 8016e86:	e7fe      	b.n	8016e86 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e88:	683b      	ldr	r3, [r7, #0]
 8016e8a:	2b02      	cmp	r3, #2
 8016e8c:	d103      	bne.n	8016e96 <xQueueGenericSend+0x72>
 8016e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016e92:	2b01      	cmp	r3, #1
 8016e94:	d101      	bne.n	8016e9a <xQueueGenericSend+0x76>
 8016e96:	2301      	movs	r3, #1
 8016e98:	e000      	b.n	8016e9c <xQueueGenericSend+0x78>
 8016e9a:	2300      	movs	r3, #0
 8016e9c:	2b00      	cmp	r3, #0
 8016e9e:	d10b      	bne.n	8016eb8 <xQueueGenericSend+0x94>
 8016ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ea4:	b672      	cpsid	i
 8016ea6:	f383 8811 	msr	BASEPRI, r3
 8016eaa:	f3bf 8f6f 	isb	sy
 8016eae:	f3bf 8f4f 	dsb	sy
 8016eb2:	b662      	cpsie	i
 8016eb4:	623b      	str	r3, [r7, #32]
 8016eb6:	e7fe      	b.n	8016eb6 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016eb8:	f001 fcf6 	bl	80188a8 <xTaskGetSchedulerState>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d102      	bne.n	8016ec8 <xQueueGenericSend+0xa4>
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d101      	bne.n	8016ecc <xQueueGenericSend+0xa8>
 8016ec8:	2301      	movs	r3, #1
 8016eca:	e000      	b.n	8016ece <xQueueGenericSend+0xaa>
 8016ecc:	2300      	movs	r3, #0
 8016ece:	2b00      	cmp	r3, #0
 8016ed0:	d10b      	bne.n	8016eea <xQueueGenericSend+0xc6>
 8016ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016ed6:	b672      	cpsid	i
 8016ed8:	f383 8811 	msr	BASEPRI, r3
 8016edc:	f3bf 8f6f 	isb	sy
 8016ee0:	f3bf 8f4f 	dsb	sy
 8016ee4:	b662      	cpsie	i
 8016ee6:	61fb      	str	r3, [r7, #28]
 8016ee8:	e7fe      	b.n	8016ee8 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016eea:	f002 fb1d 	bl	8019528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016ef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ef6:	429a      	cmp	r2, r3
 8016ef8:	d302      	bcc.n	8016f00 <xQueueGenericSend+0xdc>
 8016efa:	683b      	ldr	r3, [r7, #0]
 8016efc:	2b02      	cmp	r3, #2
 8016efe:	d129      	bne.n	8016f54 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f00:	683a      	ldr	r2, [r7, #0]
 8016f02:	68b9      	ldr	r1, [r7, #8]
 8016f04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f06:	f000 fc6e 	bl	80177e6 <prvCopyDataToQueue>
 8016f0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d010      	beq.n	8016f36 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f16:	3324      	adds	r3, #36	; 0x24
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f001 faf7 	bl	801850c <xTaskRemoveFromEventList>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d013      	beq.n	8016f4c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016f24:	4b3f      	ldr	r3, [pc, #252]	; (8017024 <xQueueGenericSend+0x200>)
 8016f26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f2a:	601a      	str	r2, [r3, #0]
 8016f2c:	f3bf 8f4f 	dsb	sy
 8016f30:	f3bf 8f6f 	isb	sy
 8016f34:	e00a      	b.n	8016f4c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	d007      	beq.n	8016f4c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016f3c:	4b39      	ldr	r3, [pc, #228]	; (8017024 <xQueueGenericSend+0x200>)
 8016f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f42:	601a      	str	r2, [r3, #0]
 8016f44:	f3bf 8f4f 	dsb	sy
 8016f48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016f4c:	f002 fb1e 	bl	801958c <vPortExitCritical>
				return pdPASS;
 8016f50:	2301      	movs	r3, #1
 8016f52:	e063      	b.n	801701c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d103      	bne.n	8016f62 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016f5a:	f002 fb17 	bl	801958c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	e05c      	b.n	801701c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d106      	bne.n	8016f76 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016f68:	f107 0314 	add.w	r3, r7, #20
 8016f6c:	4618      	mov	r0, r3
 8016f6e:	f001 fb31 	bl	80185d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016f72:	2301      	movs	r3, #1
 8016f74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016f76:	f002 fb09 	bl	801958c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016f7a:	f001 f88f 	bl	801809c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016f7e:	f002 fad3 	bl	8019528 <vPortEnterCritical>
 8016f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f88:	b25b      	sxtb	r3, r3
 8016f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f8e:	d103      	bne.n	8016f98 <xQueueGenericSend+0x174>
 8016f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f92:	2200      	movs	r2, #0
 8016f94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016f9e:	b25b      	sxtb	r3, r3
 8016fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fa4:	d103      	bne.n	8016fae <xQueueGenericSend+0x18a>
 8016fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa8:	2200      	movs	r2, #0
 8016faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016fae:	f002 faed 	bl	801958c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016fb2:	1d3a      	adds	r2, r7, #4
 8016fb4:	f107 0314 	add.w	r3, r7, #20
 8016fb8:	4611      	mov	r1, r2
 8016fba:	4618      	mov	r0, r3
 8016fbc:	f001 fb20 	bl	8018600 <xTaskCheckForTimeOut>
 8016fc0:	4603      	mov	r3, r0
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d124      	bne.n	8017010 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016fc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fc8:	f000 fd05 	bl	80179d6 <prvIsQueueFull>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d018      	beq.n	8017004 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd4:	3310      	adds	r3, #16
 8016fd6:	687a      	ldr	r2, [r7, #4]
 8016fd8:	4611      	mov	r1, r2
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f001 fa44 	bl	8018468 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fe2:	f000 fc90 	bl	8017906 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016fe6:	f001 f867 	bl	80180b8 <xTaskResumeAll>
 8016fea:	4603      	mov	r3, r0
 8016fec:	2b00      	cmp	r3, #0
 8016fee:	f47f af7c 	bne.w	8016eea <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8016ff2:	4b0c      	ldr	r3, [pc, #48]	; (8017024 <xQueueGenericSend+0x200>)
 8016ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016ff8:	601a      	str	r2, [r3, #0]
 8016ffa:	f3bf 8f4f 	dsb	sy
 8016ffe:	f3bf 8f6f 	isb	sy
 8017002:	e772      	b.n	8016eea <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017004:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017006:	f000 fc7e 	bl	8017906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801700a:	f001 f855 	bl	80180b8 <xTaskResumeAll>
 801700e:	e76c      	b.n	8016eea <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017012:	f000 fc78 	bl	8017906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017016:	f001 f84f 	bl	80180b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801701a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801701c:	4618      	mov	r0, r3
 801701e:	3738      	adds	r7, #56	; 0x38
 8017020:	46bd      	mov	sp, r7
 8017022:	bd80      	pop	{r7, pc}
 8017024:	e000ed04 	.word	0xe000ed04

08017028 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b08e      	sub	sp, #56	; 0x38
 801702c:	af00      	add	r7, sp, #0
 801702e:	60f8      	str	r0, [r7, #12]
 8017030:	60b9      	str	r1, [r7, #8]
 8017032:	607a      	str	r2, [r7, #4]
 8017034:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017036:	68fb      	ldr	r3, [r7, #12]
 8017038:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801703a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801703c:	2b00      	cmp	r3, #0
 801703e:	d10b      	bne.n	8017058 <xQueueGenericSendFromISR+0x30>
 8017040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017044:	b672      	cpsid	i
 8017046:	f383 8811 	msr	BASEPRI, r3
 801704a:	f3bf 8f6f 	isb	sy
 801704e:	f3bf 8f4f 	dsb	sy
 8017052:	b662      	cpsie	i
 8017054:	627b      	str	r3, [r7, #36]	; 0x24
 8017056:	e7fe      	b.n	8017056 <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017058:	68bb      	ldr	r3, [r7, #8]
 801705a:	2b00      	cmp	r3, #0
 801705c:	d103      	bne.n	8017066 <xQueueGenericSendFromISR+0x3e>
 801705e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017062:	2b00      	cmp	r3, #0
 8017064:	d101      	bne.n	801706a <xQueueGenericSendFromISR+0x42>
 8017066:	2301      	movs	r3, #1
 8017068:	e000      	b.n	801706c <xQueueGenericSendFromISR+0x44>
 801706a:	2300      	movs	r3, #0
 801706c:	2b00      	cmp	r3, #0
 801706e:	d10b      	bne.n	8017088 <xQueueGenericSendFromISR+0x60>
 8017070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017074:	b672      	cpsid	i
 8017076:	f383 8811 	msr	BASEPRI, r3
 801707a:	f3bf 8f6f 	isb	sy
 801707e:	f3bf 8f4f 	dsb	sy
 8017082:	b662      	cpsie	i
 8017084:	623b      	str	r3, [r7, #32]
 8017086:	e7fe      	b.n	8017086 <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	2b02      	cmp	r3, #2
 801708c:	d103      	bne.n	8017096 <xQueueGenericSendFromISR+0x6e>
 801708e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017092:	2b01      	cmp	r3, #1
 8017094:	d101      	bne.n	801709a <xQueueGenericSendFromISR+0x72>
 8017096:	2301      	movs	r3, #1
 8017098:	e000      	b.n	801709c <xQueueGenericSendFromISR+0x74>
 801709a:	2300      	movs	r3, #0
 801709c:	2b00      	cmp	r3, #0
 801709e:	d10b      	bne.n	80170b8 <xQueueGenericSendFromISR+0x90>
 80170a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170a4:	b672      	cpsid	i
 80170a6:	f383 8811 	msr	BASEPRI, r3
 80170aa:	f3bf 8f6f 	isb	sy
 80170ae:	f3bf 8f4f 	dsb	sy
 80170b2:	b662      	cpsie	i
 80170b4:	61fb      	str	r3, [r7, #28]
 80170b6:	e7fe      	b.n	80170b6 <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80170b8:	f002 fb16 	bl	80196e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80170bc:	f3ef 8211 	mrs	r2, BASEPRI
 80170c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170c4:	b672      	cpsid	i
 80170c6:	f383 8811 	msr	BASEPRI, r3
 80170ca:	f3bf 8f6f 	isb	sy
 80170ce:	f3bf 8f4f 	dsb	sy
 80170d2:	b662      	cpsie	i
 80170d4:	61ba      	str	r2, [r7, #24]
 80170d6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80170d8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80170da:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80170dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80170e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170e4:	429a      	cmp	r2, r3
 80170e6:	d302      	bcc.n	80170ee <xQueueGenericSendFromISR+0xc6>
 80170e8:	683b      	ldr	r3, [r7, #0]
 80170ea:	2b02      	cmp	r3, #2
 80170ec:	d12c      	bne.n	8017148 <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80170ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80170f8:	683a      	ldr	r2, [r7, #0]
 80170fa:	68b9      	ldr	r1, [r7, #8]
 80170fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80170fe:	f000 fb72 	bl	80177e6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017102:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8017106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801710a:	d112      	bne.n	8017132 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801710c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017110:	2b00      	cmp	r3, #0
 8017112:	d016      	beq.n	8017142 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017116:	3324      	adds	r3, #36	; 0x24
 8017118:	4618      	mov	r0, r3
 801711a:	f001 f9f7 	bl	801850c <xTaskRemoveFromEventList>
 801711e:	4603      	mov	r3, r0
 8017120:	2b00      	cmp	r3, #0
 8017122:	d00e      	beq.n	8017142 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	2b00      	cmp	r3, #0
 8017128:	d00b      	beq.n	8017142 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	2201      	movs	r2, #1
 801712e:	601a      	str	r2, [r3, #0]
 8017130:	e007      	b.n	8017142 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017132:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8017136:	3301      	adds	r3, #1
 8017138:	b2db      	uxtb	r3, r3
 801713a:	b25a      	sxtb	r2, r3
 801713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801713e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017142:	2301      	movs	r3, #1
 8017144:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8017146:	e001      	b.n	801714c <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8017148:	2300      	movs	r3, #0
 801714a:	637b      	str	r3, [r7, #52]	; 0x34
 801714c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801714e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017150:	693b      	ldr	r3, [r7, #16]
 8017152:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017158:	4618      	mov	r0, r3
 801715a:	3738      	adds	r7, #56	; 0x38
 801715c:	46bd      	mov	sp, r7
 801715e:	bd80      	pop	{r7, pc}

08017160 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017160:	b580      	push	{r7, lr}
 8017162:	b08e      	sub	sp, #56	; 0x38
 8017164:	af00      	add	r7, sp, #0
 8017166:	6078      	str	r0, [r7, #4]
 8017168:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801716a:	687b      	ldr	r3, [r7, #4]
 801716c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801716e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017170:	2b00      	cmp	r3, #0
 8017172:	d10b      	bne.n	801718c <xQueueGiveFromISR+0x2c>
	__asm volatile
 8017174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017178:	b672      	cpsid	i
 801717a:	f383 8811 	msr	BASEPRI, r3
 801717e:	f3bf 8f6f 	isb	sy
 8017182:	f3bf 8f4f 	dsb	sy
 8017186:	b662      	cpsie	i
 8017188:	623b      	str	r3, [r7, #32]
 801718a:	e7fe      	b.n	801718a <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801718c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801718e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017190:	2b00      	cmp	r3, #0
 8017192:	d00b      	beq.n	80171ac <xQueueGiveFromISR+0x4c>
 8017194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017198:	b672      	cpsid	i
 801719a:	f383 8811 	msr	BASEPRI, r3
 801719e:	f3bf 8f6f 	isb	sy
 80171a2:	f3bf 8f4f 	dsb	sy
 80171a6:	b662      	cpsie	i
 80171a8:	61fb      	str	r3, [r7, #28]
 80171aa:	e7fe      	b.n	80171aa <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80171ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d103      	bne.n	80171bc <xQueueGiveFromISR+0x5c>
 80171b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171b6:	689b      	ldr	r3, [r3, #8]
 80171b8:	2b00      	cmp	r3, #0
 80171ba:	d101      	bne.n	80171c0 <xQueueGiveFromISR+0x60>
 80171bc:	2301      	movs	r3, #1
 80171be:	e000      	b.n	80171c2 <xQueueGiveFromISR+0x62>
 80171c0:	2300      	movs	r3, #0
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d10b      	bne.n	80171de <xQueueGiveFromISR+0x7e>
 80171c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ca:	b672      	cpsid	i
 80171cc:	f383 8811 	msr	BASEPRI, r3
 80171d0:	f3bf 8f6f 	isb	sy
 80171d4:	f3bf 8f4f 	dsb	sy
 80171d8:	b662      	cpsie	i
 80171da:	61bb      	str	r3, [r7, #24]
 80171dc:	e7fe      	b.n	80171dc <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80171de:	f002 fa83 	bl	80196e8 <vPortValidateInterruptPriority>
	__asm volatile
 80171e2:	f3ef 8211 	mrs	r2, BASEPRI
 80171e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ea:	b672      	cpsid	i
 80171ec:	f383 8811 	msr	BASEPRI, r3
 80171f0:	f3bf 8f6f 	isb	sy
 80171f4:	f3bf 8f4f 	dsb	sy
 80171f8:	b662      	cpsie	i
 80171fa:	617a      	str	r2, [r7, #20]
 80171fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80171fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017200:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017206:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8017208:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801720a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801720c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801720e:	429a      	cmp	r2, r3
 8017210:	d22b      	bcs.n	801726a <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017218:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721e:	1c5a      	adds	r2, r3, #1
 8017220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017222:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017224:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017228:	f1b3 3fff 	cmp.w	r3, #4294967295
 801722c:	d112      	bne.n	8017254 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801722e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017232:	2b00      	cmp	r3, #0
 8017234:	d016      	beq.n	8017264 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017238:	3324      	adds	r3, #36	; 0x24
 801723a:	4618      	mov	r0, r3
 801723c:	f001 f966 	bl	801850c <xTaskRemoveFromEventList>
 8017240:	4603      	mov	r3, r0
 8017242:	2b00      	cmp	r3, #0
 8017244:	d00e      	beq.n	8017264 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017246:	683b      	ldr	r3, [r7, #0]
 8017248:	2b00      	cmp	r3, #0
 801724a:	d00b      	beq.n	8017264 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801724c:	683b      	ldr	r3, [r7, #0]
 801724e:	2201      	movs	r2, #1
 8017250:	601a      	str	r2, [r3, #0]
 8017252:	e007      	b.n	8017264 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017258:	3301      	adds	r3, #1
 801725a:	b2db      	uxtb	r3, r3
 801725c:	b25a      	sxtb	r2, r3
 801725e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017264:	2301      	movs	r3, #1
 8017266:	637b      	str	r3, [r7, #52]	; 0x34
 8017268:	e001      	b.n	801726e <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801726a:	2300      	movs	r3, #0
 801726c:	637b      	str	r3, [r7, #52]	; 0x34
 801726e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017270:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017272:	68fb      	ldr	r3, [r7, #12]
 8017274:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801727a:	4618      	mov	r0, r3
 801727c:	3738      	adds	r7, #56	; 0x38
 801727e:	46bd      	mov	sp, r7
 8017280:	bd80      	pop	{r7, pc}
	...

08017284 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b08c      	sub	sp, #48	; 0x30
 8017288:	af00      	add	r7, sp, #0
 801728a:	60f8      	str	r0, [r7, #12]
 801728c:	60b9      	str	r1, [r7, #8]
 801728e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017290:	2300      	movs	r3, #0
 8017292:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017294:	68fb      	ldr	r3, [r7, #12]
 8017296:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801729a:	2b00      	cmp	r3, #0
 801729c:	d10b      	bne.n	80172b6 <xQueueReceive+0x32>
	__asm volatile
 801729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172a2:	b672      	cpsid	i
 80172a4:	f383 8811 	msr	BASEPRI, r3
 80172a8:	f3bf 8f6f 	isb	sy
 80172ac:	f3bf 8f4f 	dsb	sy
 80172b0:	b662      	cpsie	i
 80172b2:	623b      	str	r3, [r7, #32]
 80172b4:	e7fe      	b.n	80172b4 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80172b6:	68bb      	ldr	r3, [r7, #8]
 80172b8:	2b00      	cmp	r3, #0
 80172ba:	d103      	bne.n	80172c4 <xQueueReceive+0x40>
 80172bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d101      	bne.n	80172c8 <xQueueReceive+0x44>
 80172c4:	2301      	movs	r3, #1
 80172c6:	e000      	b.n	80172ca <xQueueReceive+0x46>
 80172c8:	2300      	movs	r3, #0
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d10b      	bne.n	80172e6 <xQueueReceive+0x62>
 80172ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172d2:	b672      	cpsid	i
 80172d4:	f383 8811 	msr	BASEPRI, r3
 80172d8:	f3bf 8f6f 	isb	sy
 80172dc:	f3bf 8f4f 	dsb	sy
 80172e0:	b662      	cpsie	i
 80172e2:	61fb      	str	r3, [r7, #28]
 80172e4:	e7fe      	b.n	80172e4 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80172e6:	f001 fadf 	bl	80188a8 <xTaskGetSchedulerState>
 80172ea:	4603      	mov	r3, r0
 80172ec:	2b00      	cmp	r3, #0
 80172ee:	d102      	bne.n	80172f6 <xQueueReceive+0x72>
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	2b00      	cmp	r3, #0
 80172f4:	d101      	bne.n	80172fa <xQueueReceive+0x76>
 80172f6:	2301      	movs	r3, #1
 80172f8:	e000      	b.n	80172fc <xQueueReceive+0x78>
 80172fa:	2300      	movs	r3, #0
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d10b      	bne.n	8017318 <xQueueReceive+0x94>
 8017300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017304:	b672      	cpsid	i
 8017306:	f383 8811 	msr	BASEPRI, r3
 801730a:	f3bf 8f6f 	isb	sy
 801730e:	f3bf 8f4f 	dsb	sy
 8017312:	b662      	cpsie	i
 8017314:	61bb      	str	r3, [r7, #24]
 8017316:	e7fe      	b.n	8017316 <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8017318:	f002 f906 	bl	8019528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801731c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801731e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017320:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017324:	2b00      	cmp	r3, #0
 8017326:	d01f      	beq.n	8017368 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017328:	68b9      	ldr	r1, [r7, #8]
 801732a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801732c:	f000 fac5 	bl	80178ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017332:	1e5a      	subs	r2, r3, #1
 8017334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017336:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801733a:	691b      	ldr	r3, [r3, #16]
 801733c:	2b00      	cmp	r3, #0
 801733e:	d00f      	beq.n	8017360 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017342:	3310      	adds	r3, #16
 8017344:	4618      	mov	r0, r3
 8017346:	f001 f8e1 	bl	801850c <xTaskRemoveFromEventList>
 801734a:	4603      	mov	r3, r0
 801734c:	2b00      	cmp	r3, #0
 801734e:	d007      	beq.n	8017360 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017350:	4b3c      	ldr	r3, [pc, #240]	; (8017444 <xQueueReceive+0x1c0>)
 8017352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017356:	601a      	str	r2, [r3, #0]
 8017358:	f3bf 8f4f 	dsb	sy
 801735c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017360:	f002 f914 	bl	801958c <vPortExitCritical>
				return pdPASS;
 8017364:	2301      	movs	r3, #1
 8017366:	e069      	b.n	801743c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	2b00      	cmp	r3, #0
 801736c:	d103      	bne.n	8017376 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801736e:	f002 f90d 	bl	801958c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017372:	2300      	movs	r3, #0
 8017374:	e062      	b.n	801743c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017378:	2b00      	cmp	r3, #0
 801737a:	d106      	bne.n	801738a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801737c:	f107 0310 	add.w	r3, r7, #16
 8017380:	4618      	mov	r0, r3
 8017382:	f001 f927 	bl	80185d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017386:	2301      	movs	r3, #1
 8017388:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801738a:	f002 f8ff 	bl	801958c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801738e:	f000 fe85 	bl	801809c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017392:	f002 f8c9 	bl	8019528 <vPortEnterCritical>
 8017396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017398:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801739c:	b25b      	sxtb	r3, r3
 801739e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173a2:	d103      	bne.n	80173ac <xQueueReceive+0x128>
 80173a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173a6:	2200      	movs	r2, #0
 80173a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80173ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173b2:	b25b      	sxtb	r3, r3
 80173b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173b8:	d103      	bne.n	80173c2 <xQueueReceive+0x13e>
 80173ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173bc:	2200      	movs	r2, #0
 80173be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80173c2:	f002 f8e3 	bl	801958c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80173c6:	1d3a      	adds	r2, r7, #4
 80173c8:	f107 0310 	add.w	r3, r7, #16
 80173cc:	4611      	mov	r1, r2
 80173ce:	4618      	mov	r0, r3
 80173d0:	f001 f916 	bl	8018600 <xTaskCheckForTimeOut>
 80173d4:	4603      	mov	r3, r0
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d123      	bne.n	8017422 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80173da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173dc:	f000 fae5 	bl	80179aa <prvIsQueueEmpty>
 80173e0:	4603      	mov	r3, r0
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	d017      	beq.n	8017416 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80173e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173e8:	3324      	adds	r3, #36	; 0x24
 80173ea:	687a      	ldr	r2, [r7, #4]
 80173ec:	4611      	mov	r1, r2
 80173ee:	4618      	mov	r0, r3
 80173f0:	f001 f83a 	bl	8018468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80173f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173f6:	f000 fa86 	bl	8017906 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80173fa:	f000 fe5d 	bl	80180b8 <xTaskResumeAll>
 80173fe:	4603      	mov	r3, r0
 8017400:	2b00      	cmp	r3, #0
 8017402:	d189      	bne.n	8017318 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8017404:	4b0f      	ldr	r3, [pc, #60]	; (8017444 <xQueueReceive+0x1c0>)
 8017406:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801740a:	601a      	str	r2, [r3, #0]
 801740c:	f3bf 8f4f 	dsb	sy
 8017410:	f3bf 8f6f 	isb	sy
 8017414:	e780      	b.n	8017318 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8017416:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017418:	f000 fa75 	bl	8017906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801741c:	f000 fe4c 	bl	80180b8 <xTaskResumeAll>
 8017420:	e77a      	b.n	8017318 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017424:	f000 fa6f 	bl	8017906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017428:	f000 fe46 	bl	80180b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801742c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801742e:	f000 fabc 	bl	80179aa <prvIsQueueEmpty>
 8017432:	4603      	mov	r3, r0
 8017434:	2b00      	cmp	r3, #0
 8017436:	f43f af6f 	beq.w	8017318 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801743a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801743c:	4618      	mov	r0, r3
 801743e:	3730      	adds	r7, #48	; 0x30
 8017440:	46bd      	mov	sp, r7
 8017442:	bd80      	pop	{r7, pc}
 8017444:	e000ed04 	.word	0xe000ed04

08017448 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8017448:	b580      	push	{r7, lr}
 801744a:	b08e      	sub	sp, #56	; 0x38
 801744c:	af00      	add	r7, sp, #0
 801744e:	6078      	str	r0, [r7, #4]
 8017450:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017452:	2300      	movs	r3, #0
 8017454:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801745a:	2300      	movs	r3, #0
 801745c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801745e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017460:	2b00      	cmp	r3, #0
 8017462:	d10b      	bne.n	801747c <xQueueSemaphoreTake+0x34>
 8017464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017468:	b672      	cpsid	i
 801746a:	f383 8811 	msr	BASEPRI, r3
 801746e:	f3bf 8f6f 	isb	sy
 8017472:	f3bf 8f4f 	dsb	sy
 8017476:	b662      	cpsie	i
 8017478:	623b      	str	r3, [r7, #32]
 801747a:	e7fe      	b.n	801747a <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017480:	2b00      	cmp	r3, #0
 8017482:	d00b      	beq.n	801749c <xQueueSemaphoreTake+0x54>
 8017484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017488:	b672      	cpsid	i
 801748a:	f383 8811 	msr	BASEPRI, r3
 801748e:	f3bf 8f6f 	isb	sy
 8017492:	f3bf 8f4f 	dsb	sy
 8017496:	b662      	cpsie	i
 8017498:	61fb      	str	r3, [r7, #28]
 801749a:	e7fe      	b.n	801749a <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801749c:	f001 fa04 	bl	80188a8 <xTaskGetSchedulerState>
 80174a0:	4603      	mov	r3, r0
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d102      	bne.n	80174ac <xQueueSemaphoreTake+0x64>
 80174a6:	683b      	ldr	r3, [r7, #0]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d101      	bne.n	80174b0 <xQueueSemaphoreTake+0x68>
 80174ac:	2301      	movs	r3, #1
 80174ae:	e000      	b.n	80174b2 <xQueueSemaphoreTake+0x6a>
 80174b0:	2300      	movs	r3, #0
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d10b      	bne.n	80174ce <xQueueSemaphoreTake+0x86>
 80174b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ba:	b672      	cpsid	i
 80174bc:	f383 8811 	msr	BASEPRI, r3
 80174c0:	f3bf 8f6f 	isb	sy
 80174c4:	f3bf 8f4f 	dsb	sy
 80174c8:	b662      	cpsie	i
 80174ca:	61bb      	str	r3, [r7, #24]
 80174cc:	e7fe      	b.n	80174cc <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80174ce:	f002 f82b 	bl	8019528 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80174d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174d6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80174d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d024      	beq.n	8017528 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80174de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174e0:	1e5a      	subs	r2, r3, #1
 80174e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80174e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e8:	681b      	ldr	r3, [r3, #0]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d104      	bne.n	80174f8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80174ee:	f001 fb55 	bl	8018b9c <pvTaskIncrementMutexHeldCount>
 80174f2:	4602      	mov	r2, r0
 80174f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80174f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174fa:	691b      	ldr	r3, [r3, #16]
 80174fc:	2b00      	cmp	r3, #0
 80174fe:	d00f      	beq.n	8017520 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017502:	3310      	adds	r3, #16
 8017504:	4618      	mov	r0, r3
 8017506:	f001 f801 	bl	801850c <xTaskRemoveFromEventList>
 801750a:	4603      	mov	r3, r0
 801750c:	2b00      	cmp	r3, #0
 801750e:	d007      	beq.n	8017520 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017510:	4b54      	ldr	r3, [pc, #336]	; (8017664 <xQueueSemaphoreTake+0x21c>)
 8017512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017516:	601a      	str	r2, [r3, #0]
 8017518:	f3bf 8f4f 	dsb	sy
 801751c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017520:	f002 f834 	bl	801958c <vPortExitCritical>
				return pdPASS;
 8017524:	2301      	movs	r3, #1
 8017526:	e098      	b.n	801765a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8017528:	683b      	ldr	r3, [r7, #0]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d112      	bne.n	8017554 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801752e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017530:	2b00      	cmp	r3, #0
 8017532:	d00b      	beq.n	801754c <xQueueSemaphoreTake+0x104>
 8017534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017538:	b672      	cpsid	i
 801753a:	f383 8811 	msr	BASEPRI, r3
 801753e:	f3bf 8f6f 	isb	sy
 8017542:	f3bf 8f4f 	dsb	sy
 8017546:	b662      	cpsie	i
 8017548:	617b      	str	r3, [r7, #20]
 801754a:	e7fe      	b.n	801754a <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801754c:	f002 f81e 	bl	801958c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017550:	2300      	movs	r3, #0
 8017552:	e082      	b.n	801765a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017554:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017556:	2b00      	cmp	r3, #0
 8017558:	d106      	bne.n	8017568 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801755a:	f107 030c 	add.w	r3, r7, #12
 801755e:	4618      	mov	r0, r3
 8017560:	f001 f838 	bl	80185d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017564:	2301      	movs	r3, #1
 8017566:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8017568:	f002 f810 	bl	801958c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801756c:	f000 fd96 	bl	801809c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017570:	f001 ffda 	bl	8019528 <vPortEnterCritical>
 8017574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017576:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801757a:	b25b      	sxtb	r3, r3
 801757c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017580:	d103      	bne.n	801758a <xQueueSemaphoreTake+0x142>
 8017582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017584:	2200      	movs	r2, #0
 8017586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017590:	b25b      	sxtb	r3, r3
 8017592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017596:	d103      	bne.n	80175a0 <xQueueSemaphoreTake+0x158>
 8017598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801759a:	2200      	movs	r2, #0
 801759c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80175a0:	f001 fff4 	bl	801958c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80175a4:	463a      	mov	r2, r7
 80175a6:	f107 030c 	add.w	r3, r7, #12
 80175aa:	4611      	mov	r1, r2
 80175ac:	4618      	mov	r0, r3
 80175ae:	f001 f827 	bl	8018600 <xTaskCheckForTimeOut>
 80175b2:	4603      	mov	r3, r0
 80175b4:	2b00      	cmp	r3, #0
 80175b6:	d132      	bne.n	801761e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80175b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175ba:	f000 f9f6 	bl	80179aa <prvIsQueueEmpty>
 80175be:	4603      	mov	r3, r0
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d026      	beq.n	8017612 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80175c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d109      	bne.n	80175e0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80175cc:	f001 ffac 	bl	8019528 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80175d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175d2:	689b      	ldr	r3, [r3, #8]
 80175d4:	4618      	mov	r0, r3
 80175d6:	f001 f985 	bl	80188e4 <xTaskPriorityInherit>
 80175da:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80175dc:	f001 ffd6 	bl	801958c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80175e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e2:	3324      	adds	r3, #36	; 0x24
 80175e4:	683a      	ldr	r2, [r7, #0]
 80175e6:	4611      	mov	r1, r2
 80175e8:	4618      	mov	r0, r3
 80175ea:	f000 ff3d 	bl	8018468 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80175ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175f0:	f000 f989 	bl	8017906 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80175f4:	f000 fd60 	bl	80180b8 <xTaskResumeAll>
 80175f8:	4603      	mov	r3, r0
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	f47f af67 	bne.w	80174ce <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8017600:	4b18      	ldr	r3, [pc, #96]	; (8017664 <xQueueSemaphoreTake+0x21c>)
 8017602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017606:	601a      	str	r2, [r3, #0]
 8017608:	f3bf 8f4f 	dsb	sy
 801760c:	f3bf 8f6f 	isb	sy
 8017610:	e75d      	b.n	80174ce <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017614:	f000 f977 	bl	8017906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017618:	f000 fd4e 	bl	80180b8 <xTaskResumeAll>
 801761c:	e757      	b.n	80174ce <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801761e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017620:	f000 f971 	bl	8017906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017624:	f000 fd48 	bl	80180b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017628:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801762a:	f000 f9be 	bl	80179aa <prvIsQueueEmpty>
 801762e:	4603      	mov	r3, r0
 8017630:	2b00      	cmp	r3, #0
 8017632:	f43f af4c 	beq.w	80174ce <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8017636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017638:	2b00      	cmp	r3, #0
 801763a:	d00d      	beq.n	8017658 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 801763c:	f001 ff74 	bl	8019528 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017640:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017642:	f000 f8b8 	bl	80177b6 <prvGetDisinheritPriorityAfterTimeout>
 8017646:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8017648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801764a:	689b      	ldr	r3, [r3, #8]
 801764c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801764e:	4618      	mov	r0, r3
 8017650:	f001 fa20 	bl	8018a94 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017654:	f001 ff9a 	bl	801958c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8017658:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801765a:	4618      	mov	r0, r3
 801765c:	3738      	adds	r7, #56	; 0x38
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}
 8017662:	bf00      	nop
 8017664:	e000ed04 	.word	0xe000ed04

08017668 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017668:	b580      	push	{r7, lr}
 801766a:	b08e      	sub	sp, #56	; 0x38
 801766c:	af00      	add	r7, sp, #0
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8017678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801767a:	2b00      	cmp	r3, #0
 801767c:	d10b      	bne.n	8017696 <xQueueReceiveFromISR+0x2e>
 801767e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017682:	b672      	cpsid	i
 8017684:	f383 8811 	msr	BASEPRI, r3
 8017688:	f3bf 8f6f 	isb	sy
 801768c:	f3bf 8f4f 	dsb	sy
 8017690:	b662      	cpsie	i
 8017692:	623b      	str	r3, [r7, #32]
 8017694:	e7fe      	b.n	8017694 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8017696:	68bb      	ldr	r3, [r7, #8]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d103      	bne.n	80176a4 <xQueueReceiveFromISR+0x3c>
 801769c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801769e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176a0:	2b00      	cmp	r3, #0
 80176a2:	d101      	bne.n	80176a8 <xQueueReceiveFromISR+0x40>
 80176a4:	2301      	movs	r3, #1
 80176a6:	e000      	b.n	80176aa <xQueueReceiveFromISR+0x42>
 80176a8:	2300      	movs	r3, #0
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d10b      	bne.n	80176c6 <xQueueReceiveFromISR+0x5e>
 80176ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176b2:	b672      	cpsid	i
 80176b4:	f383 8811 	msr	BASEPRI, r3
 80176b8:	f3bf 8f6f 	isb	sy
 80176bc:	f3bf 8f4f 	dsb	sy
 80176c0:	b662      	cpsie	i
 80176c2:	61fb      	str	r3, [r7, #28]
 80176c4:	e7fe      	b.n	80176c4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80176c6:	f002 f80f 	bl	80196e8 <vPortValidateInterruptPriority>
	__asm volatile
 80176ca:	f3ef 8211 	mrs	r2, BASEPRI
 80176ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176d2:	b672      	cpsid	i
 80176d4:	f383 8811 	msr	BASEPRI, r3
 80176d8:	f3bf 8f6f 	isb	sy
 80176dc:	f3bf 8f4f 	dsb	sy
 80176e0:	b662      	cpsie	i
 80176e2:	61ba      	str	r2, [r7, #24]
 80176e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80176e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80176e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80176ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80176f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d02f      	beq.n	8017756 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80176f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80176fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017700:	68b9      	ldr	r1, [r7, #8]
 8017702:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017704:	f000 f8d9 	bl	80178ba <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801770a:	1e5a      	subs	r2, r3, #1
 801770c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017710:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017718:	d112      	bne.n	8017740 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801771a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801771c:	691b      	ldr	r3, [r3, #16]
 801771e:	2b00      	cmp	r3, #0
 8017720:	d016      	beq.n	8017750 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017724:	3310      	adds	r3, #16
 8017726:	4618      	mov	r0, r3
 8017728:	f000 fef0 	bl	801850c <xTaskRemoveFromEventList>
 801772c:	4603      	mov	r3, r0
 801772e:	2b00      	cmp	r3, #0
 8017730:	d00e      	beq.n	8017750 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	2b00      	cmp	r3, #0
 8017736:	d00b      	beq.n	8017750 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	2201      	movs	r2, #1
 801773c:	601a      	str	r2, [r3, #0]
 801773e:	e007      	b.n	8017750 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017740:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017744:	3301      	adds	r3, #1
 8017746:	b2db      	uxtb	r3, r3
 8017748:	b25a      	sxtb	r2, r3
 801774a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801774c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017750:	2301      	movs	r3, #1
 8017752:	637b      	str	r3, [r7, #52]	; 0x34
 8017754:	e001      	b.n	801775a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8017756:	2300      	movs	r3, #0
 8017758:	637b      	str	r3, [r7, #52]	; 0x34
 801775a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801775c:	613b      	str	r3, [r7, #16]
	__asm volatile
 801775e:	693b      	ldr	r3, [r7, #16]
 8017760:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8017766:	4618      	mov	r0, r3
 8017768:	3738      	adds	r7, #56	; 0x38
 801776a:	46bd      	mov	sp, r7
 801776c:	bd80      	pop	{r7, pc}

0801776e <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801776e:	b580      	push	{r7, lr}
 8017770:	b084      	sub	sp, #16
 8017772:	af00      	add	r7, sp, #0
 8017774:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	2b00      	cmp	r3, #0
 801777e:	d10b      	bne.n	8017798 <vQueueDelete+0x2a>
	__asm volatile
 8017780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017784:	b672      	cpsid	i
 8017786:	f383 8811 	msr	BASEPRI, r3
 801778a:	f3bf 8f6f 	isb	sy
 801778e:	f3bf 8f4f 	dsb	sy
 8017792:	b662      	cpsie	i
 8017794:	60bb      	str	r3, [r7, #8]
 8017796:	e7fe      	b.n	8017796 <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8017798:	68f8      	ldr	r0, [r7, #12]
 801779a:	f000 f95d 	bl	8017a58 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801779e:	68fb      	ldr	r3, [r7, #12]
 80177a0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d102      	bne.n	80177ae <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80177a8:	68f8      	ldr	r0, [r7, #12]
 80177aa:	f002 f8a7 	bl	80198fc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80177ae:	bf00      	nop
 80177b0:	3710      	adds	r7, #16
 80177b2:	46bd      	mov	sp, r7
 80177b4:	bd80      	pop	{r7, pc}

080177b6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80177b6:	b480      	push	{r7}
 80177b8:	b085      	sub	sp, #20
 80177ba:	af00      	add	r7, sp, #0
 80177bc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d006      	beq.n	80177d4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80177c6:	687b      	ldr	r3, [r7, #4]
 80177c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177ca:	681b      	ldr	r3, [r3, #0]
 80177cc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80177d0:	60fb      	str	r3, [r7, #12]
 80177d2:	e001      	b.n	80177d8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80177d4:	2300      	movs	r3, #0
 80177d6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80177d8:	68fb      	ldr	r3, [r7, #12]
	}
 80177da:	4618      	mov	r0, r3
 80177dc:	3714      	adds	r7, #20
 80177de:	46bd      	mov	sp, r7
 80177e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177e4:	4770      	bx	lr

080177e6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80177e6:	b580      	push	{r7, lr}
 80177e8:	b086      	sub	sp, #24
 80177ea:	af00      	add	r7, sp, #0
 80177ec:	60f8      	str	r0, [r7, #12]
 80177ee:	60b9      	str	r1, [r7, #8]
 80177f0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80177f2:	2300      	movs	r3, #0
 80177f4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80177f6:	68fb      	ldr	r3, [r7, #12]
 80177f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80177fa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80177fc:	68fb      	ldr	r3, [r7, #12]
 80177fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017800:	2b00      	cmp	r3, #0
 8017802:	d10d      	bne.n	8017820 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017804:	68fb      	ldr	r3, [r7, #12]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	2b00      	cmp	r3, #0
 801780a:	d14d      	bne.n	80178a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	689b      	ldr	r3, [r3, #8]
 8017810:	4618      	mov	r0, r3
 8017812:	f001 f8cf 	bl	80189b4 <xTaskPriorityDisinherit>
 8017816:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	2200      	movs	r2, #0
 801781c:	609a      	str	r2, [r3, #8]
 801781e:	e043      	b.n	80178a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017820:	687b      	ldr	r3, [r7, #4]
 8017822:	2b00      	cmp	r3, #0
 8017824:	d119      	bne.n	801785a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	6858      	ldr	r0, [r3, #4]
 801782a:	68fb      	ldr	r3, [r7, #12]
 801782c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801782e:	461a      	mov	r2, r3
 8017830:	68b9      	ldr	r1, [r7, #8]
 8017832:	f002 ff1d 	bl	801a670 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8017836:	68fb      	ldr	r3, [r7, #12]
 8017838:	685a      	ldr	r2, [r3, #4]
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801783e:	441a      	add	r2, r3
 8017840:	68fb      	ldr	r3, [r7, #12]
 8017842:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	685a      	ldr	r2, [r3, #4]
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	689b      	ldr	r3, [r3, #8]
 801784c:	429a      	cmp	r2, r3
 801784e:	d32b      	bcc.n	80178a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	681a      	ldr	r2, [r3, #0]
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	605a      	str	r2, [r3, #4]
 8017858:	e026      	b.n	80178a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801785a:	68fb      	ldr	r3, [r7, #12]
 801785c:	68d8      	ldr	r0, [r3, #12]
 801785e:	68fb      	ldr	r3, [r7, #12]
 8017860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017862:	461a      	mov	r2, r3
 8017864:	68b9      	ldr	r1, [r7, #8]
 8017866:	f002 ff03 	bl	801a670 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	68da      	ldr	r2, [r3, #12]
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017872:	425b      	negs	r3, r3
 8017874:	441a      	add	r2, r3
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801787a:	68fb      	ldr	r3, [r7, #12]
 801787c:	68da      	ldr	r2, [r3, #12]
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	681b      	ldr	r3, [r3, #0]
 8017882:	429a      	cmp	r2, r3
 8017884:	d207      	bcs.n	8017896 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	689a      	ldr	r2, [r3, #8]
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801788e:	425b      	negs	r3, r3
 8017890:	441a      	add	r2, r3
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8017896:	687b      	ldr	r3, [r7, #4]
 8017898:	2b02      	cmp	r3, #2
 801789a:	d105      	bne.n	80178a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d002      	beq.n	80178a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80178a2:	693b      	ldr	r3, [r7, #16]
 80178a4:	3b01      	subs	r3, #1
 80178a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80178a8:	693b      	ldr	r3, [r7, #16]
 80178aa:	1c5a      	adds	r2, r3, #1
 80178ac:	68fb      	ldr	r3, [r7, #12]
 80178ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80178b0:	697b      	ldr	r3, [r7, #20]
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3718      	adds	r7, #24
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}

080178ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80178ba:	b580      	push	{r7, lr}
 80178bc:	b082      	sub	sp, #8
 80178be:	af00      	add	r7, sp, #0
 80178c0:	6078      	str	r0, [r7, #4]
 80178c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d018      	beq.n	80178fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	68da      	ldr	r2, [r3, #12]
 80178d0:	687b      	ldr	r3, [r7, #4]
 80178d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178d4:	441a      	add	r2, r3
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	68da      	ldr	r2, [r3, #12]
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	689b      	ldr	r3, [r3, #8]
 80178e2:	429a      	cmp	r2, r3
 80178e4:	d303      	bcc.n	80178ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	681a      	ldr	r2, [r3, #0]
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	68d9      	ldr	r1, [r3, #12]
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178f6:	461a      	mov	r2, r3
 80178f8:	6838      	ldr	r0, [r7, #0]
 80178fa:	f002 feb9 	bl	801a670 <memcpy>
	}
}
 80178fe:	bf00      	nop
 8017900:	3708      	adds	r7, #8
 8017902:	46bd      	mov	sp, r7
 8017904:	bd80      	pop	{r7, pc}

08017906 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8017906:	b580      	push	{r7, lr}
 8017908:	b084      	sub	sp, #16
 801790a:	af00      	add	r7, sp, #0
 801790c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801790e:	f001 fe0b 	bl	8019528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017912:	687b      	ldr	r3, [r7, #4]
 8017914:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017918:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801791a:	e011      	b.n	8017940 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017920:	2b00      	cmp	r3, #0
 8017922:	d012      	beq.n	801794a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	3324      	adds	r3, #36	; 0x24
 8017928:	4618      	mov	r0, r3
 801792a:	f000 fdef 	bl	801850c <xTaskRemoveFromEventList>
 801792e:	4603      	mov	r3, r0
 8017930:	2b00      	cmp	r3, #0
 8017932:	d001      	beq.n	8017938 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017934:	f000 fec8 	bl	80186c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8017938:	7bfb      	ldrb	r3, [r7, #15]
 801793a:	3b01      	subs	r3, #1
 801793c:	b2db      	uxtb	r3, r3
 801793e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017940:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017944:	2b00      	cmp	r3, #0
 8017946:	dce9      	bgt.n	801791c <prvUnlockQueue+0x16>
 8017948:	e000      	b.n	801794c <prvUnlockQueue+0x46>
					break;
 801794a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	22ff      	movs	r2, #255	; 0xff
 8017950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017954:	f001 fe1a 	bl	801958c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8017958:	f001 fde6 	bl	8019528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017962:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017964:	e011      	b.n	801798a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	691b      	ldr	r3, [r3, #16]
 801796a:	2b00      	cmp	r3, #0
 801796c:	d012      	beq.n	8017994 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801796e:	687b      	ldr	r3, [r7, #4]
 8017970:	3310      	adds	r3, #16
 8017972:	4618      	mov	r0, r3
 8017974:	f000 fdca 	bl	801850c <xTaskRemoveFromEventList>
 8017978:	4603      	mov	r3, r0
 801797a:	2b00      	cmp	r3, #0
 801797c:	d001      	beq.n	8017982 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801797e:	f000 fea3 	bl	80186c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017982:	7bbb      	ldrb	r3, [r7, #14]
 8017984:	3b01      	subs	r3, #1
 8017986:	b2db      	uxtb	r3, r3
 8017988:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801798a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801798e:	2b00      	cmp	r3, #0
 8017990:	dce9      	bgt.n	8017966 <prvUnlockQueue+0x60>
 8017992:	e000      	b.n	8017996 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017994:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8017996:	687b      	ldr	r3, [r7, #4]
 8017998:	22ff      	movs	r2, #255	; 0xff
 801799a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801799e:	f001 fdf5 	bl	801958c <vPortExitCritical>
}
 80179a2:	bf00      	nop
 80179a4:	3710      	adds	r7, #16
 80179a6:	46bd      	mov	sp, r7
 80179a8:	bd80      	pop	{r7, pc}

080179aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80179aa:	b580      	push	{r7, lr}
 80179ac:	b084      	sub	sp, #16
 80179ae:	af00      	add	r7, sp, #0
 80179b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80179b2:	f001 fdb9 	bl	8019528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179ba:	2b00      	cmp	r3, #0
 80179bc:	d102      	bne.n	80179c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80179be:	2301      	movs	r3, #1
 80179c0:	60fb      	str	r3, [r7, #12]
 80179c2:	e001      	b.n	80179c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80179c4:	2300      	movs	r3, #0
 80179c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80179c8:	f001 fde0 	bl	801958c <vPortExitCritical>

	return xReturn;
 80179cc:	68fb      	ldr	r3, [r7, #12]
}
 80179ce:	4618      	mov	r0, r3
 80179d0:	3710      	adds	r7, #16
 80179d2:	46bd      	mov	sp, r7
 80179d4:	bd80      	pop	{r7, pc}

080179d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80179d6:	b580      	push	{r7, lr}
 80179d8:	b084      	sub	sp, #16
 80179da:	af00      	add	r7, sp, #0
 80179dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80179de:	f001 fda3 	bl	8019528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d102      	bne.n	80179f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80179ee:	2301      	movs	r3, #1
 80179f0:	60fb      	str	r3, [r7, #12]
 80179f2:	e001      	b.n	80179f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80179f4:	2300      	movs	r3, #0
 80179f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80179f8:	f001 fdc8 	bl	801958c <vPortExitCritical>

	return xReturn;
 80179fc:	68fb      	ldr	r3, [r7, #12]
}
 80179fe:	4618      	mov	r0, r3
 8017a00:	3710      	adds	r7, #16
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}
	...

08017a08 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017a08:	b480      	push	{r7}
 8017a0a:	b085      	sub	sp, #20
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
 8017a10:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a12:	2300      	movs	r3, #0
 8017a14:	60fb      	str	r3, [r7, #12]
 8017a16:	e014      	b.n	8017a42 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017a18:	4a0e      	ldr	r2, [pc, #56]	; (8017a54 <vQueueAddToRegistry+0x4c>)
 8017a1a:	68fb      	ldr	r3, [r7, #12]
 8017a1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d10b      	bne.n	8017a3c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017a24:	490b      	ldr	r1, [pc, #44]	; (8017a54 <vQueueAddToRegistry+0x4c>)
 8017a26:	68fb      	ldr	r3, [r7, #12]
 8017a28:	683a      	ldr	r2, [r7, #0]
 8017a2a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017a2e:	4a09      	ldr	r2, [pc, #36]	; (8017a54 <vQueueAddToRegistry+0x4c>)
 8017a30:	68fb      	ldr	r3, [r7, #12]
 8017a32:	00db      	lsls	r3, r3, #3
 8017a34:	4413      	add	r3, r2
 8017a36:	687a      	ldr	r2, [r7, #4]
 8017a38:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017a3a:	e005      	b.n	8017a48 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	3301      	adds	r3, #1
 8017a40:	60fb      	str	r3, [r7, #12]
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	2b07      	cmp	r3, #7
 8017a46:	d9e7      	bls.n	8017a18 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017a48:	bf00      	nop
 8017a4a:	3714      	adds	r7, #20
 8017a4c:	46bd      	mov	sp, r7
 8017a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a52:	4770      	bx	lr
 8017a54:	2001cbd4 	.word	0x2001cbd4

08017a58 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017a58:	b480      	push	{r7}
 8017a5a:	b085      	sub	sp, #20
 8017a5c:	af00      	add	r7, sp, #0
 8017a5e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a60:	2300      	movs	r3, #0
 8017a62:	60fb      	str	r3, [r7, #12]
 8017a64:	e016      	b.n	8017a94 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017a66:	4a10      	ldr	r2, [pc, #64]	; (8017aa8 <vQueueUnregisterQueue+0x50>)
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	00db      	lsls	r3, r3, #3
 8017a6c:	4413      	add	r3, r2
 8017a6e:	685b      	ldr	r3, [r3, #4]
 8017a70:	687a      	ldr	r2, [r7, #4]
 8017a72:	429a      	cmp	r2, r3
 8017a74:	d10b      	bne.n	8017a8e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017a76:	4a0c      	ldr	r2, [pc, #48]	; (8017aa8 <vQueueUnregisterQueue+0x50>)
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	2100      	movs	r1, #0
 8017a7c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017a80:	4a09      	ldr	r2, [pc, #36]	; (8017aa8 <vQueueUnregisterQueue+0x50>)
 8017a82:	68fb      	ldr	r3, [r7, #12]
 8017a84:	00db      	lsls	r3, r3, #3
 8017a86:	4413      	add	r3, r2
 8017a88:	2200      	movs	r2, #0
 8017a8a:	605a      	str	r2, [r3, #4]
				break;
 8017a8c:	e005      	b.n	8017a9a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a8e:	68fb      	ldr	r3, [r7, #12]
 8017a90:	3301      	adds	r3, #1
 8017a92:	60fb      	str	r3, [r7, #12]
 8017a94:	68fb      	ldr	r3, [r7, #12]
 8017a96:	2b07      	cmp	r3, #7
 8017a98:	d9e5      	bls.n	8017a66 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017a9a:	bf00      	nop
 8017a9c:	3714      	adds	r7, #20
 8017a9e:	46bd      	mov	sp, r7
 8017aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017aa4:	4770      	bx	lr
 8017aa6:	bf00      	nop
 8017aa8:	2001cbd4 	.word	0x2001cbd4

08017aac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017aac:	b580      	push	{r7, lr}
 8017aae:	b086      	sub	sp, #24
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	60f8      	str	r0, [r7, #12]
 8017ab4:	60b9      	str	r1, [r7, #8]
 8017ab6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017ab8:	68fb      	ldr	r3, [r7, #12]
 8017aba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017abc:	f001 fd34 	bl	8019528 <vPortEnterCritical>
 8017ac0:	697b      	ldr	r3, [r7, #20]
 8017ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ac6:	b25b      	sxtb	r3, r3
 8017ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017acc:	d103      	bne.n	8017ad6 <vQueueWaitForMessageRestricted+0x2a>
 8017ace:	697b      	ldr	r3, [r7, #20]
 8017ad0:	2200      	movs	r2, #0
 8017ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017ad6:	697b      	ldr	r3, [r7, #20]
 8017ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017adc:	b25b      	sxtb	r3, r3
 8017ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ae2:	d103      	bne.n	8017aec <vQueueWaitForMessageRestricted+0x40>
 8017ae4:	697b      	ldr	r3, [r7, #20]
 8017ae6:	2200      	movs	r2, #0
 8017ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017aec:	f001 fd4e 	bl	801958c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d106      	bne.n	8017b06 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	3324      	adds	r3, #36	; 0x24
 8017afc:	687a      	ldr	r2, [r7, #4]
 8017afe:	68b9      	ldr	r1, [r7, #8]
 8017b00:	4618      	mov	r0, r3
 8017b02:	f000 fcd7 	bl	80184b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017b06:	6978      	ldr	r0, [r7, #20]
 8017b08:	f7ff fefd 	bl	8017906 <prvUnlockQueue>
	}
 8017b0c:	bf00      	nop
 8017b0e:	3718      	adds	r7, #24
 8017b10:	46bd      	mov	sp, r7
 8017b12:	bd80      	pop	{r7, pc}

08017b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017b14:	b580      	push	{r7, lr}
 8017b16:	b08e      	sub	sp, #56	; 0x38
 8017b18:	af04      	add	r7, sp, #16
 8017b1a:	60f8      	str	r0, [r7, #12]
 8017b1c:	60b9      	str	r1, [r7, #8]
 8017b1e:	607a      	str	r2, [r7, #4]
 8017b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	d10b      	bne.n	8017b40 <xTaskCreateStatic+0x2c>
 8017b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b2c:	b672      	cpsid	i
 8017b2e:	f383 8811 	msr	BASEPRI, r3
 8017b32:	f3bf 8f6f 	isb	sy
 8017b36:	f3bf 8f4f 	dsb	sy
 8017b3a:	b662      	cpsie	i
 8017b3c:	623b      	str	r3, [r7, #32]
 8017b3e:	e7fe      	b.n	8017b3e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8017b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d10b      	bne.n	8017b5e <xTaskCreateStatic+0x4a>
 8017b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b4a:	b672      	cpsid	i
 8017b4c:	f383 8811 	msr	BASEPRI, r3
 8017b50:	f3bf 8f6f 	isb	sy
 8017b54:	f3bf 8f4f 	dsb	sy
 8017b58:	b662      	cpsie	i
 8017b5a:	61fb      	str	r3, [r7, #28]
 8017b5c:	e7fe      	b.n	8017b5c <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017b5e:	235c      	movs	r3, #92	; 0x5c
 8017b60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	2b5c      	cmp	r3, #92	; 0x5c
 8017b66:	d00b      	beq.n	8017b80 <xTaskCreateStatic+0x6c>
 8017b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b6c:	b672      	cpsid	i
 8017b6e:	f383 8811 	msr	BASEPRI, r3
 8017b72:	f3bf 8f6f 	isb	sy
 8017b76:	f3bf 8f4f 	dsb	sy
 8017b7a:	b662      	cpsie	i
 8017b7c:	61bb      	str	r3, [r7, #24]
 8017b7e:	e7fe      	b.n	8017b7e <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017b80:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017b82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d01e      	beq.n	8017bc6 <xTaskCreateStatic+0xb2>
 8017b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d01b      	beq.n	8017bc6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b90:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b94:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b96:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017b9a:	2202      	movs	r2, #2
 8017b9c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017ba0:	2300      	movs	r3, #0
 8017ba2:	9303      	str	r3, [sp, #12]
 8017ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba6:	9302      	str	r3, [sp, #8]
 8017ba8:	f107 0314 	add.w	r3, r7, #20
 8017bac:	9301      	str	r3, [sp, #4]
 8017bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bb0:	9300      	str	r3, [sp, #0]
 8017bb2:	683b      	ldr	r3, [r7, #0]
 8017bb4:	687a      	ldr	r2, [r7, #4]
 8017bb6:	68b9      	ldr	r1, [r7, #8]
 8017bb8:	68f8      	ldr	r0, [r7, #12]
 8017bba:	f000 f850 	bl	8017c5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017bbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bc0:	f000 f8de 	bl	8017d80 <prvAddNewTaskToReadyList>
 8017bc4:	e001      	b.n	8017bca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017bc6:	2300      	movs	r3, #0
 8017bc8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017bca:	697b      	ldr	r3, [r7, #20]
	}
 8017bcc:	4618      	mov	r0, r3
 8017bce:	3728      	adds	r7, #40	; 0x28
 8017bd0:	46bd      	mov	sp, r7
 8017bd2:	bd80      	pop	{r7, pc}

08017bd4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017bd4:	b580      	push	{r7, lr}
 8017bd6:	b08c      	sub	sp, #48	; 0x30
 8017bd8:	af04      	add	r7, sp, #16
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	60b9      	str	r1, [r7, #8]
 8017bde:	603b      	str	r3, [r7, #0]
 8017be0:	4613      	mov	r3, r2
 8017be2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017be4:	88fb      	ldrh	r3, [r7, #6]
 8017be6:	009b      	lsls	r3, r3, #2
 8017be8:	4618      	mov	r0, r3
 8017bea:	f001 fdbf 	bl	801976c <pvPortMalloc>
 8017bee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017bf0:	697b      	ldr	r3, [r7, #20]
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	d00e      	beq.n	8017c14 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017bf6:	205c      	movs	r0, #92	; 0x5c
 8017bf8:	f001 fdb8 	bl	801976c <pvPortMalloc>
 8017bfc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017bfe:	69fb      	ldr	r3, [r7, #28]
 8017c00:	2b00      	cmp	r3, #0
 8017c02:	d003      	beq.n	8017c0c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017c04:	69fb      	ldr	r3, [r7, #28]
 8017c06:	697a      	ldr	r2, [r7, #20]
 8017c08:	631a      	str	r2, [r3, #48]	; 0x30
 8017c0a:	e005      	b.n	8017c18 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017c0c:	6978      	ldr	r0, [r7, #20]
 8017c0e:	f001 fe75 	bl	80198fc <vPortFree>
 8017c12:	e001      	b.n	8017c18 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017c14:	2300      	movs	r3, #0
 8017c16:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017c18:	69fb      	ldr	r3, [r7, #28]
 8017c1a:	2b00      	cmp	r3, #0
 8017c1c:	d017      	beq.n	8017c4e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017c1e:	69fb      	ldr	r3, [r7, #28]
 8017c20:	2200      	movs	r2, #0
 8017c22:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017c26:	88fa      	ldrh	r2, [r7, #6]
 8017c28:	2300      	movs	r3, #0
 8017c2a:	9303      	str	r3, [sp, #12]
 8017c2c:	69fb      	ldr	r3, [r7, #28]
 8017c2e:	9302      	str	r3, [sp, #8]
 8017c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c32:	9301      	str	r3, [sp, #4]
 8017c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c36:	9300      	str	r3, [sp, #0]
 8017c38:	683b      	ldr	r3, [r7, #0]
 8017c3a:	68b9      	ldr	r1, [r7, #8]
 8017c3c:	68f8      	ldr	r0, [r7, #12]
 8017c3e:	f000 f80e 	bl	8017c5e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017c42:	69f8      	ldr	r0, [r7, #28]
 8017c44:	f000 f89c 	bl	8017d80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017c48:	2301      	movs	r3, #1
 8017c4a:	61bb      	str	r3, [r7, #24]
 8017c4c:	e002      	b.n	8017c54 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8017c52:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017c54:	69bb      	ldr	r3, [r7, #24]
	}
 8017c56:	4618      	mov	r0, r3
 8017c58:	3720      	adds	r7, #32
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	bd80      	pop	{r7, pc}

08017c5e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017c5e:	b580      	push	{r7, lr}
 8017c60:	b088      	sub	sp, #32
 8017c62:	af00      	add	r7, sp, #0
 8017c64:	60f8      	str	r0, [r7, #12]
 8017c66:	60b9      	str	r1, [r7, #8]
 8017c68:	607a      	str	r2, [r7, #4]
 8017c6a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c6e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	009b      	lsls	r3, r3, #2
 8017c74:	461a      	mov	r2, r3
 8017c76:	21a5      	movs	r1, #165	; 0xa5
 8017c78:	f002 fd05 	bl	801a686 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017c80:	6879      	ldr	r1, [r7, #4]
 8017c82:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017c86:	440b      	add	r3, r1
 8017c88:	009b      	lsls	r3, r3, #2
 8017c8a:	4413      	add	r3, r2
 8017c8c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017c8e:	69bb      	ldr	r3, [r7, #24]
 8017c90:	f023 0307 	bic.w	r3, r3, #7
 8017c94:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017c96:	69bb      	ldr	r3, [r7, #24]
 8017c98:	f003 0307 	and.w	r3, r3, #7
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d00b      	beq.n	8017cb8 <prvInitialiseNewTask+0x5a>
 8017ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017ca4:	b672      	cpsid	i
 8017ca6:	f383 8811 	msr	BASEPRI, r3
 8017caa:	f3bf 8f6f 	isb	sy
 8017cae:	f3bf 8f4f 	dsb	sy
 8017cb2:	b662      	cpsie	i
 8017cb4:	617b      	str	r3, [r7, #20]
 8017cb6:	e7fe      	b.n	8017cb6 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017cb8:	68bb      	ldr	r3, [r7, #8]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d01f      	beq.n	8017cfe <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cbe:	2300      	movs	r3, #0
 8017cc0:	61fb      	str	r3, [r7, #28]
 8017cc2:	e012      	b.n	8017cea <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017cc4:	68ba      	ldr	r2, [r7, #8]
 8017cc6:	69fb      	ldr	r3, [r7, #28]
 8017cc8:	4413      	add	r3, r2
 8017cca:	7819      	ldrb	r1, [r3, #0]
 8017ccc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cce:	69fb      	ldr	r3, [r7, #28]
 8017cd0:	4413      	add	r3, r2
 8017cd2:	3334      	adds	r3, #52	; 0x34
 8017cd4:	460a      	mov	r2, r1
 8017cd6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017cd8:	68ba      	ldr	r2, [r7, #8]
 8017cda:	69fb      	ldr	r3, [r7, #28]
 8017cdc:	4413      	add	r3, r2
 8017cde:	781b      	ldrb	r3, [r3, #0]
 8017ce0:	2b00      	cmp	r3, #0
 8017ce2:	d006      	beq.n	8017cf2 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ce4:	69fb      	ldr	r3, [r7, #28]
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	61fb      	str	r3, [r7, #28]
 8017cea:	69fb      	ldr	r3, [r7, #28]
 8017cec:	2b0f      	cmp	r3, #15
 8017cee:	d9e9      	bls.n	8017cc4 <prvInitialiseNewTask+0x66>
 8017cf0:	e000      	b.n	8017cf4 <prvInitialiseNewTask+0x96>
			{
				break;
 8017cf2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017cf6:	2200      	movs	r2, #0
 8017cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017cfc:	e003      	b.n	8017d06 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d00:	2200      	movs	r2, #0
 8017d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d08:	2b37      	cmp	r3, #55	; 0x37
 8017d0a:	d901      	bls.n	8017d10 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017d0c:	2337      	movs	r3, #55	; 0x37
 8017d0e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d14:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d18:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d1a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d1e:	2200      	movs	r2, #0
 8017d20:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d24:	3304      	adds	r3, #4
 8017d26:	4618      	mov	r0, r3
 8017d28:	f7fe fd76 	bl	8016818 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d2e:	3318      	adds	r3, #24
 8017d30:	4618      	mov	r0, r3
 8017d32:	f7fe fd71 	bl	8016818 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d3a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d3e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d44:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d4a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4e:	2200      	movs	r2, #0
 8017d50:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d54:	2200      	movs	r2, #0
 8017d56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017d5a:	683a      	ldr	r2, [r7, #0]
 8017d5c:	68f9      	ldr	r1, [r7, #12]
 8017d5e:	69b8      	ldr	r0, [r7, #24]
 8017d60:	f001 fad8 	bl	8019314 <pxPortInitialiseStack>
 8017d64:	4602      	mov	r2, r0
 8017d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d68:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017d6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d6c:	2b00      	cmp	r3, #0
 8017d6e:	d002      	beq.n	8017d76 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017d76:	bf00      	nop
 8017d78:	3720      	adds	r7, #32
 8017d7a:	46bd      	mov	sp, r7
 8017d7c:	bd80      	pop	{r7, pc}
	...

08017d80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017d80:	b580      	push	{r7, lr}
 8017d82:	b082      	sub	sp, #8
 8017d84:	af00      	add	r7, sp, #0
 8017d86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017d88:	f001 fbce 	bl	8019528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017d8c:	4b2d      	ldr	r3, [pc, #180]	; (8017e44 <prvAddNewTaskToReadyList+0xc4>)
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	3301      	adds	r3, #1
 8017d92:	4a2c      	ldr	r2, [pc, #176]	; (8017e44 <prvAddNewTaskToReadyList+0xc4>)
 8017d94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017d96:	4b2c      	ldr	r3, [pc, #176]	; (8017e48 <prvAddNewTaskToReadyList+0xc8>)
 8017d98:	681b      	ldr	r3, [r3, #0]
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d109      	bne.n	8017db2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017d9e:	4a2a      	ldr	r2, [pc, #168]	; (8017e48 <prvAddNewTaskToReadyList+0xc8>)
 8017da0:	687b      	ldr	r3, [r7, #4]
 8017da2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017da4:	4b27      	ldr	r3, [pc, #156]	; (8017e44 <prvAddNewTaskToReadyList+0xc4>)
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	2b01      	cmp	r3, #1
 8017daa:	d110      	bne.n	8017dce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017dac:	f000 fcb0 	bl	8018710 <prvInitialiseTaskLists>
 8017db0:	e00d      	b.n	8017dce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017db2:	4b26      	ldr	r3, [pc, #152]	; (8017e4c <prvAddNewTaskToReadyList+0xcc>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	d109      	bne.n	8017dce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017dba:	4b23      	ldr	r3, [pc, #140]	; (8017e48 <prvAddNewTaskToReadyList+0xc8>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dc4:	429a      	cmp	r2, r3
 8017dc6:	d802      	bhi.n	8017dce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017dc8:	4a1f      	ldr	r2, [pc, #124]	; (8017e48 <prvAddNewTaskToReadyList+0xc8>)
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017dce:	4b20      	ldr	r3, [pc, #128]	; (8017e50 <prvAddNewTaskToReadyList+0xd0>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	3301      	adds	r3, #1
 8017dd4:	4a1e      	ldr	r2, [pc, #120]	; (8017e50 <prvAddNewTaskToReadyList+0xd0>)
 8017dd6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017dd8:	4b1d      	ldr	r3, [pc, #116]	; (8017e50 <prvAddNewTaskToReadyList+0xd0>)
 8017dda:	681a      	ldr	r2, [r3, #0]
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017de0:	687b      	ldr	r3, [r7, #4]
 8017de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017de4:	4b1b      	ldr	r3, [pc, #108]	; (8017e54 <prvAddNewTaskToReadyList+0xd4>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	429a      	cmp	r2, r3
 8017dea:	d903      	bls.n	8017df4 <prvAddNewTaskToReadyList+0x74>
 8017dec:	687b      	ldr	r3, [r7, #4]
 8017dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017df0:	4a18      	ldr	r2, [pc, #96]	; (8017e54 <prvAddNewTaskToReadyList+0xd4>)
 8017df2:	6013      	str	r3, [r2, #0]
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017df8:	4613      	mov	r3, r2
 8017dfa:	009b      	lsls	r3, r3, #2
 8017dfc:	4413      	add	r3, r2
 8017dfe:	009b      	lsls	r3, r3, #2
 8017e00:	4a15      	ldr	r2, [pc, #84]	; (8017e58 <prvAddNewTaskToReadyList+0xd8>)
 8017e02:	441a      	add	r2, r3
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	3304      	adds	r3, #4
 8017e08:	4619      	mov	r1, r3
 8017e0a:	4610      	mov	r0, r2
 8017e0c:	f7fe fd11 	bl	8016832 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017e10:	f001 fbbc 	bl	801958c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017e14:	4b0d      	ldr	r3, [pc, #52]	; (8017e4c <prvAddNewTaskToReadyList+0xcc>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d00e      	beq.n	8017e3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017e1c:	4b0a      	ldr	r3, [pc, #40]	; (8017e48 <prvAddNewTaskToReadyList+0xc8>)
 8017e1e:	681b      	ldr	r3, [r3, #0]
 8017e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e26:	429a      	cmp	r2, r3
 8017e28:	d207      	bcs.n	8017e3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017e2a:	4b0c      	ldr	r3, [pc, #48]	; (8017e5c <prvAddNewTaskToReadyList+0xdc>)
 8017e2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e30:	601a      	str	r2, [r3, #0]
 8017e32:	f3bf 8f4f 	dsb	sy
 8017e36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017e3a:	bf00      	nop
 8017e3c:	3708      	adds	r7, #8
 8017e3e:	46bd      	mov	sp, r7
 8017e40:	bd80      	pop	{r7, pc}
 8017e42:	bf00      	nop
 8017e44:	20000f88 	.word	0x20000f88
 8017e48:	20000ab4 	.word	0x20000ab4
 8017e4c:	20000f94 	.word	0x20000f94
 8017e50:	20000fa4 	.word	0x20000fa4
 8017e54:	20000f90 	.word	0x20000f90
 8017e58:	20000ab8 	.word	0x20000ab8
 8017e5c:	e000ed04 	.word	0xe000ed04

08017e60 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8017e60:	b580      	push	{r7, lr}
 8017e62:	b08a      	sub	sp, #40	; 0x28
 8017e64:	af00      	add	r7, sp, #0
 8017e66:	6078      	str	r0, [r7, #4]
 8017e68:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8017e6a:	2300      	movs	r3, #0
 8017e6c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d10b      	bne.n	8017e8c <vTaskDelayUntil+0x2c>
 8017e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e78:	b672      	cpsid	i
 8017e7a:	f383 8811 	msr	BASEPRI, r3
 8017e7e:	f3bf 8f6f 	isb	sy
 8017e82:	f3bf 8f4f 	dsb	sy
 8017e86:	b662      	cpsie	i
 8017e88:	617b      	str	r3, [r7, #20]
 8017e8a:	e7fe      	b.n	8017e8a <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8017e8c:	683b      	ldr	r3, [r7, #0]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d10b      	bne.n	8017eaa <vTaskDelayUntil+0x4a>
 8017e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e96:	b672      	cpsid	i
 8017e98:	f383 8811 	msr	BASEPRI, r3
 8017e9c:	f3bf 8f6f 	isb	sy
 8017ea0:	f3bf 8f4f 	dsb	sy
 8017ea4:	b662      	cpsie	i
 8017ea6:	613b      	str	r3, [r7, #16]
 8017ea8:	e7fe      	b.n	8017ea8 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8017eaa:	4b2a      	ldr	r3, [pc, #168]	; (8017f54 <vTaskDelayUntil+0xf4>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d00b      	beq.n	8017eca <vTaskDelayUntil+0x6a>
 8017eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eb6:	b672      	cpsid	i
 8017eb8:	f383 8811 	msr	BASEPRI, r3
 8017ebc:	f3bf 8f6f 	isb	sy
 8017ec0:	f3bf 8f4f 	dsb	sy
 8017ec4:	b662      	cpsie	i
 8017ec6:	60fb      	str	r3, [r7, #12]
 8017ec8:	e7fe      	b.n	8017ec8 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8017eca:	f000 f8e7 	bl	801809c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8017ece:	4b22      	ldr	r3, [pc, #136]	; (8017f58 <vTaskDelayUntil+0xf8>)
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	683a      	ldr	r2, [r7, #0]
 8017eda:	4413      	add	r3, r2
 8017edc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	681b      	ldr	r3, [r3, #0]
 8017ee2:	6a3a      	ldr	r2, [r7, #32]
 8017ee4:	429a      	cmp	r2, r3
 8017ee6:	d20b      	bcs.n	8017f00 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	69fa      	ldr	r2, [r7, #28]
 8017eee:	429a      	cmp	r2, r3
 8017ef0:	d211      	bcs.n	8017f16 <vTaskDelayUntil+0xb6>
 8017ef2:	69fa      	ldr	r2, [r7, #28]
 8017ef4:	6a3b      	ldr	r3, [r7, #32]
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d90d      	bls.n	8017f16 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8017efa:	2301      	movs	r3, #1
 8017efc:	627b      	str	r3, [r7, #36]	; 0x24
 8017efe:	e00a      	b.n	8017f16 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	681b      	ldr	r3, [r3, #0]
 8017f04:	69fa      	ldr	r2, [r7, #28]
 8017f06:	429a      	cmp	r2, r3
 8017f08:	d303      	bcc.n	8017f12 <vTaskDelayUntil+0xb2>
 8017f0a:	69fa      	ldr	r2, [r7, #28]
 8017f0c:	6a3b      	ldr	r3, [r7, #32]
 8017f0e:	429a      	cmp	r2, r3
 8017f10:	d901      	bls.n	8017f16 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8017f12:	2301      	movs	r3, #1
 8017f14:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	69fa      	ldr	r2, [r7, #28]
 8017f1a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8017f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d006      	beq.n	8017f30 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8017f22:	69fa      	ldr	r2, [r7, #28]
 8017f24:	6a3b      	ldr	r3, [r7, #32]
 8017f26:	1ad3      	subs	r3, r2, r3
 8017f28:	2100      	movs	r1, #0
 8017f2a:	4618      	mov	r0, r3
 8017f2c:	f000 fe4a 	bl	8018bc4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8017f30:	f000 f8c2 	bl	80180b8 <xTaskResumeAll>
 8017f34:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017f36:	69bb      	ldr	r3, [r7, #24]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d107      	bne.n	8017f4c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8017f3c:	4b07      	ldr	r3, [pc, #28]	; (8017f5c <vTaskDelayUntil+0xfc>)
 8017f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f42:	601a      	str	r2, [r3, #0]
 8017f44:	f3bf 8f4f 	dsb	sy
 8017f48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017f4c:	bf00      	nop
 8017f4e:	3728      	adds	r7, #40	; 0x28
 8017f50:	46bd      	mov	sp, r7
 8017f52:	bd80      	pop	{r7, pc}
 8017f54:	20000fb0 	.word	0x20000fb0
 8017f58:	20000f8c 	.word	0x20000f8c
 8017f5c:	e000ed04 	.word	0xe000ed04

08017f60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b084      	sub	sp, #16
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017f68:	2300      	movs	r3, #0
 8017f6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d018      	beq.n	8017fa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017f72:	4b14      	ldr	r3, [pc, #80]	; (8017fc4 <vTaskDelay+0x64>)
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	2b00      	cmp	r3, #0
 8017f78:	d00b      	beq.n	8017f92 <vTaskDelay+0x32>
 8017f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f7e:	b672      	cpsid	i
 8017f80:	f383 8811 	msr	BASEPRI, r3
 8017f84:	f3bf 8f6f 	isb	sy
 8017f88:	f3bf 8f4f 	dsb	sy
 8017f8c:	b662      	cpsie	i
 8017f8e:	60bb      	str	r3, [r7, #8]
 8017f90:	e7fe      	b.n	8017f90 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8017f92:	f000 f883 	bl	801809c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017f96:	2100      	movs	r1, #0
 8017f98:	6878      	ldr	r0, [r7, #4]
 8017f9a:	f000 fe13 	bl	8018bc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017f9e:	f000 f88b 	bl	80180b8 <xTaskResumeAll>
 8017fa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017fa4:	68fb      	ldr	r3, [r7, #12]
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	d107      	bne.n	8017fba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8017faa:	4b07      	ldr	r3, [pc, #28]	; (8017fc8 <vTaskDelay+0x68>)
 8017fac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fb0:	601a      	str	r2, [r3, #0]
 8017fb2:	f3bf 8f4f 	dsb	sy
 8017fb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017fba:	bf00      	nop
 8017fbc:	3710      	adds	r7, #16
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	20000fb0 	.word	0x20000fb0
 8017fc8:	e000ed04 	.word	0xe000ed04

08017fcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017fcc:	b580      	push	{r7, lr}
 8017fce:	b08a      	sub	sp, #40	; 0x28
 8017fd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017fd2:	2300      	movs	r3, #0
 8017fd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017fda:	463a      	mov	r2, r7
 8017fdc:	1d39      	adds	r1, r7, #4
 8017fde:	f107 0308 	add.w	r3, r7, #8
 8017fe2:	4618      	mov	r0, r3
 8017fe4:	f7fe fbc4 	bl	8016770 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017fe8:	6839      	ldr	r1, [r7, #0]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	68ba      	ldr	r2, [r7, #8]
 8017fee:	9202      	str	r2, [sp, #8]
 8017ff0:	9301      	str	r3, [sp, #4]
 8017ff2:	2300      	movs	r3, #0
 8017ff4:	9300      	str	r3, [sp, #0]
 8017ff6:	2300      	movs	r3, #0
 8017ff8:	460a      	mov	r2, r1
 8017ffa:	4922      	ldr	r1, [pc, #136]	; (8018084 <vTaskStartScheduler+0xb8>)
 8017ffc:	4822      	ldr	r0, [pc, #136]	; (8018088 <vTaskStartScheduler+0xbc>)
 8017ffe:	f7ff fd89 	bl	8017b14 <xTaskCreateStatic>
 8018002:	4602      	mov	r2, r0
 8018004:	4b21      	ldr	r3, [pc, #132]	; (801808c <vTaskStartScheduler+0xc0>)
 8018006:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8018008:	4b20      	ldr	r3, [pc, #128]	; (801808c <vTaskStartScheduler+0xc0>)
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	2b00      	cmp	r3, #0
 801800e:	d002      	beq.n	8018016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018010:	2301      	movs	r3, #1
 8018012:	617b      	str	r3, [r7, #20]
 8018014:	e001      	b.n	801801a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8018016:	2300      	movs	r3, #0
 8018018:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801801a:	697b      	ldr	r3, [r7, #20]
 801801c:	2b01      	cmp	r3, #1
 801801e:	d102      	bne.n	8018026 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018020:	f000 fe24 	bl	8018c6c <xTimerCreateTimerTask>
 8018024:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8018026:	697b      	ldr	r3, [r7, #20]
 8018028:	2b01      	cmp	r3, #1
 801802a:	d117      	bne.n	801805c <vTaskStartScheduler+0x90>
 801802c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018030:	b672      	cpsid	i
 8018032:	f383 8811 	msr	BASEPRI, r3
 8018036:	f3bf 8f6f 	isb	sy
 801803a:	f3bf 8f4f 	dsb	sy
 801803e:	b662      	cpsie	i
 8018040:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018042:	4b13      	ldr	r3, [pc, #76]	; (8018090 <vTaskStartScheduler+0xc4>)
 8018044:	f04f 32ff 	mov.w	r2, #4294967295
 8018048:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801804a:	4b12      	ldr	r3, [pc, #72]	; (8018094 <vTaskStartScheduler+0xc8>)
 801804c:	2201      	movs	r2, #1
 801804e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018050:	4b11      	ldr	r3, [pc, #68]	; (8018098 <vTaskStartScheduler+0xcc>)
 8018052:	2200      	movs	r2, #0
 8018054:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8018056:	f001 f9eb 	bl	8019430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801805a:	e00f      	b.n	801807c <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801805c:	697b      	ldr	r3, [r7, #20]
 801805e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018062:	d10b      	bne.n	801807c <vTaskStartScheduler+0xb0>
 8018064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018068:	b672      	cpsid	i
 801806a:	f383 8811 	msr	BASEPRI, r3
 801806e:	f3bf 8f6f 	isb	sy
 8018072:	f3bf 8f4f 	dsb	sy
 8018076:	b662      	cpsie	i
 8018078:	60fb      	str	r3, [r7, #12]
 801807a:	e7fe      	b.n	801807a <vTaskStartScheduler+0xae>
}
 801807c:	bf00      	nop
 801807e:	3718      	adds	r7, #24
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}
 8018084:	0801d670 	.word	0x0801d670
 8018088:	080186e1 	.word	0x080186e1
 801808c:	20000fac 	.word	0x20000fac
 8018090:	20000fa8 	.word	0x20000fa8
 8018094:	20000f94 	.word	0x20000f94
 8018098:	20000f8c 	.word	0x20000f8c

0801809c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801809c:	b480      	push	{r7}
 801809e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80180a0:	4b04      	ldr	r3, [pc, #16]	; (80180b4 <vTaskSuspendAll+0x18>)
 80180a2:	681b      	ldr	r3, [r3, #0]
 80180a4:	3301      	adds	r3, #1
 80180a6:	4a03      	ldr	r2, [pc, #12]	; (80180b4 <vTaskSuspendAll+0x18>)
 80180a8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80180aa:	bf00      	nop
 80180ac:	46bd      	mov	sp, r7
 80180ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180b2:	4770      	bx	lr
 80180b4:	20000fb0 	.word	0x20000fb0

080180b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80180b8:	b580      	push	{r7, lr}
 80180ba:	b084      	sub	sp, #16
 80180bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80180be:	2300      	movs	r3, #0
 80180c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80180c2:	2300      	movs	r3, #0
 80180c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80180c6:	4b42      	ldr	r3, [pc, #264]	; (80181d0 <xTaskResumeAll+0x118>)
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d10b      	bne.n	80180e6 <xTaskResumeAll+0x2e>
 80180ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180d2:	b672      	cpsid	i
 80180d4:	f383 8811 	msr	BASEPRI, r3
 80180d8:	f3bf 8f6f 	isb	sy
 80180dc:	f3bf 8f4f 	dsb	sy
 80180e0:	b662      	cpsie	i
 80180e2:	603b      	str	r3, [r7, #0]
 80180e4:	e7fe      	b.n	80180e4 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80180e6:	f001 fa1f 	bl	8019528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80180ea:	4b39      	ldr	r3, [pc, #228]	; (80181d0 <xTaskResumeAll+0x118>)
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	3b01      	subs	r3, #1
 80180f0:	4a37      	ldr	r2, [pc, #220]	; (80181d0 <xTaskResumeAll+0x118>)
 80180f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80180f4:	4b36      	ldr	r3, [pc, #216]	; (80181d0 <xTaskResumeAll+0x118>)
 80180f6:	681b      	ldr	r3, [r3, #0]
 80180f8:	2b00      	cmp	r3, #0
 80180fa:	d162      	bne.n	80181c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80180fc:	4b35      	ldr	r3, [pc, #212]	; (80181d4 <xTaskResumeAll+0x11c>)
 80180fe:	681b      	ldr	r3, [r3, #0]
 8018100:	2b00      	cmp	r3, #0
 8018102:	d05e      	beq.n	80181c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018104:	e02f      	b.n	8018166 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018106:	4b34      	ldr	r3, [pc, #208]	; (80181d8 <xTaskResumeAll+0x120>)
 8018108:	68db      	ldr	r3, [r3, #12]
 801810a:	68db      	ldr	r3, [r3, #12]
 801810c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	3318      	adds	r3, #24
 8018112:	4618      	mov	r0, r3
 8018114:	f7fe fbea 	bl	80168ec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018118:	68fb      	ldr	r3, [r7, #12]
 801811a:	3304      	adds	r3, #4
 801811c:	4618      	mov	r0, r3
 801811e:	f7fe fbe5 	bl	80168ec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018126:	4b2d      	ldr	r3, [pc, #180]	; (80181dc <xTaskResumeAll+0x124>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	429a      	cmp	r2, r3
 801812c:	d903      	bls.n	8018136 <xTaskResumeAll+0x7e>
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018132:	4a2a      	ldr	r2, [pc, #168]	; (80181dc <xTaskResumeAll+0x124>)
 8018134:	6013      	str	r3, [r2, #0]
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801813a:	4613      	mov	r3, r2
 801813c:	009b      	lsls	r3, r3, #2
 801813e:	4413      	add	r3, r2
 8018140:	009b      	lsls	r3, r3, #2
 8018142:	4a27      	ldr	r2, [pc, #156]	; (80181e0 <xTaskResumeAll+0x128>)
 8018144:	441a      	add	r2, r3
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	3304      	adds	r3, #4
 801814a:	4619      	mov	r1, r3
 801814c:	4610      	mov	r0, r2
 801814e:	f7fe fb70 	bl	8016832 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018152:	68fb      	ldr	r3, [r7, #12]
 8018154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018156:	4b23      	ldr	r3, [pc, #140]	; (80181e4 <xTaskResumeAll+0x12c>)
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801815c:	429a      	cmp	r2, r3
 801815e:	d302      	bcc.n	8018166 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8018160:	4b21      	ldr	r3, [pc, #132]	; (80181e8 <xTaskResumeAll+0x130>)
 8018162:	2201      	movs	r2, #1
 8018164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018166:	4b1c      	ldr	r3, [pc, #112]	; (80181d8 <xTaskResumeAll+0x120>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d1cb      	bne.n	8018106 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	2b00      	cmp	r3, #0
 8018172:	d001      	beq.n	8018178 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018174:	f000 fb68 	bl	8018848 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8018178:	4b1c      	ldr	r3, [pc, #112]	; (80181ec <xTaskResumeAll+0x134>)
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	2b00      	cmp	r3, #0
 8018182:	d010      	beq.n	80181a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018184:	f000 f858 	bl	8018238 <xTaskIncrementTick>
 8018188:	4603      	mov	r3, r0
 801818a:	2b00      	cmp	r3, #0
 801818c:	d002      	beq.n	8018194 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801818e:	4b16      	ldr	r3, [pc, #88]	; (80181e8 <xTaskResumeAll+0x130>)
 8018190:	2201      	movs	r2, #1
 8018192:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	3b01      	subs	r3, #1
 8018198:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	2b00      	cmp	r3, #0
 801819e:	d1f1      	bne.n	8018184 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80181a0:	4b12      	ldr	r3, [pc, #72]	; (80181ec <xTaskResumeAll+0x134>)
 80181a2:	2200      	movs	r2, #0
 80181a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80181a6:	4b10      	ldr	r3, [pc, #64]	; (80181e8 <xTaskResumeAll+0x130>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d009      	beq.n	80181c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80181ae:	2301      	movs	r3, #1
 80181b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80181b2:	4b0f      	ldr	r3, [pc, #60]	; (80181f0 <xTaskResumeAll+0x138>)
 80181b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181b8:	601a      	str	r2, [r3, #0]
 80181ba:	f3bf 8f4f 	dsb	sy
 80181be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80181c2:	f001 f9e3 	bl	801958c <vPortExitCritical>

	return xAlreadyYielded;
 80181c6:	68bb      	ldr	r3, [r7, #8]
}
 80181c8:	4618      	mov	r0, r3
 80181ca:	3710      	adds	r7, #16
 80181cc:	46bd      	mov	sp, r7
 80181ce:	bd80      	pop	{r7, pc}
 80181d0:	20000fb0 	.word	0x20000fb0
 80181d4:	20000f88 	.word	0x20000f88
 80181d8:	20000f48 	.word	0x20000f48
 80181dc:	20000f90 	.word	0x20000f90
 80181e0:	20000ab8 	.word	0x20000ab8
 80181e4:	20000ab4 	.word	0x20000ab4
 80181e8:	20000f9c 	.word	0x20000f9c
 80181ec:	20000f98 	.word	0x20000f98
 80181f0:	e000ed04 	.word	0xe000ed04

080181f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80181f4:	b480      	push	{r7}
 80181f6:	b083      	sub	sp, #12
 80181f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80181fa:	4b05      	ldr	r3, [pc, #20]	; (8018210 <xTaskGetTickCount+0x1c>)
 80181fc:	681b      	ldr	r3, [r3, #0]
 80181fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018200:	687b      	ldr	r3, [r7, #4]
}
 8018202:	4618      	mov	r0, r3
 8018204:	370c      	adds	r7, #12
 8018206:	46bd      	mov	sp, r7
 8018208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801820c:	4770      	bx	lr
 801820e:	bf00      	nop
 8018210:	20000f8c 	.word	0x20000f8c

08018214 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018214:	b580      	push	{r7, lr}
 8018216:	b082      	sub	sp, #8
 8018218:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801821a:	f001 fa65 	bl	80196e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801821e:	2300      	movs	r3, #0
 8018220:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018222:	4b04      	ldr	r3, [pc, #16]	; (8018234 <xTaskGetTickCountFromISR+0x20>)
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8018228:	683b      	ldr	r3, [r7, #0]
}
 801822a:	4618      	mov	r0, r3
 801822c:	3708      	adds	r7, #8
 801822e:	46bd      	mov	sp, r7
 8018230:	bd80      	pop	{r7, pc}
 8018232:	bf00      	nop
 8018234:	20000f8c 	.word	0x20000f8c

08018238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018238:	b580      	push	{r7, lr}
 801823a:	b086      	sub	sp, #24
 801823c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801823e:	2300      	movs	r3, #0
 8018240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018242:	4b4f      	ldr	r3, [pc, #316]	; (8018380 <xTaskIncrementTick+0x148>)
 8018244:	681b      	ldr	r3, [r3, #0]
 8018246:	2b00      	cmp	r3, #0
 8018248:	f040 808a 	bne.w	8018360 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801824c:	4b4d      	ldr	r3, [pc, #308]	; (8018384 <xTaskIncrementTick+0x14c>)
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	3301      	adds	r3, #1
 8018252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018254:	4a4b      	ldr	r2, [pc, #300]	; (8018384 <xTaskIncrementTick+0x14c>)
 8018256:	693b      	ldr	r3, [r7, #16]
 8018258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801825a:	693b      	ldr	r3, [r7, #16]
 801825c:	2b00      	cmp	r3, #0
 801825e:	d121      	bne.n	80182a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8018260:	4b49      	ldr	r3, [pc, #292]	; (8018388 <xTaskIncrementTick+0x150>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	681b      	ldr	r3, [r3, #0]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d00b      	beq.n	8018282 <xTaskIncrementTick+0x4a>
 801826a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801826e:	b672      	cpsid	i
 8018270:	f383 8811 	msr	BASEPRI, r3
 8018274:	f3bf 8f6f 	isb	sy
 8018278:	f3bf 8f4f 	dsb	sy
 801827c:	b662      	cpsie	i
 801827e:	603b      	str	r3, [r7, #0]
 8018280:	e7fe      	b.n	8018280 <xTaskIncrementTick+0x48>
 8018282:	4b41      	ldr	r3, [pc, #260]	; (8018388 <xTaskIncrementTick+0x150>)
 8018284:	681b      	ldr	r3, [r3, #0]
 8018286:	60fb      	str	r3, [r7, #12]
 8018288:	4b40      	ldr	r3, [pc, #256]	; (801838c <xTaskIncrementTick+0x154>)
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	4a3e      	ldr	r2, [pc, #248]	; (8018388 <xTaskIncrementTick+0x150>)
 801828e:	6013      	str	r3, [r2, #0]
 8018290:	4a3e      	ldr	r2, [pc, #248]	; (801838c <xTaskIncrementTick+0x154>)
 8018292:	68fb      	ldr	r3, [r7, #12]
 8018294:	6013      	str	r3, [r2, #0]
 8018296:	4b3e      	ldr	r3, [pc, #248]	; (8018390 <xTaskIncrementTick+0x158>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	3301      	adds	r3, #1
 801829c:	4a3c      	ldr	r2, [pc, #240]	; (8018390 <xTaskIncrementTick+0x158>)
 801829e:	6013      	str	r3, [r2, #0]
 80182a0:	f000 fad2 	bl	8018848 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80182a4:	4b3b      	ldr	r3, [pc, #236]	; (8018394 <xTaskIncrementTick+0x15c>)
 80182a6:	681b      	ldr	r3, [r3, #0]
 80182a8:	693a      	ldr	r2, [r7, #16]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d349      	bcc.n	8018342 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80182ae:	4b36      	ldr	r3, [pc, #216]	; (8018388 <xTaskIncrementTick+0x150>)
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	2b00      	cmp	r3, #0
 80182b6:	d104      	bne.n	80182c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182b8:	4b36      	ldr	r3, [pc, #216]	; (8018394 <xTaskIncrementTick+0x15c>)
 80182ba:	f04f 32ff 	mov.w	r2, #4294967295
 80182be:	601a      	str	r2, [r3, #0]
					break;
 80182c0:	e03f      	b.n	8018342 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182c2:	4b31      	ldr	r3, [pc, #196]	; (8018388 <xTaskIncrementTick+0x150>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	68db      	ldr	r3, [r3, #12]
 80182c8:	68db      	ldr	r3, [r3, #12]
 80182ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80182cc:	68bb      	ldr	r3, [r7, #8]
 80182ce:	685b      	ldr	r3, [r3, #4]
 80182d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80182d2:	693a      	ldr	r2, [r7, #16]
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	429a      	cmp	r2, r3
 80182d8:	d203      	bcs.n	80182e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80182da:	4a2e      	ldr	r2, [pc, #184]	; (8018394 <xTaskIncrementTick+0x15c>)
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80182e0:	e02f      	b.n	8018342 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80182e2:	68bb      	ldr	r3, [r7, #8]
 80182e4:	3304      	adds	r3, #4
 80182e6:	4618      	mov	r0, r3
 80182e8:	f7fe fb00 	bl	80168ec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80182ec:	68bb      	ldr	r3, [r7, #8]
 80182ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80182f0:	2b00      	cmp	r3, #0
 80182f2:	d004      	beq.n	80182fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80182f4:	68bb      	ldr	r3, [r7, #8]
 80182f6:	3318      	adds	r3, #24
 80182f8:	4618      	mov	r0, r3
 80182fa:	f7fe faf7 	bl	80168ec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80182fe:	68bb      	ldr	r3, [r7, #8]
 8018300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018302:	4b25      	ldr	r3, [pc, #148]	; (8018398 <xTaskIncrementTick+0x160>)
 8018304:	681b      	ldr	r3, [r3, #0]
 8018306:	429a      	cmp	r2, r3
 8018308:	d903      	bls.n	8018312 <xTaskIncrementTick+0xda>
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801830e:	4a22      	ldr	r2, [pc, #136]	; (8018398 <xTaskIncrementTick+0x160>)
 8018310:	6013      	str	r3, [r2, #0]
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018316:	4613      	mov	r3, r2
 8018318:	009b      	lsls	r3, r3, #2
 801831a:	4413      	add	r3, r2
 801831c:	009b      	lsls	r3, r3, #2
 801831e:	4a1f      	ldr	r2, [pc, #124]	; (801839c <xTaskIncrementTick+0x164>)
 8018320:	441a      	add	r2, r3
 8018322:	68bb      	ldr	r3, [r7, #8]
 8018324:	3304      	adds	r3, #4
 8018326:	4619      	mov	r1, r3
 8018328:	4610      	mov	r0, r2
 801832a:	f7fe fa82 	bl	8016832 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801832e:	68bb      	ldr	r3, [r7, #8]
 8018330:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018332:	4b1b      	ldr	r3, [pc, #108]	; (80183a0 <xTaskIncrementTick+0x168>)
 8018334:	681b      	ldr	r3, [r3, #0]
 8018336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018338:	429a      	cmp	r2, r3
 801833a:	d3b8      	bcc.n	80182ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801833c:	2301      	movs	r3, #1
 801833e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018340:	e7b5      	b.n	80182ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018342:	4b17      	ldr	r3, [pc, #92]	; (80183a0 <xTaskIncrementTick+0x168>)
 8018344:	681b      	ldr	r3, [r3, #0]
 8018346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018348:	4914      	ldr	r1, [pc, #80]	; (801839c <xTaskIncrementTick+0x164>)
 801834a:	4613      	mov	r3, r2
 801834c:	009b      	lsls	r3, r3, #2
 801834e:	4413      	add	r3, r2
 8018350:	009b      	lsls	r3, r3, #2
 8018352:	440b      	add	r3, r1
 8018354:	681b      	ldr	r3, [r3, #0]
 8018356:	2b01      	cmp	r3, #1
 8018358:	d907      	bls.n	801836a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801835a:	2301      	movs	r3, #1
 801835c:	617b      	str	r3, [r7, #20]
 801835e:	e004      	b.n	801836a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018360:	4b10      	ldr	r3, [pc, #64]	; (80183a4 <xTaskIncrementTick+0x16c>)
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	3301      	adds	r3, #1
 8018366:	4a0f      	ldr	r2, [pc, #60]	; (80183a4 <xTaskIncrementTick+0x16c>)
 8018368:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801836a:	4b0f      	ldr	r3, [pc, #60]	; (80183a8 <xTaskIncrementTick+0x170>)
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	2b00      	cmp	r3, #0
 8018370:	d001      	beq.n	8018376 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8018372:	2301      	movs	r3, #1
 8018374:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8018376:	697b      	ldr	r3, [r7, #20]
}
 8018378:	4618      	mov	r0, r3
 801837a:	3718      	adds	r7, #24
 801837c:	46bd      	mov	sp, r7
 801837e:	bd80      	pop	{r7, pc}
 8018380:	20000fb0 	.word	0x20000fb0
 8018384:	20000f8c 	.word	0x20000f8c
 8018388:	20000f40 	.word	0x20000f40
 801838c:	20000f44 	.word	0x20000f44
 8018390:	20000fa0 	.word	0x20000fa0
 8018394:	20000fa8 	.word	0x20000fa8
 8018398:	20000f90 	.word	0x20000f90
 801839c:	20000ab8 	.word	0x20000ab8
 80183a0:	20000ab4 	.word	0x20000ab4
 80183a4:	20000f98 	.word	0x20000f98
 80183a8:	20000f9c 	.word	0x20000f9c

080183ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80183ac:	b480      	push	{r7}
 80183ae:	b085      	sub	sp, #20
 80183b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80183b2:	4b28      	ldr	r3, [pc, #160]	; (8018454 <vTaskSwitchContext+0xa8>)
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d003      	beq.n	80183c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80183ba:	4b27      	ldr	r3, [pc, #156]	; (8018458 <vTaskSwitchContext+0xac>)
 80183bc:	2201      	movs	r2, #1
 80183be:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80183c0:	e042      	b.n	8018448 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80183c2:	4b25      	ldr	r3, [pc, #148]	; (8018458 <vTaskSwitchContext+0xac>)
 80183c4:	2200      	movs	r2, #0
 80183c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183c8:	4b24      	ldr	r3, [pc, #144]	; (801845c <vTaskSwitchContext+0xb0>)
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	60fb      	str	r3, [r7, #12]
 80183ce:	e011      	b.n	80183f4 <vTaskSwitchContext+0x48>
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d10b      	bne.n	80183ee <vTaskSwitchContext+0x42>
 80183d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183da:	b672      	cpsid	i
 80183dc:	f383 8811 	msr	BASEPRI, r3
 80183e0:	f3bf 8f6f 	isb	sy
 80183e4:	f3bf 8f4f 	dsb	sy
 80183e8:	b662      	cpsie	i
 80183ea:	607b      	str	r3, [r7, #4]
 80183ec:	e7fe      	b.n	80183ec <vTaskSwitchContext+0x40>
 80183ee:	68fb      	ldr	r3, [r7, #12]
 80183f0:	3b01      	subs	r3, #1
 80183f2:	60fb      	str	r3, [r7, #12]
 80183f4:	491a      	ldr	r1, [pc, #104]	; (8018460 <vTaskSwitchContext+0xb4>)
 80183f6:	68fa      	ldr	r2, [r7, #12]
 80183f8:	4613      	mov	r3, r2
 80183fa:	009b      	lsls	r3, r3, #2
 80183fc:	4413      	add	r3, r2
 80183fe:	009b      	lsls	r3, r3, #2
 8018400:	440b      	add	r3, r1
 8018402:	681b      	ldr	r3, [r3, #0]
 8018404:	2b00      	cmp	r3, #0
 8018406:	d0e3      	beq.n	80183d0 <vTaskSwitchContext+0x24>
 8018408:	68fa      	ldr	r2, [r7, #12]
 801840a:	4613      	mov	r3, r2
 801840c:	009b      	lsls	r3, r3, #2
 801840e:	4413      	add	r3, r2
 8018410:	009b      	lsls	r3, r3, #2
 8018412:	4a13      	ldr	r2, [pc, #76]	; (8018460 <vTaskSwitchContext+0xb4>)
 8018414:	4413      	add	r3, r2
 8018416:	60bb      	str	r3, [r7, #8]
 8018418:	68bb      	ldr	r3, [r7, #8]
 801841a:	685b      	ldr	r3, [r3, #4]
 801841c:	685a      	ldr	r2, [r3, #4]
 801841e:	68bb      	ldr	r3, [r7, #8]
 8018420:	605a      	str	r2, [r3, #4]
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	685a      	ldr	r2, [r3, #4]
 8018426:	68bb      	ldr	r3, [r7, #8]
 8018428:	3308      	adds	r3, #8
 801842a:	429a      	cmp	r2, r3
 801842c:	d104      	bne.n	8018438 <vTaskSwitchContext+0x8c>
 801842e:	68bb      	ldr	r3, [r7, #8]
 8018430:	685b      	ldr	r3, [r3, #4]
 8018432:	685a      	ldr	r2, [r3, #4]
 8018434:	68bb      	ldr	r3, [r7, #8]
 8018436:	605a      	str	r2, [r3, #4]
 8018438:	68bb      	ldr	r3, [r7, #8]
 801843a:	685b      	ldr	r3, [r3, #4]
 801843c:	68db      	ldr	r3, [r3, #12]
 801843e:	4a09      	ldr	r2, [pc, #36]	; (8018464 <vTaskSwitchContext+0xb8>)
 8018440:	6013      	str	r3, [r2, #0]
 8018442:	4a06      	ldr	r2, [pc, #24]	; (801845c <vTaskSwitchContext+0xb0>)
 8018444:	68fb      	ldr	r3, [r7, #12]
 8018446:	6013      	str	r3, [r2, #0]
}
 8018448:	bf00      	nop
 801844a:	3714      	adds	r7, #20
 801844c:	46bd      	mov	sp, r7
 801844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018452:	4770      	bx	lr
 8018454:	20000fb0 	.word	0x20000fb0
 8018458:	20000f9c 	.word	0x20000f9c
 801845c:	20000f90 	.word	0x20000f90
 8018460:	20000ab8 	.word	0x20000ab8
 8018464:	20000ab4 	.word	0x20000ab4

08018468 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8018468:	b580      	push	{r7, lr}
 801846a:	b084      	sub	sp, #16
 801846c:	af00      	add	r7, sp, #0
 801846e:	6078      	str	r0, [r7, #4]
 8018470:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018472:	687b      	ldr	r3, [r7, #4]
 8018474:	2b00      	cmp	r3, #0
 8018476:	d10b      	bne.n	8018490 <vTaskPlaceOnEventList+0x28>
 8018478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801847c:	b672      	cpsid	i
 801847e:	f383 8811 	msr	BASEPRI, r3
 8018482:	f3bf 8f6f 	isb	sy
 8018486:	f3bf 8f4f 	dsb	sy
 801848a:	b662      	cpsie	i
 801848c:	60fb      	str	r3, [r7, #12]
 801848e:	e7fe      	b.n	801848e <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018490:	4b07      	ldr	r3, [pc, #28]	; (80184b0 <vTaskPlaceOnEventList+0x48>)
 8018492:	681b      	ldr	r3, [r3, #0]
 8018494:	3318      	adds	r3, #24
 8018496:	4619      	mov	r1, r3
 8018498:	6878      	ldr	r0, [r7, #4]
 801849a:	f7fe f9ee 	bl	801687a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801849e:	2101      	movs	r1, #1
 80184a0:	6838      	ldr	r0, [r7, #0]
 80184a2:	f000 fb8f 	bl	8018bc4 <prvAddCurrentTaskToDelayedList>
}
 80184a6:	bf00      	nop
 80184a8:	3710      	adds	r7, #16
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}
 80184ae:	bf00      	nop
 80184b0:	20000ab4 	.word	0x20000ab4

080184b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b086      	sub	sp, #24
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80184c0:	68fb      	ldr	r3, [r7, #12]
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	d10b      	bne.n	80184de <vTaskPlaceOnEventListRestricted+0x2a>
 80184c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184ca:	b672      	cpsid	i
 80184cc:	f383 8811 	msr	BASEPRI, r3
 80184d0:	f3bf 8f6f 	isb	sy
 80184d4:	f3bf 8f4f 	dsb	sy
 80184d8:	b662      	cpsie	i
 80184da:	617b      	str	r3, [r7, #20]
 80184dc:	e7fe      	b.n	80184dc <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184de:	4b0a      	ldr	r3, [pc, #40]	; (8018508 <vTaskPlaceOnEventListRestricted+0x54>)
 80184e0:	681b      	ldr	r3, [r3, #0]
 80184e2:	3318      	adds	r3, #24
 80184e4:	4619      	mov	r1, r3
 80184e6:	68f8      	ldr	r0, [r7, #12]
 80184e8:	f7fe f9a3 	bl	8016832 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d002      	beq.n	80184f8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80184f2:	f04f 33ff 	mov.w	r3, #4294967295
 80184f6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80184f8:	6879      	ldr	r1, [r7, #4]
 80184fa:	68b8      	ldr	r0, [r7, #8]
 80184fc:	f000 fb62 	bl	8018bc4 <prvAddCurrentTaskToDelayedList>
	}
 8018500:	bf00      	nop
 8018502:	3718      	adds	r7, #24
 8018504:	46bd      	mov	sp, r7
 8018506:	bd80      	pop	{r7, pc}
 8018508:	20000ab4 	.word	0x20000ab4

0801850c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801850c:	b580      	push	{r7, lr}
 801850e:	b086      	sub	sp, #24
 8018510:	af00      	add	r7, sp, #0
 8018512:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018514:	687b      	ldr	r3, [r7, #4]
 8018516:	68db      	ldr	r3, [r3, #12]
 8018518:	68db      	ldr	r3, [r3, #12]
 801851a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801851c:	693b      	ldr	r3, [r7, #16]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d10b      	bne.n	801853a <xTaskRemoveFromEventList+0x2e>
 8018522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018526:	b672      	cpsid	i
 8018528:	f383 8811 	msr	BASEPRI, r3
 801852c:	f3bf 8f6f 	isb	sy
 8018530:	f3bf 8f4f 	dsb	sy
 8018534:	b662      	cpsie	i
 8018536:	60fb      	str	r3, [r7, #12]
 8018538:	e7fe      	b.n	8018538 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801853a:	693b      	ldr	r3, [r7, #16]
 801853c:	3318      	adds	r3, #24
 801853e:	4618      	mov	r0, r3
 8018540:	f7fe f9d4 	bl	80168ec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018544:	4b1d      	ldr	r3, [pc, #116]	; (80185bc <xTaskRemoveFromEventList+0xb0>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d11d      	bne.n	8018588 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801854c:	693b      	ldr	r3, [r7, #16]
 801854e:	3304      	adds	r3, #4
 8018550:	4618      	mov	r0, r3
 8018552:	f7fe f9cb 	bl	80168ec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8018556:	693b      	ldr	r3, [r7, #16]
 8018558:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801855a:	4b19      	ldr	r3, [pc, #100]	; (80185c0 <xTaskRemoveFromEventList+0xb4>)
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	429a      	cmp	r2, r3
 8018560:	d903      	bls.n	801856a <xTaskRemoveFromEventList+0x5e>
 8018562:	693b      	ldr	r3, [r7, #16]
 8018564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018566:	4a16      	ldr	r2, [pc, #88]	; (80185c0 <xTaskRemoveFromEventList+0xb4>)
 8018568:	6013      	str	r3, [r2, #0]
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801856e:	4613      	mov	r3, r2
 8018570:	009b      	lsls	r3, r3, #2
 8018572:	4413      	add	r3, r2
 8018574:	009b      	lsls	r3, r3, #2
 8018576:	4a13      	ldr	r2, [pc, #76]	; (80185c4 <xTaskRemoveFromEventList+0xb8>)
 8018578:	441a      	add	r2, r3
 801857a:	693b      	ldr	r3, [r7, #16]
 801857c:	3304      	adds	r3, #4
 801857e:	4619      	mov	r1, r3
 8018580:	4610      	mov	r0, r2
 8018582:	f7fe f956 	bl	8016832 <vListInsertEnd>
 8018586:	e005      	b.n	8018594 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8018588:	693b      	ldr	r3, [r7, #16]
 801858a:	3318      	adds	r3, #24
 801858c:	4619      	mov	r1, r3
 801858e:	480e      	ldr	r0, [pc, #56]	; (80185c8 <xTaskRemoveFromEventList+0xbc>)
 8018590:	f7fe f94f 	bl	8016832 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018594:	693b      	ldr	r3, [r7, #16]
 8018596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018598:	4b0c      	ldr	r3, [pc, #48]	; (80185cc <xTaskRemoveFromEventList+0xc0>)
 801859a:	681b      	ldr	r3, [r3, #0]
 801859c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801859e:	429a      	cmp	r2, r3
 80185a0:	d905      	bls.n	80185ae <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80185a2:	2301      	movs	r3, #1
 80185a4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80185a6:	4b0a      	ldr	r3, [pc, #40]	; (80185d0 <xTaskRemoveFromEventList+0xc4>)
 80185a8:	2201      	movs	r2, #1
 80185aa:	601a      	str	r2, [r3, #0]
 80185ac:	e001      	b.n	80185b2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80185ae:	2300      	movs	r3, #0
 80185b0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80185b2:	697b      	ldr	r3, [r7, #20]
}
 80185b4:	4618      	mov	r0, r3
 80185b6:	3718      	adds	r7, #24
 80185b8:	46bd      	mov	sp, r7
 80185ba:	bd80      	pop	{r7, pc}
 80185bc:	20000fb0 	.word	0x20000fb0
 80185c0:	20000f90 	.word	0x20000f90
 80185c4:	20000ab8 	.word	0x20000ab8
 80185c8:	20000f48 	.word	0x20000f48
 80185cc:	20000ab4 	.word	0x20000ab4
 80185d0:	20000f9c 	.word	0x20000f9c

080185d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80185d4:	b480      	push	{r7}
 80185d6:	b083      	sub	sp, #12
 80185d8:	af00      	add	r7, sp, #0
 80185da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80185dc:	4b06      	ldr	r3, [pc, #24]	; (80185f8 <vTaskInternalSetTimeOutState+0x24>)
 80185de:	681a      	ldr	r2, [r3, #0]
 80185e0:	687b      	ldr	r3, [r7, #4]
 80185e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80185e4:	4b05      	ldr	r3, [pc, #20]	; (80185fc <vTaskInternalSetTimeOutState+0x28>)
 80185e6:	681a      	ldr	r2, [r3, #0]
 80185e8:	687b      	ldr	r3, [r7, #4]
 80185ea:	605a      	str	r2, [r3, #4]
}
 80185ec:	bf00      	nop
 80185ee:	370c      	adds	r7, #12
 80185f0:	46bd      	mov	sp, r7
 80185f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185f6:	4770      	bx	lr
 80185f8:	20000fa0 	.word	0x20000fa0
 80185fc:	20000f8c 	.word	0x20000f8c

08018600 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018600:	b580      	push	{r7, lr}
 8018602:	b088      	sub	sp, #32
 8018604:	af00      	add	r7, sp, #0
 8018606:	6078      	str	r0, [r7, #4]
 8018608:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d10b      	bne.n	8018628 <xTaskCheckForTimeOut+0x28>
 8018610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018614:	b672      	cpsid	i
 8018616:	f383 8811 	msr	BASEPRI, r3
 801861a:	f3bf 8f6f 	isb	sy
 801861e:	f3bf 8f4f 	dsb	sy
 8018622:	b662      	cpsie	i
 8018624:	613b      	str	r3, [r7, #16]
 8018626:	e7fe      	b.n	8018626 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8018628:	683b      	ldr	r3, [r7, #0]
 801862a:	2b00      	cmp	r3, #0
 801862c:	d10b      	bne.n	8018646 <xTaskCheckForTimeOut+0x46>
 801862e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018632:	b672      	cpsid	i
 8018634:	f383 8811 	msr	BASEPRI, r3
 8018638:	f3bf 8f6f 	isb	sy
 801863c:	f3bf 8f4f 	dsb	sy
 8018640:	b662      	cpsie	i
 8018642:	60fb      	str	r3, [r7, #12]
 8018644:	e7fe      	b.n	8018644 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8018646:	f000 ff6f 	bl	8019528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801864a:	4b1d      	ldr	r3, [pc, #116]	; (80186c0 <xTaskCheckForTimeOut+0xc0>)
 801864c:	681b      	ldr	r3, [r3, #0]
 801864e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	685b      	ldr	r3, [r3, #4]
 8018654:	69ba      	ldr	r2, [r7, #24]
 8018656:	1ad3      	subs	r3, r2, r3
 8018658:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018662:	d102      	bne.n	801866a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018664:	2300      	movs	r3, #0
 8018666:	61fb      	str	r3, [r7, #28]
 8018668:	e023      	b.n	80186b2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801866a:	687b      	ldr	r3, [r7, #4]
 801866c:	681a      	ldr	r2, [r3, #0]
 801866e:	4b15      	ldr	r3, [pc, #84]	; (80186c4 <xTaskCheckForTimeOut+0xc4>)
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	429a      	cmp	r2, r3
 8018674:	d007      	beq.n	8018686 <xTaskCheckForTimeOut+0x86>
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	685b      	ldr	r3, [r3, #4]
 801867a:	69ba      	ldr	r2, [r7, #24]
 801867c:	429a      	cmp	r2, r3
 801867e:	d302      	bcc.n	8018686 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018680:	2301      	movs	r3, #1
 8018682:	61fb      	str	r3, [r7, #28]
 8018684:	e015      	b.n	80186b2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8018686:	683b      	ldr	r3, [r7, #0]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	697a      	ldr	r2, [r7, #20]
 801868c:	429a      	cmp	r2, r3
 801868e:	d20b      	bcs.n	80186a8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018690:	683b      	ldr	r3, [r7, #0]
 8018692:	681a      	ldr	r2, [r3, #0]
 8018694:	697b      	ldr	r3, [r7, #20]
 8018696:	1ad2      	subs	r2, r2, r3
 8018698:	683b      	ldr	r3, [r7, #0]
 801869a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801869c:	6878      	ldr	r0, [r7, #4]
 801869e:	f7ff ff99 	bl	80185d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80186a2:	2300      	movs	r3, #0
 80186a4:	61fb      	str	r3, [r7, #28]
 80186a6:	e004      	b.n	80186b2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80186a8:	683b      	ldr	r3, [r7, #0]
 80186aa:	2200      	movs	r2, #0
 80186ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80186ae:	2301      	movs	r3, #1
 80186b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80186b2:	f000 ff6b 	bl	801958c <vPortExitCritical>

	return xReturn;
 80186b6:	69fb      	ldr	r3, [r7, #28]
}
 80186b8:	4618      	mov	r0, r3
 80186ba:	3720      	adds	r7, #32
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}
 80186c0:	20000f8c 	.word	0x20000f8c
 80186c4:	20000fa0 	.word	0x20000fa0

080186c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80186c8:	b480      	push	{r7}
 80186ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80186cc:	4b03      	ldr	r3, [pc, #12]	; (80186dc <vTaskMissedYield+0x14>)
 80186ce:	2201      	movs	r2, #1
 80186d0:	601a      	str	r2, [r3, #0]
}
 80186d2:	bf00      	nop
 80186d4:	46bd      	mov	sp, r7
 80186d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186da:	4770      	bx	lr
 80186dc:	20000f9c 	.word	0x20000f9c

080186e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b082      	sub	sp, #8
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80186e8:	f000 f852 	bl	8018790 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80186ec:	4b06      	ldr	r3, [pc, #24]	; (8018708 <prvIdleTask+0x28>)
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	2b01      	cmp	r3, #1
 80186f2:	d9f9      	bls.n	80186e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80186f4:	4b05      	ldr	r3, [pc, #20]	; (801870c <prvIdleTask+0x2c>)
 80186f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80186fa:	601a      	str	r2, [r3, #0]
 80186fc:	f3bf 8f4f 	dsb	sy
 8018700:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018704:	e7f0      	b.n	80186e8 <prvIdleTask+0x8>
 8018706:	bf00      	nop
 8018708:	20000ab8 	.word	0x20000ab8
 801870c:	e000ed04 	.word	0xe000ed04

08018710 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018710:	b580      	push	{r7, lr}
 8018712:	b082      	sub	sp, #8
 8018714:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018716:	2300      	movs	r3, #0
 8018718:	607b      	str	r3, [r7, #4]
 801871a:	e00c      	b.n	8018736 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801871c:	687a      	ldr	r2, [r7, #4]
 801871e:	4613      	mov	r3, r2
 8018720:	009b      	lsls	r3, r3, #2
 8018722:	4413      	add	r3, r2
 8018724:	009b      	lsls	r3, r3, #2
 8018726:	4a12      	ldr	r2, [pc, #72]	; (8018770 <prvInitialiseTaskLists+0x60>)
 8018728:	4413      	add	r3, r2
 801872a:	4618      	mov	r0, r3
 801872c:	f7fe f854 	bl	80167d8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	3301      	adds	r3, #1
 8018734:	607b      	str	r3, [r7, #4]
 8018736:	687b      	ldr	r3, [r7, #4]
 8018738:	2b37      	cmp	r3, #55	; 0x37
 801873a:	d9ef      	bls.n	801871c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801873c:	480d      	ldr	r0, [pc, #52]	; (8018774 <prvInitialiseTaskLists+0x64>)
 801873e:	f7fe f84b 	bl	80167d8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018742:	480d      	ldr	r0, [pc, #52]	; (8018778 <prvInitialiseTaskLists+0x68>)
 8018744:	f7fe f848 	bl	80167d8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018748:	480c      	ldr	r0, [pc, #48]	; (801877c <prvInitialiseTaskLists+0x6c>)
 801874a:	f7fe f845 	bl	80167d8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801874e:	480c      	ldr	r0, [pc, #48]	; (8018780 <prvInitialiseTaskLists+0x70>)
 8018750:	f7fe f842 	bl	80167d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018754:	480b      	ldr	r0, [pc, #44]	; (8018784 <prvInitialiseTaskLists+0x74>)
 8018756:	f7fe f83f 	bl	80167d8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801875a:	4b0b      	ldr	r3, [pc, #44]	; (8018788 <prvInitialiseTaskLists+0x78>)
 801875c:	4a05      	ldr	r2, [pc, #20]	; (8018774 <prvInitialiseTaskLists+0x64>)
 801875e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018760:	4b0a      	ldr	r3, [pc, #40]	; (801878c <prvInitialiseTaskLists+0x7c>)
 8018762:	4a05      	ldr	r2, [pc, #20]	; (8018778 <prvInitialiseTaskLists+0x68>)
 8018764:	601a      	str	r2, [r3, #0]
}
 8018766:	bf00      	nop
 8018768:	3708      	adds	r7, #8
 801876a:	46bd      	mov	sp, r7
 801876c:	bd80      	pop	{r7, pc}
 801876e:	bf00      	nop
 8018770:	20000ab8 	.word	0x20000ab8
 8018774:	20000f18 	.word	0x20000f18
 8018778:	20000f2c 	.word	0x20000f2c
 801877c:	20000f48 	.word	0x20000f48
 8018780:	20000f5c 	.word	0x20000f5c
 8018784:	20000f74 	.word	0x20000f74
 8018788:	20000f40 	.word	0x20000f40
 801878c:	20000f44 	.word	0x20000f44

08018790 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018790:	b580      	push	{r7, lr}
 8018792:	b082      	sub	sp, #8
 8018794:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018796:	e019      	b.n	80187cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018798:	f000 fec6 	bl	8019528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801879c:	4b0f      	ldr	r3, [pc, #60]	; (80187dc <prvCheckTasksWaitingTermination+0x4c>)
 801879e:	68db      	ldr	r3, [r3, #12]
 80187a0:	68db      	ldr	r3, [r3, #12]
 80187a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	3304      	adds	r3, #4
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7fe f89f 	bl	80168ec <uxListRemove>
				--uxCurrentNumberOfTasks;
 80187ae:	4b0c      	ldr	r3, [pc, #48]	; (80187e0 <prvCheckTasksWaitingTermination+0x50>)
 80187b0:	681b      	ldr	r3, [r3, #0]
 80187b2:	3b01      	subs	r3, #1
 80187b4:	4a0a      	ldr	r2, [pc, #40]	; (80187e0 <prvCheckTasksWaitingTermination+0x50>)
 80187b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80187b8:	4b0a      	ldr	r3, [pc, #40]	; (80187e4 <prvCheckTasksWaitingTermination+0x54>)
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	3b01      	subs	r3, #1
 80187be:	4a09      	ldr	r2, [pc, #36]	; (80187e4 <prvCheckTasksWaitingTermination+0x54>)
 80187c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80187c2:	f000 fee3 	bl	801958c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80187c6:	6878      	ldr	r0, [r7, #4]
 80187c8:	f000 f80e 	bl	80187e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187cc:	4b05      	ldr	r3, [pc, #20]	; (80187e4 <prvCheckTasksWaitingTermination+0x54>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d1e1      	bne.n	8018798 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80187d4:	bf00      	nop
 80187d6:	3708      	adds	r7, #8
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}
 80187dc:	20000f5c 	.word	0x20000f5c
 80187e0:	20000f88 	.word	0x20000f88
 80187e4:	20000f70 	.word	0x20000f70

080187e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80187e8:	b580      	push	{r7, lr}
 80187ea:	b084      	sub	sp, #16
 80187ec:	af00      	add	r7, sp, #0
 80187ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80187f6:	2b00      	cmp	r3, #0
 80187f8:	d108      	bne.n	801880c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80187fa:	687b      	ldr	r3, [r7, #4]
 80187fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80187fe:	4618      	mov	r0, r3
 8018800:	f001 f87c 	bl	80198fc <vPortFree>
				vPortFree( pxTCB );
 8018804:	6878      	ldr	r0, [r7, #4]
 8018806:	f001 f879 	bl	80198fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801880a:	e019      	b.n	8018840 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018812:	2b01      	cmp	r3, #1
 8018814:	d103      	bne.n	801881e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	f001 f870 	bl	80198fc <vPortFree>
	}
 801881c:	e010      	b.n	8018840 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018824:	2b02      	cmp	r3, #2
 8018826:	d00b      	beq.n	8018840 <prvDeleteTCB+0x58>
 8018828:	f04f 0350 	mov.w	r3, #80	; 0x50
 801882c:	b672      	cpsid	i
 801882e:	f383 8811 	msr	BASEPRI, r3
 8018832:	f3bf 8f6f 	isb	sy
 8018836:	f3bf 8f4f 	dsb	sy
 801883a:	b662      	cpsie	i
 801883c:	60fb      	str	r3, [r7, #12]
 801883e:	e7fe      	b.n	801883e <prvDeleteTCB+0x56>
	}
 8018840:	bf00      	nop
 8018842:	3710      	adds	r7, #16
 8018844:	46bd      	mov	sp, r7
 8018846:	bd80      	pop	{r7, pc}

08018848 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018848:	b480      	push	{r7}
 801884a:	b083      	sub	sp, #12
 801884c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801884e:	4b0c      	ldr	r3, [pc, #48]	; (8018880 <prvResetNextTaskUnblockTime+0x38>)
 8018850:	681b      	ldr	r3, [r3, #0]
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d104      	bne.n	8018862 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018858:	4b0a      	ldr	r3, [pc, #40]	; (8018884 <prvResetNextTaskUnblockTime+0x3c>)
 801885a:	f04f 32ff 	mov.w	r2, #4294967295
 801885e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018860:	e008      	b.n	8018874 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018862:	4b07      	ldr	r3, [pc, #28]	; (8018880 <prvResetNextTaskUnblockTime+0x38>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	68db      	ldr	r3, [r3, #12]
 8018868:	68db      	ldr	r3, [r3, #12]
 801886a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	685b      	ldr	r3, [r3, #4]
 8018870:	4a04      	ldr	r2, [pc, #16]	; (8018884 <prvResetNextTaskUnblockTime+0x3c>)
 8018872:	6013      	str	r3, [r2, #0]
}
 8018874:	bf00      	nop
 8018876:	370c      	adds	r7, #12
 8018878:	46bd      	mov	sp, r7
 801887a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801887e:	4770      	bx	lr
 8018880:	20000f40 	.word	0x20000f40
 8018884:	20000fa8 	.word	0x20000fa8

08018888 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8018888:	b480      	push	{r7}
 801888a:	b083      	sub	sp, #12
 801888c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801888e:	4b05      	ldr	r3, [pc, #20]	; (80188a4 <xTaskGetCurrentTaskHandle+0x1c>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018894:	687b      	ldr	r3, [r7, #4]
	}
 8018896:	4618      	mov	r0, r3
 8018898:	370c      	adds	r7, #12
 801889a:	46bd      	mov	sp, r7
 801889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188a0:	4770      	bx	lr
 80188a2:	bf00      	nop
 80188a4:	20000ab4 	.word	0x20000ab4

080188a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80188a8:	b480      	push	{r7}
 80188aa:	b083      	sub	sp, #12
 80188ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80188ae:	4b0b      	ldr	r3, [pc, #44]	; (80188dc <xTaskGetSchedulerState+0x34>)
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d102      	bne.n	80188bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80188b6:	2301      	movs	r3, #1
 80188b8:	607b      	str	r3, [r7, #4]
 80188ba:	e008      	b.n	80188ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80188bc:	4b08      	ldr	r3, [pc, #32]	; (80188e0 <xTaskGetSchedulerState+0x38>)
 80188be:	681b      	ldr	r3, [r3, #0]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d102      	bne.n	80188ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80188c4:	2302      	movs	r3, #2
 80188c6:	607b      	str	r3, [r7, #4]
 80188c8:	e001      	b.n	80188ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80188ca:	2300      	movs	r3, #0
 80188cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80188ce:	687b      	ldr	r3, [r7, #4]
	}
 80188d0:	4618      	mov	r0, r3
 80188d2:	370c      	adds	r7, #12
 80188d4:	46bd      	mov	sp, r7
 80188d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188da:	4770      	bx	lr
 80188dc:	20000f94 	.word	0x20000f94
 80188e0:	20000fb0 	.word	0x20000fb0

080188e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80188e4:	b580      	push	{r7, lr}
 80188e6:	b084      	sub	sp, #16
 80188e8:	af00      	add	r7, sp, #0
 80188ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80188f0:	2300      	movs	r3, #0
 80188f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80188f4:	687b      	ldr	r3, [r7, #4]
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	d051      	beq.n	801899e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80188fa:	68bb      	ldr	r3, [r7, #8]
 80188fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188fe:	4b2a      	ldr	r3, [pc, #168]	; (80189a8 <xTaskPriorityInherit+0xc4>)
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018904:	429a      	cmp	r2, r3
 8018906:	d241      	bcs.n	801898c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018908:	68bb      	ldr	r3, [r7, #8]
 801890a:	699b      	ldr	r3, [r3, #24]
 801890c:	2b00      	cmp	r3, #0
 801890e:	db06      	blt.n	801891e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018910:	4b25      	ldr	r3, [pc, #148]	; (80189a8 <xTaskPriorityInherit+0xc4>)
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018916:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801891a:	68bb      	ldr	r3, [r7, #8]
 801891c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801891e:	68bb      	ldr	r3, [r7, #8]
 8018920:	6959      	ldr	r1, [r3, #20]
 8018922:	68bb      	ldr	r3, [r7, #8]
 8018924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018926:	4613      	mov	r3, r2
 8018928:	009b      	lsls	r3, r3, #2
 801892a:	4413      	add	r3, r2
 801892c:	009b      	lsls	r3, r3, #2
 801892e:	4a1f      	ldr	r2, [pc, #124]	; (80189ac <xTaskPriorityInherit+0xc8>)
 8018930:	4413      	add	r3, r2
 8018932:	4299      	cmp	r1, r3
 8018934:	d122      	bne.n	801897c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	3304      	adds	r3, #4
 801893a:	4618      	mov	r0, r3
 801893c:	f7fd ffd6 	bl	80168ec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018940:	4b19      	ldr	r3, [pc, #100]	; (80189a8 <xTaskPriorityInherit+0xc4>)
 8018942:	681b      	ldr	r3, [r3, #0]
 8018944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018946:	68bb      	ldr	r3, [r7, #8]
 8018948:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801894e:	4b18      	ldr	r3, [pc, #96]	; (80189b0 <xTaskPriorityInherit+0xcc>)
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	429a      	cmp	r2, r3
 8018954:	d903      	bls.n	801895e <xTaskPriorityInherit+0x7a>
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801895a:	4a15      	ldr	r2, [pc, #84]	; (80189b0 <xTaskPriorityInherit+0xcc>)
 801895c:	6013      	str	r3, [r2, #0]
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018962:	4613      	mov	r3, r2
 8018964:	009b      	lsls	r3, r3, #2
 8018966:	4413      	add	r3, r2
 8018968:	009b      	lsls	r3, r3, #2
 801896a:	4a10      	ldr	r2, [pc, #64]	; (80189ac <xTaskPriorityInherit+0xc8>)
 801896c:	441a      	add	r2, r3
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	3304      	adds	r3, #4
 8018972:	4619      	mov	r1, r3
 8018974:	4610      	mov	r0, r2
 8018976:	f7fd ff5c 	bl	8016832 <vListInsertEnd>
 801897a:	e004      	b.n	8018986 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801897c:	4b0a      	ldr	r3, [pc, #40]	; (80189a8 <xTaskPriorityInherit+0xc4>)
 801897e:	681b      	ldr	r3, [r3, #0]
 8018980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8018986:	2301      	movs	r3, #1
 8018988:	60fb      	str	r3, [r7, #12]
 801898a:	e008      	b.n	801899e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801898c:	68bb      	ldr	r3, [r7, #8]
 801898e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018990:	4b05      	ldr	r3, [pc, #20]	; (80189a8 <xTaskPriorityInherit+0xc4>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018996:	429a      	cmp	r2, r3
 8018998:	d201      	bcs.n	801899e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801899a:	2301      	movs	r3, #1
 801899c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801899e:	68fb      	ldr	r3, [r7, #12]
	}
 80189a0:	4618      	mov	r0, r3
 80189a2:	3710      	adds	r7, #16
 80189a4:	46bd      	mov	sp, r7
 80189a6:	bd80      	pop	{r7, pc}
 80189a8:	20000ab4 	.word	0x20000ab4
 80189ac:	20000ab8 	.word	0x20000ab8
 80189b0:	20000f90 	.word	0x20000f90

080189b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80189b4:	b580      	push	{r7, lr}
 80189b6:	b086      	sub	sp, #24
 80189b8:	af00      	add	r7, sp, #0
 80189ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80189c0:	2300      	movs	r3, #0
 80189c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80189c4:	687b      	ldr	r3, [r7, #4]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d058      	beq.n	8018a7c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80189ca:	4b2f      	ldr	r3, [pc, #188]	; (8018a88 <xTaskPriorityDisinherit+0xd4>)
 80189cc:	681b      	ldr	r3, [r3, #0]
 80189ce:	693a      	ldr	r2, [r7, #16]
 80189d0:	429a      	cmp	r2, r3
 80189d2:	d00b      	beq.n	80189ec <xTaskPriorityDisinherit+0x38>
 80189d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189d8:	b672      	cpsid	i
 80189da:	f383 8811 	msr	BASEPRI, r3
 80189de:	f3bf 8f6f 	isb	sy
 80189e2:	f3bf 8f4f 	dsb	sy
 80189e6:	b662      	cpsie	i
 80189e8:	60fb      	str	r3, [r7, #12]
 80189ea:	e7fe      	b.n	80189ea <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80189ec:	693b      	ldr	r3, [r7, #16]
 80189ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189f0:	2b00      	cmp	r3, #0
 80189f2:	d10b      	bne.n	8018a0c <xTaskPriorityDisinherit+0x58>
 80189f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189f8:	b672      	cpsid	i
 80189fa:	f383 8811 	msr	BASEPRI, r3
 80189fe:	f3bf 8f6f 	isb	sy
 8018a02:	f3bf 8f4f 	dsb	sy
 8018a06:	b662      	cpsie	i
 8018a08:	60bb      	str	r3, [r7, #8]
 8018a0a:	e7fe      	b.n	8018a0a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8018a0c:	693b      	ldr	r3, [r7, #16]
 8018a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a10:	1e5a      	subs	r2, r3, #1
 8018a12:	693b      	ldr	r3, [r7, #16]
 8018a14:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018a16:	693b      	ldr	r3, [r7, #16]
 8018a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a1a:	693b      	ldr	r3, [r7, #16]
 8018a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a1e:	429a      	cmp	r2, r3
 8018a20:	d02c      	beq.n	8018a7c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018a22:	693b      	ldr	r3, [r7, #16]
 8018a24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a26:	2b00      	cmp	r3, #0
 8018a28:	d128      	bne.n	8018a7c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	3304      	adds	r3, #4
 8018a2e:	4618      	mov	r0, r3
 8018a30:	f7fd ff5c 	bl	80168ec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018a34:	693b      	ldr	r3, [r7, #16]
 8018a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018a38:	693b      	ldr	r3, [r7, #16]
 8018a3a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a3c:	693b      	ldr	r3, [r7, #16]
 8018a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a40:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018a44:	693b      	ldr	r3, [r7, #16]
 8018a46:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018a48:	693b      	ldr	r3, [r7, #16]
 8018a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a4c:	4b0f      	ldr	r3, [pc, #60]	; (8018a8c <xTaskPriorityDisinherit+0xd8>)
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	429a      	cmp	r2, r3
 8018a52:	d903      	bls.n	8018a5c <xTaskPriorityDisinherit+0xa8>
 8018a54:	693b      	ldr	r3, [r7, #16]
 8018a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a58:	4a0c      	ldr	r2, [pc, #48]	; (8018a8c <xTaskPriorityDisinherit+0xd8>)
 8018a5a:	6013      	str	r3, [r2, #0]
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a60:	4613      	mov	r3, r2
 8018a62:	009b      	lsls	r3, r3, #2
 8018a64:	4413      	add	r3, r2
 8018a66:	009b      	lsls	r3, r3, #2
 8018a68:	4a09      	ldr	r2, [pc, #36]	; (8018a90 <xTaskPriorityDisinherit+0xdc>)
 8018a6a:	441a      	add	r2, r3
 8018a6c:	693b      	ldr	r3, [r7, #16]
 8018a6e:	3304      	adds	r3, #4
 8018a70:	4619      	mov	r1, r3
 8018a72:	4610      	mov	r0, r2
 8018a74:	f7fd fedd 	bl	8016832 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a78:	2301      	movs	r3, #1
 8018a7a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a7c:	697b      	ldr	r3, [r7, #20]
	}
 8018a7e:	4618      	mov	r0, r3
 8018a80:	3718      	adds	r7, #24
 8018a82:	46bd      	mov	sp, r7
 8018a84:	bd80      	pop	{r7, pc}
 8018a86:	bf00      	nop
 8018a88:	20000ab4 	.word	0x20000ab4
 8018a8c:	20000f90 	.word	0x20000f90
 8018a90:	20000ab8 	.word	0x20000ab8

08018a94 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018a94:	b580      	push	{r7, lr}
 8018a96:	b088      	sub	sp, #32
 8018a98:	af00      	add	r7, sp, #0
 8018a9a:	6078      	str	r0, [r7, #4]
 8018a9c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018a9e:	687b      	ldr	r3, [r7, #4]
 8018aa0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018aa2:	2301      	movs	r3, #1
 8018aa4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d06c      	beq.n	8018b86 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018aac:	69bb      	ldr	r3, [r7, #24]
 8018aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ab0:	2b00      	cmp	r3, #0
 8018ab2:	d10b      	bne.n	8018acc <vTaskPriorityDisinheritAfterTimeout+0x38>
 8018ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ab8:	b672      	cpsid	i
 8018aba:	f383 8811 	msr	BASEPRI, r3
 8018abe:	f3bf 8f6f 	isb	sy
 8018ac2:	f3bf 8f4f 	dsb	sy
 8018ac6:	b662      	cpsie	i
 8018ac8:	60fb      	str	r3, [r7, #12]
 8018aca:	e7fe      	b.n	8018aca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018acc:	69bb      	ldr	r3, [r7, #24]
 8018ace:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ad0:	683a      	ldr	r2, [r7, #0]
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	d902      	bls.n	8018adc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018ad6:	683b      	ldr	r3, [r7, #0]
 8018ad8:	61fb      	str	r3, [r7, #28]
 8018ada:	e002      	b.n	8018ae2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018adc:	69bb      	ldr	r3, [r7, #24]
 8018ade:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ae0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018ae2:	69bb      	ldr	r3, [r7, #24]
 8018ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ae6:	69fa      	ldr	r2, [r7, #28]
 8018ae8:	429a      	cmp	r2, r3
 8018aea:	d04c      	beq.n	8018b86 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018aec:	69bb      	ldr	r3, [r7, #24]
 8018aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018af0:	697a      	ldr	r2, [r7, #20]
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d147      	bne.n	8018b86 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018af6:	4b26      	ldr	r3, [pc, #152]	; (8018b90 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018af8:	681b      	ldr	r3, [r3, #0]
 8018afa:	69ba      	ldr	r2, [r7, #24]
 8018afc:	429a      	cmp	r2, r3
 8018afe:	d10b      	bne.n	8018b18 <vTaskPriorityDisinheritAfterTimeout+0x84>
 8018b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b04:	b672      	cpsid	i
 8018b06:	f383 8811 	msr	BASEPRI, r3
 8018b0a:	f3bf 8f6f 	isb	sy
 8018b0e:	f3bf 8f4f 	dsb	sy
 8018b12:	b662      	cpsie	i
 8018b14:	60bb      	str	r3, [r7, #8]
 8018b16:	e7fe      	b.n	8018b16 <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018b18:	69bb      	ldr	r3, [r7, #24]
 8018b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018b1e:	69bb      	ldr	r3, [r7, #24]
 8018b20:	69fa      	ldr	r2, [r7, #28]
 8018b22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018b24:	69bb      	ldr	r3, [r7, #24]
 8018b26:	699b      	ldr	r3, [r3, #24]
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	db04      	blt.n	8018b36 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018b2c:	69fb      	ldr	r3, [r7, #28]
 8018b2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018b32:	69bb      	ldr	r3, [r7, #24]
 8018b34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018b36:	69bb      	ldr	r3, [r7, #24]
 8018b38:	6959      	ldr	r1, [r3, #20]
 8018b3a:	693a      	ldr	r2, [r7, #16]
 8018b3c:	4613      	mov	r3, r2
 8018b3e:	009b      	lsls	r3, r3, #2
 8018b40:	4413      	add	r3, r2
 8018b42:	009b      	lsls	r3, r3, #2
 8018b44:	4a13      	ldr	r2, [pc, #76]	; (8018b94 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018b46:	4413      	add	r3, r2
 8018b48:	4299      	cmp	r1, r3
 8018b4a:	d11c      	bne.n	8018b86 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b4c:	69bb      	ldr	r3, [r7, #24]
 8018b4e:	3304      	adds	r3, #4
 8018b50:	4618      	mov	r0, r3
 8018b52:	f7fd fecb 	bl	80168ec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018b56:	69bb      	ldr	r3, [r7, #24]
 8018b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b5a:	4b0f      	ldr	r3, [pc, #60]	; (8018b98 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018b5c:	681b      	ldr	r3, [r3, #0]
 8018b5e:	429a      	cmp	r2, r3
 8018b60:	d903      	bls.n	8018b6a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018b62:	69bb      	ldr	r3, [r7, #24]
 8018b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b66:	4a0c      	ldr	r2, [pc, #48]	; (8018b98 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018b68:	6013      	str	r3, [r2, #0]
 8018b6a:	69bb      	ldr	r3, [r7, #24]
 8018b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b6e:	4613      	mov	r3, r2
 8018b70:	009b      	lsls	r3, r3, #2
 8018b72:	4413      	add	r3, r2
 8018b74:	009b      	lsls	r3, r3, #2
 8018b76:	4a07      	ldr	r2, [pc, #28]	; (8018b94 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018b78:	441a      	add	r2, r3
 8018b7a:	69bb      	ldr	r3, [r7, #24]
 8018b7c:	3304      	adds	r3, #4
 8018b7e:	4619      	mov	r1, r3
 8018b80:	4610      	mov	r0, r2
 8018b82:	f7fd fe56 	bl	8016832 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018b86:	bf00      	nop
 8018b88:	3720      	adds	r7, #32
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}
 8018b8e:	bf00      	nop
 8018b90:	20000ab4 	.word	0x20000ab4
 8018b94:	20000ab8 	.word	0x20000ab8
 8018b98:	20000f90 	.word	0x20000f90

08018b9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018b9c:	b480      	push	{r7}
 8018b9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018ba0:	4b07      	ldr	r3, [pc, #28]	; (8018bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018ba2:	681b      	ldr	r3, [r3, #0]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d004      	beq.n	8018bb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018ba8:	4b05      	ldr	r3, [pc, #20]	; (8018bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018bae:	3201      	adds	r2, #1
 8018bb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018bb2:	4b03      	ldr	r3, [pc, #12]	; (8018bc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8018bb4:	681b      	ldr	r3, [r3, #0]
	}
 8018bb6:	4618      	mov	r0, r3
 8018bb8:	46bd      	mov	sp, r7
 8018bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bbe:	4770      	bx	lr
 8018bc0:	20000ab4 	.word	0x20000ab4

08018bc4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b084      	sub	sp, #16
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]
 8018bcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018bce:	4b21      	ldr	r3, [pc, #132]	; (8018c54 <prvAddCurrentTaskToDelayedList+0x90>)
 8018bd0:	681b      	ldr	r3, [r3, #0]
 8018bd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018bd4:	4b20      	ldr	r3, [pc, #128]	; (8018c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8018bd6:	681b      	ldr	r3, [r3, #0]
 8018bd8:	3304      	adds	r3, #4
 8018bda:	4618      	mov	r0, r3
 8018bdc:	f7fd fe86 	bl	80168ec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018be0:	687b      	ldr	r3, [r7, #4]
 8018be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018be6:	d10a      	bne.n	8018bfe <prvAddCurrentTaskToDelayedList+0x3a>
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d007      	beq.n	8018bfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018bee:	4b1a      	ldr	r3, [pc, #104]	; (8018c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8018bf0:	681b      	ldr	r3, [r3, #0]
 8018bf2:	3304      	adds	r3, #4
 8018bf4:	4619      	mov	r1, r3
 8018bf6:	4819      	ldr	r0, [pc, #100]	; (8018c5c <prvAddCurrentTaskToDelayedList+0x98>)
 8018bf8:	f7fd fe1b 	bl	8016832 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018bfc:	e026      	b.n	8018c4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018bfe:	68fa      	ldr	r2, [r7, #12]
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	4413      	add	r3, r2
 8018c04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018c06:	4b14      	ldr	r3, [pc, #80]	; (8018c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c08:	681b      	ldr	r3, [r3, #0]
 8018c0a:	68ba      	ldr	r2, [r7, #8]
 8018c0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018c0e:	68ba      	ldr	r2, [r7, #8]
 8018c10:	68fb      	ldr	r3, [r7, #12]
 8018c12:	429a      	cmp	r2, r3
 8018c14:	d209      	bcs.n	8018c2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c16:	4b12      	ldr	r3, [pc, #72]	; (8018c60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018c18:	681a      	ldr	r2, [r3, #0]
 8018c1a:	4b0f      	ldr	r3, [pc, #60]	; (8018c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	3304      	adds	r3, #4
 8018c20:	4619      	mov	r1, r3
 8018c22:	4610      	mov	r0, r2
 8018c24:	f7fd fe29 	bl	801687a <vListInsert>
}
 8018c28:	e010      	b.n	8018c4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c2a:	4b0e      	ldr	r3, [pc, #56]	; (8018c64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	4b0a      	ldr	r3, [pc, #40]	; (8018c58 <prvAddCurrentTaskToDelayedList+0x94>)
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	3304      	adds	r3, #4
 8018c34:	4619      	mov	r1, r3
 8018c36:	4610      	mov	r0, r2
 8018c38:	f7fd fe1f 	bl	801687a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018c3c:	4b0a      	ldr	r3, [pc, #40]	; (8018c68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018c3e:	681b      	ldr	r3, [r3, #0]
 8018c40:	68ba      	ldr	r2, [r7, #8]
 8018c42:	429a      	cmp	r2, r3
 8018c44:	d202      	bcs.n	8018c4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018c46:	4a08      	ldr	r2, [pc, #32]	; (8018c68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	6013      	str	r3, [r2, #0]
}
 8018c4c:	bf00      	nop
 8018c4e:	3710      	adds	r7, #16
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	20000f8c 	.word	0x20000f8c
 8018c58:	20000ab4 	.word	0x20000ab4
 8018c5c:	20000f74 	.word	0x20000f74
 8018c60:	20000f44 	.word	0x20000f44
 8018c64:	20000f40 	.word	0x20000f40
 8018c68:	20000fa8 	.word	0x20000fa8

08018c6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018c6c:	b580      	push	{r7, lr}
 8018c6e:	b08a      	sub	sp, #40	; 0x28
 8018c70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018c72:	2300      	movs	r3, #0
 8018c74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018c76:	f000 fb0d 	bl	8019294 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018c7a:	4b1d      	ldr	r3, [pc, #116]	; (8018cf0 <xTimerCreateTimerTask+0x84>)
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	2b00      	cmp	r3, #0
 8018c80:	d021      	beq.n	8018cc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018c82:	2300      	movs	r3, #0
 8018c84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018c86:	2300      	movs	r3, #0
 8018c88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018c8a:	1d3a      	adds	r2, r7, #4
 8018c8c:	f107 0108 	add.w	r1, r7, #8
 8018c90:	f107 030c 	add.w	r3, r7, #12
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7fd fd85 	bl	80167a4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018c9a:	6879      	ldr	r1, [r7, #4]
 8018c9c:	68bb      	ldr	r3, [r7, #8]
 8018c9e:	68fa      	ldr	r2, [r7, #12]
 8018ca0:	9202      	str	r2, [sp, #8]
 8018ca2:	9301      	str	r3, [sp, #4]
 8018ca4:	2302      	movs	r3, #2
 8018ca6:	9300      	str	r3, [sp, #0]
 8018ca8:	2300      	movs	r3, #0
 8018caa:	460a      	mov	r2, r1
 8018cac:	4911      	ldr	r1, [pc, #68]	; (8018cf4 <xTimerCreateTimerTask+0x88>)
 8018cae:	4812      	ldr	r0, [pc, #72]	; (8018cf8 <xTimerCreateTimerTask+0x8c>)
 8018cb0:	f7fe ff30 	bl	8017b14 <xTaskCreateStatic>
 8018cb4:	4602      	mov	r2, r0
 8018cb6:	4b11      	ldr	r3, [pc, #68]	; (8018cfc <xTimerCreateTimerTask+0x90>)
 8018cb8:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018cba:	4b10      	ldr	r3, [pc, #64]	; (8018cfc <xTimerCreateTimerTask+0x90>)
 8018cbc:	681b      	ldr	r3, [r3, #0]
 8018cbe:	2b00      	cmp	r3, #0
 8018cc0:	d001      	beq.n	8018cc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018cc2:	2301      	movs	r3, #1
 8018cc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018cc6:	697b      	ldr	r3, [r7, #20]
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d10b      	bne.n	8018ce4 <xTimerCreateTimerTask+0x78>
 8018ccc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018cd0:	b672      	cpsid	i
 8018cd2:	f383 8811 	msr	BASEPRI, r3
 8018cd6:	f3bf 8f6f 	isb	sy
 8018cda:	f3bf 8f4f 	dsb	sy
 8018cde:	b662      	cpsie	i
 8018ce0:	613b      	str	r3, [r7, #16]
 8018ce2:	e7fe      	b.n	8018ce2 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8018ce4:	697b      	ldr	r3, [r7, #20]
}
 8018ce6:	4618      	mov	r0, r3
 8018ce8:	3718      	adds	r7, #24
 8018cea:	46bd      	mov	sp, r7
 8018cec:	bd80      	pop	{r7, pc}
 8018cee:	bf00      	nop
 8018cf0:	20000fe4 	.word	0x20000fe4
 8018cf4:	0801d678 	.word	0x0801d678
 8018cf8:	08018e39 	.word	0x08018e39
 8018cfc:	20000fe8 	.word	0x20000fe8

08018d00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b08a      	sub	sp, #40	; 0x28
 8018d04:	af00      	add	r7, sp, #0
 8018d06:	60f8      	str	r0, [r7, #12]
 8018d08:	60b9      	str	r1, [r7, #8]
 8018d0a:	607a      	str	r2, [r7, #4]
 8018d0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018d0e:	2300      	movs	r3, #0
 8018d10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018d12:	68fb      	ldr	r3, [r7, #12]
 8018d14:	2b00      	cmp	r3, #0
 8018d16:	d10b      	bne.n	8018d30 <xTimerGenericCommand+0x30>
 8018d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d1c:	b672      	cpsid	i
 8018d1e:	f383 8811 	msr	BASEPRI, r3
 8018d22:	f3bf 8f6f 	isb	sy
 8018d26:	f3bf 8f4f 	dsb	sy
 8018d2a:	b662      	cpsie	i
 8018d2c:	623b      	str	r3, [r7, #32]
 8018d2e:	e7fe      	b.n	8018d2e <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018d30:	4b19      	ldr	r3, [pc, #100]	; (8018d98 <xTimerGenericCommand+0x98>)
 8018d32:	681b      	ldr	r3, [r3, #0]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d02a      	beq.n	8018d8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018d38:	68bb      	ldr	r3, [r7, #8]
 8018d3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018d40:	68fb      	ldr	r3, [r7, #12]
 8018d42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018d44:	68bb      	ldr	r3, [r7, #8]
 8018d46:	2b05      	cmp	r3, #5
 8018d48:	dc18      	bgt.n	8018d7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018d4a:	f7ff fdad 	bl	80188a8 <xTaskGetSchedulerState>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	2b02      	cmp	r3, #2
 8018d52:	d109      	bne.n	8018d68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018d54:	4b10      	ldr	r3, [pc, #64]	; (8018d98 <xTimerGenericCommand+0x98>)
 8018d56:	6818      	ldr	r0, [r3, #0]
 8018d58:	f107 0110 	add.w	r1, r7, #16
 8018d5c:	2300      	movs	r3, #0
 8018d5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d60:	f7fe f860 	bl	8016e24 <xQueueGenericSend>
 8018d64:	6278      	str	r0, [r7, #36]	; 0x24
 8018d66:	e012      	b.n	8018d8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018d68:	4b0b      	ldr	r3, [pc, #44]	; (8018d98 <xTimerGenericCommand+0x98>)
 8018d6a:	6818      	ldr	r0, [r3, #0]
 8018d6c:	f107 0110 	add.w	r1, r7, #16
 8018d70:	2300      	movs	r3, #0
 8018d72:	2200      	movs	r2, #0
 8018d74:	f7fe f856 	bl	8016e24 <xQueueGenericSend>
 8018d78:	6278      	str	r0, [r7, #36]	; 0x24
 8018d7a:	e008      	b.n	8018d8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018d7c:	4b06      	ldr	r3, [pc, #24]	; (8018d98 <xTimerGenericCommand+0x98>)
 8018d7e:	6818      	ldr	r0, [r3, #0]
 8018d80:	f107 0110 	add.w	r1, r7, #16
 8018d84:	2300      	movs	r3, #0
 8018d86:	683a      	ldr	r2, [r7, #0]
 8018d88:	f7fe f94e 	bl	8017028 <xQueueGenericSendFromISR>
 8018d8c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018d90:	4618      	mov	r0, r3
 8018d92:	3728      	adds	r7, #40	; 0x28
 8018d94:	46bd      	mov	sp, r7
 8018d96:	bd80      	pop	{r7, pc}
 8018d98:	20000fe4 	.word	0x20000fe4

08018d9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018d9c:	b580      	push	{r7, lr}
 8018d9e:	b088      	sub	sp, #32
 8018da0:	af02      	add	r7, sp, #8
 8018da2:	6078      	str	r0, [r7, #4]
 8018da4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018da6:	4b23      	ldr	r3, [pc, #140]	; (8018e34 <prvProcessExpiredTimer+0x98>)
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	68db      	ldr	r3, [r3, #12]
 8018dac:	68db      	ldr	r3, [r3, #12]
 8018dae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018db0:	697b      	ldr	r3, [r7, #20]
 8018db2:	3304      	adds	r3, #4
 8018db4:	4618      	mov	r0, r3
 8018db6:	f7fd fd99 	bl	80168ec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018dba:	697b      	ldr	r3, [r7, #20]
 8018dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018dc0:	f003 0304 	and.w	r3, r3, #4
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d023      	beq.n	8018e10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018dc8:	697b      	ldr	r3, [r7, #20]
 8018dca:	699a      	ldr	r2, [r3, #24]
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	18d1      	adds	r1, r2, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	683a      	ldr	r2, [r7, #0]
 8018dd4:	6978      	ldr	r0, [r7, #20]
 8018dd6:	f000 f8d3 	bl	8018f80 <prvInsertTimerInActiveList>
 8018dda:	4603      	mov	r3, r0
 8018ddc:	2b00      	cmp	r3, #0
 8018dde:	d020      	beq.n	8018e22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018de0:	2300      	movs	r3, #0
 8018de2:	9300      	str	r3, [sp, #0]
 8018de4:	2300      	movs	r3, #0
 8018de6:	687a      	ldr	r2, [r7, #4]
 8018de8:	2100      	movs	r1, #0
 8018dea:	6978      	ldr	r0, [r7, #20]
 8018dec:	f7ff ff88 	bl	8018d00 <xTimerGenericCommand>
 8018df0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018df2:	693b      	ldr	r3, [r7, #16]
 8018df4:	2b00      	cmp	r3, #0
 8018df6:	d114      	bne.n	8018e22 <prvProcessExpiredTimer+0x86>
 8018df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018dfc:	b672      	cpsid	i
 8018dfe:	f383 8811 	msr	BASEPRI, r3
 8018e02:	f3bf 8f6f 	isb	sy
 8018e06:	f3bf 8f4f 	dsb	sy
 8018e0a:	b662      	cpsie	i
 8018e0c:	60fb      	str	r3, [r7, #12]
 8018e0e:	e7fe      	b.n	8018e0e <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e16:	f023 0301 	bic.w	r3, r3, #1
 8018e1a:	b2da      	uxtb	r2, r3
 8018e1c:	697b      	ldr	r3, [r7, #20]
 8018e1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018e22:	697b      	ldr	r3, [r7, #20]
 8018e24:	6a1b      	ldr	r3, [r3, #32]
 8018e26:	6978      	ldr	r0, [r7, #20]
 8018e28:	4798      	blx	r3
}
 8018e2a:	bf00      	nop
 8018e2c:	3718      	adds	r7, #24
 8018e2e:	46bd      	mov	sp, r7
 8018e30:	bd80      	pop	{r7, pc}
 8018e32:	bf00      	nop
 8018e34:	20000fdc 	.word	0x20000fdc

08018e38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018e38:	b580      	push	{r7, lr}
 8018e3a:	b084      	sub	sp, #16
 8018e3c:	af00      	add	r7, sp, #0
 8018e3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e40:	f107 0308 	add.w	r3, r7, #8
 8018e44:	4618      	mov	r0, r3
 8018e46:	f000 f857 	bl	8018ef8 <prvGetNextExpireTime>
 8018e4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018e4c:	68bb      	ldr	r3, [r7, #8]
 8018e4e:	4619      	mov	r1, r3
 8018e50:	68f8      	ldr	r0, [r7, #12]
 8018e52:	f000 f803 	bl	8018e5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018e56:	f000 f8d5 	bl	8019004 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e5a:	e7f1      	b.n	8018e40 <prvTimerTask+0x8>

08018e5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b084      	sub	sp, #16
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
 8018e64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018e66:	f7ff f919 	bl	801809c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018e6a:	f107 0308 	add.w	r3, r7, #8
 8018e6e:	4618      	mov	r0, r3
 8018e70:	f000 f866 	bl	8018f40 <prvSampleTimeNow>
 8018e74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018e76:	68bb      	ldr	r3, [r7, #8]
 8018e78:	2b00      	cmp	r3, #0
 8018e7a:	d130      	bne.n	8018ede <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d10a      	bne.n	8018e98 <prvProcessTimerOrBlockTask+0x3c>
 8018e82:	687a      	ldr	r2, [r7, #4]
 8018e84:	68fb      	ldr	r3, [r7, #12]
 8018e86:	429a      	cmp	r2, r3
 8018e88:	d806      	bhi.n	8018e98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018e8a:	f7ff f915 	bl	80180b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018e8e:	68f9      	ldr	r1, [r7, #12]
 8018e90:	6878      	ldr	r0, [r7, #4]
 8018e92:	f7ff ff83 	bl	8018d9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018e96:	e024      	b.n	8018ee2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018e98:	683b      	ldr	r3, [r7, #0]
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d008      	beq.n	8018eb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018e9e:	4b13      	ldr	r3, [pc, #76]	; (8018eec <prvProcessTimerOrBlockTask+0x90>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	681b      	ldr	r3, [r3, #0]
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d101      	bne.n	8018eac <prvProcessTimerOrBlockTask+0x50>
 8018ea8:	2301      	movs	r3, #1
 8018eaa:	e000      	b.n	8018eae <prvProcessTimerOrBlockTask+0x52>
 8018eac:	2300      	movs	r3, #0
 8018eae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018eb0:	4b0f      	ldr	r3, [pc, #60]	; (8018ef0 <prvProcessTimerOrBlockTask+0x94>)
 8018eb2:	6818      	ldr	r0, [r3, #0]
 8018eb4:	687a      	ldr	r2, [r7, #4]
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	1ad3      	subs	r3, r2, r3
 8018eba:	683a      	ldr	r2, [r7, #0]
 8018ebc:	4619      	mov	r1, r3
 8018ebe:	f7fe fdf5 	bl	8017aac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018ec2:	f7ff f8f9 	bl	80180b8 <xTaskResumeAll>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d10a      	bne.n	8018ee2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018ecc:	4b09      	ldr	r3, [pc, #36]	; (8018ef4 <prvProcessTimerOrBlockTask+0x98>)
 8018ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ed2:	601a      	str	r2, [r3, #0]
 8018ed4:	f3bf 8f4f 	dsb	sy
 8018ed8:	f3bf 8f6f 	isb	sy
}
 8018edc:	e001      	b.n	8018ee2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018ede:	f7ff f8eb 	bl	80180b8 <xTaskResumeAll>
}
 8018ee2:	bf00      	nop
 8018ee4:	3710      	adds	r7, #16
 8018ee6:	46bd      	mov	sp, r7
 8018ee8:	bd80      	pop	{r7, pc}
 8018eea:	bf00      	nop
 8018eec:	20000fe0 	.word	0x20000fe0
 8018ef0:	20000fe4 	.word	0x20000fe4
 8018ef4:	e000ed04 	.word	0xe000ed04

08018ef8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018ef8:	b480      	push	{r7}
 8018efa:	b085      	sub	sp, #20
 8018efc:	af00      	add	r7, sp, #0
 8018efe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018f00:	4b0e      	ldr	r3, [pc, #56]	; (8018f3c <prvGetNextExpireTime+0x44>)
 8018f02:	681b      	ldr	r3, [r3, #0]
 8018f04:	681b      	ldr	r3, [r3, #0]
 8018f06:	2b00      	cmp	r3, #0
 8018f08:	d101      	bne.n	8018f0e <prvGetNextExpireTime+0x16>
 8018f0a:	2201      	movs	r2, #1
 8018f0c:	e000      	b.n	8018f10 <prvGetNextExpireTime+0x18>
 8018f0e:	2200      	movs	r2, #0
 8018f10:	687b      	ldr	r3, [r7, #4]
 8018f12:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d105      	bne.n	8018f28 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018f1c:	4b07      	ldr	r3, [pc, #28]	; (8018f3c <prvGetNextExpireTime+0x44>)
 8018f1e:	681b      	ldr	r3, [r3, #0]
 8018f20:	68db      	ldr	r3, [r3, #12]
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	60fb      	str	r3, [r7, #12]
 8018f26:	e001      	b.n	8018f2c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018f28:	2300      	movs	r3, #0
 8018f2a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018f2c:	68fb      	ldr	r3, [r7, #12]
}
 8018f2e:	4618      	mov	r0, r3
 8018f30:	3714      	adds	r7, #20
 8018f32:	46bd      	mov	sp, r7
 8018f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f38:	4770      	bx	lr
 8018f3a:	bf00      	nop
 8018f3c:	20000fdc 	.word	0x20000fdc

08018f40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018f40:	b580      	push	{r7, lr}
 8018f42:	b084      	sub	sp, #16
 8018f44:	af00      	add	r7, sp, #0
 8018f46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018f48:	f7ff f954 	bl	80181f4 <xTaskGetTickCount>
 8018f4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018f4e:	4b0b      	ldr	r3, [pc, #44]	; (8018f7c <prvSampleTimeNow+0x3c>)
 8018f50:	681b      	ldr	r3, [r3, #0]
 8018f52:	68fa      	ldr	r2, [r7, #12]
 8018f54:	429a      	cmp	r2, r3
 8018f56:	d205      	bcs.n	8018f64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018f58:	f000 f936 	bl	80191c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018f5c:	687b      	ldr	r3, [r7, #4]
 8018f5e:	2201      	movs	r2, #1
 8018f60:	601a      	str	r2, [r3, #0]
 8018f62:	e002      	b.n	8018f6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	2200      	movs	r2, #0
 8018f68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018f6a:	4a04      	ldr	r2, [pc, #16]	; (8018f7c <prvSampleTimeNow+0x3c>)
 8018f6c:	68fb      	ldr	r3, [r7, #12]
 8018f6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018f70:	68fb      	ldr	r3, [r7, #12]
}
 8018f72:	4618      	mov	r0, r3
 8018f74:	3710      	adds	r7, #16
 8018f76:	46bd      	mov	sp, r7
 8018f78:	bd80      	pop	{r7, pc}
 8018f7a:	bf00      	nop
 8018f7c:	20000fec 	.word	0x20000fec

08018f80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018f80:	b580      	push	{r7, lr}
 8018f82:	b086      	sub	sp, #24
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	607a      	str	r2, [r7, #4]
 8018f8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	68ba      	ldr	r2, [r7, #8]
 8018f96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	68fa      	ldr	r2, [r7, #12]
 8018f9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018f9e:	68ba      	ldr	r2, [r7, #8]
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	429a      	cmp	r2, r3
 8018fa4:	d812      	bhi.n	8018fcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fa6:	687a      	ldr	r2, [r7, #4]
 8018fa8:	683b      	ldr	r3, [r7, #0]
 8018faa:	1ad2      	subs	r2, r2, r3
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	699b      	ldr	r3, [r3, #24]
 8018fb0:	429a      	cmp	r2, r3
 8018fb2:	d302      	bcc.n	8018fba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018fb4:	2301      	movs	r3, #1
 8018fb6:	617b      	str	r3, [r7, #20]
 8018fb8:	e01b      	b.n	8018ff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018fba:	4b10      	ldr	r3, [pc, #64]	; (8018ffc <prvInsertTimerInActiveList+0x7c>)
 8018fbc:	681a      	ldr	r2, [r3, #0]
 8018fbe:	68fb      	ldr	r3, [r7, #12]
 8018fc0:	3304      	adds	r3, #4
 8018fc2:	4619      	mov	r1, r3
 8018fc4:	4610      	mov	r0, r2
 8018fc6:	f7fd fc58 	bl	801687a <vListInsert>
 8018fca:	e012      	b.n	8018ff2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018fcc:	687a      	ldr	r2, [r7, #4]
 8018fce:	683b      	ldr	r3, [r7, #0]
 8018fd0:	429a      	cmp	r2, r3
 8018fd2:	d206      	bcs.n	8018fe2 <prvInsertTimerInActiveList+0x62>
 8018fd4:	68ba      	ldr	r2, [r7, #8]
 8018fd6:	683b      	ldr	r3, [r7, #0]
 8018fd8:	429a      	cmp	r2, r3
 8018fda:	d302      	bcc.n	8018fe2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018fdc:	2301      	movs	r3, #1
 8018fde:	617b      	str	r3, [r7, #20]
 8018fe0:	e007      	b.n	8018ff2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018fe2:	4b07      	ldr	r3, [pc, #28]	; (8019000 <prvInsertTimerInActiveList+0x80>)
 8018fe4:	681a      	ldr	r2, [r3, #0]
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	3304      	adds	r3, #4
 8018fea:	4619      	mov	r1, r3
 8018fec:	4610      	mov	r0, r2
 8018fee:	f7fd fc44 	bl	801687a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018ff2:	697b      	ldr	r3, [r7, #20]
}
 8018ff4:	4618      	mov	r0, r3
 8018ff6:	3718      	adds	r7, #24
 8018ff8:	46bd      	mov	sp, r7
 8018ffa:	bd80      	pop	{r7, pc}
 8018ffc:	20000fe0 	.word	0x20000fe0
 8019000:	20000fdc 	.word	0x20000fdc

08019004 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019004:	b580      	push	{r7, lr}
 8019006:	b08e      	sub	sp, #56	; 0x38
 8019008:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801900a:	e0cc      	b.n	80191a6 <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801900c:	687b      	ldr	r3, [r7, #4]
 801900e:	2b00      	cmp	r3, #0
 8019010:	da19      	bge.n	8019046 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019012:	1d3b      	adds	r3, r7, #4
 8019014:	3304      	adds	r3, #4
 8019016:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8019018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801901a:	2b00      	cmp	r3, #0
 801901c:	d10b      	bne.n	8019036 <prvProcessReceivedCommands+0x32>
 801901e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019022:	b672      	cpsid	i
 8019024:	f383 8811 	msr	BASEPRI, r3
 8019028:	f3bf 8f6f 	isb	sy
 801902c:	f3bf 8f4f 	dsb	sy
 8019030:	b662      	cpsie	i
 8019032:	61fb      	str	r3, [r7, #28]
 8019034:	e7fe      	b.n	8019034 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8019036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801903c:	6850      	ldr	r0, [r2, #4]
 801903e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019040:	6892      	ldr	r2, [r2, #8]
 8019042:	4611      	mov	r1, r2
 8019044:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8019046:	687b      	ldr	r3, [r7, #4]
 8019048:	2b00      	cmp	r3, #0
 801904a:	f2c0 80ab 	blt.w	80191a4 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019054:	695b      	ldr	r3, [r3, #20]
 8019056:	2b00      	cmp	r3, #0
 8019058:	d004      	beq.n	8019064 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801905a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801905c:	3304      	adds	r3, #4
 801905e:	4618      	mov	r0, r3
 8019060:	f7fd fc44 	bl	80168ec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019064:	463b      	mov	r3, r7
 8019066:	4618      	mov	r0, r3
 8019068:	f7ff ff6a 	bl	8018f40 <prvSampleTimeNow>
 801906c:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801906e:	687b      	ldr	r3, [r7, #4]
 8019070:	2b09      	cmp	r3, #9
 8019072:	f200 8098 	bhi.w	80191a6 <prvProcessReceivedCommands+0x1a2>
 8019076:	a201      	add	r2, pc, #4	; (adr r2, 801907c <prvProcessReceivedCommands+0x78>)
 8019078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801907c:	080190a5 	.word	0x080190a5
 8019080:	080190a5 	.word	0x080190a5
 8019084:	080190a5 	.word	0x080190a5
 8019088:	0801911b 	.word	0x0801911b
 801908c:	0801912f 	.word	0x0801912f
 8019090:	0801917b 	.word	0x0801917b
 8019094:	080190a5 	.word	0x080190a5
 8019098:	080190a5 	.word	0x080190a5
 801909c:	0801911b 	.word	0x0801911b
 80190a0:	0801912f 	.word	0x0801912f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80190a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190aa:	f043 0301 	orr.w	r3, r3, #1
 80190ae:	b2da      	uxtb	r2, r3
 80190b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80190b6:	68ba      	ldr	r2, [r7, #8]
 80190b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ba:	699b      	ldr	r3, [r3, #24]
 80190bc:	18d1      	adds	r1, r2, r3
 80190be:	68bb      	ldr	r3, [r7, #8]
 80190c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190c4:	f7ff ff5c 	bl	8018f80 <prvInsertTimerInActiveList>
 80190c8:	4603      	mov	r3, r0
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d06b      	beq.n	80191a6 <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d0:	6a1b      	ldr	r3, [r3, #32]
 80190d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80190d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190dc:	f003 0304 	and.w	r3, r3, #4
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d060      	beq.n	80191a6 <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80190e4:	68ba      	ldr	r2, [r7, #8]
 80190e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e8:	699b      	ldr	r3, [r3, #24]
 80190ea:	441a      	add	r2, r3
 80190ec:	2300      	movs	r3, #0
 80190ee:	9300      	str	r3, [sp, #0]
 80190f0:	2300      	movs	r3, #0
 80190f2:	2100      	movs	r1, #0
 80190f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190f6:	f7ff fe03 	bl	8018d00 <xTimerGenericCommand>
 80190fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80190fc:	6a3b      	ldr	r3, [r7, #32]
 80190fe:	2b00      	cmp	r3, #0
 8019100:	d151      	bne.n	80191a6 <prvProcessReceivedCommands+0x1a2>
 8019102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019106:	b672      	cpsid	i
 8019108:	f383 8811 	msr	BASEPRI, r3
 801910c:	f3bf 8f6f 	isb	sy
 8019110:	f3bf 8f4f 	dsb	sy
 8019114:	b662      	cpsie	i
 8019116:	61bb      	str	r3, [r7, #24]
 8019118:	e7fe      	b.n	8019118 <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801911a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801911c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019120:	f023 0301 	bic.w	r3, r3, #1
 8019124:	b2da      	uxtb	r2, r3
 8019126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019128:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801912c:	e03b      	b.n	80191a6 <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019134:	f043 0301 	orr.w	r3, r3, #1
 8019138:	b2da      	uxtb	r2, r3
 801913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801913c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019140:	68ba      	ldr	r2, [r7, #8]
 8019142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019144:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8019146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019148:	699b      	ldr	r3, [r3, #24]
 801914a:	2b00      	cmp	r3, #0
 801914c:	d10b      	bne.n	8019166 <prvProcessReceivedCommands+0x162>
 801914e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019152:	b672      	cpsid	i
 8019154:	f383 8811 	msr	BASEPRI, r3
 8019158:	f3bf 8f6f 	isb	sy
 801915c:	f3bf 8f4f 	dsb	sy
 8019160:	b662      	cpsie	i
 8019162:	617b      	str	r3, [r7, #20]
 8019164:	e7fe      	b.n	8019164 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8019166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019168:	699a      	ldr	r2, [r3, #24]
 801916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801916c:	18d1      	adds	r1, r2, r3
 801916e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019172:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019174:	f7ff ff04 	bl	8018f80 <prvInsertTimerInActiveList>
					break;
 8019178:	e015      	b.n	80191a6 <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019180:	f003 0302 	and.w	r3, r3, #2
 8019184:	2b00      	cmp	r3, #0
 8019186:	d103      	bne.n	8019190 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8019188:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801918a:	f000 fbb7 	bl	80198fc <vPortFree>
 801918e:	e00a      	b.n	80191a6 <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019192:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019196:	f023 0301 	bic.w	r3, r3, #1
 801919a:	b2da      	uxtb	r2, r3
 801919c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801919e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80191a2:	e000      	b.n	80191a6 <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80191a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80191a6:	4b07      	ldr	r3, [pc, #28]	; (80191c4 <prvProcessReceivedCommands+0x1c0>)
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	1d39      	adds	r1, r7, #4
 80191ac:	2200      	movs	r2, #0
 80191ae:	4618      	mov	r0, r3
 80191b0:	f7fe f868 	bl	8017284 <xQueueReceive>
 80191b4:	4603      	mov	r3, r0
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	f47f af28 	bne.w	801900c <prvProcessReceivedCommands+0x8>
	}
}
 80191bc:	bf00      	nop
 80191be:	3730      	adds	r7, #48	; 0x30
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}
 80191c4:	20000fe4 	.word	0x20000fe4

080191c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80191c8:	b580      	push	{r7, lr}
 80191ca:	b088      	sub	sp, #32
 80191cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80191ce:	e049      	b.n	8019264 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80191d0:	4b2e      	ldr	r3, [pc, #184]	; (801928c <prvSwitchTimerLists+0xc4>)
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	68db      	ldr	r3, [r3, #12]
 80191d6:	681b      	ldr	r3, [r3, #0]
 80191d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80191da:	4b2c      	ldr	r3, [pc, #176]	; (801928c <prvSwitchTimerLists+0xc4>)
 80191dc:	681b      	ldr	r3, [r3, #0]
 80191de:	68db      	ldr	r3, [r3, #12]
 80191e0:	68db      	ldr	r3, [r3, #12]
 80191e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191e4:	68fb      	ldr	r3, [r7, #12]
 80191e6:	3304      	adds	r3, #4
 80191e8:	4618      	mov	r0, r3
 80191ea:	f7fd fb7f 	bl	80168ec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80191ee:	68fb      	ldr	r3, [r7, #12]
 80191f0:	6a1b      	ldr	r3, [r3, #32]
 80191f2:	68f8      	ldr	r0, [r7, #12]
 80191f4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80191f6:	68fb      	ldr	r3, [r7, #12]
 80191f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191fc:	f003 0304 	and.w	r3, r3, #4
 8019200:	2b00      	cmp	r3, #0
 8019202:	d02f      	beq.n	8019264 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	699b      	ldr	r3, [r3, #24]
 8019208:	693a      	ldr	r2, [r7, #16]
 801920a:	4413      	add	r3, r2
 801920c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801920e:	68ba      	ldr	r2, [r7, #8]
 8019210:	693b      	ldr	r3, [r7, #16]
 8019212:	429a      	cmp	r2, r3
 8019214:	d90e      	bls.n	8019234 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8019216:	68fb      	ldr	r3, [r7, #12]
 8019218:	68ba      	ldr	r2, [r7, #8]
 801921a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801921c:	68fb      	ldr	r3, [r7, #12]
 801921e:	68fa      	ldr	r2, [r7, #12]
 8019220:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019222:	4b1a      	ldr	r3, [pc, #104]	; (801928c <prvSwitchTimerLists+0xc4>)
 8019224:	681a      	ldr	r2, [r3, #0]
 8019226:	68fb      	ldr	r3, [r7, #12]
 8019228:	3304      	adds	r3, #4
 801922a:	4619      	mov	r1, r3
 801922c:	4610      	mov	r0, r2
 801922e:	f7fd fb24 	bl	801687a <vListInsert>
 8019232:	e017      	b.n	8019264 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019234:	2300      	movs	r3, #0
 8019236:	9300      	str	r3, [sp, #0]
 8019238:	2300      	movs	r3, #0
 801923a:	693a      	ldr	r2, [r7, #16]
 801923c:	2100      	movs	r1, #0
 801923e:	68f8      	ldr	r0, [r7, #12]
 8019240:	f7ff fd5e 	bl	8018d00 <xTimerGenericCommand>
 8019244:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8019246:	687b      	ldr	r3, [r7, #4]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d10b      	bne.n	8019264 <prvSwitchTimerLists+0x9c>
 801924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019250:	b672      	cpsid	i
 8019252:	f383 8811 	msr	BASEPRI, r3
 8019256:	f3bf 8f6f 	isb	sy
 801925a:	f3bf 8f4f 	dsb	sy
 801925e:	b662      	cpsie	i
 8019260:	603b      	str	r3, [r7, #0]
 8019262:	e7fe      	b.n	8019262 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019264:	4b09      	ldr	r3, [pc, #36]	; (801928c <prvSwitchTimerLists+0xc4>)
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	681b      	ldr	r3, [r3, #0]
 801926a:	2b00      	cmp	r3, #0
 801926c:	d1b0      	bne.n	80191d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801926e:	4b07      	ldr	r3, [pc, #28]	; (801928c <prvSwitchTimerLists+0xc4>)
 8019270:	681b      	ldr	r3, [r3, #0]
 8019272:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019274:	4b06      	ldr	r3, [pc, #24]	; (8019290 <prvSwitchTimerLists+0xc8>)
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	4a04      	ldr	r2, [pc, #16]	; (801928c <prvSwitchTimerLists+0xc4>)
 801927a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801927c:	4a04      	ldr	r2, [pc, #16]	; (8019290 <prvSwitchTimerLists+0xc8>)
 801927e:	697b      	ldr	r3, [r7, #20]
 8019280:	6013      	str	r3, [r2, #0]
}
 8019282:	bf00      	nop
 8019284:	3718      	adds	r7, #24
 8019286:	46bd      	mov	sp, r7
 8019288:	bd80      	pop	{r7, pc}
 801928a:	bf00      	nop
 801928c:	20000fdc 	.word	0x20000fdc
 8019290:	20000fe0 	.word	0x20000fe0

08019294 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019294:	b580      	push	{r7, lr}
 8019296:	b082      	sub	sp, #8
 8019298:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801929a:	f000 f945 	bl	8019528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801929e:	4b15      	ldr	r3, [pc, #84]	; (80192f4 <prvCheckForValidListAndQueue+0x60>)
 80192a0:	681b      	ldr	r3, [r3, #0]
 80192a2:	2b00      	cmp	r3, #0
 80192a4:	d120      	bne.n	80192e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80192a6:	4814      	ldr	r0, [pc, #80]	; (80192f8 <prvCheckForValidListAndQueue+0x64>)
 80192a8:	f7fd fa96 	bl	80167d8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80192ac:	4813      	ldr	r0, [pc, #76]	; (80192fc <prvCheckForValidListAndQueue+0x68>)
 80192ae:	f7fd fa93 	bl	80167d8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80192b2:	4b13      	ldr	r3, [pc, #76]	; (8019300 <prvCheckForValidListAndQueue+0x6c>)
 80192b4:	4a10      	ldr	r2, [pc, #64]	; (80192f8 <prvCheckForValidListAndQueue+0x64>)
 80192b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80192b8:	4b12      	ldr	r3, [pc, #72]	; (8019304 <prvCheckForValidListAndQueue+0x70>)
 80192ba:	4a10      	ldr	r2, [pc, #64]	; (80192fc <prvCheckForValidListAndQueue+0x68>)
 80192bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80192be:	2300      	movs	r3, #0
 80192c0:	9300      	str	r3, [sp, #0]
 80192c2:	4b11      	ldr	r3, [pc, #68]	; (8019308 <prvCheckForValidListAndQueue+0x74>)
 80192c4:	4a11      	ldr	r2, [pc, #68]	; (801930c <prvCheckForValidListAndQueue+0x78>)
 80192c6:	2110      	movs	r1, #16
 80192c8:	200a      	movs	r0, #10
 80192ca:	f7fd fba3 	bl	8016a14 <xQueueGenericCreateStatic>
 80192ce:	4602      	mov	r2, r0
 80192d0:	4b08      	ldr	r3, [pc, #32]	; (80192f4 <prvCheckForValidListAndQueue+0x60>)
 80192d2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80192d4:	4b07      	ldr	r3, [pc, #28]	; (80192f4 <prvCheckForValidListAndQueue+0x60>)
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	2b00      	cmp	r3, #0
 80192da:	d005      	beq.n	80192e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80192dc:	4b05      	ldr	r3, [pc, #20]	; (80192f4 <prvCheckForValidListAndQueue+0x60>)
 80192de:	681b      	ldr	r3, [r3, #0]
 80192e0:	490b      	ldr	r1, [pc, #44]	; (8019310 <prvCheckForValidListAndQueue+0x7c>)
 80192e2:	4618      	mov	r0, r3
 80192e4:	f7fe fb90 	bl	8017a08 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80192e8:	f000 f950 	bl	801958c <vPortExitCritical>
}
 80192ec:	bf00      	nop
 80192ee:	46bd      	mov	sp, r7
 80192f0:	bd80      	pop	{r7, pc}
 80192f2:	bf00      	nop
 80192f4:	20000fe4 	.word	0x20000fe4
 80192f8:	20000fb4 	.word	0x20000fb4
 80192fc:	20000fc8 	.word	0x20000fc8
 8019300:	20000fdc 	.word	0x20000fdc
 8019304:	20000fe0 	.word	0x20000fe0
 8019308:	20001090 	.word	0x20001090
 801930c:	20000ff0 	.word	0x20000ff0
 8019310:	0801d680 	.word	0x0801d680

08019314 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019314:	b480      	push	{r7}
 8019316:	b085      	sub	sp, #20
 8019318:	af00      	add	r7, sp, #0
 801931a:	60f8      	str	r0, [r7, #12]
 801931c:	60b9      	str	r1, [r7, #8]
 801931e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019320:	68fb      	ldr	r3, [r7, #12]
 8019322:	3b04      	subs	r3, #4
 8019324:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8019326:	68fb      	ldr	r3, [r7, #12]
 8019328:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801932c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	3b04      	subs	r3, #4
 8019332:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019334:	68bb      	ldr	r3, [r7, #8]
 8019336:	f023 0201 	bic.w	r2, r3, #1
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801933e:	68fb      	ldr	r3, [r7, #12]
 8019340:	3b04      	subs	r3, #4
 8019342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019344:	4a0c      	ldr	r2, [pc, #48]	; (8019378 <pxPortInitialiseStack+0x64>)
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	3b14      	subs	r3, #20
 801934e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019350:	687a      	ldr	r2, [r7, #4]
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	3b04      	subs	r3, #4
 801935a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801935c:	68fb      	ldr	r3, [r7, #12]
 801935e:	f06f 0202 	mvn.w	r2, #2
 8019362:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019364:	68fb      	ldr	r3, [r7, #12]
 8019366:	3b20      	subs	r3, #32
 8019368:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801936a:	68fb      	ldr	r3, [r7, #12]
}
 801936c:	4618      	mov	r0, r3
 801936e:	3714      	adds	r7, #20
 8019370:	46bd      	mov	sp, r7
 8019372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019376:	4770      	bx	lr
 8019378:	0801937d 	.word	0x0801937d

0801937c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801937c:	b480      	push	{r7}
 801937e:	b085      	sub	sp, #20
 8019380:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019382:	2300      	movs	r3, #0
 8019384:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8019386:	4b13      	ldr	r3, [pc, #76]	; (80193d4 <prvTaskExitError+0x58>)
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801938e:	d00b      	beq.n	80193a8 <prvTaskExitError+0x2c>
 8019390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019394:	b672      	cpsid	i
 8019396:	f383 8811 	msr	BASEPRI, r3
 801939a:	f3bf 8f6f 	isb	sy
 801939e:	f3bf 8f4f 	dsb	sy
 80193a2:	b662      	cpsie	i
 80193a4:	60fb      	str	r3, [r7, #12]
 80193a6:	e7fe      	b.n	80193a6 <prvTaskExitError+0x2a>
 80193a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193ac:	b672      	cpsid	i
 80193ae:	f383 8811 	msr	BASEPRI, r3
 80193b2:	f3bf 8f6f 	isb	sy
 80193b6:	f3bf 8f4f 	dsb	sy
 80193ba:	b662      	cpsie	i
 80193bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80193be:	bf00      	nop
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	2b00      	cmp	r3, #0
 80193c4:	d0fc      	beq.n	80193c0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80193c6:	bf00      	nop
 80193c8:	3714      	adds	r7, #20
 80193ca:	46bd      	mov	sp, r7
 80193cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193d0:	4770      	bx	lr
 80193d2:	bf00      	nop
 80193d4:	200001a0 	.word	0x200001a0
	...

080193e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80193e0:	4b07      	ldr	r3, [pc, #28]	; (8019400 <pxCurrentTCBConst2>)
 80193e2:	6819      	ldr	r1, [r3, #0]
 80193e4:	6808      	ldr	r0, [r1, #0]
 80193e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193ea:	f380 8809 	msr	PSP, r0
 80193ee:	f3bf 8f6f 	isb	sy
 80193f2:	f04f 0000 	mov.w	r0, #0
 80193f6:	f380 8811 	msr	BASEPRI, r0
 80193fa:	4770      	bx	lr
 80193fc:	f3af 8000 	nop.w

08019400 <pxCurrentTCBConst2>:
 8019400:	20000ab4 	.word	0x20000ab4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019404:	bf00      	nop
 8019406:	bf00      	nop

08019408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019408:	4808      	ldr	r0, [pc, #32]	; (801942c <prvPortStartFirstTask+0x24>)
 801940a:	6800      	ldr	r0, [r0, #0]
 801940c:	6800      	ldr	r0, [r0, #0]
 801940e:	f380 8808 	msr	MSP, r0
 8019412:	f04f 0000 	mov.w	r0, #0
 8019416:	f380 8814 	msr	CONTROL, r0
 801941a:	b662      	cpsie	i
 801941c:	b661      	cpsie	f
 801941e:	f3bf 8f4f 	dsb	sy
 8019422:	f3bf 8f6f 	isb	sy
 8019426:	df00      	svc	0
 8019428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801942a:	bf00      	nop
 801942c:	e000ed08 	.word	0xe000ed08

08019430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b084      	sub	sp, #16
 8019434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019436:	4b36      	ldr	r3, [pc, #216]	; (8019510 <xPortStartScheduler+0xe0>)
 8019438:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	781b      	ldrb	r3, [r3, #0]
 801943e:	b2db      	uxtb	r3, r3
 8019440:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	22ff      	movs	r2, #255	; 0xff
 8019446:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	781b      	ldrb	r3, [r3, #0]
 801944c:	b2db      	uxtb	r3, r3
 801944e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019450:	78fb      	ldrb	r3, [r7, #3]
 8019452:	b2db      	uxtb	r3, r3
 8019454:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019458:	b2da      	uxtb	r2, r3
 801945a:	4b2e      	ldr	r3, [pc, #184]	; (8019514 <xPortStartScheduler+0xe4>)
 801945c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801945e:	4b2e      	ldr	r3, [pc, #184]	; (8019518 <xPortStartScheduler+0xe8>)
 8019460:	2207      	movs	r2, #7
 8019462:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019464:	e009      	b.n	801947a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8019466:	4b2c      	ldr	r3, [pc, #176]	; (8019518 <xPortStartScheduler+0xe8>)
 8019468:	681b      	ldr	r3, [r3, #0]
 801946a:	3b01      	subs	r3, #1
 801946c:	4a2a      	ldr	r2, [pc, #168]	; (8019518 <xPortStartScheduler+0xe8>)
 801946e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019470:	78fb      	ldrb	r3, [r7, #3]
 8019472:	b2db      	uxtb	r3, r3
 8019474:	005b      	lsls	r3, r3, #1
 8019476:	b2db      	uxtb	r3, r3
 8019478:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801947a:	78fb      	ldrb	r3, [r7, #3]
 801947c:	b2db      	uxtb	r3, r3
 801947e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019482:	2b80      	cmp	r3, #128	; 0x80
 8019484:	d0ef      	beq.n	8019466 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019486:	4b24      	ldr	r3, [pc, #144]	; (8019518 <xPortStartScheduler+0xe8>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	f1c3 0307 	rsb	r3, r3, #7
 801948e:	2b04      	cmp	r3, #4
 8019490:	d00b      	beq.n	80194aa <xPortStartScheduler+0x7a>
 8019492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019496:	b672      	cpsid	i
 8019498:	f383 8811 	msr	BASEPRI, r3
 801949c:	f3bf 8f6f 	isb	sy
 80194a0:	f3bf 8f4f 	dsb	sy
 80194a4:	b662      	cpsie	i
 80194a6:	60bb      	str	r3, [r7, #8]
 80194a8:	e7fe      	b.n	80194a8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80194aa:	4b1b      	ldr	r3, [pc, #108]	; (8019518 <xPortStartScheduler+0xe8>)
 80194ac:	681b      	ldr	r3, [r3, #0]
 80194ae:	021b      	lsls	r3, r3, #8
 80194b0:	4a19      	ldr	r2, [pc, #100]	; (8019518 <xPortStartScheduler+0xe8>)
 80194b2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80194b4:	4b18      	ldr	r3, [pc, #96]	; (8019518 <xPortStartScheduler+0xe8>)
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80194bc:	4a16      	ldr	r2, [pc, #88]	; (8019518 <xPortStartScheduler+0xe8>)
 80194be:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	b2da      	uxtb	r2, r3
 80194c4:	68fb      	ldr	r3, [r7, #12]
 80194c6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80194c8:	4b14      	ldr	r3, [pc, #80]	; (801951c <xPortStartScheduler+0xec>)
 80194ca:	681b      	ldr	r3, [r3, #0]
 80194cc:	4a13      	ldr	r2, [pc, #76]	; (801951c <xPortStartScheduler+0xec>)
 80194ce:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80194d2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80194d4:	4b11      	ldr	r3, [pc, #68]	; (801951c <xPortStartScheduler+0xec>)
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	4a10      	ldr	r2, [pc, #64]	; (801951c <xPortStartScheduler+0xec>)
 80194da:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80194de:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80194e0:	f000 f8d4 	bl	801968c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80194e4:	4b0e      	ldr	r3, [pc, #56]	; (8019520 <xPortStartScheduler+0xf0>)
 80194e6:	2200      	movs	r2, #0
 80194e8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80194ea:	f000 f8f3 	bl	80196d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80194ee:	4b0d      	ldr	r3, [pc, #52]	; (8019524 <xPortStartScheduler+0xf4>)
 80194f0:	681b      	ldr	r3, [r3, #0]
 80194f2:	4a0c      	ldr	r2, [pc, #48]	; (8019524 <xPortStartScheduler+0xf4>)
 80194f4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80194f8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80194fa:	f7ff ff85 	bl	8019408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80194fe:	f7fe ff55 	bl	80183ac <vTaskSwitchContext>
	prvTaskExitError();
 8019502:	f7ff ff3b 	bl	801937c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019506:	2300      	movs	r3, #0
}
 8019508:	4618      	mov	r0, r3
 801950a:	3710      	adds	r7, #16
 801950c:	46bd      	mov	sp, r7
 801950e:	bd80      	pop	{r7, pc}
 8019510:	e000e400 	.word	0xe000e400
 8019514:	200010e0 	.word	0x200010e0
 8019518:	200010e4 	.word	0x200010e4
 801951c:	e000ed20 	.word	0xe000ed20
 8019520:	200001a0 	.word	0x200001a0
 8019524:	e000ef34 	.word	0xe000ef34

08019528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019528:	b480      	push	{r7}
 801952a:	b083      	sub	sp, #12
 801952c:	af00      	add	r7, sp, #0
 801952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019532:	b672      	cpsid	i
 8019534:	f383 8811 	msr	BASEPRI, r3
 8019538:	f3bf 8f6f 	isb	sy
 801953c:	f3bf 8f4f 	dsb	sy
 8019540:	b662      	cpsie	i
 8019542:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019544:	4b0f      	ldr	r3, [pc, #60]	; (8019584 <vPortEnterCritical+0x5c>)
 8019546:	681b      	ldr	r3, [r3, #0]
 8019548:	3301      	adds	r3, #1
 801954a:	4a0e      	ldr	r2, [pc, #56]	; (8019584 <vPortEnterCritical+0x5c>)
 801954c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801954e:	4b0d      	ldr	r3, [pc, #52]	; (8019584 <vPortEnterCritical+0x5c>)
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	2b01      	cmp	r3, #1
 8019554:	d110      	bne.n	8019578 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019556:	4b0c      	ldr	r3, [pc, #48]	; (8019588 <vPortEnterCritical+0x60>)
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	b2db      	uxtb	r3, r3
 801955c:	2b00      	cmp	r3, #0
 801955e:	d00b      	beq.n	8019578 <vPortEnterCritical+0x50>
 8019560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019564:	b672      	cpsid	i
 8019566:	f383 8811 	msr	BASEPRI, r3
 801956a:	f3bf 8f6f 	isb	sy
 801956e:	f3bf 8f4f 	dsb	sy
 8019572:	b662      	cpsie	i
 8019574:	603b      	str	r3, [r7, #0]
 8019576:	e7fe      	b.n	8019576 <vPortEnterCritical+0x4e>
	}
}
 8019578:	bf00      	nop
 801957a:	370c      	adds	r7, #12
 801957c:	46bd      	mov	sp, r7
 801957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019582:	4770      	bx	lr
 8019584:	200001a0 	.word	0x200001a0
 8019588:	e000ed04 	.word	0xe000ed04

0801958c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801958c:	b480      	push	{r7}
 801958e:	b083      	sub	sp, #12
 8019590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019592:	4b12      	ldr	r3, [pc, #72]	; (80195dc <vPortExitCritical+0x50>)
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	2b00      	cmp	r3, #0
 8019598:	d10b      	bne.n	80195b2 <vPortExitCritical+0x26>
 801959a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801959e:	b672      	cpsid	i
 80195a0:	f383 8811 	msr	BASEPRI, r3
 80195a4:	f3bf 8f6f 	isb	sy
 80195a8:	f3bf 8f4f 	dsb	sy
 80195ac:	b662      	cpsie	i
 80195ae:	607b      	str	r3, [r7, #4]
 80195b0:	e7fe      	b.n	80195b0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80195b2:	4b0a      	ldr	r3, [pc, #40]	; (80195dc <vPortExitCritical+0x50>)
 80195b4:	681b      	ldr	r3, [r3, #0]
 80195b6:	3b01      	subs	r3, #1
 80195b8:	4a08      	ldr	r2, [pc, #32]	; (80195dc <vPortExitCritical+0x50>)
 80195ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80195bc:	4b07      	ldr	r3, [pc, #28]	; (80195dc <vPortExitCritical+0x50>)
 80195be:	681b      	ldr	r3, [r3, #0]
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d104      	bne.n	80195ce <vPortExitCritical+0x42>
 80195c4:	2300      	movs	r3, #0
 80195c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80195c8:	683b      	ldr	r3, [r7, #0]
 80195ca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80195ce:	bf00      	nop
 80195d0:	370c      	adds	r7, #12
 80195d2:	46bd      	mov	sp, r7
 80195d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d8:	4770      	bx	lr
 80195da:	bf00      	nop
 80195dc:	200001a0 	.word	0x200001a0

080195e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80195e0:	f3ef 8009 	mrs	r0, PSP
 80195e4:	f3bf 8f6f 	isb	sy
 80195e8:	4b15      	ldr	r3, [pc, #84]	; (8019640 <pxCurrentTCBConst>)
 80195ea:	681a      	ldr	r2, [r3, #0]
 80195ec:	f01e 0f10 	tst.w	lr, #16
 80195f0:	bf08      	it	eq
 80195f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80195f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80195fa:	6010      	str	r0, [r2, #0]
 80195fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019600:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019604:	b672      	cpsid	i
 8019606:	f380 8811 	msr	BASEPRI, r0
 801960a:	f3bf 8f4f 	dsb	sy
 801960e:	f3bf 8f6f 	isb	sy
 8019612:	b662      	cpsie	i
 8019614:	f7fe feca 	bl	80183ac <vTaskSwitchContext>
 8019618:	f04f 0000 	mov.w	r0, #0
 801961c:	f380 8811 	msr	BASEPRI, r0
 8019620:	bc09      	pop	{r0, r3}
 8019622:	6819      	ldr	r1, [r3, #0]
 8019624:	6808      	ldr	r0, [r1, #0]
 8019626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801962a:	f01e 0f10 	tst.w	lr, #16
 801962e:	bf08      	it	eq
 8019630:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019634:	f380 8809 	msr	PSP, r0
 8019638:	f3bf 8f6f 	isb	sy
 801963c:	4770      	bx	lr
 801963e:	bf00      	nop

08019640 <pxCurrentTCBConst>:
 8019640:	20000ab4 	.word	0x20000ab4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019644:	bf00      	nop
 8019646:	bf00      	nop

08019648 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019648:	b580      	push	{r7, lr}
 801964a:	b082      	sub	sp, #8
 801964c:	af00      	add	r7, sp, #0
	__asm volatile
 801964e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019652:	b672      	cpsid	i
 8019654:	f383 8811 	msr	BASEPRI, r3
 8019658:	f3bf 8f6f 	isb	sy
 801965c:	f3bf 8f4f 	dsb	sy
 8019660:	b662      	cpsie	i
 8019662:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019664:	f7fe fde8 	bl	8018238 <xTaskIncrementTick>
 8019668:	4603      	mov	r3, r0
 801966a:	2b00      	cmp	r3, #0
 801966c:	d003      	beq.n	8019676 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801966e:	4b06      	ldr	r3, [pc, #24]	; (8019688 <SysTick_Handler+0x40>)
 8019670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019674:	601a      	str	r2, [r3, #0]
 8019676:	2300      	movs	r3, #0
 8019678:	603b      	str	r3, [r7, #0]
	__asm volatile
 801967a:	683b      	ldr	r3, [r7, #0]
 801967c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8019680:	bf00      	nop
 8019682:	3708      	adds	r7, #8
 8019684:	46bd      	mov	sp, r7
 8019686:	bd80      	pop	{r7, pc}
 8019688:	e000ed04 	.word	0xe000ed04

0801968c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801968c:	b480      	push	{r7}
 801968e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019690:	4b0b      	ldr	r3, [pc, #44]	; (80196c0 <vPortSetupTimerInterrupt+0x34>)
 8019692:	2200      	movs	r2, #0
 8019694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019696:	4b0b      	ldr	r3, [pc, #44]	; (80196c4 <vPortSetupTimerInterrupt+0x38>)
 8019698:	2200      	movs	r2, #0
 801969a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801969c:	4b0a      	ldr	r3, [pc, #40]	; (80196c8 <vPortSetupTimerInterrupt+0x3c>)
 801969e:	681b      	ldr	r3, [r3, #0]
 80196a0:	4a0a      	ldr	r2, [pc, #40]	; (80196cc <vPortSetupTimerInterrupt+0x40>)
 80196a2:	fba2 2303 	umull	r2, r3, r2, r3
 80196a6:	099b      	lsrs	r3, r3, #6
 80196a8:	4a09      	ldr	r2, [pc, #36]	; (80196d0 <vPortSetupTimerInterrupt+0x44>)
 80196aa:	3b01      	subs	r3, #1
 80196ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80196ae:	4b04      	ldr	r3, [pc, #16]	; (80196c0 <vPortSetupTimerInterrupt+0x34>)
 80196b0:	2207      	movs	r2, #7
 80196b2:	601a      	str	r2, [r3, #0]
}
 80196b4:	bf00      	nop
 80196b6:	46bd      	mov	sp, r7
 80196b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196bc:	4770      	bx	lr
 80196be:	bf00      	nop
 80196c0:	e000e010 	.word	0xe000e010
 80196c4:	e000e018 	.word	0xe000e018
 80196c8:	20000000 	.word	0x20000000
 80196cc:	10624dd3 	.word	0x10624dd3
 80196d0:	e000e014 	.word	0xe000e014

080196d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80196d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80196e4 <vPortEnableVFP+0x10>
 80196d8:	6801      	ldr	r1, [r0, #0]
 80196da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80196de:	6001      	str	r1, [r0, #0]
 80196e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80196e2:	bf00      	nop
 80196e4:	e000ed88 	.word	0xe000ed88

080196e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80196e8:	b480      	push	{r7}
 80196ea:	b085      	sub	sp, #20
 80196ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80196ee:	f3ef 8305 	mrs	r3, IPSR
 80196f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80196f4:	68fb      	ldr	r3, [r7, #12]
 80196f6:	2b0f      	cmp	r3, #15
 80196f8:	d915      	bls.n	8019726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80196fa:	4a18      	ldr	r2, [pc, #96]	; (801975c <vPortValidateInterruptPriority+0x74>)
 80196fc:	68fb      	ldr	r3, [r7, #12]
 80196fe:	4413      	add	r3, r2
 8019700:	781b      	ldrb	r3, [r3, #0]
 8019702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019704:	4b16      	ldr	r3, [pc, #88]	; (8019760 <vPortValidateInterruptPriority+0x78>)
 8019706:	781b      	ldrb	r3, [r3, #0]
 8019708:	7afa      	ldrb	r2, [r7, #11]
 801970a:	429a      	cmp	r2, r3
 801970c:	d20b      	bcs.n	8019726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801970e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019712:	b672      	cpsid	i
 8019714:	f383 8811 	msr	BASEPRI, r3
 8019718:	f3bf 8f6f 	isb	sy
 801971c:	f3bf 8f4f 	dsb	sy
 8019720:	b662      	cpsie	i
 8019722:	607b      	str	r3, [r7, #4]
 8019724:	e7fe      	b.n	8019724 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019726:	4b0f      	ldr	r3, [pc, #60]	; (8019764 <vPortValidateInterruptPriority+0x7c>)
 8019728:	681b      	ldr	r3, [r3, #0]
 801972a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801972e:	4b0e      	ldr	r3, [pc, #56]	; (8019768 <vPortValidateInterruptPriority+0x80>)
 8019730:	681b      	ldr	r3, [r3, #0]
 8019732:	429a      	cmp	r2, r3
 8019734:	d90b      	bls.n	801974e <vPortValidateInterruptPriority+0x66>
 8019736:	f04f 0350 	mov.w	r3, #80	; 0x50
 801973a:	b672      	cpsid	i
 801973c:	f383 8811 	msr	BASEPRI, r3
 8019740:	f3bf 8f6f 	isb	sy
 8019744:	f3bf 8f4f 	dsb	sy
 8019748:	b662      	cpsie	i
 801974a:	603b      	str	r3, [r7, #0]
 801974c:	e7fe      	b.n	801974c <vPortValidateInterruptPriority+0x64>
	}
 801974e:	bf00      	nop
 8019750:	3714      	adds	r7, #20
 8019752:	46bd      	mov	sp, r7
 8019754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019758:	4770      	bx	lr
 801975a:	bf00      	nop
 801975c:	e000e3f0 	.word	0xe000e3f0
 8019760:	200010e0 	.word	0x200010e0
 8019764:	e000ed0c 	.word	0xe000ed0c
 8019768:	200010e4 	.word	0x200010e4

0801976c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801976c:	b580      	push	{r7, lr}
 801976e:	b08a      	sub	sp, #40	; 0x28
 8019770:	af00      	add	r7, sp, #0
 8019772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019774:	2300      	movs	r3, #0
 8019776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019778:	f7fe fc90 	bl	801809c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801977c:	4b5a      	ldr	r3, [pc, #360]	; (80198e8 <pvPortMalloc+0x17c>)
 801977e:	681b      	ldr	r3, [r3, #0]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d101      	bne.n	8019788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019784:	f000 f916 	bl	80199b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019788:	4b58      	ldr	r3, [pc, #352]	; (80198ec <pvPortMalloc+0x180>)
 801978a:	681a      	ldr	r2, [r3, #0]
 801978c:	687b      	ldr	r3, [r7, #4]
 801978e:	4013      	ands	r3, r2
 8019790:	2b00      	cmp	r3, #0
 8019792:	f040 8090 	bne.w	80198b6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019796:	687b      	ldr	r3, [r7, #4]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d01e      	beq.n	80197da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801979c:	2208      	movs	r2, #8
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	4413      	add	r3, r2
 80197a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80197a4:	687b      	ldr	r3, [r7, #4]
 80197a6:	f003 0307 	and.w	r3, r3, #7
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	d015      	beq.n	80197da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	f023 0307 	bic.w	r3, r3, #7
 80197b4:	3308      	adds	r3, #8
 80197b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80197b8:	687b      	ldr	r3, [r7, #4]
 80197ba:	f003 0307 	and.w	r3, r3, #7
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d00b      	beq.n	80197da <pvPortMalloc+0x6e>
 80197c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197c6:	b672      	cpsid	i
 80197c8:	f383 8811 	msr	BASEPRI, r3
 80197cc:	f3bf 8f6f 	isb	sy
 80197d0:	f3bf 8f4f 	dsb	sy
 80197d4:	b662      	cpsie	i
 80197d6:	617b      	str	r3, [r7, #20]
 80197d8:	e7fe      	b.n	80197d8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d06a      	beq.n	80198b6 <pvPortMalloc+0x14a>
 80197e0:	4b43      	ldr	r3, [pc, #268]	; (80198f0 <pvPortMalloc+0x184>)
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	687a      	ldr	r2, [r7, #4]
 80197e6:	429a      	cmp	r2, r3
 80197e8:	d865      	bhi.n	80198b6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80197ea:	4b42      	ldr	r3, [pc, #264]	; (80198f4 <pvPortMalloc+0x188>)
 80197ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80197ee:	4b41      	ldr	r3, [pc, #260]	; (80198f4 <pvPortMalloc+0x188>)
 80197f0:	681b      	ldr	r3, [r3, #0]
 80197f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80197f4:	e004      	b.n	8019800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80197f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80197fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019802:	685b      	ldr	r3, [r3, #4]
 8019804:	687a      	ldr	r2, [r7, #4]
 8019806:	429a      	cmp	r2, r3
 8019808:	d903      	bls.n	8019812 <pvPortMalloc+0xa6>
 801980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	2b00      	cmp	r3, #0
 8019810:	d1f1      	bne.n	80197f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019812:	4b35      	ldr	r3, [pc, #212]	; (80198e8 <pvPortMalloc+0x17c>)
 8019814:	681b      	ldr	r3, [r3, #0]
 8019816:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019818:	429a      	cmp	r2, r3
 801981a:	d04c      	beq.n	80198b6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801981c:	6a3b      	ldr	r3, [r7, #32]
 801981e:	681b      	ldr	r3, [r3, #0]
 8019820:	2208      	movs	r2, #8
 8019822:	4413      	add	r3, r2
 8019824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019828:	681a      	ldr	r2, [r3, #0]
 801982a:	6a3b      	ldr	r3, [r7, #32]
 801982c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801982e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019830:	685a      	ldr	r2, [r3, #4]
 8019832:	687b      	ldr	r3, [r7, #4]
 8019834:	1ad2      	subs	r2, r2, r3
 8019836:	2308      	movs	r3, #8
 8019838:	005b      	lsls	r3, r3, #1
 801983a:	429a      	cmp	r2, r3
 801983c:	d920      	bls.n	8019880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801983e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	4413      	add	r3, r2
 8019844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019846:	69bb      	ldr	r3, [r7, #24]
 8019848:	f003 0307 	and.w	r3, r3, #7
 801984c:	2b00      	cmp	r3, #0
 801984e:	d00b      	beq.n	8019868 <pvPortMalloc+0xfc>
 8019850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019854:	b672      	cpsid	i
 8019856:	f383 8811 	msr	BASEPRI, r3
 801985a:	f3bf 8f6f 	isb	sy
 801985e:	f3bf 8f4f 	dsb	sy
 8019862:	b662      	cpsie	i
 8019864:	613b      	str	r3, [r7, #16]
 8019866:	e7fe      	b.n	8019866 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801986a:	685a      	ldr	r2, [r3, #4]
 801986c:	687b      	ldr	r3, [r7, #4]
 801986e:	1ad2      	subs	r2, r2, r3
 8019870:	69bb      	ldr	r3, [r7, #24]
 8019872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019876:	687a      	ldr	r2, [r7, #4]
 8019878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801987a:	69b8      	ldr	r0, [r7, #24]
 801987c:	f000 f8fc 	bl	8019a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019880:	4b1b      	ldr	r3, [pc, #108]	; (80198f0 <pvPortMalloc+0x184>)
 8019882:	681a      	ldr	r2, [r3, #0]
 8019884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019886:	685b      	ldr	r3, [r3, #4]
 8019888:	1ad3      	subs	r3, r2, r3
 801988a:	4a19      	ldr	r2, [pc, #100]	; (80198f0 <pvPortMalloc+0x184>)
 801988c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801988e:	4b18      	ldr	r3, [pc, #96]	; (80198f0 <pvPortMalloc+0x184>)
 8019890:	681a      	ldr	r2, [r3, #0]
 8019892:	4b19      	ldr	r3, [pc, #100]	; (80198f8 <pvPortMalloc+0x18c>)
 8019894:	681b      	ldr	r3, [r3, #0]
 8019896:	429a      	cmp	r2, r3
 8019898:	d203      	bcs.n	80198a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801989a:	4b15      	ldr	r3, [pc, #84]	; (80198f0 <pvPortMalloc+0x184>)
 801989c:	681b      	ldr	r3, [r3, #0]
 801989e:	4a16      	ldr	r2, [pc, #88]	; (80198f8 <pvPortMalloc+0x18c>)
 80198a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80198a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198a4:	685a      	ldr	r2, [r3, #4]
 80198a6:	4b11      	ldr	r3, [pc, #68]	; (80198ec <pvPortMalloc+0x180>)
 80198a8:	681b      	ldr	r3, [r3, #0]
 80198aa:	431a      	orrs	r2, r3
 80198ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80198b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b2:	2200      	movs	r2, #0
 80198b4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80198b6:	f7fe fbff 	bl	80180b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80198ba:	69fb      	ldr	r3, [r7, #28]
 80198bc:	f003 0307 	and.w	r3, r3, #7
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d00b      	beq.n	80198dc <pvPortMalloc+0x170>
 80198c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198c8:	b672      	cpsid	i
 80198ca:	f383 8811 	msr	BASEPRI, r3
 80198ce:	f3bf 8f6f 	isb	sy
 80198d2:	f3bf 8f4f 	dsb	sy
 80198d6:	b662      	cpsie	i
 80198d8:	60fb      	str	r3, [r7, #12]
 80198da:	e7fe      	b.n	80198da <pvPortMalloc+0x16e>
	return pvReturn;
 80198dc:	69fb      	ldr	r3, [r7, #28]
}
 80198de:	4618      	mov	r0, r3
 80198e0:	3728      	adds	r7, #40	; 0x28
 80198e2:	46bd      	mov	sp, r7
 80198e4:	bd80      	pop	{r7, pc}
 80198e6:	bf00      	nop
 80198e8:	200088f0 	.word	0x200088f0
 80198ec:	200088fc 	.word	0x200088fc
 80198f0:	200088f4 	.word	0x200088f4
 80198f4:	200088e8 	.word	0x200088e8
 80198f8:	200088f8 	.word	0x200088f8

080198fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b086      	sub	sp, #24
 8019900:	af00      	add	r7, sp, #0
 8019902:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d04a      	beq.n	80199a4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801990e:	2308      	movs	r3, #8
 8019910:	425b      	negs	r3, r3
 8019912:	697a      	ldr	r2, [r7, #20]
 8019914:	4413      	add	r3, r2
 8019916:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019918:	697b      	ldr	r3, [r7, #20]
 801991a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801991c:	693b      	ldr	r3, [r7, #16]
 801991e:	685a      	ldr	r2, [r3, #4]
 8019920:	4b22      	ldr	r3, [pc, #136]	; (80199ac <vPortFree+0xb0>)
 8019922:	681b      	ldr	r3, [r3, #0]
 8019924:	4013      	ands	r3, r2
 8019926:	2b00      	cmp	r3, #0
 8019928:	d10b      	bne.n	8019942 <vPortFree+0x46>
 801992a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801992e:	b672      	cpsid	i
 8019930:	f383 8811 	msr	BASEPRI, r3
 8019934:	f3bf 8f6f 	isb	sy
 8019938:	f3bf 8f4f 	dsb	sy
 801993c:	b662      	cpsie	i
 801993e:	60fb      	str	r3, [r7, #12]
 8019940:	e7fe      	b.n	8019940 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019942:	693b      	ldr	r3, [r7, #16]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	2b00      	cmp	r3, #0
 8019948:	d00b      	beq.n	8019962 <vPortFree+0x66>
 801994a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801994e:	b672      	cpsid	i
 8019950:	f383 8811 	msr	BASEPRI, r3
 8019954:	f3bf 8f6f 	isb	sy
 8019958:	f3bf 8f4f 	dsb	sy
 801995c:	b662      	cpsie	i
 801995e:	60bb      	str	r3, [r7, #8]
 8019960:	e7fe      	b.n	8019960 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019962:	693b      	ldr	r3, [r7, #16]
 8019964:	685a      	ldr	r2, [r3, #4]
 8019966:	4b11      	ldr	r3, [pc, #68]	; (80199ac <vPortFree+0xb0>)
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	4013      	ands	r3, r2
 801996c:	2b00      	cmp	r3, #0
 801996e:	d019      	beq.n	80199a4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019970:	693b      	ldr	r3, [r7, #16]
 8019972:	681b      	ldr	r3, [r3, #0]
 8019974:	2b00      	cmp	r3, #0
 8019976:	d115      	bne.n	80199a4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019978:	693b      	ldr	r3, [r7, #16]
 801997a:	685a      	ldr	r2, [r3, #4]
 801997c:	4b0b      	ldr	r3, [pc, #44]	; (80199ac <vPortFree+0xb0>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	43db      	mvns	r3, r3
 8019982:	401a      	ands	r2, r3
 8019984:	693b      	ldr	r3, [r7, #16]
 8019986:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019988:	f7fe fb88 	bl	801809c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801998c:	693b      	ldr	r3, [r7, #16]
 801998e:	685a      	ldr	r2, [r3, #4]
 8019990:	4b07      	ldr	r3, [pc, #28]	; (80199b0 <vPortFree+0xb4>)
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	4413      	add	r3, r2
 8019996:	4a06      	ldr	r2, [pc, #24]	; (80199b0 <vPortFree+0xb4>)
 8019998:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801999a:	6938      	ldr	r0, [r7, #16]
 801999c:	f000 f86c 	bl	8019a78 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80199a0:	f7fe fb8a 	bl	80180b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80199a4:	bf00      	nop
 80199a6:	3718      	adds	r7, #24
 80199a8:	46bd      	mov	sp, r7
 80199aa:	bd80      	pop	{r7, pc}
 80199ac:	200088fc 	.word	0x200088fc
 80199b0:	200088f4 	.word	0x200088f4

080199b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80199b4:	b480      	push	{r7}
 80199b6:	b085      	sub	sp, #20
 80199b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80199ba:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80199be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80199c0:	4b27      	ldr	r3, [pc, #156]	; (8019a60 <prvHeapInit+0xac>)
 80199c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80199c4:	68fb      	ldr	r3, [r7, #12]
 80199c6:	f003 0307 	and.w	r3, r3, #7
 80199ca:	2b00      	cmp	r3, #0
 80199cc:	d00c      	beq.n	80199e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80199ce:	68fb      	ldr	r3, [r7, #12]
 80199d0:	3307      	adds	r3, #7
 80199d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	f023 0307 	bic.w	r3, r3, #7
 80199da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80199dc:	68ba      	ldr	r2, [r7, #8]
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	1ad3      	subs	r3, r2, r3
 80199e2:	4a1f      	ldr	r2, [pc, #124]	; (8019a60 <prvHeapInit+0xac>)
 80199e4:	4413      	add	r3, r2
 80199e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80199e8:	68fb      	ldr	r3, [r7, #12]
 80199ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80199ec:	4a1d      	ldr	r2, [pc, #116]	; (8019a64 <prvHeapInit+0xb0>)
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80199f2:	4b1c      	ldr	r3, [pc, #112]	; (8019a64 <prvHeapInit+0xb0>)
 80199f4:	2200      	movs	r2, #0
 80199f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	68ba      	ldr	r2, [r7, #8]
 80199fc:	4413      	add	r3, r2
 80199fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019a00:	2208      	movs	r2, #8
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	1a9b      	subs	r3, r3, r2
 8019a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a08:	68fb      	ldr	r3, [r7, #12]
 8019a0a:	f023 0307 	bic.w	r3, r3, #7
 8019a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	4a15      	ldr	r2, [pc, #84]	; (8019a68 <prvHeapInit+0xb4>)
 8019a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019a16:	4b14      	ldr	r3, [pc, #80]	; (8019a68 <prvHeapInit+0xb4>)
 8019a18:	681b      	ldr	r3, [r3, #0]
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019a1e:	4b12      	ldr	r3, [pc, #72]	; (8019a68 <prvHeapInit+0xb4>)
 8019a20:	681b      	ldr	r3, [r3, #0]
 8019a22:	2200      	movs	r2, #0
 8019a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019a2a:	683b      	ldr	r3, [r7, #0]
 8019a2c:	68fa      	ldr	r2, [r7, #12]
 8019a2e:	1ad2      	subs	r2, r2, r3
 8019a30:	683b      	ldr	r3, [r7, #0]
 8019a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019a34:	4b0c      	ldr	r3, [pc, #48]	; (8019a68 <prvHeapInit+0xb4>)
 8019a36:	681a      	ldr	r2, [r3, #0]
 8019a38:	683b      	ldr	r3, [r7, #0]
 8019a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a3c:	683b      	ldr	r3, [r7, #0]
 8019a3e:	685b      	ldr	r3, [r3, #4]
 8019a40:	4a0a      	ldr	r2, [pc, #40]	; (8019a6c <prvHeapInit+0xb8>)
 8019a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a44:	683b      	ldr	r3, [r7, #0]
 8019a46:	685b      	ldr	r3, [r3, #4]
 8019a48:	4a09      	ldr	r2, [pc, #36]	; (8019a70 <prvHeapInit+0xbc>)
 8019a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019a4c:	4b09      	ldr	r3, [pc, #36]	; (8019a74 <prvHeapInit+0xc0>)
 8019a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019a52:	601a      	str	r2, [r3, #0]
}
 8019a54:	bf00      	nop
 8019a56:	3714      	adds	r7, #20
 8019a58:	46bd      	mov	sp, r7
 8019a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a5e:	4770      	bx	lr
 8019a60:	200010e8 	.word	0x200010e8
 8019a64:	200088e8 	.word	0x200088e8
 8019a68:	200088f0 	.word	0x200088f0
 8019a6c:	200088f8 	.word	0x200088f8
 8019a70:	200088f4 	.word	0x200088f4
 8019a74:	200088fc 	.word	0x200088fc

08019a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019a78:	b480      	push	{r7}
 8019a7a:	b085      	sub	sp, #20
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019a80:	4b28      	ldr	r3, [pc, #160]	; (8019b24 <prvInsertBlockIntoFreeList+0xac>)
 8019a82:	60fb      	str	r3, [r7, #12]
 8019a84:	e002      	b.n	8019a8c <prvInsertBlockIntoFreeList+0x14>
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	60fb      	str	r3, [r7, #12]
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	681b      	ldr	r3, [r3, #0]
 8019a90:	687a      	ldr	r2, [r7, #4]
 8019a92:	429a      	cmp	r2, r3
 8019a94:	d8f7      	bhi.n	8019a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	685b      	ldr	r3, [r3, #4]
 8019a9e:	68ba      	ldr	r2, [r7, #8]
 8019aa0:	4413      	add	r3, r2
 8019aa2:	687a      	ldr	r2, [r7, #4]
 8019aa4:	429a      	cmp	r2, r3
 8019aa6:	d108      	bne.n	8019aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019aa8:	68fb      	ldr	r3, [r7, #12]
 8019aaa:	685a      	ldr	r2, [r3, #4]
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	685b      	ldr	r3, [r3, #4]
 8019ab0:	441a      	add	r2, r3
 8019ab2:	68fb      	ldr	r3, [r7, #12]
 8019ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019ab6:	68fb      	ldr	r3, [r7, #12]
 8019ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	685b      	ldr	r3, [r3, #4]
 8019ac2:	68ba      	ldr	r2, [r7, #8]
 8019ac4:	441a      	add	r2, r3
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	429a      	cmp	r2, r3
 8019acc:	d118      	bne.n	8019b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019ace:	68fb      	ldr	r3, [r7, #12]
 8019ad0:	681a      	ldr	r2, [r3, #0]
 8019ad2:	4b15      	ldr	r3, [pc, #84]	; (8019b28 <prvInsertBlockIntoFreeList+0xb0>)
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	429a      	cmp	r2, r3
 8019ad8:	d00d      	beq.n	8019af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	685a      	ldr	r2, [r3, #4]
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	685b      	ldr	r3, [r3, #4]
 8019ae4:	441a      	add	r2, r3
 8019ae6:	687b      	ldr	r3, [r7, #4]
 8019ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	681b      	ldr	r3, [r3, #0]
 8019aee:	681a      	ldr	r2, [r3, #0]
 8019af0:	687b      	ldr	r3, [r7, #4]
 8019af2:	601a      	str	r2, [r3, #0]
 8019af4:	e008      	b.n	8019b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019af6:	4b0c      	ldr	r3, [pc, #48]	; (8019b28 <prvInsertBlockIntoFreeList+0xb0>)
 8019af8:	681a      	ldr	r2, [r3, #0]
 8019afa:	687b      	ldr	r3, [r7, #4]
 8019afc:	601a      	str	r2, [r3, #0]
 8019afe:	e003      	b.n	8019b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	681a      	ldr	r2, [r3, #0]
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019b08:	68fa      	ldr	r2, [r7, #12]
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	429a      	cmp	r2, r3
 8019b0e:	d002      	beq.n	8019b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	687a      	ldr	r2, [r7, #4]
 8019b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019b16:	bf00      	nop
 8019b18:	3714      	adds	r7, #20
 8019b1a:	46bd      	mov	sp, r7
 8019b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b20:	4770      	bx	lr
 8019b22:	bf00      	nop
 8019b24:	200088e8 	.word	0x200088e8
 8019b28:	200088f0 	.word	0x200088f0

08019b2c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019b30:	2200      	movs	r2, #0
 8019b32:	4912      	ldr	r1, [pc, #72]	; (8019b7c <MX_USB_DEVICE_Init+0x50>)
 8019b34:	4812      	ldr	r0, [pc, #72]	; (8019b80 <MX_USB_DEVICE_Init+0x54>)
 8019b36:	f7f7 ff75 	bl	8011a24 <USBD_Init>
 8019b3a:	4603      	mov	r3, r0
 8019b3c:	2b00      	cmp	r3, #0
 8019b3e:	d001      	beq.n	8019b44 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019b40:	f7eb f9d0 	bl	8004ee4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019b44:	490f      	ldr	r1, [pc, #60]	; (8019b84 <MX_USB_DEVICE_Init+0x58>)
 8019b46:	480e      	ldr	r0, [pc, #56]	; (8019b80 <MX_USB_DEVICE_Init+0x54>)
 8019b48:	f7f7 ffa2 	bl	8011a90 <USBD_RegisterClass>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d001      	beq.n	8019b56 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019b52:	f7eb f9c7 	bl	8004ee4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019b56:	490c      	ldr	r1, [pc, #48]	; (8019b88 <MX_USB_DEVICE_Init+0x5c>)
 8019b58:	4809      	ldr	r0, [pc, #36]	; (8019b80 <MX_USB_DEVICE_Init+0x54>)
 8019b5a:	f7f7 fec7 	bl	80118ec <USBD_CDC_RegisterInterface>
 8019b5e:	4603      	mov	r3, r0
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d001      	beq.n	8019b68 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019b64:	f7eb f9be 	bl	8004ee4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019b68:	4805      	ldr	r0, [pc, #20]	; (8019b80 <MX_USB_DEVICE_Init+0x54>)
 8019b6a:	f7f7 ffb2 	bl	8011ad2 <USBD_Start>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d001      	beq.n	8019b78 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019b74:	f7eb f9b6 	bl	8004ee4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019b78:	bf00      	nop
 8019b7a:	bd80      	pop	{r7, pc}
 8019b7c:	200001b8 	.word	0x200001b8
 8019b80:	2001cc14 	.word	0x2001cc14
 8019b84:	2000009c 	.word	0x2000009c
 8019b88:	200001a4 	.word	0x200001a4

08019b8c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019b8c:	b580      	push	{r7, lr}
 8019b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019b90:	2200      	movs	r2, #0
 8019b92:	4905      	ldr	r1, [pc, #20]	; (8019ba8 <CDC_Init_FS+0x1c>)
 8019b94:	4805      	ldr	r0, [pc, #20]	; (8019bac <CDC_Init_FS+0x20>)
 8019b96:	f7f7 febe 	bl	8011916 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019b9a:	4905      	ldr	r1, [pc, #20]	; (8019bb0 <CDC_Init_FS+0x24>)
 8019b9c:	4803      	ldr	r0, [pc, #12]	; (8019bac <CDC_Init_FS+0x20>)
 8019b9e:	f7f7 fed3 	bl	8011948 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019ba2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019ba4:	4618      	mov	r0, r3
 8019ba6:	bd80      	pop	{r7, pc}
 8019ba8:	2001d6e4 	.word	0x2001d6e4
 8019bac:	2001cc14 	.word	0x2001cc14
 8019bb0:	2001cee4 	.word	0x2001cee4

08019bb4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019bb4:	b480      	push	{r7}
 8019bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019bb8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	46bd      	mov	sp, r7
 8019bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bc2:	4770      	bx	lr

08019bc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019bc4:	b480      	push	{r7}
 8019bc6:	b083      	sub	sp, #12
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	4603      	mov	r3, r0
 8019bcc:	6039      	str	r1, [r7, #0]
 8019bce:	71fb      	strb	r3, [r7, #7]
 8019bd0:	4613      	mov	r3, r2
 8019bd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019bd4:	79fb      	ldrb	r3, [r7, #7]
 8019bd6:	2b23      	cmp	r3, #35	; 0x23
 8019bd8:	d84a      	bhi.n	8019c70 <CDC_Control_FS+0xac>
 8019bda:	a201      	add	r2, pc, #4	; (adr r2, 8019be0 <CDC_Control_FS+0x1c>)
 8019bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019be0:	08019c71 	.word	0x08019c71
 8019be4:	08019c71 	.word	0x08019c71
 8019be8:	08019c71 	.word	0x08019c71
 8019bec:	08019c71 	.word	0x08019c71
 8019bf0:	08019c71 	.word	0x08019c71
 8019bf4:	08019c71 	.word	0x08019c71
 8019bf8:	08019c71 	.word	0x08019c71
 8019bfc:	08019c71 	.word	0x08019c71
 8019c00:	08019c71 	.word	0x08019c71
 8019c04:	08019c71 	.word	0x08019c71
 8019c08:	08019c71 	.word	0x08019c71
 8019c0c:	08019c71 	.word	0x08019c71
 8019c10:	08019c71 	.word	0x08019c71
 8019c14:	08019c71 	.word	0x08019c71
 8019c18:	08019c71 	.word	0x08019c71
 8019c1c:	08019c71 	.word	0x08019c71
 8019c20:	08019c71 	.word	0x08019c71
 8019c24:	08019c71 	.word	0x08019c71
 8019c28:	08019c71 	.word	0x08019c71
 8019c2c:	08019c71 	.word	0x08019c71
 8019c30:	08019c71 	.word	0x08019c71
 8019c34:	08019c71 	.word	0x08019c71
 8019c38:	08019c71 	.word	0x08019c71
 8019c3c:	08019c71 	.word	0x08019c71
 8019c40:	08019c71 	.word	0x08019c71
 8019c44:	08019c71 	.word	0x08019c71
 8019c48:	08019c71 	.word	0x08019c71
 8019c4c:	08019c71 	.word	0x08019c71
 8019c50:	08019c71 	.word	0x08019c71
 8019c54:	08019c71 	.word	0x08019c71
 8019c58:	08019c71 	.word	0x08019c71
 8019c5c:	08019c71 	.word	0x08019c71
 8019c60:	08019c71 	.word	0x08019c71
 8019c64:	08019c71 	.word	0x08019c71
 8019c68:	08019c71 	.word	0x08019c71
 8019c6c:	08019c71 	.word	0x08019c71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019c70:	bf00      	nop
  }

  return (USBD_OK);
 8019c72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019c74:	4618      	mov	r0, r3
 8019c76:	370c      	adds	r7, #12
 8019c78:	46bd      	mov	sp, r7
 8019c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c7e:	4770      	bx	lr

08019c80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019c80:	b580      	push	{r7, lr}
 8019c82:	b082      	sub	sp, #8
 8019c84:	af00      	add	r7, sp, #0
 8019c86:	6078      	str	r0, [r7, #4]
 8019c88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019c8a:	6879      	ldr	r1, [r7, #4]
 8019c8c:	4805      	ldr	r0, [pc, #20]	; (8019ca4 <CDC_Receive_FS+0x24>)
 8019c8e:	f7f7 fe5b 	bl	8011948 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019c92:	4804      	ldr	r0, [pc, #16]	; (8019ca4 <CDC_Receive_FS+0x24>)
 8019c94:	f7f7 fe9c 	bl	80119d0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019c98:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019c9a:	4618      	mov	r0, r3
 8019c9c:	3708      	adds	r7, #8
 8019c9e:	46bd      	mov	sp, r7
 8019ca0:	bd80      	pop	{r7, pc}
 8019ca2:	bf00      	nop
 8019ca4:	2001cc14 	.word	0x2001cc14

08019ca8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019ca8:	b580      	push	{r7, lr}
 8019caa:	b084      	sub	sp, #16
 8019cac:	af00      	add	r7, sp, #0
 8019cae:	6078      	str	r0, [r7, #4]
 8019cb0:	460b      	mov	r3, r1
 8019cb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019cb4:	2300      	movs	r3, #0
 8019cb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019cb8:	4b0d      	ldr	r3, [pc, #52]	; (8019cf0 <CDC_Transmit_FS+0x48>)
 8019cba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019cbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019cc0:	68bb      	ldr	r3, [r7, #8]
 8019cc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8019cc6:	2b00      	cmp	r3, #0
 8019cc8:	d001      	beq.n	8019cce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8019cca:	2301      	movs	r3, #1
 8019ccc:	e00b      	b.n	8019ce6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019cce:	887b      	ldrh	r3, [r7, #2]
 8019cd0:	461a      	mov	r2, r3
 8019cd2:	6879      	ldr	r1, [r7, #4]
 8019cd4:	4806      	ldr	r0, [pc, #24]	; (8019cf0 <CDC_Transmit_FS+0x48>)
 8019cd6:	f7f7 fe1e 	bl	8011916 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019cda:	4805      	ldr	r0, [pc, #20]	; (8019cf0 <CDC_Transmit_FS+0x48>)
 8019cdc:	f7f7 fe48 	bl	8011970 <USBD_CDC_TransmitPacket>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019ce6:	4618      	mov	r0, r3
 8019ce8:	3710      	adds	r7, #16
 8019cea:	46bd      	mov	sp, r7
 8019cec:	bd80      	pop	{r7, pc}
 8019cee:	bf00      	nop
 8019cf0:	2001cc14 	.word	0x2001cc14

08019cf4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	b087      	sub	sp, #28
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	60f8      	str	r0, [r7, #12]
 8019cfc:	60b9      	str	r1, [r7, #8]
 8019cfe:	4613      	mov	r3, r2
 8019d00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019d02:	2300      	movs	r3, #0
 8019d04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019d06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	371c      	adds	r7, #28
 8019d0e:	46bd      	mov	sp, r7
 8019d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d14:	4770      	bx	lr
	...

08019d18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d18:	b480      	push	{r7}
 8019d1a:	b083      	sub	sp, #12
 8019d1c:	af00      	add	r7, sp, #0
 8019d1e:	4603      	mov	r3, r0
 8019d20:	6039      	str	r1, [r7, #0]
 8019d22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019d24:	683b      	ldr	r3, [r7, #0]
 8019d26:	2212      	movs	r2, #18
 8019d28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019d2a:	4b03      	ldr	r3, [pc, #12]	; (8019d38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019d2c:	4618      	mov	r0, r3
 8019d2e:	370c      	adds	r7, #12
 8019d30:	46bd      	mov	sp, r7
 8019d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d36:	4770      	bx	lr
 8019d38:	200001d8 	.word	0x200001d8

08019d3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d3c:	b480      	push	{r7}
 8019d3e:	b083      	sub	sp, #12
 8019d40:	af00      	add	r7, sp, #0
 8019d42:	4603      	mov	r3, r0
 8019d44:	6039      	str	r1, [r7, #0]
 8019d46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019d48:	683b      	ldr	r3, [r7, #0]
 8019d4a:	2204      	movs	r2, #4
 8019d4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019d4e:	4b03      	ldr	r3, [pc, #12]	; (8019d5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019d50:	4618      	mov	r0, r3
 8019d52:	370c      	adds	r7, #12
 8019d54:	46bd      	mov	sp, r7
 8019d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5a:	4770      	bx	lr
 8019d5c:	200001f8 	.word	0x200001f8

08019d60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	4603      	mov	r3, r0
 8019d68:	6039      	str	r1, [r7, #0]
 8019d6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019d6c:	79fb      	ldrb	r3, [r7, #7]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d105      	bne.n	8019d7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019d72:	683a      	ldr	r2, [r7, #0]
 8019d74:	4907      	ldr	r1, [pc, #28]	; (8019d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8019d76:	4808      	ldr	r0, [pc, #32]	; (8019d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8019d78:	f7f8 fea3 	bl	8012ac2 <USBD_GetString>
 8019d7c:	e004      	b.n	8019d88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019d7e:	683a      	ldr	r2, [r7, #0]
 8019d80:	4904      	ldr	r1, [pc, #16]	; (8019d94 <USBD_FS_ProductStrDescriptor+0x34>)
 8019d82:	4805      	ldr	r0, [pc, #20]	; (8019d98 <USBD_FS_ProductStrDescriptor+0x38>)
 8019d84:	f7f8 fe9d 	bl	8012ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019d88:	4b02      	ldr	r3, [pc, #8]	; (8019d94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019d8a:	4618      	mov	r0, r3
 8019d8c:	3708      	adds	r7, #8
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	bd80      	pop	{r7, pc}
 8019d92:	bf00      	nop
 8019d94:	2001dee4 	.word	0x2001dee4
 8019d98:	0801d688 	.word	0x0801d688

08019d9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d9c:	b580      	push	{r7, lr}
 8019d9e:	b082      	sub	sp, #8
 8019da0:	af00      	add	r7, sp, #0
 8019da2:	4603      	mov	r3, r0
 8019da4:	6039      	str	r1, [r7, #0]
 8019da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019da8:	683a      	ldr	r2, [r7, #0]
 8019daa:	4904      	ldr	r1, [pc, #16]	; (8019dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019dac:	4804      	ldr	r0, [pc, #16]	; (8019dc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019dae:	f7f8 fe88 	bl	8012ac2 <USBD_GetString>
  return USBD_StrDesc;
 8019db2:	4b02      	ldr	r3, [pc, #8]	; (8019dbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019db4:	4618      	mov	r0, r3
 8019db6:	3708      	adds	r7, #8
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	2001dee4 	.word	0x2001dee4
 8019dc0:	0801d6a0 	.word	0x0801d6a0

08019dc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019dc4:	b580      	push	{r7, lr}
 8019dc6:	b082      	sub	sp, #8
 8019dc8:	af00      	add	r7, sp, #0
 8019dca:	4603      	mov	r3, r0
 8019dcc:	6039      	str	r1, [r7, #0]
 8019dce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019dd0:	683b      	ldr	r3, [r7, #0]
 8019dd2:	221a      	movs	r2, #26
 8019dd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019dd6:	f000 f855 	bl	8019e84 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019dda:	4b02      	ldr	r3, [pc, #8]	; (8019de4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019ddc:	4618      	mov	r0, r3
 8019dde:	3708      	adds	r7, #8
 8019de0:	46bd      	mov	sp, r7
 8019de2:	bd80      	pop	{r7, pc}
 8019de4:	200001fc 	.word	0x200001fc

08019de8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b082      	sub	sp, #8
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	4603      	mov	r3, r0
 8019df0:	6039      	str	r1, [r7, #0]
 8019df2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019df4:	79fb      	ldrb	r3, [r7, #7]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d105      	bne.n	8019e06 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019dfa:	683a      	ldr	r2, [r7, #0]
 8019dfc:	4907      	ldr	r1, [pc, #28]	; (8019e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8019dfe:	4808      	ldr	r0, [pc, #32]	; (8019e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019e00:	f7f8 fe5f 	bl	8012ac2 <USBD_GetString>
 8019e04:	e004      	b.n	8019e10 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019e06:	683a      	ldr	r2, [r7, #0]
 8019e08:	4904      	ldr	r1, [pc, #16]	; (8019e1c <USBD_FS_ConfigStrDescriptor+0x34>)
 8019e0a:	4805      	ldr	r0, [pc, #20]	; (8019e20 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019e0c:	f7f8 fe59 	bl	8012ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019e10:	4b02      	ldr	r3, [pc, #8]	; (8019e1c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019e12:	4618      	mov	r0, r3
 8019e14:	3708      	adds	r7, #8
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	bf00      	nop
 8019e1c:	2001dee4 	.word	0x2001dee4
 8019e20:	0801d6b4 	.word	0x0801d6b4

08019e24 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019e24:	b580      	push	{r7, lr}
 8019e26:	b082      	sub	sp, #8
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	6039      	str	r1, [r7, #0]
 8019e2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019e30:	79fb      	ldrb	r3, [r7, #7]
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d105      	bne.n	8019e42 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019e36:	683a      	ldr	r2, [r7, #0]
 8019e38:	4907      	ldr	r1, [pc, #28]	; (8019e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019e3a:	4808      	ldr	r0, [pc, #32]	; (8019e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019e3c:	f7f8 fe41 	bl	8012ac2 <USBD_GetString>
 8019e40:	e004      	b.n	8019e4c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019e42:	683a      	ldr	r2, [r7, #0]
 8019e44:	4904      	ldr	r1, [pc, #16]	; (8019e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019e46:	4805      	ldr	r0, [pc, #20]	; (8019e5c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019e48:	f7f8 fe3b 	bl	8012ac2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019e4c:	4b02      	ldr	r3, [pc, #8]	; (8019e58 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019e4e:	4618      	mov	r0, r3
 8019e50:	3708      	adds	r7, #8
 8019e52:	46bd      	mov	sp, r7
 8019e54:	bd80      	pop	{r7, pc}
 8019e56:	bf00      	nop
 8019e58:	2001dee4 	.word	0x2001dee4
 8019e5c:	0801d6c0 	.word	0x0801d6c0

08019e60 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019e60:	b480      	push	{r7}
 8019e62:	b083      	sub	sp, #12
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	4603      	mov	r3, r0
 8019e68:	6039      	str	r1, [r7, #0]
 8019e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8019e6c:	683b      	ldr	r3, [r7, #0]
 8019e6e:	220c      	movs	r2, #12
 8019e70:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8019e72:	4b03      	ldr	r3, [pc, #12]	; (8019e80 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8019e74:	4618      	mov	r0, r3
 8019e76:	370c      	adds	r7, #12
 8019e78:	46bd      	mov	sp, r7
 8019e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e7e:	4770      	bx	lr
 8019e80:	200001ec 	.word	0x200001ec

08019e84 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019e84:	b580      	push	{r7, lr}
 8019e86:	b084      	sub	sp, #16
 8019e88:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019e8a:	4b0f      	ldr	r3, [pc, #60]	; (8019ec8 <Get_SerialNum+0x44>)
 8019e8c:	681b      	ldr	r3, [r3, #0]
 8019e8e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019e90:	4b0e      	ldr	r3, [pc, #56]	; (8019ecc <Get_SerialNum+0x48>)
 8019e92:	681b      	ldr	r3, [r3, #0]
 8019e94:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019e96:	4b0e      	ldr	r3, [pc, #56]	; (8019ed0 <Get_SerialNum+0x4c>)
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019e9c:	68fa      	ldr	r2, [r7, #12]
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	4413      	add	r3, r2
 8019ea2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019ea4:	68fb      	ldr	r3, [r7, #12]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d009      	beq.n	8019ebe <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019eaa:	2208      	movs	r2, #8
 8019eac:	4909      	ldr	r1, [pc, #36]	; (8019ed4 <Get_SerialNum+0x50>)
 8019eae:	68f8      	ldr	r0, [r7, #12]
 8019eb0:	f000 f814 	bl	8019edc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019eb4:	2204      	movs	r2, #4
 8019eb6:	4908      	ldr	r1, [pc, #32]	; (8019ed8 <Get_SerialNum+0x54>)
 8019eb8:	68b8      	ldr	r0, [r7, #8]
 8019eba:	f000 f80f 	bl	8019edc <IntToUnicode>
  }
}
 8019ebe:	bf00      	nop
 8019ec0:	3710      	adds	r7, #16
 8019ec2:	46bd      	mov	sp, r7
 8019ec4:	bd80      	pop	{r7, pc}
 8019ec6:	bf00      	nop
 8019ec8:	1ff0f420 	.word	0x1ff0f420
 8019ecc:	1ff0f424 	.word	0x1ff0f424
 8019ed0:	1ff0f428 	.word	0x1ff0f428
 8019ed4:	200001fe 	.word	0x200001fe
 8019ed8:	2000020e 	.word	0x2000020e

08019edc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019edc:	b480      	push	{r7}
 8019ede:	b087      	sub	sp, #28
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	60f8      	str	r0, [r7, #12]
 8019ee4:	60b9      	str	r1, [r7, #8]
 8019ee6:	4613      	mov	r3, r2
 8019ee8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019eea:	2300      	movs	r3, #0
 8019eec:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019eee:	2300      	movs	r3, #0
 8019ef0:	75fb      	strb	r3, [r7, #23]
 8019ef2:	e027      	b.n	8019f44 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	0f1b      	lsrs	r3, r3, #28
 8019ef8:	2b09      	cmp	r3, #9
 8019efa:	d80b      	bhi.n	8019f14 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019efc:	68fb      	ldr	r3, [r7, #12]
 8019efe:	0f1b      	lsrs	r3, r3, #28
 8019f00:	b2da      	uxtb	r2, r3
 8019f02:	7dfb      	ldrb	r3, [r7, #23]
 8019f04:	005b      	lsls	r3, r3, #1
 8019f06:	4619      	mov	r1, r3
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	440b      	add	r3, r1
 8019f0c:	3230      	adds	r2, #48	; 0x30
 8019f0e:	b2d2      	uxtb	r2, r2
 8019f10:	701a      	strb	r2, [r3, #0]
 8019f12:	e00a      	b.n	8019f2a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019f14:	68fb      	ldr	r3, [r7, #12]
 8019f16:	0f1b      	lsrs	r3, r3, #28
 8019f18:	b2da      	uxtb	r2, r3
 8019f1a:	7dfb      	ldrb	r3, [r7, #23]
 8019f1c:	005b      	lsls	r3, r3, #1
 8019f1e:	4619      	mov	r1, r3
 8019f20:	68bb      	ldr	r3, [r7, #8]
 8019f22:	440b      	add	r3, r1
 8019f24:	3237      	adds	r2, #55	; 0x37
 8019f26:	b2d2      	uxtb	r2, r2
 8019f28:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	011b      	lsls	r3, r3, #4
 8019f2e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019f30:	7dfb      	ldrb	r3, [r7, #23]
 8019f32:	005b      	lsls	r3, r3, #1
 8019f34:	3301      	adds	r3, #1
 8019f36:	68ba      	ldr	r2, [r7, #8]
 8019f38:	4413      	add	r3, r2
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019f3e:	7dfb      	ldrb	r3, [r7, #23]
 8019f40:	3301      	adds	r3, #1
 8019f42:	75fb      	strb	r3, [r7, #23]
 8019f44:	7dfa      	ldrb	r2, [r7, #23]
 8019f46:	79fb      	ldrb	r3, [r7, #7]
 8019f48:	429a      	cmp	r2, r3
 8019f4a:	d3d3      	bcc.n	8019ef4 <IntToUnicode+0x18>
  }
}
 8019f4c:	bf00      	nop
 8019f4e:	371c      	adds	r7, #28
 8019f50:	46bd      	mov	sp, r7
 8019f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f56:	4770      	bx	lr

08019f58 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b08a      	sub	sp, #40	; 0x28
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019f60:	f107 0314 	add.w	r3, r7, #20
 8019f64:	2200      	movs	r2, #0
 8019f66:	601a      	str	r2, [r3, #0]
 8019f68:	605a      	str	r2, [r3, #4]
 8019f6a:	609a      	str	r2, [r3, #8]
 8019f6c:	60da      	str	r2, [r3, #12]
 8019f6e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019f78:	d13c      	bne.n	8019ff4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019f7a:	4b20      	ldr	r3, [pc, #128]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f7e:	4a1f      	ldr	r2, [pc, #124]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019f80:	f043 0301 	orr.w	r3, r3, #1
 8019f84:	6313      	str	r3, [r2, #48]	; 0x30
 8019f86:	4b1d      	ldr	r3, [pc, #116]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f8a:	f003 0301 	and.w	r3, r3, #1
 8019f8e:	613b      	str	r3, [r7, #16]
 8019f90:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019f92:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019f98:	2302      	movs	r3, #2
 8019f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019fa0:	2303      	movs	r3, #3
 8019fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019fa4:	230a      	movs	r3, #10
 8019fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019fa8:	f107 0314 	add.w	r3, r7, #20
 8019fac:	4619      	mov	r1, r3
 8019fae:	4814      	ldr	r0, [pc, #80]	; (801a000 <HAL_PCD_MspInit+0xa8>)
 8019fb0:	f7ee fc20 	bl	80087f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019fb4:	4b11      	ldr	r3, [pc, #68]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fb8:	4a10      	ldr	r2, [pc, #64]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019fba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019fbe:	6353      	str	r3, [r2, #52]	; 0x34
 8019fc0:	4b0e      	ldr	r3, [pc, #56]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019fc8:	60fb      	str	r3, [r7, #12]
 8019fca:	68fb      	ldr	r3, [r7, #12]
 8019fcc:	4b0b      	ldr	r3, [pc, #44]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019fce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fd0:	4a0a      	ldr	r2, [pc, #40]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019fd6:	6453      	str	r3, [r2, #68]	; 0x44
 8019fd8:	4b08      	ldr	r3, [pc, #32]	; (8019ffc <HAL_PCD_MspInit+0xa4>)
 8019fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019fe0:	60bb      	str	r3, [r7, #8]
 8019fe2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	2105      	movs	r1, #5
 8019fe8:	2043      	movs	r0, #67	; 0x43
 8019fea:	f7ed ffc5 	bl	8007f78 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019fee:	2043      	movs	r0, #67	; 0x43
 8019ff0:	f7ed ffde 	bl	8007fb0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019ff4:	bf00      	nop
 8019ff6:	3728      	adds	r7, #40	; 0x28
 8019ff8:	46bd      	mov	sp, r7
 8019ffa:	bd80      	pop	{r7, pc}
 8019ffc:	40023800 	.word	0x40023800
 801a000:	40020000 	.word	0x40020000

0801a004 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a004:	b580      	push	{r7, lr}
 801a006:	b082      	sub	sp, #8
 801a008:	af00      	add	r7, sp, #0
 801a00a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a018:	4619      	mov	r1, r3
 801a01a:	4610      	mov	r0, r2
 801a01c:	f7f7 fda4 	bl	8011b68 <USBD_LL_SetupStage>
}
 801a020:	bf00      	nop
 801a022:	3708      	adds	r7, #8
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}

0801a028 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a028:	b580      	push	{r7, lr}
 801a02a:	b082      	sub	sp, #8
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	460b      	mov	r3, r1
 801a032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801a03a:	78fa      	ldrb	r2, [r7, #3]
 801a03c:	6879      	ldr	r1, [r7, #4]
 801a03e:	4613      	mov	r3, r2
 801a040:	00db      	lsls	r3, r3, #3
 801a042:	1a9b      	subs	r3, r3, r2
 801a044:	009b      	lsls	r3, r3, #2
 801a046:	440b      	add	r3, r1
 801a048:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a04c:	681a      	ldr	r2, [r3, #0]
 801a04e:	78fb      	ldrb	r3, [r7, #3]
 801a050:	4619      	mov	r1, r3
 801a052:	f7f7 fddc 	bl	8011c0e <USBD_LL_DataOutStage>
}
 801a056:	bf00      	nop
 801a058:	3708      	adds	r7, #8
 801a05a:	46bd      	mov	sp, r7
 801a05c:	bd80      	pop	{r7, pc}

0801a05e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a05e:	b580      	push	{r7, lr}
 801a060:	b082      	sub	sp, #8
 801a062:	af00      	add	r7, sp, #0
 801a064:	6078      	str	r0, [r7, #4]
 801a066:	460b      	mov	r3, r1
 801a068:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a06a:	687b      	ldr	r3, [r7, #4]
 801a06c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801a070:	78fa      	ldrb	r2, [r7, #3]
 801a072:	6879      	ldr	r1, [r7, #4]
 801a074:	4613      	mov	r3, r2
 801a076:	00db      	lsls	r3, r3, #3
 801a078:	1a9b      	subs	r3, r3, r2
 801a07a:	009b      	lsls	r3, r3, #2
 801a07c:	440b      	add	r3, r1
 801a07e:	3348      	adds	r3, #72	; 0x48
 801a080:	681a      	ldr	r2, [r3, #0]
 801a082:	78fb      	ldrb	r3, [r7, #3]
 801a084:	4619      	mov	r1, r3
 801a086:	f7f7 fe25 	bl	8011cd4 <USBD_LL_DataInStage>
}
 801a08a:	bf00      	nop
 801a08c:	3708      	adds	r7, #8
 801a08e:	46bd      	mov	sp, r7
 801a090:	bd80      	pop	{r7, pc}

0801a092 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a092:	b580      	push	{r7, lr}
 801a094:	b082      	sub	sp, #8
 801a096:	af00      	add	r7, sp, #0
 801a098:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	f7f7 ff29 	bl	8011ef8 <USBD_LL_SOF>
}
 801a0a6:	bf00      	nop
 801a0a8:	3708      	adds	r7, #8
 801a0aa:	46bd      	mov	sp, r7
 801a0ac:	bd80      	pop	{r7, pc}

0801a0ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801a0ae:	b580      	push	{r7, lr}
 801a0b0:	b084      	sub	sp, #16
 801a0b2:	af00      	add	r7, sp, #0
 801a0b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a0b6:	2301      	movs	r3, #1
 801a0b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	68db      	ldr	r3, [r3, #12]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d102      	bne.n	801a0c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a0c2:	2300      	movs	r3, #0
 801a0c4:	73fb      	strb	r3, [r7, #15]
 801a0c6:	e008      	b.n	801a0da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	68db      	ldr	r3, [r3, #12]
 801a0cc:	2b02      	cmp	r3, #2
 801a0ce:	d102      	bne.n	801a0d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a0d0:	2301      	movs	r3, #1
 801a0d2:	73fb      	strb	r3, [r7, #15]
 801a0d4:	e001      	b.n	801a0da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a0d6:	f7ea ff05 	bl	8004ee4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a0e0:	7bfa      	ldrb	r2, [r7, #15]
 801a0e2:	4611      	mov	r1, r2
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	f7f7 fecc 	bl	8011e82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a0f0:	4618      	mov	r0, r3
 801a0f2:	f7f7 fe85 	bl	8011e00 <USBD_LL_Reset>
}
 801a0f6:	bf00      	nop
 801a0f8:	3710      	adds	r7, #16
 801a0fa:	46bd      	mov	sp, r7
 801a0fc:	bd80      	pop	{r7, pc}
	...

0801a100 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a100:	b580      	push	{r7, lr}
 801a102:	b082      	sub	sp, #8
 801a104:	af00      	add	r7, sp, #0
 801a106:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a108:	687b      	ldr	r3, [r7, #4]
 801a10a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a10e:	4618      	mov	r0, r3
 801a110:	f7f7 fec7 	bl	8011ea2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a11c:	681b      	ldr	r3, [r3, #0]
 801a11e:	687a      	ldr	r2, [r7, #4]
 801a120:	6812      	ldr	r2, [r2, #0]
 801a122:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a126:	f043 0301 	orr.w	r3, r3, #1
 801a12a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a12c:	687b      	ldr	r3, [r7, #4]
 801a12e:	6a1b      	ldr	r3, [r3, #32]
 801a130:	2b00      	cmp	r3, #0
 801a132:	d005      	beq.n	801a140 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a134:	4b04      	ldr	r3, [pc, #16]	; (801a148 <HAL_PCD_SuspendCallback+0x48>)
 801a136:	691b      	ldr	r3, [r3, #16]
 801a138:	4a03      	ldr	r2, [pc, #12]	; (801a148 <HAL_PCD_SuspendCallback+0x48>)
 801a13a:	f043 0306 	orr.w	r3, r3, #6
 801a13e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a140:	bf00      	nop
 801a142:	3708      	adds	r7, #8
 801a144:	46bd      	mov	sp, r7
 801a146:	bd80      	pop	{r7, pc}
 801a148:	e000ed00 	.word	0xe000ed00

0801a14c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a14c:	b580      	push	{r7, lr}
 801a14e:	b082      	sub	sp, #8
 801a150:	af00      	add	r7, sp, #0
 801a152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a15a:	4618      	mov	r0, r3
 801a15c:	f7f7 feb6 	bl	8011ecc <USBD_LL_Resume>
}
 801a160:	bf00      	nop
 801a162:	3708      	adds	r7, #8
 801a164:	46bd      	mov	sp, r7
 801a166:	bd80      	pop	{r7, pc}

0801a168 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a168:	b580      	push	{r7, lr}
 801a16a:	b082      	sub	sp, #8
 801a16c:	af00      	add	r7, sp, #0
 801a16e:	6078      	str	r0, [r7, #4]
 801a170:	460b      	mov	r3, r1
 801a172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a174:	687b      	ldr	r3, [r7, #4]
 801a176:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a17a:	78fa      	ldrb	r2, [r7, #3]
 801a17c:	4611      	mov	r1, r2
 801a17e:	4618      	mov	r0, r3
 801a180:	f7f7 fee1 	bl	8011f46 <USBD_LL_IsoOUTIncomplete>
}
 801a184:	bf00      	nop
 801a186:	3708      	adds	r7, #8
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}

0801a18c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a18c:	b580      	push	{r7, lr}
 801a18e:	b082      	sub	sp, #8
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
 801a194:	460b      	mov	r3, r1
 801a196:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a19e:	78fa      	ldrb	r2, [r7, #3]
 801a1a0:	4611      	mov	r1, r2
 801a1a2:	4618      	mov	r0, r3
 801a1a4:	f7f7 fec2 	bl	8011f2c <USBD_LL_IsoINIncomplete>
}
 801a1a8:	bf00      	nop
 801a1aa:	3708      	adds	r7, #8
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}

0801a1b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a1b0:	b580      	push	{r7, lr}
 801a1b2:	b082      	sub	sp, #8
 801a1b4:	af00      	add	r7, sp, #0
 801a1b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a1be:	4618      	mov	r0, r3
 801a1c0:	f7f7 fece 	bl	8011f60 <USBD_LL_DevConnected>
}
 801a1c4:	bf00      	nop
 801a1c6:	3708      	adds	r7, #8
 801a1c8:	46bd      	mov	sp, r7
 801a1ca:	bd80      	pop	{r7, pc}

0801a1cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	b082      	sub	sp, #8
 801a1d0:	af00      	add	r7, sp, #0
 801a1d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a1da:	4618      	mov	r0, r3
 801a1dc:	f7f7 fecb 	bl	8011f76 <USBD_LL_DevDisconnected>
}
 801a1e0:	bf00      	nop
 801a1e2:	3708      	adds	r7, #8
 801a1e4:	46bd      	mov	sp, r7
 801a1e6:	bd80      	pop	{r7, pc}

0801a1e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b082      	sub	sp, #8
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	781b      	ldrb	r3, [r3, #0]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d13c      	bne.n	801a272 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a1f8:	4a20      	ldr	r2, [pc, #128]	; (801a27c <USBD_LL_Init+0x94>)
 801a1fa:	687b      	ldr	r3, [r7, #4]
 801a1fc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	4a1e      	ldr	r2, [pc, #120]	; (801a27c <USBD_LL_Init+0x94>)
 801a204:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a208:	4b1c      	ldr	r3, [pc, #112]	; (801a27c <USBD_LL_Init+0x94>)
 801a20a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a20e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801a210:	4b1a      	ldr	r3, [pc, #104]	; (801a27c <USBD_LL_Init+0x94>)
 801a212:	2206      	movs	r2, #6
 801a214:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a216:	4b19      	ldr	r3, [pc, #100]	; (801a27c <USBD_LL_Init+0x94>)
 801a218:	2202      	movs	r2, #2
 801a21a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a21c:	4b17      	ldr	r3, [pc, #92]	; (801a27c <USBD_LL_Init+0x94>)
 801a21e:	2200      	movs	r2, #0
 801a220:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a222:	4b16      	ldr	r3, [pc, #88]	; (801a27c <USBD_LL_Init+0x94>)
 801a224:	2202      	movs	r2, #2
 801a226:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a228:	4b14      	ldr	r3, [pc, #80]	; (801a27c <USBD_LL_Init+0x94>)
 801a22a:	2200      	movs	r2, #0
 801a22c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a22e:	4b13      	ldr	r3, [pc, #76]	; (801a27c <USBD_LL_Init+0x94>)
 801a230:	2200      	movs	r2, #0
 801a232:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a234:	4b11      	ldr	r3, [pc, #68]	; (801a27c <USBD_LL_Init+0x94>)
 801a236:	2200      	movs	r2, #0
 801a238:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a23a:	4b10      	ldr	r3, [pc, #64]	; (801a27c <USBD_LL_Init+0x94>)
 801a23c:	2200      	movs	r2, #0
 801a23e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a240:	4b0e      	ldr	r3, [pc, #56]	; (801a27c <USBD_LL_Init+0x94>)
 801a242:	2200      	movs	r2, #0
 801a244:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a246:	480d      	ldr	r0, [pc, #52]	; (801a27c <USBD_LL_Init+0x94>)
 801a248:	f7ee fcc9 	bl	8008bde <HAL_PCD_Init>
 801a24c:	4603      	mov	r3, r0
 801a24e:	2b00      	cmp	r3, #0
 801a250:	d001      	beq.n	801a256 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801a252:	f7ea fe47 	bl	8004ee4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a256:	2180      	movs	r1, #128	; 0x80
 801a258:	4808      	ldr	r0, [pc, #32]	; (801a27c <USBD_LL_Init+0x94>)
 801a25a:	f7ef fe4a 	bl	8009ef2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a25e:	2240      	movs	r2, #64	; 0x40
 801a260:	2100      	movs	r1, #0
 801a262:	4806      	ldr	r0, [pc, #24]	; (801a27c <USBD_LL_Init+0x94>)
 801a264:	f7ef fdfe 	bl	8009e64 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a268:	2280      	movs	r2, #128	; 0x80
 801a26a:	2101      	movs	r1, #1
 801a26c:	4803      	ldr	r0, [pc, #12]	; (801a27c <USBD_LL_Init+0x94>)
 801a26e:	f7ef fdf9 	bl	8009e64 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a272:	2300      	movs	r3, #0
}
 801a274:	4618      	mov	r0, r3
 801a276:	3708      	adds	r7, #8
 801a278:	46bd      	mov	sp, r7
 801a27a:	bd80      	pop	{r7, pc}
 801a27c:	2001e0e4 	.word	0x2001e0e4

0801a280 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a280:	b580      	push	{r7, lr}
 801a282:	b084      	sub	sp, #16
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a288:	2300      	movs	r3, #0
 801a28a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a28c:	2300      	movs	r3, #0
 801a28e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a296:	4618      	mov	r0, r3
 801a298:	f7ee fdc5 	bl	8008e26 <HAL_PCD_Start>
 801a29c:	4603      	mov	r3, r0
 801a29e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801a2a0:	7bfb      	ldrb	r3, [r7, #15]
 801a2a2:	4618      	mov	r0, r3
 801a2a4:	f000 f97e 	bl	801a5a4 <USBD_Get_USB_Status>
 801a2a8:	4603      	mov	r3, r0
 801a2aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2ae:	4618      	mov	r0, r3
 801a2b0:	3710      	adds	r7, #16
 801a2b2:	46bd      	mov	sp, r7
 801a2b4:	bd80      	pop	{r7, pc}

0801a2b6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a2b6:	b580      	push	{r7, lr}
 801a2b8:	b084      	sub	sp, #16
 801a2ba:	af00      	add	r7, sp, #0
 801a2bc:	6078      	str	r0, [r7, #4]
 801a2be:	4608      	mov	r0, r1
 801a2c0:	4611      	mov	r1, r2
 801a2c2:	461a      	mov	r2, r3
 801a2c4:	4603      	mov	r3, r0
 801a2c6:	70fb      	strb	r3, [r7, #3]
 801a2c8:	460b      	mov	r3, r1
 801a2ca:	70bb      	strb	r3, [r7, #2]
 801a2cc:	4613      	mov	r3, r2
 801a2ce:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a2d0:	2300      	movs	r3, #0
 801a2d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a2d4:	2300      	movs	r3, #0
 801a2d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a2de:	78bb      	ldrb	r3, [r7, #2]
 801a2e0:	883a      	ldrh	r2, [r7, #0]
 801a2e2:	78f9      	ldrb	r1, [r7, #3]
 801a2e4:	f7ef f9c5 	bl	8009672 <HAL_PCD_EP_Open>
 801a2e8:	4603      	mov	r3, r0
 801a2ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a2ec:	7bfb      	ldrb	r3, [r7, #15]
 801a2ee:	4618      	mov	r0, r3
 801a2f0:	f000 f958 	bl	801a5a4 <USBD_Get_USB_Status>
 801a2f4:	4603      	mov	r3, r0
 801a2f6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a2f8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2fa:	4618      	mov	r0, r3
 801a2fc:	3710      	adds	r7, #16
 801a2fe:	46bd      	mov	sp, r7
 801a300:	bd80      	pop	{r7, pc}

0801a302 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a302:	b580      	push	{r7, lr}
 801a304:	b084      	sub	sp, #16
 801a306:	af00      	add	r7, sp, #0
 801a308:	6078      	str	r0, [r7, #4]
 801a30a:	460b      	mov	r3, r1
 801a30c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a30e:	2300      	movs	r3, #0
 801a310:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a312:	2300      	movs	r3, #0
 801a314:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a316:	687b      	ldr	r3, [r7, #4]
 801a318:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a31c:	78fa      	ldrb	r2, [r7, #3]
 801a31e:	4611      	mov	r1, r2
 801a320:	4618      	mov	r0, r3
 801a322:	f7ef fa0e 	bl	8009742 <HAL_PCD_EP_Close>
 801a326:	4603      	mov	r3, r0
 801a328:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801a32a:	7bfb      	ldrb	r3, [r7, #15]
 801a32c:	4618      	mov	r0, r3
 801a32e:	f000 f939 	bl	801a5a4 <USBD_Get_USB_Status>
 801a332:	4603      	mov	r3, r0
 801a334:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801a336:	7bbb      	ldrb	r3, [r7, #14]
}
 801a338:	4618      	mov	r0, r3
 801a33a:	3710      	adds	r7, #16
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}

0801a340 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a340:	b580      	push	{r7, lr}
 801a342:	b084      	sub	sp, #16
 801a344:	af00      	add	r7, sp, #0
 801a346:	6078      	str	r0, [r7, #4]
 801a348:	460b      	mov	r3, r1
 801a34a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a34c:	2300      	movs	r3, #0
 801a34e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a350:	2300      	movs	r3, #0
 801a352:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a354:	687b      	ldr	r3, [r7, #4]
 801a356:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a35a:	78fa      	ldrb	r2, [r7, #3]
 801a35c:	4611      	mov	r1, r2
 801a35e:	4618      	mov	r0, r3
 801a360:	f7ef fae6 	bl	8009930 <HAL_PCD_EP_SetStall>
 801a364:	4603      	mov	r3, r0
 801a366:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a368:	7bfb      	ldrb	r3, [r7, #15]
 801a36a:	4618      	mov	r0, r3
 801a36c:	f000 f91a 	bl	801a5a4 <USBD_Get_USB_Status>
 801a370:	4603      	mov	r3, r0
 801a372:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a374:	7bbb      	ldrb	r3, [r7, #14]
}
 801a376:	4618      	mov	r0, r3
 801a378:	3710      	adds	r7, #16
 801a37a:	46bd      	mov	sp, r7
 801a37c:	bd80      	pop	{r7, pc}

0801a37e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a37e:	b580      	push	{r7, lr}
 801a380:	b084      	sub	sp, #16
 801a382:	af00      	add	r7, sp, #0
 801a384:	6078      	str	r0, [r7, #4]
 801a386:	460b      	mov	r3, r1
 801a388:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a38a:	2300      	movs	r3, #0
 801a38c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a38e:	2300      	movs	r3, #0
 801a390:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a392:	687b      	ldr	r3, [r7, #4]
 801a394:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a398:	78fa      	ldrb	r2, [r7, #3]
 801a39a:	4611      	mov	r1, r2
 801a39c:	4618      	mov	r0, r3
 801a39e:	f7ef fb2b 	bl	80099f8 <HAL_PCD_EP_ClrStall>
 801a3a2:	4603      	mov	r3, r0
 801a3a4:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801a3a6:	7bfb      	ldrb	r3, [r7, #15]
 801a3a8:	4618      	mov	r0, r3
 801a3aa:	f000 f8fb 	bl	801a5a4 <USBD_Get_USB_Status>
 801a3ae:	4603      	mov	r3, r0
 801a3b0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801a3b2:	7bbb      	ldrb	r3, [r7, #14]
}
 801a3b4:	4618      	mov	r0, r3
 801a3b6:	3710      	adds	r7, #16
 801a3b8:	46bd      	mov	sp, r7
 801a3ba:	bd80      	pop	{r7, pc}

0801a3bc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a3bc:	b480      	push	{r7}
 801a3be:	b085      	sub	sp, #20
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	6078      	str	r0, [r7, #4]
 801a3c4:	460b      	mov	r3, r1
 801a3c6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a3ce:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801a3d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	da0b      	bge.n	801a3f0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801a3d8:	78fb      	ldrb	r3, [r7, #3]
 801a3da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a3de:	68f9      	ldr	r1, [r7, #12]
 801a3e0:	4613      	mov	r3, r2
 801a3e2:	00db      	lsls	r3, r3, #3
 801a3e4:	1a9b      	subs	r3, r3, r2
 801a3e6:	009b      	lsls	r3, r3, #2
 801a3e8:	440b      	add	r3, r1
 801a3ea:	333e      	adds	r3, #62	; 0x3e
 801a3ec:	781b      	ldrb	r3, [r3, #0]
 801a3ee:	e00b      	b.n	801a408 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801a3f0:	78fb      	ldrb	r3, [r7, #3]
 801a3f2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a3f6:	68f9      	ldr	r1, [r7, #12]
 801a3f8:	4613      	mov	r3, r2
 801a3fa:	00db      	lsls	r3, r3, #3
 801a3fc:	1a9b      	subs	r3, r3, r2
 801a3fe:	009b      	lsls	r3, r3, #2
 801a400:	440b      	add	r3, r1
 801a402:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a406:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a408:	4618      	mov	r0, r3
 801a40a:	3714      	adds	r7, #20
 801a40c:	46bd      	mov	sp, r7
 801a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a412:	4770      	bx	lr

0801a414 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a414:	b580      	push	{r7, lr}
 801a416:	b084      	sub	sp, #16
 801a418:	af00      	add	r7, sp, #0
 801a41a:	6078      	str	r0, [r7, #4]
 801a41c:	460b      	mov	r3, r1
 801a41e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a420:	2300      	movs	r3, #0
 801a422:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a424:	2300      	movs	r3, #0
 801a426:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a42e:	78fa      	ldrb	r2, [r7, #3]
 801a430:	4611      	mov	r1, r2
 801a432:	4618      	mov	r0, r3
 801a434:	f7ef f8f8 	bl	8009628 <HAL_PCD_SetAddress>
 801a438:	4603      	mov	r3, r0
 801a43a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a43c:	7bfb      	ldrb	r3, [r7, #15]
 801a43e:	4618      	mov	r0, r3
 801a440:	f000 f8b0 	bl	801a5a4 <USBD_Get_USB_Status>
 801a444:	4603      	mov	r3, r0
 801a446:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a448:	7bbb      	ldrb	r3, [r7, #14]
}
 801a44a:	4618      	mov	r0, r3
 801a44c:	3710      	adds	r7, #16
 801a44e:	46bd      	mov	sp, r7
 801a450:	bd80      	pop	{r7, pc}

0801a452 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a452:	b580      	push	{r7, lr}
 801a454:	b086      	sub	sp, #24
 801a456:	af00      	add	r7, sp, #0
 801a458:	60f8      	str	r0, [r7, #12]
 801a45a:	607a      	str	r2, [r7, #4]
 801a45c:	603b      	str	r3, [r7, #0]
 801a45e:	460b      	mov	r3, r1
 801a460:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a462:	2300      	movs	r3, #0
 801a464:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a466:	2300      	movs	r3, #0
 801a468:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a470:	7af9      	ldrb	r1, [r7, #11]
 801a472:	683b      	ldr	r3, [r7, #0]
 801a474:	687a      	ldr	r2, [r7, #4]
 801a476:	f7ef fa11 	bl	800989c <HAL_PCD_EP_Transmit>
 801a47a:	4603      	mov	r3, r0
 801a47c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801a47e:	7dfb      	ldrb	r3, [r7, #23]
 801a480:	4618      	mov	r0, r3
 801a482:	f000 f88f 	bl	801a5a4 <USBD_Get_USB_Status>
 801a486:	4603      	mov	r3, r0
 801a488:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801a48a:	7dbb      	ldrb	r3, [r7, #22]
}
 801a48c:	4618      	mov	r0, r3
 801a48e:	3718      	adds	r7, #24
 801a490:	46bd      	mov	sp, r7
 801a492:	bd80      	pop	{r7, pc}

0801a494 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b086      	sub	sp, #24
 801a498:	af00      	add	r7, sp, #0
 801a49a:	60f8      	str	r0, [r7, #12]
 801a49c:	607a      	str	r2, [r7, #4]
 801a49e:	603b      	str	r3, [r7, #0]
 801a4a0:	460b      	mov	r3, r1
 801a4a2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a4a4:	2300      	movs	r3, #0
 801a4a6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a4a8:	2300      	movs	r3, #0
 801a4aa:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a4ac:	68fb      	ldr	r3, [r7, #12]
 801a4ae:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a4b2:	7af9      	ldrb	r1, [r7, #11]
 801a4b4:	683b      	ldr	r3, [r7, #0]
 801a4b6:	687a      	ldr	r2, [r7, #4]
 801a4b8:	f7ef f98d 	bl	80097d6 <HAL_PCD_EP_Receive>
 801a4bc:	4603      	mov	r3, r0
 801a4be:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a4c0:	7dfb      	ldrb	r3, [r7, #23]
 801a4c2:	4618      	mov	r0, r3
 801a4c4:	f000 f86e 	bl	801a5a4 <USBD_Get_USB_Status>
 801a4c8:	4603      	mov	r3, r0
 801a4ca:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801a4cc:	7dbb      	ldrb	r3, [r7, #22]
}
 801a4ce:	4618      	mov	r0, r3
 801a4d0:	3718      	adds	r7, #24
 801a4d2:	46bd      	mov	sp, r7
 801a4d4:	bd80      	pop	{r7, pc}

0801a4d6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a4d6:	b580      	push	{r7, lr}
 801a4d8:	b082      	sub	sp, #8
 801a4da:	af00      	add	r7, sp, #0
 801a4dc:	6078      	str	r0, [r7, #4]
 801a4de:	460b      	mov	r3, r1
 801a4e0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a4e2:	687b      	ldr	r3, [r7, #4]
 801a4e4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a4e8:	78fa      	ldrb	r2, [r7, #3]
 801a4ea:	4611      	mov	r1, r2
 801a4ec:	4618      	mov	r0, r3
 801a4ee:	f7ef f9bd 	bl	800986c <HAL_PCD_EP_GetRxCount>
 801a4f2:	4603      	mov	r3, r0
}
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	3708      	adds	r7, #8
 801a4f8:	46bd      	mov	sp, r7
 801a4fa:	bd80      	pop	{r7, pc}

0801a4fc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b082      	sub	sp, #8
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]
 801a504:	460b      	mov	r3, r1
 801a506:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801a508:	78fb      	ldrb	r3, [r7, #3]
 801a50a:	2b00      	cmp	r3, #0
 801a50c:	d002      	beq.n	801a514 <HAL_PCDEx_LPM_Callback+0x18>
 801a50e:	2b01      	cmp	r3, #1
 801a510:	d01f      	beq.n	801a552 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 801a512:	e03b      	b.n	801a58c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	6a1b      	ldr	r3, [r3, #32]
 801a518:	2b00      	cmp	r3, #0
 801a51a:	d007      	beq.n	801a52c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a51c:	f000 f83c 	bl	801a598 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a520:	4b1c      	ldr	r3, [pc, #112]	; (801a594 <HAL_PCDEx_LPM_Callback+0x98>)
 801a522:	691b      	ldr	r3, [r3, #16]
 801a524:	4a1b      	ldr	r2, [pc, #108]	; (801a594 <HAL_PCDEx_LPM_Callback+0x98>)
 801a526:	f023 0306 	bic.w	r3, r3, #6
 801a52a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a52c:	687b      	ldr	r3, [r7, #4]
 801a52e:	681b      	ldr	r3, [r3, #0]
 801a530:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	687a      	ldr	r2, [r7, #4]
 801a538:	6812      	ldr	r2, [r2, #0]
 801a53a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a53e:	f023 0301 	bic.w	r3, r3, #1
 801a542:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a54a:	4618      	mov	r0, r3
 801a54c:	f7f7 fcbe 	bl	8011ecc <USBD_LL_Resume>
    break;
 801a550:	e01c      	b.n	801a58c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	687a      	ldr	r2, [r7, #4]
 801a55e:	6812      	ldr	r2, [r2, #0]
 801a560:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a564:	f043 0301 	orr.w	r3, r3, #1
 801a568:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801a56a:	687b      	ldr	r3, [r7, #4]
 801a56c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a570:	4618      	mov	r0, r3
 801a572:	f7f7 fc96 	bl	8011ea2 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	6a1b      	ldr	r3, [r3, #32]
 801a57a:	2b00      	cmp	r3, #0
 801a57c:	d005      	beq.n	801a58a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a57e:	4b05      	ldr	r3, [pc, #20]	; (801a594 <HAL_PCDEx_LPM_Callback+0x98>)
 801a580:	691b      	ldr	r3, [r3, #16]
 801a582:	4a04      	ldr	r2, [pc, #16]	; (801a594 <HAL_PCDEx_LPM_Callback+0x98>)
 801a584:	f043 0306 	orr.w	r3, r3, #6
 801a588:	6113      	str	r3, [r2, #16]
    break;   
 801a58a:	bf00      	nop
}
 801a58c:	bf00      	nop
 801a58e:	3708      	adds	r7, #8
 801a590:	46bd      	mov	sp, r7
 801a592:	bd80      	pop	{r7, pc}
 801a594:	e000ed00 	.word	0xe000ed00

0801a598 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a598:	b580      	push	{r7, lr}
 801a59a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a59c:	f7ea f8aa 	bl	80046f4 <SystemClock_Config>
}
 801a5a0:	bf00      	nop
 801a5a2:	bd80      	pop	{r7, pc}

0801a5a4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a5a4:	b480      	push	{r7}
 801a5a6:	b085      	sub	sp, #20
 801a5a8:	af00      	add	r7, sp, #0
 801a5aa:	4603      	mov	r3, r0
 801a5ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a5ae:	2300      	movs	r3, #0
 801a5b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a5b2:	79fb      	ldrb	r3, [r7, #7]
 801a5b4:	2b03      	cmp	r3, #3
 801a5b6:	d817      	bhi.n	801a5e8 <USBD_Get_USB_Status+0x44>
 801a5b8:	a201      	add	r2, pc, #4	; (adr r2, 801a5c0 <USBD_Get_USB_Status+0x1c>)
 801a5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a5be:	bf00      	nop
 801a5c0:	0801a5d1 	.word	0x0801a5d1
 801a5c4:	0801a5d7 	.word	0x0801a5d7
 801a5c8:	0801a5dd 	.word	0x0801a5dd
 801a5cc:	0801a5e3 	.word	0x0801a5e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a5d0:	2300      	movs	r3, #0
 801a5d2:	73fb      	strb	r3, [r7, #15]
    break;
 801a5d4:	e00b      	b.n	801a5ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a5d6:	2303      	movs	r3, #3
 801a5d8:	73fb      	strb	r3, [r7, #15]
    break;
 801a5da:	e008      	b.n	801a5ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a5dc:	2301      	movs	r3, #1
 801a5de:	73fb      	strb	r3, [r7, #15]
    break;
 801a5e0:	e005      	b.n	801a5ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a5e2:	2303      	movs	r3, #3
 801a5e4:	73fb      	strb	r3, [r7, #15]
    break;
 801a5e6:	e002      	b.n	801a5ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a5e8:	2303      	movs	r3, #3
 801a5ea:	73fb      	strb	r3, [r7, #15]
    break;
 801a5ec:	bf00      	nop
  }
  return usb_status;
 801a5ee:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3714      	adds	r7, #20
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5fa:	4770      	bx	lr

0801a5fc <__errno>:
 801a5fc:	4b01      	ldr	r3, [pc, #4]	; (801a604 <__errno+0x8>)
 801a5fe:	6818      	ldr	r0, [r3, #0]
 801a600:	4770      	bx	lr
 801a602:	bf00      	nop
 801a604:	20000218 	.word	0x20000218

0801a608 <__libc_init_array>:
 801a608:	b570      	push	{r4, r5, r6, lr}
 801a60a:	4e0d      	ldr	r6, [pc, #52]	; (801a640 <__libc_init_array+0x38>)
 801a60c:	4c0d      	ldr	r4, [pc, #52]	; (801a644 <__libc_init_array+0x3c>)
 801a60e:	1ba4      	subs	r4, r4, r6
 801a610:	10a4      	asrs	r4, r4, #2
 801a612:	2500      	movs	r5, #0
 801a614:	42a5      	cmp	r5, r4
 801a616:	d109      	bne.n	801a62c <__libc_init_array+0x24>
 801a618:	4e0b      	ldr	r6, [pc, #44]	; (801a648 <__libc_init_array+0x40>)
 801a61a:	4c0c      	ldr	r4, [pc, #48]	; (801a64c <__libc_init_array+0x44>)
 801a61c:	f002 fadc 	bl	801cbd8 <_init>
 801a620:	1ba4      	subs	r4, r4, r6
 801a622:	10a4      	asrs	r4, r4, #2
 801a624:	2500      	movs	r5, #0
 801a626:	42a5      	cmp	r5, r4
 801a628:	d105      	bne.n	801a636 <__libc_init_array+0x2e>
 801a62a:	bd70      	pop	{r4, r5, r6, pc}
 801a62c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a630:	4798      	blx	r3
 801a632:	3501      	adds	r5, #1
 801a634:	e7ee      	b.n	801a614 <__libc_init_array+0xc>
 801a636:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a63a:	4798      	blx	r3
 801a63c:	3501      	adds	r5, #1
 801a63e:	e7f2      	b.n	801a626 <__libc_init_array+0x1e>
 801a640:	0801da00 	.word	0x0801da00
 801a644:	0801da00 	.word	0x0801da00
 801a648:	0801da00 	.word	0x0801da00
 801a64c:	0801da04 	.word	0x0801da04

0801a650 <malloc>:
 801a650:	4b02      	ldr	r3, [pc, #8]	; (801a65c <malloc+0xc>)
 801a652:	4601      	mov	r1, r0
 801a654:	6818      	ldr	r0, [r3, #0]
 801a656:	f000 b86d 	b.w	801a734 <_malloc_r>
 801a65a:	bf00      	nop
 801a65c:	20000218 	.word	0x20000218

0801a660 <free>:
 801a660:	4b02      	ldr	r3, [pc, #8]	; (801a66c <free+0xc>)
 801a662:	4601      	mov	r1, r0
 801a664:	6818      	ldr	r0, [r3, #0]
 801a666:	f000 b817 	b.w	801a698 <_free_r>
 801a66a:	bf00      	nop
 801a66c:	20000218 	.word	0x20000218

0801a670 <memcpy>:
 801a670:	b510      	push	{r4, lr}
 801a672:	1e43      	subs	r3, r0, #1
 801a674:	440a      	add	r2, r1
 801a676:	4291      	cmp	r1, r2
 801a678:	d100      	bne.n	801a67c <memcpy+0xc>
 801a67a:	bd10      	pop	{r4, pc}
 801a67c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a680:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a684:	e7f7      	b.n	801a676 <memcpy+0x6>

0801a686 <memset>:
 801a686:	4402      	add	r2, r0
 801a688:	4603      	mov	r3, r0
 801a68a:	4293      	cmp	r3, r2
 801a68c:	d100      	bne.n	801a690 <memset+0xa>
 801a68e:	4770      	bx	lr
 801a690:	f803 1b01 	strb.w	r1, [r3], #1
 801a694:	e7f9      	b.n	801a68a <memset+0x4>
	...

0801a698 <_free_r>:
 801a698:	b538      	push	{r3, r4, r5, lr}
 801a69a:	4605      	mov	r5, r0
 801a69c:	2900      	cmp	r1, #0
 801a69e:	d045      	beq.n	801a72c <_free_r+0x94>
 801a6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6a4:	1f0c      	subs	r4, r1, #4
 801a6a6:	2b00      	cmp	r3, #0
 801a6a8:	bfb8      	it	lt
 801a6aa:	18e4      	addlt	r4, r4, r3
 801a6ac:	f000 f91a 	bl	801a8e4 <__malloc_lock>
 801a6b0:	4a1f      	ldr	r2, [pc, #124]	; (801a730 <_free_r+0x98>)
 801a6b2:	6813      	ldr	r3, [r2, #0]
 801a6b4:	4610      	mov	r0, r2
 801a6b6:	b933      	cbnz	r3, 801a6c6 <_free_r+0x2e>
 801a6b8:	6063      	str	r3, [r4, #4]
 801a6ba:	6014      	str	r4, [r2, #0]
 801a6bc:	4628      	mov	r0, r5
 801a6be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a6c2:	f000 b910 	b.w	801a8e6 <__malloc_unlock>
 801a6c6:	42a3      	cmp	r3, r4
 801a6c8:	d90c      	bls.n	801a6e4 <_free_r+0x4c>
 801a6ca:	6821      	ldr	r1, [r4, #0]
 801a6cc:	1862      	adds	r2, r4, r1
 801a6ce:	4293      	cmp	r3, r2
 801a6d0:	bf04      	itt	eq
 801a6d2:	681a      	ldreq	r2, [r3, #0]
 801a6d4:	685b      	ldreq	r3, [r3, #4]
 801a6d6:	6063      	str	r3, [r4, #4]
 801a6d8:	bf04      	itt	eq
 801a6da:	1852      	addeq	r2, r2, r1
 801a6dc:	6022      	streq	r2, [r4, #0]
 801a6de:	6004      	str	r4, [r0, #0]
 801a6e0:	e7ec      	b.n	801a6bc <_free_r+0x24>
 801a6e2:	4613      	mov	r3, r2
 801a6e4:	685a      	ldr	r2, [r3, #4]
 801a6e6:	b10a      	cbz	r2, 801a6ec <_free_r+0x54>
 801a6e8:	42a2      	cmp	r2, r4
 801a6ea:	d9fa      	bls.n	801a6e2 <_free_r+0x4a>
 801a6ec:	6819      	ldr	r1, [r3, #0]
 801a6ee:	1858      	adds	r0, r3, r1
 801a6f0:	42a0      	cmp	r0, r4
 801a6f2:	d10b      	bne.n	801a70c <_free_r+0x74>
 801a6f4:	6820      	ldr	r0, [r4, #0]
 801a6f6:	4401      	add	r1, r0
 801a6f8:	1858      	adds	r0, r3, r1
 801a6fa:	4282      	cmp	r2, r0
 801a6fc:	6019      	str	r1, [r3, #0]
 801a6fe:	d1dd      	bne.n	801a6bc <_free_r+0x24>
 801a700:	6810      	ldr	r0, [r2, #0]
 801a702:	6852      	ldr	r2, [r2, #4]
 801a704:	605a      	str	r2, [r3, #4]
 801a706:	4401      	add	r1, r0
 801a708:	6019      	str	r1, [r3, #0]
 801a70a:	e7d7      	b.n	801a6bc <_free_r+0x24>
 801a70c:	d902      	bls.n	801a714 <_free_r+0x7c>
 801a70e:	230c      	movs	r3, #12
 801a710:	602b      	str	r3, [r5, #0]
 801a712:	e7d3      	b.n	801a6bc <_free_r+0x24>
 801a714:	6820      	ldr	r0, [r4, #0]
 801a716:	1821      	adds	r1, r4, r0
 801a718:	428a      	cmp	r2, r1
 801a71a:	bf04      	itt	eq
 801a71c:	6811      	ldreq	r1, [r2, #0]
 801a71e:	6852      	ldreq	r2, [r2, #4]
 801a720:	6062      	str	r2, [r4, #4]
 801a722:	bf04      	itt	eq
 801a724:	1809      	addeq	r1, r1, r0
 801a726:	6021      	streq	r1, [r4, #0]
 801a728:	605c      	str	r4, [r3, #4]
 801a72a:	e7c7      	b.n	801a6bc <_free_r+0x24>
 801a72c:	bd38      	pop	{r3, r4, r5, pc}
 801a72e:	bf00      	nop
 801a730:	20008900 	.word	0x20008900

0801a734 <_malloc_r>:
 801a734:	b570      	push	{r4, r5, r6, lr}
 801a736:	1ccd      	adds	r5, r1, #3
 801a738:	f025 0503 	bic.w	r5, r5, #3
 801a73c:	3508      	adds	r5, #8
 801a73e:	2d0c      	cmp	r5, #12
 801a740:	bf38      	it	cc
 801a742:	250c      	movcc	r5, #12
 801a744:	2d00      	cmp	r5, #0
 801a746:	4606      	mov	r6, r0
 801a748:	db01      	blt.n	801a74e <_malloc_r+0x1a>
 801a74a:	42a9      	cmp	r1, r5
 801a74c:	d903      	bls.n	801a756 <_malloc_r+0x22>
 801a74e:	230c      	movs	r3, #12
 801a750:	6033      	str	r3, [r6, #0]
 801a752:	2000      	movs	r0, #0
 801a754:	bd70      	pop	{r4, r5, r6, pc}
 801a756:	f000 f8c5 	bl	801a8e4 <__malloc_lock>
 801a75a:	4a21      	ldr	r2, [pc, #132]	; (801a7e0 <_malloc_r+0xac>)
 801a75c:	6814      	ldr	r4, [r2, #0]
 801a75e:	4621      	mov	r1, r4
 801a760:	b991      	cbnz	r1, 801a788 <_malloc_r+0x54>
 801a762:	4c20      	ldr	r4, [pc, #128]	; (801a7e4 <_malloc_r+0xb0>)
 801a764:	6823      	ldr	r3, [r4, #0]
 801a766:	b91b      	cbnz	r3, 801a770 <_malloc_r+0x3c>
 801a768:	4630      	mov	r0, r6
 801a76a:	f000 f83d 	bl	801a7e8 <_sbrk_r>
 801a76e:	6020      	str	r0, [r4, #0]
 801a770:	4629      	mov	r1, r5
 801a772:	4630      	mov	r0, r6
 801a774:	f000 f838 	bl	801a7e8 <_sbrk_r>
 801a778:	1c43      	adds	r3, r0, #1
 801a77a:	d124      	bne.n	801a7c6 <_malloc_r+0x92>
 801a77c:	230c      	movs	r3, #12
 801a77e:	6033      	str	r3, [r6, #0]
 801a780:	4630      	mov	r0, r6
 801a782:	f000 f8b0 	bl	801a8e6 <__malloc_unlock>
 801a786:	e7e4      	b.n	801a752 <_malloc_r+0x1e>
 801a788:	680b      	ldr	r3, [r1, #0]
 801a78a:	1b5b      	subs	r3, r3, r5
 801a78c:	d418      	bmi.n	801a7c0 <_malloc_r+0x8c>
 801a78e:	2b0b      	cmp	r3, #11
 801a790:	d90f      	bls.n	801a7b2 <_malloc_r+0x7e>
 801a792:	600b      	str	r3, [r1, #0]
 801a794:	50cd      	str	r5, [r1, r3]
 801a796:	18cc      	adds	r4, r1, r3
 801a798:	4630      	mov	r0, r6
 801a79a:	f000 f8a4 	bl	801a8e6 <__malloc_unlock>
 801a79e:	f104 000b 	add.w	r0, r4, #11
 801a7a2:	1d23      	adds	r3, r4, #4
 801a7a4:	f020 0007 	bic.w	r0, r0, #7
 801a7a8:	1ac3      	subs	r3, r0, r3
 801a7aa:	d0d3      	beq.n	801a754 <_malloc_r+0x20>
 801a7ac:	425a      	negs	r2, r3
 801a7ae:	50e2      	str	r2, [r4, r3]
 801a7b0:	e7d0      	b.n	801a754 <_malloc_r+0x20>
 801a7b2:	428c      	cmp	r4, r1
 801a7b4:	684b      	ldr	r3, [r1, #4]
 801a7b6:	bf16      	itet	ne
 801a7b8:	6063      	strne	r3, [r4, #4]
 801a7ba:	6013      	streq	r3, [r2, #0]
 801a7bc:	460c      	movne	r4, r1
 801a7be:	e7eb      	b.n	801a798 <_malloc_r+0x64>
 801a7c0:	460c      	mov	r4, r1
 801a7c2:	6849      	ldr	r1, [r1, #4]
 801a7c4:	e7cc      	b.n	801a760 <_malloc_r+0x2c>
 801a7c6:	1cc4      	adds	r4, r0, #3
 801a7c8:	f024 0403 	bic.w	r4, r4, #3
 801a7cc:	42a0      	cmp	r0, r4
 801a7ce:	d005      	beq.n	801a7dc <_malloc_r+0xa8>
 801a7d0:	1a21      	subs	r1, r4, r0
 801a7d2:	4630      	mov	r0, r6
 801a7d4:	f000 f808 	bl	801a7e8 <_sbrk_r>
 801a7d8:	3001      	adds	r0, #1
 801a7da:	d0cf      	beq.n	801a77c <_malloc_r+0x48>
 801a7dc:	6025      	str	r5, [r4, #0]
 801a7de:	e7db      	b.n	801a798 <_malloc_r+0x64>
 801a7e0:	20008900 	.word	0x20008900
 801a7e4:	20008904 	.word	0x20008904

0801a7e8 <_sbrk_r>:
 801a7e8:	b538      	push	{r3, r4, r5, lr}
 801a7ea:	4c06      	ldr	r4, [pc, #24]	; (801a804 <_sbrk_r+0x1c>)
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	4605      	mov	r5, r0
 801a7f0:	4608      	mov	r0, r1
 801a7f2:	6023      	str	r3, [r4, #0]
 801a7f4:	f7eb f9a8 	bl	8005b48 <_sbrk>
 801a7f8:	1c43      	adds	r3, r0, #1
 801a7fa:	d102      	bne.n	801a802 <_sbrk_r+0x1a>
 801a7fc:	6823      	ldr	r3, [r4, #0]
 801a7fe:	b103      	cbz	r3, 801a802 <_sbrk_r+0x1a>
 801a800:	602b      	str	r3, [r5, #0]
 801a802:	bd38      	pop	{r3, r4, r5, pc}
 801a804:	2001e4e8 	.word	0x2001e4e8

0801a808 <sniprintf>:
 801a808:	b40c      	push	{r2, r3}
 801a80a:	b530      	push	{r4, r5, lr}
 801a80c:	4b17      	ldr	r3, [pc, #92]	; (801a86c <sniprintf+0x64>)
 801a80e:	1e0c      	subs	r4, r1, #0
 801a810:	b09d      	sub	sp, #116	; 0x74
 801a812:	681d      	ldr	r5, [r3, #0]
 801a814:	da08      	bge.n	801a828 <sniprintf+0x20>
 801a816:	238b      	movs	r3, #139	; 0x8b
 801a818:	602b      	str	r3, [r5, #0]
 801a81a:	f04f 30ff 	mov.w	r0, #4294967295
 801a81e:	b01d      	add	sp, #116	; 0x74
 801a820:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a824:	b002      	add	sp, #8
 801a826:	4770      	bx	lr
 801a828:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a82c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a830:	bf14      	ite	ne
 801a832:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a836:	4623      	moveq	r3, r4
 801a838:	9304      	str	r3, [sp, #16]
 801a83a:	9307      	str	r3, [sp, #28]
 801a83c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a840:	9002      	str	r0, [sp, #8]
 801a842:	9006      	str	r0, [sp, #24]
 801a844:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a848:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a84a:	ab21      	add	r3, sp, #132	; 0x84
 801a84c:	a902      	add	r1, sp, #8
 801a84e:	4628      	mov	r0, r5
 801a850:	9301      	str	r3, [sp, #4]
 801a852:	f000 f8a3 	bl	801a99c <_svfiprintf_r>
 801a856:	1c43      	adds	r3, r0, #1
 801a858:	bfbc      	itt	lt
 801a85a:	238b      	movlt	r3, #139	; 0x8b
 801a85c:	602b      	strlt	r3, [r5, #0]
 801a85e:	2c00      	cmp	r4, #0
 801a860:	d0dd      	beq.n	801a81e <sniprintf+0x16>
 801a862:	9b02      	ldr	r3, [sp, #8]
 801a864:	2200      	movs	r2, #0
 801a866:	701a      	strb	r2, [r3, #0]
 801a868:	e7d9      	b.n	801a81e <sniprintf+0x16>
 801a86a:	bf00      	nop
 801a86c:	20000218 	.word	0x20000218

0801a870 <_vsniprintf_r>:
 801a870:	b530      	push	{r4, r5, lr}
 801a872:	1e14      	subs	r4, r2, #0
 801a874:	4605      	mov	r5, r0
 801a876:	b09b      	sub	sp, #108	; 0x6c
 801a878:	4618      	mov	r0, r3
 801a87a:	da05      	bge.n	801a888 <_vsniprintf_r+0x18>
 801a87c:	238b      	movs	r3, #139	; 0x8b
 801a87e:	602b      	str	r3, [r5, #0]
 801a880:	f04f 30ff 	mov.w	r0, #4294967295
 801a884:	b01b      	add	sp, #108	; 0x6c
 801a886:	bd30      	pop	{r4, r5, pc}
 801a888:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a88c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a890:	bf14      	ite	ne
 801a892:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a896:	4623      	moveq	r3, r4
 801a898:	9302      	str	r3, [sp, #8]
 801a89a:	9305      	str	r3, [sp, #20]
 801a89c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a8a0:	9100      	str	r1, [sp, #0]
 801a8a2:	9104      	str	r1, [sp, #16]
 801a8a4:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a8a8:	4602      	mov	r2, r0
 801a8aa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a8ac:	4669      	mov	r1, sp
 801a8ae:	4628      	mov	r0, r5
 801a8b0:	f000 f874 	bl	801a99c <_svfiprintf_r>
 801a8b4:	1c43      	adds	r3, r0, #1
 801a8b6:	bfbc      	itt	lt
 801a8b8:	238b      	movlt	r3, #139	; 0x8b
 801a8ba:	602b      	strlt	r3, [r5, #0]
 801a8bc:	2c00      	cmp	r4, #0
 801a8be:	d0e1      	beq.n	801a884 <_vsniprintf_r+0x14>
 801a8c0:	9b00      	ldr	r3, [sp, #0]
 801a8c2:	2200      	movs	r2, #0
 801a8c4:	701a      	strb	r2, [r3, #0]
 801a8c6:	e7dd      	b.n	801a884 <_vsniprintf_r+0x14>

0801a8c8 <vsniprintf>:
 801a8c8:	b507      	push	{r0, r1, r2, lr}
 801a8ca:	9300      	str	r3, [sp, #0]
 801a8cc:	4613      	mov	r3, r2
 801a8ce:	460a      	mov	r2, r1
 801a8d0:	4601      	mov	r1, r0
 801a8d2:	4803      	ldr	r0, [pc, #12]	; (801a8e0 <vsniprintf+0x18>)
 801a8d4:	6800      	ldr	r0, [r0, #0]
 801a8d6:	f7ff ffcb 	bl	801a870 <_vsniprintf_r>
 801a8da:	b003      	add	sp, #12
 801a8dc:	f85d fb04 	ldr.w	pc, [sp], #4
 801a8e0:	20000218 	.word	0x20000218

0801a8e4 <__malloc_lock>:
 801a8e4:	4770      	bx	lr

0801a8e6 <__malloc_unlock>:
 801a8e6:	4770      	bx	lr

0801a8e8 <__ssputs_r>:
 801a8e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8ec:	688e      	ldr	r6, [r1, #8]
 801a8ee:	429e      	cmp	r6, r3
 801a8f0:	4682      	mov	sl, r0
 801a8f2:	460c      	mov	r4, r1
 801a8f4:	4690      	mov	r8, r2
 801a8f6:	4699      	mov	r9, r3
 801a8f8:	d837      	bhi.n	801a96a <__ssputs_r+0x82>
 801a8fa:	898a      	ldrh	r2, [r1, #12]
 801a8fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a900:	d031      	beq.n	801a966 <__ssputs_r+0x7e>
 801a902:	6825      	ldr	r5, [r4, #0]
 801a904:	6909      	ldr	r1, [r1, #16]
 801a906:	1a6f      	subs	r7, r5, r1
 801a908:	6965      	ldr	r5, [r4, #20]
 801a90a:	2302      	movs	r3, #2
 801a90c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a910:	fb95 f5f3 	sdiv	r5, r5, r3
 801a914:	f109 0301 	add.w	r3, r9, #1
 801a918:	443b      	add	r3, r7
 801a91a:	429d      	cmp	r5, r3
 801a91c:	bf38      	it	cc
 801a91e:	461d      	movcc	r5, r3
 801a920:	0553      	lsls	r3, r2, #21
 801a922:	d530      	bpl.n	801a986 <__ssputs_r+0x9e>
 801a924:	4629      	mov	r1, r5
 801a926:	f7ff ff05 	bl	801a734 <_malloc_r>
 801a92a:	4606      	mov	r6, r0
 801a92c:	b950      	cbnz	r0, 801a944 <__ssputs_r+0x5c>
 801a92e:	230c      	movs	r3, #12
 801a930:	f8ca 3000 	str.w	r3, [sl]
 801a934:	89a3      	ldrh	r3, [r4, #12]
 801a936:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a93a:	81a3      	strh	r3, [r4, #12]
 801a93c:	f04f 30ff 	mov.w	r0, #4294967295
 801a940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a944:	463a      	mov	r2, r7
 801a946:	6921      	ldr	r1, [r4, #16]
 801a948:	f7ff fe92 	bl	801a670 <memcpy>
 801a94c:	89a3      	ldrh	r3, [r4, #12]
 801a94e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a956:	81a3      	strh	r3, [r4, #12]
 801a958:	6126      	str	r6, [r4, #16]
 801a95a:	6165      	str	r5, [r4, #20]
 801a95c:	443e      	add	r6, r7
 801a95e:	1bed      	subs	r5, r5, r7
 801a960:	6026      	str	r6, [r4, #0]
 801a962:	60a5      	str	r5, [r4, #8]
 801a964:	464e      	mov	r6, r9
 801a966:	454e      	cmp	r6, r9
 801a968:	d900      	bls.n	801a96c <__ssputs_r+0x84>
 801a96a:	464e      	mov	r6, r9
 801a96c:	4632      	mov	r2, r6
 801a96e:	4641      	mov	r1, r8
 801a970:	6820      	ldr	r0, [r4, #0]
 801a972:	f000 fa93 	bl	801ae9c <memmove>
 801a976:	68a3      	ldr	r3, [r4, #8]
 801a978:	1b9b      	subs	r3, r3, r6
 801a97a:	60a3      	str	r3, [r4, #8]
 801a97c:	6823      	ldr	r3, [r4, #0]
 801a97e:	441e      	add	r6, r3
 801a980:	6026      	str	r6, [r4, #0]
 801a982:	2000      	movs	r0, #0
 801a984:	e7dc      	b.n	801a940 <__ssputs_r+0x58>
 801a986:	462a      	mov	r2, r5
 801a988:	f000 faa1 	bl	801aece <_realloc_r>
 801a98c:	4606      	mov	r6, r0
 801a98e:	2800      	cmp	r0, #0
 801a990:	d1e2      	bne.n	801a958 <__ssputs_r+0x70>
 801a992:	6921      	ldr	r1, [r4, #16]
 801a994:	4650      	mov	r0, sl
 801a996:	f7ff fe7f 	bl	801a698 <_free_r>
 801a99a:	e7c8      	b.n	801a92e <__ssputs_r+0x46>

0801a99c <_svfiprintf_r>:
 801a99c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9a0:	461d      	mov	r5, r3
 801a9a2:	898b      	ldrh	r3, [r1, #12]
 801a9a4:	061f      	lsls	r7, r3, #24
 801a9a6:	b09d      	sub	sp, #116	; 0x74
 801a9a8:	4680      	mov	r8, r0
 801a9aa:	460c      	mov	r4, r1
 801a9ac:	4616      	mov	r6, r2
 801a9ae:	d50f      	bpl.n	801a9d0 <_svfiprintf_r+0x34>
 801a9b0:	690b      	ldr	r3, [r1, #16]
 801a9b2:	b96b      	cbnz	r3, 801a9d0 <_svfiprintf_r+0x34>
 801a9b4:	2140      	movs	r1, #64	; 0x40
 801a9b6:	f7ff febd 	bl	801a734 <_malloc_r>
 801a9ba:	6020      	str	r0, [r4, #0]
 801a9bc:	6120      	str	r0, [r4, #16]
 801a9be:	b928      	cbnz	r0, 801a9cc <_svfiprintf_r+0x30>
 801a9c0:	230c      	movs	r3, #12
 801a9c2:	f8c8 3000 	str.w	r3, [r8]
 801a9c6:	f04f 30ff 	mov.w	r0, #4294967295
 801a9ca:	e0c8      	b.n	801ab5e <_svfiprintf_r+0x1c2>
 801a9cc:	2340      	movs	r3, #64	; 0x40
 801a9ce:	6163      	str	r3, [r4, #20]
 801a9d0:	2300      	movs	r3, #0
 801a9d2:	9309      	str	r3, [sp, #36]	; 0x24
 801a9d4:	2320      	movs	r3, #32
 801a9d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a9da:	2330      	movs	r3, #48	; 0x30
 801a9dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a9e0:	9503      	str	r5, [sp, #12]
 801a9e2:	f04f 0b01 	mov.w	fp, #1
 801a9e6:	4637      	mov	r7, r6
 801a9e8:	463d      	mov	r5, r7
 801a9ea:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a9ee:	b10b      	cbz	r3, 801a9f4 <_svfiprintf_r+0x58>
 801a9f0:	2b25      	cmp	r3, #37	; 0x25
 801a9f2:	d13e      	bne.n	801aa72 <_svfiprintf_r+0xd6>
 801a9f4:	ebb7 0a06 	subs.w	sl, r7, r6
 801a9f8:	d00b      	beq.n	801aa12 <_svfiprintf_r+0x76>
 801a9fa:	4653      	mov	r3, sl
 801a9fc:	4632      	mov	r2, r6
 801a9fe:	4621      	mov	r1, r4
 801aa00:	4640      	mov	r0, r8
 801aa02:	f7ff ff71 	bl	801a8e8 <__ssputs_r>
 801aa06:	3001      	adds	r0, #1
 801aa08:	f000 80a4 	beq.w	801ab54 <_svfiprintf_r+0x1b8>
 801aa0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa0e:	4453      	add	r3, sl
 801aa10:	9309      	str	r3, [sp, #36]	; 0x24
 801aa12:	783b      	ldrb	r3, [r7, #0]
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	f000 809d 	beq.w	801ab54 <_svfiprintf_r+0x1b8>
 801aa1a:	2300      	movs	r3, #0
 801aa1c:	f04f 32ff 	mov.w	r2, #4294967295
 801aa20:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801aa24:	9304      	str	r3, [sp, #16]
 801aa26:	9307      	str	r3, [sp, #28]
 801aa28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801aa2c:	931a      	str	r3, [sp, #104]	; 0x68
 801aa2e:	462f      	mov	r7, r5
 801aa30:	2205      	movs	r2, #5
 801aa32:	f817 1b01 	ldrb.w	r1, [r7], #1
 801aa36:	4850      	ldr	r0, [pc, #320]	; (801ab78 <_svfiprintf_r+0x1dc>)
 801aa38:	f7e5 fbf2 	bl	8000220 <memchr>
 801aa3c:	9b04      	ldr	r3, [sp, #16]
 801aa3e:	b9d0      	cbnz	r0, 801aa76 <_svfiprintf_r+0xda>
 801aa40:	06d9      	lsls	r1, r3, #27
 801aa42:	bf44      	itt	mi
 801aa44:	2220      	movmi	r2, #32
 801aa46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801aa4a:	071a      	lsls	r2, r3, #28
 801aa4c:	bf44      	itt	mi
 801aa4e:	222b      	movmi	r2, #43	; 0x2b
 801aa50:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801aa54:	782a      	ldrb	r2, [r5, #0]
 801aa56:	2a2a      	cmp	r2, #42	; 0x2a
 801aa58:	d015      	beq.n	801aa86 <_svfiprintf_r+0xea>
 801aa5a:	9a07      	ldr	r2, [sp, #28]
 801aa5c:	462f      	mov	r7, r5
 801aa5e:	2000      	movs	r0, #0
 801aa60:	250a      	movs	r5, #10
 801aa62:	4639      	mov	r1, r7
 801aa64:	f811 3b01 	ldrb.w	r3, [r1], #1
 801aa68:	3b30      	subs	r3, #48	; 0x30
 801aa6a:	2b09      	cmp	r3, #9
 801aa6c:	d94d      	bls.n	801ab0a <_svfiprintf_r+0x16e>
 801aa6e:	b1b8      	cbz	r0, 801aaa0 <_svfiprintf_r+0x104>
 801aa70:	e00f      	b.n	801aa92 <_svfiprintf_r+0xf6>
 801aa72:	462f      	mov	r7, r5
 801aa74:	e7b8      	b.n	801a9e8 <_svfiprintf_r+0x4c>
 801aa76:	4a40      	ldr	r2, [pc, #256]	; (801ab78 <_svfiprintf_r+0x1dc>)
 801aa78:	1a80      	subs	r0, r0, r2
 801aa7a:	fa0b f000 	lsl.w	r0, fp, r0
 801aa7e:	4318      	orrs	r0, r3
 801aa80:	9004      	str	r0, [sp, #16]
 801aa82:	463d      	mov	r5, r7
 801aa84:	e7d3      	b.n	801aa2e <_svfiprintf_r+0x92>
 801aa86:	9a03      	ldr	r2, [sp, #12]
 801aa88:	1d11      	adds	r1, r2, #4
 801aa8a:	6812      	ldr	r2, [r2, #0]
 801aa8c:	9103      	str	r1, [sp, #12]
 801aa8e:	2a00      	cmp	r2, #0
 801aa90:	db01      	blt.n	801aa96 <_svfiprintf_r+0xfa>
 801aa92:	9207      	str	r2, [sp, #28]
 801aa94:	e004      	b.n	801aaa0 <_svfiprintf_r+0x104>
 801aa96:	4252      	negs	r2, r2
 801aa98:	f043 0302 	orr.w	r3, r3, #2
 801aa9c:	9207      	str	r2, [sp, #28]
 801aa9e:	9304      	str	r3, [sp, #16]
 801aaa0:	783b      	ldrb	r3, [r7, #0]
 801aaa2:	2b2e      	cmp	r3, #46	; 0x2e
 801aaa4:	d10c      	bne.n	801aac0 <_svfiprintf_r+0x124>
 801aaa6:	787b      	ldrb	r3, [r7, #1]
 801aaa8:	2b2a      	cmp	r3, #42	; 0x2a
 801aaaa:	d133      	bne.n	801ab14 <_svfiprintf_r+0x178>
 801aaac:	9b03      	ldr	r3, [sp, #12]
 801aaae:	1d1a      	adds	r2, r3, #4
 801aab0:	681b      	ldr	r3, [r3, #0]
 801aab2:	9203      	str	r2, [sp, #12]
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	bfb8      	it	lt
 801aab8:	f04f 33ff 	movlt.w	r3, #4294967295
 801aabc:	3702      	adds	r7, #2
 801aabe:	9305      	str	r3, [sp, #20]
 801aac0:	4d2e      	ldr	r5, [pc, #184]	; (801ab7c <_svfiprintf_r+0x1e0>)
 801aac2:	7839      	ldrb	r1, [r7, #0]
 801aac4:	2203      	movs	r2, #3
 801aac6:	4628      	mov	r0, r5
 801aac8:	f7e5 fbaa 	bl	8000220 <memchr>
 801aacc:	b138      	cbz	r0, 801aade <_svfiprintf_r+0x142>
 801aace:	2340      	movs	r3, #64	; 0x40
 801aad0:	1b40      	subs	r0, r0, r5
 801aad2:	fa03 f000 	lsl.w	r0, r3, r0
 801aad6:	9b04      	ldr	r3, [sp, #16]
 801aad8:	4303      	orrs	r3, r0
 801aada:	3701      	adds	r7, #1
 801aadc:	9304      	str	r3, [sp, #16]
 801aade:	7839      	ldrb	r1, [r7, #0]
 801aae0:	4827      	ldr	r0, [pc, #156]	; (801ab80 <_svfiprintf_r+0x1e4>)
 801aae2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aae6:	2206      	movs	r2, #6
 801aae8:	1c7e      	adds	r6, r7, #1
 801aaea:	f7e5 fb99 	bl	8000220 <memchr>
 801aaee:	2800      	cmp	r0, #0
 801aaf0:	d038      	beq.n	801ab64 <_svfiprintf_r+0x1c8>
 801aaf2:	4b24      	ldr	r3, [pc, #144]	; (801ab84 <_svfiprintf_r+0x1e8>)
 801aaf4:	bb13      	cbnz	r3, 801ab3c <_svfiprintf_r+0x1a0>
 801aaf6:	9b03      	ldr	r3, [sp, #12]
 801aaf8:	3307      	adds	r3, #7
 801aafa:	f023 0307 	bic.w	r3, r3, #7
 801aafe:	3308      	adds	r3, #8
 801ab00:	9303      	str	r3, [sp, #12]
 801ab02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ab04:	444b      	add	r3, r9
 801ab06:	9309      	str	r3, [sp, #36]	; 0x24
 801ab08:	e76d      	b.n	801a9e6 <_svfiprintf_r+0x4a>
 801ab0a:	fb05 3202 	mla	r2, r5, r2, r3
 801ab0e:	2001      	movs	r0, #1
 801ab10:	460f      	mov	r7, r1
 801ab12:	e7a6      	b.n	801aa62 <_svfiprintf_r+0xc6>
 801ab14:	2300      	movs	r3, #0
 801ab16:	3701      	adds	r7, #1
 801ab18:	9305      	str	r3, [sp, #20]
 801ab1a:	4619      	mov	r1, r3
 801ab1c:	250a      	movs	r5, #10
 801ab1e:	4638      	mov	r0, r7
 801ab20:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ab24:	3a30      	subs	r2, #48	; 0x30
 801ab26:	2a09      	cmp	r2, #9
 801ab28:	d903      	bls.n	801ab32 <_svfiprintf_r+0x196>
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d0c8      	beq.n	801aac0 <_svfiprintf_r+0x124>
 801ab2e:	9105      	str	r1, [sp, #20]
 801ab30:	e7c6      	b.n	801aac0 <_svfiprintf_r+0x124>
 801ab32:	fb05 2101 	mla	r1, r5, r1, r2
 801ab36:	2301      	movs	r3, #1
 801ab38:	4607      	mov	r7, r0
 801ab3a:	e7f0      	b.n	801ab1e <_svfiprintf_r+0x182>
 801ab3c:	ab03      	add	r3, sp, #12
 801ab3e:	9300      	str	r3, [sp, #0]
 801ab40:	4622      	mov	r2, r4
 801ab42:	4b11      	ldr	r3, [pc, #68]	; (801ab88 <_svfiprintf_r+0x1ec>)
 801ab44:	a904      	add	r1, sp, #16
 801ab46:	4640      	mov	r0, r8
 801ab48:	f3af 8000 	nop.w
 801ab4c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801ab50:	4681      	mov	r9, r0
 801ab52:	d1d6      	bne.n	801ab02 <_svfiprintf_r+0x166>
 801ab54:	89a3      	ldrh	r3, [r4, #12]
 801ab56:	065b      	lsls	r3, r3, #25
 801ab58:	f53f af35 	bmi.w	801a9c6 <_svfiprintf_r+0x2a>
 801ab5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ab5e:	b01d      	add	sp, #116	; 0x74
 801ab60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ab64:	ab03      	add	r3, sp, #12
 801ab66:	9300      	str	r3, [sp, #0]
 801ab68:	4622      	mov	r2, r4
 801ab6a:	4b07      	ldr	r3, [pc, #28]	; (801ab88 <_svfiprintf_r+0x1ec>)
 801ab6c:	a904      	add	r1, sp, #16
 801ab6e:	4640      	mov	r0, r8
 801ab70:	f000 f882 	bl	801ac78 <_printf_i>
 801ab74:	e7ea      	b.n	801ab4c <_svfiprintf_r+0x1b0>
 801ab76:	bf00      	nop
 801ab78:	0801d8ec 	.word	0x0801d8ec
 801ab7c:	0801d8f2 	.word	0x0801d8f2
 801ab80:	0801d8f6 	.word	0x0801d8f6
 801ab84:	00000000 	.word	0x00000000
 801ab88:	0801a8e9 	.word	0x0801a8e9

0801ab8c <_printf_common>:
 801ab8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab90:	4691      	mov	r9, r2
 801ab92:	461f      	mov	r7, r3
 801ab94:	688a      	ldr	r2, [r1, #8]
 801ab96:	690b      	ldr	r3, [r1, #16]
 801ab98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ab9c:	4293      	cmp	r3, r2
 801ab9e:	bfb8      	it	lt
 801aba0:	4613      	movlt	r3, r2
 801aba2:	f8c9 3000 	str.w	r3, [r9]
 801aba6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801abaa:	4606      	mov	r6, r0
 801abac:	460c      	mov	r4, r1
 801abae:	b112      	cbz	r2, 801abb6 <_printf_common+0x2a>
 801abb0:	3301      	adds	r3, #1
 801abb2:	f8c9 3000 	str.w	r3, [r9]
 801abb6:	6823      	ldr	r3, [r4, #0]
 801abb8:	0699      	lsls	r1, r3, #26
 801abba:	bf42      	ittt	mi
 801abbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 801abc0:	3302      	addmi	r3, #2
 801abc2:	f8c9 3000 	strmi.w	r3, [r9]
 801abc6:	6825      	ldr	r5, [r4, #0]
 801abc8:	f015 0506 	ands.w	r5, r5, #6
 801abcc:	d107      	bne.n	801abde <_printf_common+0x52>
 801abce:	f104 0a19 	add.w	sl, r4, #25
 801abd2:	68e3      	ldr	r3, [r4, #12]
 801abd4:	f8d9 2000 	ldr.w	r2, [r9]
 801abd8:	1a9b      	subs	r3, r3, r2
 801abda:	42ab      	cmp	r3, r5
 801abdc:	dc28      	bgt.n	801ac30 <_printf_common+0xa4>
 801abde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801abe2:	6822      	ldr	r2, [r4, #0]
 801abe4:	3300      	adds	r3, #0
 801abe6:	bf18      	it	ne
 801abe8:	2301      	movne	r3, #1
 801abea:	0692      	lsls	r2, r2, #26
 801abec:	d42d      	bmi.n	801ac4a <_printf_common+0xbe>
 801abee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801abf2:	4639      	mov	r1, r7
 801abf4:	4630      	mov	r0, r6
 801abf6:	47c0      	blx	r8
 801abf8:	3001      	adds	r0, #1
 801abfa:	d020      	beq.n	801ac3e <_printf_common+0xb2>
 801abfc:	6823      	ldr	r3, [r4, #0]
 801abfe:	68e5      	ldr	r5, [r4, #12]
 801ac00:	f8d9 2000 	ldr.w	r2, [r9]
 801ac04:	f003 0306 	and.w	r3, r3, #6
 801ac08:	2b04      	cmp	r3, #4
 801ac0a:	bf08      	it	eq
 801ac0c:	1aad      	subeq	r5, r5, r2
 801ac0e:	68a3      	ldr	r3, [r4, #8]
 801ac10:	6922      	ldr	r2, [r4, #16]
 801ac12:	bf0c      	ite	eq
 801ac14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ac18:	2500      	movne	r5, #0
 801ac1a:	4293      	cmp	r3, r2
 801ac1c:	bfc4      	itt	gt
 801ac1e:	1a9b      	subgt	r3, r3, r2
 801ac20:	18ed      	addgt	r5, r5, r3
 801ac22:	f04f 0900 	mov.w	r9, #0
 801ac26:	341a      	adds	r4, #26
 801ac28:	454d      	cmp	r5, r9
 801ac2a:	d11a      	bne.n	801ac62 <_printf_common+0xd6>
 801ac2c:	2000      	movs	r0, #0
 801ac2e:	e008      	b.n	801ac42 <_printf_common+0xb6>
 801ac30:	2301      	movs	r3, #1
 801ac32:	4652      	mov	r2, sl
 801ac34:	4639      	mov	r1, r7
 801ac36:	4630      	mov	r0, r6
 801ac38:	47c0      	blx	r8
 801ac3a:	3001      	adds	r0, #1
 801ac3c:	d103      	bne.n	801ac46 <_printf_common+0xba>
 801ac3e:	f04f 30ff 	mov.w	r0, #4294967295
 801ac42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac46:	3501      	adds	r5, #1
 801ac48:	e7c3      	b.n	801abd2 <_printf_common+0x46>
 801ac4a:	18e1      	adds	r1, r4, r3
 801ac4c:	1c5a      	adds	r2, r3, #1
 801ac4e:	2030      	movs	r0, #48	; 0x30
 801ac50:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ac54:	4422      	add	r2, r4
 801ac56:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ac5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ac5e:	3302      	adds	r3, #2
 801ac60:	e7c5      	b.n	801abee <_printf_common+0x62>
 801ac62:	2301      	movs	r3, #1
 801ac64:	4622      	mov	r2, r4
 801ac66:	4639      	mov	r1, r7
 801ac68:	4630      	mov	r0, r6
 801ac6a:	47c0      	blx	r8
 801ac6c:	3001      	adds	r0, #1
 801ac6e:	d0e6      	beq.n	801ac3e <_printf_common+0xb2>
 801ac70:	f109 0901 	add.w	r9, r9, #1
 801ac74:	e7d8      	b.n	801ac28 <_printf_common+0x9c>
	...

0801ac78 <_printf_i>:
 801ac78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ac7c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ac80:	460c      	mov	r4, r1
 801ac82:	7e09      	ldrb	r1, [r1, #24]
 801ac84:	b085      	sub	sp, #20
 801ac86:	296e      	cmp	r1, #110	; 0x6e
 801ac88:	4617      	mov	r7, r2
 801ac8a:	4606      	mov	r6, r0
 801ac8c:	4698      	mov	r8, r3
 801ac8e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ac90:	f000 80b3 	beq.w	801adfa <_printf_i+0x182>
 801ac94:	d822      	bhi.n	801acdc <_printf_i+0x64>
 801ac96:	2963      	cmp	r1, #99	; 0x63
 801ac98:	d036      	beq.n	801ad08 <_printf_i+0x90>
 801ac9a:	d80a      	bhi.n	801acb2 <_printf_i+0x3a>
 801ac9c:	2900      	cmp	r1, #0
 801ac9e:	f000 80b9 	beq.w	801ae14 <_printf_i+0x19c>
 801aca2:	2958      	cmp	r1, #88	; 0x58
 801aca4:	f000 8083 	beq.w	801adae <_printf_i+0x136>
 801aca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801acac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801acb0:	e032      	b.n	801ad18 <_printf_i+0xa0>
 801acb2:	2964      	cmp	r1, #100	; 0x64
 801acb4:	d001      	beq.n	801acba <_printf_i+0x42>
 801acb6:	2969      	cmp	r1, #105	; 0x69
 801acb8:	d1f6      	bne.n	801aca8 <_printf_i+0x30>
 801acba:	6820      	ldr	r0, [r4, #0]
 801acbc:	6813      	ldr	r3, [r2, #0]
 801acbe:	0605      	lsls	r5, r0, #24
 801acc0:	f103 0104 	add.w	r1, r3, #4
 801acc4:	d52a      	bpl.n	801ad1c <_printf_i+0xa4>
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	6011      	str	r1, [r2, #0]
 801acca:	2b00      	cmp	r3, #0
 801accc:	da03      	bge.n	801acd6 <_printf_i+0x5e>
 801acce:	222d      	movs	r2, #45	; 0x2d
 801acd0:	425b      	negs	r3, r3
 801acd2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801acd6:	486f      	ldr	r0, [pc, #444]	; (801ae94 <_printf_i+0x21c>)
 801acd8:	220a      	movs	r2, #10
 801acda:	e039      	b.n	801ad50 <_printf_i+0xd8>
 801acdc:	2973      	cmp	r1, #115	; 0x73
 801acde:	f000 809d 	beq.w	801ae1c <_printf_i+0x1a4>
 801ace2:	d808      	bhi.n	801acf6 <_printf_i+0x7e>
 801ace4:	296f      	cmp	r1, #111	; 0x6f
 801ace6:	d020      	beq.n	801ad2a <_printf_i+0xb2>
 801ace8:	2970      	cmp	r1, #112	; 0x70
 801acea:	d1dd      	bne.n	801aca8 <_printf_i+0x30>
 801acec:	6823      	ldr	r3, [r4, #0]
 801acee:	f043 0320 	orr.w	r3, r3, #32
 801acf2:	6023      	str	r3, [r4, #0]
 801acf4:	e003      	b.n	801acfe <_printf_i+0x86>
 801acf6:	2975      	cmp	r1, #117	; 0x75
 801acf8:	d017      	beq.n	801ad2a <_printf_i+0xb2>
 801acfa:	2978      	cmp	r1, #120	; 0x78
 801acfc:	d1d4      	bne.n	801aca8 <_printf_i+0x30>
 801acfe:	2378      	movs	r3, #120	; 0x78
 801ad00:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ad04:	4864      	ldr	r0, [pc, #400]	; (801ae98 <_printf_i+0x220>)
 801ad06:	e055      	b.n	801adb4 <_printf_i+0x13c>
 801ad08:	6813      	ldr	r3, [r2, #0]
 801ad0a:	1d19      	adds	r1, r3, #4
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	6011      	str	r1, [r2, #0]
 801ad10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ad14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ad18:	2301      	movs	r3, #1
 801ad1a:	e08c      	b.n	801ae36 <_printf_i+0x1be>
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	6011      	str	r1, [r2, #0]
 801ad20:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ad24:	bf18      	it	ne
 801ad26:	b21b      	sxthne	r3, r3
 801ad28:	e7cf      	b.n	801acca <_printf_i+0x52>
 801ad2a:	6813      	ldr	r3, [r2, #0]
 801ad2c:	6825      	ldr	r5, [r4, #0]
 801ad2e:	1d18      	adds	r0, r3, #4
 801ad30:	6010      	str	r0, [r2, #0]
 801ad32:	0628      	lsls	r0, r5, #24
 801ad34:	d501      	bpl.n	801ad3a <_printf_i+0xc2>
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	e002      	b.n	801ad40 <_printf_i+0xc8>
 801ad3a:	0668      	lsls	r0, r5, #25
 801ad3c:	d5fb      	bpl.n	801ad36 <_printf_i+0xbe>
 801ad3e:	881b      	ldrh	r3, [r3, #0]
 801ad40:	4854      	ldr	r0, [pc, #336]	; (801ae94 <_printf_i+0x21c>)
 801ad42:	296f      	cmp	r1, #111	; 0x6f
 801ad44:	bf14      	ite	ne
 801ad46:	220a      	movne	r2, #10
 801ad48:	2208      	moveq	r2, #8
 801ad4a:	2100      	movs	r1, #0
 801ad4c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ad50:	6865      	ldr	r5, [r4, #4]
 801ad52:	60a5      	str	r5, [r4, #8]
 801ad54:	2d00      	cmp	r5, #0
 801ad56:	f2c0 8095 	blt.w	801ae84 <_printf_i+0x20c>
 801ad5a:	6821      	ldr	r1, [r4, #0]
 801ad5c:	f021 0104 	bic.w	r1, r1, #4
 801ad60:	6021      	str	r1, [r4, #0]
 801ad62:	2b00      	cmp	r3, #0
 801ad64:	d13d      	bne.n	801ade2 <_printf_i+0x16a>
 801ad66:	2d00      	cmp	r5, #0
 801ad68:	f040 808e 	bne.w	801ae88 <_printf_i+0x210>
 801ad6c:	4665      	mov	r5, ip
 801ad6e:	2a08      	cmp	r2, #8
 801ad70:	d10b      	bne.n	801ad8a <_printf_i+0x112>
 801ad72:	6823      	ldr	r3, [r4, #0]
 801ad74:	07db      	lsls	r3, r3, #31
 801ad76:	d508      	bpl.n	801ad8a <_printf_i+0x112>
 801ad78:	6923      	ldr	r3, [r4, #16]
 801ad7a:	6862      	ldr	r2, [r4, #4]
 801ad7c:	429a      	cmp	r2, r3
 801ad7e:	bfde      	ittt	le
 801ad80:	2330      	movle	r3, #48	; 0x30
 801ad82:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ad86:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ad8a:	ebac 0305 	sub.w	r3, ip, r5
 801ad8e:	6123      	str	r3, [r4, #16]
 801ad90:	f8cd 8000 	str.w	r8, [sp]
 801ad94:	463b      	mov	r3, r7
 801ad96:	aa03      	add	r2, sp, #12
 801ad98:	4621      	mov	r1, r4
 801ad9a:	4630      	mov	r0, r6
 801ad9c:	f7ff fef6 	bl	801ab8c <_printf_common>
 801ada0:	3001      	adds	r0, #1
 801ada2:	d14d      	bne.n	801ae40 <_printf_i+0x1c8>
 801ada4:	f04f 30ff 	mov.w	r0, #4294967295
 801ada8:	b005      	add	sp, #20
 801adaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801adae:	4839      	ldr	r0, [pc, #228]	; (801ae94 <_printf_i+0x21c>)
 801adb0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801adb4:	6813      	ldr	r3, [r2, #0]
 801adb6:	6821      	ldr	r1, [r4, #0]
 801adb8:	1d1d      	adds	r5, r3, #4
 801adba:	681b      	ldr	r3, [r3, #0]
 801adbc:	6015      	str	r5, [r2, #0]
 801adbe:	060a      	lsls	r2, r1, #24
 801adc0:	d50b      	bpl.n	801adda <_printf_i+0x162>
 801adc2:	07ca      	lsls	r2, r1, #31
 801adc4:	bf44      	itt	mi
 801adc6:	f041 0120 	orrmi.w	r1, r1, #32
 801adca:	6021      	strmi	r1, [r4, #0]
 801adcc:	b91b      	cbnz	r3, 801add6 <_printf_i+0x15e>
 801adce:	6822      	ldr	r2, [r4, #0]
 801add0:	f022 0220 	bic.w	r2, r2, #32
 801add4:	6022      	str	r2, [r4, #0]
 801add6:	2210      	movs	r2, #16
 801add8:	e7b7      	b.n	801ad4a <_printf_i+0xd2>
 801adda:	064d      	lsls	r5, r1, #25
 801addc:	bf48      	it	mi
 801adde:	b29b      	uxthmi	r3, r3
 801ade0:	e7ef      	b.n	801adc2 <_printf_i+0x14a>
 801ade2:	4665      	mov	r5, ip
 801ade4:	fbb3 f1f2 	udiv	r1, r3, r2
 801ade8:	fb02 3311 	mls	r3, r2, r1, r3
 801adec:	5cc3      	ldrb	r3, [r0, r3]
 801adee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801adf2:	460b      	mov	r3, r1
 801adf4:	2900      	cmp	r1, #0
 801adf6:	d1f5      	bne.n	801ade4 <_printf_i+0x16c>
 801adf8:	e7b9      	b.n	801ad6e <_printf_i+0xf6>
 801adfa:	6813      	ldr	r3, [r2, #0]
 801adfc:	6825      	ldr	r5, [r4, #0]
 801adfe:	6961      	ldr	r1, [r4, #20]
 801ae00:	1d18      	adds	r0, r3, #4
 801ae02:	6010      	str	r0, [r2, #0]
 801ae04:	0628      	lsls	r0, r5, #24
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	d501      	bpl.n	801ae0e <_printf_i+0x196>
 801ae0a:	6019      	str	r1, [r3, #0]
 801ae0c:	e002      	b.n	801ae14 <_printf_i+0x19c>
 801ae0e:	066a      	lsls	r2, r5, #25
 801ae10:	d5fb      	bpl.n	801ae0a <_printf_i+0x192>
 801ae12:	8019      	strh	r1, [r3, #0]
 801ae14:	2300      	movs	r3, #0
 801ae16:	6123      	str	r3, [r4, #16]
 801ae18:	4665      	mov	r5, ip
 801ae1a:	e7b9      	b.n	801ad90 <_printf_i+0x118>
 801ae1c:	6813      	ldr	r3, [r2, #0]
 801ae1e:	1d19      	adds	r1, r3, #4
 801ae20:	6011      	str	r1, [r2, #0]
 801ae22:	681d      	ldr	r5, [r3, #0]
 801ae24:	6862      	ldr	r2, [r4, #4]
 801ae26:	2100      	movs	r1, #0
 801ae28:	4628      	mov	r0, r5
 801ae2a:	f7e5 f9f9 	bl	8000220 <memchr>
 801ae2e:	b108      	cbz	r0, 801ae34 <_printf_i+0x1bc>
 801ae30:	1b40      	subs	r0, r0, r5
 801ae32:	6060      	str	r0, [r4, #4]
 801ae34:	6863      	ldr	r3, [r4, #4]
 801ae36:	6123      	str	r3, [r4, #16]
 801ae38:	2300      	movs	r3, #0
 801ae3a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ae3e:	e7a7      	b.n	801ad90 <_printf_i+0x118>
 801ae40:	6923      	ldr	r3, [r4, #16]
 801ae42:	462a      	mov	r2, r5
 801ae44:	4639      	mov	r1, r7
 801ae46:	4630      	mov	r0, r6
 801ae48:	47c0      	blx	r8
 801ae4a:	3001      	adds	r0, #1
 801ae4c:	d0aa      	beq.n	801ada4 <_printf_i+0x12c>
 801ae4e:	6823      	ldr	r3, [r4, #0]
 801ae50:	079b      	lsls	r3, r3, #30
 801ae52:	d413      	bmi.n	801ae7c <_printf_i+0x204>
 801ae54:	68e0      	ldr	r0, [r4, #12]
 801ae56:	9b03      	ldr	r3, [sp, #12]
 801ae58:	4298      	cmp	r0, r3
 801ae5a:	bfb8      	it	lt
 801ae5c:	4618      	movlt	r0, r3
 801ae5e:	e7a3      	b.n	801ada8 <_printf_i+0x130>
 801ae60:	2301      	movs	r3, #1
 801ae62:	464a      	mov	r2, r9
 801ae64:	4639      	mov	r1, r7
 801ae66:	4630      	mov	r0, r6
 801ae68:	47c0      	blx	r8
 801ae6a:	3001      	adds	r0, #1
 801ae6c:	d09a      	beq.n	801ada4 <_printf_i+0x12c>
 801ae6e:	3501      	adds	r5, #1
 801ae70:	68e3      	ldr	r3, [r4, #12]
 801ae72:	9a03      	ldr	r2, [sp, #12]
 801ae74:	1a9b      	subs	r3, r3, r2
 801ae76:	42ab      	cmp	r3, r5
 801ae78:	dcf2      	bgt.n	801ae60 <_printf_i+0x1e8>
 801ae7a:	e7eb      	b.n	801ae54 <_printf_i+0x1dc>
 801ae7c:	2500      	movs	r5, #0
 801ae7e:	f104 0919 	add.w	r9, r4, #25
 801ae82:	e7f5      	b.n	801ae70 <_printf_i+0x1f8>
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	d1ac      	bne.n	801ade2 <_printf_i+0x16a>
 801ae88:	7803      	ldrb	r3, [r0, #0]
 801ae8a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ae8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ae92:	e76c      	b.n	801ad6e <_printf_i+0xf6>
 801ae94:	0801d8fd 	.word	0x0801d8fd
 801ae98:	0801d90e 	.word	0x0801d90e

0801ae9c <memmove>:
 801ae9c:	4288      	cmp	r0, r1
 801ae9e:	b510      	push	{r4, lr}
 801aea0:	eb01 0302 	add.w	r3, r1, r2
 801aea4:	d807      	bhi.n	801aeb6 <memmove+0x1a>
 801aea6:	1e42      	subs	r2, r0, #1
 801aea8:	4299      	cmp	r1, r3
 801aeaa:	d00a      	beq.n	801aec2 <memmove+0x26>
 801aeac:	f811 4b01 	ldrb.w	r4, [r1], #1
 801aeb0:	f802 4f01 	strb.w	r4, [r2, #1]!
 801aeb4:	e7f8      	b.n	801aea8 <memmove+0xc>
 801aeb6:	4283      	cmp	r3, r0
 801aeb8:	d9f5      	bls.n	801aea6 <memmove+0xa>
 801aeba:	1881      	adds	r1, r0, r2
 801aebc:	1ad2      	subs	r2, r2, r3
 801aebe:	42d3      	cmn	r3, r2
 801aec0:	d100      	bne.n	801aec4 <memmove+0x28>
 801aec2:	bd10      	pop	{r4, pc}
 801aec4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801aec8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801aecc:	e7f7      	b.n	801aebe <memmove+0x22>

0801aece <_realloc_r>:
 801aece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aed0:	4607      	mov	r7, r0
 801aed2:	4614      	mov	r4, r2
 801aed4:	460e      	mov	r6, r1
 801aed6:	b921      	cbnz	r1, 801aee2 <_realloc_r+0x14>
 801aed8:	4611      	mov	r1, r2
 801aeda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801aede:	f7ff bc29 	b.w	801a734 <_malloc_r>
 801aee2:	b922      	cbnz	r2, 801aeee <_realloc_r+0x20>
 801aee4:	f7ff fbd8 	bl	801a698 <_free_r>
 801aee8:	4625      	mov	r5, r4
 801aeea:	4628      	mov	r0, r5
 801aeec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801aeee:	f000 f814 	bl	801af1a <_malloc_usable_size_r>
 801aef2:	42a0      	cmp	r0, r4
 801aef4:	d20f      	bcs.n	801af16 <_realloc_r+0x48>
 801aef6:	4621      	mov	r1, r4
 801aef8:	4638      	mov	r0, r7
 801aefa:	f7ff fc1b 	bl	801a734 <_malloc_r>
 801aefe:	4605      	mov	r5, r0
 801af00:	2800      	cmp	r0, #0
 801af02:	d0f2      	beq.n	801aeea <_realloc_r+0x1c>
 801af04:	4631      	mov	r1, r6
 801af06:	4622      	mov	r2, r4
 801af08:	f7ff fbb2 	bl	801a670 <memcpy>
 801af0c:	4631      	mov	r1, r6
 801af0e:	4638      	mov	r0, r7
 801af10:	f7ff fbc2 	bl	801a698 <_free_r>
 801af14:	e7e9      	b.n	801aeea <_realloc_r+0x1c>
 801af16:	4635      	mov	r5, r6
 801af18:	e7e7      	b.n	801aeea <_realloc_r+0x1c>

0801af1a <_malloc_usable_size_r>:
 801af1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801af1e:	1f18      	subs	r0, r3, #4
 801af20:	2b00      	cmp	r3, #0
 801af22:	bfbc      	itt	lt
 801af24:	580b      	ldrlt	r3, [r1, r0]
 801af26:	18c0      	addlt	r0, r0, r3
 801af28:	4770      	bx	lr

0801af2a <fmaxf>:
 801af2a:	b508      	push	{r3, lr}
 801af2c:	ed2d 8b02 	vpush	{d8}
 801af30:	eeb0 8a40 	vmov.f32	s16, s0
 801af34:	eef0 8a60 	vmov.f32	s17, s1
 801af38:	f000 f82e 	bl	801af98 <__fpclassifyf>
 801af3c:	b148      	cbz	r0, 801af52 <fmaxf+0x28>
 801af3e:	eeb0 0a68 	vmov.f32	s0, s17
 801af42:	f000 f829 	bl	801af98 <__fpclassifyf>
 801af46:	b130      	cbz	r0, 801af56 <fmaxf+0x2c>
 801af48:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801af4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af50:	dc01      	bgt.n	801af56 <fmaxf+0x2c>
 801af52:	eeb0 8a68 	vmov.f32	s16, s17
 801af56:	eeb0 0a48 	vmov.f32	s0, s16
 801af5a:	ecbd 8b02 	vpop	{d8}
 801af5e:	bd08      	pop	{r3, pc}

0801af60 <fminf>:
 801af60:	b508      	push	{r3, lr}
 801af62:	ed2d 8b02 	vpush	{d8}
 801af66:	eeb0 8a40 	vmov.f32	s16, s0
 801af6a:	eef0 8a60 	vmov.f32	s17, s1
 801af6e:	f000 f813 	bl	801af98 <__fpclassifyf>
 801af72:	b148      	cbz	r0, 801af88 <fminf+0x28>
 801af74:	eeb0 0a68 	vmov.f32	s0, s17
 801af78:	f000 f80e 	bl	801af98 <__fpclassifyf>
 801af7c:	b130      	cbz	r0, 801af8c <fminf+0x2c>
 801af7e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801af82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af86:	d401      	bmi.n	801af8c <fminf+0x2c>
 801af88:	eeb0 8a68 	vmov.f32	s16, s17
 801af8c:	eeb0 0a48 	vmov.f32	s0, s16
 801af90:	ecbd 8b02 	vpop	{d8}
 801af94:	bd08      	pop	{r3, pc}
	...

0801af98 <__fpclassifyf>:
 801af98:	ee10 3a10 	vmov	r3, s0
 801af9c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 801afa0:	d00d      	beq.n	801afbe <__fpclassifyf+0x26>
 801afa2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801afa6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801afaa:	d30a      	bcc.n	801afc2 <__fpclassifyf+0x2a>
 801afac:	4b07      	ldr	r3, [pc, #28]	; (801afcc <__fpclassifyf+0x34>)
 801afae:	1e42      	subs	r2, r0, #1
 801afb0:	429a      	cmp	r2, r3
 801afb2:	d908      	bls.n	801afc6 <__fpclassifyf+0x2e>
 801afb4:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801afb8:	4258      	negs	r0, r3
 801afba:	4158      	adcs	r0, r3
 801afbc:	4770      	bx	lr
 801afbe:	2002      	movs	r0, #2
 801afc0:	4770      	bx	lr
 801afc2:	2004      	movs	r0, #4
 801afc4:	4770      	bx	lr
 801afc6:	2003      	movs	r0, #3
 801afc8:	4770      	bx	lr
 801afca:	bf00      	nop
 801afcc:	007ffffe 	.word	0x007ffffe

0801afd0 <pow>:
 801afd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801afd4:	ed2d 8b04 	vpush	{d8-d9}
 801afd8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b2ac <pow+0x2dc>
 801afdc:	b08d      	sub	sp, #52	; 0x34
 801afde:	ec57 6b10 	vmov	r6, r7, d0
 801afe2:	ec55 4b11 	vmov	r4, r5, d1
 801afe6:	f000 fb73 	bl	801b6d0 <__ieee754_pow>
 801afea:	f999 3000 	ldrsb.w	r3, [r9]
 801afee:	9300      	str	r3, [sp, #0]
 801aff0:	3301      	adds	r3, #1
 801aff2:	eeb0 8a40 	vmov.f32	s16, s0
 801aff6:	eef0 8a60 	vmov.f32	s17, s1
 801affa:	46c8      	mov	r8, r9
 801affc:	d05f      	beq.n	801b0be <pow+0xee>
 801affe:	4622      	mov	r2, r4
 801b000:	462b      	mov	r3, r5
 801b002:	4620      	mov	r0, r4
 801b004:	4629      	mov	r1, r5
 801b006:	f7e5 fdb1 	bl	8000b6c <__aeabi_dcmpun>
 801b00a:	4683      	mov	fp, r0
 801b00c:	2800      	cmp	r0, #0
 801b00e:	d156      	bne.n	801b0be <pow+0xee>
 801b010:	4632      	mov	r2, r6
 801b012:	463b      	mov	r3, r7
 801b014:	4630      	mov	r0, r6
 801b016:	4639      	mov	r1, r7
 801b018:	f7e5 fda8 	bl	8000b6c <__aeabi_dcmpun>
 801b01c:	9001      	str	r0, [sp, #4]
 801b01e:	b1e8      	cbz	r0, 801b05c <pow+0x8c>
 801b020:	2200      	movs	r2, #0
 801b022:	2300      	movs	r3, #0
 801b024:	4620      	mov	r0, r4
 801b026:	4629      	mov	r1, r5
 801b028:	f7e5 fd6e 	bl	8000b08 <__aeabi_dcmpeq>
 801b02c:	2800      	cmp	r0, #0
 801b02e:	d046      	beq.n	801b0be <pow+0xee>
 801b030:	2301      	movs	r3, #1
 801b032:	9302      	str	r3, [sp, #8]
 801b034:	4b96      	ldr	r3, [pc, #600]	; (801b290 <pow+0x2c0>)
 801b036:	9303      	str	r3, [sp, #12]
 801b038:	4b96      	ldr	r3, [pc, #600]	; (801b294 <pow+0x2c4>)
 801b03a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801b03e:	2200      	movs	r2, #0
 801b040:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b044:	9b00      	ldr	r3, [sp, #0]
 801b046:	2b02      	cmp	r3, #2
 801b048:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b04c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b050:	d033      	beq.n	801b0ba <pow+0xea>
 801b052:	a802      	add	r0, sp, #8
 801b054:	f001 fbce 	bl	801c7f4 <matherr>
 801b058:	bb48      	cbnz	r0, 801b0ae <pow+0xde>
 801b05a:	e05d      	b.n	801b118 <pow+0x148>
 801b05c:	f04f 0a00 	mov.w	sl, #0
 801b060:	f04f 0b00 	mov.w	fp, #0
 801b064:	4652      	mov	r2, sl
 801b066:	465b      	mov	r3, fp
 801b068:	4630      	mov	r0, r6
 801b06a:	4639      	mov	r1, r7
 801b06c:	f7e5 fd4c 	bl	8000b08 <__aeabi_dcmpeq>
 801b070:	ec4b ab19 	vmov	d9, sl, fp
 801b074:	2800      	cmp	r0, #0
 801b076:	d054      	beq.n	801b122 <pow+0x152>
 801b078:	4652      	mov	r2, sl
 801b07a:	465b      	mov	r3, fp
 801b07c:	4620      	mov	r0, r4
 801b07e:	4629      	mov	r1, r5
 801b080:	f7e5 fd42 	bl	8000b08 <__aeabi_dcmpeq>
 801b084:	4680      	mov	r8, r0
 801b086:	b318      	cbz	r0, 801b0d0 <pow+0x100>
 801b088:	2301      	movs	r3, #1
 801b08a:	9302      	str	r3, [sp, #8]
 801b08c:	4b80      	ldr	r3, [pc, #512]	; (801b290 <pow+0x2c0>)
 801b08e:	9303      	str	r3, [sp, #12]
 801b090:	9b01      	ldr	r3, [sp, #4]
 801b092:	930a      	str	r3, [sp, #40]	; 0x28
 801b094:	9b00      	ldr	r3, [sp, #0]
 801b096:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b09a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b09e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b0a2:	2b00      	cmp	r3, #0
 801b0a4:	d0d5      	beq.n	801b052 <pow+0x82>
 801b0a6:	4b7b      	ldr	r3, [pc, #492]	; (801b294 <pow+0x2c4>)
 801b0a8:	2200      	movs	r2, #0
 801b0aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0b0:	b11b      	cbz	r3, 801b0ba <pow+0xea>
 801b0b2:	f7ff faa3 	bl	801a5fc <__errno>
 801b0b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b0b8:	6003      	str	r3, [r0, #0]
 801b0ba:	ed9d 8b08 	vldr	d8, [sp, #32]
 801b0be:	eeb0 0a48 	vmov.f32	s0, s16
 801b0c2:	eef0 0a68 	vmov.f32	s1, s17
 801b0c6:	b00d      	add	sp, #52	; 0x34
 801b0c8:	ecbd 8b04 	vpop	{d8-d9}
 801b0cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b0d0:	ec45 4b10 	vmov	d0, r4, r5
 801b0d4:	f001 fb86 	bl	801c7e4 <finite>
 801b0d8:	2800      	cmp	r0, #0
 801b0da:	d0f0      	beq.n	801b0be <pow+0xee>
 801b0dc:	4652      	mov	r2, sl
 801b0de:	465b      	mov	r3, fp
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	4629      	mov	r1, r5
 801b0e4:	f7e5 fd1a 	bl	8000b1c <__aeabi_dcmplt>
 801b0e8:	2800      	cmp	r0, #0
 801b0ea:	d0e8      	beq.n	801b0be <pow+0xee>
 801b0ec:	2301      	movs	r3, #1
 801b0ee:	9302      	str	r3, [sp, #8]
 801b0f0:	4b67      	ldr	r3, [pc, #412]	; (801b290 <pow+0x2c0>)
 801b0f2:	9303      	str	r3, [sp, #12]
 801b0f4:	f999 3000 	ldrsb.w	r3, [r9]
 801b0f8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b0fc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b100:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b104:	b913      	cbnz	r3, 801b10c <pow+0x13c>
 801b106:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b10a:	e7a2      	b.n	801b052 <pow+0x82>
 801b10c:	4962      	ldr	r1, [pc, #392]	; (801b298 <pow+0x2c8>)
 801b10e:	2000      	movs	r0, #0
 801b110:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b114:	2b02      	cmp	r3, #2
 801b116:	d19c      	bne.n	801b052 <pow+0x82>
 801b118:	f7ff fa70 	bl	801a5fc <__errno>
 801b11c:	2321      	movs	r3, #33	; 0x21
 801b11e:	6003      	str	r3, [r0, #0]
 801b120:	e7c5      	b.n	801b0ae <pow+0xde>
 801b122:	eeb0 0a48 	vmov.f32	s0, s16
 801b126:	eef0 0a68 	vmov.f32	s1, s17
 801b12a:	f001 fb5b 	bl	801c7e4 <finite>
 801b12e:	9000      	str	r0, [sp, #0]
 801b130:	2800      	cmp	r0, #0
 801b132:	f040 8081 	bne.w	801b238 <pow+0x268>
 801b136:	ec47 6b10 	vmov	d0, r6, r7
 801b13a:	f001 fb53 	bl	801c7e4 <finite>
 801b13e:	2800      	cmp	r0, #0
 801b140:	d07a      	beq.n	801b238 <pow+0x268>
 801b142:	ec45 4b10 	vmov	d0, r4, r5
 801b146:	f001 fb4d 	bl	801c7e4 <finite>
 801b14a:	2800      	cmp	r0, #0
 801b14c:	d074      	beq.n	801b238 <pow+0x268>
 801b14e:	ec53 2b18 	vmov	r2, r3, d8
 801b152:	ee18 0a10 	vmov	r0, s16
 801b156:	4619      	mov	r1, r3
 801b158:	f7e5 fd08 	bl	8000b6c <__aeabi_dcmpun>
 801b15c:	f999 9000 	ldrsb.w	r9, [r9]
 801b160:	4b4b      	ldr	r3, [pc, #300]	; (801b290 <pow+0x2c0>)
 801b162:	b1b0      	cbz	r0, 801b192 <pow+0x1c2>
 801b164:	2201      	movs	r2, #1
 801b166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b16a:	9b00      	ldr	r3, [sp, #0]
 801b16c:	930a      	str	r3, [sp, #40]	; 0x28
 801b16e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b172:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b176:	f1b9 0f00 	cmp.w	r9, #0
 801b17a:	d0c4      	beq.n	801b106 <pow+0x136>
 801b17c:	4652      	mov	r2, sl
 801b17e:	465b      	mov	r3, fp
 801b180:	4650      	mov	r0, sl
 801b182:	4659      	mov	r1, fp
 801b184:	f7e5 fb82 	bl	800088c <__aeabi_ddiv>
 801b188:	f1b9 0f02 	cmp.w	r9, #2
 801b18c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b190:	e7c1      	b.n	801b116 <pow+0x146>
 801b192:	2203      	movs	r2, #3
 801b194:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b198:	900a      	str	r0, [sp, #40]	; 0x28
 801b19a:	4629      	mov	r1, r5
 801b19c:	4620      	mov	r0, r4
 801b19e:	2200      	movs	r2, #0
 801b1a0:	4b3e      	ldr	r3, [pc, #248]	; (801b29c <pow+0x2cc>)
 801b1a2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b1a6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b1aa:	f7e5 fa45 	bl	8000638 <__aeabi_dmul>
 801b1ae:	4604      	mov	r4, r0
 801b1b0:	460d      	mov	r5, r1
 801b1b2:	f1b9 0f00 	cmp.w	r9, #0
 801b1b6:	d124      	bne.n	801b202 <pow+0x232>
 801b1b8:	4b39      	ldr	r3, [pc, #228]	; (801b2a0 <pow+0x2d0>)
 801b1ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b1be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b1c2:	4630      	mov	r0, r6
 801b1c4:	4652      	mov	r2, sl
 801b1c6:	465b      	mov	r3, fp
 801b1c8:	4639      	mov	r1, r7
 801b1ca:	f7e5 fca7 	bl	8000b1c <__aeabi_dcmplt>
 801b1ce:	2800      	cmp	r0, #0
 801b1d0:	d056      	beq.n	801b280 <pow+0x2b0>
 801b1d2:	ec45 4b10 	vmov	d0, r4, r5
 801b1d6:	f001 fb17 	bl	801c808 <rint>
 801b1da:	4622      	mov	r2, r4
 801b1dc:	462b      	mov	r3, r5
 801b1de:	ec51 0b10 	vmov	r0, r1, d0
 801b1e2:	f7e5 fc91 	bl	8000b08 <__aeabi_dcmpeq>
 801b1e6:	b920      	cbnz	r0, 801b1f2 <pow+0x222>
 801b1e8:	4b2e      	ldr	r3, [pc, #184]	; (801b2a4 <pow+0x2d4>)
 801b1ea:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b1ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b1f2:	f998 3000 	ldrsb.w	r3, [r8]
 801b1f6:	2b02      	cmp	r3, #2
 801b1f8:	d142      	bne.n	801b280 <pow+0x2b0>
 801b1fa:	f7ff f9ff 	bl	801a5fc <__errno>
 801b1fe:	2322      	movs	r3, #34	; 0x22
 801b200:	e78d      	b.n	801b11e <pow+0x14e>
 801b202:	4b29      	ldr	r3, [pc, #164]	; (801b2a8 <pow+0x2d8>)
 801b204:	2200      	movs	r2, #0
 801b206:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b20a:	4630      	mov	r0, r6
 801b20c:	4652      	mov	r2, sl
 801b20e:	465b      	mov	r3, fp
 801b210:	4639      	mov	r1, r7
 801b212:	f7e5 fc83 	bl	8000b1c <__aeabi_dcmplt>
 801b216:	2800      	cmp	r0, #0
 801b218:	d0eb      	beq.n	801b1f2 <pow+0x222>
 801b21a:	ec45 4b10 	vmov	d0, r4, r5
 801b21e:	f001 faf3 	bl	801c808 <rint>
 801b222:	4622      	mov	r2, r4
 801b224:	462b      	mov	r3, r5
 801b226:	ec51 0b10 	vmov	r0, r1, d0
 801b22a:	f7e5 fc6d 	bl	8000b08 <__aeabi_dcmpeq>
 801b22e:	2800      	cmp	r0, #0
 801b230:	d1df      	bne.n	801b1f2 <pow+0x222>
 801b232:	2200      	movs	r2, #0
 801b234:	4b18      	ldr	r3, [pc, #96]	; (801b298 <pow+0x2c8>)
 801b236:	e7da      	b.n	801b1ee <pow+0x21e>
 801b238:	2200      	movs	r2, #0
 801b23a:	2300      	movs	r3, #0
 801b23c:	ec51 0b18 	vmov	r0, r1, d8
 801b240:	f7e5 fc62 	bl	8000b08 <__aeabi_dcmpeq>
 801b244:	2800      	cmp	r0, #0
 801b246:	f43f af3a 	beq.w	801b0be <pow+0xee>
 801b24a:	ec47 6b10 	vmov	d0, r6, r7
 801b24e:	f001 fac9 	bl	801c7e4 <finite>
 801b252:	2800      	cmp	r0, #0
 801b254:	f43f af33 	beq.w	801b0be <pow+0xee>
 801b258:	ec45 4b10 	vmov	d0, r4, r5
 801b25c:	f001 fac2 	bl	801c7e4 <finite>
 801b260:	2800      	cmp	r0, #0
 801b262:	f43f af2c 	beq.w	801b0be <pow+0xee>
 801b266:	2304      	movs	r3, #4
 801b268:	9302      	str	r3, [sp, #8]
 801b26a:	4b09      	ldr	r3, [pc, #36]	; (801b290 <pow+0x2c0>)
 801b26c:	9303      	str	r3, [sp, #12]
 801b26e:	2300      	movs	r3, #0
 801b270:	930a      	str	r3, [sp, #40]	; 0x28
 801b272:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b276:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b27a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b27e:	e7b8      	b.n	801b1f2 <pow+0x222>
 801b280:	a802      	add	r0, sp, #8
 801b282:	f001 fab7 	bl	801c7f4 <matherr>
 801b286:	2800      	cmp	r0, #0
 801b288:	f47f af11 	bne.w	801b0ae <pow+0xde>
 801b28c:	e7b5      	b.n	801b1fa <pow+0x22a>
 801b28e:	bf00      	nop
 801b290:	0801d980 	.word	0x0801d980
 801b294:	3ff00000 	.word	0x3ff00000
 801b298:	fff00000 	.word	0xfff00000
 801b29c:	3fe00000 	.word	0x3fe00000
 801b2a0:	47efffff 	.word	0x47efffff
 801b2a4:	c7efffff 	.word	0xc7efffff
 801b2a8:	7ff00000 	.word	0x7ff00000
 801b2ac:	2000027c 	.word	0x2000027c

0801b2b0 <sqrt>:
 801b2b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b2b4:	ed2d 8b02 	vpush	{d8}
 801b2b8:	b08b      	sub	sp, #44	; 0x2c
 801b2ba:	ec55 4b10 	vmov	r4, r5, d0
 801b2be:	f000 ff15 	bl	801c0ec <__ieee754_sqrt>
 801b2c2:	4b26      	ldr	r3, [pc, #152]	; (801b35c <sqrt+0xac>)
 801b2c4:	eeb0 8a40 	vmov.f32	s16, s0
 801b2c8:	eef0 8a60 	vmov.f32	s17, s1
 801b2cc:	f993 6000 	ldrsb.w	r6, [r3]
 801b2d0:	1c73      	adds	r3, r6, #1
 801b2d2:	d02a      	beq.n	801b32a <sqrt+0x7a>
 801b2d4:	4622      	mov	r2, r4
 801b2d6:	462b      	mov	r3, r5
 801b2d8:	4620      	mov	r0, r4
 801b2da:	4629      	mov	r1, r5
 801b2dc:	f7e5 fc46 	bl	8000b6c <__aeabi_dcmpun>
 801b2e0:	4607      	mov	r7, r0
 801b2e2:	bb10      	cbnz	r0, 801b32a <sqrt+0x7a>
 801b2e4:	f04f 0800 	mov.w	r8, #0
 801b2e8:	f04f 0900 	mov.w	r9, #0
 801b2ec:	4642      	mov	r2, r8
 801b2ee:	464b      	mov	r3, r9
 801b2f0:	4620      	mov	r0, r4
 801b2f2:	4629      	mov	r1, r5
 801b2f4:	f7e5 fc12 	bl	8000b1c <__aeabi_dcmplt>
 801b2f8:	b1b8      	cbz	r0, 801b32a <sqrt+0x7a>
 801b2fa:	2301      	movs	r3, #1
 801b2fc:	9300      	str	r3, [sp, #0]
 801b2fe:	4b18      	ldr	r3, [pc, #96]	; (801b360 <sqrt+0xb0>)
 801b300:	9301      	str	r3, [sp, #4]
 801b302:	9708      	str	r7, [sp, #32]
 801b304:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b308:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b30c:	b9b6      	cbnz	r6, 801b33c <sqrt+0x8c>
 801b30e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801b312:	4668      	mov	r0, sp
 801b314:	f001 fa6e 	bl	801c7f4 <matherr>
 801b318:	b1d0      	cbz	r0, 801b350 <sqrt+0xa0>
 801b31a:	9b08      	ldr	r3, [sp, #32]
 801b31c:	b11b      	cbz	r3, 801b326 <sqrt+0x76>
 801b31e:	f7ff f96d 	bl	801a5fc <__errno>
 801b322:	9b08      	ldr	r3, [sp, #32]
 801b324:	6003      	str	r3, [r0, #0]
 801b326:	ed9d 8b06 	vldr	d8, [sp, #24]
 801b32a:	eeb0 0a48 	vmov.f32	s0, s16
 801b32e:	eef0 0a68 	vmov.f32	s1, s17
 801b332:	b00b      	add	sp, #44	; 0x2c
 801b334:	ecbd 8b02 	vpop	{d8}
 801b338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b33c:	4642      	mov	r2, r8
 801b33e:	464b      	mov	r3, r9
 801b340:	4640      	mov	r0, r8
 801b342:	4649      	mov	r1, r9
 801b344:	f7e5 faa2 	bl	800088c <__aeabi_ddiv>
 801b348:	2e02      	cmp	r6, #2
 801b34a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b34e:	d1e0      	bne.n	801b312 <sqrt+0x62>
 801b350:	f7ff f954 	bl	801a5fc <__errno>
 801b354:	2321      	movs	r3, #33	; 0x21
 801b356:	6003      	str	r3, [r0, #0]
 801b358:	e7df      	b.n	801b31a <sqrt+0x6a>
 801b35a:	bf00      	nop
 801b35c:	2000027c 	.word	0x2000027c
 801b360:	0801d984 	.word	0x0801d984

0801b364 <powf>:
 801b364:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801b368:	ed2d 8b04 	vpush	{d8-d9}
 801b36c:	4ca7      	ldr	r4, [pc, #668]	; (801b60c <powf+0x2a8>)
 801b36e:	b08a      	sub	sp, #40	; 0x28
 801b370:	eef0 8a40 	vmov.f32	s17, s0
 801b374:	eeb0 8a60 	vmov.f32	s16, s1
 801b378:	f000 ff68 	bl	801c24c <__ieee754_powf>
 801b37c:	f994 5000 	ldrsb.w	r5, [r4]
 801b380:	1c6b      	adds	r3, r5, #1
 801b382:	eeb0 9a40 	vmov.f32	s18, s0
 801b386:	4626      	mov	r6, r4
 801b388:	d05f      	beq.n	801b44a <powf+0xe6>
 801b38a:	eeb4 8a48 	vcmp.f32	s16, s16
 801b38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b392:	d65a      	bvs.n	801b44a <powf+0xe6>
 801b394:	eef4 8a68 	vcmp.f32	s17, s17
 801b398:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b39c:	d721      	bvc.n	801b3e2 <powf+0x7e>
 801b39e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b3a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3a6:	d150      	bne.n	801b44a <powf+0xe6>
 801b3a8:	2301      	movs	r3, #1
 801b3aa:	9300      	str	r3, [sp, #0]
 801b3ac:	4b98      	ldr	r3, [pc, #608]	; (801b610 <powf+0x2ac>)
 801b3ae:	9301      	str	r3, [sp, #4]
 801b3b0:	ee18 0a90 	vmov	r0, s17
 801b3b4:	2300      	movs	r3, #0
 801b3b6:	9308      	str	r3, [sp, #32]
 801b3b8:	f7e5 f8e6 	bl	8000588 <__aeabi_f2d>
 801b3bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b3c0:	ee18 0a10 	vmov	r0, s16
 801b3c4:	f7e5 f8e0 	bl	8000588 <__aeabi_f2d>
 801b3c8:	4b92      	ldr	r3, [pc, #584]	; (801b614 <powf+0x2b0>)
 801b3ca:	2200      	movs	r2, #0
 801b3cc:	2d02      	cmp	r5, #2
 801b3ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b3d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b3d6:	d032      	beq.n	801b43e <powf+0xda>
 801b3d8:	4668      	mov	r0, sp
 801b3da:	f001 fa0b 	bl	801c7f4 <matherr>
 801b3de:	bb40      	cbnz	r0, 801b432 <powf+0xce>
 801b3e0:	e065      	b.n	801b4ae <powf+0x14a>
 801b3e2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801b618 <powf+0x2b4>
 801b3e6:	eef4 8a69 	vcmp.f32	s17, s19
 801b3ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3ee:	d163      	bne.n	801b4b8 <powf+0x154>
 801b3f0:	eeb4 8a69 	vcmp.f32	s16, s19
 801b3f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3f8:	d12e      	bne.n	801b458 <powf+0xf4>
 801b3fa:	2301      	movs	r3, #1
 801b3fc:	9300      	str	r3, [sp, #0]
 801b3fe:	4b84      	ldr	r3, [pc, #528]	; (801b610 <powf+0x2ac>)
 801b400:	9301      	str	r3, [sp, #4]
 801b402:	ee18 0a90 	vmov	r0, s17
 801b406:	2300      	movs	r3, #0
 801b408:	9308      	str	r3, [sp, #32]
 801b40a:	f7e5 f8bd 	bl	8000588 <__aeabi_f2d>
 801b40e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b412:	ee18 0a10 	vmov	r0, s16
 801b416:	f7e5 f8b7 	bl	8000588 <__aeabi_f2d>
 801b41a:	2200      	movs	r2, #0
 801b41c:	2300      	movs	r3, #0
 801b41e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b422:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b426:	2d00      	cmp	r5, #0
 801b428:	d0d6      	beq.n	801b3d8 <powf+0x74>
 801b42a:	4b7a      	ldr	r3, [pc, #488]	; (801b614 <powf+0x2b0>)
 801b42c:	2200      	movs	r2, #0
 801b42e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b432:	9b08      	ldr	r3, [sp, #32]
 801b434:	b11b      	cbz	r3, 801b43e <powf+0xda>
 801b436:	f7ff f8e1 	bl	801a5fc <__errno>
 801b43a:	9b08      	ldr	r3, [sp, #32]
 801b43c:	6003      	str	r3, [r0, #0]
 801b43e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b442:	f7e5 fbc9 	bl	8000bd8 <__aeabi_d2f>
 801b446:	ee09 0a10 	vmov	s18, r0
 801b44a:	eeb0 0a49 	vmov.f32	s0, s18
 801b44e:	b00a      	add	sp, #40	; 0x28
 801b450:	ecbd 8b04 	vpop	{d8-d9}
 801b454:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801b458:	eeb0 0a48 	vmov.f32	s0, s16
 801b45c:	f001 fad5 	bl	801ca0a <finitef>
 801b460:	2800      	cmp	r0, #0
 801b462:	d0f2      	beq.n	801b44a <powf+0xe6>
 801b464:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b46c:	d5ed      	bpl.n	801b44a <powf+0xe6>
 801b46e:	2301      	movs	r3, #1
 801b470:	9300      	str	r3, [sp, #0]
 801b472:	4b67      	ldr	r3, [pc, #412]	; (801b610 <powf+0x2ac>)
 801b474:	9301      	str	r3, [sp, #4]
 801b476:	ee18 0a90 	vmov	r0, s17
 801b47a:	2300      	movs	r3, #0
 801b47c:	9308      	str	r3, [sp, #32]
 801b47e:	f7e5 f883 	bl	8000588 <__aeabi_f2d>
 801b482:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b486:	ee18 0a10 	vmov	r0, s16
 801b48a:	f7e5 f87d 	bl	8000588 <__aeabi_f2d>
 801b48e:	f994 3000 	ldrsb.w	r3, [r4]
 801b492:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b496:	b923      	cbnz	r3, 801b4a2 <powf+0x13e>
 801b498:	2200      	movs	r2, #0
 801b49a:	2300      	movs	r3, #0
 801b49c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b4a0:	e79a      	b.n	801b3d8 <powf+0x74>
 801b4a2:	495e      	ldr	r1, [pc, #376]	; (801b61c <powf+0x2b8>)
 801b4a4:	2000      	movs	r0, #0
 801b4a6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b4aa:	2b02      	cmp	r3, #2
 801b4ac:	d194      	bne.n	801b3d8 <powf+0x74>
 801b4ae:	f7ff f8a5 	bl	801a5fc <__errno>
 801b4b2:	2321      	movs	r3, #33	; 0x21
 801b4b4:	6003      	str	r3, [r0, #0]
 801b4b6:	e7bc      	b.n	801b432 <powf+0xce>
 801b4b8:	f001 faa7 	bl	801ca0a <finitef>
 801b4bc:	4605      	mov	r5, r0
 801b4be:	2800      	cmp	r0, #0
 801b4c0:	d173      	bne.n	801b5aa <powf+0x246>
 801b4c2:	eeb0 0a68 	vmov.f32	s0, s17
 801b4c6:	f001 faa0 	bl	801ca0a <finitef>
 801b4ca:	2800      	cmp	r0, #0
 801b4cc:	d06d      	beq.n	801b5aa <powf+0x246>
 801b4ce:	eeb0 0a48 	vmov.f32	s0, s16
 801b4d2:	f001 fa9a 	bl	801ca0a <finitef>
 801b4d6:	2800      	cmp	r0, #0
 801b4d8:	d067      	beq.n	801b5aa <powf+0x246>
 801b4da:	ee18 0a90 	vmov	r0, s17
 801b4de:	f7e5 f853 	bl	8000588 <__aeabi_f2d>
 801b4e2:	4680      	mov	r8, r0
 801b4e4:	ee18 0a10 	vmov	r0, s16
 801b4e8:	4689      	mov	r9, r1
 801b4ea:	f7e5 f84d 	bl	8000588 <__aeabi_f2d>
 801b4ee:	eeb4 9a49 	vcmp.f32	s18, s18
 801b4f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4f6:	f994 4000 	ldrsb.w	r4, [r4]
 801b4fa:	4b45      	ldr	r3, [pc, #276]	; (801b610 <powf+0x2ac>)
 801b4fc:	d713      	bvc.n	801b526 <powf+0x1c2>
 801b4fe:	2201      	movs	r2, #1
 801b500:	e9cd 2300 	strd	r2, r3, [sp]
 801b504:	9508      	str	r5, [sp, #32]
 801b506:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b50a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b50e:	2c00      	cmp	r4, #0
 801b510:	d0c2      	beq.n	801b498 <powf+0x134>
 801b512:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801b516:	ee17 0a90 	vmov	r0, s15
 801b51a:	f7e5 f835 	bl	8000588 <__aeabi_f2d>
 801b51e:	2c02      	cmp	r4, #2
 801b520:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b524:	e7c2      	b.n	801b4ac <powf+0x148>
 801b526:	2203      	movs	r2, #3
 801b528:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b52c:	e9cd 2300 	strd	r2, r3, [sp]
 801b530:	9508      	str	r5, [sp, #32]
 801b532:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b536:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b53a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b53e:	b9fc      	cbnz	r4, 801b580 <powf+0x21c>
 801b540:	4b37      	ldr	r3, [pc, #220]	; (801b620 <powf+0x2bc>)
 801b542:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b546:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b54e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b552:	d553      	bpl.n	801b5fc <powf+0x298>
 801b554:	eeb0 0a48 	vmov.f32	s0, s16
 801b558:	f001 fa68 	bl	801ca2c <rintf>
 801b55c:	eeb4 0a48 	vcmp.f32	s0, s16
 801b560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b564:	d004      	beq.n	801b570 <powf+0x20c>
 801b566:	4b2f      	ldr	r3, [pc, #188]	; (801b624 <powf+0x2c0>)
 801b568:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b56c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b570:	f996 3000 	ldrsb.w	r3, [r6]
 801b574:	2b02      	cmp	r3, #2
 801b576:	d141      	bne.n	801b5fc <powf+0x298>
 801b578:	f7ff f840 	bl	801a5fc <__errno>
 801b57c:	2322      	movs	r3, #34	; 0x22
 801b57e:	e799      	b.n	801b4b4 <powf+0x150>
 801b580:	4b29      	ldr	r3, [pc, #164]	; (801b628 <powf+0x2c4>)
 801b582:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b586:	2200      	movs	r2, #0
 801b588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b58c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b590:	d5ee      	bpl.n	801b570 <powf+0x20c>
 801b592:	eeb0 0a48 	vmov.f32	s0, s16
 801b596:	f001 fa49 	bl	801ca2c <rintf>
 801b59a:	eeb4 0a48 	vcmp.f32	s0, s16
 801b59e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5a2:	d0e5      	beq.n	801b570 <powf+0x20c>
 801b5a4:	2200      	movs	r2, #0
 801b5a6:	4b1d      	ldr	r3, [pc, #116]	; (801b61c <powf+0x2b8>)
 801b5a8:	e7e0      	b.n	801b56c <powf+0x208>
 801b5aa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801b5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5b2:	f47f af4a 	bne.w	801b44a <powf+0xe6>
 801b5b6:	eeb0 0a68 	vmov.f32	s0, s17
 801b5ba:	f001 fa26 	bl	801ca0a <finitef>
 801b5be:	2800      	cmp	r0, #0
 801b5c0:	f43f af43 	beq.w	801b44a <powf+0xe6>
 801b5c4:	eeb0 0a48 	vmov.f32	s0, s16
 801b5c8:	f001 fa1f 	bl	801ca0a <finitef>
 801b5cc:	2800      	cmp	r0, #0
 801b5ce:	f43f af3c 	beq.w	801b44a <powf+0xe6>
 801b5d2:	2304      	movs	r3, #4
 801b5d4:	9300      	str	r3, [sp, #0]
 801b5d6:	4b0e      	ldr	r3, [pc, #56]	; (801b610 <powf+0x2ac>)
 801b5d8:	9301      	str	r3, [sp, #4]
 801b5da:	ee18 0a90 	vmov	r0, s17
 801b5de:	2300      	movs	r3, #0
 801b5e0:	9308      	str	r3, [sp, #32]
 801b5e2:	f7e4 ffd1 	bl	8000588 <__aeabi_f2d>
 801b5e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5ea:	ee18 0a10 	vmov	r0, s16
 801b5ee:	f7e4 ffcb 	bl	8000588 <__aeabi_f2d>
 801b5f2:	2200      	movs	r2, #0
 801b5f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b5f8:	2300      	movs	r3, #0
 801b5fa:	e7b7      	b.n	801b56c <powf+0x208>
 801b5fc:	4668      	mov	r0, sp
 801b5fe:	f001 f8f9 	bl	801c7f4 <matherr>
 801b602:	2800      	cmp	r0, #0
 801b604:	f47f af15 	bne.w	801b432 <powf+0xce>
 801b608:	e7b6      	b.n	801b578 <powf+0x214>
 801b60a:	bf00      	nop
 801b60c:	2000027c 	.word	0x2000027c
 801b610:	0801d989 	.word	0x0801d989
 801b614:	3ff00000 	.word	0x3ff00000
 801b618:	00000000 	.word	0x00000000
 801b61c:	fff00000 	.word	0xfff00000
 801b620:	47efffff 	.word	0x47efffff
 801b624:	c7efffff 	.word	0xc7efffff
 801b628:	7ff00000 	.word	0x7ff00000

0801b62c <sqrtf>:
 801b62c:	b510      	push	{r4, lr}
 801b62e:	ed2d 8b02 	vpush	{d8}
 801b632:	b08a      	sub	sp, #40	; 0x28
 801b634:	eeb0 8a40 	vmov.f32	s16, s0
 801b638:	f001 f8c8 	bl	801c7cc <__ieee754_sqrtf>
 801b63c:	4b21      	ldr	r3, [pc, #132]	; (801b6c4 <sqrtf+0x98>)
 801b63e:	f993 4000 	ldrsb.w	r4, [r3]
 801b642:	1c63      	adds	r3, r4, #1
 801b644:	d02c      	beq.n	801b6a0 <sqrtf+0x74>
 801b646:	eeb4 8a48 	vcmp.f32	s16, s16
 801b64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b64e:	d627      	bvs.n	801b6a0 <sqrtf+0x74>
 801b650:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b658:	d522      	bpl.n	801b6a0 <sqrtf+0x74>
 801b65a:	2301      	movs	r3, #1
 801b65c:	9300      	str	r3, [sp, #0]
 801b65e:	4b1a      	ldr	r3, [pc, #104]	; (801b6c8 <sqrtf+0x9c>)
 801b660:	9301      	str	r3, [sp, #4]
 801b662:	ee18 0a10 	vmov	r0, s16
 801b666:	2300      	movs	r3, #0
 801b668:	9308      	str	r3, [sp, #32]
 801b66a:	f7e4 ff8d 	bl	8000588 <__aeabi_f2d>
 801b66e:	2200      	movs	r2, #0
 801b670:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b674:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b678:	2300      	movs	r3, #0
 801b67a:	b9ac      	cbnz	r4, 801b6a8 <sqrtf+0x7c>
 801b67c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b680:	4668      	mov	r0, sp
 801b682:	f001 f8b7 	bl	801c7f4 <matherr>
 801b686:	b1b8      	cbz	r0, 801b6b8 <sqrtf+0x8c>
 801b688:	9b08      	ldr	r3, [sp, #32]
 801b68a:	b11b      	cbz	r3, 801b694 <sqrtf+0x68>
 801b68c:	f7fe ffb6 	bl	801a5fc <__errno>
 801b690:	9b08      	ldr	r3, [sp, #32]
 801b692:	6003      	str	r3, [r0, #0]
 801b694:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b698:	f7e5 fa9e 	bl	8000bd8 <__aeabi_d2f>
 801b69c:	ee00 0a10 	vmov	s0, r0
 801b6a0:	b00a      	add	sp, #40	; 0x28
 801b6a2:	ecbd 8b02 	vpop	{d8}
 801b6a6:	bd10      	pop	{r4, pc}
 801b6a8:	4610      	mov	r0, r2
 801b6aa:	4619      	mov	r1, r3
 801b6ac:	f7e5 f8ee 	bl	800088c <__aeabi_ddiv>
 801b6b0:	2c02      	cmp	r4, #2
 801b6b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b6b6:	d1e3      	bne.n	801b680 <sqrtf+0x54>
 801b6b8:	f7fe ffa0 	bl	801a5fc <__errno>
 801b6bc:	2321      	movs	r3, #33	; 0x21
 801b6be:	6003      	str	r3, [r0, #0]
 801b6c0:	e7e2      	b.n	801b688 <sqrtf+0x5c>
 801b6c2:	bf00      	nop
 801b6c4:	2000027c 	.word	0x2000027c
 801b6c8:	0801d98e 	.word	0x0801d98e
 801b6cc:	00000000 	.word	0x00000000

0801b6d0 <__ieee754_pow>:
 801b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6d4:	b091      	sub	sp, #68	; 0x44
 801b6d6:	ed8d 1b00 	vstr	d1, [sp]
 801b6da:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b6de:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b6e2:	ea58 0302 	orrs.w	r3, r8, r2
 801b6e6:	ec57 6b10 	vmov	r6, r7, d0
 801b6ea:	f000 84be 	beq.w	801c06a <__ieee754_pow+0x99a>
 801b6ee:	4b7a      	ldr	r3, [pc, #488]	; (801b8d8 <__ieee754_pow+0x208>)
 801b6f0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b6f4:	429c      	cmp	r4, r3
 801b6f6:	463d      	mov	r5, r7
 801b6f8:	ee10 aa10 	vmov	sl, s0
 801b6fc:	dc09      	bgt.n	801b712 <__ieee754_pow+0x42>
 801b6fe:	d103      	bne.n	801b708 <__ieee754_pow+0x38>
 801b700:	b93e      	cbnz	r6, 801b712 <__ieee754_pow+0x42>
 801b702:	45a0      	cmp	r8, r4
 801b704:	dc0d      	bgt.n	801b722 <__ieee754_pow+0x52>
 801b706:	e001      	b.n	801b70c <__ieee754_pow+0x3c>
 801b708:	4598      	cmp	r8, r3
 801b70a:	dc02      	bgt.n	801b712 <__ieee754_pow+0x42>
 801b70c:	4598      	cmp	r8, r3
 801b70e:	d10e      	bne.n	801b72e <__ieee754_pow+0x5e>
 801b710:	b16a      	cbz	r2, 801b72e <__ieee754_pow+0x5e>
 801b712:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b716:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b71a:	ea54 030a 	orrs.w	r3, r4, sl
 801b71e:	f000 84a4 	beq.w	801c06a <__ieee754_pow+0x99a>
 801b722:	486e      	ldr	r0, [pc, #440]	; (801b8dc <__ieee754_pow+0x20c>)
 801b724:	b011      	add	sp, #68	; 0x44
 801b726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b72a:	f001 b865 	b.w	801c7f8 <nan>
 801b72e:	2d00      	cmp	r5, #0
 801b730:	da53      	bge.n	801b7da <__ieee754_pow+0x10a>
 801b732:	4b6b      	ldr	r3, [pc, #428]	; (801b8e0 <__ieee754_pow+0x210>)
 801b734:	4598      	cmp	r8, r3
 801b736:	dc4d      	bgt.n	801b7d4 <__ieee754_pow+0x104>
 801b738:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b73c:	4598      	cmp	r8, r3
 801b73e:	dd4c      	ble.n	801b7da <__ieee754_pow+0x10a>
 801b740:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b744:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b748:	2b14      	cmp	r3, #20
 801b74a:	dd26      	ble.n	801b79a <__ieee754_pow+0xca>
 801b74c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b750:	fa22 f103 	lsr.w	r1, r2, r3
 801b754:	fa01 f303 	lsl.w	r3, r1, r3
 801b758:	4293      	cmp	r3, r2
 801b75a:	d13e      	bne.n	801b7da <__ieee754_pow+0x10a>
 801b75c:	f001 0101 	and.w	r1, r1, #1
 801b760:	f1c1 0b02 	rsb	fp, r1, #2
 801b764:	2a00      	cmp	r2, #0
 801b766:	d15b      	bne.n	801b820 <__ieee754_pow+0x150>
 801b768:	4b5b      	ldr	r3, [pc, #364]	; (801b8d8 <__ieee754_pow+0x208>)
 801b76a:	4598      	cmp	r8, r3
 801b76c:	d124      	bne.n	801b7b8 <__ieee754_pow+0xe8>
 801b76e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b772:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b776:	ea53 030a 	orrs.w	r3, r3, sl
 801b77a:	f000 8476 	beq.w	801c06a <__ieee754_pow+0x99a>
 801b77e:	4b59      	ldr	r3, [pc, #356]	; (801b8e4 <__ieee754_pow+0x214>)
 801b780:	429c      	cmp	r4, r3
 801b782:	dd2d      	ble.n	801b7e0 <__ieee754_pow+0x110>
 801b784:	f1b9 0f00 	cmp.w	r9, #0
 801b788:	f280 8473 	bge.w	801c072 <__ieee754_pow+0x9a2>
 801b78c:	2000      	movs	r0, #0
 801b78e:	2100      	movs	r1, #0
 801b790:	ec41 0b10 	vmov	d0, r0, r1
 801b794:	b011      	add	sp, #68	; 0x44
 801b796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b79a:	2a00      	cmp	r2, #0
 801b79c:	d13e      	bne.n	801b81c <__ieee754_pow+0x14c>
 801b79e:	f1c3 0314 	rsb	r3, r3, #20
 801b7a2:	fa48 f103 	asr.w	r1, r8, r3
 801b7a6:	fa01 f303 	lsl.w	r3, r1, r3
 801b7aa:	4543      	cmp	r3, r8
 801b7ac:	f040 8469 	bne.w	801c082 <__ieee754_pow+0x9b2>
 801b7b0:	f001 0101 	and.w	r1, r1, #1
 801b7b4:	f1c1 0b02 	rsb	fp, r1, #2
 801b7b8:	4b4b      	ldr	r3, [pc, #300]	; (801b8e8 <__ieee754_pow+0x218>)
 801b7ba:	4598      	cmp	r8, r3
 801b7bc:	d118      	bne.n	801b7f0 <__ieee754_pow+0x120>
 801b7be:	f1b9 0f00 	cmp.w	r9, #0
 801b7c2:	f280 845a 	bge.w	801c07a <__ieee754_pow+0x9aa>
 801b7c6:	4948      	ldr	r1, [pc, #288]	; (801b8e8 <__ieee754_pow+0x218>)
 801b7c8:	4632      	mov	r2, r6
 801b7ca:	463b      	mov	r3, r7
 801b7cc:	2000      	movs	r0, #0
 801b7ce:	f7e5 f85d 	bl	800088c <__aeabi_ddiv>
 801b7d2:	e7dd      	b.n	801b790 <__ieee754_pow+0xc0>
 801b7d4:	f04f 0b02 	mov.w	fp, #2
 801b7d8:	e7c4      	b.n	801b764 <__ieee754_pow+0x94>
 801b7da:	f04f 0b00 	mov.w	fp, #0
 801b7de:	e7c1      	b.n	801b764 <__ieee754_pow+0x94>
 801b7e0:	f1b9 0f00 	cmp.w	r9, #0
 801b7e4:	dad2      	bge.n	801b78c <__ieee754_pow+0xbc>
 801b7e6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b7ea:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b7ee:	e7cf      	b.n	801b790 <__ieee754_pow+0xc0>
 801b7f0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b7f4:	d106      	bne.n	801b804 <__ieee754_pow+0x134>
 801b7f6:	4632      	mov	r2, r6
 801b7f8:	463b      	mov	r3, r7
 801b7fa:	4610      	mov	r0, r2
 801b7fc:	4619      	mov	r1, r3
 801b7fe:	f7e4 ff1b 	bl	8000638 <__aeabi_dmul>
 801b802:	e7c5      	b.n	801b790 <__ieee754_pow+0xc0>
 801b804:	4b39      	ldr	r3, [pc, #228]	; (801b8ec <__ieee754_pow+0x21c>)
 801b806:	4599      	cmp	r9, r3
 801b808:	d10a      	bne.n	801b820 <__ieee754_pow+0x150>
 801b80a:	2d00      	cmp	r5, #0
 801b80c:	db08      	blt.n	801b820 <__ieee754_pow+0x150>
 801b80e:	ec47 6b10 	vmov	d0, r6, r7
 801b812:	b011      	add	sp, #68	; 0x44
 801b814:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b818:	f000 bc68 	b.w	801c0ec <__ieee754_sqrt>
 801b81c:	f04f 0b00 	mov.w	fp, #0
 801b820:	ec47 6b10 	vmov	d0, r6, r7
 801b824:	f000 ffd5 	bl	801c7d2 <fabs>
 801b828:	ec51 0b10 	vmov	r0, r1, d0
 801b82c:	f1ba 0f00 	cmp.w	sl, #0
 801b830:	d127      	bne.n	801b882 <__ieee754_pow+0x1b2>
 801b832:	b124      	cbz	r4, 801b83e <__ieee754_pow+0x16e>
 801b834:	4b2c      	ldr	r3, [pc, #176]	; (801b8e8 <__ieee754_pow+0x218>)
 801b836:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b83a:	429a      	cmp	r2, r3
 801b83c:	d121      	bne.n	801b882 <__ieee754_pow+0x1b2>
 801b83e:	f1b9 0f00 	cmp.w	r9, #0
 801b842:	da05      	bge.n	801b850 <__ieee754_pow+0x180>
 801b844:	4602      	mov	r2, r0
 801b846:	460b      	mov	r3, r1
 801b848:	2000      	movs	r0, #0
 801b84a:	4927      	ldr	r1, [pc, #156]	; (801b8e8 <__ieee754_pow+0x218>)
 801b84c:	f7e5 f81e 	bl	800088c <__aeabi_ddiv>
 801b850:	2d00      	cmp	r5, #0
 801b852:	da9d      	bge.n	801b790 <__ieee754_pow+0xc0>
 801b854:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b858:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b85c:	ea54 030b 	orrs.w	r3, r4, fp
 801b860:	d108      	bne.n	801b874 <__ieee754_pow+0x1a4>
 801b862:	4602      	mov	r2, r0
 801b864:	460b      	mov	r3, r1
 801b866:	4610      	mov	r0, r2
 801b868:	4619      	mov	r1, r3
 801b86a:	f7e4 fd2d 	bl	80002c8 <__aeabi_dsub>
 801b86e:	4602      	mov	r2, r0
 801b870:	460b      	mov	r3, r1
 801b872:	e7ac      	b.n	801b7ce <__ieee754_pow+0xfe>
 801b874:	f1bb 0f01 	cmp.w	fp, #1
 801b878:	d18a      	bne.n	801b790 <__ieee754_pow+0xc0>
 801b87a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b87e:	4619      	mov	r1, r3
 801b880:	e786      	b.n	801b790 <__ieee754_pow+0xc0>
 801b882:	0fed      	lsrs	r5, r5, #31
 801b884:	1e6b      	subs	r3, r5, #1
 801b886:	930d      	str	r3, [sp, #52]	; 0x34
 801b888:	ea5b 0303 	orrs.w	r3, fp, r3
 801b88c:	d102      	bne.n	801b894 <__ieee754_pow+0x1c4>
 801b88e:	4632      	mov	r2, r6
 801b890:	463b      	mov	r3, r7
 801b892:	e7e8      	b.n	801b866 <__ieee754_pow+0x196>
 801b894:	4b16      	ldr	r3, [pc, #88]	; (801b8f0 <__ieee754_pow+0x220>)
 801b896:	4598      	cmp	r8, r3
 801b898:	f340 80fe 	ble.w	801ba98 <__ieee754_pow+0x3c8>
 801b89c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b8a0:	4598      	cmp	r8, r3
 801b8a2:	dd0a      	ble.n	801b8ba <__ieee754_pow+0x1ea>
 801b8a4:	4b0f      	ldr	r3, [pc, #60]	; (801b8e4 <__ieee754_pow+0x214>)
 801b8a6:	429c      	cmp	r4, r3
 801b8a8:	dc0d      	bgt.n	801b8c6 <__ieee754_pow+0x1f6>
 801b8aa:	f1b9 0f00 	cmp.w	r9, #0
 801b8ae:	f6bf af6d 	bge.w	801b78c <__ieee754_pow+0xbc>
 801b8b2:	a307      	add	r3, pc, #28	; (adr r3, 801b8d0 <__ieee754_pow+0x200>)
 801b8b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8b8:	e79f      	b.n	801b7fa <__ieee754_pow+0x12a>
 801b8ba:	4b0e      	ldr	r3, [pc, #56]	; (801b8f4 <__ieee754_pow+0x224>)
 801b8bc:	429c      	cmp	r4, r3
 801b8be:	ddf4      	ble.n	801b8aa <__ieee754_pow+0x1da>
 801b8c0:	4b09      	ldr	r3, [pc, #36]	; (801b8e8 <__ieee754_pow+0x218>)
 801b8c2:	429c      	cmp	r4, r3
 801b8c4:	dd18      	ble.n	801b8f8 <__ieee754_pow+0x228>
 801b8c6:	f1b9 0f00 	cmp.w	r9, #0
 801b8ca:	dcf2      	bgt.n	801b8b2 <__ieee754_pow+0x1e2>
 801b8cc:	e75e      	b.n	801b78c <__ieee754_pow+0xbc>
 801b8ce:	bf00      	nop
 801b8d0:	8800759c 	.word	0x8800759c
 801b8d4:	7e37e43c 	.word	0x7e37e43c
 801b8d8:	7ff00000 	.word	0x7ff00000
 801b8dc:	0801d8f1 	.word	0x0801d8f1
 801b8e0:	433fffff 	.word	0x433fffff
 801b8e4:	3fefffff 	.word	0x3fefffff
 801b8e8:	3ff00000 	.word	0x3ff00000
 801b8ec:	3fe00000 	.word	0x3fe00000
 801b8f0:	41e00000 	.word	0x41e00000
 801b8f4:	3feffffe 	.word	0x3feffffe
 801b8f8:	2200      	movs	r2, #0
 801b8fa:	4b63      	ldr	r3, [pc, #396]	; (801ba88 <__ieee754_pow+0x3b8>)
 801b8fc:	f7e4 fce4 	bl	80002c8 <__aeabi_dsub>
 801b900:	a355      	add	r3, pc, #340	; (adr r3, 801ba58 <__ieee754_pow+0x388>)
 801b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b906:	4604      	mov	r4, r0
 801b908:	460d      	mov	r5, r1
 801b90a:	f7e4 fe95 	bl	8000638 <__aeabi_dmul>
 801b90e:	a354      	add	r3, pc, #336	; (adr r3, 801ba60 <__ieee754_pow+0x390>)
 801b910:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b914:	4606      	mov	r6, r0
 801b916:	460f      	mov	r7, r1
 801b918:	4620      	mov	r0, r4
 801b91a:	4629      	mov	r1, r5
 801b91c:	f7e4 fe8c 	bl	8000638 <__aeabi_dmul>
 801b920:	2200      	movs	r2, #0
 801b922:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b926:	4b59      	ldr	r3, [pc, #356]	; (801ba8c <__ieee754_pow+0x3bc>)
 801b928:	4620      	mov	r0, r4
 801b92a:	4629      	mov	r1, r5
 801b92c:	f7e4 fe84 	bl	8000638 <__aeabi_dmul>
 801b930:	4602      	mov	r2, r0
 801b932:	460b      	mov	r3, r1
 801b934:	a14c      	add	r1, pc, #304	; (adr r1, 801ba68 <__ieee754_pow+0x398>)
 801b936:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b93a:	f7e4 fcc5 	bl	80002c8 <__aeabi_dsub>
 801b93e:	4622      	mov	r2, r4
 801b940:	462b      	mov	r3, r5
 801b942:	f7e4 fe79 	bl	8000638 <__aeabi_dmul>
 801b946:	4602      	mov	r2, r0
 801b948:	460b      	mov	r3, r1
 801b94a:	2000      	movs	r0, #0
 801b94c:	4950      	ldr	r1, [pc, #320]	; (801ba90 <__ieee754_pow+0x3c0>)
 801b94e:	f7e4 fcbb 	bl	80002c8 <__aeabi_dsub>
 801b952:	4622      	mov	r2, r4
 801b954:	462b      	mov	r3, r5
 801b956:	4680      	mov	r8, r0
 801b958:	4689      	mov	r9, r1
 801b95a:	4620      	mov	r0, r4
 801b95c:	4629      	mov	r1, r5
 801b95e:	f7e4 fe6b 	bl	8000638 <__aeabi_dmul>
 801b962:	4602      	mov	r2, r0
 801b964:	460b      	mov	r3, r1
 801b966:	4640      	mov	r0, r8
 801b968:	4649      	mov	r1, r9
 801b96a:	f7e4 fe65 	bl	8000638 <__aeabi_dmul>
 801b96e:	a340      	add	r3, pc, #256	; (adr r3, 801ba70 <__ieee754_pow+0x3a0>)
 801b970:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b974:	f7e4 fe60 	bl	8000638 <__aeabi_dmul>
 801b978:	4602      	mov	r2, r0
 801b97a:	460b      	mov	r3, r1
 801b97c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b980:	f7e4 fca2 	bl	80002c8 <__aeabi_dsub>
 801b984:	4602      	mov	r2, r0
 801b986:	460b      	mov	r3, r1
 801b988:	4604      	mov	r4, r0
 801b98a:	460d      	mov	r5, r1
 801b98c:	4630      	mov	r0, r6
 801b98e:	4639      	mov	r1, r7
 801b990:	f7e4 fc9c 	bl	80002cc <__adddf3>
 801b994:	2000      	movs	r0, #0
 801b996:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b99a:	4632      	mov	r2, r6
 801b99c:	463b      	mov	r3, r7
 801b99e:	f7e4 fc93 	bl	80002c8 <__aeabi_dsub>
 801b9a2:	4602      	mov	r2, r0
 801b9a4:	460b      	mov	r3, r1
 801b9a6:	4620      	mov	r0, r4
 801b9a8:	4629      	mov	r1, r5
 801b9aa:	f7e4 fc8d 	bl	80002c8 <__aeabi_dsub>
 801b9ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b9b0:	f10b 33ff 	add.w	r3, fp, #4294967295
 801b9b4:	4313      	orrs	r3, r2
 801b9b6:	4606      	mov	r6, r0
 801b9b8:	460f      	mov	r7, r1
 801b9ba:	f040 81eb 	bne.w	801bd94 <__ieee754_pow+0x6c4>
 801b9be:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801ba78 <__ieee754_pow+0x3a8>
 801b9c2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801b9c6:	2400      	movs	r4, #0
 801b9c8:	4622      	mov	r2, r4
 801b9ca:	462b      	mov	r3, r5
 801b9cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b9d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b9d4:	f7e4 fc78 	bl	80002c8 <__aeabi_dsub>
 801b9d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b9dc:	f7e4 fe2c 	bl	8000638 <__aeabi_dmul>
 801b9e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b9e4:	4680      	mov	r8, r0
 801b9e6:	4689      	mov	r9, r1
 801b9e8:	4630      	mov	r0, r6
 801b9ea:	4639      	mov	r1, r7
 801b9ec:	f7e4 fe24 	bl	8000638 <__aeabi_dmul>
 801b9f0:	4602      	mov	r2, r0
 801b9f2:	460b      	mov	r3, r1
 801b9f4:	4640      	mov	r0, r8
 801b9f6:	4649      	mov	r1, r9
 801b9f8:	f7e4 fc68 	bl	80002cc <__adddf3>
 801b9fc:	4622      	mov	r2, r4
 801b9fe:	462b      	mov	r3, r5
 801ba00:	4680      	mov	r8, r0
 801ba02:	4689      	mov	r9, r1
 801ba04:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ba08:	f7e4 fe16 	bl	8000638 <__aeabi_dmul>
 801ba0c:	460b      	mov	r3, r1
 801ba0e:	4604      	mov	r4, r0
 801ba10:	460d      	mov	r5, r1
 801ba12:	4602      	mov	r2, r0
 801ba14:	4649      	mov	r1, r9
 801ba16:	4640      	mov	r0, r8
 801ba18:	e9cd 4500 	strd	r4, r5, [sp]
 801ba1c:	f7e4 fc56 	bl	80002cc <__adddf3>
 801ba20:	4b1c      	ldr	r3, [pc, #112]	; (801ba94 <__ieee754_pow+0x3c4>)
 801ba22:	4299      	cmp	r1, r3
 801ba24:	4606      	mov	r6, r0
 801ba26:	460f      	mov	r7, r1
 801ba28:	468b      	mov	fp, r1
 801ba2a:	f340 82f7 	ble.w	801c01c <__ieee754_pow+0x94c>
 801ba2e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801ba32:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801ba36:	4303      	orrs	r3, r0
 801ba38:	f000 81ea 	beq.w	801be10 <__ieee754_pow+0x740>
 801ba3c:	a310      	add	r3, pc, #64	; (adr r3, 801ba80 <__ieee754_pow+0x3b0>)
 801ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba42:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ba46:	f7e4 fdf7 	bl	8000638 <__aeabi_dmul>
 801ba4a:	a30d      	add	r3, pc, #52	; (adr r3, 801ba80 <__ieee754_pow+0x3b0>)
 801ba4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba50:	e6d5      	b.n	801b7fe <__ieee754_pow+0x12e>
 801ba52:	bf00      	nop
 801ba54:	f3af 8000 	nop.w
 801ba58:	60000000 	.word	0x60000000
 801ba5c:	3ff71547 	.word	0x3ff71547
 801ba60:	f85ddf44 	.word	0xf85ddf44
 801ba64:	3e54ae0b 	.word	0x3e54ae0b
 801ba68:	55555555 	.word	0x55555555
 801ba6c:	3fd55555 	.word	0x3fd55555
 801ba70:	652b82fe 	.word	0x652b82fe
 801ba74:	3ff71547 	.word	0x3ff71547
 801ba78:	00000000 	.word	0x00000000
 801ba7c:	bff00000 	.word	0xbff00000
 801ba80:	8800759c 	.word	0x8800759c
 801ba84:	7e37e43c 	.word	0x7e37e43c
 801ba88:	3ff00000 	.word	0x3ff00000
 801ba8c:	3fd00000 	.word	0x3fd00000
 801ba90:	3fe00000 	.word	0x3fe00000
 801ba94:	408fffff 	.word	0x408fffff
 801ba98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801ba9c:	f04f 0200 	mov.w	r2, #0
 801baa0:	da05      	bge.n	801baae <__ieee754_pow+0x3de>
 801baa2:	4bd3      	ldr	r3, [pc, #844]	; (801bdf0 <__ieee754_pow+0x720>)
 801baa4:	f7e4 fdc8 	bl	8000638 <__aeabi_dmul>
 801baa8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801baac:	460c      	mov	r4, r1
 801baae:	1523      	asrs	r3, r4, #20
 801bab0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801bab4:	4413      	add	r3, r2
 801bab6:	9309      	str	r3, [sp, #36]	; 0x24
 801bab8:	4bce      	ldr	r3, [pc, #824]	; (801bdf4 <__ieee754_pow+0x724>)
 801baba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801babe:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801bac2:	429c      	cmp	r4, r3
 801bac4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801bac8:	dd08      	ble.n	801badc <__ieee754_pow+0x40c>
 801baca:	4bcb      	ldr	r3, [pc, #812]	; (801bdf8 <__ieee754_pow+0x728>)
 801bacc:	429c      	cmp	r4, r3
 801bace:	f340 815e 	ble.w	801bd8e <__ieee754_pow+0x6be>
 801bad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bad4:	3301      	adds	r3, #1
 801bad6:	9309      	str	r3, [sp, #36]	; 0x24
 801bad8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801badc:	f04f 0a00 	mov.w	sl, #0
 801bae0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801bae4:	930c      	str	r3, [sp, #48]	; 0x30
 801bae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bae8:	4bc4      	ldr	r3, [pc, #784]	; (801bdfc <__ieee754_pow+0x72c>)
 801baea:	4413      	add	r3, r2
 801baec:	ed93 7b00 	vldr	d7, [r3]
 801baf0:	4629      	mov	r1, r5
 801baf2:	ec53 2b17 	vmov	r2, r3, d7
 801baf6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801bafa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bafe:	f7e4 fbe3 	bl	80002c8 <__aeabi_dsub>
 801bb02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bb06:	4606      	mov	r6, r0
 801bb08:	460f      	mov	r7, r1
 801bb0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bb0e:	f7e4 fbdd 	bl	80002cc <__adddf3>
 801bb12:	4602      	mov	r2, r0
 801bb14:	460b      	mov	r3, r1
 801bb16:	2000      	movs	r0, #0
 801bb18:	49b9      	ldr	r1, [pc, #740]	; (801be00 <__ieee754_pow+0x730>)
 801bb1a:	f7e4 feb7 	bl	800088c <__aeabi_ddiv>
 801bb1e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801bb22:	4602      	mov	r2, r0
 801bb24:	460b      	mov	r3, r1
 801bb26:	4630      	mov	r0, r6
 801bb28:	4639      	mov	r1, r7
 801bb2a:	f7e4 fd85 	bl	8000638 <__aeabi_dmul>
 801bb2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb32:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801bb36:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801bb3a:	2300      	movs	r3, #0
 801bb3c:	9302      	str	r3, [sp, #8]
 801bb3e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801bb42:	106d      	asrs	r5, r5, #1
 801bb44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801bb48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801bb52:	4640      	mov	r0, r8
 801bb54:	4649      	mov	r1, r9
 801bb56:	4614      	mov	r4, r2
 801bb58:	461d      	mov	r5, r3
 801bb5a:	f7e4 fd6d 	bl	8000638 <__aeabi_dmul>
 801bb5e:	4602      	mov	r2, r0
 801bb60:	460b      	mov	r3, r1
 801bb62:	4630      	mov	r0, r6
 801bb64:	4639      	mov	r1, r7
 801bb66:	f7e4 fbaf 	bl	80002c8 <__aeabi_dsub>
 801bb6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bb6e:	4606      	mov	r6, r0
 801bb70:	460f      	mov	r7, r1
 801bb72:	4620      	mov	r0, r4
 801bb74:	4629      	mov	r1, r5
 801bb76:	f7e4 fba7 	bl	80002c8 <__aeabi_dsub>
 801bb7a:	4602      	mov	r2, r0
 801bb7c:	460b      	mov	r3, r1
 801bb7e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bb82:	f7e4 fba1 	bl	80002c8 <__aeabi_dsub>
 801bb86:	4642      	mov	r2, r8
 801bb88:	464b      	mov	r3, r9
 801bb8a:	f7e4 fd55 	bl	8000638 <__aeabi_dmul>
 801bb8e:	4602      	mov	r2, r0
 801bb90:	460b      	mov	r3, r1
 801bb92:	4630      	mov	r0, r6
 801bb94:	4639      	mov	r1, r7
 801bb96:	f7e4 fb97 	bl	80002c8 <__aeabi_dsub>
 801bb9a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801bb9e:	f7e4 fd4b 	bl	8000638 <__aeabi_dmul>
 801bba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bba6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bbaa:	4610      	mov	r0, r2
 801bbac:	4619      	mov	r1, r3
 801bbae:	f7e4 fd43 	bl	8000638 <__aeabi_dmul>
 801bbb2:	a37b      	add	r3, pc, #492	; (adr r3, 801bda0 <__ieee754_pow+0x6d0>)
 801bbb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbb8:	4604      	mov	r4, r0
 801bbba:	460d      	mov	r5, r1
 801bbbc:	f7e4 fd3c 	bl	8000638 <__aeabi_dmul>
 801bbc0:	a379      	add	r3, pc, #484	; (adr r3, 801bda8 <__ieee754_pow+0x6d8>)
 801bbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbc6:	f7e4 fb81 	bl	80002cc <__adddf3>
 801bbca:	4622      	mov	r2, r4
 801bbcc:	462b      	mov	r3, r5
 801bbce:	f7e4 fd33 	bl	8000638 <__aeabi_dmul>
 801bbd2:	a377      	add	r3, pc, #476	; (adr r3, 801bdb0 <__ieee754_pow+0x6e0>)
 801bbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbd8:	f7e4 fb78 	bl	80002cc <__adddf3>
 801bbdc:	4622      	mov	r2, r4
 801bbde:	462b      	mov	r3, r5
 801bbe0:	f7e4 fd2a 	bl	8000638 <__aeabi_dmul>
 801bbe4:	a374      	add	r3, pc, #464	; (adr r3, 801bdb8 <__ieee754_pow+0x6e8>)
 801bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbea:	f7e4 fb6f 	bl	80002cc <__adddf3>
 801bbee:	4622      	mov	r2, r4
 801bbf0:	462b      	mov	r3, r5
 801bbf2:	f7e4 fd21 	bl	8000638 <__aeabi_dmul>
 801bbf6:	a372      	add	r3, pc, #456	; (adr r3, 801bdc0 <__ieee754_pow+0x6f0>)
 801bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbfc:	f7e4 fb66 	bl	80002cc <__adddf3>
 801bc00:	4622      	mov	r2, r4
 801bc02:	462b      	mov	r3, r5
 801bc04:	f7e4 fd18 	bl	8000638 <__aeabi_dmul>
 801bc08:	a36f      	add	r3, pc, #444	; (adr r3, 801bdc8 <__ieee754_pow+0x6f8>)
 801bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc0e:	f7e4 fb5d 	bl	80002cc <__adddf3>
 801bc12:	4622      	mov	r2, r4
 801bc14:	4606      	mov	r6, r0
 801bc16:	460f      	mov	r7, r1
 801bc18:	462b      	mov	r3, r5
 801bc1a:	4620      	mov	r0, r4
 801bc1c:	4629      	mov	r1, r5
 801bc1e:	f7e4 fd0b 	bl	8000638 <__aeabi_dmul>
 801bc22:	4602      	mov	r2, r0
 801bc24:	460b      	mov	r3, r1
 801bc26:	4630      	mov	r0, r6
 801bc28:	4639      	mov	r1, r7
 801bc2a:	f7e4 fd05 	bl	8000638 <__aeabi_dmul>
 801bc2e:	4642      	mov	r2, r8
 801bc30:	4604      	mov	r4, r0
 801bc32:	460d      	mov	r5, r1
 801bc34:	464b      	mov	r3, r9
 801bc36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc3a:	f7e4 fb47 	bl	80002cc <__adddf3>
 801bc3e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bc42:	f7e4 fcf9 	bl	8000638 <__aeabi_dmul>
 801bc46:	4622      	mov	r2, r4
 801bc48:	462b      	mov	r3, r5
 801bc4a:	f7e4 fb3f 	bl	80002cc <__adddf3>
 801bc4e:	4642      	mov	r2, r8
 801bc50:	4606      	mov	r6, r0
 801bc52:	460f      	mov	r7, r1
 801bc54:	464b      	mov	r3, r9
 801bc56:	4640      	mov	r0, r8
 801bc58:	4649      	mov	r1, r9
 801bc5a:	f7e4 fced 	bl	8000638 <__aeabi_dmul>
 801bc5e:	2200      	movs	r2, #0
 801bc60:	4b68      	ldr	r3, [pc, #416]	; (801be04 <__ieee754_pow+0x734>)
 801bc62:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bc66:	f7e4 fb31 	bl	80002cc <__adddf3>
 801bc6a:	4632      	mov	r2, r6
 801bc6c:	463b      	mov	r3, r7
 801bc6e:	f7e4 fb2d 	bl	80002cc <__adddf3>
 801bc72:	9802      	ldr	r0, [sp, #8]
 801bc74:	460d      	mov	r5, r1
 801bc76:	4604      	mov	r4, r0
 801bc78:	4602      	mov	r2, r0
 801bc7a:	460b      	mov	r3, r1
 801bc7c:	4640      	mov	r0, r8
 801bc7e:	4649      	mov	r1, r9
 801bc80:	f7e4 fcda 	bl	8000638 <__aeabi_dmul>
 801bc84:	2200      	movs	r2, #0
 801bc86:	4680      	mov	r8, r0
 801bc88:	4689      	mov	r9, r1
 801bc8a:	4b5e      	ldr	r3, [pc, #376]	; (801be04 <__ieee754_pow+0x734>)
 801bc8c:	4620      	mov	r0, r4
 801bc8e:	4629      	mov	r1, r5
 801bc90:	f7e4 fb1a 	bl	80002c8 <__aeabi_dsub>
 801bc94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bc98:	f7e4 fb16 	bl	80002c8 <__aeabi_dsub>
 801bc9c:	4602      	mov	r2, r0
 801bc9e:	460b      	mov	r3, r1
 801bca0:	4630      	mov	r0, r6
 801bca2:	4639      	mov	r1, r7
 801bca4:	f7e4 fb10 	bl	80002c8 <__aeabi_dsub>
 801bca8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bcac:	f7e4 fcc4 	bl	8000638 <__aeabi_dmul>
 801bcb0:	4622      	mov	r2, r4
 801bcb2:	4606      	mov	r6, r0
 801bcb4:	460f      	mov	r7, r1
 801bcb6:	462b      	mov	r3, r5
 801bcb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bcbc:	f7e4 fcbc 	bl	8000638 <__aeabi_dmul>
 801bcc0:	4602      	mov	r2, r0
 801bcc2:	460b      	mov	r3, r1
 801bcc4:	4630      	mov	r0, r6
 801bcc6:	4639      	mov	r1, r7
 801bcc8:	f7e4 fb00 	bl	80002cc <__adddf3>
 801bccc:	4606      	mov	r6, r0
 801bcce:	460f      	mov	r7, r1
 801bcd0:	4602      	mov	r2, r0
 801bcd2:	460b      	mov	r3, r1
 801bcd4:	4640      	mov	r0, r8
 801bcd6:	4649      	mov	r1, r9
 801bcd8:	f7e4 faf8 	bl	80002cc <__adddf3>
 801bcdc:	9802      	ldr	r0, [sp, #8]
 801bcde:	a33c      	add	r3, pc, #240	; (adr r3, 801bdd0 <__ieee754_pow+0x700>)
 801bce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bce4:	4604      	mov	r4, r0
 801bce6:	460d      	mov	r5, r1
 801bce8:	f7e4 fca6 	bl	8000638 <__aeabi_dmul>
 801bcec:	4642      	mov	r2, r8
 801bcee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bcf2:	464b      	mov	r3, r9
 801bcf4:	4620      	mov	r0, r4
 801bcf6:	4629      	mov	r1, r5
 801bcf8:	f7e4 fae6 	bl	80002c8 <__aeabi_dsub>
 801bcfc:	4602      	mov	r2, r0
 801bcfe:	460b      	mov	r3, r1
 801bd00:	4630      	mov	r0, r6
 801bd02:	4639      	mov	r1, r7
 801bd04:	f7e4 fae0 	bl	80002c8 <__aeabi_dsub>
 801bd08:	a333      	add	r3, pc, #204	; (adr r3, 801bdd8 <__ieee754_pow+0x708>)
 801bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd0e:	f7e4 fc93 	bl	8000638 <__aeabi_dmul>
 801bd12:	a333      	add	r3, pc, #204	; (adr r3, 801bde0 <__ieee754_pow+0x710>)
 801bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd18:	4606      	mov	r6, r0
 801bd1a:	460f      	mov	r7, r1
 801bd1c:	4620      	mov	r0, r4
 801bd1e:	4629      	mov	r1, r5
 801bd20:	f7e4 fc8a 	bl	8000638 <__aeabi_dmul>
 801bd24:	4602      	mov	r2, r0
 801bd26:	460b      	mov	r3, r1
 801bd28:	4630      	mov	r0, r6
 801bd2a:	4639      	mov	r1, r7
 801bd2c:	f7e4 face 	bl	80002cc <__adddf3>
 801bd30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bd32:	4b35      	ldr	r3, [pc, #212]	; (801be08 <__ieee754_pow+0x738>)
 801bd34:	4413      	add	r3, r2
 801bd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd3a:	f7e4 fac7 	bl	80002cc <__adddf3>
 801bd3e:	4604      	mov	r4, r0
 801bd40:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bd42:	460d      	mov	r5, r1
 801bd44:	f7e4 fc0e 	bl	8000564 <__aeabi_i2d>
 801bd48:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bd4a:	4b30      	ldr	r3, [pc, #192]	; (801be0c <__ieee754_pow+0x73c>)
 801bd4c:	4413      	add	r3, r2
 801bd4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bd52:	4606      	mov	r6, r0
 801bd54:	460f      	mov	r7, r1
 801bd56:	4622      	mov	r2, r4
 801bd58:	462b      	mov	r3, r5
 801bd5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bd5e:	f7e4 fab5 	bl	80002cc <__adddf3>
 801bd62:	4642      	mov	r2, r8
 801bd64:	464b      	mov	r3, r9
 801bd66:	f7e4 fab1 	bl	80002cc <__adddf3>
 801bd6a:	4632      	mov	r2, r6
 801bd6c:	463b      	mov	r3, r7
 801bd6e:	f7e4 faad 	bl	80002cc <__adddf3>
 801bd72:	9802      	ldr	r0, [sp, #8]
 801bd74:	4632      	mov	r2, r6
 801bd76:	463b      	mov	r3, r7
 801bd78:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd7c:	f7e4 faa4 	bl	80002c8 <__aeabi_dsub>
 801bd80:	4642      	mov	r2, r8
 801bd82:	464b      	mov	r3, r9
 801bd84:	f7e4 faa0 	bl	80002c8 <__aeabi_dsub>
 801bd88:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bd8c:	e607      	b.n	801b99e <__ieee754_pow+0x2ce>
 801bd8e:	f04f 0a01 	mov.w	sl, #1
 801bd92:	e6a5      	b.n	801bae0 <__ieee754_pow+0x410>
 801bd94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bde8 <__ieee754_pow+0x718>
 801bd98:	e613      	b.n	801b9c2 <__ieee754_pow+0x2f2>
 801bd9a:	bf00      	nop
 801bd9c:	f3af 8000 	nop.w
 801bda0:	4a454eef 	.word	0x4a454eef
 801bda4:	3fca7e28 	.word	0x3fca7e28
 801bda8:	93c9db65 	.word	0x93c9db65
 801bdac:	3fcd864a 	.word	0x3fcd864a
 801bdb0:	a91d4101 	.word	0xa91d4101
 801bdb4:	3fd17460 	.word	0x3fd17460
 801bdb8:	518f264d 	.word	0x518f264d
 801bdbc:	3fd55555 	.word	0x3fd55555
 801bdc0:	db6fabff 	.word	0xdb6fabff
 801bdc4:	3fdb6db6 	.word	0x3fdb6db6
 801bdc8:	33333303 	.word	0x33333303
 801bdcc:	3fe33333 	.word	0x3fe33333
 801bdd0:	e0000000 	.word	0xe0000000
 801bdd4:	3feec709 	.word	0x3feec709
 801bdd8:	dc3a03fd 	.word	0xdc3a03fd
 801bddc:	3feec709 	.word	0x3feec709
 801bde0:	145b01f5 	.word	0x145b01f5
 801bde4:	be3e2fe0 	.word	0xbe3e2fe0
 801bde8:	00000000 	.word	0x00000000
 801bdec:	3ff00000 	.word	0x3ff00000
 801bdf0:	43400000 	.word	0x43400000
 801bdf4:	0003988e 	.word	0x0003988e
 801bdf8:	000bb679 	.word	0x000bb679
 801bdfc:	0801d998 	.word	0x0801d998
 801be00:	3ff00000 	.word	0x3ff00000
 801be04:	40080000 	.word	0x40080000
 801be08:	0801d9b8 	.word	0x0801d9b8
 801be0c:	0801d9a8 	.word	0x0801d9a8
 801be10:	a3b4      	add	r3, pc, #720	; (adr r3, 801c0e4 <__ieee754_pow+0xa14>)
 801be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be16:	4640      	mov	r0, r8
 801be18:	4649      	mov	r1, r9
 801be1a:	f7e4 fa57 	bl	80002cc <__adddf3>
 801be1e:	4622      	mov	r2, r4
 801be20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801be24:	462b      	mov	r3, r5
 801be26:	4630      	mov	r0, r6
 801be28:	4639      	mov	r1, r7
 801be2a:	f7e4 fa4d 	bl	80002c8 <__aeabi_dsub>
 801be2e:	4602      	mov	r2, r0
 801be30:	460b      	mov	r3, r1
 801be32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be36:	f7e4 fe8f 	bl	8000b58 <__aeabi_dcmpgt>
 801be3a:	2800      	cmp	r0, #0
 801be3c:	f47f adfe 	bne.w	801ba3c <__ieee754_pow+0x36c>
 801be40:	4aa3      	ldr	r2, [pc, #652]	; (801c0d0 <__ieee754_pow+0xa00>)
 801be42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801be46:	4293      	cmp	r3, r2
 801be48:	f340 810a 	ble.w	801c060 <__ieee754_pow+0x990>
 801be4c:	151b      	asrs	r3, r3, #20
 801be4e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801be52:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801be56:	fa4a f303 	asr.w	r3, sl, r3
 801be5a:	445b      	add	r3, fp
 801be5c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801be60:	4e9c      	ldr	r6, [pc, #624]	; (801c0d4 <__ieee754_pow+0xa04>)
 801be62:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801be66:	4116      	asrs	r6, r2
 801be68:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801be6c:	2000      	movs	r0, #0
 801be6e:	ea23 0106 	bic.w	r1, r3, r6
 801be72:	f1c2 0214 	rsb	r2, r2, #20
 801be76:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801be7a:	fa4a fa02 	asr.w	sl, sl, r2
 801be7e:	f1bb 0f00 	cmp.w	fp, #0
 801be82:	4602      	mov	r2, r0
 801be84:	460b      	mov	r3, r1
 801be86:	4620      	mov	r0, r4
 801be88:	4629      	mov	r1, r5
 801be8a:	bfb8      	it	lt
 801be8c:	f1ca 0a00 	rsblt	sl, sl, #0
 801be90:	f7e4 fa1a 	bl	80002c8 <__aeabi_dsub>
 801be94:	e9cd 0100 	strd	r0, r1, [sp]
 801be98:	4642      	mov	r2, r8
 801be9a:	464b      	mov	r3, r9
 801be9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bea0:	f7e4 fa14 	bl	80002cc <__adddf3>
 801bea4:	2000      	movs	r0, #0
 801bea6:	a378      	add	r3, pc, #480	; (adr r3, 801c088 <__ieee754_pow+0x9b8>)
 801bea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beac:	4604      	mov	r4, r0
 801beae:	460d      	mov	r5, r1
 801beb0:	f7e4 fbc2 	bl	8000638 <__aeabi_dmul>
 801beb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801beb8:	4606      	mov	r6, r0
 801beba:	460f      	mov	r7, r1
 801bebc:	4620      	mov	r0, r4
 801bebe:	4629      	mov	r1, r5
 801bec0:	f7e4 fa02 	bl	80002c8 <__aeabi_dsub>
 801bec4:	4602      	mov	r2, r0
 801bec6:	460b      	mov	r3, r1
 801bec8:	4640      	mov	r0, r8
 801beca:	4649      	mov	r1, r9
 801becc:	f7e4 f9fc 	bl	80002c8 <__aeabi_dsub>
 801bed0:	a36f      	add	r3, pc, #444	; (adr r3, 801c090 <__ieee754_pow+0x9c0>)
 801bed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bed6:	f7e4 fbaf 	bl	8000638 <__aeabi_dmul>
 801beda:	a36f      	add	r3, pc, #444	; (adr r3, 801c098 <__ieee754_pow+0x9c8>)
 801bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bee0:	4680      	mov	r8, r0
 801bee2:	4689      	mov	r9, r1
 801bee4:	4620      	mov	r0, r4
 801bee6:	4629      	mov	r1, r5
 801bee8:	f7e4 fba6 	bl	8000638 <__aeabi_dmul>
 801beec:	4602      	mov	r2, r0
 801beee:	460b      	mov	r3, r1
 801bef0:	4640      	mov	r0, r8
 801bef2:	4649      	mov	r1, r9
 801bef4:	f7e4 f9ea 	bl	80002cc <__adddf3>
 801bef8:	4604      	mov	r4, r0
 801befa:	460d      	mov	r5, r1
 801befc:	4602      	mov	r2, r0
 801befe:	460b      	mov	r3, r1
 801bf00:	4630      	mov	r0, r6
 801bf02:	4639      	mov	r1, r7
 801bf04:	f7e4 f9e2 	bl	80002cc <__adddf3>
 801bf08:	4632      	mov	r2, r6
 801bf0a:	463b      	mov	r3, r7
 801bf0c:	4680      	mov	r8, r0
 801bf0e:	4689      	mov	r9, r1
 801bf10:	f7e4 f9da 	bl	80002c8 <__aeabi_dsub>
 801bf14:	4602      	mov	r2, r0
 801bf16:	460b      	mov	r3, r1
 801bf18:	4620      	mov	r0, r4
 801bf1a:	4629      	mov	r1, r5
 801bf1c:	f7e4 f9d4 	bl	80002c8 <__aeabi_dsub>
 801bf20:	4642      	mov	r2, r8
 801bf22:	4606      	mov	r6, r0
 801bf24:	460f      	mov	r7, r1
 801bf26:	464b      	mov	r3, r9
 801bf28:	4640      	mov	r0, r8
 801bf2a:	4649      	mov	r1, r9
 801bf2c:	f7e4 fb84 	bl	8000638 <__aeabi_dmul>
 801bf30:	a35b      	add	r3, pc, #364	; (adr r3, 801c0a0 <__ieee754_pow+0x9d0>)
 801bf32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf36:	4604      	mov	r4, r0
 801bf38:	460d      	mov	r5, r1
 801bf3a:	f7e4 fb7d 	bl	8000638 <__aeabi_dmul>
 801bf3e:	a35a      	add	r3, pc, #360	; (adr r3, 801c0a8 <__ieee754_pow+0x9d8>)
 801bf40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf44:	f7e4 f9c0 	bl	80002c8 <__aeabi_dsub>
 801bf48:	4622      	mov	r2, r4
 801bf4a:	462b      	mov	r3, r5
 801bf4c:	f7e4 fb74 	bl	8000638 <__aeabi_dmul>
 801bf50:	a357      	add	r3, pc, #348	; (adr r3, 801c0b0 <__ieee754_pow+0x9e0>)
 801bf52:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf56:	f7e4 f9b9 	bl	80002cc <__adddf3>
 801bf5a:	4622      	mov	r2, r4
 801bf5c:	462b      	mov	r3, r5
 801bf5e:	f7e4 fb6b 	bl	8000638 <__aeabi_dmul>
 801bf62:	a355      	add	r3, pc, #340	; (adr r3, 801c0b8 <__ieee754_pow+0x9e8>)
 801bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf68:	f7e4 f9ae 	bl	80002c8 <__aeabi_dsub>
 801bf6c:	4622      	mov	r2, r4
 801bf6e:	462b      	mov	r3, r5
 801bf70:	f7e4 fb62 	bl	8000638 <__aeabi_dmul>
 801bf74:	a352      	add	r3, pc, #328	; (adr r3, 801c0c0 <__ieee754_pow+0x9f0>)
 801bf76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf7a:	f7e4 f9a7 	bl	80002cc <__adddf3>
 801bf7e:	4622      	mov	r2, r4
 801bf80:	462b      	mov	r3, r5
 801bf82:	f7e4 fb59 	bl	8000638 <__aeabi_dmul>
 801bf86:	4602      	mov	r2, r0
 801bf88:	460b      	mov	r3, r1
 801bf8a:	4640      	mov	r0, r8
 801bf8c:	4649      	mov	r1, r9
 801bf8e:	f7e4 f99b 	bl	80002c8 <__aeabi_dsub>
 801bf92:	4604      	mov	r4, r0
 801bf94:	460d      	mov	r5, r1
 801bf96:	4602      	mov	r2, r0
 801bf98:	460b      	mov	r3, r1
 801bf9a:	4640      	mov	r0, r8
 801bf9c:	4649      	mov	r1, r9
 801bf9e:	f7e4 fb4b 	bl	8000638 <__aeabi_dmul>
 801bfa2:	2200      	movs	r2, #0
 801bfa4:	e9cd 0100 	strd	r0, r1, [sp]
 801bfa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801bfac:	4620      	mov	r0, r4
 801bfae:	4629      	mov	r1, r5
 801bfb0:	f7e4 f98a 	bl	80002c8 <__aeabi_dsub>
 801bfb4:	4602      	mov	r2, r0
 801bfb6:	460b      	mov	r3, r1
 801bfb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bfbc:	f7e4 fc66 	bl	800088c <__aeabi_ddiv>
 801bfc0:	4632      	mov	r2, r6
 801bfc2:	4604      	mov	r4, r0
 801bfc4:	460d      	mov	r5, r1
 801bfc6:	463b      	mov	r3, r7
 801bfc8:	4640      	mov	r0, r8
 801bfca:	4649      	mov	r1, r9
 801bfcc:	f7e4 fb34 	bl	8000638 <__aeabi_dmul>
 801bfd0:	4632      	mov	r2, r6
 801bfd2:	463b      	mov	r3, r7
 801bfd4:	f7e4 f97a 	bl	80002cc <__adddf3>
 801bfd8:	4602      	mov	r2, r0
 801bfda:	460b      	mov	r3, r1
 801bfdc:	4620      	mov	r0, r4
 801bfde:	4629      	mov	r1, r5
 801bfe0:	f7e4 f972 	bl	80002c8 <__aeabi_dsub>
 801bfe4:	4642      	mov	r2, r8
 801bfe6:	464b      	mov	r3, r9
 801bfe8:	f7e4 f96e 	bl	80002c8 <__aeabi_dsub>
 801bfec:	4602      	mov	r2, r0
 801bfee:	460b      	mov	r3, r1
 801bff0:	2000      	movs	r0, #0
 801bff2:	4939      	ldr	r1, [pc, #228]	; (801c0d8 <__ieee754_pow+0xa08>)
 801bff4:	f7e4 f968 	bl	80002c8 <__aeabi_dsub>
 801bff8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801bffc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801c000:	4602      	mov	r2, r0
 801c002:	460b      	mov	r3, r1
 801c004:	da2f      	bge.n	801c066 <__ieee754_pow+0x996>
 801c006:	4650      	mov	r0, sl
 801c008:	ec43 2b10 	vmov	d0, r2, r3
 801c00c:	f000 fc80 	bl	801c910 <scalbn>
 801c010:	ec51 0b10 	vmov	r0, r1, d0
 801c014:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801c018:	f7ff bbf1 	b.w	801b7fe <__ieee754_pow+0x12e>
 801c01c:	4b2f      	ldr	r3, [pc, #188]	; (801c0dc <__ieee754_pow+0xa0c>)
 801c01e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801c022:	429e      	cmp	r6, r3
 801c024:	f77f af0c 	ble.w	801be40 <__ieee754_pow+0x770>
 801c028:	4b2d      	ldr	r3, [pc, #180]	; (801c0e0 <__ieee754_pow+0xa10>)
 801c02a:	440b      	add	r3, r1
 801c02c:	4303      	orrs	r3, r0
 801c02e:	d00b      	beq.n	801c048 <__ieee754_pow+0x978>
 801c030:	a325      	add	r3, pc, #148	; (adr r3, 801c0c8 <__ieee754_pow+0x9f8>)
 801c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c036:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801c03a:	f7e4 fafd 	bl	8000638 <__aeabi_dmul>
 801c03e:	a322      	add	r3, pc, #136	; (adr r3, 801c0c8 <__ieee754_pow+0x9f8>)
 801c040:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c044:	f7ff bbdb 	b.w	801b7fe <__ieee754_pow+0x12e>
 801c048:	4622      	mov	r2, r4
 801c04a:	462b      	mov	r3, r5
 801c04c:	f7e4 f93c 	bl	80002c8 <__aeabi_dsub>
 801c050:	4642      	mov	r2, r8
 801c052:	464b      	mov	r3, r9
 801c054:	f7e4 fd76 	bl	8000b44 <__aeabi_dcmpge>
 801c058:	2800      	cmp	r0, #0
 801c05a:	f43f aef1 	beq.w	801be40 <__ieee754_pow+0x770>
 801c05e:	e7e7      	b.n	801c030 <__ieee754_pow+0x960>
 801c060:	f04f 0a00 	mov.w	sl, #0
 801c064:	e718      	b.n	801be98 <__ieee754_pow+0x7c8>
 801c066:	4621      	mov	r1, r4
 801c068:	e7d4      	b.n	801c014 <__ieee754_pow+0x944>
 801c06a:	2000      	movs	r0, #0
 801c06c:	491a      	ldr	r1, [pc, #104]	; (801c0d8 <__ieee754_pow+0xa08>)
 801c06e:	f7ff bb8f 	b.w	801b790 <__ieee754_pow+0xc0>
 801c072:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c076:	f7ff bb8b 	b.w	801b790 <__ieee754_pow+0xc0>
 801c07a:	4630      	mov	r0, r6
 801c07c:	4639      	mov	r1, r7
 801c07e:	f7ff bb87 	b.w	801b790 <__ieee754_pow+0xc0>
 801c082:	4693      	mov	fp, r2
 801c084:	f7ff bb98 	b.w	801b7b8 <__ieee754_pow+0xe8>
 801c088:	00000000 	.word	0x00000000
 801c08c:	3fe62e43 	.word	0x3fe62e43
 801c090:	fefa39ef 	.word	0xfefa39ef
 801c094:	3fe62e42 	.word	0x3fe62e42
 801c098:	0ca86c39 	.word	0x0ca86c39
 801c09c:	be205c61 	.word	0xbe205c61
 801c0a0:	72bea4d0 	.word	0x72bea4d0
 801c0a4:	3e663769 	.word	0x3e663769
 801c0a8:	c5d26bf1 	.word	0xc5d26bf1
 801c0ac:	3ebbbd41 	.word	0x3ebbbd41
 801c0b0:	af25de2c 	.word	0xaf25de2c
 801c0b4:	3f11566a 	.word	0x3f11566a
 801c0b8:	16bebd93 	.word	0x16bebd93
 801c0bc:	3f66c16c 	.word	0x3f66c16c
 801c0c0:	5555553e 	.word	0x5555553e
 801c0c4:	3fc55555 	.word	0x3fc55555
 801c0c8:	c2f8f359 	.word	0xc2f8f359
 801c0cc:	01a56e1f 	.word	0x01a56e1f
 801c0d0:	3fe00000 	.word	0x3fe00000
 801c0d4:	000fffff 	.word	0x000fffff
 801c0d8:	3ff00000 	.word	0x3ff00000
 801c0dc:	4090cbff 	.word	0x4090cbff
 801c0e0:	3f6f3400 	.word	0x3f6f3400
 801c0e4:	652b82fe 	.word	0x652b82fe
 801c0e8:	3c971547 	.word	0x3c971547

0801c0ec <__ieee754_sqrt>:
 801c0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c0f0:	4955      	ldr	r1, [pc, #340]	; (801c248 <__ieee754_sqrt+0x15c>)
 801c0f2:	ec55 4b10 	vmov	r4, r5, d0
 801c0f6:	43a9      	bics	r1, r5
 801c0f8:	462b      	mov	r3, r5
 801c0fa:	462a      	mov	r2, r5
 801c0fc:	d112      	bne.n	801c124 <__ieee754_sqrt+0x38>
 801c0fe:	ee10 2a10 	vmov	r2, s0
 801c102:	ee10 0a10 	vmov	r0, s0
 801c106:	4629      	mov	r1, r5
 801c108:	f7e4 fa96 	bl	8000638 <__aeabi_dmul>
 801c10c:	4602      	mov	r2, r0
 801c10e:	460b      	mov	r3, r1
 801c110:	4620      	mov	r0, r4
 801c112:	4629      	mov	r1, r5
 801c114:	f7e4 f8da 	bl	80002cc <__adddf3>
 801c118:	4604      	mov	r4, r0
 801c11a:	460d      	mov	r5, r1
 801c11c:	ec45 4b10 	vmov	d0, r4, r5
 801c120:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c124:	2d00      	cmp	r5, #0
 801c126:	ee10 0a10 	vmov	r0, s0
 801c12a:	4621      	mov	r1, r4
 801c12c:	dc0f      	bgt.n	801c14e <__ieee754_sqrt+0x62>
 801c12e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c132:	4330      	orrs	r0, r6
 801c134:	d0f2      	beq.n	801c11c <__ieee754_sqrt+0x30>
 801c136:	b155      	cbz	r5, 801c14e <__ieee754_sqrt+0x62>
 801c138:	ee10 2a10 	vmov	r2, s0
 801c13c:	4620      	mov	r0, r4
 801c13e:	4629      	mov	r1, r5
 801c140:	f7e4 f8c2 	bl	80002c8 <__aeabi_dsub>
 801c144:	4602      	mov	r2, r0
 801c146:	460b      	mov	r3, r1
 801c148:	f7e4 fba0 	bl	800088c <__aeabi_ddiv>
 801c14c:	e7e4      	b.n	801c118 <__ieee754_sqrt+0x2c>
 801c14e:	151b      	asrs	r3, r3, #20
 801c150:	d073      	beq.n	801c23a <__ieee754_sqrt+0x14e>
 801c152:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c156:	07dd      	lsls	r5, r3, #31
 801c158:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c15c:	bf48      	it	mi
 801c15e:	0fc8      	lsrmi	r0, r1, #31
 801c160:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c164:	bf44      	itt	mi
 801c166:	0049      	lslmi	r1, r1, #1
 801c168:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c16c:	2500      	movs	r5, #0
 801c16e:	1058      	asrs	r0, r3, #1
 801c170:	0fcb      	lsrs	r3, r1, #31
 801c172:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c176:	0049      	lsls	r1, r1, #1
 801c178:	2316      	movs	r3, #22
 801c17a:	462c      	mov	r4, r5
 801c17c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c180:	19a7      	adds	r7, r4, r6
 801c182:	4297      	cmp	r7, r2
 801c184:	bfde      	ittt	le
 801c186:	19bc      	addle	r4, r7, r6
 801c188:	1bd2      	suble	r2, r2, r7
 801c18a:	19ad      	addle	r5, r5, r6
 801c18c:	0fcf      	lsrs	r7, r1, #31
 801c18e:	3b01      	subs	r3, #1
 801c190:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c194:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c198:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c19c:	d1f0      	bne.n	801c180 <__ieee754_sqrt+0x94>
 801c19e:	f04f 0c20 	mov.w	ip, #32
 801c1a2:	469e      	mov	lr, r3
 801c1a4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c1a8:	42a2      	cmp	r2, r4
 801c1aa:	eb06 070e 	add.w	r7, r6, lr
 801c1ae:	dc02      	bgt.n	801c1b6 <__ieee754_sqrt+0xca>
 801c1b0:	d112      	bne.n	801c1d8 <__ieee754_sqrt+0xec>
 801c1b2:	428f      	cmp	r7, r1
 801c1b4:	d810      	bhi.n	801c1d8 <__ieee754_sqrt+0xec>
 801c1b6:	2f00      	cmp	r7, #0
 801c1b8:	eb07 0e06 	add.w	lr, r7, r6
 801c1bc:	da42      	bge.n	801c244 <__ieee754_sqrt+0x158>
 801c1be:	f1be 0f00 	cmp.w	lr, #0
 801c1c2:	db3f      	blt.n	801c244 <__ieee754_sqrt+0x158>
 801c1c4:	f104 0801 	add.w	r8, r4, #1
 801c1c8:	1b12      	subs	r2, r2, r4
 801c1ca:	428f      	cmp	r7, r1
 801c1cc:	bf88      	it	hi
 801c1ce:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c1d2:	1bc9      	subs	r1, r1, r7
 801c1d4:	4433      	add	r3, r6
 801c1d6:	4644      	mov	r4, r8
 801c1d8:	0052      	lsls	r2, r2, #1
 801c1da:	f1bc 0c01 	subs.w	ip, ip, #1
 801c1de:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c1e2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c1e6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c1ea:	d1dd      	bne.n	801c1a8 <__ieee754_sqrt+0xbc>
 801c1ec:	430a      	orrs	r2, r1
 801c1ee:	d006      	beq.n	801c1fe <__ieee754_sqrt+0x112>
 801c1f0:	1c5c      	adds	r4, r3, #1
 801c1f2:	bf13      	iteet	ne
 801c1f4:	3301      	addne	r3, #1
 801c1f6:	3501      	addeq	r5, #1
 801c1f8:	4663      	moveq	r3, ip
 801c1fa:	f023 0301 	bicne.w	r3, r3, #1
 801c1fe:	106a      	asrs	r2, r5, #1
 801c200:	085b      	lsrs	r3, r3, #1
 801c202:	07e9      	lsls	r1, r5, #31
 801c204:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c208:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c20c:	bf48      	it	mi
 801c20e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c212:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c216:	461c      	mov	r4, r3
 801c218:	e780      	b.n	801c11c <__ieee754_sqrt+0x30>
 801c21a:	0aca      	lsrs	r2, r1, #11
 801c21c:	3815      	subs	r0, #21
 801c21e:	0549      	lsls	r1, r1, #21
 801c220:	2a00      	cmp	r2, #0
 801c222:	d0fa      	beq.n	801c21a <__ieee754_sqrt+0x12e>
 801c224:	02d6      	lsls	r6, r2, #11
 801c226:	d50a      	bpl.n	801c23e <__ieee754_sqrt+0x152>
 801c228:	f1c3 0420 	rsb	r4, r3, #32
 801c22c:	fa21 f404 	lsr.w	r4, r1, r4
 801c230:	1e5d      	subs	r5, r3, #1
 801c232:	4099      	lsls	r1, r3
 801c234:	4322      	orrs	r2, r4
 801c236:	1b43      	subs	r3, r0, r5
 801c238:	e78b      	b.n	801c152 <__ieee754_sqrt+0x66>
 801c23a:	4618      	mov	r0, r3
 801c23c:	e7f0      	b.n	801c220 <__ieee754_sqrt+0x134>
 801c23e:	0052      	lsls	r2, r2, #1
 801c240:	3301      	adds	r3, #1
 801c242:	e7ef      	b.n	801c224 <__ieee754_sqrt+0x138>
 801c244:	46a0      	mov	r8, r4
 801c246:	e7bf      	b.n	801c1c8 <__ieee754_sqrt+0xdc>
 801c248:	7ff00000 	.word	0x7ff00000

0801c24c <__ieee754_powf>:
 801c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c250:	ee10 5a90 	vmov	r5, s1
 801c254:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801c258:	ed2d 8b02 	vpush	{d8}
 801c25c:	eeb0 8a40 	vmov.f32	s16, s0
 801c260:	eef0 8a60 	vmov.f32	s17, s1
 801c264:	f000 8293 	beq.w	801c78e <__ieee754_powf+0x542>
 801c268:	ee10 8a10 	vmov	r8, s0
 801c26c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801c270:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801c274:	dc06      	bgt.n	801c284 <__ieee754_powf+0x38>
 801c276:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c27a:	dd0a      	ble.n	801c292 <__ieee754_powf+0x46>
 801c27c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c280:	f000 8285 	beq.w	801c78e <__ieee754_powf+0x542>
 801c284:	ecbd 8b02 	vpop	{d8}
 801c288:	48d9      	ldr	r0, [pc, #868]	; (801c5f0 <__ieee754_powf+0x3a4>)
 801c28a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c28e:	f000 bbc7 	b.w	801ca20 <nanf>
 801c292:	f1b8 0f00 	cmp.w	r8, #0
 801c296:	da1d      	bge.n	801c2d4 <__ieee754_powf+0x88>
 801c298:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801c29c:	da2c      	bge.n	801c2f8 <__ieee754_powf+0xac>
 801c29e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c2a2:	db30      	blt.n	801c306 <__ieee754_powf+0xba>
 801c2a4:	15fb      	asrs	r3, r7, #23
 801c2a6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801c2aa:	fa47 f603 	asr.w	r6, r7, r3
 801c2ae:	fa06 f303 	lsl.w	r3, r6, r3
 801c2b2:	42bb      	cmp	r3, r7
 801c2b4:	d127      	bne.n	801c306 <__ieee754_powf+0xba>
 801c2b6:	f006 0601 	and.w	r6, r6, #1
 801c2ba:	f1c6 0602 	rsb	r6, r6, #2
 801c2be:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c2c2:	d122      	bne.n	801c30a <__ieee754_powf+0xbe>
 801c2c4:	2d00      	cmp	r5, #0
 801c2c6:	f280 8268 	bge.w	801c79a <__ieee754_powf+0x54e>
 801c2ca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c2ce:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801c2d2:	e00d      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c2d4:	2600      	movs	r6, #0
 801c2d6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c2da:	d1f0      	bne.n	801c2be <__ieee754_powf+0x72>
 801c2dc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c2e0:	f000 8255 	beq.w	801c78e <__ieee754_powf+0x542>
 801c2e4:	dd0a      	ble.n	801c2fc <__ieee754_powf+0xb0>
 801c2e6:	2d00      	cmp	r5, #0
 801c2e8:	f280 8254 	bge.w	801c794 <__ieee754_powf+0x548>
 801c2ec:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801c5f4 <__ieee754_powf+0x3a8>
 801c2f0:	ecbd 8b02 	vpop	{d8}
 801c2f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c2f8:	2602      	movs	r6, #2
 801c2fa:	e7ec      	b.n	801c2d6 <__ieee754_powf+0x8a>
 801c2fc:	2d00      	cmp	r5, #0
 801c2fe:	daf5      	bge.n	801c2ec <__ieee754_powf+0xa0>
 801c300:	eeb1 0a68 	vneg.f32	s0, s17
 801c304:	e7f4      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c306:	2600      	movs	r6, #0
 801c308:	e7d9      	b.n	801c2be <__ieee754_powf+0x72>
 801c30a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801c30e:	d102      	bne.n	801c316 <__ieee754_powf+0xca>
 801c310:	ee28 0a08 	vmul.f32	s0, s16, s16
 801c314:	e7ec      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c316:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801c31a:	eeb0 0a48 	vmov.f32	s0, s16
 801c31e:	d108      	bne.n	801c332 <__ieee754_powf+0xe6>
 801c320:	f1b8 0f00 	cmp.w	r8, #0
 801c324:	db05      	blt.n	801c332 <__ieee754_powf+0xe6>
 801c326:	ecbd 8b02 	vpop	{d8}
 801c32a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c32e:	f000 ba4d 	b.w	801c7cc <__ieee754_sqrtf>
 801c332:	f000 fb63 	bl	801c9fc <fabsf>
 801c336:	b124      	cbz	r4, 801c342 <__ieee754_powf+0xf6>
 801c338:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801c33c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801c340:	d117      	bne.n	801c372 <__ieee754_powf+0x126>
 801c342:	2d00      	cmp	r5, #0
 801c344:	bfbc      	itt	lt
 801c346:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801c34a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801c34e:	f1b8 0f00 	cmp.w	r8, #0
 801c352:	dacd      	bge.n	801c2f0 <__ieee754_powf+0xa4>
 801c354:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801c358:	ea54 0306 	orrs.w	r3, r4, r6
 801c35c:	d104      	bne.n	801c368 <__ieee754_powf+0x11c>
 801c35e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c362:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c366:	e7c3      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c368:	2e01      	cmp	r6, #1
 801c36a:	d1c1      	bne.n	801c2f0 <__ieee754_powf+0xa4>
 801c36c:	eeb1 0a40 	vneg.f32	s0, s0
 801c370:	e7be      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c372:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801c376:	3801      	subs	r0, #1
 801c378:	ea56 0300 	orrs.w	r3, r6, r0
 801c37c:	d104      	bne.n	801c388 <__ieee754_powf+0x13c>
 801c37e:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c382:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c386:	e7b3      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c388:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801c38c:	dd6d      	ble.n	801c46a <__ieee754_powf+0x21e>
 801c38e:	4b9a      	ldr	r3, [pc, #616]	; (801c5f8 <__ieee754_powf+0x3ac>)
 801c390:	429c      	cmp	r4, r3
 801c392:	dc06      	bgt.n	801c3a2 <__ieee754_powf+0x156>
 801c394:	2d00      	cmp	r5, #0
 801c396:	daa9      	bge.n	801c2ec <__ieee754_powf+0xa0>
 801c398:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801c5fc <__ieee754_powf+0x3b0>
 801c39c:	ee20 0a00 	vmul.f32	s0, s0, s0
 801c3a0:	e7a6      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c3a2:	4b97      	ldr	r3, [pc, #604]	; (801c600 <__ieee754_powf+0x3b4>)
 801c3a4:	429c      	cmp	r4, r3
 801c3a6:	dd02      	ble.n	801c3ae <__ieee754_powf+0x162>
 801c3a8:	2d00      	cmp	r5, #0
 801c3aa:	dcf5      	bgt.n	801c398 <__ieee754_powf+0x14c>
 801c3ac:	e79e      	b.n	801c2ec <__ieee754_powf+0xa0>
 801c3ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c3b2:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c3b6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801c604 <__ieee754_powf+0x3b8>
 801c3ba:	eef1 6a40 	vneg.f32	s13, s0
 801c3be:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801c3c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c3c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c3ca:	eee7 7a40 	vfms.f32	s15, s14, s0
 801c3ce:	ee60 0a00 	vmul.f32	s1, s0, s0
 801c3d2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 801c608 <__ieee754_powf+0x3bc>
 801c3d6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c3da:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801c60c <__ieee754_powf+0x3c0>
 801c3de:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801c3e2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c3e6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801c610 <__ieee754_powf+0x3c4>
 801c3ea:	eeb0 6a67 	vmov.f32	s12, s15
 801c3ee:	eea0 6a07 	vfma.f32	s12, s0, s14
 801c3f2:	ee16 3a10 	vmov	r3, s12
 801c3f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c3fa:	f023 030f 	bic.w	r3, r3, #15
 801c3fe:	ee00 3a90 	vmov	s1, r3
 801c402:	eee6 0a87 	vfma.f32	s1, s13, s14
 801c406:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c40a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801c40e:	f025 050f 	bic.w	r5, r5, #15
 801c412:	ee07 5a10 	vmov	s14, r5
 801c416:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801c41a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801c41e:	ee07 3a90 	vmov	s15, r3
 801c422:	eee7 0a27 	vfma.f32	s1, s14, s15
 801c426:	3e01      	subs	r6, #1
 801c428:	ea56 0200 	orrs.w	r2, r6, r0
 801c42c:	ee07 5a10 	vmov	s14, r5
 801c430:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c434:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801c438:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801c43c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c440:	ee17 4a10 	vmov	r4, s14
 801c444:	bf08      	it	eq
 801c446:	eeb0 8a40 	vmoveq.f32	s16, s0
 801c44a:	2c00      	cmp	r4, #0
 801c44c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c450:	f340 8184 	ble.w	801c75c <__ieee754_powf+0x510>
 801c454:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801c458:	f340 80fc 	ble.w	801c654 <__ieee754_powf+0x408>
 801c45c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801c5fc <__ieee754_powf+0x3b0>
 801c460:	ee28 0a27 	vmul.f32	s0, s16, s15
 801c464:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c468:	e742      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c46a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801c46e:	bfbf      	itttt	lt
 801c470:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801c614 <__ieee754_powf+0x3c8>
 801c474:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c478:	f06f 0217 	mvnlt.w	r2, #23
 801c47c:	ee17 4a90 	vmovlt	r4, s15
 801c480:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801c484:	bfa8      	it	ge
 801c486:	2200      	movge	r2, #0
 801c488:	3b7f      	subs	r3, #127	; 0x7f
 801c48a:	4413      	add	r3, r2
 801c48c:	4a62      	ldr	r2, [pc, #392]	; (801c618 <__ieee754_powf+0x3cc>)
 801c48e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801c492:	4294      	cmp	r4, r2
 801c494:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801c498:	dd06      	ble.n	801c4a8 <__ieee754_powf+0x25c>
 801c49a:	4a60      	ldr	r2, [pc, #384]	; (801c61c <__ieee754_powf+0x3d0>)
 801c49c:	4294      	cmp	r4, r2
 801c49e:	f340 80a5 	ble.w	801c5ec <__ieee754_powf+0x3a0>
 801c4a2:	3301      	adds	r3, #1
 801c4a4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801c4a8:	2400      	movs	r4, #0
 801c4aa:	4a5d      	ldr	r2, [pc, #372]	; (801c620 <__ieee754_powf+0x3d4>)
 801c4ac:	00a7      	lsls	r7, r4, #2
 801c4ae:	443a      	add	r2, r7
 801c4b0:	ee07 1a90 	vmov	s15, r1
 801c4b4:	ed92 7a00 	vldr	s14, [r2]
 801c4b8:	4a5a      	ldr	r2, [pc, #360]	; (801c624 <__ieee754_powf+0x3d8>)
 801c4ba:	ee37 6a27 	vadd.f32	s12, s14, s15
 801c4be:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801c4c2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801c4c6:	1049      	asrs	r1, r1, #1
 801c4c8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801c4cc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801c4d0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801c4d4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801c4d8:	ee06 1a10 	vmov	s12, r1
 801c4dc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 801c4e0:	ee14 ca90 	vmov	ip, s9
 801c4e4:	ea02 0c0c 	and.w	ip, r2, ip
 801c4e8:	ee05 ca10 	vmov	s10, ip
 801c4ec:	eeb1 4a45 	vneg.f32	s8, s10
 801c4f0:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c4f4:	ee36 6a47 	vsub.f32	s12, s12, s14
 801c4f8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801c628 <__ieee754_powf+0x3dc>
 801c4fc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801c500:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801c504:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c508:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801c50c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 801c510:	eddf 5a46 	vldr	s11, [pc, #280]	; 801c62c <__ieee754_powf+0x3e0>
 801c514:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801c518:	eddf 5a45 	vldr	s11, [pc, #276]	; 801c630 <__ieee754_powf+0x3e4>
 801c51c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c520:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801c604 <__ieee754_powf+0x3b8>
 801c524:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c528:	eddf 5a42 	vldr	s11, [pc, #264]	; 801c634 <__ieee754_powf+0x3e8>
 801c52c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c530:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801c638 <__ieee754_powf+0x3ec>
 801c534:	ee75 6a24 	vadd.f32	s13, s10, s9
 801c538:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c53c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c540:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801c544:	eef0 7a65 	vmov.f32	s15, s11
 801c548:	eee3 6a87 	vfma.f32	s13, s7, s14
 801c54c:	eee5 7a05 	vfma.f32	s15, s10, s10
 801c550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c554:	ee17 1a90 	vmov	r1, s15
 801c558:	4011      	ands	r1, r2
 801c55a:	ee07 1a90 	vmov	s15, r1
 801c55e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801c562:	eddf 5a36 	vldr	s11, [pc, #216]	; 801c63c <__ieee754_powf+0x3f0>
 801c566:	eea4 7a05 	vfma.f32	s14, s8, s10
 801c56a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801c56e:	ee27 7a24 	vmul.f32	s14, s14, s9
 801c572:	eea7 7a86 	vfma.f32	s14, s15, s12
 801c576:	eeb0 6a47 	vmov.f32	s12, s14
 801c57a:	eea5 6a27 	vfma.f32	s12, s10, s15
 801c57e:	ee16 1a10 	vmov	r1, s12
 801c582:	4011      	ands	r1, r2
 801c584:	ee06 1a90 	vmov	s13, r1
 801c588:	eee4 6a27 	vfma.f32	s13, s8, s15
 801c58c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801c640 <__ieee754_powf+0x3f4>
 801c590:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c594:	ee06 1a10 	vmov	s12, r1
 801c598:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c59c:	eddf 7a29 	vldr	s15, [pc, #164]	; 801c644 <__ieee754_powf+0x3f8>
 801c5a0:	4929      	ldr	r1, [pc, #164]	; (801c648 <__ieee754_powf+0x3fc>)
 801c5a2:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c5a6:	4439      	add	r1, r7
 801c5a8:	edd1 7a00 	vldr	s15, [r1]
 801c5ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c5b0:	ee07 3a90 	vmov	s15, r3
 801c5b4:	eef0 0a47 	vmov.f32	s1, s14
 801c5b8:	4b24      	ldr	r3, [pc, #144]	; (801c64c <__ieee754_powf+0x400>)
 801c5ba:	eee6 0a25 	vfma.f32	s1, s12, s11
 801c5be:	443b      	add	r3, r7
 801c5c0:	ed93 5a00 	vldr	s10, [r3]
 801c5c4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c5c8:	ee70 0a85 	vadd.f32	s1, s1, s10
 801c5cc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 801c5d0:	ee17 3a90 	vmov	r3, s15
 801c5d4:	4013      	ands	r3, r2
 801c5d6:	ee07 3a90 	vmov	s15, r3
 801c5da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c5de:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801c5e2:	eee6 7a65 	vfms.f32	s15, s12, s11
 801c5e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c5ea:	e70e      	b.n	801c40a <__ieee754_powf+0x1be>
 801c5ec:	2401      	movs	r4, #1
 801c5ee:	e75c      	b.n	801c4aa <__ieee754_powf+0x25e>
 801c5f0:	0801d8f1 	.word	0x0801d8f1
 801c5f4:	00000000 	.word	0x00000000
 801c5f8:	3f7ffff7 	.word	0x3f7ffff7
 801c5fc:	7149f2ca 	.word	0x7149f2ca
 801c600:	3f800007 	.word	0x3f800007
 801c604:	3eaaaaab 	.word	0x3eaaaaab
 801c608:	36eca570 	.word	0x36eca570
 801c60c:	3fb8aa3b 	.word	0x3fb8aa3b
 801c610:	3fb8aa00 	.word	0x3fb8aa00
 801c614:	4b800000 	.word	0x4b800000
 801c618:	001cc471 	.word	0x001cc471
 801c61c:	005db3d6 	.word	0x005db3d6
 801c620:	0801d9c8 	.word	0x0801d9c8
 801c624:	fffff000 	.word	0xfffff000
 801c628:	3e6c3255 	.word	0x3e6c3255
 801c62c:	3e53f142 	.word	0x3e53f142
 801c630:	3e8ba305 	.word	0x3e8ba305
 801c634:	3edb6db7 	.word	0x3edb6db7
 801c638:	3f19999a 	.word	0x3f19999a
 801c63c:	3f763800 	.word	0x3f763800
 801c640:	3f76384f 	.word	0x3f76384f
 801c644:	369dc3a0 	.word	0x369dc3a0
 801c648:	0801d9d8 	.word	0x0801d9d8
 801c64c:	0801d9d0 	.word	0x0801d9d0
 801c650:	3338aa3c 	.word	0x3338aa3c
 801c654:	f040 8092 	bne.w	801c77c <__ieee754_powf+0x530>
 801c658:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801c650 <__ieee754_powf+0x404>
 801c65c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c660:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c664:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c66c:	f73f aef6 	bgt.w	801c45c <__ieee754_powf+0x210>
 801c670:	15db      	asrs	r3, r3, #23
 801c672:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801c676:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801c67a:	4103      	asrs	r3, r0
 801c67c:	4423      	add	r3, r4
 801c67e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c682:	4947      	ldr	r1, [pc, #284]	; (801c7a0 <__ieee754_powf+0x554>)
 801c684:	3a7f      	subs	r2, #127	; 0x7f
 801c686:	4111      	asrs	r1, r2
 801c688:	ea23 0101 	bic.w	r1, r3, r1
 801c68c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801c690:	ee07 1a10 	vmov	s14, r1
 801c694:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801c698:	f1c2 0217 	rsb	r2, r2, #23
 801c69c:	4110      	asrs	r0, r2
 801c69e:	2c00      	cmp	r4, #0
 801c6a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c6a4:	bfb8      	it	lt
 801c6a6:	4240      	neglt	r0, r0
 801c6a8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801c6ac:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801c7a4 <__ieee754_powf+0x558>
 801c6b0:	ee17 3a10 	vmov	r3, s14
 801c6b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c6b8:	f023 030f 	bic.w	r3, r3, #15
 801c6bc:	ee07 3a10 	vmov	s14, r3
 801c6c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c6c4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c6c8:	eddf 7a37 	vldr	s15, [pc, #220]	; 801c7a8 <__ieee754_powf+0x55c>
 801c6cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c6d0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801c6d4:	eddf 6a35 	vldr	s13, [pc, #212]	; 801c7ac <__ieee754_powf+0x560>
 801c6d8:	eeb0 0a67 	vmov.f32	s0, s15
 801c6dc:	eea7 0a26 	vfma.f32	s0, s14, s13
 801c6e0:	eeb0 6a40 	vmov.f32	s12, s0
 801c6e4:	eea7 6a66 	vfms.f32	s12, s14, s13
 801c6e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c6ec:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c6f0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801c7b0 <__ieee754_powf+0x564>
 801c6f4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801c7b4 <__ieee754_powf+0x568>
 801c6f8:	eea7 6a26 	vfma.f32	s12, s14, s13
 801c6fc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801c7b8 <__ieee754_powf+0x56c>
 801c700:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c704:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801c7bc <__ieee754_powf+0x570>
 801c708:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c70c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801c7c0 <__ieee754_powf+0x574>
 801c710:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c714:	eeb0 6a40 	vmov.f32	s12, s0
 801c718:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c71c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c720:	eeb0 7a46 	vmov.f32	s14, s12
 801c724:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c728:	ee20 6a06 	vmul.f32	s12, s0, s12
 801c72c:	eee0 7a27 	vfma.f32	s15, s0, s15
 801c730:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801c734:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c738:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c73c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c740:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c744:	ee10 3a10 	vmov	r3, s0
 801c748:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801c74c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c750:	da1a      	bge.n	801c788 <__ieee754_powf+0x53c>
 801c752:	f000 f9c5 	bl	801cae0 <scalbnf>
 801c756:	ee20 0a08 	vmul.f32	s0, s0, s16
 801c75a:	e5c9      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c75c:	4a19      	ldr	r2, [pc, #100]	; (801c7c4 <__ieee754_powf+0x578>)
 801c75e:	4293      	cmp	r3, r2
 801c760:	dd02      	ble.n	801c768 <__ieee754_powf+0x51c>
 801c762:	eddf 7a19 	vldr	s15, [pc, #100]	; 801c7c8 <__ieee754_powf+0x57c>
 801c766:	e67b      	b.n	801c460 <__ieee754_powf+0x214>
 801c768:	d108      	bne.n	801c77c <__ieee754_powf+0x530>
 801c76a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c76e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c776:	f6ff af7b 	blt.w	801c670 <__ieee754_powf+0x424>
 801c77a:	e7f2      	b.n	801c762 <__ieee754_powf+0x516>
 801c77c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801c780:	f73f af76 	bgt.w	801c670 <__ieee754_powf+0x424>
 801c784:	2000      	movs	r0, #0
 801c786:	e78f      	b.n	801c6a8 <__ieee754_powf+0x45c>
 801c788:	ee00 3a10 	vmov	s0, r3
 801c78c:	e7e3      	b.n	801c756 <__ieee754_powf+0x50a>
 801c78e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c792:	e5ad      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c794:	eeb0 0a68 	vmov.f32	s0, s17
 801c798:	e5aa      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c79a:	eeb0 0a48 	vmov.f32	s0, s16
 801c79e:	e5a7      	b.n	801c2f0 <__ieee754_powf+0xa4>
 801c7a0:	007fffff 	.word	0x007fffff
 801c7a4:	3f317218 	.word	0x3f317218
 801c7a8:	35bfbe8c 	.word	0x35bfbe8c
 801c7ac:	3f317200 	.word	0x3f317200
 801c7b0:	3331bb4c 	.word	0x3331bb4c
 801c7b4:	b5ddea0e 	.word	0xb5ddea0e
 801c7b8:	388ab355 	.word	0x388ab355
 801c7bc:	bb360b61 	.word	0xbb360b61
 801c7c0:	3e2aaaab 	.word	0x3e2aaaab
 801c7c4:	43160000 	.word	0x43160000
 801c7c8:	0da24260 	.word	0x0da24260

0801c7cc <__ieee754_sqrtf>:
 801c7cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c7d0:	4770      	bx	lr

0801c7d2 <fabs>:
 801c7d2:	ec51 0b10 	vmov	r0, r1, d0
 801c7d6:	ee10 2a10 	vmov	r2, s0
 801c7da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c7de:	ec43 2b10 	vmov	d0, r2, r3
 801c7e2:	4770      	bx	lr

0801c7e4 <finite>:
 801c7e4:	ee10 3a90 	vmov	r3, s1
 801c7e8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801c7ec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c7f0:	0fc0      	lsrs	r0, r0, #31
 801c7f2:	4770      	bx	lr

0801c7f4 <matherr>:
 801c7f4:	2000      	movs	r0, #0
 801c7f6:	4770      	bx	lr

0801c7f8 <nan>:
 801c7f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c800 <nan+0x8>
 801c7fc:	4770      	bx	lr
 801c7fe:	bf00      	nop
 801c800:	00000000 	.word	0x00000000
 801c804:	7ff80000 	.word	0x7ff80000

0801c808 <rint>:
 801c808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c80a:	ec51 0b10 	vmov	r0, r1, d0
 801c80e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c812:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c816:	2e13      	cmp	r6, #19
 801c818:	460b      	mov	r3, r1
 801c81a:	ee10 4a10 	vmov	r4, s0
 801c81e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c822:	dc56      	bgt.n	801c8d2 <rint+0xca>
 801c824:	2e00      	cmp	r6, #0
 801c826:	da2b      	bge.n	801c880 <rint+0x78>
 801c828:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c82c:	4302      	orrs	r2, r0
 801c82e:	d023      	beq.n	801c878 <rint+0x70>
 801c830:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c834:	4302      	orrs	r2, r0
 801c836:	4254      	negs	r4, r2
 801c838:	4314      	orrs	r4, r2
 801c83a:	0c4b      	lsrs	r3, r1, #17
 801c83c:	0b24      	lsrs	r4, r4, #12
 801c83e:	045b      	lsls	r3, r3, #17
 801c840:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c844:	ea44 0103 	orr.w	r1, r4, r3
 801c848:	460b      	mov	r3, r1
 801c84a:	492f      	ldr	r1, [pc, #188]	; (801c908 <rint+0x100>)
 801c84c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801c850:	e9d1 6700 	ldrd	r6, r7, [r1]
 801c854:	4602      	mov	r2, r0
 801c856:	4639      	mov	r1, r7
 801c858:	4630      	mov	r0, r6
 801c85a:	f7e3 fd37 	bl	80002cc <__adddf3>
 801c85e:	e9cd 0100 	strd	r0, r1, [sp]
 801c862:	463b      	mov	r3, r7
 801c864:	4632      	mov	r2, r6
 801c866:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c86a:	f7e3 fd2d 	bl	80002c8 <__aeabi_dsub>
 801c86e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c872:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c876:	4639      	mov	r1, r7
 801c878:	ec41 0b10 	vmov	d0, r0, r1
 801c87c:	b003      	add	sp, #12
 801c87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c880:	4a22      	ldr	r2, [pc, #136]	; (801c90c <rint+0x104>)
 801c882:	4132      	asrs	r2, r6
 801c884:	ea01 0702 	and.w	r7, r1, r2
 801c888:	4307      	orrs	r7, r0
 801c88a:	d0f5      	beq.n	801c878 <rint+0x70>
 801c88c:	0852      	lsrs	r2, r2, #1
 801c88e:	4011      	ands	r1, r2
 801c890:	430c      	orrs	r4, r1
 801c892:	d00b      	beq.n	801c8ac <rint+0xa4>
 801c894:	ea23 0202 	bic.w	r2, r3, r2
 801c898:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c89c:	2e13      	cmp	r6, #19
 801c89e:	fa43 f306 	asr.w	r3, r3, r6
 801c8a2:	bf0c      	ite	eq
 801c8a4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c8a8:	2400      	movne	r4, #0
 801c8aa:	4313      	orrs	r3, r2
 801c8ac:	4916      	ldr	r1, [pc, #88]	; (801c908 <rint+0x100>)
 801c8ae:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c8b2:	4622      	mov	r2, r4
 801c8b4:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c8b8:	4620      	mov	r0, r4
 801c8ba:	4629      	mov	r1, r5
 801c8bc:	f7e3 fd06 	bl	80002cc <__adddf3>
 801c8c0:	e9cd 0100 	strd	r0, r1, [sp]
 801c8c4:	4622      	mov	r2, r4
 801c8c6:	462b      	mov	r3, r5
 801c8c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c8cc:	f7e3 fcfc 	bl	80002c8 <__aeabi_dsub>
 801c8d0:	e7d2      	b.n	801c878 <rint+0x70>
 801c8d2:	2e33      	cmp	r6, #51	; 0x33
 801c8d4:	dd07      	ble.n	801c8e6 <rint+0xde>
 801c8d6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c8da:	d1cd      	bne.n	801c878 <rint+0x70>
 801c8dc:	ee10 2a10 	vmov	r2, s0
 801c8e0:	f7e3 fcf4 	bl	80002cc <__adddf3>
 801c8e4:	e7c8      	b.n	801c878 <rint+0x70>
 801c8e6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801c8ea:	f04f 32ff 	mov.w	r2, #4294967295
 801c8ee:	40f2      	lsrs	r2, r6
 801c8f0:	4210      	tst	r0, r2
 801c8f2:	d0c1      	beq.n	801c878 <rint+0x70>
 801c8f4:	0852      	lsrs	r2, r2, #1
 801c8f6:	4210      	tst	r0, r2
 801c8f8:	bf1f      	itttt	ne
 801c8fa:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c8fe:	ea20 0202 	bicne.w	r2, r0, r2
 801c902:	4134      	asrne	r4, r6
 801c904:	4314      	orrne	r4, r2
 801c906:	e7d1      	b.n	801c8ac <rint+0xa4>
 801c908:	0801d9e0 	.word	0x0801d9e0
 801c90c:	000fffff 	.word	0x000fffff

0801c910 <scalbn>:
 801c910:	b570      	push	{r4, r5, r6, lr}
 801c912:	ec55 4b10 	vmov	r4, r5, d0
 801c916:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c91a:	4606      	mov	r6, r0
 801c91c:	462b      	mov	r3, r5
 801c91e:	b9aa      	cbnz	r2, 801c94c <scalbn+0x3c>
 801c920:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c924:	4323      	orrs	r3, r4
 801c926:	d03b      	beq.n	801c9a0 <scalbn+0x90>
 801c928:	4b31      	ldr	r3, [pc, #196]	; (801c9f0 <scalbn+0xe0>)
 801c92a:	4629      	mov	r1, r5
 801c92c:	2200      	movs	r2, #0
 801c92e:	ee10 0a10 	vmov	r0, s0
 801c932:	f7e3 fe81 	bl	8000638 <__aeabi_dmul>
 801c936:	4b2f      	ldr	r3, [pc, #188]	; (801c9f4 <scalbn+0xe4>)
 801c938:	429e      	cmp	r6, r3
 801c93a:	4604      	mov	r4, r0
 801c93c:	460d      	mov	r5, r1
 801c93e:	da12      	bge.n	801c966 <scalbn+0x56>
 801c940:	a327      	add	r3, pc, #156	; (adr r3, 801c9e0 <scalbn+0xd0>)
 801c942:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c946:	f7e3 fe77 	bl	8000638 <__aeabi_dmul>
 801c94a:	e009      	b.n	801c960 <scalbn+0x50>
 801c94c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c950:	428a      	cmp	r2, r1
 801c952:	d10c      	bne.n	801c96e <scalbn+0x5e>
 801c954:	ee10 2a10 	vmov	r2, s0
 801c958:	4620      	mov	r0, r4
 801c95a:	4629      	mov	r1, r5
 801c95c:	f7e3 fcb6 	bl	80002cc <__adddf3>
 801c960:	4604      	mov	r4, r0
 801c962:	460d      	mov	r5, r1
 801c964:	e01c      	b.n	801c9a0 <scalbn+0x90>
 801c966:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c96a:	460b      	mov	r3, r1
 801c96c:	3a36      	subs	r2, #54	; 0x36
 801c96e:	4432      	add	r2, r6
 801c970:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c974:	428a      	cmp	r2, r1
 801c976:	dd0b      	ble.n	801c990 <scalbn+0x80>
 801c978:	ec45 4b11 	vmov	d1, r4, r5
 801c97c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801c9e8 <scalbn+0xd8>
 801c980:	f000 f90e 	bl	801cba0 <copysign>
 801c984:	a318      	add	r3, pc, #96	; (adr r3, 801c9e8 <scalbn+0xd8>)
 801c986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c98a:	ec51 0b10 	vmov	r0, r1, d0
 801c98e:	e7da      	b.n	801c946 <scalbn+0x36>
 801c990:	2a00      	cmp	r2, #0
 801c992:	dd08      	ble.n	801c9a6 <scalbn+0x96>
 801c994:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c998:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c99c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c9a0:	ec45 4b10 	vmov	d0, r4, r5
 801c9a4:	bd70      	pop	{r4, r5, r6, pc}
 801c9a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c9aa:	da0d      	bge.n	801c9c8 <scalbn+0xb8>
 801c9ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c9b0:	429e      	cmp	r6, r3
 801c9b2:	ec45 4b11 	vmov	d1, r4, r5
 801c9b6:	dce1      	bgt.n	801c97c <scalbn+0x6c>
 801c9b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801c9e0 <scalbn+0xd0>
 801c9bc:	f000 f8f0 	bl	801cba0 <copysign>
 801c9c0:	a307      	add	r3, pc, #28	; (adr r3, 801c9e0 <scalbn+0xd0>)
 801c9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9c6:	e7e0      	b.n	801c98a <scalbn+0x7a>
 801c9c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c9cc:	3236      	adds	r2, #54	; 0x36
 801c9ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c9d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c9d6:	4620      	mov	r0, r4
 801c9d8:	4629      	mov	r1, r5
 801c9da:	2200      	movs	r2, #0
 801c9dc:	4b06      	ldr	r3, [pc, #24]	; (801c9f8 <scalbn+0xe8>)
 801c9de:	e7b2      	b.n	801c946 <scalbn+0x36>
 801c9e0:	c2f8f359 	.word	0xc2f8f359
 801c9e4:	01a56e1f 	.word	0x01a56e1f
 801c9e8:	8800759c 	.word	0x8800759c
 801c9ec:	7e37e43c 	.word	0x7e37e43c
 801c9f0:	43500000 	.word	0x43500000
 801c9f4:	ffff3cb0 	.word	0xffff3cb0
 801c9f8:	3c900000 	.word	0x3c900000

0801c9fc <fabsf>:
 801c9fc:	ee10 3a10 	vmov	r3, s0
 801ca00:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ca04:	ee00 3a10 	vmov	s0, r3
 801ca08:	4770      	bx	lr

0801ca0a <finitef>:
 801ca0a:	ee10 3a10 	vmov	r3, s0
 801ca0e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801ca12:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801ca16:	bfac      	ite	ge
 801ca18:	2000      	movge	r0, #0
 801ca1a:	2001      	movlt	r0, #1
 801ca1c:	4770      	bx	lr
	...

0801ca20 <nanf>:
 801ca20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801ca28 <nanf+0x8>
 801ca24:	4770      	bx	lr
 801ca26:	bf00      	nop
 801ca28:	7fc00000 	.word	0x7fc00000

0801ca2c <rintf>:
 801ca2c:	b513      	push	{r0, r1, r4, lr}
 801ca2e:	ee10 1a10 	vmov	r1, s0
 801ca32:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ca36:	0ddc      	lsrs	r4, r3, #23
 801ca38:	3c7f      	subs	r4, #127	; 0x7f
 801ca3a:	2c16      	cmp	r4, #22
 801ca3c:	dc46      	bgt.n	801cacc <rintf+0xa0>
 801ca3e:	b32b      	cbz	r3, 801ca8c <rintf+0x60>
 801ca40:	2c00      	cmp	r4, #0
 801ca42:	ee10 2a10 	vmov	r2, s0
 801ca46:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801ca4a:	da21      	bge.n	801ca90 <rintf+0x64>
 801ca4c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801ca50:	425b      	negs	r3, r3
 801ca52:	4a21      	ldr	r2, [pc, #132]	; (801cad8 <rintf+0xac>)
 801ca54:	0a5b      	lsrs	r3, r3, #9
 801ca56:	0d09      	lsrs	r1, r1, #20
 801ca58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ca5c:	0509      	lsls	r1, r1, #20
 801ca5e:	430b      	orrs	r3, r1
 801ca60:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801ca64:	ee07 3a90 	vmov	s15, r3
 801ca68:	edd2 6a00 	vldr	s13, [r2]
 801ca6c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801ca70:	ed8d 7a01 	vstr	s14, [sp, #4]
 801ca74:	eddd 7a01 	vldr	s15, [sp, #4]
 801ca78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801ca7c:	ee17 3a90 	vmov	r3, s15
 801ca80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801ca84:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801ca88:	ee00 3a10 	vmov	s0, r3
 801ca8c:	b002      	add	sp, #8
 801ca8e:	bd10      	pop	{r4, pc}
 801ca90:	4b12      	ldr	r3, [pc, #72]	; (801cadc <rintf+0xb0>)
 801ca92:	4123      	asrs	r3, r4
 801ca94:	4219      	tst	r1, r3
 801ca96:	d0f9      	beq.n	801ca8c <rintf+0x60>
 801ca98:	085b      	lsrs	r3, r3, #1
 801ca9a:	4219      	tst	r1, r3
 801ca9c:	d006      	beq.n	801caac <rintf+0x80>
 801ca9e:	ea21 0203 	bic.w	r2, r1, r3
 801caa2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801caa6:	fa43 f404 	asr.w	r4, r3, r4
 801caaa:	4322      	orrs	r2, r4
 801caac:	4b0a      	ldr	r3, [pc, #40]	; (801cad8 <rintf+0xac>)
 801caae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801cab2:	ed90 7a00 	vldr	s14, [r0]
 801cab6:	ee07 2a90 	vmov	s15, r2
 801caba:	ee77 7a27 	vadd.f32	s15, s14, s15
 801cabe:	edcd 7a01 	vstr	s15, [sp, #4]
 801cac2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801cac6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801caca:	e7df      	b.n	801ca8c <rintf+0x60>
 801cacc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801cad0:	d3dc      	bcc.n	801ca8c <rintf+0x60>
 801cad2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801cad6:	e7d9      	b.n	801ca8c <rintf+0x60>
 801cad8:	0801d9f0 	.word	0x0801d9f0
 801cadc:	007fffff 	.word	0x007fffff

0801cae0 <scalbnf>:
 801cae0:	b508      	push	{r3, lr}
 801cae2:	ee10 2a10 	vmov	r2, s0
 801cae6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801caea:	ed2d 8b02 	vpush	{d8}
 801caee:	eef0 0a40 	vmov.f32	s1, s0
 801caf2:	d004      	beq.n	801cafe <scalbnf+0x1e>
 801caf4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801caf8:	d306      	bcc.n	801cb08 <scalbnf+0x28>
 801cafa:	ee70 0a00 	vadd.f32	s1, s0, s0
 801cafe:	ecbd 8b02 	vpop	{d8}
 801cb02:	eeb0 0a60 	vmov.f32	s0, s1
 801cb06:	bd08      	pop	{r3, pc}
 801cb08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801cb0c:	d21c      	bcs.n	801cb48 <scalbnf+0x68>
 801cb0e:	4b1f      	ldr	r3, [pc, #124]	; (801cb8c <scalbnf+0xac>)
 801cb10:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801cb90 <scalbnf+0xb0>
 801cb14:	4298      	cmp	r0, r3
 801cb16:	ee60 0a27 	vmul.f32	s1, s0, s15
 801cb1a:	db10      	blt.n	801cb3e <scalbnf+0x5e>
 801cb1c:	ee10 2a90 	vmov	r2, s1
 801cb20:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801cb24:	3b19      	subs	r3, #25
 801cb26:	4403      	add	r3, r0
 801cb28:	2bfe      	cmp	r3, #254	; 0xfe
 801cb2a:	dd0f      	ble.n	801cb4c <scalbnf+0x6c>
 801cb2c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801cb94 <scalbnf+0xb4>
 801cb30:	eeb0 0a48 	vmov.f32	s0, s16
 801cb34:	f000 f843 	bl	801cbbe <copysignf>
 801cb38:	ee60 0a08 	vmul.f32	s1, s0, s16
 801cb3c:	e7df      	b.n	801cafe <scalbnf+0x1e>
 801cb3e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801cb98 <scalbnf+0xb8>
 801cb42:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801cb46:	e7da      	b.n	801cafe <scalbnf+0x1e>
 801cb48:	0ddb      	lsrs	r3, r3, #23
 801cb4a:	e7ec      	b.n	801cb26 <scalbnf+0x46>
 801cb4c:	2b00      	cmp	r3, #0
 801cb4e:	dd06      	ble.n	801cb5e <scalbnf+0x7e>
 801cb50:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cb54:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cb58:	ee00 3a90 	vmov	s1, r3
 801cb5c:	e7cf      	b.n	801cafe <scalbnf+0x1e>
 801cb5e:	f113 0f16 	cmn.w	r3, #22
 801cb62:	da06      	bge.n	801cb72 <scalbnf+0x92>
 801cb64:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cb68:	4298      	cmp	r0, r3
 801cb6a:	dcdf      	bgt.n	801cb2c <scalbnf+0x4c>
 801cb6c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801cb98 <scalbnf+0xb8>
 801cb70:	e7de      	b.n	801cb30 <scalbnf+0x50>
 801cb72:	3319      	adds	r3, #25
 801cb74:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cb78:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cb7c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801cb9c <scalbnf+0xbc>
 801cb80:	ee07 3a10 	vmov	s14, r3
 801cb84:	ee67 0a27 	vmul.f32	s1, s14, s15
 801cb88:	e7b9      	b.n	801cafe <scalbnf+0x1e>
 801cb8a:	bf00      	nop
 801cb8c:	ffff3cb0 	.word	0xffff3cb0
 801cb90:	4c000000 	.word	0x4c000000
 801cb94:	7149f2ca 	.word	0x7149f2ca
 801cb98:	0da24260 	.word	0x0da24260
 801cb9c:	33000000 	.word	0x33000000

0801cba0 <copysign>:
 801cba0:	ec51 0b10 	vmov	r0, r1, d0
 801cba4:	ee11 0a90 	vmov	r0, s3
 801cba8:	ee10 2a10 	vmov	r2, s0
 801cbac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801cbb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801cbb4:	ea41 0300 	orr.w	r3, r1, r0
 801cbb8:	ec43 2b10 	vmov	d0, r2, r3
 801cbbc:	4770      	bx	lr

0801cbbe <copysignf>:
 801cbbe:	ee10 3a10 	vmov	r3, s0
 801cbc2:	ee10 2a90 	vmov	r2, s1
 801cbc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cbca:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801cbce:	4313      	orrs	r3, r2
 801cbd0:	ee00 3a10 	vmov	s0, r3
 801cbd4:	4770      	bx	lr
	...

0801cbd8 <_init>:
 801cbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbda:	bf00      	nop
 801cbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbde:	bc08      	pop	{r3}
 801cbe0:	469e      	mov	lr, r3
 801cbe2:	4770      	bx	lr

0801cbe4 <_fini>:
 801cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cbe6:	bf00      	nop
 801cbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cbea:	bc08      	pop	{r3}
 801cbec:	469e      	mov	lr, r3
 801cbee:	4770      	bx	lr
