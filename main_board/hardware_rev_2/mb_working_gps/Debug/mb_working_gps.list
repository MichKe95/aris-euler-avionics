
mb_working_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c970  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000de8  0801cb40  0801cb40  0002cb40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d928  0801d928  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801d928  0801d928  0002d928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d930  0801d930  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d930  0801d930  0002d930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d934  0801d934  0002d934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801d938  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e1a4  200001fc  0801db34  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  2001e3a0  0801db34  0003e3a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004961e  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008cad  00000000  00000000  0007984a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002aa0  00000000  00000000  000824f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002688  00000000  00000000  00084f98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034a2c  00000000  00000000  00087620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030bb1  00000000  00000000  000bc04c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b079  00000000  00000000  000ecbfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f7c76  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b9f4  00000000  00000000  001f7cf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cb28 	.word	0x0801cb28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801cb28 	.word	0x0801cb28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calculateCRC>:
 *  Created on: Jun 12, 2020
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"

uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	827b      	strh	r3, [r7, #18]

	for (int i = 0; i < len + 2; i += 2) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e03c      	b.n	8001008 <calculateCRC+0x90>
		shifter = 0x8000;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	82fb      	strh	r3, [r7, #22]
		if (i == len) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d102      	bne.n	8000fa2 <calculateCRC+0x2a>
			c = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	e00e      	b.n	8000fc0 <calculateCRC+0x48>
		} else {
			c = data[i+1] << 8 | data[i];
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	82bb      	strh	r3, [r7, #20]
		}
		do {
			carry = crc & 0x8000;
 8000fc0:	8a7b      	ldrh	r3, [r7, #18]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fca:	817b      	strh	r3, [r7, #10]
			crc <<= 1;
 8000fcc:	8a7b      	ldrh	r3, [r7, #18]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	827b      	strh	r3, [r7, #18]
			if(c & shifter) crc++;
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8afb      	ldrh	r3, [r7, #22]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <calculateCRC+0x6c>
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	827b      	strh	r3, [r7, #18]
			if(carry) crc ^= 0x1021;
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <calculateCRC+0x7e>
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	827b      	strh	r3, [r7, #18]
			shifter >>= 1;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	82fb      	strh	r3, [r7, #22]
		} while(shifter);
 8000ffc:	8afb      	ldrh	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1de      	bne.n	8000fc0 <calculateCRC+0x48>
	for (int i = 0; i < len + 2; i += 2) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3302      	adds	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3302      	adds	r3, #2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbbd      	blt.n	8000f8e <calculateCRC+0x16>
	}
	return crc;
 8001012:	8a7b      	ldrh	r3, [r7, #18]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <EnableMotor>:

osStatus_t EnableMotor(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800104a:	2306      	movs	r3, #6
 800104c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f977 	bl	8001350 <WriteCommand>
 8001062:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001082:	230f      	movs	r3, #15
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001088:	f107 0218 	add.w	r2, r7, #24
 800108c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f95b 	bl	8001350 <WriteCommand>
 800109a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 80010a2:	2341      	movs	r3, #65	; 0x41
 80010a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 80010a8:	1d3a      	adds	r2, r7, #4
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f9f5 	bl	80014a0 <ReadCommand>
 80010b6:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b37      	cmp	r3, #55	; 0x37
 80010bc:	d104      	bne.n	80010c8 <EnableMotor+0xa8>
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d101      	bne.n	80010c8 <EnableMotor+0xa8>
		status = osOK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <DisableMotor>:

osStatus_t DisableMotor(){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b088      	sub	sp, #32
 80010d6:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	61fb      	str	r3, [r7, #28]
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 80010de:	2360      	movs	r3, #96	; 0x60
 80010e0:	763b      	strb	r3, [r7, #24]
	command[1] = 0x41;
 80010e2:	2341      	movs	r3, #65	; 0x41
 80010e4:	767b      	strb	r3, [r7, #25]

	data[0] = 0x00;
 80010e6:	2300      	movs	r3, #0
 80010e8:	753b      	strb	r3, [r7, #20]
	data[1] = 0x00;
 80010ea:	2300      	movs	r3, #0
 80010ec:	757b      	strb	r3, [r7, #21]
	data[2] = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	75bb      	strb	r3, [r7, #22]
	data[3] = 0x40;
 80010f2:	2340      	movs	r3, #64	; 0x40
 80010f4:	75fb      	strb	r3, [r7, #23]

	status = WriteCommand(command, data, rx_buffer_write);
 80010f6:	463a      	mov	r2, r7
 80010f8:	f107 0114 	add.w	r1, r7, #20
 80010fc:	f107 0318 	add.w	r3, r7, #24
 8001100:	4618      	mov	r0, r3
 8001102:	f000 f925 	bl	8001350 <WriteCommand>
 8001106:	61f8      	str	r0, [r7, #28]

	return status;
 8001108:	69fb      	ldr	r3, [r7, #28]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3720      	adds	r7, #32
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <SetPositionMode>:

osStatus_t SetPositionMode(int8_t position_mode){
 8001112:	b580      	push	{r7, lr}
 8001114:	b08a      	sub	sp, #40	; 0x28
 8001116:	af00      	add	r7, sp, #0
 8001118:	4603      	mov	r3, r0
 800111a:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 800111c:	f04f 33ff 	mov.w	r3, #4294967295
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 8001122:	2360      	movs	r3, #96	; 0x60
 8001124:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 8001128:	2360      	movs	r3, #96	; 0x60
 800112a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 800112e:	2300      	movs	r3, #0
 8001130:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001132:	2300      	movs	r3, #0
 8001134:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 8001136:	2300      	movs	r3, #0
 8001138:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 800113e:	f107 0208 	add.w	r2, r7, #8
 8001142:	f107 011c 	add.w	r1, r7, #28
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	4618      	mov	r0, r3
 800114c:	f000 f900 	bl	8001350 <WriteCommand>
 8001150:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001154:	4618      	mov	r0, r3
 8001156:	3728      	adds	r7, #40	; 0x28
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 800116a:	2360      	movs	r3, #96	; 0x60
 800116c:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 8001170:	237a      	movs	r3, #122	; 0x7a
 8001172:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0e1b      	lsrs	r3, r3, #24
 800117a:	b2db      	uxtb	r3, r3
 800117c:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	141b      	asrs	r3, r3, #16
 8001182:	b2db      	uxtb	r3, r3
 8001184:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	121b      	asrs	r3, r3, #8
 800118a:	b2db      	uxtb	r3, r3
 800118c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001194:	f107 0208 	add.w	r2, r7, #8
 8001198:	f107 011c 	add.w	r1, r7, #28
 800119c:	f107 0320 	add.w	r3, r7, #32
 80011a0:	4618      	mov	r0, r3
 80011a2:	f000 f8d5 	bl	8001350 <WriteCommand>
 80011a6:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 80011a8:	2360      	movs	r3, #96	; 0x60
 80011aa:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 80011ae:	2340      	movs	r3, #64	; 0x40
 80011b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80011b8:	2300      	movs	r3, #0
 80011ba:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80011bc:	2300      	movs	r3, #0
 80011be:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 80011c0:	233f      	movs	r3, #63	; 0x3f
 80011c2:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 80011c4:	f107 0208 	add.w	r2, r7, #8
 80011c8:	f107 011c 	add.w	r1, r7, #28
 80011cc:	f107 0320 	add.w	r3, r7, #32
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 f8bd 	bl	8001350 <WriteCommand>
 80011d6:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 80011d8:	2360      	movs	r3, #96	; 0x60
 80011da:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 80011de:	2340      	movs	r3, #64	; 0x40
 80011e0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80011e4:	2300      	movs	r3, #0
 80011e6:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80011e8:	2300      	movs	r3, #0
 80011ea:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 80011f0:	230f      	movs	r3, #15
 80011f2:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 80011f4:	f107 0208 	add.w	r2, r7, #8
 80011f8:	f107 011c 	add.w	r1, r7, #28
 80011fc:	f107 0320 	add.w	r3, r7, #32
 8001200:	4618      	mov	r0, r3
 8001202:	f000 f8a5 	bl	8001350 <WriteCommand>
 8001206:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 8001208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 800120a:	4618      	mov	r0, r3
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 8001212:	b580      	push	{r7, lr}
 8001214:	b08c      	sub	sp, #48	; 0x30
 8001216:	af00      	add	r7, sp, #0
 8001218:	60f8      	str	r0, [r7, #12]
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 8001224:	2360      	movs	r3, #96	; 0x60
 8001226:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 800122a:	2381      	movs	r3, #129	; 0x81
 800122c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	0e1b      	lsrs	r3, r3, #24
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	141b      	asrs	r3, r3, #16
 800123e:	b2db      	uxtb	r3, r3
 8001240:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	121b      	asrs	r3, r3, #8
 8001248:	b2db      	uxtb	r3, r3
 800124a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001256:	f107 0210 	add.w	r2, r7, #16
 800125a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800125e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001262:	4618      	mov	r0, r3
 8001264:	f000 f874 	bl	8001350 <WriteCommand>
 8001268:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 800126a:	2360      	movs	r3, #96	; 0x60
 800126c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 8001270:	2383      	movs	r3, #131	; 0x83
 8001272:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 8001276:	68bb      	ldr	r3, [r7, #8]
 8001278:	0e1b      	lsrs	r3, r3, #24
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	141b      	asrs	r3, r3, #16
 8001284:	b2db      	uxtb	r3, r3
 8001286:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800128a:	68bb      	ldr	r3, [r7, #8]
 800128c:	121b      	asrs	r3, r3, #8
 800128e:	b2db      	uxtb	r3, r3
 8001290:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800129c:	f107 0210 	add.w	r2, r7, #16
 80012a0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 f851 	bl	8001350 <WriteCommand>
 80012ae:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 80012b6:	2384      	movs	r3, #132	; 0x84
 80012b8:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	0e1b      	lsrs	r3, r3, #24
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	141b      	asrs	r3, r3, #16
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	121b      	asrs	r3, r3, #8
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80012e2:	f107 0210 	add.w	r2, r7, #16
 80012e6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f82e 	bl	8001350 <WriteCommand>
 80012f4:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 80012f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012f8:	4618      	mov	r0, r3
 80012fa:	3730      	adds	r7, #48	; 0x30
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 8001308:	f04f 33ff 	mov.w	r3, #4294967295
 800130c:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 800130e:	2360      	movs	r3, #96	; 0x60
 8001310:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 8001314:	2364      	movs	r3, #100	; 0x64
 8001316:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 800131a:	f107 020c 	add.w	r2, r7, #12
 800131e:	f107 0320 	add.w	r3, r7, #32
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f000 f8bb 	bl	80014a0 <ReadCommand>
 800132a:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[8] +
 800132c:	7d3b      	ldrb	r3, [r7, #20]
 800132e:	461a      	mov	r2, r3
			(rx_buffer_read[9] << 8) +
 8001330:	7d7b      	ldrb	r3, [r7, #21]
 8001332:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[8] +
 8001334:	441a      	add	r2, r3
			(rx_buffer_read[10] << 16) +
 8001336:	7dbb      	ldrb	r3, [r7, #22]
 8001338:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[9] << 8) +
 800133a:	441a      	add	r2, r3
			(rx_buffer_read[11] << 24);
 800133c:	7dfb      	ldrb	r3, [r7, #23]
 800133e:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[10] << 16) +
 8001340:	441a      	add	r2, r3
	*position = rx_buffer_read[8] +
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	601a      	str	r2, [r3, #0]

	return status;
 8001346:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 8001348:	4618      	mov	r0, r3
 800134a:	3728      	adds	r7, #40	; 0x28
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 8001350:	b5b0      	push	{r4, r5, r7, lr}
 8001352:	b092      	sub	sp, #72	; 0x48
 8001354:	af00      	add	r7, sp, #0
 8001356:	60f8      	str	r0, [r7, #12]
 8001358:	60b9      	str	r1, [r7, #8]
 800135a:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t byte_stream_write[14] = { 0 };
 8001362:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]
 800136c:	609a      	str	r2, [r3, #8]
 800136e:	819a      	strh	r2, [r3, #12]

	uint8_t dma_buffer[20] = { 0 };
 8001370:	f107 0320 	add.w	r3, r7, #32
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

	byte_stream_write[0] = 0x90;			// DLE
 8001380:	2390      	movs	r3, #144	; 0x90
 8001382:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_write[1] = 0x02;			// STX
 8001386:	2302      	movs	r3, #2
 8001388:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_write[2] = 0x68;			// Write Object
 800138c:	2368      	movs	r3, #104	; 0x68
 800138e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8001392:	2304      	movs	r3, #4
 8001394:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	byte_stream_write[4] = 0x01;			// Node ID
 8001398:	2301      	movs	r3, #1
 800139a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_write[5] = command[1];		// Index Low Byte
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	785b      	ldrb	r3, [r3, #1]
 80013a2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	byte_stream_write[6] = command[0];		// Index High byte
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	byte_stream_write[7] = 0x00;			// Subindex of object
 80013ae:	2300      	movs	r3, #0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	byte_stream_write[8] = data[3];			// Data - low byte
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	78db      	ldrb	r3, [r3, #3]
 80013b8:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	byte_stream_write[9] = data[2];			// Data
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	byte_stream_write[10] = data[1];		// Data
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	785b      	ldrb	r3, [r3, #1]
 80013c8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	byte_stream_write[11] = data[0];		// Data - high byte
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80013e8:	6810      	ldr	r0, [r2, #0]
 80013ea:	6851      	ldr	r1, [r2, #4]
 80013ec:	c303      	stmia	r3!, {r0, r1}
 80013ee:	8912      	ldrh	r2, [r2, #8]
 80013f0:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	crc_calc = calculateCRC(crc_data_array, 10);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	210a      	movs	r1, #10
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fdba 	bl	8000f78 <calculateCRC>
 8001404:	4603      	mov	r3, r0
 8001406:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 800140a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001414:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	b29b      	uxth	r3, r3
 800141c:	b2db      	uxtb	r3, r3
 800141e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41


	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 8001422:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8001426:	2314      	movs	r3, #20
 8001428:	220e      	movs	r2, #14
 800142a:	481c      	ldr	r0, [pc, #112]	; (800149c <WriteCommand+0x14c>)
 800142c:	f00c fba0 	bl	800db70 <HAL_UART_Transmit>

	HAL_UART_DMAResume(&huart4);
 8001430:	481a      	ldr	r0, [pc, #104]	; (800149c <WriteCommand+0x14c>)
 8001432:	f00c fda9 	bl	800df88 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8001436:	f107 0320 	add.w	r3, r7, #32
 800143a:	2214      	movs	r2, #20
 800143c:	4619      	mov	r1, r3
 800143e:	4817      	ldr	r0, [pc, #92]	; (800149c <WriteCommand+0x14c>)
 8001440:	f00c fcca 	bl	800ddd8 <HAL_UART_Receive_DMA>
	osDelay(3);
 8001444:	2003      	movs	r0, #3
 8001446:	f014 fce9 	bl	8015e1c <osDelay>
	HAL_UART_DMAStop(&huart4);
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <WriteCommand+0x14c>)
 800144c:	f00c fde2 	bl	800e014 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	461d      	mov	r5, r3
 8001454:	f107 0420 	add.w	r4, r7, #32
 8001458:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800145a:	6028      	str	r0, [r5, #0]
 800145c:	6069      	str	r1, [r5, #4]
 800145e:	60aa      	str	r2, [r5, #8]
 8001460:	60eb      	str	r3, [r5, #12]
 8001462:	6820      	ldr	r0, [r4, #0]
 8001464:	6128      	str	r0, [r5, #16]

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	3307      	adds	r3, #7
 800146a:	781a      	ldrb	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3306      	adds	r3, #6
 8001470:	781b      	ldrb	r3, [r3, #0]
 8001472:	4313      	orrs	r3, r2
 8001474:	b2da      	uxtb	r2, r3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3305      	adds	r3, #5
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4313      	orrs	r3, r2
 800147e:	b2da      	uxtb	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3304      	adds	r3, #4
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	4313      	orrs	r3, r2
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <WriteCommand+0x142>
		status = osOK;
 800148e:	2300      	movs	r3, #0
 8001490:	647b      	str	r3, [r7, #68]	; 0x44
	}

	return status;
 8001492:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 8001494:	4618      	mov	r0, r3
 8001496:	3748      	adds	r7, #72	; 0x48
 8001498:	46bd      	mov	sp, r7
 800149a:	bdb0      	pop	{r4, r5, r7, pc}
 800149c:	20017dac 	.word	0x20017dac

080014a0 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b090      	sub	sp, #64	; 0x40
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	221e      	movs	r2, #30
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f019 f8c6 	bl	801a64a <memset>

	byte_stream_read[0] = 0x90;				// DLE
 80014be:	2390      	movs	r3, #144	; 0x90
 80014c0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	byte_stream_read[1] = 0x02;				// STX
 80014c4:	2302      	movs	r3, #2
 80014c6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	byte_stream_read[2] = 0x60;				// Read Object
 80014ca:	2360      	movs	r3, #96	; 0x60
 80014cc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 80014d0:	2302      	movs	r3, #2
 80014d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	byte_stream_read[4] = 0x01;				// Node ID
 80014d6:	2301      	movs	r3, #1
 80014d8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_read[5] = command[1];		// Index Low Byte
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	785b      	ldrb	r3, [r3, #1]
 80014e0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_read[6] = command[0];		// Index High byte
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_read[7] = 0x00;				// Subindex of object
 80014ec:	2300      	movs	r3, #0
 80014ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 80014f2:	f107 0308 	add.w	r3, r7, #8
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	f107 0232 	add.w	r2, r7, #50	; 0x32
 8001504:	6810      	ldr	r0, [r2, #0]
 8001506:	6018      	str	r0, [r3, #0]
 8001508:	8892      	ldrh	r2, [r2, #4]
 800150a:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 800150c:	2300      	movs	r3, #0
 800150e:	877b      	strh	r3, [r7, #58]	; 0x3a
	crc_calc = calculateCRC(crc_data_array, 6);
 8001510:	f107 0308 	add.w	r3, r7, #8
 8001514:	2106      	movs	r1, #6
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff fd2e 	bl	8000f78 <calculateCRC>
 800151c:	4603      	mov	r3, r0
 800151e:	877b      	strh	r3, [r7, #58]	; 0x3a

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 8001520:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 8001528:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800152a:	0a1b      	lsrs	r3, r3, #8
 800152c:	b29b      	uxth	r3, r3
 800152e:	b2db      	uxtb	r3, r3
 8001530:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39


	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 8001534:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001538:	230a      	movs	r3, #10
 800153a:	220a      	movs	r2, #10
 800153c:	481a      	ldr	r0, [pc, #104]	; (80015a8 <ReadCommand+0x108>)
 800153e:	f00c fb17 	bl	800db70 <HAL_UART_Transmit>

	HAL_UART_DMAResume(&huart4);
 8001542:	4819      	ldr	r0, [pc, #100]	; (80015a8 <ReadCommand+0x108>)
 8001544:	f00c fd20 	bl	800df88 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	2214      	movs	r2, #20
 800154e:	4619      	mov	r1, r3
 8001550:	4815      	ldr	r0, [pc, #84]	; (80015a8 <ReadCommand+0x108>)
 8001552:	f00c fc41 	bl	800ddd8 <HAL_UART_Receive_DMA>
	osDelay(3);
 8001556:	2003      	movs	r0, #3
 8001558:	f014 fc60 	bl	8015e1c <osDelay>
	HAL_UART_DMAStop(&huart4);
 800155c:	4812      	ldr	r0, [pc, #72]	; (80015a8 <ReadCommand+0x108>)
 800155e:	f00c fd59 	bl	800e014 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	2214      	movs	r2, #20
 8001568:	4619      	mov	r1, r3
 800156a:	6838      	ldr	r0, [r7, #0]
 800156c:	f019 f862 	bl	801a634 <memcpy>


	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	3307      	adds	r3, #7
 8001574:	781a      	ldrb	r2, [r3, #0]
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	3306      	adds	r3, #6
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4313      	orrs	r3, r2
 800157e:	b2da      	uxtb	r2, r3
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	3305      	adds	r3, #5
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	4313      	orrs	r3, r2
 8001588:	b2da      	uxtb	r2, r3
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	3304      	adds	r3, #4
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4313      	orrs	r3, r2
 8001592:	b2db      	uxtb	r3, r3
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <ReadCommand+0xfc>
		status = osOK;
 8001598:	2300      	movs	r3, #0
 800159a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return status;
 800159c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 800159e:	4618      	mov	r0, r3
 80015a0:	3740      	adds	r7, #64	; 0x40
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20017dac 	.word	0x20017dac

080015ac <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 80015b4:	2303      	movs	r3, #3
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e01c      	b.n	80015f4 <_gps_search_start+0x48>
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b02      	subs	r3, #2
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2247      	movs	r2, #71	; 0x47
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d111      	bne.n	80015ee <_gps_search_start+0x42>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3b01      	subs	r3, #1
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2247      	movs	r2, #71	; 0x47
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d109      	bne.n	80015ee <_gps_search_start+0x42>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	4413      	add	r3, r2
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2241      	movs	r2, #65	; 0x41
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d102      	bne.n	80015ee <_gps_search_start+0x42>
			    return i+1;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	3301      	adds	r3, #1
 80015ec:	e008      	b.n	8001600 <_gps_search_start+0x54>
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	3301      	adds	r3, #1
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f240 32a1 	movw	r2, #929	; 0x3a1
 80015fa:	4293      	cmp	r3, r2
 80015fc:	dddd      	ble.n	80015ba <_gps_search_start+0xe>
			}
	return 0;
 80015fe:	2300      	movs	r3, #0
}
 8001600:	4618      	mov	r0, r3
 8001602:	3714      	adds	r7, #20
 8001604:	46bd      	mov	sp, r7
 8001606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160a:	4770      	bx	lr
 800160c:	0000      	movs	r0, r0
	...

08001610 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 8001610:	b5b0      	push	{r4, r5, r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
 8001618:	6039      	str	r1, [r7, #0]


	if (data[22] == 'N' || data[22] == 'S'){
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	3316      	adds	r3, #22
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	2b4e      	cmp	r3, #78	; 0x4e
 8001622:	d005      	beq.n	8001630 <_parse_data+0x20>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	3316      	adds	r3, #22
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b53      	cmp	r3, #83	; 0x53
 800162c:	f040 81e6 	bne.w	80019fc <_parse_data+0x3ec>

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e00c      	b.n	8001650 <_parse_data+0x40>
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	781a      	ldrb	r2, [r3, #0]
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6839      	ldr	r1, [r7, #0]
 8001642:	440b      	add	r3, r1
 8001644:	3a30      	subs	r2, #48	; 0x30
 8001646:	b2d2      	uxtb	r2, r2
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	2b45      	cmp	r3, #69	; 0x45
 8001654:	ddef      	ble.n	8001636 <_parse_data+0x26>


		dev->data.hour = data[1]*10 + data[2];
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	461a      	mov	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3302      	adds	r3, #2
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	609a      	str	r2, [r3, #8]
		dev->data.minute = data[3]*10 + data[4];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	3303      	adds	r3, #3
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	4613      	mov	r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	4413      	add	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	461a      	mov	r2, r3
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	3304      	adds	r3, #4
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	4413      	add	r3, r2
 8001690:	461a      	mov	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	60da      	str	r2, [r3, #12]
		dev->data.second = data[5]*10 + data[6];
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	3305      	adds	r3, #5
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	461a      	mov	r2, r3
 800169e:	4613      	mov	r3, r2
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4413      	add	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	461a      	mov	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	3306      	adds	r3, #6
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	461a      	mov	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	611a      	str	r2, [r3, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	330b      	adds	r3, #11
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	461a      	mov	r2, r3
 80016be:	0092      	lsls	r2, r2, #2
 80016c0:	4413      	add	r3, r2
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	b2da      	uxtb	r2, r3
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	330c      	adds	r3, #12
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	755a      	strb	r2, [r3, #21]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	330d      	adds	r3, #13
 80016d8:	781b      	ldrb	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe ff42 	bl	8000564 <__aeabi_i2d>
 80016e0:	a3cb      	add	r3, pc, #812	; (adr r3, 8001a10 <_parse_data+0x400>)
 80016e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e6:	f7fe ffa7 	bl	8000638 <__aeabi_dmul>
 80016ea:	4603      	mov	r3, r0
 80016ec:	460c      	mov	r4, r1
 80016ee:	4625      	mov	r5, r4
 80016f0:	461c      	mov	r4, r3
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	330e      	adds	r3, #14
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff33 	bl	8000564 <__aeabi_i2d>
 80016fe:	a3c6      	add	r3, pc, #792	; (adr r3, 8001a18 <_parse_data+0x408>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7fe ff98 	bl	8000638 <__aeabi_dmul>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	4620      	mov	r0, r4
 800170e:	4629      	mov	r1, r5
 8001710:	f7fe fddc 	bl	80002cc <__adddf3>
 8001714:	4603      	mov	r3, r0
 8001716:	460c      	mov	r4, r1
 8001718:	4625      	mov	r5, r4
 800171a:	461c      	mov	r4, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	3310      	adds	r3, #16
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff1e 	bl	8000564 <__aeabi_i2d>
 8001728:	a3bd      	add	r3, pc, #756	; (adr r3, 8001a20 <_parse_data+0x410>)
 800172a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172e:	f7fe ff83 	bl	8000638 <__aeabi_dmul>
 8001732:	4602      	mov	r2, r0
 8001734:	460b      	mov	r3, r1
 8001736:	4620      	mov	r0, r4
 8001738:	4629      	mov	r1, r5
 800173a:	f7fe fdc7 	bl	80002cc <__adddf3>
 800173e:	4603      	mov	r3, r0
 8001740:	460c      	mov	r4, r1
 8001742:	4625      	mov	r5, r4
 8001744:	461c      	mov	r4, r3
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	3311      	adds	r3, #17
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff09 	bl	8000564 <__aeabi_i2d>
 8001752:	a3b5      	add	r3, pc, #724	; (adr r3, 8001a28 <_parse_data+0x418>)
 8001754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001758:	f7fe ff6e 	bl	8000638 <__aeabi_dmul>
 800175c:	4602      	mov	r2, r0
 800175e:	460b      	mov	r3, r1
 8001760:	4620      	mov	r0, r4
 8001762:	4629      	mov	r1, r5
 8001764:	f7fe fdb2 	bl	80002cc <__adddf3>
 8001768:	4603      	mov	r3, r0
 800176a:	460c      	mov	r4, r1
 800176c:	4625      	mov	r5, r4
 800176e:	461c      	mov	r4, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	3312      	adds	r3, #18
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe fef4 	bl	8000564 <__aeabi_i2d>
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	4bab      	ldr	r3, [pc, #684]	; (8001a30 <_parse_data+0x420>)
 8001782:	f7fe ff59 	bl	8000638 <__aeabi_dmul>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4620      	mov	r0, r4
 800178c:	4629      	mov	r1, r5
 800178e:	f7fe fd9d 	bl	80002cc <__adddf3>
 8001792:	4603      	mov	r3, r0
 8001794:	460c      	mov	r4, r1
 8001796:	4625      	mov	r5, r4
 8001798:	461c      	mov	r4, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	3313      	adds	r3, #19
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fedf 	bl	8000564 <__aeabi_i2d>
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	4ba2      	ldr	r3, [pc, #648]	; (8001a34 <_parse_data+0x424>)
 80017ac:	f7fe ff44 	bl	8000638 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7fe fd88 	bl	80002cc <__adddf3>
 80017bc:	4603      	mov	r3, r0
 80017be:	460c      	mov	r4, r1
 80017c0:	4625      	mov	r5, r4
 80017c2:	461c      	mov	r4, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	3314      	adds	r3, #20
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe feca 	bl	8000564 <__aeabi_i2d>
 80017d0:	4602      	mov	r2, r0
 80017d2:	460b      	mov	r3, r1
 80017d4:	4620      	mov	r0, r4
 80017d6:	4629      	mov	r1, r5
 80017d8:	f7fe fd78 	bl	80002cc <__adddf3>
 80017dc:	4603      	mov	r3, r0
 80017de:	460c      	mov	r4, r1
 80017e0:	4618      	mov	r0, r3
 80017e2:	4621      	mov	r1, r4
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	4b93      	ldr	r3, [pc, #588]	; (8001a38 <_parse_data+0x428>)
 80017ea:	f7ff f84f 	bl	800088c <__aeabi_ddiv>
 80017ee:	4603      	mov	r3, r0
 80017f0:	460c      	mov	r4, r1
 80017f2:	4618      	mov	r0, r3
 80017f4:	4621      	mov	r1, r4
 80017f6:	f7ff f9cf 	bl	8000b98 <__aeabi_d2uiz>
 80017fa:	4602      	mov	r2, r0
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	619a      	str	r2, [r3, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	3319      	adds	r3, #25
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	461a      	mov	r2, r3
 8001808:	0092      	lsls	r2, r2, #2
 800180a:	4413      	add	r3, r2
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	b2da      	uxtb	r2, r3
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	331a      	adds	r3, #26
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	4413      	add	r3, r2
 8001818:	b2da      	uxtb	r2, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	771a      	strb	r2, [r3, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	331b      	adds	r3, #27
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4618      	mov	r0, r3
 8001826:	f7fe fe9d 	bl	8000564 <__aeabi_i2d>
 800182a:	a379      	add	r3, pc, #484	; (adr r3, 8001a10 <_parse_data+0x400>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe ff02 	bl	8000638 <__aeabi_dmul>
 8001834:	4603      	mov	r3, r0
 8001836:	460c      	mov	r4, r1
 8001838:	4625      	mov	r5, r4
 800183a:	461c      	mov	r4, r3
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	331c      	adds	r3, #28
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fe8e 	bl	8000564 <__aeabi_i2d>
 8001848:	a373      	add	r3, pc, #460	; (adr r3, 8001a18 <_parse_data+0x408>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fef3 	bl	8000638 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fd37 	bl	80002cc <__adddf3>
 800185e:	4603      	mov	r3, r0
 8001860:	460c      	mov	r4, r1
 8001862:	4625      	mov	r5, r4
 8001864:	461c      	mov	r4, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	331e      	adds	r3, #30
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe79 	bl	8000564 <__aeabi_i2d>
 8001872:	a36b      	add	r3, pc, #428	; (adr r3, 8001a20 <_parse_data+0x410>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fede 	bl	8000638 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fd22 	bl	80002cc <__adddf3>
 8001888:	4603      	mov	r3, r0
 800188a:	460c      	mov	r4, r1
 800188c:	4625      	mov	r5, r4
 800188e:	461c      	mov	r4, r3
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	331f      	adds	r3, #31
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7fe fe64 	bl	8000564 <__aeabi_i2d>
 800189c:	a362      	add	r3, pc, #392	; (adr r3, 8001a28 <_parse_data+0x418>)
 800189e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a2:	f7fe fec9 	bl	8000638 <__aeabi_dmul>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4620      	mov	r0, r4
 80018ac:	4629      	mov	r1, r5
 80018ae:	f7fe fd0d 	bl	80002cc <__adddf3>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	4625      	mov	r5, r4
 80018b8:	461c      	mov	r4, r3
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	3320      	adds	r3, #32
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7fe fe4f 	bl	8000564 <__aeabi_i2d>
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <_parse_data+0x420>)
 80018cc:	f7fe feb4 	bl	8000638 <__aeabi_dmul>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4620      	mov	r0, r4
 80018d6:	4629      	mov	r1, r5
 80018d8:	f7fe fcf8 	bl	80002cc <__adddf3>
 80018dc:	4603      	mov	r3, r0
 80018de:	460c      	mov	r4, r1
 80018e0:	4625      	mov	r5, r4
 80018e2:	461c      	mov	r4, r3
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	3321      	adds	r3, #33	; 0x21
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7fe fe3a 	bl	8000564 <__aeabi_i2d>
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <_parse_data+0x424>)
 80018f6:	f7fe fe9f 	bl	8000638 <__aeabi_dmul>
 80018fa:	4602      	mov	r2, r0
 80018fc:	460b      	mov	r3, r1
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7fe fce3 	bl	80002cc <__adddf3>
 8001906:	4603      	mov	r3, r0
 8001908:	460c      	mov	r4, r1
 800190a:	4625      	mov	r5, r4
 800190c:	461c      	mov	r4, r3
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3322      	adds	r3, #34	; 0x22
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe fe25 	bl	8000564 <__aeabi_i2d>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fcd3 	bl	80002cc <__adddf3>
 8001926:	4603      	mov	r3, r0
 8001928:	460c      	mov	r4, r1
 800192a:	4618      	mov	r0, r3
 800192c:	4621      	mov	r1, r4
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	4b41      	ldr	r3, [pc, #260]	; (8001a38 <_parse_data+0x428>)
 8001934:	f7fe ffaa 	bl	800088c <__aeabi_ddiv>
 8001938:	4603      	mov	r3, r0
 800193a:	460c      	mov	r4, r1
 800193c:	4618      	mov	r0, r3
 800193e:	4621      	mov	r1, r4
 8001940:	f7ff f92a 	bl	8000b98 <__aeabi_d2uiz>
 8001944:	4602      	mov	r2, r0
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	621a      	str	r2, [r3, #32]

		dev->data.fix = data[38];
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3328      	adds	r3, #40	; 0x28
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	0092      	lsls	r2, r2, #2
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	3329      	adds	r3, #41	; 0x29
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	4413      	add	r3, r2
 800196e:	b2da      	uxtb	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	751a      	strb	r2, [r3, #20]

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	332b      	adds	r3, #43	; 0x2b
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	461a      	mov	r2, r3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	4413      	add	r3, r2
 8001982:	461a      	mov	r2, r3
 8001984:	0091      	lsls	r1, r2, #2
 8001986:	461a      	mov	r2, r3
 8001988:	460b      	mov	r3, r1
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	b29a      	uxth	r2, r3
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	332d      	adds	r3, #45	; 0x2d
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	b29b      	uxth	r3, r3
 8001998:	4619      	mov	r1, r3
 800199a:	0089      	lsls	r1, r1, #2
 800199c:	440b      	add	r3, r1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	b29b      	uxth	r3, r3
 80019a2:	4413      	add	r3, r2
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	332e      	adds	r3, #46	; 0x2e
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	84da      	strh	r2, [r3, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	3330      	adds	r3, #48	; 0x30
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	461a      	mov	r2, r3
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	4413      	add	r3, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	0091      	lsls	r1, r2, #2
 80019c8:	461a      	mov	r2, r3
 80019ca:	460b      	mov	r3, r1
 80019cc:	4413      	add	r3, r2
 80019ce:	009b      	lsls	r3, r3, #2
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	3331      	adds	r3, #49	; 0x31
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	b29b      	uxth	r3, r3
 80019da:	4619      	mov	r1, r3
 80019dc:	0089      	lsls	r1, r1, #2
 80019de:	440b      	add	r3, r1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	b29b      	uxth	r3, r3
 80019e4:	4413      	add	r3, r2
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	3332      	adds	r3, #50	; 0x32
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
 80019f8:	2301      	movs	r3, #1
 80019fa:	e004      	b.n	8001a06 <_parse_data+0x3f6>
		dev->data.fix = 0;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return 0;
 8001a04:	2300      	movs	r3, #0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	00000000 	.word	0x00000000
 8001a14:	416312d0 	.word	0x416312d0
 8001a18:	00000000 	.word	0x00000000
 8001a1c:	412e8480 	.word	0x412e8480
 8001a20:	00000000 	.word	0x00000000
 8001a24:	40f86a00 	.word	0x40f86a00
 8001a28:	00000000 	.word	0x00000000
 8001a2c:	40c38800 	.word	0x40c38800
 8001a30:	408f4000 	.word	0x408f4000
 8001a34:	40590000 	.word	0x40590000
 8001a38:	40180000 	.word	0x40180000

08001a3c <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(dev->uart_bus);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f00c fae3 	bl	800e014 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6858      	ldr	r0, [r3, #4]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	461a      	mov	r2, r3
 8001a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a5c:	fb03 f302 	mul.w	r3, r3, r2
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <gps_dma_init+0x44>)
 8001a62:	4413      	add	r3, r2
 8001a64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f00c f9b5 	bl	800ddd8 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	4618      	mov	r0, r3
 8001a74:	f00c fa88 	bl	800df88 <HAL_UART_DMAResume>
}
 8001a78:	bf00      	nop
 8001a7a:	3708      	adds	r7, #8
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	20008958 	.word	0x20008958

08001a84 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAPause(dev->uart_bus);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f00c fa25 	bl	800dee0 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa0:	fb03 f302 	mul.w	r3, r3, r2
 8001aa4:	4a1a      	ldr	r2, [pc, #104]	; (8001b10 <gps_read_sensor+0x8c>)
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fd7f 	bl	80015ac <_gps_search_start>
 8001aae:	60f8      	str	r0, [r7, #12]
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <gps_read_sensor+0x60>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	461a      	mov	r2, r3
 8001abc:	2346      	movs	r3, #70	; 0x46
 8001abe:	fb03 f302 	mul.w	r3, r3, r2
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <gps_read_sensor+0x90>)
 8001ac4:	1898      	adds	r0, r3, r2
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ad0:	fb03 f302 	mul.w	r3, r3, r2
 8001ad4:	4a0e      	ldr	r2, [pc, #56]	; (8001b10 <gps_read_sensor+0x8c>)
 8001ad6:	441a      	add	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	2246      	movs	r2, #70	; 0x46
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f018 fda8 	bl	801a634 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f00c fa4d 	bl	800df88 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	2346      	movs	r3, #70	; 0x46
 8001af6:	fb03 f302 	mul.w	r3, r3, r2
 8001afa:	4a06      	ldr	r2, [pc, #24]	; (8001b14 <gps_read_sensor+0x90>)
 8001afc:	4413      	add	r3, r2
 8001afe:	4619      	mov	r1, r3
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	f7ff fd85 	bl	8001610 <_parse_data>
 8001b06:	4603      	mov	r3, r0
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	20008958 	.word	0x20008958
 8001b14:	20008884 	.word	0x20008884

08001b18 <gps_reset>:


void gps_reset(struct gps_device *dev){
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

	dev->data.hour = 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	609a      	str	r2, [r3, #8]
	dev->data.minute = 0;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	60da      	str	r2, [r3, #12]
	dev->data.second = 0;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]

	dev->data.lat_deg = 0;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	755a      	strb	r2, [r3, #21]
	dev->data.lat_decimal = 0;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	619a      	str	r2, [r3, #24]

	dev->data.lon_deg = 0;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	771a      	strb	r2, [r3, #28]
	dev->data.lon_decimal = 0;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	621a      	str	r2, [r3, #32]

	dev->data.fix = 0;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	dev->data.satellite = 0;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2200      	movs	r2, #0
 8001b56:	751a      	strb	r2, [r3, #20]

	dev->data.HDOP = 0;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	84da      	strh	r2, [r3, #38]	; 0x26

	dev->data.altitude= 0;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2200      	movs	r2, #0
 8001b62:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001b64:	bf00      	nop
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8001b70:	b580      	push	{r7, lr}
 8001b72:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	6018      	str	r0, [r3, #0]
    /* The coefficients are sorted in the following way: Gain 1, Gain 2, Gain 3, Optimal Trajectory*/
    const double coeff0[POLY_DEG+1] = {};
 8001b7c:	4a27      	ldr	r2, [pc, #156]	; (8001c1c <init_coeff+0xac>)
 8001b7e:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001b82:	4611      	mov	r1, r2
 8001b84:	22f8      	movs	r2, #248	; 0xf8
 8001b86:	4618      	mov	r0, r3
 8001b88:	f018 fd54 	bl	801a634 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 8001b8c:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001b90:	4a23      	ldr	r2, [pc, #140]	; (8001c20 <init_coeff+0xb0>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	4611      	mov	r1, r2
 8001b96:	23f8      	movs	r3, #248	; 0xf8
 8001b98:	461a      	mov	r2, r3
 8001b9a:	f018 fd4b 	bl	801a634 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 8001b9e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <init_coeff+0xb4>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	23f8      	movs	r3, #248	; 0xf8
 8001baa:	461a      	mov	r2, r3
 8001bac:	f018 fd42 	bl	801a634 <memcpy>
    const double coeff3[POLY_DEG+1] = {};
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4a1c      	ldr	r2, [pc, #112]	; (8001c28 <init_coeff+0xb8>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	4611      	mov	r1, r2
 8001bba:	23f8      	movs	r3, #248	; 0xf8
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	f018 fd39 	bl	801a634 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	3340      	adds	r3, #64	; 0x40
 8001bc8:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8001bcc:	22f8      	movs	r2, #248	; 0xf8
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f018 fd30 	bl	801a634 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001bdc:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001be0:	22f8      	movs	r2, #248	; 0xf8
 8001be2:	4618      	mov	r0, r3
 8001be4:	f018 fd26 	bl	801a634 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001bf0:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001bf4:	22f8      	movs	r2, #248	; 0xf8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f018 fd1c 	bl	801a634 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8001bfc:	1d3b      	adds	r3, r7, #4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001c04:	f107 0108 	add.w	r1, r7, #8
 8001c08:	22f8      	movs	r2, #248	; 0xf8
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f018 fd12 	bl	801a634 <memcpy>
}
 8001c10:	bf00      	nop
 8001c12:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	0801cb40 	.word	0x0801cb40
 8001c20:	0801cc38 	.word	0x0801cc38
 8001c24:	0801cd30 	.word	0x0801cd30
 8001c28:	0801ce28 	.word	0x0801ce28
 8001c2c:	00000000 	.word	0x00000000

08001c30 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c34:	ed2d 8b02 	vpush	{d8}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
 8001c3e:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	f040 80cd 	bne.w	8001de4 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d004      	beq.n	8001c5c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	785b      	ldrb	r3, [r3, #1]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 80c4 	bne.w	8001de4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f7fe fc91 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c66:	a36c      	add	r3, pc, #432	; (adr r3, 8001e18 <compute_control_input+0x1e8>)
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	f7fe ff56 	bl	8000b1c <__aeabi_dcmplt>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80b6 	beq.w	8001de4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c7e:	f083 0301 	eor.w	r3, r3, #1
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 80ad 	beq.w	8001de4 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f913 	bl	8001eb6 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f000 fa15 	bl	80020c0 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001c9c:	461d      	mov	r5, r3
 8001c9e:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7fe fc6e 	bl	8000588 <__aeabi_f2d>
 8001cac:	4603      	mov	r3, r0
 8001cae:	460c      	mov	r4, r1
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4623      	mov	r3, r4
 8001cb4:	4628      	mov	r0, r5
 8001cb6:	4631      	mov	r1, r6
 8001cb8:	f7fe fcbe 	bl	8000638 <__aeabi_dmul>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	460c      	mov	r4, r1
 8001cc0:	4698      	mov	r8, r3
 8001cc2:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc5a 	bl	8000588 <__aeabi_f2d>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	4620      	mov	r0, r4
 8001cda:	4629      	mov	r1, r5
 8001cdc:	f7fe fcac 	bl	8000638 <__aeabi_dmul>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	460c      	mov	r4, r1
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4623      	mov	r3, r4
 8001ce8:	4640      	mov	r0, r8
 8001cea:	4649      	mov	r1, r9
 8001cec:	f7fe faec 	bl	80002c8 <__aeabi_dsub>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	460c      	mov	r4, r1
 8001cf4:	4698      	mov	r8, r3
 8001cf6:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7fe fc40 	bl	8000588 <__aeabi_f2d>
 8001d08:	a345      	add	r3, pc, #276	; (adr r3, 8001e20 <compute_control_input+0x1f0>)
 8001d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0e:	f7fe fadb 	bl	80002c8 <__aeabi_dsub>
 8001d12:	4602      	mov	r2, r0
 8001d14:	460b      	mov	r3, r1
 8001d16:	4620      	mov	r0, r4
 8001d18:	4629      	mov	r1, r5
 8001d1a:	f7fe fc8d 	bl	8000638 <__aeabi_dmul>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	460c      	mov	r4, r1
 8001d22:	461a      	mov	r2, r3
 8001d24:	4623      	mov	r3, r4
 8001d26:	4640      	mov	r0, r8
 8001d28:	4649      	mov	r1, r9
 8001d2a:	f7fe facd 	bl	80002c8 <__aeabi_dsub>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	460c      	mov	r4, r1
 8001d32:	4625      	mov	r5, r4
 8001d34:	461c      	mov	r4, r3
                + control_data->control_input);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7fe fc24 	bl	8000588 <__aeabi_f2d>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	4620      	mov	r0, r4
 8001d46:	4629      	mov	r1, r5
 8001d48:	f7fe fac0 	bl	80002cc <__adddf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001d50:	4618      	mov	r0, r3
 8001d52:	4621      	mov	r1, r4
 8001d54:	f7fe ff40 	bl	8000bd8 <__aeabi_d2f>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	edd3 7a00 	vldr	s15, [r3]
 8001d64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d68:	eeb0 0a67 	vmov.f32	s0, s15
 8001d6c:	f019 f8a0 	bl	801aeb0 <fminf>
 8001d70:	eef0 7a40 	vmov.f32	s15, s0
 8001d74:	eef0 0a67 	vmov.f32	s1, s15
 8001d78:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001e10 <compute_control_input+0x1e0>
 8001d7c:	f019 f87d 	bl	801ae7a <fmaxf>
 8001d80:	eef0 7a40 	vmov.f32	s15, s0
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f944 	bl	8002018 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	ed93 8a06 	vldr	s16, [r3, #24]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001da2:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001e14 <compute_control_input+0x1e4>
 8001da6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	ed93 7a07 	vldr	s14, [r3, #28]
 8001db4:	eef0 0a47 	vmov.f32	s1, s14
 8001db8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbc:	f019 f878 	bl	801aeb0 <fminf>
 8001dc0:	eef0 7a40 	vmov.f32	s15, s0
 8001dc4:	eef0 0a67 	vmov.f32	s1, s15
 8001dc8:	eeb0 0a48 	vmov.f32	s0, s16
 8001dcc:	f019 f855 	bl	801ae7a <fmaxf>
 8001dd0:	eef0 7a40 	vmov.f32	s15, s0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8001dda:	6839      	ldr	r1, [r7, #0]
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f993 	bl	8002108 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001de2:	e00d      	b.n	8001e00 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 f81f 	bl	8001e28 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d005      	beq.n	8001e00 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 f85e 	bl	8001eb6 <evaluate_polyfit>
            compute_reference_error(control_data);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f960 	bl	80020c0 <compute_reference_error>
}
 8001e00:	bf00      	nop
 8001e02:	370c      	adds	r7, #12
 8001e04:	46bd      	mov	sp, r7
 8001e06:	ecbd 8b02 	vpop	{d8}
 8001e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001e0e:	bf00      	nop
 8001e10:	00000000 	.word	0x00000000
 8001e14:	3c23d70a 	.word	0x3c23d70a
 8001e18:	9999999a 	.word	0x9999999a
 8001e1c:	3fe19999 	.word	0x3fe19999
 8001e20:	5fc549fc 	.word	0x5fc549fc
 8001e24:	3fe18a64 	.word	0x3fe18a64

08001e28 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f04f 0200 	mov.w	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ffe3 	bl	8001e28 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	f04f 0200 	mov.w	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f04f 0200 	mov.w	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f7ff fe75 	bl	8001b70 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	e00d      	b.n	8001ea8 <control_data_init+0x54>
        control_data->gains[i] = 0;
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	3305      	adds	r3, #5
 8001e92:	00db      	lsls	r3, r3, #3
 8001e94:	441a      	add	r2, r3
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	f04f 0400 	mov.w	r4, #0
 8001e9e:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	ddee      	ble.n	8001e8c <control_data_init+0x38>
    }
}
 8001eae:	bf00      	nop
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}

08001eb6 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8001eb6:	b5b0      	push	{r4, r5, r7, lr}
 8001eb8:	b08a      	sub	sp, #40	; 0x28
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 8001ebe:	f04f 0300 	mov.w	r3, #0
 8001ec2:	f04f 0400 	mov.w	r4, #0
 8001ec6:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 8001eca:	2300      	movs	r3, #0
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
 8001ece:	e00d      	b.n	8001eec <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	3305      	adds	r3, #5
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	441a      	add	r2, r3
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	f04f 0400 	mov.w	r4, #0
 8001ee2:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee8:	3301      	adds	r3, #1
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	ddee      	ble.n	8001ed0 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001ef2:	f04f 0300 	mov.w	r3, #0
 8001ef6:	f04f 0400 	mov.w	r4, #0
 8001efa:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001efe:	2300      	movs	r3, #0
 8001f00:	617b      	str	r3, [r7, #20]
 8001f02:	e07b      	b.n	8001ffc <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fb3d 	bl	8000588 <__aeabi_f2d>
 8001f0e:	4604      	mov	r4, r0
 8001f10:	460d      	mov	r5, r1
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f1c3 031e 	rsb	r3, r3, #30
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7fe fb23 	bl	8000564 <__aeabi_i2d>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	ec43 2b11 	vmov	d1, r2, r3
 8001f26:	ec45 4b10 	vmov	d0, r4, r5
 8001f2a:	f018 fff9 	bl	801af20 <pow>
 8001f2e:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	3308      	adds	r3, #8
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f4a:	f7fe fb75 	bl	8000638 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe f9b9 	bl	80002cc <__adddf3>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	3327      	adds	r3, #39	; 0x27
 8001f70:	00db      	lsls	r3, r3, #3
 8001f72:	4413      	add	r3, r2
 8001f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb5c 	bl	8000638 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4620      	mov	r0, r4
 8001f86:	4629      	mov	r1, r5
 8001f88:	f7fe f9a0 	bl	80002cc <__adddf3>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	460c      	mov	r4, r1
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	3346      	adds	r3, #70	; 0x46
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001faa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fae:	f7fe fb43 	bl	8000638 <__aeabi_dmul>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	460b      	mov	r3, r1
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f7fe f987 	bl	80002cc <__adddf3>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	460c      	mov	r4, r1
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	3365      	adds	r3, #101	; 0x65
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fd6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fda:	f7fe fb2d 	bl	8000638 <__aeabi_dmul>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	460c      	mov	r4, r1
 8001fe2:	461a      	mov	r2, r3
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fea:	f7fe f96f 	bl	80002cc <__adddf3>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	460c      	mov	r4, r1
 8001ff2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b1e      	cmp	r3, #30
 8002000:	dd80      	ble.n	8001f04 <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8002002:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002006:	f7fe fde7 	bl	8000bd8 <__aeabi_d2f>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	615a      	str	r2, [r3, #20]
}
 8002010:	bf00      	nop
 8002012:	3728      	adds	r7, #40	; 0x28
 8002014:	46bd      	mov	sp, r7
 8002016:	bdb0      	pop	{r4, r5, r7, pc}

08002018 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8002018:	b590      	push	{r4, r7, lr}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe faaf 	bl	8000588 <__aeabi_f2d>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	461a      	mov	r2, r3
 8002030:	4623      	mov	r3, r4
 8002032:	a11f      	add	r1, pc, #124	; (adr r1, 80020b0 <compute_antiwindup_boundaries+0x98>)
 8002034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002038:	f7fe f946 	bl	80002c8 <__aeabi_dsub>
 800203c:	4603      	mov	r3, r0
 800203e:	460c      	mov	r4, r1
 8002040:	4618      	mov	r0, r3
 8002042:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8002044:	a31c      	add	r3, pc, #112	; (adr r3, 80020b8 <compute_antiwindup_boundaries+0xa0>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe faf5 	bl	8000638 <__aeabi_dmul>
 800204e:	4603      	mov	r3, r0
 8002050:	460c      	mov	r4, r1
 8002052:	4618      	mov	r0, r3
 8002054:	4621      	mov	r1, r4
 8002056:	f7fe fdbf 	bl	8000bd8 <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002060:	ee00 3a10 	vmov	s0, r3
 8002064:	f018 ff09 	bl	801ae7a <fmaxf>
 8002068:	eef0 7a40 	vmov.f32	s15, s0
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe fa86 	bl	8000588 <__aeabi_f2d>
 800207c:	a30c      	add	r3, pc, #48	; (adr r3, 80020b0 <compute_antiwindup_boundaries+0x98>)
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f7fe fd69 	bl	8000b58 <__aeabi_dcmpgt>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d003      	beq.n	8002094 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f04f 0200 	mov.w	r2, #0
 8002092:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	edd3 7a07 	vldr	s15, [r3, #28]
 800209a:	eef1 7a67 	vneg.f32	s15, s15
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80020a4:	bf00      	nop
 80020a6:	370c      	adds	r7, #12
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	f3af 8000 	nop.w
 80020b0:	7d7408e8 	.word	0x7d7408e8
 80020b4:	4095e0ed 	.word	0x4095e0ed
 80020b8:	47ae147b 	.word	0x47ae147b
 80020bc:	3f747ae1 	.word	0x3f747ae1

080020c0 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	edd3 7a05 	vldr	s15, [r3, #20]
 80020ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80020d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020d6:	d504      	bpl.n	80020e2 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691a      	ldr	r2, [r3, #16]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 80020e0:	e00a      	b.n	80020f8 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	ed93 7a04 	vldr	s14, [r3, #16]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80020ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	0000      	movs	r0, r0
	...

08002108 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe fa36 	bl	8000588 <__aeabi_f2d>
 800211c:	a30c      	add	r3, pc, #48	; (adr r3, 8002150 <check_apogee_approach_phase+0x48>)
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f7fe fcfb 	bl	8000b1c <__aeabi_dcmplt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d005      	beq.n	8002138 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	8c1b      	ldrh	r3, [r3, #32]
 8002130:	3301      	adds	r3, #1
 8002132:	b29a      	uxth	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	8c1b      	ldrh	r3, [r3, #32]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d903      	bls.n	8002148 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2201      	movs	r2, #1
 8002144:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	9999999a 	.word	0x9999999a
 8002154:	3fb99999 	.word	0x3fb99999

08002158 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8002160:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8002164:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002180 <init_env+0x28>
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f80d 	bl	8002188 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 800216e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f82c 	bl	80021d0 <update_env>
}
 8002178:	bf00      	nop
 800217a:	3708      	adds	r7, #8
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	47c5e680 	.word	0x47c5e680
 8002184:	00000000 	.word	0x00000000

08002188 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8002188:	b590      	push	{r4, r7, lr}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	ed87 0a02 	vstr	s0, [r7, #8]
 8002194:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7fe f9f5 	bl	8000588 <__aeabi_f2d>
 800219e:	a30a      	add	r3, pc, #40	; (adr r3, 80021c8 <calibrate_env+0x40>)
 80021a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a4:	f7fe f892 	bl	80002cc <__adddf3>
 80021a8:	4603      	mov	r3, r0
 80021aa:	460c      	mov	r4, r1
 80021ac:	4618      	mov	r0, r3
 80021ae:	4621      	mov	r1, r4
 80021b0:	f7fe fd12 	bl	8000bd8 <__aeabi_d2f>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	601a      	str	r2, [r3, #0]
}
 80021c0:	bf00      	nop
 80021c2:	3714      	adds	r7, #20
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd90      	pop	{r4, r7, pc}
 80021c8:	66666666 	.word	0x66666666
 80021cc:	40711266 	.word	0x40711266

080021d0 <update_env>:

void update_env(env_t *env, float T) {
 80021d0:	b590      	push	{r4, r7, lr}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 80021dc:	6838      	ldr	r0, [r7, #0]
 80021de:	f7fe f9d3 	bl	8000588 <__aeabi_f2d>
 80021e2:	a317      	add	r3, pc, #92	; (adr r3, 8002240 <update_env+0x70>)
 80021e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021e8:	f7fe f870 	bl	80002cc <__adddf3>
 80021ec:	4603      	mov	r3, r0
 80021ee:	460c      	mov	r4, r1
 80021f0:	4618      	mov	r0, r3
 80021f2:	4621      	mov	r1, r4
 80021f4:	f7fe fcf0 	bl	8000bd8 <__aeabi_d2f>
 80021f8:	4602      	mov	r2, r0
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe f9c0 	bl	8000588 <__aeabi_f2d>
 8002208:	a30f      	add	r3, pc, #60	; (adr r3, 8002248 <update_env+0x78>)
 800220a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800220e:	f7fe fa13 	bl	8000638 <__aeabi_dmul>
 8002212:	4603      	mov	r3, r0
 8002214:	460c      	mov	r4, r1
 8002216:	4618      	mov	r0, r3
 8002218:	4621      	mov	r1, r4
 800221a:	f7fe fcdd 	bl	8000bd8 <__aeabi_d2f>
 800221e:	4603      	mov	r3, r0
 8002220:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002224:	ee00 3a10 	vmov	s0, r3
 8002228:	f019 f844 	bl	801b2b4 <powf>
 800222c:	eef0 7a40 	vmov.f32	s15, s0
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	bd90      	pop	{r4, r7, pc}
 800223e:	bf00      	nop
 8002240:	66666666 	.word	0x66666666
 8002244:	40711266 	.word	0x40711266
 8002248:	8c1557b7 	.word	0x8c1557b7
 800224c:	40791e2f 	.word	0x40791e2f

08002250 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 800225c:	edd7 7a00 	vldr	s15, [r7]
 8002260:	eef0 6ae7 	vabs.f32	s13, s15
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	ed93 7a03 	vldr	s14, [r3, #12]
 800226a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800226e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	ee07 3a90 	vmov	s15, r3
}
 8002278:	eeb0 0a67 	vmov.f32	s0, s15
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
	...

08002288 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8002288:	b5b0      	push	{r4, r5, r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8002296:	2300      	movs	r3, #0
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	e043      	b.n	8002324 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	781b      	ldrb	r3, [r3, #0]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d03a      	beq.n	800231e <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f96b 	bl	8000588 <__aeabi_f2d>
 80022b2:	a322      	add	r3, pc, #136	; (adr r3, 800233c <pressure2altitudeAGL+0xb4>)
 80022b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022b8:	f7fe fae8 	bl	800088c <__aeabi_ddiv>
 80022bc:	4603      	mov	r3, r0
 80022be:	460c      	mov	r4, r1
 80022c0:	4625      	mov	r5, r4
 80022c2:	461c      	mov	r4, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	4413      	add	r3, r2
 80022cc:	ed93 7a00 	vldr	s14, [r3]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022da:	eddf 0a17 	vldr	s1, [pc, #92]	; 8002338 <pressure2altitudeAGL+0xb0>
 80022de:	eeb0 0a66 	vmov.f32	s0, s13
 80022e2:	f018 ffe7 	bl	801b2b4 <powf>
 80022e6:	eeb0 7a40 	vmov.f32	s14, s0
 80022ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022f2:	ee17 0a90 	vmov	r0, s15
 80022f6:	f7fe f947 	bl	8000588 <__aeabi_f2d>
 80022fa:	4602      	mov	r2, r0
 80022fc:	460b      	mov	r3, r1
 80022fe:	4620      	mov	r0, r4
 8002300:	4629      	mov	r1, r5
 8002302:	f7fe f999 	bl	8000638 <__aeabi_dmul>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	4618      	mov	r0, r3
 800230c:	4621      	mov	r1, r4
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002314:	18d4      	adds	r4, r2, r3
 8002316:	f7fe fc5f 	bl	8000bd8 <__aeabi_d2f>
 800231a:	4603      	mov	r3, r0
 800231c:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	3301      	adds	r3, #1
 8002322:	617b      	str	r3, [r7, #20]
 8002324:	697a      	ldr	r2, [r7, #20]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	429a      	cmp	r2, r3
 800232a:	dbb7      	blt.n	800229c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 800232c:	bf00      	nop
 800232e:	3718      	adds	r7, #24
 8002330:	46bd      	mov	sp, r7
 8002332:	bdb0      	pop	{r4, r5, r7, pc}
 8002334:	f3af 8000 	nop.w
 8002338:	3e42c4dc 	.word	0x3e42c4dc
 800233c:	76c8b439 	.word	0x76c8b439
 8002340:	3f7a9fbe 	.word	0x3f7a9fbe
 8002344:	00000000 	.word	0x00000000

08002348 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8002348:	b5b0      	push	{r4, r5, r7, lr}
 800234a:	ed2d 8b02 	vpush	{d8}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	60f8      	str	r0, [r7, #12]
 8002354:	60b9      	str	r1, [r7, #8]
 8002356:	607a      	str	r2, [r7, #4]
 8002358:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
 800235e:	e047      	b.n	80023f0 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	683a      	ldr	r2, [r7, #0]
 8002364:	4413      	add	r3, r2
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d03e      	beq.n	80023ea <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	ed93 8a00 	vldr	s16, [r3]
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	4413      	add	r3, r2
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f903 	bl	8000588 <__aeabi_f2d>
 8002382:	a323      	add	r3, pc, #140	; (adr r3, 8002410 <altitudeAGL2pressure+0xc8>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fe f956 	bl	8000638 <__aeabi_dmul>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4625      	mov	r5, r4
 8002392:	461c      	mov	r4, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	4618      	mov	r0, r3
 800239a:	f7fe f8f5 	bl	8000588 <__aeabi_f2d>
 800239e:	4602      	mov	r2, r0
 80023a0:	460b      	mov	r3, r1
 80023a2:	4620      	mov	r0, r4
 80023a4:	4629      	mov	r1, r5
 80023a6:	f7fe fa71 	bl	800088c <__aeabi_ddiv>
 80023aa:	4603      	mov	r3, r0
 80023ac:	460c      	mov	r4, r1
 80023ae:	461a      	mov	r2, r3
 80023b0:	4623      	mov	r3, r4
 80023b2:	f04f 0000 	mov.w	r0, #0
 80023b6:	4914      	ldr	r1, [pc, #80]	; (8002408 <altitudeAGL2pressure+0xc0>)
 80023b8:	f7fd ff86 	bl	80002c8 <__aeabi_dsub>
 80023bc:	4603      	mov	r3, r0
 80023be:	460c      	mov	r4, r1
 80023c0:	4618      	mov	r0, r3
 80023c2:	4621      	mov	r1, r4
 80023c4:	f7fe fc08 	bl	8000bd8 <__aeabi_d2f>
 80023c8:	4603      	mov	r3, r0
 80023ca:	eddf 0a10 	vldr	s1, [pc, #64]	; 800240c <altitudeAGL2pressure+0xc4>
 80023ce:	ee00 3a10 	vmov	s0, r3
 80023d2:	f018 ff6f 	bl	801b2b4 <powf>
 80023d6:	eef0 7a40 	vmov.f32	s15, s0
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023e0:	4413      	add	r3, r2
 80023e2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023e6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	3301      	adds	r3, #1
 80023ee:	617b      	str	r3, [r7, #20]
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	dbb3      	blt.n	8002360 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80023f8:	bf00      	nop
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	ecbd 8b02 	vpop	{d8}
 8002402:	bdb0      	pop	{r4, r5, r7, pc}
 8002404:	f3af 8000 	nop.w
 8002408:	3ff00000 	.word	0x3ff00000
 800240c:	40a83d87 	.word	0x40a83d87
 8002410:	76c8b439 	.word	0x76c8b439
 8002414:	3f7a9fbe 	.word	0x3f7a9fbe

08002418 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4618      	mov	r0, r3
 800242a:	f7fe f8ad 	bl	8000588 <__aeabi_f2d>
 800242e:	a323      	add	r3, pc, #140	; (adr r3, 80024bc <altitude_gradient+0xa4>)
 8002430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002434:	f7fe f900 	bl	8000638 <__aeabi_dmul>
 8002438:	4603      	mov	r3, r0
 800243a:	460c      	mov	r4, r1
 800243c:	4625      	mov	r5, r4
 800243e:	461c      	mov	r4, r3
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe f89f 	bl	8000588 <__aeabi_f2d>
 800244a:	a31e      	add	r3, pc, #120	; (adr r3, 80024c4 <altitude_gradient+0xac>)
 800244c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002450:	f7fe f8f2 	bl	8000638 <__aeabi_dmul>
 8002454:	4602      	mov	r2, r0
 8002456:	460b      	mov	r3, r1
 8002458:	4620      	mov	r0, r4
 800245a:	4629      	mov	r1, r5
 800245c:	f7fe fa16 	bl	800088c <__aeabi_ddiv>
 8002460:	4603      	mov	r3, r0
 8002462:	460c      	mov	r4, r1
 8002464:	4625      	mov	r5, r4
 8002466:	461c      	mov	r4, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	edd3 7a00 	vldr	s15, [r3]
 800246e:	ed97 7a00 	vldr	s14, [r7]
 8002472:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002476:	eddf 0a10 	vldr	s1, [pc, #64]	; 80024b8 <altitude_gradient+0xa0>
 800247a:	eeb0 0a66 	vmov.f32	s0, s13
 800247e:	f018 ff19 	bl	801b2b4 <powf>
 8002482:	ee10 3a10 	vmov	r3, s0
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe f87e 	bl	8000588 <__aeabi_f2d>
 800248c:	4602      	mov	r2, r0
 800248e:	460b      	mov	r3, r1
 8002490:	4620      	mov	r0, r4
 8002492:	4629      	mov	r1, r5
 8002494:	f7fe f8d0 	bl	8000638 <__aeabi_dmul>
 8002498:	4603      	mov	r3, r0
 800249a:	460c      	mov	r4, r1
 800249c:	4618      	mov	r0, r3
 800249e:	4621      	mov	r1, r4
 80024a0:	f7fe fb9a 	bl	8000bd8 <__aeabi_d2f>
 80024a4:	4603      	mov	r3, r0
 80024a6:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	ee07 3a90 	vmov	s15, r3
}
 80024ae:	eeb0 0a67 	vmov.f32	s0, s15
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bdb0      	pop	{r4, r5, r7, pc}
 80024b8:	bf4f4ec9 	.word	0xbf4f4ec9
 80024bc:	640f3ea7 	.word	0x640f3ea7
 80024c0:	c071f0fd 	.word	0xc071f0fd
 80024c4:	51eb851f 	.word	0x51eb851f
 80024c8:	40239eb8 	.word	0x40239eb8
 80024cc:	00000000 	.word	0x00000000

080024d0 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	2b04      	cmp	r3, #4
 80024e4:	f200 80a6 	bhi.w	8002634 <detect_flight_phase+0x164>
 80024e8:	a201      	add	r2, pc, #4	; (adr r2, 80024f0 <detect_flight_phase+0x20>)
 80024ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ee:	bf00      	nop
 80024f0:	08002505 	.word	0x08002505
 80024f4:	08002635 	.word	0x08002635
 80024f8:	08002553 	.word	0x08002553
 80024fc:	0800259d 	.word	0x0800259d
 8002500:	080025e7 	.word	0x080025e7
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002510:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80026d0 <detect_flight_phase+0x200>
 8002514:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002518:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800251c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002524:	dc00      	bgt.n	8002528 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002526:	e087      	b.n	8002638 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	b2db      	uxtb	r3, r3
 8002534:	b25a      	sxtb	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002540:	2b03      	cmp	r3, #3
 8002542:	dd79      	ble.n	8002638 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2203      	movs	r2, #3
 8002548:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2200      	movs	r2, #0
 800254e:	721a      	strb	r2, [r3, #8]
        break;
 8002550:	e072      	b.n	8002638 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	699b      	ldr	r3, [r3, #24]
 8002556:	ee07 3a90 	vmov	s15, r3
 800255a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800255e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 80026d0 <detect_flight_phase+0x200>
 8002562:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002566:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d400      	bmi.n	8002572 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002570:	e064      	b.n	800263c <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002578:	b2db      	uxtb	r3, r3
 800257a:	3301      	adds	r3, #1
 800257c:	b2db      	uxtb	r3, r3
 800257e:	b25a      	sxtb	r2, r3
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800258a:	2b03      	cmp	r3, #3
 800258c:	dd56      	ble.n	800263c <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2204      	movs	r2, #4
 8002592:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2200      	movs	r2, #0
 8002598:	721a      	strb	r2, [r3, #8]
        break;
 800259a:	e04f      	b.n	800263c <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a0:	ee07 3a90 	vmov	s15, r3
 80025a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a8:	eddf 6a49 	vldr	s13, [pc, #292]	; 80026d0 <detect_flight_phase+0x200>
 80025ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80025b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025b8:	d400      	bmi.n	80025bc <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80025ba:	e041      	b.n	8002640 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	b25a      	sxtb	r2, r3
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	dd33      	ble.n	8002640 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	2205      	movs	r2, #5
 80025dc:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2200      	movs	r2, #0
 80025e2:	721a      	strb	r2, [r3, #8]
        break;
 80025e4:	e02c      	b.n	8002640 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025f2:	eddf 6a37 	vldr	s13, [pc, #220]	; 80026d0 <detect_flight_phase+0x200>
 80025f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025fa:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80025fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002606:	d400      	bmi.n	800260a <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002608:	e01c      	b.n	8002644 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002610:	b2db      	uxtb	r3, r3
 8002612:	3301      	adds	r3, #1
 8002614:	b2db      	uxtb	r3, r3
 8002616:	b25a      	sxtb	r2, r3
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002622:	2b03      	cmp	r3, #3
 8002624:	dd0e      	ble.n	8002644 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2206      	movs	r2, #6
 800262a:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	721a      	strb	r2, [r3, #8]
        break;
 8002632:	e007      	b.n	8002644 <detect_flight_phase+0x174>

        default:
        break;
 8002634:	bf00      	nop
 8002636:	e006      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 8002638:	bf00      	nop
 800263a:	e004      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 800263c:	bf00      	nop
 800263e:	e002      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 8002640:	bf00      	nop
 8002642:	e000      	b.n	8002646 <detect_flight_phase+0x176>
        break;
 8002644:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002652:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80026d0 <detect_flight_phase+0x200>
 8002656:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800265a:	eeb0 0a66 	vmov.f32	s0, s13
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f7ff fdf6 	bl	8002250 <mach_number>
 8002664:	eef0 7a40 	vmov.f32	s15, s0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	685b      	ldr	r3, [r3, #4]
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd ff88 	bl	8000588 <__aeabi_f2d>
 8002678:	a311      	add	r3, pc, #68	; (adr r3, 80026c0 <detect_flight_phase+0x1f0>)
 800267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800267e:	f7fe fa61 	bl	8000b44 <__aeabi_dcmpge>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2203      	movs	r2, #3
 800268c:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 800268e:	e013      	b.n	80026b8 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff77 	bl	8000588 <__aeabi_f2d>
 800269a:	a30b      	add	r3, pc, #44	; (adr r3, 80026c8 <detect_flight_phase+0x1f8>)
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f7fe fa50 	bl	8000b44 <__aeabi_dcmpge>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d003      	beq.n	80026b2 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2202      	movs	r2, #2
 80026ae:	705a      	strb	r2, [r3, #1]
}
 80026b0:	e002      	b.n	80026b8 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	705a      	strb	r2, [r3, #1]
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	cccccccd 	.word	0xcccccccd
 80026c4:	3ff4cccc 	.word	0x3ff4cccc
 80026c8:	9999999a 	.word	0x9999999a
 80026cc:	3fe99999 	.word	0x3fe99999
 80026d0:	447a0000 	.word	0x447a0000

080026d4 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2201      	movs	r2, #1
 80026e0:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f04f 0200 	mov.w	r2, #0
 80026ee:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	721a      	strb	r2, [r3, #8]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
	...

08002704 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 8002704:	b5b0      	push	{r4, r5, r7, lr}
 8002706:	b0b0      	sub	sp, #192	; 0xc0
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 800270c:	4b45      	ldr	r3, [pc, #276]	; (8002824 <reset_kf_state+0x120>)
 800270e:	f107 040c 	add.w	r4, r7, #12
 8002712:	461d      	mov	r5, r3
 8002714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002718:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800271a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800271c:	682b      	ldr	r3, [r5, #0]
 800271e:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 8002720:	4a41      	ldr	r2, [pc, #260]	; (8002828 <reset_kf_state+0x124>)
 8002722:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002726:	ca07      	ldmia	r2, {r0, r1, r2}
 8002728:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 800272c:	4a3e      	ldr	r2, [pc, #248]	; (8002828 <reset_kf_state+0x124>)
 800272e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002732:	ca07      	ldmia	r2, {r0, r1, r2}
 8002734:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f107 010c 	add.w	r1, r7, #12
 800273e:	2224      	movs	r2, #36	; 0x24
 8002740:	4618      	mov	r0, r3
 8002742:	f017 ff77 	bl	801a634 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	3348      	adds	r3, #72	; 0x48
 800274a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800274e:	220c      	movs	r2, #12
 8002750:	4618      	mov	r0, r3
 8002752:	f017 ff6f 	bl	801a634 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	3354      	adds	r3, #84	; 0x54
 800275a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800275e:	220c      	movs	r2, #12
 8002760:	4618      	mov	r0, r3
 8002762:	f017 ff67 	bl	801a634 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800276e:	f04f 0300 	mov.w	r3, #0
 8002772:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <reset_kf_state+0x128>)
 8002780:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002784:	461d      	mov	r5, r3
 8002786:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002788:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800278c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800278e:	682b      	ldr	r3, [r5, #0]
 8002790:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002798:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800279c:	220c      	movs	r2, #12
 800279e:	4618      	mov	r0, r3
 80027a0:	f017 ff48 	bl	801a634 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 80027aa:	f107 0190 	add.w	r1, r7, #144	; 0x90
 80027ae:	2224      	movs	r2, #36	; 0x24
 80027b0:	4618      	mov	r0, r3
 80027b2:	f017 ff3f 	bl	801a634 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	33b4      	adds	r3, #180	; 0xb4
 80027ba:	2204      	movs	r2, #4
 80027bc:	2100      	movs	r1, #0
 80027be:	4618      	mov	r0, r3
 80027c0:	f017 ff43 	bl	801a64a <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	33b8      	adds	r3, #184	; 0xb8
 80027c8:	2224      	movs	r2, #36	; 0x24
 80027ca:	2100      	movs	r1, #0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f017 ff3c 	bl	801a64a <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80027d8:	220c      	movs	r2, #12
 80027da:	2100      	movs	r1, #0
 80027dc:	4618      	mov	r0, r3
 80027de:	f017 ff34 	bl	801a64a <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80027e8:	2203      	movs	r2, #3
 80027ea:	2100      	movs	r1, #0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f017 ff2c 	bl	801a64a <memset>
    kf_state->num_z_active = 0;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	3324      	adds	r3, #36	; 0x24
 8002800:	2103      	movs	r1, #3
 8002802:	2003      	movs	r0, #3
 8002804:	f000 fd40 	bl	8003288 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f103 0254 	add.w	r2, r3, #84	; 0x54
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3360      	adds	r3, #96	; 0x60
 8002812:	2101      	movs	r1, #1
 8002814:	2003      	movs	r0, #3
 8002816:	f000 fd37 	bl	8003288 <transpose>
}
 800281a:	bf00      	nop
 800281c:	37c0      	adds	r7, #192	; 0xc0
 800281e:	46bd      	mov	sp, r7
 8002820:	bdb0      	pop	{r4, r5, r7, pc}
 8002822:	bf00      	nop
 8002824:	0801cf20 	.word	0x0801cf20
 8002828:	0801cf44 	.word	0x0801cf44
 800282c:	0801cf50 	.word	0x0801cf50

08002830 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af04      	add	r7, sp, #16
 8002836:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 8002838:	6879      	ldr	r1, [r7, #4]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002846:	2201      	movs	r2, #1
 8002848:	9201      	str	r2, [sp, #4]
 800284a:	9300      	str	r3, [sp, #0]
 800284c:	4603      	mov	r3, r0
 800284e:	460a      	mov	r2, r1
 8002850:	2103      	movs	r1, #3
 8002852:	2003      	movs	r0, #3
 8002854:	f000 ff42 	bl	80036dc <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800286a:	2200      	movs	r2, #0
 800286c:	9201      	str	r2, [sp, #4]
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	4603      	mov	r3, r0
 8002872:	460a      	mov	r2, r1
 8002874:	2101      	movs	r1, #1
 8002876:	2003      	movs	r0, #3
 8002878:	f000 ff30 	bl	80036dc <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	f502 7205 	add.w	r2, r2, #532	; 0x214
 800288a:	2101      	movs	r1, #1
 800288c:	9102      	str	r1, [sp, #8]
 800288e:	9201      	str	r2, [sp, #4]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4603      	mov	r3, r0
 8002894:	2203      	movs	r2, #3
 8002896:	2103      	movs	r1, #3
 8002898:	2003      	movs	r0, #3
 800289a:	f000 fe85 	bl	80035a8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	33b4      	adds	r3, #180	; 0xb4
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	f502 720e 	add.w	r2, r2, #568	; 0x238
 80028ae:	2101      	movs	r1, #1
 80028b0:	9102      	str	r1, [sp, #8]
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4603      	mov	r3, r0
 80028b8:	2201      	movs	r2, #1
 80028ba:	2101      	movs	r1, #1
 80028bc:	2003      	movs	r0, #3
 80028be:	f000 fe73 	bl	80035a8 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f503 7005 	add.w	r0, r3, #532	; 0x214
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	3324      	adds	r3, #36	; 0x24
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80028d2:	2101      	movs	r1, #1
 80028d4:	9102      	str	r1, [sp, #8]
 80028d6:	9201      	str	r2, [sp, #4]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	4603      	mov	r3, r0
 80028dc:	2203      	movs	r2, #3
 80028de:	2103      	movs	r1, #3
 80028e0:	2003      	movs	r0, #3
 80028e2:	f000 fe61 	bl	80035a8 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f503 700e 	add.w	r0, r3, #568	; 0x238
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3360      	adds	r3, #96	; 0x60
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80028f6:	2100      	movs	r1, #0
 80028f8:	9102      	str	r1, [sp, #8]
 80028fa:	9201      	str	r2, [sp, #4]
 80028fc:	9300      	str	r3, [sp, #0]
 80028fe:	4603      	mov	r3, r0
 8002900:	2203      	movs	r2, #3
 8002902:	2101      	movs	r1, #1
 8002904:	2003      	movs	r0, #3
 8002906:	f000 fe4f 	bl	80035a8 <matmul>
}
 800290a:	bf00      	nop
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 8002912:	b580      	push	{r7, lr}
 8002914:	b084      	sub	sp, #16
 8002916:	af00      	add	r7, sp, #0
 8002918:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	336c      	adds	r3, #108	; 0x6c
 800291e:	2224      	movs	r2, #36	; 0x24
 8002920:	2100      	movs	r1, #0
 8002922:	4618      	mov	r0, r3
 8002924:	f017 fe91 	bl	801a64a <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002928:	2300      	movs	r3, #0
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e01e      	b.n	800296c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00b      	beq.n	8002956 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	336c      	adds	r3, #108	; 0x6c
 800294e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002952:	601a      	str	r2, [r3, #0]
 8002954:	e007      	b.n	8002966 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	4413      	add	r3, r2
 800295e:	33b8      	adds	r3, #184	; 0xb8
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3301      	adds	r3, #1
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b02      	cmp	r3, #2
 8002970:	dddd      	ble.n	800292e <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3390      	adds	r3, #144	; 0x90
 800297c:	2103      	movs	r1, #3
 800297e:	2003      	movs	r0, #3
 8002980:	f000 fc82 	bl	8003288 <transpose>
}
 8002984:	bf00      	nop
 8002986:	3710      	adds	r7, #16
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <kf_update>:

void kf_update(kf_state_t *kf_state) {
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af04      	add	r7, sp, #16
 8002992:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f503 709a 	add.w	r0, r3, #308	; 0x134
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80029a6:	2201      	movs	r2, #1
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	4603      	mov	r3, r0
 80029ae:	460a      	mov	r2, r1
 80029b0:	2103      	movs	r1, #3
 80029b2:	2003      	movs	r0, #3
 80029b4:	f000 fe92 	bl	80036dc <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 80029ca:	2003      	movs	r0, #3
 80029cc:	f000 fcdb 	bl	8003386 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	f502 7211 	add.w	r2, r2, #580	; 0x244
 80029e2:	2101      	movs	r1, #1
 80029e4:	9102      	str	r1, [sp, #8]
 80029e6:	9201      	str	r2, [sp, #4]
 80029e8:	9300      	str	r3, [sp, #0]
 80029ea:	4603      	mov	r3, r0
 80029ec:	2203      	movs	r2, #3
 80029ee:	2103      	movs	r1, #3
 80029f0:	2003      	movs	r0, #3
 80029f2:	f000 fdd9 	bl	80035a8 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f503 7011 	add.w	r0, r3, #580	; 0x244
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	3390      	adds	r3, #144	; 0x90
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 8002a06:	2101      	movs	r1, #1
 8002a08:	9102      	str	r1, [sp, #8]
 8002a0a:	9201      	str	r2, [sp, #4]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	4603      	mov	r3, r0
 8002a10:	2203      	movs	r2, #3
 8002a12:	2103      	movs	r1, #3
 8002a14:	2003      	movs	r0, #3
 8002a16:	f000 fdc7 	bl	80035a8 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	460b      	mov	r3, r1
 8002a30:	2103      	movs	r1, #3
 8002a32:	2003      	movs	r0, #3
 8002a34:	f000 fcd2 	bl	80033dc <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a3e:	2224      	movs	r2, #36	; 0x24
 8002a40:	2100      	movs	r1, #0
 8002a42:	4618      	mov	r0, r3
 8002a44:	f017 fe01 	bl	801a64a <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a54:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002b64 <kf_update+0x1d8>
 8002a58:	461a      	mov	r2, r3
 8002a5a:	2003      	movs	r0, #3
 8002a5c:	f001 f80a 	bl	8003a74 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	3390      	adds	r3, #144	; 0x90
 8002a6a:	687a      	ldr	r2, [r7, #4]
 8002a6c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8002a70:	2101      	movs	r1, #1
 8002a72:	9102      	str	r1, [sp, #8]
 8002a74:	9201      	str	r2, [sp, #4]
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	4603      	mov	r3, r0
 8002a7a:	2203      	movs	r2, #3
 8002a7c:	2103      	movs	r1, #3
 8002a7e:	2003      	movs	r0, #3
 8002a80:	f000 fd92 	bl	80035a8 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8002a96:	2101      	movs	r1, #1
 8002a98:	9102      	str	r1, [sp, #8]
 8002a9a:	9201      	str	r2, [sp, #4]
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2203      	movs	r2, #3
 8002aa2:	2103      	movs	r1, #3
 8002aa4:	2003      	movs	r0, #3
 8002aa6:	f000 fd7f 	bl	80035a8 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002abc:	2201      	movs	r2, #1
 8002abe:	9201      	str	r2, [sp, #4]
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	460a      	mov	r2, r1
 8002ac6:	2103      	movs	r1, #3
 8002ac8:	2003      	movs	r0, #3
 8002aca:	f000 fe07 	bl	80036dc <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002ae0:	2003      	movs	r0, #3
 8002ae2:	f000 fc25 	bl	8003330 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002aec:	4619      	mov	r1, r3
 8002aee:	2003      	movs	r0, #3
 8002af0:	f000 fb7e 	bl	80031f0 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	336c      	adds	r3, #108	; 0x6c
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002b04:	2101      	movs	r1, #1
 8002b06:	9102      	str	r1, [sp, #8]
 8002b08:	9201      	str	r2, [sp, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2203      	movs	r2, #3
 8002b10:	2103      	movs	r1, #3
 8002b12:	2003      	movs	r0, #3
 8002b14:	f000 fd48 	bl	80035a8 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002b2a:	9300      	str	r3, [sp, #0]
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	2103      	movs	r1, #3
 8002b30:	2003      	movs	r0, #3
 8002b32:	f000 fcc6 	bl	80034c2 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002b48:	2101      	movs	r1, #1
 8002b4a:	9102      	str	r1, [sp, #8]
 8002b4c:	9201      	str	r2, [sp, #4]
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	4603      	mov	r3, r0
 8002b52:	2203      	movs	r2, #3
 8002b54:	2103      	movs	r1, #3
 8002b56:	2003      	movs	r0, #3
 8002b58:	f000 fd26 	bl	80035a8 <matmul>
}
 8002b5c:	bf00      	nop
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	38d1b717 	.word	0x38d1b717

08002b68 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002b78:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002c00 <update_state_est_data+0x98>
 8002b7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b84:	ee17 2a90 	vmov	r2, s15
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002b92:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002c00 <update_state_est_data+0x98>
 8002b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b9e:	ee17 2a90 	vmov	r2, s15
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002bac:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002c00 <update_state_est_data+0x98>
 8002bb0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bb8:	ee17 2a90 	vmov	r2, s15
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002bc6:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002c00 <update_state_est_data+0x98>
 8002bca:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bd2:	ee17 2a90 	vmov	r2, s15
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002be0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002c00 <update_state_est_data+0x98>
 8002be4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bec:	ee17 2a90 	vmov	r2, s15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	447a0000 	.word	0x447a0000
 8002c04:	00000000 	.word	0x00000000

08002c08 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002c08:	b590      	push	{r4, r7, lr}
 8002c0a:	b095      	sub	sp, #84	; 0x54
 8002c0c:	af02      	add	r7, sp, #8
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002c16:	2300      	movs	r3, #0
 8002c18:	647b      	str	r3, [r7, #68]	; 0x44
 8002c1a:	e09a      	b.n	8002d52 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c20:	4613      	mov	r3, r2
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	4413      	add	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3308      	adds	r3, #8
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	6838      	ldr	r0, [r7, #0]
 8002c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4403      	add	r3, r0
 8002c3c:	3308      	adds	r3, #8
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4299      	cmp	r1, r3
 8002c42:	d92b      	bls.n	8002c9c <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68b9      	ldr	r1, [r7, #8]
 8002c56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c58:	3362      	adds	r3, #98	; 0x62
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002c60:	68ba      	ldr	r2, [r7, #8]
 8002c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c64:	4413      	add	r3, r2
 8002c66:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8002c6e:	6879      	ldr	r1, [r7, #4]
 8002c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c72:	4613      	mov	r3, r2
 8002c74:	005b      	lsls	r3, r3, #1
 8002c76:	4413      	add	r3, r2
 8002c78:	009b      	lsls	r3, r3, #2
 8002c7a:	440b      	add	r3, r1
 8002c7c:	3304      	adds	r3, #4
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002c88:	440b      	add	r3, r1
 8002c8a:	3b24      	subs	r3, #36	; 0x24
 8002c8c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8002c8e:	f107 0220 	add.w	r2, r7, #32
 8002c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c94:	4413      	add	r3, r2
 8002c96:	2201      	movs	r2, #1
 8002c98:	701a      	strb	r2, [r3, #0]
 8002c9a:	e01d      	b.n	8002cd8 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 8002c9c:	68ba      	ldr	r2, [r7, #8]
 8002c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca0:	3362      	adds	r3, #98	; 0x62
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	f04f 0200 	mov.w	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb0:	4413      	add	r3, r2
 8002cb2:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8002cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b24      	subs	r3, #36	; 0x24
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8002ccc:	f107 0220 	add.w	r2, r7, #32
 8002cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	333c      	adds	r3, #60	; 0x3c
 8002ce8:	6819      	ldr	r1, [r3, #0]
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cee:	4613      	mov	r3, r2
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4403      	add	r3, r0
 8002cf8:	333c      	adds	r3, #60	; 0x3c
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4299      	cmp	r1, r3
 8002cfe:	d916      	bls.n	8002d2e <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3330      	adds	r3, #48	; 0x30
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002d1a:	440b      	add	r3, r1
 8002d1c:	3b34      	subs	r3, #52	; 0x34
 8002d1e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002d20:	f107 0210 	add.w	r2, r7, #16
 8002d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d26:	4413      	add	r3, r2
 8002d28:	2201      	movs	r2, #1
 8002d2a:	701a      	strb	r2, [r3, #0]
 8002d2c:	e00e      	b.n	8002d4c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 8002d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002d36:	4413      	add	r3, r2
 8002d38:	3b34      	subs	r3, #52	; 0x34
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002d40:	f107 0210 	add.w	r2, r7, #16
 8002d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d46:	4413      	add	r3, r2
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002d4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d4e:	3301      	adds	r3, #1
 8002d50:	647b      	str	r3, [r7, #68]	; 0x44
 8002d52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f77f af61 	ble.w	8002c1c <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8002d5a:	68bb      	ldr	r3, [r7, #8]
 8002d5c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002d66:	461a      	mov	r2, r3
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f000 f96d 	bl	8003048 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8002d6e:	f107 0220 	add.w	r2, r7, #32
 8002d72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d76:	4619      	mov	r1, r3
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f000 f965 	bl	8003048 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8002d7e:	f107 0210 	add.w	r2, r7, #16
 8002d82:	f107 0314 	add.w	r3, r7, #20
 8002d86:	4619      	mov	r1, r3
 8002d88:	2003      	movs	r0, #3
 8002d8a:	f000 f95d 	bl	8003048 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int num_acc_x_meas_active = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	643b      	str	r3, [r7, #64]	; 0x40

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8002da0:	f04f 0300 	mov.w	r3, #0
 8002da4:	63bb      	str	r3, [r7, #56]	; 0x38
    int num_temp_meas_active = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	637b      	str	r3, [r7, #52]	; 0x34

    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002daa:	2300      	movs	r3, #0
 8002dac:	633b      	str	r3, [r7, #48]	; 0x30
 8002dae:	e047      	b.n	8002e40 <process_measurements+0x238>
        if (kf_state->z_active[i]){
 8002db0:	68ba      	ldr	r2, [r7, #8]
 8002db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db4:	4413      	add	r3, r2
 8002db6:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d006      	beq.n	8002dce <process_measurements+0x1c6>
            kf_state->num_z_active += 1;
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002dce:	f107 0210 	add.w	r2, r7, #16
 8002dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd4:	4413      	add	r3, r2
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d010      	beq.n	8002dfe <process_measurements+0x1f6>
            u += acc_x_meas[i];
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002de4:	4413      	add	r3, r2
 8002de6:	3b34      	subs	r3, #52	; 0x34
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_acc_x_meas_active += 1;
 8002df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8002dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e06:	4413      	add	r3, r2
 8002e08:	3b24      	subs	r3, #36	; 0x24
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e16:	d010      	beq.n	8002e3a <process_measurements+0x232>
            temp_meas_mean += temp_meas[i];
 8002e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002e20:	4413      	add	r3, r2
 8002e22:	3b24      	subs	r3, #36	; 0x24
 8002e24:	edd3 7a00 	vldr	s15, [r3]
 8002e28:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e30:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            num_temp_meas_active += 1;
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	3301      	adds	r3, #1
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	ddb4      	ble.n	8002db0 <process_measurements+0x1a8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	460b      	mov	r3, r1
 8002e5c:	2103      	movs	r1, #3
 8002e5e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e60:	f7ff fa12 	bl	8002288 <pressure2altitudeAGL>

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8002e64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dd1c      	ble.n	8002ea4 <process_measurements+0x29c>
        u /= num_acc_x_meas_active;
 8002e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e74:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e7c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        /* gravity compensation for accelerometer */
        kf_state->u[0] = u - GRAVITATION;
 8002e80:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e82:	f7fd fb81 	bl	8000588 <__aeabi_f2d>
 8002e86:	a314      	add	r3, pc, #80	; (adr r3, 8002ed8 <process_measurements+0x2d0>)
 8002e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e8c:	f7fd fa1c 	bl	80002c8 <__aeabi_dsub>
 8002e90:	4603      	mov	r3, r0
 8002e92:	460c      	mov	r4, r1
 8002e94:	4618      	mov	r0, r3
 8002e96:	4621      	mov	r1, r4
 8002e98:	f7fd fe9e 	bl	8000bd8 <__aeabi_d2f>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }

    if (num_temp_meas_active > 0){
 8002ea4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	dd0f      	ble.n	8002eca <process_measurements+0x2c2>
        temp_meas_mean /= num_temp_meas_active;
 8002eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eac:	ee07 3a90 	vmov	s15, r3
 8002eb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002eb4:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002eb8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ebc:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        update_env(env, temp_meas_mean);
 8002ec0:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002ec4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002ec6:	f7ff f983 	bl	80021d0 <update_env>
    }
} 
 8002eca:	bf00      	nop
 8002ecc:	374c      	adds	r7, #76	; 0x4c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd90      	pop	{r4, r7, pc}
 8002ed2:	bf00      	nop
 8002ed4:	f3af 8000 	nop.w
 8002ed8:	51eb851f 	.word	0x51eb851f
 8002edc:	40239eb8 	.word	0x40239eb8

08002ee0 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002ee0:	b590      	push	{r4, r7, lr}
 8002ee2:	b091      	sub	sp, #68	; 0x44
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
 8002eec:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	781b      	ldrb	r3, [r3, #0]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d823      	bhi.n	8002f40 <select_noise_models+0x60>
 8002ef8:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <select_noise_models+0x20>)
 8002efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efe:	bf00      	nop
 8002f00:	08002f19 	.word	0x08002f19
 8002f04:	08002f19 	.word	0x08002f19
 8002f08:	08002f23 	.word	0x08002f23
 8002f0c:	08002f2d 	.word	0x08002f2d
 8002f10:	08002f37 	.word	0x08002f37
 8002f14:	08002f19 	.word	0x08002f19
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002f18:	4b43      	ldr	r3, [pc, #268]	; (8003028 <select_noise_models+0x148>)
 8002f1a:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8002f1c:	4b43      	ldr	r3, [pc, #268]	; (800302c <select_noise_models+0x14c>)
 8002f1e:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f20:	e00e      	b.n	8002f40 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <select_noise_models+0x150>)
 8002f24:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002f26:	4b43      	ldr	r3, [pc, #268]	; (8003034 <select_noise_models+0x154>)
 8002f28:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f2a:	e009      	b.n	8002f40 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8002f2c:	4b42      	ldr	r3, [pc, #264]	; (8003038 <select_noise_models+0x158>)
 8002f2e:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002f30:	4b42      	ldr	r3, [pc, #264]	; (800303c <select_noise_models+0x15c>)
 8002f32:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f34:	e004      	b.n	8002f40 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002f36:	4b42      	ldr	r3, [pc, #264]	; (8003040 <select_noise_models+0x160>)
 8002f38:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8002f3a:	4b42      	ldr	r3, [pc, #264]	; (8003044 <select_noise_models+0x164>)
 8002f3c:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002f3e:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002f40:	2300      	movs	r3, #0
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f44:	e01b      	b.n	8002f7e <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002f46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f48:	f7fd fb1e 	bl	8000588 <__aeabi_f2d>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	460c      	mov	r4, r1
 8002f50:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8003020 <select_noise_models+0x140>
 8002f54:	ec44 3b10 	vmov	d0, r3, r4
 8002f58:	f017 ffe2 	bl	801af20 <pow>
 8002f5c:	ec54 3b10 	vmov	r3, r4, d0
 8002f60:	4618      	mov	r0, r3
 8002f62:	4621      	mov	r1, r4
 8002f64:	f7fd fe38 	bl	8000bd8 <__aeabi_d2f>
 8002f68:	4601      	mov	r1, r0
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	3316      	adds	r3, #22
 8002f70:	00db      	lsls	r3, r3, #3
 8002f72:	4413      	add	r3, r2
 8002f74:	3304      	adds	r3, #4
 8002f76:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	dde0      	ble.n	8002f46 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002f8a:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8002f90:	f107 0114 	add.w	r1, r7, #20
 8002f94:	f107 0218 	add.w	r2, r7, #24
 8002f98:	f107 031c 	add.w	r3, r7, #28
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	f7ff f9d0 	bl	8002348 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8002fa8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002fac:	eeb0 0a67 	vmov.f32	s0, s15
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7ff fa31 	bl	8002418 <altitude_gradient>
 8002fb6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8002fba:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002fbe:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fc6:	eef0 7ae7 	vabs.f32	s15, s15
 8002fca:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002fce:	2300      	movs	r3, #0
 8002fd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fd2:	e01a      	b.n	800300a <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002fd4:	6a38      	ldr	r0, [r7, #32]
 8002fd6:	f7fd fad7 	bl	8000588 <__aeabi_f2d>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	460c      	mov	r4, r1
 8002fde:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8003020 <select_noise_models+0x140>
 8002fe2:	ec44 3b10 	vmov	d0, r3, r4
 8002fe6:	f017 ff9b 	bl	801af20 <pow>
 8002fea:	ec54 3b10 	vmov	r3, r4, d0
 8002fee:	4618      	mov	r0, r3
 8002ff0:	4621      	mov	r1, r4
 8002ff2:	f7fd fdf1 	bl	8000bd8 <__aeabi_d2f>
 8002ff6:	4601      	mov	r1, r0
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	4413      	add	r3, r2
 8003000:	33b8      	adds	r3, #184	; 0xb8
 8003002:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8003004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003006:	3301      	adds	r3, #1
 8003008:	62bb      	str	r3, [r7, #40]	; 0x28
 800300a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800300c:	2b02      	cmp	r3, #2
 800300e:	dde1      	ble.n	8002fd4 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003014:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8003018:	bf00      	nop
 800301a:	373c      	adds	r7, #60	; 0x3c
 800301c:	46bd      	mov	sp, r7
 800301e:	bd90      	pop	{r4, r7, pc}
 8003020:	00000000 	.word	0x00000000
 8003024:	40000000 	.word	0x40000000
 8003028:	3c97e316 	.word	0x3c97e316
 800302c:	3fef3b64 	.word	0x3fef3b64
 8003030:	3fa01965 	.word	0x3fa01965
 8003034:	41500000 	.word	0x41500000
 8003038:	3f1e3737 	.word	0x3f1e3737
 800303c:	40ec28f6 	.word	0x40ec28f6
 8003040:	3ffa41cc 	.word	0x3ffa41cc
 8003044:	40795810 	.word	0x40795810

08003048 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8003048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304a:	b08b      	sub	sp, #44	; 0x2c
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8003058:	f04f 0300 	mov.w	r3, #0
 800305c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
 8003062:	e017      	b.n	8003094 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	4413      	add	r3, r2
 800306a:	781b      	ldrb	r3, [r3, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00e      	beq.n	800308e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	3301      	adds	r3, #1
 8003074:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	4413      	add	r3, r2
 800307e:	edd3 7a00 	vldr	s15, [r3]
 8003082:	ed97 7a08 	vldr	s14, [r7, #32]
 8003086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	429a      	cmp	r2, r3
 800309a:	dbe3      	blt.n	8003064 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	2b00      	cmp	r3, #0
 80030a0:	dd0a      	ble.n	80030b8 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	ee07 3a90 	vmov	s15, r3
 80030a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80030ac:	edd7 6a08 	vldr	s13, [r7, #32]
 80030b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030b4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 80030b8:	f04f 0300 	mov.w	r3, #0
 80030bc:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	e033      	b.n	800312c <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	4413      	add	r3, r2
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d02a      	beq.n	8003126 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	68ba      	ldr	r2, [r7, #8]
 80030d6:	4413      	add	r3, r2
 80030d8:	ed93 7a00 	vldr	s14, [r3]
 80030dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80030e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e4:	ee17 0a90 	vmov	r0, s15
 80030e8:	f7fd fa4e 	bl	8000588 <__aeabi_f2d>
 80030ec:	4603      	mov	r3, r0
 80030ee:	460c      	mov	r4, r1
 80030f0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80031e8 <sensor_elimination_by_stdev+0x1a0>
 80030f4:	ec44 3b10 	vmov	d0, r3, r4
 80030f8:	f017 ff12 	bl	801af20 <pow>
 80030fc:	ec56 5b10 	vmov	r5, r6, d0
 8003100:	69b8      	ldr	r0, [r7, #24]
 8003102:	f7fd fa41 	bl	8000588 <__aeabi_f2d>
 8003106:	4603      	mov	r3, r0
 8003108:	460c      	mov	r4, r1
 800310a:	461a      	mov	r2, r3
 800310c:	4623      	mov	r3, r4
 800310e:	4628      	mov	r0, r5
 8003110:	4631      	mov	r1, r6
 8003112:	f7fd f8db 	bl	80002cc <__adddf3>
 8003116:	4603      	mov	r3, r0
 8003118:	460c      	mov	r4, r1
 800311a:	4618      	mov	r0, r3
 800311c:	4621      	mov	r1, r4
 800311e:	f7fd fd5b 	bl	8000bd8 <__aeabi_d2f>
 8003122:	4603      	mov	r3, r0
 8003124:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	3301      	adds	r3, #1
 800312a:	617b      	str	r3, [r7, #20]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	429a      	cmp	r2, r3
 8003132:	dbc7      	blt.n	80030c4 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 8003134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	dd1a      	ble.n	8003170 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	ee07 3a90 	vmov	s15, r3
 8003140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003144:	ed97 7a06 	vldr	s14, [r7, #24]
 8003148:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800314c:	ee16 0a90 	vmov	r0, s13
 8003150:	f7fd fa1a 	bl	8000588 <__aeabi_f2d>
 8003154:	4603      	mov	r3, r0
 8003156:	460c      	mov	r4, r1
 8003158:	ec44 3b10 	vmov	d0, r3, r4
 800315c:	f018 f850 	bl	801b200 <sqrt>
 8003160:	ec54 3b10 	vmov	r3, r4, d0
 8003164:	4618      	mov	r0, r3
 8003166:	4621      	mov	r1, r4
 8003168:	f7fd fd36 	bl	8000bd8 <__aeabi_d2f>
 800316c:	4603      	mov	r3, r0
 800316e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8003170:	2300      	movs	r3, #0
 8003172:	613b      	str	r3, [r7, #16]
 8003174:	e02f      	b.n	80031d6 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	4413      	add	r3, r2
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d026      	beq.n	80031d0 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	4413      	add	r3, r2
 800318a:	ed93 7a00 	vldr	s14, [r3]
 800318e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003192:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003196:	eef0 7ae7 	vabs.f32	s15, s15
 800319a:	ee17 0a90 	vmov	r0, s15
 800319e:	f7fd f9f3 	bl	8000588 <__aeabi_f2d>
 80031a2:	4604      	mov	r4, r0
 80031a4:	460d      	mov	r5, r1
 80031a6:	69b8      	ldr	r0, [r7, #24]
 80031a8:	f7fd f9ee 	bl	8000588 <__aeabi_f2d>
 80031ac:	4602      	mov	r2, r0
 80031ae:	460b      	mov	r3, r1
 80031b0:	f7fd f88c 	bl	80002cc <__adddf3>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4620      	mov	r0, r4
 80031ba:	4629      	mov	r1, r5
 80031bc:	f7fd fccc 	bl	8000b58 <__aeabi_dcmpgt>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	4413      	add	r3, r2
 80031cc:	2200      	movs	r2, #0
 80031ce:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	3301      	adds	r3, #1
 80031d4:	613b      	str	r3, [r7, #16]
 80031d6:	693a      	ldr	r2, [r7, #16]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	429a      	cmp	r2, r3
 80031dc:	dbcb      	blt.n	8003176 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 80031de:	bf00      	nop
 80031e0:	372c      	adds	r7, #44	; 0x2c
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031e6:	bf00      	nop
 80031e8:	00000000 	.word	0x00000000
 80031ec:	40000000 	.word	0x40000000

080031f0 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 80031f0:	b490      	push	{r4, r7}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	1e43      	subs	r3, r0, #1
 80031fe:	60fb      	str	r3, [r7, #12]
 8003200:	4603      	mov	r3, r0
 8003202:	4619      	mov	r1, r3
 8003204:	f04f 0200 	mov.w	r2, #0
 8003208:	f04f 0300 	mov.w	r3, #0
 800320c:	f04f 0400 	mov.w	r4, #0
 8003210:	0154      	lsls	r4, r2, #5
 8003212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003216:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 8003218:	2300      	movs	r3, #0
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e02b      	b.n	8003276 <eye+0x86>
        for(int j = 0; j < dim; j++){
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
 8003222:	e021      	b.n	8003268 <eye+0x78>
            if (i == j){
 8003224:	693a      	ldr	r2, [r7, #16]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	d10d      	bne.n	8003248 <eye+0x58>
				A[i][j] = 1;
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fb03 f302 	mul.w	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	441a      	add	r2, r3
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	009b      	lsls	r3, r3, #2
 800323e:	4413      	add	r3, r2
 8003240:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003244:	601a      	str	r2, [r3, #0]
 8003246:	e00c      	b.n	8003262 <eye+0x72>
			} else {
				A[i][j] = 0;
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	fb03 f302 	mul.w	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	683a      	ldr	r2, [r7, #0]
 8003254:	441a      	add	r2, r3
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	3301      	adds	r3, #1
 8003266:	617b      	str	r3, [r7, #20]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	dbd9      	blt.n	8003224 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3301      	adds	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
 8003276:	693a      	ldr	r2, [r7, #16]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	429a      	cmp	r2, r3
 800327c:	dbcf      	blt.n	800321e <eye+0x2e>
			}
        }
    }
}
 800327e:	bf00      	nop
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bc90      	pop	{r4, r7}
 8003286:	4770      	bx	lr

08003288 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8003288:	b4b0      	push	{r4, r5, r7}
 800328a:	b089      	sub	sp, #36	; 0x24
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	603b      	str	r3, [r7, #0]
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	1e43      	subs	r3, r0, #1
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	4603      	mov	r3, r0
 800329e:	4619      	mov	r1, r3
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	0154      	lsls	r4, r2, #5
 80032ae:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032b2:	014b      	lsls	r3, r1, #5
 80032b4:	68fd      	ldr	r5, [r7, #12]
 80032b6:	1e6b      	subs	r3, r5, #1
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	462b      	mov	r3, r5
 80032bc:	4619      	mov	r1, r3
 80032be:	f04f 0200 	mov.w	r2, #0
 80032c2:	f04f 0300 	mov.w	r3, #0
 80032c6:	f04f 0400 	mov.w	r4, #0
 80032ca:	0154      	lsls	r4, r2, #5
 80032cc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032d0:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 80032d2:	2300      	movs	r3, #0
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	e022      	b.n	800331e <transpose+0x96>
		for(int j = 0; j < n; j++){
 80032d8:	2300      	movs	r3, #0
 80032da:	61fb      	str	r3, [r7, #28]
 80032dc:	e018      	b.n	8003310 <transpose+0x88>
			A_T[j][i] = A[i][j];
 80032de:	4602      	mov	r2, r0
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	fb03 f302 	mul.w	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	441a      	add	r2, r3
 80032ec:	4629      	mov	r1, r5
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	fb03 f301 	mul.w	r3, r3, r1
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	6839      	ldr	r1, [r7, #0]
 80032f8:	4419      	add	r1, r3
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	4413      	add	r3, r2
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3301      	adds	r3, #1
 800330e:	61fb      	str	r3, [r7, #28]
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	dbe2      	blt.n	80032de <transpose+0x56>
	for(int i = 0; i < m; i++){
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	3301      	adds	r3, #1
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	429a      	cmp	r2, r3
 8003324:	dbd8      	blt.n	80032d8 <transpose+0x50>
		}
	}
}
 8003326:	bf00      	nop
 8003328:	3724      	adds	r7, #36	; 0x24
 800332a:	46bd      	mov	sp, r7
 800332c:	bcb0      	pop	{r4, r5, r7}
 800332e:	4770      	bx	lr

08003330 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
 800333c:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 800333e:	2300      	movs	r3, #0
 8003340:	617b      	str	r3, [r7, #20]
 8003342:	e016      	b.n	8003372 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	4413      	add	r3, r2
 800334c:	ed93 7a00 	vldr	s14, [r3]
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	4413      	add	r3, r2
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	697b      	ldr	r3, [r7, #20]
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	4413      	add	r3, r2
 8003364:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003368:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	3301      	adds	r3, #1
 8003370:	617b      	str	r3, [r7, #20]
 8003372:	697a      	ldr	r2, [r7, #20]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	429a      	cmp	r2, r3
 8003378:	dbe4      	blt.n	8003344 <vecadd+0x14>
	}
}
 800337a:	bf00      	nop
 800337c:	371c      	adds	r7, #28
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8003386:	b480      	push	{r7}
 8003388:	b087      	sub	sp, #28
 800338a:	af00      	add	r7, sp, #0
 800338c:	60f8      	str	r0, [r7, #12]
 800338e:	60b9      	str	r1, [r7, #8]
 8003390:	607a      	str	r2, [r7, #4]
 8003392:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
 8003398:	e016      	b.n	80033c8 <vecsub+0x42>
		c[i] = a[i] - b[i];
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	68ba      	ldr	r2, [r7, #8]
 80033a0:	4413      	add	r3, r2
 80033a2:	ed93 7a00 	vldr	s14, [r3]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	4413      	add	r3, r2
 80033ae:	edd3 7a00 	vldr	s15, [r3]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	4413      	add	r3, r2
 80033ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033be:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3301      	adds	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	dbe4      	blt.n	800339a <vecsub+0x14>
	}
}
 80033d0:	bf00      	nop
 80033d2:	371c      	adds	r7, #28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 80033dc:	b4f0      	push	{r4, r5, r6, r7}
 80033de:	b08a      	sub	sp, #40	; 0x28
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	603b      	str	r3, [r7, #0]
 80033ea:	68b8      	ldr	r0, [r7, #8]
 80033ec:	1e43      	subs	r3, r0, #1
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
 80033f0:	4603      	mov	r3, r0
 80033f2:	4619      	mov	r1, r3
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	f04f 0400 	mov.w	r4, #0
 8003400:	0154      	lsls	r4, r2, #5
 8003402:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003406:	014b      	lsls	r3, r1, #5
 8003408:	68bd      	ldr	r5, [r7, #8]
 800340a:	1e6b      	subs	r3, r5, #1
 800340c:	61bb      	str	r3, [r7, #24]
 800340e:	462b      	mov	r3, r5
 8003410:	4619      	mov	r1, r3
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	f04f 0400 	mov.w	r4, #0
 800341e:	0154      	lsls	r4, r2, #5
 8003420:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003424:	014b      	lsls	r3, r1, #5
 8003426:	68be      	ldr	r6, [r7, #8]
 8003428:	1e73      	subs	r3, r6, #1
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	4633      	mov	r3, r6
 800342e:	4619      	mov	r1, r3
 8003430:	f04f 0200 	mov.w	r2, #0
 8003434:	f04f 0300 	mov.w	r3, #0
 8003438:	f04f 0400 	mov.w	r4, #0
 800343c:	0154      	lsls	r4, r2, #5
 800343e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003442:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8003444:	2300      	movs	r3, #0
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	e032      	b.n	80034b0 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
 800344e:	e028      	b.n	80034a2 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8003450:	4602      	mov	r2, r0
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	fb03 f302 	mul.w	r3, r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	441a      	add	r2, r3
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	ed93 7a00 	vldr	s14, [r3]
 8003468:	462a      	mov	r2, r5
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	fb03 f302 	mul.w	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	441a      	add	r2, r3
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	edd3 7a00 	vldr	s15, [r3]
 8003480:	4632      	mov	r2, r6
 8003482:	69fb      	ldr	r3, [r7, #28]
 8003484:	fb03 f302 	mul.w	r3, r3, r2
 8003488:	009b      	lsls	r3, r3, #2
 800348a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800348c:	441a      	add	r2, r3
 800348e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	3301      	adds	r3, #1
 80034a0:	623b      	str	r3, [r7, #32]
 80034a2:	6a3a      	ldr	r2, [r7, #32]
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	dbd2      	blt.n	8003450 <matadd+0x74>
	for(int i = 0; i < m; i++){
 80034aa:	69fb      	ldr	r3, [r7, #28]
 80034ac:	3301      	adds	r3, #1
 80034ae:	61fb      	str	r3, [r7, #28]
 80034b0:	69fa      	ldr	r2, [r7, #28]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	429a      	cmp	r2, r3
 80034b6:	dbc8      	blt.n	800344a <matadd+0x6e>
        }
    }
}
 80034b8:	bf00      	nop
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bcf0      	pop	{r4, r5, r6, r7}
 80034c0:	4770      	bx	lr

080034c2 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 80034c2:	b4f0      	push	{r4, r5, r6, r7}
 80034c4:	b08a      	sub	sp, #40	; 0x28
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	60f8      	str	r0, [r7, #12]
 80034ca:	60b9      	str	r1, [r7, #8]
 80034cc:	607a      	str	r2, [r7, #4]
 80034ce:	603b      	str	r3, [r7, #0]
 80034d0:	68b8      	ldr	r0, [r7, #8]
 80034d2:	1e43      	subs	r3, r0, #1
 80034d4:	627b      	str	r3, [r7, #36]	; 0x24
 80034d6:	4603      	mov	r3, r0
 80034d8:	4619      	mov	r1, r3
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	f04f 0300 	mov.w	r3, #0
 80034e2:	f04f 0400 	mov.w	r4, #0
 80034e6:	0154      	lsls	r4, r2, #5
 80034e8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034ec:	014b      	lsls	r3, r1, #5
 80034ee:	68bd      	ldr	r5, [r7, #8]
 80034f0:	1e6b      	subs	r3, r5, #1
 80034f2:	61bb      	str	r3, [r7, #24]
 80034f4:	462b      	mov	r3, r5
 80034f6:	4619      	mov	r1, r3
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	f04f 0400 	mov.w	r4, #0
 8003504:	0154      	lsls	r4, r2, #5
 8003506:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800350a:	014b      	lsls	r3, r1, #5
 800350c:	68be      	ldr	r6, [r7, #8]
 800350e:	1e73      	subs	r3, r6, #1
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	4633      	mov	r3, r6
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	f04f 0400 	mov.w	r4, #0
 8003522:	0154      	lsls	r4, r2, #5
 8003524:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003528:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 800352a:	2300      	movs	r3, #0
 800352c:	61fb      	str	r3, [r7, #28]
 800352e:	e032      	b.n	8003596 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 8003530:	2300      	movs	r3, #0
 8003532:	623b      	str	r3, [r7, #32]
 8003534:	e028      	b.n	8003588 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 8003536:	4602      	mov	r2, r0
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	fb03 f302 	mul.w	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	441a      	add	r2, r3
 8003544:	6a3b      	ldr	r3, [r7, #32]
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	ed93 7a00 	vldr	s14, [r3]
 800354e:	462a      	mov	r2, r5
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	fb03 f302 	mul.w	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	683a      	ldr	r2, [r7, #0]
 800355a:	441a      	add	r2, r3
 800355c:	6a3b      	ldr	r3, [r7, #32]
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	edd3 7a00 	vldr	s15, [r3]
 8003566:	4632      	mov	r2, r6
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	fb03 f302 	mul.w	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003572:	441a      	add	r2, r3
 8003574:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	3301      	adds	r3, #1
 8003586:	623b      	str	r3, [r7, #32]
 8003588:	6a3a      	ldr	r2, [r7, #32]
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	429a      	cmp	r2, r3
 800358e:	dbd2      	blt.n	8003536 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	3301      	adds	r3, #1
 8003594:	61fb      	str	r3, [r7, #28]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	429a      	cmp	r2, r3
 800359c:	dbc8      	blt.n	8003530 <matsub+0x6e>
        }
    }
}
 800359e:	bf00      	nop
 80035a0:	3728      	adds	r7, #40	; 0x28
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bcf0      	pop	{r4, r5, r6, r7}
 80035a6:	4770      	bx	lr

080035a8 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 80035a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035aa:	b08d      	sub	sp, #52	; 0x34
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6178      	str	r0, [r7, #20]
 80035b0:	6139      	str	r1, [r7, #16]
 80035b2:	60fa      	str	r2, [r7, #12]
 80035b4:	60bb      	str	r3, [r7, #8]
 80035b6:	693e      	ldr	r6, [r7, #16]
 80035b8:	1e73      	subs	r3, r6, #1
 80035ba:	623b      	str	r3, [r7, #32]
 80035bc:	4633      	mov	r3, r6
 80035be:	4619      	mov	r1, r3
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	f04f 0400 	mov.w	r4, #0
 80035cc:	0154      	lsls	r4, r2, #5
 80035ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035d2:	014b      	lsls	r3, r1, #5
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	4613      	mov	r3, r2
 80035da:	3b01      	subs	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	4613      	mov	r3, r2
 80035e0:	4619      	mov	r1, r3
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	f04f 0400 	mov.w	r4, #0
 80035ee:	0154      	lsls	r4, r2, #5
 80035f0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035f4:	014b      	lsls	r3, r1, #5
 80035f6:	68fd      	ldr	r5, [r7, #12]
 80035f8:	1e6b      	subs	r3, r5, #1
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	462b      	mov	r3, r5
 80035fe:	4619      	mov	r1, r3
 8003600:	f04f 0200 	mov.w	r2, #0
 8003604:	f04f 0300 	mov.w	r3, #0
 8003608:	f04f 0400 	mov.w	r4, #0
 800360c:	0154      	lsls	r4, r2, #5
 800360e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003612:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003614:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8003618:	2b00      	cmp	r3, #0
 800361a:	d009      	beq.n	8003630 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	fb02 f303 	mul.w	r3, r2, r3
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	461a      	mov	r2, r3
 8003628:	2100      	movs	r1, #0
 800362a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800362c:	f017 f80d 	bl	801a64a <memset>
	}
	for(int i = 0; i < m; i++){
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
 8003634:	e04a      	b.n	80036cc <matmul+0x124>
        for(int j = 0; j < o; j++){
 8003636:	2300      	movs	r3, #0
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
 800363a:	e040      	b.n	80036be <matmul+0x116>
            for(int k = 0; k < n; k++){
 800363c:	2300      	movs	r3, #0
 800363e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003640:	e036      	b.n	80036b0 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8003642:	4632      	mov	r2, r6
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	fb03 f302 	mul.w	r3, r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	441a      	add	r2, r3
 8003650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	ed93 7a00 	vldr	s14, [r3]
 800365a:	687a      	ldr	r2, [r7, #4]
 800365c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800365e:	fb03 f302 	mul.w	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003666:	441a      	add	r2, r3
 8003668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	edd3 7a00 	vldr	s15, [r3]
 8003672:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003676:	462a      	mov	r2, r5
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	fb03 f302 	mul.w	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003682:	441a      	add	r2, r3
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	edd3 7a00 	vldr	s15, [r3]
 800368e:	462a      	mov	r2, r5
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	fb03 f302 	mul.w	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800369a:	441a      	add	r2, r3
 800369c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 80036aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ac:	3301      	adds	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	dbc4      	blt.n	8003642 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 80036b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ba:	3301      	adds	r3, #1
 80036bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80036be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	dbba      	blt.n	800363c <matmul+0x94>
	for(int i = 0; i < m; i++){
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	3301      	adds	r3, #1
 80036ca:	627b      	str	r3, [r7, #36]	; 0x24
 80036cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	dbb0      	blt.n	8003636 <matmul+0x8e>
            }
        }
    }
}
 80036d4:	bf00      	nop
 80036d6:	3734      	adds	r7, #52	; 0x34
 80036d8:	46bd      	mov	sp, r7
 80036da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080036dc <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 80036dc:	b5b0      	push	{r4, r5, r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
 80036ea:	68bd      	ldr	r5, [r7, #8]
 80036ec:	1e6b      	subs	r3, r5, #1
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	462b      	mov	r3, r5
 80036f2:	4619      	mov	r1, r3
 80036f4:	f04f 0200 	mov.w	r2, #0
 80036f8:	f04f 0300 	mov.w	r3, #0
 80036fc:	f04f 0400 	mov.w	r4, #0
 8003700:	0154      	lsls	r4, r2, #5
 8003702:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003706:	014b      	lsls	r3, r1, #5
	if (reset) {
 8003708:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	461a      	mov	r2, r3
 8003716:	2100      	movs	r1, #0
 8003718:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800371a:	f016 ff96 	bl	801a64a <memset>
	}
	for(int i = 0; i < m; i++){
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	e02e      	b.n	8003782 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	e024      	b.n	8003774 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 800372a:	462a      	mov	r2, r5
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	fb03 f302 	mul.w	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	441a      	add	r2, r3
 8003738:	69fb      	ldr	r3, [r7, #28]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	ed93 7a00 	vldr	s14, [r3]
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	683a      	ldr	r2, [r7, #0]
 8003748:	4413      	add	r3, r2
 800374a:	edd3 7a00 	vldr	s15, [r3]
 800374e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003758:	4413      	add	r3, r2
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003764:	4413      	add	r3, r2
 8003766:	ee77 7a27 	vadd.f32	s15, s14, s15
 800376a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	3301      	adds	r3, #1
 8003772:	61fb      	str	r3, [r7, #28]
 8003774:	69fa      	ldr	r2, [r7, #28]
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	dbd6      	blt.n	800372a <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	3301      	adds	r3, #1
 8003780:	61bb      	str	r3, [r7, #24]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	429a      	cmp	r2, r3
 8003788:	dbcc      	blt.n	8003724 <matvecprod+0x48>
        }
    }
}
 800378a:	bf00      	nop
 800378c:	3720      	adds	r7, #32
 800378e:	46bd      	mov	sp, r7
 8003790:	bdb0      	pop	{r4, r5, r7, pc}

08003792 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8003792:	b480      	push	{r7}
 8003794:	b08b      	sub	sp, #44	; 0x2c
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
 800379a:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 800379c:	2300      	movs	r3, #0
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	613b      	str	r3, [r7, #16]
 80037a4:	e01d      	b.n	80037e2 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	edd3 7a00 	vldr	s15, [r3]
 80037ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037b4:	d102      	bne.n	80037bc <lower_triangular_inverse+0x2a>
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	e076      	b.n	80038aa <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	ed93 7a00 	vldr	s14, [r3]
 80037c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	3301      	adds	r3, #1
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	3301      	adds	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
 80037e2:	69fa      	ldr	r2, [r7, #28]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	dbdd      	blt.n	80037a6 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80037ea:	2301      	movs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	; 0x24
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	4413      	add	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
 80037f8:	e052      	b.n	80038a0 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80037fa:	2300      	movs	r3, #0
 80037fc:	623b      	str	r3, [r7, #32]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	e041      	b.n	8003888 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	61fb      	str	r3, [r7, #28]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	e01b      	b.n	800384c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	ed93 7a00 	vldr	s14, [r3]
 8003820:	6a3b      	ldr	r3, [r7, #32]
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	edd3 7a00 	vldr	s15, [r3]
 800382c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003830:	ed97 7a03 	vldr	s14, [r7, #12]
 8003834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003838:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	3301      	adds	r3, #1
 8003840:	61fb      	str	r3, [r7, #28]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	4413      	add	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003850:	429a      	cmp	r2, r3
 8003852:	dbdf      	blt.n	8003814 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	4413      	add	r3, r2
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	eeb1 7a67 	vneg.f32	s14, s15
 8003864:	6a3b      	ldr	r3, [r7, #32]
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	4413      	add	r3, r2
 800386c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003870:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003874:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	4413      	add	r3, r2
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	3301      	adds	r3, #1
 8003886:	623b      	str	r3, [r7, #32]
 8003888:	6a3a      	ldr	r2, [r7, #32]
 800388a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800388c:	429a      	cmp	r2, r3
 800388e:	dbb9      	blt.n	8003804 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003892:	3301      	adds	r3, #1
 8003894:	627b      	str	r3, [r7, #36]	; 0x24
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4413      	add	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dba8      	blt.n	80037fa <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	372c      	adds	r7, #44	; 0x2c
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 80038b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038bc:	b08b      	sub	sp, #44	; 0x2c
 80038be:	af00      	add	r7, sp, #0
 80038c0:	60f8      	str	r0, [r7, #12]
 80038c2:	60b9      	str	r1, [r7, #8]
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	68fe      	ldr	r6, [r7, #12]
 80038c8:	1e73      	subs	r3, r6, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	4633      	mov	r3, r6
 80038ce:	4619      	mov	r1, r3
 80038d0:	f04f 0200 	mov.w	r2, #0
 80038d4:	f04f 0300 	mov.w	r3, #0
 80038d8:	f04f 0400 	mov.w	r4, #0
 80038dc:	0154      	lsls	r4, r2, #5
 80038de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038e2:	014b      	lsls	r3, r1, #5
 80038e4:	68fd      	ldr	r5, [r7, #12]
 80038e6:	1e6b      	subs	r3, r5, #1
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	462b      	mov	r3, r5
 80038ec:	4619      	mov	r1, r3
 80038ee:	f04f 0200 	mov.w	r2, #0
 80038f2:	f04f 0300 	mov.w	r3, #0
 80038f6:	f04f 0400 	mov.w	r4, #0
 80038fa:	0154      	lsls	r4, r2, #5
 80038fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003900:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	68fa      	ldr	r2, [r7, #12]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	461a      	mov	r2, r3
 800390e:	2100      	movs	r1, #0
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f016 fe9a 	bl	801a64a <memset>
    for (int i = 0; i < n; i++)
 8003916:	2300      	movs	r3, #0
 8003918:	61bb      	str	r3, [r7, #24]
 800391a:	e09f      	b.n	8003a5c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 800391c:	2300      	movs	r3, #0
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e093      	b.n	8003a4a <cholesky+0x192>
            float s = 0;
 8003922:	f04f 0300 	mov.w	r3, #0
 8003926:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 8003928:	2300      	movs	r3, #0
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
 800392c:	e022      	b.n	8003974 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 800392e:	462a      	mov	r2, r5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	fb03 f302 	mul.w	r3, r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	441a      	add	r2, r3
 800393c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	ed93 7a00 	vldr	s14, [r3]
 8003946:	462a      	mov	r2, r5
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	fb03 f302 	mul.w	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	441a      	add	r2, r3
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	edd3 7a00 	vldr	s15, [r3]
 800395e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003962:	ed97 7a08 	vldr	s14, [r7, #32]
 8003966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800396a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800396e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003970:	3301      	adds	r3, #1
 8003972:	627b      	str	r3, [r7, #36]	; 0x24
 8003974:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	429a      	cmp	r2, r3
 800397a:	dbd8      	blt.n	800392e <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	429a      	cmp	r2, r3
 8003982:	d116      	bne.n	80039b2 <cholesky+0xfa>
 8003984:	4632      	mov	r2, r6
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	fb03 f302 	mul.w	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	68ba      	ldr	r2, [r7, #8]
 8003990:	441a      	add	r2, r3
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	ed93 7a00 	vldr	s14, [r3]
 800399c:	edd7 7a08 	vldr	s15, [r7, #32]
 80039a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039a4:	eeb0 0a67 	vmov.f32	s0, s15
 80039a8:	f017 fde8 	bl	801b57c <sqrtf>
 80039ac:	ee10 1a10 	vmov	r1, s0
 80039b0:	e03d      	b.n	8003a2e <cholesky+0x176>
 80039b2:	462a      	mov	r2, r5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	fb03 f302 	mul.w	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	441a      	add	r2, r3
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	4413      	add	r3, r2
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fc fddd 	bl	8000588 <__aeabi_f2d>
 80039ce:	4603      	mov	r3, r0
 80039d0:	460c      	mov	r4, r1
 80039d2:	461a      	mov	r2, r3
 80039d4:	4623      	mov	r3, r4
 80039d6:	f04f 0000 	mov.w	r0, #0
 80039da:	4925      	ldr	r1, [pc, #148]	; (8003a70 <cholesky+0x1b8>)
 80039dc:	f7fc ff56 	bl	800088c <__aeabi_ddiv>
 80039e0:	4603      	mov	r3, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4698      	mov	r8, r3
 80039e6:	46a1      	mov	r9, r4
 80039e8:	4632      	mov	r2, r6
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	fb03 f302 	mul.w	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	441a      	add	r2, r3
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	4413      	add	r3, r2
 80039fc:	ed93 7a00 	vldr	s14, [r3]
 8003a00:	edd7 7a08 	vldr	s15, [r7, #32]
 8003a04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a08:	ee17 0a90 	vmov	r0, s15
 8003a0c:	f7fc fdbc 	bl	8000588 <__aeabi_f2d>
 8003a10:	4603      	mov	r3, r0
 8003a12:	460c      	mov	r4, r1
 8003a14:	461a      	mov	r2, r3
 8003a16:	4623      	mov	r3, r4
 8003a18:	4640      	mov	r0, r8
 8003a1a:	4649      	mov	r1, r9
 8003a1c:	f7fc fe0c 	bl	8000638 <__aeabi_dmul>
 8003a20:	4603      	mov	r3, r0
 8003a22:	460c      	mov	r4, r1
 8003a24:	4618      	mov	r0, r3
 8003a26:	4621      	mov	r1, r4
 8003a28:	f7fd f8d6 	bl	8000bd8 <__aeabi_d2f>
 8003a2c:	4601      	mov	r1, r0
 8003a2e:	462a      	mov	r2, r5
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	fb03 f302 	mul.w	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	441a      	add	r2, r3
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	3301      	adds	r3, #1
 8003a48:	61fb      	str	r3, [r7, #28]
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	f6ff af66 	blt.w	8003922 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	61bb      	str	r3, [r7, #24]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	f6ff af5b 	blt.w	800391c <cholesky+0x64>
        }
}
 8003a66:	bf00      	nop
 8003a68:	372c      	adds	r7, #44	; 0x2c
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a70:	3ff00000 	.word	0x3ff00000

08003a74 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8003a74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a78:	b090      	sub	sp, #64	; 0x40
 8003a7a:	af00      	add	r7, sp, #0
 8003a7c:	60f8      	str	r0, [r7, #12]
 8003a7e:	60b9      	str	r1, [r7, #8]
 8003a80:	607a      	str	r2, [r7, #4]
 8003a82:	ed87 0a00 	vstr	s0, [r7]
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	1e5a      	subs	r2, r3, #1
 8003a8a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	f04f 0200 	mov.w	r2, #0
 8003a92:	f04f 0300 	mov.w	r3, #0
 8003a96:	f04f 0400 	mov.w	r4, #0
 8003a9a:	0154      	lsls	r4, r2, #5
 8003a9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aa0:	014b      	lsls	r3, r1, #5
 8003aa2:	68fd      	ldr	r5, [r7, #12]
 8003aa4:	1e6b      	subs	r3, r5, #1
 8003aa6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa8:	462b      	mov	r3, r5
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f04f 0200 	mov.w	r2, #0
 8003ab0:	f04f 0300 	mov.w	r3, #0
 8003ab4:	f04f 0400 	mov.w	r4, #0
 8003ab8:	0154      	lsls	r4, r2, #5
 8003aba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003abe:	014b      	lsls	r3, r1, #5
 8003ac0:	466b      	mov	r3, sp
 8003ac2:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	68fe      	ldr	r6, [r7, #12]
 8003ac8:	1e43      	subs	r3, r0, #1
 8003aca:	627b      	str	r3, [r7, #36]	; 0x24
 8003acc:	4603      	mov	r3, r0
 8003ace:	4619      	mov	r1, r3
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	f04f 0400 	mov.w	r4, #0
 8003adc:	0154      	lsls	r4, r2, #5
 8003ade:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ae2:	014b      	lsls	r3, r1, #5
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003aea:	1e73      	subs	r3, r6, #1
 8003aec:	623b      	str	r3, [r7, #32]
 8003aee:	4603      	mov	r3, r0
 8003af0:	4619      	mov	r1, r3
 8003af2:	f04f 0200 	mov.w	r2, #0
 8003af6:	4633      	mov	r3, r6
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	fb03 fe02 	mul.w	lr, r3, r2
 8003b00:	fb01 fc04 	mul.w	ip, r1, r4
 8003b04:	44f4      	add	ip, lr
 8003b06:	fba1 3403 	umull	r3, r4, r1, r3
 8003b0a:	eb0c 0204 	add.w	r2, ip, r4
 8003b0e:	4614      	mov	r4, r2
 8003b10:	f04f 0100 	mov.w	r1, #0
 8003b14:	f04f 0200 	mov.w	r2, #0
 8003b18:	0162      	lsls	r2, r4, #5
 8003b1a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003b1e:	0159      	lsls	r1, r3, #5
 8003b20:	4603      	mov	r3, r0
 8003b22:	4619      	mov	r1, r3
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	4633      	mov	r3, r6
 8003b2a:	f04f 0400 	mov.w	r4, #0
 8003b2e:	fb03 fe02 	mul.w	lr, r3, r2
 8003b32:	fb01 fc04 	mul.w	ip, r1, r4
 8003b36:	44f4      	add	ip, lr
 8003b38:	fba1 3403 	umull	r3, r4, r1, r3
 8003b3c:	eb0c 0204 	add.w	r2, ip, r4
 8003b40:	4614      	mov	r4, r2
 8003b42:	f04f 0100 	mov.w	r1, #0
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	0162      	lsls	r2, r4, #5
 8003b4c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003b50:	0159      	lsls	r1, r3, #5
 8003b52:	4603      	mov	r3, r0
 8003b54:	4632      	mov	r2, r6
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3303      	adds	r3, #3
 8003b5e:	3307      	adds	r3, #7
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	ebad 0d03 	sub.w	sp, sp, r3
 8003b68:	466b      	mov	r3, sp
 8003b6a:	3303      	adds	r3, #3
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8003b72:	69f8      	ldr	r0, [r7, #28]
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	68fa      	ldr	r2, [r7, #12]
 8003b78:	fb02 f303 	mul.w	r3, r2, r3
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	461a      	mov	r2, r3
 8003b80:	68b9      	ldr	r1, [r7, #8]
 8003b82:	f016 fd57 	bl	801a634 <memcpy>
    for (int i = 0; i < n; i++) {
 8003b86:	2300      	movs	r3, #0
 8003b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b8a:	e022      	b.n	8003bd2 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8003b8c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003b90:	69fa      	ldr	r2, [r7, #28]
 8003b92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b94:	fb01 f103 	mul.w	r1, r1, r3
 8003b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b9a:	440b      	add	r3, r1
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	ed93 7a00 	vldr	s14, [r3]
 8003ba4:	edd7 6a00 	vldr	s13, [r7]
 8003ba8:	edd7 7a00 	vldr	s15, [r7]
 8003bac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003bb0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003bb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bbc:	fb01 f103 	mul.w	r1, r1, r3
 8003bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bc2:	440b      	add	r3, r1
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	4413      	add	r3, r2
 8003bc8:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8003bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bce:	3301      	adds	r3, #1
 8003bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003bd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dbd8      	blt.n	8003b8c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8003bda:	68f8      	ldr	r0, [r7, #12]
 8003bdc:	68fe      	ldr	r6, [r7, #12]
 8003bde:	466b      	mov	r3, sp
 8003be0:	469a      	mov	sl, r3
 8003be2:	1e43      	subs	r3, r0, #1
 8003be4:	61bb      	str	r3, [r7, #24]
 8003be6:	4603      	mov	r3, r0
 8003be8:	4619      	mov	r1, r3
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	f04f 0400 	mov.w	r4, #0
 8003bf6:	0154      	lsls	r4, r2, #5
 8003bf8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bfc:	014b      	lsls	r3, r1, #5
 8003bfe:	4603      	mov	r3, r0
 8003c00:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003c04:	1e73      	subs	r3, r6, #1
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	4603      	mov	r3, r0
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	4633      	mov	r3, r6
 8003c12:	f04f 0400 	mov.w	r4, #0
 8003c16:	fb03 fe02 	mul.w	lr, r3, r2
 8003c1a:	fb01 fc04 	mul.w	ip, r1, r4
 8003c1e:	44f4      	add	ip, lr
 8003c20:	fba1 3403 	umull	r3, r4, r1, r3
 8003c24:	eb0c 0204 	add.w	r2, ip, r4
 8003c28:	4614      	mov	r4, r2
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	0162      	lsls	r2, r4, #5
 8003c34:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c38:	0159      	lsls	r1, r3, #5
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	f04f 0200 	mov.w	r2, #0
 8003c42:	4633      	mov	r3, r6
 8003c44:	f04f 0400 	mov.w	r4, #0
 8003c48:	fb03 fe02 	mul.w	lr, r3, r2
 8003c4c:	fb01 fc04 	mul.w	ip, r1, r4
 8003c50:	44f4      	add	ip, lr
 8003c52:	fba1 3403 	umull	r3, r4, r1, r3
 8003c56:	eb0c 0204 	add.w	r2, ip, r4
 8003c5a:	4614      	mov	r4, r2
 8003c5c:	f04f 0100 	mov.w	r1, #0
 8003c60:	f04f 0200 	mov.w	r2, #0
 8003c64:	0162      	lsls	r2, r4, #5
 8003c66:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c6a:	0159      	lsls	r1, r3, #5
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	4632      	mov	r2, r6
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	3303      	adds	r3, #3
 8003c78:	3307      	adds	r3, #7
 8003c7a:	08db      	lsrs	r3, r3, #3
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	ebad 0d03 	sub.w	sp, sp, r3
 8003c82:	466b      	mov	r3, sp
 8003c84:	3303      	adds	r3, #3
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8003c8c:	69fb      	ldr	r3, [r7, #28]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	4619      	mov	r1, r3
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff fe10 	bl	80038b8 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	68f8      	ldr	r0, [r7, #12]
 8003c9e:	f7ff fd78 	bl	8003792 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	68fa      	ldr	r2, [r7, #12]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	461a      	mov	r2, r3
 8003cae:	2100      	movs	r1, #0
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f016 fcca 	bl	801a64a <memset>
    for(int i = 0; i < n; i++){
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cba:	e04e      	b.n	8003d5a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003cc0:	e044      	b.n	8003d4c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003cc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	bfb8      	it	lt
 8003cca:	4613      	movlt	r3, r2
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cce:	e036      	b.n	8003d3e <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003cd0:	462a      	mov	r2, r5
 8003cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cd4:	fb03 f302 	mul.w	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	441a      	add	r2, r3
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	4413      	add	r3, r2
 8003ce4:	ed93 7a00 	vldr	s14, [r3]
 8003ce8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cf0:	fb01 f103 	mul.w	r1, r1, r3
 8003cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf6:	440b      	add	r3, r1
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	4413      	add	r3, r2
 8003cfc:	edd3 6a00 	vldr	s13, [r3]
 8003d00:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003d08:	fb01 f103 	mul.w	r1, r1, r3
 8003d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0e:	440b      	add	r3, r1
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	edd3 7a00 	vldr	s15, [r3]
 8003d18:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d1c:	462a      	mov	r2, r5
 8003d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d20:	fb03 f302 	mul.w	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	441a      	add	r2, r3
 8003d2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	dbc4      	blt.n	8003cd0 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d48:	3301      	adds	r3, #1
 8003d4a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	dbb6      	blt.n	8003cc2 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d56:	3301      	adds	r3, #1
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	dbac      	blt.n	8003cbc <cholesky_inverse+0x248>
 8003d62:	46d5      	mov	sp, sl
 8003d64:	46cd      	mov	sp, r9
            }
        }
    }
}
 8003d66:	bf00      	nop
 8003d68:	3740      	adds	r7, #64	; 0x40
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d70 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	210a      	movs	r1, #10
 8003d82:	4618      	mov	r0, r3
 8003d84:	f012 f952 	bl	801602c <osMutexAcquire>
 8003d88:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d104      	bne.n	8003d9a <AcquireMutex+0x2a>
		custom_mutex->counter++;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	1c5a      	adds	r2, r3, #1
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	605a      	str	r2, [r3, #4]
	}

	return status;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f012 f999 	bl	80160e8 <osMutexRelease>
 8003db6:	4603      	mov	r3, r0
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	3708      	adds	r7, #8
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b0a0      	sub	sp, #128	; 0x80
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
 8003dcc:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 8003dce:	f107 0310 	add.w	r3, r7, #16
 8003dd2:	2264      	movs	r2, #100	; 0x64
 8003dd4:	2100      	movs	r1, #0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f016 fc37 	bl	801a64a <memset>
	uint32_t counter = custom_mutex->counter;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003de2:	f04f 33ff 	mov.w	r3, #4294967295
 8003de6:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003de8:	2300      	movs	r3, #0
 8003dea:	677b      	str	r3, [r7, #116]	; 0x74
 8003dec:	e01b      	b.n	8003e26 <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	f107 0310 	add.w	r3, r7, #16
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	4618      	mov	r0, r3
 8003df8:	f016 fc1c 	bl	801a634 <memcpy>
		if(custom_mutex->counter == counter){
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d109      	bne.n	8003e1a <ReadMutex+0x5a>
			memcpy(local_data, buffer, size);
 8003e06:	683a      	ldr	r2, [r7, #0]
 8003e08:	f107 0310 	add.w	r3, r7, #16
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f016 fc10 	bl	801a634 <memcpy>
			status = osOK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003e18:	e008      	b.n	8003e2c <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e22:	3301      	adds	r3, #1
 8003e24:	677b      	str	r3, [r7, #116]	; 0x74
 8003e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e28:	2b04      	cmp	r3, #4
 8003e2a:	dde0      	ble.n	8003dee <ReadMutex+0x2e>
	}
	return status;
 8003e2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3780      	adds	r7, #128	; 0x80
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
	...

08003e38 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003e38:	b590      	push	{r4, r7, lr}
 8003e3a:	b08d      	sub	sp, #52	; 0x34
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003e46:	f107 031c 	add.w	r3, r7, #28
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003e50:	f107 0310 	add.w	r3, r7, #16
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	605a      	str	r2, [r3, #4]
 8003e5a:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 8003e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e60:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 0; i < 5; i++){
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	e07b      	b.n	8003f66 <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e7a:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e8a:	ee07 3a90 	vmov	s15, r3
 8003e8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e92:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003f80 <ReadMutexStateEst+0x148>
 8003e96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e9a:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	ee07 3a90 	vmov	s15, r3
 8003eac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003eb0:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003f84 <ReadMutexStateEst+0x14c>
 8003eb4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003eb8:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d149      	bne.n	8003f5a <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec8:	1e5a      	subs	r2, r3, #1
 8003eca:	6939      	ldr	r1, [r7, #16]
 8003ecc:	6838      	ldr	r0, [r7, #0]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	4413      	add	r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	4403      	add	r3, r0
 8003ed8:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8003eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003edc:	1e5a      	subs	r2, r3, #1
 8003ede:	69b9      	ldr	r1, [r7, #24]
 8003ee0:	6838      	ldr	r0, [r7, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	4413      	add	r3, r2
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	4403      	add	r3, r0
 8003eec:	3304      	adds	r3, #4
 8003eee:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003ef0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ef2:	1e5a      	subs	r2, r3, #1
 8003ef4:	69f9      	ldr	r1, [r7, #28]
 8003ef6:	6838      	ldr	r0, [r7, #0]
 8003ef8:	4613      	mov	r3, r2
 8003efa:	005b      	lsls	r3, r3, #1
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	4403      	add	r3, r0
 8003f02:	3308      	adds	r3, #8
 8003f04:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f7fc fb3d 	bl	8000588 <__aeabi_f2d>
 8003f0e:	a31a      	add	r3, pc, #104	; (adr r3, 8003f78 <ReadMutexStateEst+0x140>)
 8003f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f14:	f7fc fb90 	bl	8000638 <__aeabi_dmul>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	460c      	mov	r4, r1
 8003f1c:	4619      	mov	r1, r3
 8003f1e:	4622      	mov	r2, r4
 8003f20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f22:	1e5c      	subs	r4, r3, #1
 8003f24:	4608      	mov	r0, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	f7fc fe56 	bl	8000bd8 <__aeabi_d2f>
 8003f2c:	4601      	mov	r1, r0
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4623      	mov	r3, r4
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1b1b      	subs	r3, r3, r4
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	3330      	adds	r3, #48	; 0x30
 8003f3c:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f40:	1e5a      	subs	r2, r3, #1
 8003f42:	6a39      	ldr	r1, [r7, #32]
 8003f44:	6838      	ldr	r0, [r7, #0]
 8003f46:	4613      	mov	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	1a9b      	subs	r3, r3, r2
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	4403      	add	r3, r0
 8003f50:	333c      	adds	r3, #60	; 0x3c
 8003f52:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003f58:	e008      	b.n	8003f6c <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < 5; i++){
 8003f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f62:	3301      	adds	r3, #1
 8003f64:	627b      	str	r3, [r7, #36]	; 0x24
 8003f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	dd80      	ble.n	8003e6e <ReadMutexStateEst+0x36>
	}


	return status;
 8003f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3734      	adds	r7, #52	; 0x34
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd90      	pop	{r4, r7, pc}
 8003f76:	bf00      	nop
 8003f78:	51eb851f 	.word	0x51eb851f
 8003f7c:	40239eb8 	.word	0x40239eb8
 8003f80:	44800000 	.word	0x44800000
 8003f84:	42c80000 	.word	0x42c80000

08003f88 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8003f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f8a:	b0bd      	sub	sp, #244	; 0xf4
 8003f8c:	af0a      	add	r7, sp, #40	; 0x28
 8003f8e:	61f8      	str	r0, [r7, #28]
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	460b      	mov	r3, r1
 8003f94:	76fb      	strb	r3, [r7, #27]
 8003f96:	4613      	mov	r3, r2
 8003f98:	76bb      	strb	r3, [r7, #26]
	log_entry_t log_entry = { 0 };
 8003f9a:	f107 0320 	add.w	r3, r7, #32
 8003f9e:	2296      	movs	r2, #150	; 0x96
 8003fa0:	2100      	movs	r1, #0
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f016 fb51 	bl	801a64a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8003fa8:	7efb      	ldrb	r3, [r7, #27]
 8003faa:	7eba      	ldrb	r2, [r7, #26]
 8003fac:	f107 0020 	add.w	r0, r7, #32
 8003fb0:	9202      	str	r2, [sp, #8]
 8003fb2:	9301      	str	r3, [sp, #4]
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	9300      	str	r3, [sp, #0]
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4a7a      	ldr	r2, [pc, #488]	; (80041a4 <logSensor+0x21c>)
 8003fbc:	2196      	movs	r1, #150	; 0x96
 8003fbe:	f016 fc05 	bl	801a7cc <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003fc2:	7ebb      	ldrb	r3, [r7, #26]
 8003fc4:	3b01      	subs	r3, #1
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	f200 80c8 	bhi.w	800415c <logSensor+0x1d4>
 8003fcc:	a201      	add	r2, pc, #4	; (adr r2, 8003fd4 <logSensor+0x4c>)
 8003fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd2:	bf00      	nop
 8003fd4:	08003fe5 	.word	0x08003fe5
 8003fd8:	0800401f 	.word	0x0800401f
 8003fdc:	08004091 	.word	0x08004091
 8003fe0:	08004115 	.word	0x08004115
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fea:	f107 0320 	add.w	r3, r7, #32
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f7fc f90e 	bl	8000210 <strlen>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	f107 0320 	add.w	r3, r7, #32
 8003ffa:	1898      	adds	r0, r3, r2
 8003ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004000:	6819      	ldr	r1, [r3, #0]
 8004002:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800400c:	6892      	ldr	r2, [r2, #8]
 800400e:	9201      	str	r2, [sp, #4]
 8004010:	9300      	str	r3, [sp, #0]
 8004012:	460b      	mov	r3, r1
 8004014:	4a64      	ldr	r2, [pc, #400]	; (80041a8 <logSensor+0x220>)
 8004016:	2196      	movs	r1, #150	; 0x96
 8004018:	f016 fbd8 	bl	801a7cc <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 800401c:	e0b4      	b.n	8004188 <logSensor+0x200>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		snprintf(log_entry.str + strlen(log_entry.str),
 8004024:	f107 0320 	add.w	r3, r7, #32
 8004028:	4618      	mov	r0, r3
 800402a:	f7fc f8f1 	bl	8000210 <strlen>
 800402e:	4602      	mov	r2, r0
 8004030:	f107 0320 	add.w	r3, r7, #32
 8004034:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd,%hd,%hd,%lu\n", imu_data_ptr->acc_x,
 8004036:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800403a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 800403e:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8004040:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004044:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004048:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800404a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800404e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004052:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8004054:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004058:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 800405c:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 800405e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004062:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004066:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8004068:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800406c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004070:	461e      	mov	r6, r3
 8004072:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	9305      	str	r3, [sp, #20]
 800407a:	9604      	str	r6, [sp, #16]
 800407c:	9503      	str	r5, [sp, #12]
 800407e:	9402      	str	r4, [sp, #8]
 8004080:	9101      	str	r1, [sp, #4]
 8004082:	9200      	str	r2, [sp, #0]
 8004084:	4663      	mov	r3, ip
 8004086:	4a49      	ldr	r2, [pc, #292]	; (80041ac <logSensor+0x224>)
 8004088:	2196      	movs	r1, #150	; 0x96
 800408a:	f016 fb9f 	bl	801a7cc <sniprintf>
	}
		break;
 800408e:	e07b      	b.n	8004188 <logSensor+0x200>
	case GPS: {
		gps_data_t *gps_data = (gps_data_t*) sensor_data;
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		snprintf(log_entry.str + strlen(log_entry.str),
 8004096:	f107 0320 	add.w	r3, r7, #32
 800409a:	4618      	mov	r0, r3
 800409c:	f7fc f8b8 	bl	8000210 <strlen>
 80040a0:	4602      	mov	r2, r0
 80040a2:	f107 0320 	add.w	r3, r7, #32
 80040a6:	189d      	adds	r5, r3, r2
 80040a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040ac:	681e      	ldr	r6, [r3, #0]
 80040ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040b8:	6892      	ldr	r2, [r2, #8]
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%d,%ld,%d,%ld,%d,%hd,%hd\n",
			gps_data->hour, gps_data->minute, gps_data->second, gps_data->lat_deg,
 80040ba:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80040be:	7b49      	ldrb	r1, [r1, #13]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040c0:	6139      	str	r1, [r7, #16]
 80040c2:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 80040c6:	6909      	ldr	r1, [r1, #16]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 80040c8:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80040cc:	7d00      	ldrb	r0, [r0, #20]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 80040d4:	6980      	ldr	r0, [r0, #24]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 80040d6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040da:	7b24      	ldrb	r4, [r4, #12]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040dc:	60bc      	str	r4, [r7, #8]
			gps_data->altitude, gps_data->HDOP);
 80040de:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040e2:	8c24      	ldrh	r4, [r4, #32]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040e4:	607c      	str	r4, [r7, #4]
			gps_data->altitude, gps_data->HDOP);
 80040e6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040ea:	8be4      	ldrh	r4, [r4, #30]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040ec:	9408      	str	r4, [sp, #32]
 80040ee:	687c      	ldr	r4, [r7, #4]
 80040f0:	9407      	str	r4, [sp, #28]
 80040f2:	68bc      	ldr	r4, [r7, #8]
 80040f4:	9406      	str	r4, [sp, #24]
 80040f6:	9005      	str	r0, [sp, #20]
 80040f8:	68f8      	ldr	r0, [r7, #12]
 80040fa:	9004      	str	r0, [sp, #16]
 80040fc:	9103      	str	r1, [sp, #12]
 80040fe:	6939      	ldr	r1, [r7, #16]
 8004100:	9102      	str	r1, [sp, #8]
 8004102:	9201      	str	r2, [sp, #4]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4633      	mov	r3, r6
 8004108:	4a29      	ldr	r2, [pc, #164]	; (80041b0 <logSensor+0x228>)
 800410a:	2196      	movs	r1, #150	; 0x96
 800410c:	4628      	mov	r0, r5
 800410e:	f016 fb5d 	bl	801a7cc <sniprintf>
	}
		break;
 8004112:	e039      	b.n	8004188 <logSensor+0x200>
	case BATTERY: {
		battery_data_t *battery_data = (battery_data_t*) sensor_data;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		snprintf(log_entry.str + strlen(log_entry.str),
 800411a:	f107 0320 	add.w	r3, r7, #32
 800411e:	4618      	mov	r0, r3
 8004120:	f7fc f876 	bl	8000210 <strlen>
 8004124:	4602      	mov	r2, r0
 8004126:	f107 0320 	add.w	r3, r7, #32
 800412a:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd\n",
			battery_data->battery, battery_data->consumption,
 800412c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004130:	885b      	ldrh	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004132:	461c      	mov	r4, r3
			battery_data->battery, battery_data->consumption,
 8004134:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004138:	88db      	ldrh	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 800413a:	461a      	mov	r2, r3
			battery_data->current, battery_data->supply);
 800413c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004140:	889b      	ldrh	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004142:	4619      	mov	r1, r3
			battery_data->current, battery_data->supply);
 8004144:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004148:	881b      	ldrh	r3, [r3, #0]
		snprintf(log_entry.str + strlen(log_entry.str),
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	9101      	str	r1, [sp, #4]
 800414e:	9200      	str	r2, [sp, #0]
 8004150:	4623      	mov	r3, r4
 8004152:	4a18      	ldr	r2, [pc, #96]	; (80041b4 <logSensor+0x22c>)
 8004154:	2196      	movs	r1, #150	; 0x96
 8004156:	f016 fb39 	bl	801a7cc <sniprintf>
	}
		break;
 800415a:	e015      	b.n	8004188 <logSensor+0x200>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 800415c:	f107 0320 	add.w	r3, r7, #32
 8004160:	4618      	mov	r0, r3
 8004162:	f7fc f855 	bl	8000210 <strlen>
 8004166:	4602      	mov	r2, r0
 8004168:	f107 0320 	add.w	r3, r7, #32
 800416c:	4413      	add	r3, r2
 800416e:	4a12      	ldr	r2, [pc, #72]	; (80041b8 <logSensor+0x230>)
 8004170:	461d      	mov	r5, r3
 8004172:	4614      	mov	r4, r2
 8004174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004176:	6028      	str	r0, [r5, #0]
 8004178:	6069      	str	r1, [r5, #4]
 800417a:	60aa      	str	r2, [r5, #8]
 800417c:	60eb      	str	r3, [r5, #12]
 800417e:	6820      	ldr	r0, [r4, #0]
 8004180:	6128      	str	r0, [r5, #16]
 8004182:	7923      	ldrb	r3, [r4, #4]
 8004184:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8004186:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004188:	4b0c      	ldr	r3, [pc, #48]	; (80041bc <logSensor+0x234>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	f107 0120 	add.w	r1, r7, #32
 8004190:	2300      	movs	r3, #0
 8004192:	2200      	movs	r2, #0
 8004194:	f012 fa10 	bl	80165b8 <osMessageQueuePut>
 8004198:	4603      	mov	r3, r0
}
 800419a:	4618      	mov	r0, r3
 800419c:	37cc      	adds	r7, #204	; 0xcc
 800419e:	46bd      	mov	sp, r7
 80041a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a2:	bf00      	nop
 80041a4:	0801cf74 	.word	0x0801cf74
 80041a8:	0801cf84 	.word	0x0801cf84
 80041ac:	0801cf94 	.word	0x0801cf94
 80041b0:	0801cfb4 	.word	0x0801cfb4
 80041b4:	0801cfdc 	.word	0x0801cfdc
 80041b8:	0801cff0 	.word	0x0801cff0
 80041bc:	20017e90 	.word	0x20017e90

080041c0 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b0ac      	sub	sp, #176	; 0xb0
 80041c4:	af02      	add	r7, sp, #8
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	4638      	mov	r0, r7
 80041ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80041ce:	f107 0310 	add.w	r3, r7, #16
 80041d2:	2296      	movs	r2, #150	; 0x96
 80041d4:	2100      	movs	r1, #0
 80041d6:	4618      	mov	r0, r3
 80041d8:	f016 fa37 	bl	801a64a <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 80041dc:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 80041de:	f107 0010 	add.w	r0, r7, #16
 80041e2:	9301      	str	r3, [sp, #4]
 80041e4:	2302      	movs	r3, #2
 80041e6:	9300      	str	r3, [sp, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	4a08      	ldr	r2, [pc, #32]	; (800420c <logRocketState+0x4c>)
 80041ec:	2196      	movs	r1, #150	; 0x96
 80041ee:	f016 faed 	bl	801a7cc <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80041f2:	4b07      	ldr	r3, [pc, #28]	; (8004210 <logRocketState+0x50>)
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	f107 0110 	add.w	r1, r7, #16
 80041fa:	2300      	movs	r3, #0
 80041fc:	2200      	movs	r2, #0
 80041fe:	f012 f9db 	bl	80165b8 <osMessageQueuePut>
 8004202:	4603      	mov	r3, r0
}
 8004204:	4618      	mov	r0, r3
 8004206:	37a8      	adds	r7, #168	; 0xa8
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}
 800420c:	0801d008 	.word	0x0801d008
 8004210:	20017e90 	.word	0x20017e90

08004214 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 8004214:	b084      	sub	sp, #16
 8004216:	b580      	push	{r7, lr}
 8004218:	b0ac      	sub	sp, #176	; 0xb0
 800421a:	af04      	add	r7, sp, #16
 800421c:	6078      	str	r0, [r7, #4]
 800421e:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8004222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 8004226:	f107 0308 	add.w	r3, r7, #8
 800422a:	2296      	movs	r2, #150	; 0x96
 800422c:	2100      	movs	r1, #0
 800422e:	4618      	mov	r0, r3
 8004230:	f016 fa0b 	bl	801a64a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 8004234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004238:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800423c:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004240:	f107 0008 	add.w	r0, r7, #8
 8004244:	9103      	str	r1, [sp, #12]
 8004246:	9202      	str	r2, [sp, #8]
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	2303      	movs	r3, #3
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a09      	ldr	r2, [pc, #36]	; (8004278 <logEstimatorVar+0x64>)
 8004252:	2196      	movs	r1, #150	; 0x96
 8004254:	f016 faba 	bl	801a7cc <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004258:	4b08      	ldr	r3, [pc, #32]	; (800427c <logEstimatorVar+0x68>)
 800425a:	6818      	ldr	r0, [r3, #0]
 800425c:	f107 0108 	add.w	r1, r7, #8
 8004260:	2300      	movs	r3, #0
 8004262:	2200      	movs	r2, #0
 8004264:	f012 f9a8 	bl	80165b8 <osMessageQueuePut>
 8004268:	4603      	mov	r3, r0
}
 800426a:	4618      	mov	r0, r3
 800426c:	37a0      	adds	r7, #160	; 0xa0
 800426e:	46bd      	mov	sp, r7
 8004270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004274:	b004      	add	sp, #16
 8004276:	4770      	bx	lr
 8004278:	0801d014 	.word	0x0801d014
 800427c:	20017e90 	.word	0x20017e90

08004280 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8004280:	b580      	push	{r7, lr}
 8004282:	b0ae      	sub	sp, #184	; 0xb8
 8004284:	af04      	add	r7, sp, #16
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 800428e:	f107 0310 	add.w	r3, r7, #16
 8004292:	2296      	movs	r2, #150	; 0x96
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f016 f9d7 	bl	801a64a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 800429c:	f107 0010 	add.w	r0, r7, #16
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	9303      	str	r3, [sp, #12]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	9302      	str	r3, [sp, #8]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	2304      	movs	r3, #4
 80042ae:	9300      	str	r3, [sp, #0]
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	4a08      	ldr	r2, [pc, #32]	; (80042d4 <logControllerOutput+0x54>)
 80042b4:	2196      	movs	r1, #150	; 0x96
 80042b6:	f016 fa89 	bl	801a7cc <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80042ba:	4b07      	ldr	r3, [pc, #28]	; (80042d8 <logControllerOutput+0x58>)
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	f107 0110 	add.w	r1, r7, #16
 80042c2:	2300      	movs	r3, #0
 80042c4:	2200      	movs	r2, #0
 80042c6:	f012 f977 	bl	80165b8 <osMessageQueuePut>
 80042ca:	4603      	mov	r3, r0
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	37a8      	adds	r7, #168	; 0xa8
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	0801d014 	.word	0x0801d014
 80042d8:	20017e90 	.word	0x20017e90

080042dc <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 80042dc:	b580      	push	{r7, lr}
 80042de:	b0ae      	sub	sp, #184	; 0xb8
 80042e0:	af04      	add	r7, sp, #16
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 80042e8:	f107 0310 	add.w	r3, r7, #16
 80042ec:	2296      	movs	r2, #150	; 0x96
 80042ee:	2100      	movs	r1, #0
 80042f0:	4618      	mov	r0, r3
 80042f2:	f016 f9aa 	bl	801a64a <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 80042f6:	f107 0010 	add.w	r0, r7, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	9302      	str	r3, [sp, #8]
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	9301      	str	r3, [sp, #4]
 8004302:	2305      	movs	r3, #5
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	4a08      	ldr	r2, [pc, #32]	; (800432c <logMotor+0x50>)
 800430a:	2196      	movs	r1, #150	; 0x96
 800430c:	f016 fa5e 	bl	801a7cc <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004310:	4b07      	ldr	r3, [pc, #28]	; (8004330 <logMotor+0x54>)
 8004312:	6818      	ldr	r0, [r3, #0]
 8004314:	f107 0110 	add.w	r1, r7, #16
 8004318:	2300      	movs	r3, #0
 800431a:	2200      	movs	r2, #0
 800431c:	f012 f94c 	bl	80165b8 <osMessageQueuePut>
 8004320:	4603      	mov	r3, r0
}
 8004322:	4618      	mov	r0, r3
 8004324:	37a8      	adds	r7, #168	; 0xa8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	0801d028 	.word	0x0801d028
 8004330:	20017e90 	.word	0x20017e90

08004334 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 8004334:	b40f      	push	{r0, r1, r2, r3}
 8004336:	b480      	push	{r7}
 8004338:	b083      	sub	sp, #12
 800433a:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 800433c:	2301      	movs	r3, #1
 800433e:	71fb      	strb	r3, [r7, #7]
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
		osMutexRelease(print_mutex);
	}
#endif
	return ret;
 8004340:	79fb      	ldrb	r3, [r7, #7]
}
 8004342:	4618      	mov	r0, r3
 8004344:	370c      	adds	r7, #12
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	b004      	add	sp, #16
 800434e:	4770      	bx	lr

08004350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004350:	b590      	push	{r4, r7, lr}
 8004352:	b0ad      	sub	sp, #180	; 0xb4
 8004354:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004356:	f003 f9ae 	bl	80076b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800435a:	f000 f9df 	bl	800471c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 800435e:	4ba9      	ldr	r3, [pc, #676]	; (8004604 <main+0x2b4>)
 8004360:	4aa9      	ldr	r2, [pc, #676]	; (8004608 <main+0x2b8>)
 8004362:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8004364:	4ba7      	ldr	r3, [pc, #668]	; (8004604 <main+0x2b4>)
 8004366:	4aa9      	ldr	r2, [pc, #676]	; (800460c <main+0x2bc>)
 8004368:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 800436a:	48a9      	ldr	r0, [pc, #676]	; (8004610 <main+0x2c0>)
 800436c:	f7fd fef4 	bl	8002158 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 8004370:	48a8      	ldr	r0, [pc, #672]	; (8004614 <main+0x2c4>)
 8004372:	f7fe f9af 	bl	80026d4 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004376:	f000 fd2d 	bl	8004dd4 <MX_GPIO_Init>
  MX_DMA_Init();
 800437a:	f000 fcb9 	bl	8004cf0 <MX_DMA_Init>
  MX_SPI3_Init();
 800437e:	f000 fb8d 	bl	8004a9c <MX_SPI3_Init>
  MX_SPI1_Init();
 8004382:	f000 fb17 	bl	80049b4 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8004386:	f000 faf5 	bl	8004974 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 800438a:	f000 fb4d 	bl	8004a28 <MX_SPI2_Init>
  MX_FATFS_Init();
 800438e:	f00c fe03 	bl	8010f98 <MX_FATFS_Init>
  MX_UART7_Init();
 8004392:	f000 fbed 	bl	8004b70 <MX_UART7_Init>
  MX_USART1_UART_Init();
 8004396:	f000 fc1b 	bl	8004bd0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800439a:	f000 fc49 	bl	8004c30 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800439e:	f000 fc77 	bl	8004c90 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80043a2:	f000 fa55 	bl	8004850 <MX_ADC1_Init>
  MX_UART4_Init();
 80043a6:	f000 fbb3 	bl	8004b10 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 80043aa:	f015 fbc7 	bl	8019b3c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80043ae:	f011 fbd1 	bl	8015b54 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 80043b2:	4b99      	ldr	r3, [pc, #612]	; (8004618 <main+0x2c8>)
 80043b4:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80043b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 80043be:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f011 fd98 	bl	8015ef8 <osMutexNew>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b94      	ldr	r3, [pc, #592]	; (800461c <main+0x2cc>)
 80043cc:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 80043ce:	4b94      	ldr	r3, [pc, #592]	; (8004620 <main+0x2d0>)
 80043d0:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80043d4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043d6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 80043da:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80043de:	4618      	mov	r0, r3
 80043e0:	f011 fd8a 	bl	8015ef8 <osMutexNew>
 80043e4:	4602      	mov	r2, r0
 80043e6:	4b8f      	ldr	r3, [pc, #572]	; (8004624 <main+0x2d4>)
 80043e8:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 80043ea:	4b8f      	ldr	r3, [pc, #572]	; (8004628 <main+0x2d8>)
 80043ec:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80043f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 80043f6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043fa:	4618      	mov	r0, r3
 80043fc:	f011 fd7c 	bl	8015ef8 <osMutexNew>
 8004400:	4602      	mov	r2, r0
 8004402:	4b8a      	ldr	r3, [pc, #552]	; (800462c <main+0x2dc>)
 8004404:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8004406:	4b8a      	ldr	r3, [pc, #552]	; (8004630 <main+0x2e0>)
 8004408:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800440c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800440e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 8004412:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004416:	4618      	mov	r0, r3
 8004418:	f011 fd6e 	bl	8015ef8 <osMutexNew>
 800441c:	4602      	mov	r2, r0
 800441e:	4b85      	ldr	r3, [pc, #532]	; (8004634 <main+0x2e4>)
 8004420:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 8004422:	4b85      	ldr	r3, [pc, #532]	; (8004638 <main+0x2e8>)
 8004424:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004428:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800442a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 800442e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004432:	4618      	mov	r0, r3
 8004434:	f011 fd60 	bl	8015ef8 <osMutexNew>
 8004438:	4602      	mov	r2, r0
 800443a:	4b80      	ldr	r3, [pc, #512]	; (800463c <main+0x2ec>)
 800443c:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 800443e:	4b80      	ldr	r3, [pc, #512]	; (8004640 <main+0x2f0>)
 8004440:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8004444:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004446:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 800444a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800444e:	4618      	mov	r0, r3
 8004450:	f011 fd52 	bl	8015ef8 <osMutexNew>
 8004454:	4602      	mov	r2, r0
 8004456:	4b7b      	ldr	r3, [pc, #492]	; (8004644 <main+0x2f4>)
 8004458:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 800445a:	4b7b      	ldr	r3, [pc, #492]	; (8004648 <main+0x2f8>)
 800445c:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004460:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004462:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8004466:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800446a:	4618      	mov	r0, r3
 800446c:	f011 fd44 	bl	8015ef8 <osMutexNew>
 8004470:	4602      	mov	r2, r0
 8004472:	4b76      	ldr	r3, [pc, #472]	; (800464c <main+0x2fc>)
 8004474:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 8004476:	4b76      	ldr	r3, [pc, #472]	; (8004650 <main+0x300>)
 8004478:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800447c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800447e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 8004482:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004486:	4618      	mov	r0, r3
 8004488:	f011 fd36 	bl	8015ef8 <osMutexNew>
 800448c:	4602      	mov	r2, r0
 800448e:	4b71      	ldr	r3, [pc, #452]	; (8004654 <main+0x304>)
 8004490:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 8004492:	4b71      	ldr	r3, [pc, #452]	; (8004658 <main+0x308>)
 8004494:	f107 0420 	add.w	r4, r7, #32
 8004498:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800449a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 800449e:	f107 0320 	add.w	r3, r7, #32
 80044a2:	4618      	mov	r0, r3
 80044a4:	f011 fd28 	bl	8015ef8 <osMutexNew>
 80044a8:	4602      	mov	r2, r0
 80044aa:	4b6c      	ldr	r3, [pc, #432]	; (800465c <main+0x30c>)
 80044ac:	601a      	str	r2, [r3, #0]

	/* GPS Mutex */
	const osMutexAttr_t gps_mutex_attr = {
 80044ae:	4b6c      	ldr	r3, [pc, #432]	; (8004660 <main+0x310>)
 80044b0:	f107 0410 	add.w	r4, r7, #16
 80044b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80044ba:	f107 0310 	add.w	r3, r7, #16
 80044be:	4618      	mov	r0, r3
 80044c0:	f011 fd1a 	bl	8015ef8 <osMutexNew>
 80044c4:	4602      	mov	r2, r0
 80044c6:	4b67      	ldr	r3, [pc, #412]	; (8004664 <main+0x314>)
 80044c8:	601a      	str	r2, [r3, #0]

	/* Battery Mutex */
	const osMutexAttr_t battery_mutex_attr = {
 80044ca:	4b67      	ldr	r3, [pc, #412]	; (8004668 <main+0x318>)
 80044cc:	463c      	mov	r4, r7
 80044ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80044d4:	463b      	mov	r3, r7
 80044d6:	4618      	mov	r0, r3
 80044d8:	f011 fd0e 	bl	8015ef8 <osMutexNew>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b63      	ldr	r3, [pc, #396]	; (800466c <main+0x31c>)
 80044e0:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 80044e2:	4b4e      	ldr	r3, [pc, #312]	; (800461c <main+0x2cc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a62      	ldr	r2, [pc, #392]	; (8004670 <main+0x320>)
 80044e8:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 80044ea:	4b4e      	ldr	r3, [pc, #312]	; (8004624 <main+0x2d4>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a61      	ldr	r2, [pc, #388]	; (8004674 <main+0x324>)
 80044f0:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 80044f2:	4b4e      	ldr	r3, [pc, #312]	; (800462c <main+0x2dc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a60      	ldr	r2, [pc, #384]	; (8004678 <main+0x328>)
 80044f8:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 80044fa:	4b54      	ldr	r3, [pc, #336]	; (800464c <main+0x2fc>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a5f      	ldr	r2, [pc, #380]	; (800467c <main+0x32c>)
 8004500:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8004502:	4b50      	ldr	r3, [pc, #320]	; (8004644 <main+0x2f4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a5e      	ldr	r2, [pc, #376]	; (8004680 <main+0x330>)
 8004508:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 800450a:	4b4c      	ldr	r3, [pc, #304]	; (800463c <main+0x2ec>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5d      	ldr	r2, [pc, #372]	; (8004684 <main+0x334>)
 8004510:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8004512:	4b48      	ldr	r3, [pc, #288]	; (8004634 <main+0x2e4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a5c      	ldr	r2, [pc, #368]	; (8004688 <main+0x338>)
 8004518:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 800451a:	4b4e      	ldr	r3, [pc, #312]	; (8004654 <main+0x304>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a5b      	ldr	r2, [pc, #364]	; (800468c <main+0x33c>)
 8004520:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 8004522:	4b4e      	ldr	r3, [pc, #312]	; (800465c <main+0x30c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a5a      	ldr	r2, [pc, #360]	; (8004690 <main+0x340>)
 8004528:	6013      	str	r3, [r2, #0]
	gps_mutex.mutex = gps_mutex_only;
 800452a:	4b4e      	ldr	r3, [pc, #312]	; (8004664 <main+0x314>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a59      	ldr	r2, [pc, #356]	; (8004694 <main+0x344>)
 8004530:	6013      	str	r3, [r2, #0]
	battery_mutex.mutex = battery_mutex_only;
 8004532:	4b4e      	ldr	r3, [pc, #312]	; (800466c <main+0x31c>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a58      	ldr	r2, [pc, #352]	; (8004698 <main+0x348>)
 8004538:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 800453a:	4b36      	ldr	r3, [pc, #216]	; (8004614 <main+0x2c4>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8004540:	4b34      	ldr	r3, [pc, #208]	; (8004614 <main+0x2c4>)
 8004542:	2201      	movs	r2, #1
 8004544:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8004546:	4b55      	ldr	r3, [pc, #340]	; (800469c <main+0x34c>)
 8004548:	229b      	movs	r2, #155	; 0x9b
 800454a:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 800454c:	2200      	movs	r2, #0
 800454e:	2196      	movs	r1, #150	; 0x96
 8004550:	2080      	movs	r0, #128	; 0x80
 8004552:	f011 ffab 	bl	80164ac <osMessageQueueNew>
 8004556:	4602      	mov	r2, r0
 8004558:	4b51      	ldr	r3, [pc, #324]	; (80046a0 <main+0x350>)
 800455a:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800455c:	4a51      	ldr	r2, [pc, #324]	; (80046a4 <main+0x354>)
 800455e:	2100      	movs	r1, #0
 8004560:	4851      	ldr	r0, [pc, #324]	; (80046a8 <main+0x358>)
 8004562:	f011 fbb5 	bl	8015cd0 <osThreadNew>
 8004566:	4602      	mov	r2, r0
 8004568:	4b50      	ldr	r3, [pc, #320]	; (80046ac <main+0x35c>)
 800456a:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 800456c:	4a50      	ldr	r2, [pc, #320]	; (80046b0 <main+0x360>)
 800456e:	2100      	movs	r1, #0
 8004570:	4850      	ldr	r0, [pc, #320]	; (80046b4 <main+0x364>)
 8004572:	f011 fbad 	bl	8015cd0 <osThreadNew>
 8004576:	4602      	mov	r2, r0
 8004578:	4b4f      	ldr	r3, [pc, #316]	; (80046b8 <main+0x368>)
 800457a:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 800457c:	4a4f      	ldr	r2, [pc, #316]	; (80046bc <main+0x36c>)
 800457e:	2100      	movs	r1, #0
 8004580:	484f      	ldr	r0, [pc, #316]	; (80046c0 <main+0x370>)
 8004582:	f011 fba5 	bl	8015cd0 <osThreadNew>
 8004586:	4602      	mov	r2, r0
 8004588:	4b4e      	ldr	r3, [pc, #312]	; (80046c4 <main+0x374>)
 800458a:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 800458c:	4a4e      	ldr	r2, [pc, #312]	; (80046c8 <main+0x378>)
 800458e:	2100      	movs	r1, #0
 8004590:	484e      	ldr	r0, [pc, #312]	; (80046cc <main+0x37c>)
 8004592:	f011 fb9d 	bl	8015cd0 <osThreadNew>
 8004596:	4602      	mov	r2, r0
 8004598:	4b4d      	ldr	r3, [pc, #308]	; (80046d0 <main+0x380>)
 800459a:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 800459c:	4a4d      	ldr	r2, [pc, #308]	; (80046d4 <main+0x384>)
 800459e:	2100      	movs	r1, #0
 80045a0:	484d      	ldr	r0, [pc, #308]	; (80046d8 <main+0x388>)
 80045a2:	f011 fb95 	bl	8015cd0 <osThreadNew>
 80045a6:	4602      	mov	r2, r0
 80045a8:	4b4c      	ldr	r3, [pc, #304]	; (80046dc <main+0x38c>)
 80045aa:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80045ac:	4a4c      	ldr	r2, [pc, #304]	; (80046e0 <main+0x390>)
 80045ae:	2100      	movs	r1, #0
 80045b0:	484c      	ldr	r0, [pc, #304]	; (80046e4 <main+0x394>)
 80045b2:	f011 fb8d 	bl	8015cd0 <osThreadNew>
 80045b6:	4602      	mov	r2, r0
 80045b8:	4b4b      	ldr	r3, [pc, #300]	; (80046e8 <main+0x398>)
 80045ba:	601a      	str	r2, [r3, #0]

  /* creation of task_fsm */
  task_fsmHandle = osThreadNew(vTaskFSM, NULL, &task_fsm_attributes);
 80045bc:	4a4b      	ldr	r2, [pc, #300]	; (80046ec <main+0x39c>)
 80045be:	2100      	movs	r1, #0
 80045c0:	484b      	ldr	r0, [pc, #300]	; (80046f0 <main+0x3a0>)
 80045c2:	f011 fb85 	bl	8015cd0 <osThreadNew>
 80045c6:	4602      	mov	r2, r0
 80045c8:	4b4a      	ldr	r3, [pc, #296]	; (80046f4 <main+0x3a4>)
 80045ca:	601a      	str	r2, [r3, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80045cc:	4a4a      	ldr	r2, [pc, #296]	; (80046f8 <main+0x3a8>)
 80045ce:	2100      	movs	r1, #0
 80045d0:	484a      	ldr	r0, [pc, #296]	; (80046fc <main+0x3ac>)
 80045d2:	f011 fb7d 	bl	8015cd0 <osThreadNew>
 80045d6:	4602      	mov	r2, r0
 80045d8:	4b49      	ldr	r3, [pc, #292]	; (8004700 <main+0x3b0>)
 80045da:	601a      	str	r2, [r3, #0]

  /* creation of task_battery */
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 80045dc:	4a49      	ldr	r2, [pc, #292]	; (8004704 <main+0x3b4>)
 80045de:	2100      	movs	r1, #0
 80045e0:	4849      	ldr	r0, [pc, #292]	; (8004708 <main+0x3b8>)
 80045e2:	f011 fb75 	bl	8015cd0 <osThreadNew>
 80045e6:	4602      	mov	r2, r0
 80045e8:	4b48      	ldr	r3, [pc, #288]	; (800470c <main+0x3bc>)
 80045ea:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 80045ec:	4a48      	ldr	r2, [pc, #288]	; (8004710 <main+0x3c0>)
 80045ee:	2100      	movs	r1, #0
 80045f0:	4848      	ldr	r0, [pc, #288]	; (8004714 <main+0x3c4>)
 80045f2:	f011 fb6d 	bl	8015cd0 <osThreadNew>
 80045f6:	4602      	mov	r2, r0
 80045f8:	4b47      	ldr	r3, [pc, #284]	; (8004718 <main+0x3c8>)
 80045fa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80045fc:	f011 fb00 	bl	8015c00 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8004600:	e7fe      	b.n	8004600 <main+0x2b0>
 8004602:	bf00      	nop
 8004604:	e0042000 	.word	0xe0042000
 8004608:	07e01bff 	.word	0x07e01bff
 800460c:	00070003 	.word	0x00070003
 8004610:	200002ac 	.word	0x200002ac
 8004614:	200002bc 	.word	0x200002bc
 8004618:	0801d0e4 	.word	0x0801d0e4
 800461c:	2000fc50 	.word	0x2000fc50
 8004620:	0801d104 	.word	0x0801d104
 8004624:	20019e94 	.word	0x20019e94
 8004628:	0801d124 	.word	0x0801d124
 800462c:	2000b9b4 	.word	0x2000b9b4
 8004630:	0801d14c 	.word	0x0801d14c
 8004634:	2000fbd8 	.word	0x2000fbd8
 8004638:	0801d174 	.word	0x0801d174
 800463c:	2001c0f0 	.word	0x2001c0f0
 8004640:	0801d194 	.word	0x0801d194
 8004644:	2000fc4c 	.word	0x2000fc4c
 8004648:	0801d1bc 	.word	0x0801d1bc
 800464c:	2000fbe0 	.word	0x2000fbe0
 8004650:	0801d1e0 	.word	0x0801d1e0
 8004654:	2000b9b0 	.word	0x2000b9b0
 8004658:	0801d204 	.word	0x0801d204
 800465c:	2000b9b8 	.word	0x2000b9b8
 8004660:	0801d224 	.word	0x0801d224
 8004664:	20011c54 	.word	0x20011c54
 8004668:	0801d248 	.word	0x0801d248
 800466c:	2000fbdc 	.word	0x2000fbdc
 8004670:	2000faf4 	.word	0x2000faf4
 8004674:	2001c15c 	.word	0x2001c15c
 8004678:	2000fbe4 	.word	0x2000fbe4
 800467c:	2000b9c4 	.word	0x2000b9c4
 8004680:	200095d8 	.word	0x200095d8
 8004684:	2000fa34 	.word	0x2000fa34
 8004688:	20011c58 	.word	0x20011c58
 800468c:	2000b868 	.word	0x2000b868
 8004690:	2000b9bc 	.word	0x2000b9bc
 8004694:	20017da4 	.word	0x20017da4
 8004698:	20009644 	.word	0x20009644
 800469c:	20013ce0 	.word	0x20013ce0
 80046a0:	20017e90 	.word	0x20017e90
 80046a4:	0801d600 	.word	0x0801d600
 80046a8:	08004efd 	.word	0x08004efd
 80046ac:	20009574 	.word	0x20009574
 80046b0:	0801d624 	.word	0x0801d624
 80046b4:	08006df9 	.word	0x08006df9
 80046b8:	2000fa90 	.word	0x2000fa90
 80046bc:	0801d648 	.word	0x0801d648
 80046c0:	080060b9 	.word	0x080060b9
 80046c4:	2001c158 	.word	0x2001c158
 80046c8:	0801d66c 	.word	0x0801d66c
 80046cc:	08006b7d 	.word	0x08006b7d
 80046d0:	2000b9cc 	.word	0x2000b9cc
 80046d4:	0801d690 	.word	0x0801d690
 80046d8:	080067e9 	.word	0x080067e9
 80046dc:	20009808 	.word	0x20009808
 80046e0:	0801d6b4 	.word	0x0801d6b4
 80046e4:	080065f1 	.word	0x080065f1
 80046e8:	2000fa8c 	.word	0x2000fa8c
 80046ec:	0801d6d8 	.word	0x0801d6d8
 80046f0:	08006229 	.word	0x08006229
 80046f4:	2001c154 	.word	0x2001c154
 80046f8:	0801d6fc 	.word	0x0801d6fc
 80046fc:	08006349 	.word	0x08006349
 8004700:	20009510 	.word	0x20009510
 8004704:	0801d720 	.word	0x0801d720
 8004708:	08005c61 	.word	0x08005c61
 800470c:	2001c030 	.word	0x2001c030
 8004710:	0801d744 	.word	0x0801d744
 8004714:	0800723d 	.word	0x0800723d
 8004718:	20017da0 	.word	0x20017da0

0800471c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b0b4      	sub	sp, #208	; 0xd0
 8004720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004722:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004726:	2230      	movs	r2, #48	; 0x30
 8004728:	2100      	movs	r1, #0
 800472a:	4618      	mov	r0, r3
 800472c:	f015 ff8d 	bl	801a64a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004730:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004740:	f107 0308 	add.w	r3, r7, #8
 8004744:	2284      	movs	r2, #132	; 0x84
 8004746:	2100      	movs	r1, #0
 8004748:	4618      	mov	r0, r3
 800474a:	f015 ff7e 	bl	801a64a <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800474e:	4b3d      	ldr	r3, [pc, #244]	; (8004844 <SystemClock_Config+0x128>)
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	4a3c      	ldr	r2, [pc, #240]	; (8004844 <SystemClock_Config+0x128>)
 8004754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004758:	6413      	str	r3, [r2, #64]	; 0x40
 800475a:	4b3a      	ldr	r3, [pc, #232]	; (8004844 <SystemClock_Config+0x128>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004766:	4b38      	ldr	r3, [pc, #224]	; (8004848 <SystemClock_Config+0x12c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800476e:	4a36      	ldr	r2, [pc, #216]	; (8004848 <SystemClock_Config+0x12c>)
 8004770:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004774:	6013      	str	r3, [r2, #0]
 8004776:	4b34      	ldr	r3, [pc, #208]	; (8004848 <SystemClock_Config+0x12c>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800477e:	603b      	str	r3, [r7, #0]
 8004780:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004782:	2301      	movs	r3, #1
 8004784:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004788:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800478c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004790:	2302      	movs	r3, #2
 8004792:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004796:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800479a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800479e:	2304      	movs	r3, #4
 80047a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80047a4:	23a8      	movs	r3, #168	; 0xa8
 80047a6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047aa:	2302      	movs	r3, #2
 80047ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80047b0:	2307      	movs	r3, #7
 80047b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047b6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80047ba:	4618      	mov	r0, r3
 80047bc:	f005 fcd4 	bl	800a168 <HAL_RCC_OscConfig>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d001      	beq.n	80047ca <SystemClock_Config+0xae>
  {
    Error_Handler();
 80047c6:	f000 fbb5 	bl	8004f34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047ca:	230f      	movs	r3, #15
 80047cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80047d0:	2302      	movs	r3, #2
 80047d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80047dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80047e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80047e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80047ec:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80047f0:	2105      	movs	r1, #5
 80047f2:	4618      	mov	r0, r3
 80047f4:	f005 ff5c 	bl	800a6b0 <HAL_RCC_ClockConfig>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80047fe:	f000 fb99 	bl	8004f34 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004802:	4b12      	ldr	r3, [pc, #72]	; (800484c <SystemClock_Config+0x130>)
 8004804:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004806:	2300      	movs	r3, #0
 8004808:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800480a:	2300      	movs	r3, #0
 800480c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800480e:	2300      	movs	r3, #0
 8004810:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004812:	2300      	movs	r3, #0
 8004814:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004816:	2300      	movs	r3, #0
 8004818:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800481a:	2300      	movs	r3, #0
 800481c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004820:	2300      	movs	r3, #0
 8004822:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004826:	f107 0308 	add.w	r3, r7, #8
 800482a:	4618      	mov	r0, r3
 800482c:	f006 f96a 	bl	800ab04 <HAL_RCCEx_PeriphCLKConfig>
 8004830:	4603      	mov	r3, r0
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8004836:	f000 fb7d 	bl	8004f34 <Error_Handler>
  }
}
 800483a:	bf00      	nop
 800483c:	37d0      	adds	r7, #208	; 0xd0
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40023800 	.word	0x40023800
 8004848:	40007000 	.word	0x40007000
 800484c:	00a013c0 	.word	0x00a013c0

08004850 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004856:	463b      	mov	r3, r7
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	609a      	str	r2, [r3, #8]
 8004860:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004862:	4b40      	ldr	r3, [pc, #256]	; (8004964 <MX_ADC1_Init+0x114>)
 8004864:	4a40      	ldr	r2, [pc, #256]	; (8004968 <MX_ADC1_Init+0x118>)
 8004866:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004868:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <MX_ADC1_Init+0x114>)
 800486a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800486e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004870:	4b3c      	ldr	r3, [pc, #240]	; (8004964 <MX_ADC1_Init+0x114>)
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8004876:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <MX_ADC1_Init+0x114>)
 8004878:	2201      	movs	r2, #1
 800487a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800487c:	4b39      	ldr	r3, [pc, #228]	; (8004964 <MX_ADC1_Init+0x114>)
 800487e:	2201      	movs	r2, #1
 8004880:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004882:	4b38      	ldr	r3, [pc, #224]	; (8004964 <MX_ADC1_Init+0x114>)
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800488a:	4b36      	ldr	r3, [pc, #216]	; (8004964 <MX_ADC1_Init+0x114>)
 800488c:	2200      	movs	r2, #0
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004890:	4b34      	ldr	r3, [pc, #208]	; (8004964 <MX_ADC1_Init+0x114>)
 8004892:	4a36      	ldr	r2, [pc, #216]	; (800496c <MX_ADC1_Init+0x11c>)
 8004894:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004896:	4b33      	ldr	r3, [pc, #204]	; (8004964 <MX_ADC1_Init+0x114>)
 8004898:	2200      	movs	r2, #0
 800489a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 800489c:	4b31      	ldr	r3, [pc, #196]	; (8004964 <MX_ADC1_Init+0x114>)
 800489e:	2205      	movs	r2, #5
 80048a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80048a2:	4b30      	ldr	r3, [pc, #192]	; (8004964 <MX_ADC1_Init+0x114>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048aa:	4b2e      	ldr	r3, [pc, #184]	; (8004964 <MX_ADC1_Init+0x114>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048b0:	482c      	ldr	r0, [pc, #176]	; (8004964 <MX_ADC1_Init+0x114>)
 80048b2:	f002 ff4f 	bl	8007754 <HAL_ADC_Init>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d001      	beq.n	80048c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80048bc:	f000 fb3a 	bl	8004f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80048c0:	2308      	movs	r3, #8
 80048c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048c4:	2301      	movs	r3, #1
 80048c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80048c8:	2307      	movs	r3, #7
 80048ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048cc:	463b      	mov	r3, r7
 80048ce:	4619      	mov	r1, r3
 80048d0:	4824      	ldr	r0, [pc, #144]	; (8004964 <MX_ADC1_Init+0x114>)
 80048d2:	f003 f8d9 	bl	8007a88 <HAL_ADC_ConfigChannel>
 80048d6:	4603      	mov	r3, r0
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d001      	beq.n	80048e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80048dc:	f000 fb2a 	bl	8004f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80048e0:	230a      	movs	r3, #10
 80048e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80048e4:	2302      	movs	r3, #2
 80048e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80048e8:	2305      	movs	r3, #5
 80048ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048ec:	463b      	mov	r3, r7
 80048ee:	4619      	mov	r1, r3
 80048f0:	481c      	ldr	r0, [pc, #112]	; (8004964 <MX_ADC1_Init+0x114>)
 80048f2:	f003 f8c9 	bl	8007a88 <HAL_ADC_ConfigChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d001      	beq.n	8004900 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80048fc:	f000 fb1a 	bl	8004f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004900:	230b      	movs	r3, #11
 8004902:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004904:	2303      	movs	r3, #3
 8004906:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004908:	463b      	mov	r3, r7
 800490a:	4619      	mov	r1, r3
 800490c:	4815      	ldr	r0, [pc, #84]	; (8004964 <MX_ADC1_Init+0x114>)
 800490e:	f003 f8bb 	bl	8007a88 <HAL_ADC_ConfigChannel>
 8004912:	4603      	mov	r3, r0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004918:	f000 fb0c 	bl	8004f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800491c:	230f      	movs	r3, #15
 800491e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004920:	2304      	movs	r3, #4
 8004922:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004924:	2307      	movs	r3, #7
 8004926:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004928:	463b      	mov	r3, r7
 800492a:	4619      	mov	r1, r3
 800492c:	480d      	ldr	r0, [pc, #52]	; (8004964 <MX_ADC1_Init+0x114>)
 800492e:	f003 f8ab 	bl	8007a88 <HAL_ADC_ConfigChannel>
 8004932:	4603      	mov	r3, r0
 8004934:	2b00      	cmp	r3, #0
 8004936:	d001      	beq.n	800493c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8004938:	f000 fafc 	bl	8004f34 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800493c:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <MX_ADC1_Init+0x120>)
 800493e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004940:	2305      	movs	r3, #5
 8004942:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004944:	2301      	movs	r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004948:	463b      	mov	r3, r7
 800494a:	4619      	mov	r1, r3
 800494c:	4805      	ldr	r0, [pc, #20]	; (8004964 <MX_ADC1_Init+0x114>)
 800494e:	f003 f89b 	bl	8007a88 <HAL_ADC_ConfigChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8004958:	f000 faec 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800495c:	bf00      	nop
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}
 8004964:	2000fa44 	.word	0x2000fa44
 8004968:	40012000 	.word	0x40012000
 800496c:	0f000001 	.word	0x0f000001
 8004970:	10000012 	.word	0x10000012

08004974 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8004978:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <MX_SDMMC1_SD_Init+0x38>)
 800497a:	4a0d      	ldr	r2, [pc, #52]	; (80049b0 <MX_SDMMC1_SD_Init+0x3c>)
 800497c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800497e:	4b0b      	ldr	r3, [pc, #44]	; (80049ac <MX_SDMMC1_SD_Init+0x38>)
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8004984:	4b09      	ldr	r3, [pc, #36]	; (80049ac <MX_SDMMC1_SD_Init+0x38>)
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <MX_SDMMC1_SD_Init+0x38>)
 800498c:	2200      	movs	r2, #0
 800498e:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8004990:	4b06      	ldr	r3, [pc, #24]	; (80049ac <MX_SDMMC1_SD_Init+0x38>)
 8004992:	2200      	movs	r2, #0
 8004994:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8004996:	4b05      	ldr	r3, [pc, #20]	; (80049ac <MX_SDMMC1_SD_Init+0x38>)
 8004998:	2200      	movs	r2, #0
 800499a:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 800499c:	4b03      	ldr	r3, [pc, #12]	; (80049ac <MX_SDMMC1_SD_Init+0x38>)
 800499e:	2200      	movs	r2, #0
 80049a0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80049a2:	bf00      	nop
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr
 80049ac:	2000b92c 	.word	0x2000b92c
 80049b0:	40012c00 	.word	0x40012c00

080049b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80049b8:	4b19      	ldr	r3, [pc, #100]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049ba:	4a1a      	ldr	r2, [pc, #104]	; (8004a24 <MX_SPI1_Init+0x70>)
 80049bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80049c4:	4b16      	ldr	r3, [pc, #88]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049cc:	4b14      	ldr	r3, [pc, #80]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80049d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049da:	4b11      	ldr	r3, [pc, #68]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049dc:	2200      	movs	r2, #0
 80049de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80049e0:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049e2:	2200      	movs	r2, #0
 80049e4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80049e6:	4b0e      	ldr	r3, [pc, #56]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049e8:	2200      	movs	r2, #0
 80049ea:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f2:	4b0b      	ldr	r3, [pc, #44]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <MX_SPI1_Init+0x6c>)
 80049fa:	2207      	movs	r2, #7
 80049fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <MX_SPI1_Init+0x6c>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a04:	4b06      	ldr	r3, [pc, #24]	; (8004a20 <MX_SPI1_Init+0x6c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a0a:	4805      	ldr	r0, [pc, #20]	; (8004a20 <MX_SPI1_Init+0x6c>)
 8004a0c:	f007 ff26 	bl	800c85c <HAL_SPI_Init>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8004a16:	f000 fa8d 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	20017e2c 	.word	0x20017e2c
 8004a24:	40013000 	.word	0x40013000

08004a28 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a2c:	4b19      	ldr	r3, [pc, #100]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a2e:	4a1a      	ldr	r2, [pc, #104]	; (8004a98 <MX_SPI2_Init+0x70>)
 8004a30:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004a38:	4b16      	ldr	r3, [pc, #88]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a3e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a40:	4b14      	ldr	r3, [pc, #80]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a46:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a4e:	4b11      	ldr	r3, [pc, #68]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8004a54:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a5a:	4b0e      	ldr	r3, [pc, #56]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a66:	4b0b      	ldr	r3, [pc, #44]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004a6c:	4b09      	ldr	r3, [pc, #36]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a6e:	2207      	movs	r2, #7
 8004a70:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a72:	4b08      	ldr	r3, [pc, #32]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a78:	4b06      	ldr	r3, [pc, #24]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a7e:	4805      	ldr	r0, [pc, #20]	; (8004a94 <MX_SPI2_Init+0x6c>)
 8004a80:	f007 feec 	bl	800c85c <HAL_SPI_Init>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d001      	beq.n	8004a8e <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8004a8a:	f000 fa53 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a8e:	bf00      	nop
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	200095e0 	.word	0x200095e0
 8004a98:	40003800 	.word	0x40003800

08004a9c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004aa0:	4b19      	ldr	r3, [pc, #100]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004aa2:	4a1a      	ldr	r2, [pc, #104]	; (8004b0c <MX_SPI3_Init+0x70>)
 8004aa4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8004aa6:	4b18      	ldr	r3, [pc, #96]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004aac:	4b16      	ldr	r3, [pc, #88]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004aae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ab2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ab4:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004ab6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004aba:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004abc:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004ac2:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8004ac8:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004aca:	2200      	movs	r2, #0
 8004acc:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004ada:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004ae0:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004ae2:	2207      	movs	r2, #7
 8004ae4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004ae6:	4b08      	ldr	r3, [pc, #32]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004aec:	4b06      	ldr	r3, [pc, #24]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004af2:	4805      	ldr	r0, [pc, #20]	; (8004b08 <MX_SPI3_Init+0x6c>)
 8004af4:	f007 feb2 	bl	800c85c <HAL_SPI_Init>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d001      	beq.n	8004b02 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8004afe:	f000 fa19 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b02:	bf00      	nop
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	2000f9d0 	.word	0x2000f9d0
 8004b0c:	40003c00 	.word	0x40003c00

08004b10 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004b14:	4b14      	ldr	r3, [pc, #80]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b16:	4a15      	ldr	r2, [pc, #84]	; (8004b6c <MX_UART4_Init+0x5c>)
 8004b18:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004b1a:	4b13      	ldr	r3, [pc, #76]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b20:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004b22:	4b11      	ldr	r3, [pc, #68]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004b28:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004b2e:	4b0e      	ldr	r3, [pc, #56]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b36:	220c      	movs	r2, #12
 8004b38:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b3a:	4b0b      	ldr	r3, [pc, #44]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b40:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b46:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b4c:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004b52:	4805      	ldr	r0, [pc, #20]	; (8004b68 <MX_UART4_Init+0x58>)
 8004b54:	f008 ffbe 	bl	800dad4 <HAL_UART_Init>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004b5e:	f000 f9e9 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004b62:	bf00      	nop
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20017dac 	.word	0x20017dac
 8004b6c:	40004c00 	.word	0x40004c00

08004b70 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004b74:	4b14      	ldr	r3, [pc, #80]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004b76:	4a15      	ldr	r2, [pc, #84]	; (8004bcc <MX_UART7_Init+0x5c>)
 8004b78:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004b7a:	4b13      	ldr	r3, [pc, #76]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004b7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b80:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004b82:	4b11      	ldr	r3, [pc, #68]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004b8e:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004b94:	4b0c      	ldr	r3, [pc, #48]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004b96:	220c      	movs	r2, #12
 8004b98:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ba0:	4b09      	ldr	r3, [pc, #36]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bac:	4b06      	ldr	r3, [pc, #24]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004bb2:	4805      	ldr	r0, [pc, #20]	; (8004bc8 <MX_UART7_Init+0x58>)
 8004bb4:	f008 ff8e 	bl	800dad4 <HAL_UART_Init>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004bbe:	f000 f9b9 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004bc2:	bf00      	nop
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	2000964c 	.word	0x2000964c
 8004bcc:	40007800 	.word	0x40007800

08004bd0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004bd4:	4b14      	ldr	r3, [pc, #80]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004bd6:	4a15      	ldr	r2, [pc, #84]	; (8004c2c <MX_USART1_UART_Init+0x5c>)
 8004bd8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004bda:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004bdc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004be0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004be2:	4b11      	ldr	r3, [pc, #68]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004be4:	2200      	movs	r2, #0
 8004be6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004be8:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004bee:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8004bf4:	4b0c      	ldr	r3, [pc, #48]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004bf6:	2204      	movs	r2, #4
 8004bf8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c00:	4b09      	ldr	r3, [pc, #36]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c06:	4b08      	ldr	r3, [pc, #32]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c0c:	4b06      	ldr	r3, [pc, #24]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c12:	4805      	ldr	r0, [pc, #20]	; (8004c28 <MX_USART1_UART_Init+0x58>)
 8004c14:	f008 ff5e 	bl	800dad4 <HAL_UART_Init>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004c1e:	f000 f989 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c22:	bf00      	nop
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	2000fb58 	.word	0x2000fb58
 8004c2c:	40011000 	.word	0x40011000

08004c30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c34:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c36:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <MX_USART2_UART_Init+0x5c>)
 8004c38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004c3a:	4b13      	ldr	r3, [pc, #76]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c3c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c42:	4b11      	ldr	r3, [pc, #68]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c48:	4b0f      	ldr	r3, [pc, #60]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c50:	2200      	movs	r2, #0
 8004c52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8004c54:	4b0c      	ldr	r3, [pc, #48]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c56:	2204      	movs	r2, #4
 8004c58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c5a:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c60:	4b09      	ldr	r3, [pc, #36]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c62:	2200      	movs	r2, #0
 8004c64:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c66:	4b08      	ldr	r3, [pc, #32]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c6e:	2200      	movs	r2, #0
 8004c70:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004c72:	4805      	ldr	r0, [pc, #20]	; (8004c88 <MX_USART2_UART_Init+0x58>)
 8004c74:	f008 ff2e 	bl	800dad4 <HAL_UART_Init>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004c7e:	f000 f959 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004c82:	bf00      	nop
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	20019ef4 	.word	0x20019ef4
 8004c8c:	40004400 	.word	0x40004400

08004c90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004c94:	4b14      	ldr	r3, [pc, #80]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004c96:	4a15      	ldr	r2, [pc, #84]	; (8004cec <MX_USART3_UART_Init+0x5c>)
 8004c98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004c9a:	4b13      	ldr	r3, [pc, #76]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004c9c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004ca0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004ca2:	4b11      	ldr	r3, [pc, #68]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004caa:	2200      	movs	r2, #0
 8004cac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004cae:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8004cb4:	4b0c      	ldr	r3, [pc, #48]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004cb6:	2204      	movs	r2, #4
 8004cb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cba:	4b0b      	ldr	r3, [pc, #44]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cc0:	4b09      	ldr	r3, [pc, #36]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cc6:	4b08      	ldr	r3, [pc, #32]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ccc:	4b06      	ldr	r3, [pc, #24]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004cce:	2200      	movs	r2, #0
 8004cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004cd2:	4805      	ldr	r0, [pc, #20]	; (8004ce8 <MX_USART3_UART_Init+0x58>)
 8004cd4:	f008 fefe 	bl	800dad4 <HAL_UART_Init>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004cde:	f000 f929 	bl	8004f34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004ce2:	bf00      	nop
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	2000972c 	.word	0x2000972c
 8004cec:	40004800 	.word	0x40004800

08004cf0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b082      	sub	sp, #8
 8004cf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <MX_DMA_Init+0xe0>)
 8004cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfa:	4a35      	ldr	r2, [pc, #212]	; (8004dd0 <MX_DMA_Init+0xe0>)
 8004cfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d00:	6313      	str	r3, [r2, #48]	; 0x30
 8004d02:	4b33      	ldr	r3, [pc, #204]	; (8004dd0 <MX_DMA_Init+0xe0>)
 8004d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d0a:	607b      	str	r3, [r7, #4]
 8004d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d0e:	4b30      	ldr	r3, [pc, #192]	; (8004dd0 <MX_DMA_Init+0xe0>)
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	4a2f      	ldr	r2, [pc, #188]	; (8004dd0 <MX_DMA_Init+0xe0>)
 8004d14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d18:	6313      	str	r3, [r2, #48]	; 0x30
 8004d1a:	4b2d      	ldr	r3, [pc, #180]	; (8004dd0 <MX_DMA_Init+0xe0>)
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d22:	603b      	str	r3, [r7, #0]
 8004d24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8004d26:	2200      	movs	r2, #0
 8004d28:	2105      	movs	r1, #5
 8004d2a:	200b      	movs	r0, #11
 8004d2c:	f003 fa2a 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004d30:	200b      	movs	r0, #11
 8004d32:	f003 fa43 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004d36:	2200      	movs	r2, #0
 8004d38:	2105      	movs	r1, #5
 8004d3a:	200c      	movs	r0, #12
 8004d3c:	f003 fa22 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004d40:	200c      	movs	r0, #12
 8004d42:	f003 fa3b 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2105      	movs	r1, #5
 8004d4a:	200d      	movs	r0, #13
 8004d4c:	f003 fa1a 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004d50:	200d      	movs	r0, #13
 8004d52:	f003 fa33 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004d56:	2200      	movs	r2, #0
 8004d58:	2105      	movs	r1, #5
 8004d5a:	200e      	movs	r0, #14
 8004d5c:	f003 fa12 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004d60:	200e      	movs	r0, #14
 8004d62:	f003 fa2b 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2105      	movs	r1, #5
 8004d6a:	2010      	movs	r0, #16
 8004d6c:	f003 fa0a 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004d70:	2010      	movs	r0, #16
 8004d72:	f003 fa23 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2105      	movs	r1, #5
 8004d7a:	2038      	movs	r0, #56	; 0x38
 8004d7c:	f003 fa02 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004d80:	2038      	movs	r0, #56	; 0x38
 8004d82:	f003 fa1b 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2105      	movs	r1, #5
 8004d8a:	203a      	movs	r0, #58	; 0x3a
 8004d8c:	f003 f9fa 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004d90:	203a      	movs	r0, #58	; 0x3a
 8004d92:	f003 fa13 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2105      	movs	r1, #5
 8004d9a:	203b      	movs	r0, #59	; 0x3b
 8004d9c:	f003 f9f2 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004da0:	203b      	movs	r0, #59	; 0x3b
 8004da2:	f003 fa0b 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2105      	movs	r1, #5
 8004daa:	203c      	movs	r0, #60	; 0x3c
 8004dac:	f003 f9ea 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004db0:	203c      	movs	r0, #60	; 0x3c
 8004db2:	f003 fa03 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2105      	movs	r1, #5
 8004dba:	2045      	movs	r0, #69	; 0x45
 8004dbc:	f003 f9e2 	bl	8008184 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004dc0:	2045      	movs	r0, #69	; 0x45
 8004dc2:	f003 f9fb 	bl	80081bc <HAL_NVIC_EnableIRQ>

}
 8004dc6:	bf00      	nop
 8004dc8:	3708      	adds	r7, #8
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800

08004dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b08c      	sub	sp, #48	; 0x30
 8004dd8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dda:	f107 031c 	add.w	r3, r7, #28
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]
 8004de2:	605a      	str	r2, [r3, #4]
 8004de4:	609a      	str	r2, [r3, #8]
 8004de6:	60da      	str	r2, [r3, #12]
 8004de8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004dea:	4b40      	ldr	r3, [pc, #256]	; (8004eec <MX_GPIO_Init+0x118>)
 8004dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dee:	4a3f      	ldr	r2, [pc, #252]	; (8004eec <MX_GPIO_Init+0x118>)
 8004df0:	f043 0304 	orr.w	r3, r3, #4
 8004df4:	6313      	str	r3, [r2, #48]	; 0x30
 8004df6:	4b3d      	ldr	r3, [pc, #244]	; (8004eec <MX_GPIO_Init+0x118>)
 8004df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	61bb      	str	r3, [r7, #24]
 8004e00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e02:	4b3a      	ldr	r3, [pc, #232]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e06:	4a39      	ldr	r2, [pc, #228]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e0e:	4b37      	ldr	r3, [pc, #220]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e16:	617b      	str	r3, [r7, #20]
 8004e18:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e1a:	4b34      	ldr	r3, [pc, #208]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	4a33      	ldr	r2, [pc, #204]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e20:	f043 0301 	orr.w	r3, r3, #1
 8004e24:	6313      	str	r3, [r2, #48]	; 0x30
 8004e26:	4b31      	ldr	r3, [pc, #196]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e32:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e38:	f043 0302 	orr.w	r3, r3, #2
 8004e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3e:	4b2b      	ldr	r3, [pc, #172]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	60fb      	str	r3, [r7, #12]
 8004e48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e4a:	4b28      	ldr	r3, [pc, #160]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	4a27      	ldr	r2, [pc, #156]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e50:	f043 0310 	orr.w	r3, r3, #16
 8004e54:	6313      	str	r3, [r2, #48]	; 0x30
 8004e56:	4b25      	ldr	r3, [pc, #148]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	60bb      	str	r3, [r7, #8]
 8004e60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e62:	4b22      	ldr	r3, [pc, #136]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a21      	ldr	r2, [pc, #132]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e68:	f043 0308 	orr.w	r3, r3, #8
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <MX_GPIO_Init+0x118>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0308 	and.w	r3, r3, #8
 8004e76:	607b      	str	r3, [r7, #4]
 8004e78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	481c      	ldr	r0, [pc, #112]	; (8004ef0 <MX_GPIO_Init+0x11c>)
 8004e80:	f003 ff80 	bl	8008d84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004e84:	2200      	movs	r2, #0
 8004e86:	f643 0103 	movw	r1, #14339	; 0x3803
 8004e8a:	481a      	ldr	r0, [pc, #104]	; (8004ef4 <MX_GPIO_Init+0x120>)
 8004e8c:	f003 ff7a 	bl	8008d84 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004e94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e96:	2300      	movs	r3, #0
 8004e98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e9e:	f107 031c 	add.w	r3, r7, #28
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	4814      	ldr	r0, [pc, #80]	; (8004ef8 <MX_GPIO_Init+0x124>)
 8004ea6:	f003 fdab 	bl	8008a00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PW_HOLD_Pin */
  GPIO_InitStruct.Pin = PW_HOLD_Pin;
 8004eaa:	2302      	movs	r3, #2
 8004eac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PW_HOLD_GPIO_Port, &GPIO_InitStruct);
 8004eba:	f107 031c 	add.w	r3, r7, #28
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	480b      	ldr	r0, [pc, #44]	; (8004ef0 <MX_GPIO_Init+0x11c>)
 8004ec2:	f003 fd9d 	bl	8008a00 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin BUZZER_Pin LED1_Pin 
                           LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004ec6:	f643 0303 	movw	r3, #14339	; 0x3803
 8004eca:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ed8:	f107 031c 	add.w	r3, r7, #28
 8004edc:	4619      	mov	r1, r3
 8004ede:	4805      	ldr	r0, [pc, #20]	; (8004ef4 <MX_GPIO_Init+0x120>)
 8004ee0:	f003 fd8e 	bl	8008a00 <HAL_GPIO_Init>

}
 8004ee4:	bf00      	nop
 8004ee6:	3730      	adds	r7, #48	; 0x30
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	40020400 	.word	0x40020400
 8004ef4:	40020c00 	.word	0x40020c00
 8004ef8:	40020800 	.word	0x40020800

08004efc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004f04:	f014 fe1a 	bl	8019b3c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8004f08:	2001      	movs	r0, #1
 8004f0a:	f010 ff87 	bl	8015e1c <osDelay>
 8004f0e:	e7fb      	b.n	8004f08 <StartDefaultTask+0xc>

08004f10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a04      	ldr	r2, [pc, #16]	; (8004f30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f22:	f002 fbd5 	bl	80076d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f26:	bf00      	nop
 8004f28:	3708      	adds	r7, #8
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40010000 	.word	0x40010000

08004f34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f34:	b480      	push	{r7}
 8004f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004f38:	bf00      	nop
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
	...

08004f44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b082      	sub	sp, #8
 8004f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f4a:	4b11      	ldr	r3, [pc, #68]	; (8004f90 <HAL_MspInit+0x4c>)
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4e:	4a10      	ldr	r2, [pc, #64]	; (8004f90 <HAL_MspInit+0x4c>)
 8004f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f54:	6413      	str	r3, [r2, #64]	; 0x40
 8004f56:	4b0e      	ldr	r3, [pc, #56]	; (8004f90 <HAL_MspInit+0x4c>)
 8004f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	607b      	str	r3, [r7, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_MspInit+0x4c>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_MspInit+0x4c>)
 8004f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <HAL_MspInit+0x4c>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	210f      	movs	r1, #15
 8004f7e:	f06f 0001 	mvn.w	r0, #1
 8004f82:	f003 f8ff 	bl	8008184 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f86:	bf00      	nop
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40023800 	.word	0x40023800

08004f94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b08a      	sub	sp, #40	; 0x28
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f9c:	f107 0314 	add.w	r3, r7, #20
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	605a      	str	r2, [r3, #4]
 8004fa6:	609a      	str	r2, [r3, #8]
 8004fa8:	60da      	str	r2, [r3, #12]
 8004faa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a39      	ldr	r2, [pc, #228]	; (8005098 <HAL_ADC_MspInit+0x104>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d16b      	bne.n	800508e <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fb6:	4b39      	ldr	r3, [pc, #228]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	4a38      	ldr	r2, [pc, #224]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc0:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc2:	4b36      	ldr	r3, [pc, #216]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fca:	613b      	str	r3, [r7, #16]
 8004fcc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fce:	4b33      	ldr	r3, [pc, #204]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd2:	4a32      	ldr	r2, [pc, #200]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fd4:	f043 0304 	orr.w	r3, r3, #4
 8004fd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004fda:	4b30      	ldr	r3, [pc, #192]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fde:	f003 0304 	and.w	r3, r3, #4
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fe6:	4b2d      	ldr	r3, [pc, #180]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fea:	4a2c      	ldr	r2, [pc, #176]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004fec:	f043 0302 	orr.w	r3, r3, #2
 8004ff0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ff2:	4b2a      	ldr	r3, [pc, #168]	; (800509c <HAL_ADC_MspInit+0x108>)
 8004ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff6:	f003 0302 	and.w	r3, r3, #2
 8004ffa:	60bb      	str	r3, [r7, #8]
 8004ffc:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
 8004ffe:	2323      	movs	r3, #35	; 0x23
 8005000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005002:	2303      	movs	r3, #3
 8005004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005006:	2300      	movs	r3, #0
 8005008:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800500a:	f107 0314 	add.w	r3, r7, #20
 800500e:	4619      	mov	r1, r3
 8005010:	4823      	ldr	r0, [pc, #140]	; (80050a0 <HAL_ADC_MspInit+0x10c>)
 8005012:	f003 fcf5 	bl	8008a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 8005016:	2301      	movs	r3, #1
 8005018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800501a:	2303      	movs	r3, #3
 800501c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800501e:	2300      	movs	r3, #0
 8005020:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 8005022:	f107 0314 	add.w	r3, r7, #20
 8005026:	4619      	mov	r1, r3
 8005028:	481e      	ldr	r0, [pc, #120]	; (80050a4 <HAL_ADC_MspInit+0x110>)
 800502a:	f003 fce9 	bl	8008a00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 800502e:	4b1e      	ldr	r3, [pc, #120]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005030:	4a1e      	ldr	r2, [pc, #120]	; (80050ac <HAL_ADC_MspInit+0x118>)
 8005032:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8005034:	4b1c      	ldr	r3, [pc, #112]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005036:	2200      	movs	r2, #0
 8005038:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800503a:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 800503c:	2200      	movs	r2, #0
 800503e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005040:	4b19      	ldr	r3, [pc, #100]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005042:	2200      	movs	r2, #0
 8005044:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005046:	4b18      	ldr	r3, [pc, #96]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005048:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800504c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800504e:	4b16      	ldr	r3, [pc, #88]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005050:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005054:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005056:	4b14      	ldr	r3, [pc, #80]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005058:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800505c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800505e:	4b12      	ldr	r3, [pc, #72]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005064:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005066:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005068:	2200      	movs	r2, #0
 800506a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800506c:	4b0e      	ldr	r3, [pc, #56]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 800506e:	2200      	movs	r2, #0
 8005070:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005072:	480d      	ldr	r0, [pc, #52]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005074:	f003 f8b0 	bl	80081d8 <HAL_DMA_Init>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 800507e:	f7ff ff59 	bl	8004f34 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
 8005088:	4a07      	ldr	r2, [pc, #28]	; (80050a8 <HAL_ADC_MspInit+0x114>)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800508e:	bf00      	nop
 8005090:	3728      	adds	r7, #40	; 0x28
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	40012000 	.word	0x40012000
 800509c:	40023800 	.word	0x40023800
 80050a0:	40020800 	.word	0x40020800
 80050a4:	40020400 	.word	0x40020400
 80050a8:	2000fbec 	.word	0x2000fbec
 80050ac:	40026470 	.word	0x40026470

080050b0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b08a      	sub	sp, #40	; 0x28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b8:	f107 0314 	add.w	r3, r7, #20
 80050bc:	2200      	movs	r2, #0
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	605a      	str	r2, [r3, #4]
 80050c2:	609a      	str	r2, [r3, #8]
 80050c4:	60da      	str	r2, [r3, #12]
 80050c6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a65      	ldr	r2, [pc, #404]	; (8005264 <HAL_SD_MspInit+0x1b4>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	f040 80c3 	bne.w	800525a <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80050d4:	4b64      	ldr	r3, [pc, #400]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 80050d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050d8:	4a63      	ldr	r2, [pc, #396]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 80050da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050de:	6453      	str	r3, [r2, #68]	; 0x44
 80050e0:	4b61      	ldr	r3, [pc, #388]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 80050e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050e8:	613b      	str	r3, [r7, #16]
 80050ea:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050ec:	4b5e      	ldr	r3, [pc, #376]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 80050ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f0:	4a5d      	ldr	r2, [pc, #372]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 80050f2:	f043 0304 	orr.w	r3, r3, #4
 80050f6:	6313      	str	r3, [r2, #48]	; 0x30
 80050f8:	4b5b      	ldr	r3, [pc, #364]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 80050fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050fc:	f003 0304 	and.w	r3, r3, #4
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005104:	4b58      	ldr	r3, [pc, #352]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 8005106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005108:	4a57      	ldr	r2, [pc, #348]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 800510a:	f043 0308 	orr.w	r3, r3, #8
 800510e:	6313      	str	r3, [r2, #48]	; 0x30
 8005110:	4b55      	ldr	r3, [pc, #340]	; (8005268 <HAL_SD_MspInit+0x1b8>)
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	60bb      	str	r3, [r7, #8]
 800511a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 800511c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005120:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005122:	2302      	movs	r3, #2
 8005124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800512a:	2303      	movs	r3, #3
 800512c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800512e:	230c      	movs	r3, #12
 8005130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005132:	f107 0314 	add.w	r3, r7, #20
 8005136:	4619      	mov	r1, r3
 8005138:	484c      	ldr	r0, [pc, #304]	; (800526c <HAL_SD_MspInit+0x1bc>)
 800513a:	f003 fc61 	bl	8008a00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800513e:	2304      	movs	r3, #4
 8005140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005146:	2300      	movs	r3, #0
 8005148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514a:	2303      	movs	r3, #3
 800514c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800514e:	230c      	movs	r3, #12
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005152:	f107 0314 	add.w	r3, r7, #20
 8005156:	4619      	mov	r1, r3
 8005158:	4845      	ldr	r0, [pc, #276]	; (8005270 <HAL_SD_MspInit+0x1c0>)
 800515a:	f003 fc51 	bl	8008a00 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 800515e:	4b45      	ldr	r3, [pc, #276]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 8005160:	4a45      	ldr	r2, [pc, #276]	; (8005278 <HAL_SD_MspInit+0x1c8>)
 8005162:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8005164:	4b43      	ldr	r3, [pc, #268]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 8005166:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800516a:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800516c:	4b41      	ldr	r3, [pc, #260]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 800516e:	2200      	movs	r2, #0
 8005170:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005172:	4b40      	ldr	r3, [pc, #256]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 8005174:	2200      	movs	r2, #0
 8005176:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005178:	4b3e      	ldr	r3, [pc, #248]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 800517a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800517e:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005180:	4b3c      	ldr	r3, [pc, #240]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 8005182:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005186:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005188:	4b3a      	ldr	r3, [pc, #232]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 800518a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800518e:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8005190:	4b38      	ldr	r3, [pc, #224]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 8005192:	2220      	movs	r2, #32
 8005194:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005196:	4b37      	ldr	r3, [pc, #220]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 8005198:	2200      	movs	r2, #0
 800519a:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800519c:	4b35      	ldr	r3, [pc, #212]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 800519e:	2204      	movs	r2, #4
 80051a0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051a2:	4b34      	ldr	r3, [pc, #208]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 80051a4:	2203      	movs	r2, #3
 80051a6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80051a8:	4b32      	ldr	r3, [pc, #200]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 80051aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80051ae:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80051b0:	4b30      	ldr	r3, [pc, #192]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 80051b2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80051b8:	482e      	ldr	r0, [pc, #184]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 80051ba:	f003 f80d 	bl	80081d8 <HAL_DMA_Init>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80051c4:	f7ff feb6 	bl	8004f34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	4a2a      	ldr	r2, [pc, #168]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40
 80051ce:	4a29      	ldr	r2, [pc, #164]	; (8005274 <HAL_SD_MspInit+0x1c4>)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80051d4:	4b29      	ldr	r3, [pc, #164]	; (800527c <HAL_SD_MspInit+0x1cc>)
 80051d6:	4a2a      	ldr	r2, [pc, #168]	; (8005280 <HAL_SD_MspInit+0x1d0>)
 80051d8:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80051da:	4b28      	ldr	r3, [pc, #160]	; (800527c <HAL_SD_MspInit+0x1cc>)
 80051dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051e0:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051e2:	4b26      	ldr	r3, [pc, #152]	; (800527c <HAL_SD_MspInit+0x1cc>)
 80051e4:	2240      	movs	r2, #64	; 0x40
 80051e6:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051e8:	4b24      	ldr	r3, [pc, #144]	; (800527c <HAL_SD_MspInit+0x1cc>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051ee:	4b23      	ldr	r3, [pc, #140]	; (800527c <HAL_SD_MspInit+0x1cc>)
 80051f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051f4:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051f6:	4b21      	ldr	r3, [pc, #132]	; (800527c <HAL_SD_MspInit+0x1cc>)
 80051f8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80051fc:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80051fe:	4b1f      	ldr	r3, [pc, #124]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005200:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005204:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8005206:	4b1d      	ldr	r3, [pc, #116]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005208:	2220      	movs	r2, #32
 800520a:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_SD_MspInit+0x1cc>)
 800520e:	2200      	movs	r2, #0
 8005210:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005214:	2204      	movs	r2, #4
 8005216:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005218:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_SD_MspInit+0x1cc>)
 800521a:	2203      	movs	r2, #3
 800521c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005220:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005224:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8005226:	4b15      	ldr	r3, [pc, #84]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005228:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800522c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800522e:	4813      	ldr	r0, [pc, #76]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005230:	f002 ffd2 	bl	80081d8 <HAL_DMA_Init>
 8005234:	4603      	mov	r3, r0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 800523a:	f7ff fe7b 	bl	8004f34 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a0e      	ldr	r2, [pc, #56]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005242:	63da      	str	r2, [r3, #60]	; 0x3c
 8005244:	4a0d      	ldr	r2, [pc, #52]	; (800527c <HAL_SD_MspInit+0x1cc>)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 800524a:	2200      	movs	r2, #0
 800524c:	2105      	movs	r1, #5
 800524e:	2031      	movs	r0, #49	; 0x31
 8005250:	f002 ff98 	bl	8008184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8005254:	2031      	movs	r0, #49	; 0x31
 8005256:	f002 ffb1 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 800525a:	bf00      	nop
 800525c:	3728      	adds	r7, #40	; 0x28
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40012c00 	.word	0x40012c00
 8005268:	40023800 	.word	0x40023800
 800526c:	40020800 	.word	0x40020800
 8005270:	40020c00 	.word	0x40020c00
 8005274:	20013d40 	.word	0x20013d40
 8005278:	400264a0 	.word	0x400264a0
 800527c:	2001c034 	.word	0x2001c034
 8005280:	40026458 	.word	0x40026458

08005284 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08e      	sub	sp, #56	; 0x38
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800528c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
 8005294:	605a      	str	r2, [r3, #4]
 8005296:	609a      	str	r2, [r3, #8]
 8005298:	60da      	str	r2, [r3, #12]
 800529a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a64      	ldr	r2, [pc, #400]	; (8005434 <HAL_SPI_MspInit+0x1b0>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d160      	bne.n	8005368 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052a6:	4b64      	ldr	r3, [pc, #400]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 80052a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052aa:	4a63      	ldr	r2, [pc, #396]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 80052ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052b0:	6453      	str	r3, [r2, #68]	; 0x44
 80052b2:	4b61      	ldr	r3, [pc, #388]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 80052b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052ba:	623b      	str	r3, [r7, #32]
 80052bc:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052be:	4b5e      	ldr	r3, [pc, #376]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 80052c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c2:	4a5d      	ldr	r2, [pc, #372]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 80052c4:	f043 0301 	orr.w	r3, r3, #1
 80052c8:	6313      	str	r3, [r2, #48]	; 0x30
 80052ca:	4b5b      	ldr	r3, [pc, #364]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 80052cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ce:	f003 0301 	and.w	r3, r3, #1
 80052d2:	61fb      	str	r3, [r7, #28]
 80052d4:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 80052d6:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80052da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052dc:	2302      	movs	r3, #2
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	2300      	movs	r3, #0
 80052e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052e4:	2303      	movs	r3, #3
 80052e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052e8:	2305      	movs	r3, #5
 80052ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f0:	4619      	mov	r1, r3
 80052f2:	4852      	ldr	r0, [pc, #328]	; (800543c <HAL_SPI_MspInit+0x1b8>)
 80052f4:	f003 fb84 	bl	8008a00 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80052f8:	4b51      	ldr	r3, [pc, #324]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 80052fa:	4a52      	ldr	r2, [pc, #328]	; (8005444 <HAL_SPI_MspInit+0x1c0>)
 80052fc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80052fe:	4b50      	ldr	r3, [pc, #320]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005300:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8005304:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005306:	4b4e      	ldr	r3, [pc, #312]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005308:	2200      	movs	r2, #0
 800530a:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800530c:	4b4c      	ldr	r3, [pc, #304]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 800530e:	2200      	movs	r2, #0
 8005310:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005312:	4b4b      	ldr	r3, [pc, #300]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005318:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800531a:	4b49      	ldr	r3, [pc, #292]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 800531c:	2200      	movs	r2, #0
 800531e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005320:	4b47      	ldr	r3, [pc, #284]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005322:	2200      	movs	r2, #0
 8005324:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8005326:	4b46      	ldr	r3, [pc, #280]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800532c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800532e:	4b44      	ldr	r3, [pc, #272]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005330:	2200      	movs	r2, #0
 8005332:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005334:	4b42      	ldr	r3, [pc, #264]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005336:	2200      	movs	r2, #0
 8005338:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800533a:	4841      	ldr	r0, [pc, #260]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 800533c:	f002 ff4c 	bl	80081d8 <HAL_DMA_Init>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 8005346:	f7ff fdf5 	bl	8004f34 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a3c      	ldr	r2, [pc, #240]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 800534e:	659a      	str	r2, [r3, #88]	; 0x58
 8005350:	4a3b      	ldr	r2, [pc, #236]	; (8005440 <HAL_SPI_MspInit+0x1bc>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8005356:	2200      	movs	r2, #0
 8005358:	2105      	movs	r1, #5
 800535a:	2023      	movs	r0, #35	; 0x23
 800535c:	f002 ff12 	bl	8008184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005360:	2023      	movs	r0, #35	; 0x23
 8005362:	f002 ff2b 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005366:	e107      	b.n	8005578 <HAL_SPI_MspInit+0x2f4>
  else if(hspi->Instance==SPI2)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a36      	ldr	r2, [pc, #216]	; (8005448 <HAL_SPI_MspInit+0x1c4>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d172      	bne.n	8005458 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005372:	4b31      	ldr	r3, [pc, #196]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005376:	4a30      	ldr	r2, [pc, #192]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 8005378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800537c:	6413      	str	r3, [r2, #64]	; 0x40
 800537e:	4b2e      	ldr	r3, [pc, #184]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800538a:	4b2b      	ldr	r3, [pc, #172]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 800538c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800538e:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 8005390:	f043 0302 	orr.w	r3, r3, #2
 8005394:	6313      	str	r3, [r2, #48]	; 0x30
 8005396:	4b28      	ldr	r3, [pc, #160]	; (8005438 <HAL_SPI_MspInit+0x1b4>)
 8005398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	617b      	str	r3, [r7, #20]
 80053a0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80053a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80053a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a8:	2302      	movs	r3, #2
 80053aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ac:	2300      	movs	r3, #0
 80053ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b0:	2303      	movs	r3, #3
 80053b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053b4:	2305      	movs	r3, #5
 80053b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053bc:	4619      	mov	r1, r3
 80053be:	4823      	ldr	r0, [pc, #140]	; (800544c <HAL_SPI_MspInit+0x1c8>)
 80053c0:	f003 fb1e 	bl	8008a00 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80053c4:	4b22      	ldr	r3, [pc, #136]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053c6:	4a23      	ldr	r2, [pc, #140]	; (8005454 <HAL_SPI_MspInit+0x1d0>)
 80053c8:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80053ca:	4b21      	ldr	r3, [pc, #132]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053cc:	2200      	movs	r2, #0
 80053ce:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053d0:	4b1f      	ldr	r3, [pc, #124]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053d6:	4b1e      	ldr	r3, [pc, #120]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053d8:	2200      	movs	r2, #0
 80053da:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053dc:	4b1c      	ldr	r3, [pc, #112]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053e2:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053e4:	4b1a      	ldr	r3, [pc, #104]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053e6:	2200      	movs	r2, #0
 80053e8:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053ea:	4b19      	ldr	r3, [pc, #100]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80053f0:	4b17      	ldr	r3, [pc, #92]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053f6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80053f8:	4b15      	ldr	r3, [pc, #84]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 80053fa:	2200      	movs	r2, #0
 80053fc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053fe:	4b14      	ldr	r3, [pc, #80]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 8005400:	2200      	movs	r2, #0
 8005402:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005404:	4812      	ldr	r0, [pc, #72]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 8005406:	f002 fee7 	bl	80081d8 <HAL_DMA_Init>
 800540a:	4603      	mov	r3, r0
 800540c:	2b00      	cmp	r3, #0
 800540e:	d001      	beq.n	8005414 <HAL_SPI_MspInit+0x190>
      Error_Handler();
 8005410:	f7ff fd90 	bl	8004f34 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a0e      	ldr	r2, [pc, #56]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 8005418:	659a      	str	r2, [r3, #88]	; 0x58
 800541a:	4a0d      	ldr	r2, [pc, #52]	; (8005450 <HAL_SPI_MspInit+0x1cc>)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005420:	2200      	movs	r2, #0
 8005422:	2105      	movs	r1, #5
 8005424:	2024      	movs	r0, #36	; 0x24
 8005426:	f002 fead 	bl	8008184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800542a:	2024      	movs	r0, #36	; 0x24
 800542c:	f002 fec6 	bl	80081bc <HAL_NVIC_EnableIRQ>
}
 8005430:	e0a2      	b.n	8005578 <HAL_SPI_MspInit+0x2f4>
 8005432:	bf00      	nop
 8005434:	40013000 	.word	0x40013000
 8005438:	40023800 	.word	0x40023800
 800543c:	40020000 	.word	0x40020000
 8005440:	20019fd0 	.word	0x20019fd0
 8005444:	40026410 	.word	0x40026410
 8005448:	40003800 	.word	0x40003800
 800544c:	40020400 	.word	0x40020400
 8005450:	2000b8cc 	.word	0x2000b8cc
 8005454:	40026058 	.word	0x40026058
  else if(hspi->Instance==SPI3)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a48      	ldr	r2, [pc, #288]	; (8005580 <HAL_SPI_MspInit+0x2fc>)
 800545e:	4293      	cmp	r3, r2
 8005460:	f040 808a 	bne.w	8005578 <HAL_SPI_MspInit+0x2f4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005464:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_SPI_MspInit+0x300>)
 8005466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005468:	4a46      	ldr	r2, [pc, #280]	; (8005584 <HAL_SPI_MspInit+0x300>)
 800546a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800546e:	6413      	str	r3, [r2, #64]	; 0x40
 8005470:	4b44      	ldr	r3, [pc, #272]	; (8005584 <HAL_SPI_MspInit+0x300>)
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005478:	613b      	str	r3, [r7, #16]
 800547a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800547c:	4b41      	ldr	r3, [pc, #260]	; (8005584 <HAL_SPI_MspInit+0x300>)
 800547e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005480:	4a40      	ldr	r2, [pc, #256]	; (8005584 <HAL_SPI_MspInit+0x300>)
 8005482:	f043 0301 	orr.w	r3, r3, #1
 8005486:	6313      	str	r3, [r2, #48]	; 0x30
 8005488:	4b3e      	ldr	r3, [pc, #248]	; (8005584 <HAL_SPI_MspInit+0x300>)
 800548a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800548c:	f003 0301 	and.w	r3, r3, #1
 8005490:	60fb      	str	r3, [r7, #12]
 8005492:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005494:	4b3b      	ldr	r3, [pc, #236]	; (8005584 <HAL_SPI_MspInit+0x300>)
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	4a3a      	ldr	r2, [pc, #232]	; (8005584 <HAL_SPI_MspInit+0x300>)
 800549a:	f043 0302 	orr.w	r3, r3, #2
 800549e:	6313      	str	r3, [r2, #48]	; 0x30
 80054a0:	4b38      	ldr	r3, [pc, #224]	; (8005584 <HAL_SPI_MspInit+0x300>)
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	f003 0302 	and.w	r3, r3, #2
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80054ac:	2310      	movs	r3, #16
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b0:	2302      	movs	r3, #2
 80054b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054b4:	2300      	movs	r3, #0
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054b8:	2303      	movs	r3, #3
 80054ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054bc:	2306      	movs	r3, #6
 80054be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054c4:	4619      	mov	r1, r3
 80054c6:	4830      	ldr	r0, [pc, #192]	; (8005588 <HAL_SPI_MspInit+0x304>)
 80054c8:	f003 fa9a 	bl	8008a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054cc:	2304      	movs	r3, #4
 80054ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d0:	2302      	movs	r3, #2
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054d4:	2300      	movs	r3, #0
 80054d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d8:	2303      	movs	r3, #3
 80054da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80054dc:	2307      	movs	r3, #7
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054e4:	4619      	mov	r1, r3
 80054e6:	4829      	ldr	r0, [pc, #164]	; (800558c <HAL_SPI_MspInit+0x308>)
 80054e8:	f003 fa8a 	bl	8008a00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80054ec:	2318      	movs	r3, #24
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f0:	2302      	movs	r3, #2
 80054f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054f4:	2300      	movs	r3, #0
 80054f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f8:	2303      	movs	r3, #3
 80054fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054fc:	2306      	movs	r3, #6
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005504:	4619      	mov	r1, r3
 8005506:	4821      	ldr	r0, [pc, #132]	; (800558c <HAL_SPI_MspInit+0x308>)
 8005508:	f003 fa7a 	bl	8008a00 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 800550c:	4b20      	ldr	r3, [pc, #128]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 800550e:	4a21      	ldr	r2, [pc, #132]	; (8005594 <HAL_SPI_MspInit+0x310>)
 8005510:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 8005512:	4b1f      	ldr	r3, [pc, #124]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005514:	2200      	movs	r2, #0
 8005516:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005518:	4b1d      	ldr	r3, [pc, #116]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 800551a:	2200      	movs	r2, #0
 800551c:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800551e:	4b1c      	ldr	r3, [pc, #112]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005520:	2200      	movs	r2, #0
 8005522:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005524:	4b1a      	ldr	r3, [pc, #104]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005526:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800552a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800552c:	4b18      	ldr	r3, [pc, #96]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 800552e:	2200      	movs	r2, #0
 8005530:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005532:	4b17      	ldr	r3, [pc, #92]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005534:	2200      	movs	r2, #0
 8005536:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8005538:	4b15      	ldr	r3, [pc, #84]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 800553a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800553e:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005540:	4b13      	ldr	r3, [pc, #76]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005542:	2200      	movs	r2, #0
 8005544:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005546:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005548:	2200      	movs	r2, #0
 800554a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 800554c:	4810      	ldr	r0, [pc, #64]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 800554e:	f002 fe43 	bl	80081d8 <HAL_DMA_Init>
 8005552:	4603      	mov	r3, r0
 8005554:	2b00      	cmp	r3, #0
 8005556:	d001      	beq.n	800555c <HAL_SPI_MspInit+0x2d8>
      Error_Handler();
 8005558:	f7ff fcec 	bl	8004f34 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005560:	659a      	str	r2, [r3, #88]	; 0x58
 8005562:	4a0b      	ldr	r2, [pc, #44]	; (8005590 <HAL_SPI_MspInit+0x30c>)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8005568:	2200      	movs	r2, #0
 800556a:	2105      	movs	r1, #5
 800556c:	2033      	movs	r0, #51	; 0x33
 800556e:	f002 fe09 	bl	8008184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8005572:	2033      	movs	r0, #51	; 0x33
 8005574:	f002 fe22 	bl	80081bc <HAL_NVIC_EnableIRQ>
}
 8005578:	bf00      	nop
 800557a:	3738      	adds	r7, #56	; 0x38
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	40003c00 	.word	0x40003c00
 8005584:	40023800 	.word	0x40023800
 8005588:	40020000 	.word	0x40020000
 800558c:	40020400 	.word	0x40020400
 8005590:	2001c0f4 	.word	0x2001c0f4
 8005594:	40026010 	.word	0x40026010

08005598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b092      	sub	sp, #72	; 0x48
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	609a      	str	r2, [r3, #8]
 80055ac:	60da      	str	r2, [r3, #12]
 80055ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a77      	ldr	r2, [pc, #476]	; (8005794 <HAL_UART_MspInit+0x1fc>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d156      	bne.n	8005668 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80055ba:	4b77      	ldr	r3, [pc, #476]	; (8005798 <HAL_UART_MspInit+0x200>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055be:	4a76      	ldr	r2, [pc, #472]	; (8005798 <HAL_UART_MspInit+0x200>)
 80055c0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055c4:	6413      	str	r3, [r2, #64]	; 0x40
 80055c6:	4b74      	ldr	r3, [pc, #464]	; (8005798 <HAL_UART_MspInit+0x200>)
 80055c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055d2:	4b71      	ldr	r3, [pc, #452]	; (8005798 <HAL_UART_MspInit+0x200>)
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4a70      	ldr	r2, [pc, #448]	; (8005798 <HAL_UART_MspInit+0x200>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	6313      	str	r3, [r2, #48]	; 0x30
 80055de:	4b6e      	ldr	r3, [pc, #440]	; (8005798 <HAL_UART_MspInit+0x200>)
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f003 0301 	and.w	r3, r3, #1
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055ea:	2303      	movs	r3, #3
 80055ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ee:	2302      	movs	r3, #2
 80055f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f2:	2300      	movs	r3, #0
 80055f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f6:	2303      	movs	r3, #3
 80055f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80055fa:	2308      	movs	r3, #8
 80055fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005602:	4619      	mov	r1, r3
 8005604:	4865      	ldr	r0, [pc, #404]	; (800579c <HAL_UART_MspInit+0x204>)
 8005606:	f003 f9fb 	bl	8008a00 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800560a:	4b65      	ldr	r3, [pc, #404]	; (80057a0 <HAL_UART_MspInit+0x208>)
 800560c:	4a65      	ldr	r2, [pc, #404]	; (80057a4 <HAL_UART_MspInit+0x20c>)
 800560e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005610:	4b63      	ldr	r3, [pc, #396]	; (80057a0 <HAL_UART_MspInit+0x208>)
 8005612:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005616:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005618:	4b61      	ldr	r3, [pc, #388]	; (80057a0 <HAL_UART_MspInit+0x208>)
 800561a:	2200      	movs	r2, #0
 800561c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800561e:	4b60      	ldr	r3, [pc, #384]	; (80057a0 <HAL_UART_MspInit+0x208>)
 8005620:	2200      	movs	r2, #0
 8005622:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005624:	4b5e      	ldr	r3, [pc, #376]	; (80057a0 <HAL_UART_MspInit+0x208>)
 8005626:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800562a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800562c:	4b5c      	ldr	r3, [pc, #368]	; (80057a0 <HAL_UART_MspInit+0x208>)
 800562e:	2200      	movs	r2, #0
 8005630:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005632:	4b5b      	ldr	r3, [pc, #364]	; (80057a0 <HAL_UART_MspInit+0x208>)
 8005634:	2200      	movs	r2, #0
 8005636:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005638:	4b59      	ldr	r3, [pc, #356]	; (80057a0 <HAL_UART_MspInit+0x208>)
 800563a:	2200      	movs	r2, #0
 800563c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800563e:	4b58      	ldr	r3, [pc, #352]	; (80057a0 <HAL_UART_MspInit+0x208>)
 8005640:	2200      	movs	r2, #0
 8005642:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005644:	4b56      	ldr	r3, [pc, #344]	; (80057a0 <HAL_UART_MspInit+0x208>)
 8005646:	2200      	movs	r2, #0
 8005648:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800564a:	4855      	ldr	r0, [pc, #340]	; (80057a0 <HAL_UART_MspInit+0x208>)
 800564c:	f002 fdc4 	bl	80081d8 <HAL_DMA_Init>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 8005656:	f7ff fc6d 	bl	8004f34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a50      	ldr	r2, [pc, #320]	; (80057a0 <HAL_UART_MspInit+0x208>)
 800565e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005660:	4a4f      	ldr	r2, [pc, #316]	; (80057a0 <HAL_UART_MspInit+0x208>)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005666:	e165      	b.n	8005934 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==UART7)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a4e      	ldr	r2, [pc, #312]	; (80057a8 <HAL_UART_MspInit+0x210>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d131      	bne.n	80056d6 <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 8005672:	4b49      	ldr	r3, [pc, #292]	; (8005798 <HAL_UART_MspInit+0x200>)
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	4a48      	ldr	r2, [pc, #288]	; (8005798 <HAL_UART_MspInit+0x200>)
 8005678:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800567c:	6413      	str	r3, [r2, #64]	; 0x40
 800567e:	4b46      	ldr	r3, [pc, #280]	; (8005798 <HAL_UART_MspInit+0x200>)
 8005680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005682:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005686:	62bb      	str	r3, [r7, #40]	; 0x28
 8005688:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800568a:	4b43      	ldr	r3, [pc, #268]	; (8005798 <HAL_UART_MspInit+0x200>)
 800568c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568e:	4a42      	ldr	r2, [pc, #264]	; (8005798 <HAL_UART_MspInit+0x200>)
 8005690:	f043 0310 	orr.w	r3, r3, #16
 8005694:	6313      	str	r3, [r2, #48]	; 0x30
 8005696:	4b40      	ldr	r3, [pc, #256]	; (8005798 <HAL_UART_MspInit+0x200>)
 8005698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800569a:	f003 0310 	and.w	r3, r3, #16
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80056a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80056a6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056a8:	2302      	movs	r3, #2
 80056aa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ac:	2300      	movs	r3, #0
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b0:	2303      	movs	r3, #3
 80056b2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80056b4:	2308      	movs	r3, #8
 80056b6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056b8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056bc:	4619      	mov	r1, r3
 80056be:	483b      	ldr	r0, [pc, #236]	; (80057ac <HAL_UART_MspInit+0x214>)
 80056c0:	f003 f99e 	bl	8008a00 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2105      	movs	r1, #5
 80056c8:	2052      	movs	r0, #82	; 0x52
 80056ca:	f002 fd5b 	bl	8008184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80056ce:	2052      	movs	r0, #82	; 0x52
 80056d0:	f002 fd74 	bl	80081bc <HAL_NVIC_EnableIRQ>
}
 80056d4:	e12e      	b.n	8005934 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART1)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a35      	ldr	r2, [pc, #212]	; (80057b0 <HAL_UART_MspInit+0x218>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d16d      	bne.n	80057bc <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 80056e0:	4b2d      	ldr	r3, [pc, #180]	; (8005798 <HAL_UART_MspInit+0x200>)
 80056e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e4:	4a2c      	ldr	r2, [pc, #176]	; (8005798 <HAL_UART_MspInit+0x200>)
 80056e6:	f043 0310 	orr.w	r3, r3, #16
 80056ea:	6453      	str	r3, [r2, #68]	; 0x44
 80056ec:	4b2a      	ldr	r3, [pc, #168]	; (8005798 <HAL_UART_MspInit+0x200>)
 80056ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f0:	f003 0310 	and.w	r3, r3, #16
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056f8:	4b27      	ldr	r3, [pc, #156]	; (8005798 <HAL_UART_MspInit+0x200>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	4a26      	ldr	r2, [pc, #152]	; (8005798 <HAL_UART_MspInit+0x200>)
 80056fe:	f043 0301 	orr.w	r3, r3, #1
 8005702:	6313      	str	r3, [r2, #48]	; 0x30
 8005704:	4b24      	ldr	r3, [pc, #144]	; (8005798 <HAL_UART_MspInit+0x200>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005710:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005716:	2302      	movs	r3, #2
 8005718:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800571a:	2300      	movs	r3, #0
 800571c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800571e:	2303      	movs	r3, #3
 8005720:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005722:	2307      	movs	r3, #7
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005726:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800572a:	4619      	mov	r1, r3
 800572c:	481b      	ldr	r0, [pc, #108]	; (800579c <HAL_UART_MspInit+0x204>)
 800572e:	f003 f967 	bl	8008a00 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8005732:	4b20      	ldr	r3, [pc, #128]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 8005734:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <HAL_UART_MspInit+0x220>)
 8005736:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005738:	4b1e      	ldr	r3, [pc, #120]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 800573a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800573e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005740:	4b1c      	ldr	r3, [pc, #112]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 8005742:	2200      	movs	r2, #0
 8005744:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005746:	4b1b      	ldr	r3, [pc, #108]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 8005748:	2200      	movs	r2, #0
 800574a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800574c:	4b19      	ldr	r3, [pc, #100]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 800574e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005752:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005754:	4b17      	ldr	r3, [pc, #92]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 8005756:	2200      	movs	r2, #0
 8005758:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800575a:	4b16      	ldr	r3, [pc, #88]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 800575c:	2200      	movs	r2, #0
 800575e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005760:	4b14      	ldr	r3, [pc, #80]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 8005762:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005766:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005768:	4b12      	ldr	r3, [pc, #72]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 800576a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800576e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005770:	4b10      	ldr	r3, [pc, #64]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 8005772:	2200      	movs	r2, #0
 8005774:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005776:	480f      	ldr	r0, [pc, #60]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 8005778:	f002 fd2e 	bl	80081d8 <HAL_DMA_Init>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	d001      	beq.n	8005786 <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 8005782:	f7ff fbd7 	bl	8004f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 800578a:	66da      	str	r2, [r3, #108]	; 0x6c
 800578c:	4a09      	ldr	r2, [pc, #36]	; (80057b4 <HAL_UART_MspInit+0x21c>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005792:	e0cf      	b.n	8005934 <HAL_UART_MspInit+0x39c>
 8005794:	40004c00 	.word	0x40004c00
 8005798:	40023800 	.word	0x40023800
 800579c:	40020000 	.word	0x40020000
 80057a0:	20009514 	.word	0x20009514
 80057a4:	40026040 	.word	0x40026040
 80057a8:	40007800 	.word	0x40007800
 80057ac:	40021000 	.word	0x40021000
 80057b0:	40011000 	.word	0x40011000
 80057b4:	2000fa94 	.word	0x2000fa94
 80057b8:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a5e      	ldr	r2, [pc, #376]	; (800593c <HAL_UART_MspInit+0x3a4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d158      	bne.n	8005878 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057c6:	4b5e      	ldr	r3, [pc, #376]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	4a5d      	ldr	r2, [pc, #372]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80057cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d0:	6413      	str	r3, [r2, #64]	; 0x40
 80057d2:	4b5b      	ldr	r3, [pc, #364]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80057d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057de:	4b58      	ldr	r3, [pc, #352]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80057e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057e2:	4a57      	ldr	r2, [pc, #348]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80057e4:	f043 0301 	orr.w	r3, r3, #1
 80057e8:	6313      	str	r3, [r2, #48]	; 0x30
 80057ea:	4b55      	ldr	r3, [pc, #340]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80057ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80057f6:	230c      	movs	r3, #12
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fa:	2302      	movs	r3, #2
 80057fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005802:	2303      	movs	r3, #3
 8005804:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005806:	2307      	movs	r3, #7
 8005808:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800580a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800580e:	4619      	mov	r1, r3
 8005810:	484c      	ldr	r0, [pc, #304]	; (8005944 <HAL_UART_MspInit+0x3ac>)
 8005812:	f003 f8f5 	bl	8008a00 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005816:	4b4c      	ldr	r3, [pc, #304]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 8005818:	4a4c      	ldr	r2, [pc, #304]	; (800594c <HAL_UART_MspInit+0x3b4>)
 800581a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800581c:	4b4a      	ldr	r3, [pc, #296]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 800581e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005822:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005824:	4b48      	ldr	r3, [pc, #288]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 8005826:	2200      	movs	r2, #0
 8005828:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800582a:	4b47      	ldr	r3, [pc, #284]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 800582c:	2200      	movs	r2, #0
 800582e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005830:	4b45      	ldr	r3, [pc, #276]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 8005832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005836:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005838:	4b43      	ldr	r3, [pc, #268]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 800583a:	2200      	movs	r2, #0
 800583c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800583e:	4b42      	ldr	r3, [pc, #264]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 8005840:	2200      	movs	r2, #0
 8005842:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005844:	4b40      	ldr	r3, [pc, #256]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 8005846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800584a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800584c:	4b3e      	ldr	r3, [pc, #248]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 800584e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005852:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005854:	4b3c      	ldr	r3, [pc, #240]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 8005856:	2200      	movs	r2, #0
 8005858:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800585a:	483b      	ldr	r0, [pc, #236]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 800585c:	f002 fcbc 	bl	80081d8 <HAL_DMA_Init>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 8005866:	f7ff fb65 	bl	8004f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a36      	ldr	r2, [pc, #216]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 800586e:	66da      	str	r2, [r3, #108]	; 0x6c
 8005870:	4a35      	ldr	r2, [pc, #212]	; (8005948 <HAL_UART_MspInit+0x3b0>)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005876:	e05d      	b.n	8005934 <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART3)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a34      	ldr	r2, [pc, #208]	; (8005950 <HAL_UART_MspInit+0x3b8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d158      	bne.n	8005934 <HAL_UART_MspInit+0x39c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005882:	4b2f      	ldr	r3, [pc, #188]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	4a2e      	ldr	r2, [pc, #184]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 8005888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800588c:	6413      	str	r3, [r2, #64]	; 0x40
 800588e:	4b2c      	ldr	r3, [pc, #176]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005896:	613b      	str	r3, [r7, #16]
 8005898:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800589a:	4b29      	ldr	r3, [pc, #164]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	4a28      	ldr	r2, [pc, #160]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80058a0:	f043 0308 	orr.w	r3, r3, #8
 80058a4:	6313      	str	r3, [r2, #48]	; 0x30
 80058a6:	4b26      	ldr	r3, [pc, #152]	; (8005940 <HAL_UART_MspInit+0x3a8>)
 80058a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058aa:	f003 0308 	and.w	r3, r3, #8
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80058b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058b6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058b8:	2302      	movs	r3, #2
 80058ba:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058bc:	2300      	movs	r3, #0
 80058be:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c0:	2303      	movs	r3, #3
 80058c2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058c4:	2307      	movs	r3, #7
 80058c6:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80058cc:	4619      	mov	r1, r3
 80058ce:	4821      	ldr	r0, [pc, #132]	; (8005954 <HAL_UART_MspInit+0x3bc>)
 80058d0:	f003 f896 	bl	8008a00 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80058d4:	4b20      	ldr	r3, [pc, #128]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 80058d6:	4a21      	ldr	r2, [pc, #132]	; (800595c <HAL_UART_MspInit+0x3c4>)
 80058d8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80058da:	4b1f      	ldr	r3, [pc, #124]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 80058dc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058e2:	4b1d      	ldr	r3, [pc, #116]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058e8:	4b1b      	ldr	r3, [pc, #108]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 80058ea:	2200      	movs	r2, #0
 80058ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058ee:	4b1a      	ldr	r3, [pc, #104]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 80058f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058f6:	4b18      	ldr	r3, [pc, #96]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80058fc:	4b16      	ldr	r3, [pc, #88]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 80058fe:	2200      	movs	r2, #0
 8005900:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005902:	4b15      	ldr	r3, [pc, #84]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 8005904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005908:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800590a:	4b13      	ldr	r3, [pc, #76]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 800590c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005910:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005912:	4b11      	ldr	r3, [pc, #68]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 8005914:	2200      	movs	r2, #0
 8005916:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005918:	480f      	ldr	r0, [pc, #60]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 800591a:	f002 fc5d 	bl	80081d8 <HAL_DMA_Init>
 800591e:	4603      	mov	r3, r0
 8005920:	2b00      	cmp	r3, #0
 8005922:	d001      	beq.n	8005928 <HAL_UART_MspInit+0x390>
      Error_Handler();
 8005924:	f7ff fb06 	bl	8004f34 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a0b      	ldr	r2, [pc, #44]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 800592c:	66da      	str	r2, [r3, #108]	; 0x6c
 800592e:	4a0a      	ldr	r2, [pc, #40]	; (8005958 <HAL_UART_MspInit+0x3c0>)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6393      	str	r3, [r2, #56]	; 0x38
}
 8005934:	bf00      	nop
 8005936:	3748      	adds	r7, #72	; 0x48
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}
 800593c:	40004400 	.word	0x40004400
 8005940:	40023800 	.word	0x40023800
 8005944:	40020000 	.word	0x40020000
 8005948:	20009578 	.word	0x20009578
 800594c:	40026088 	.word	0x40026088
 8005950:	40004800 	.word	0x40004800
 8005954:	40020c00 	.word	0x40020c00
 8005958:	200096cc 	.word	0x200096cc
 800595c:	40026028 	.word	0x40026028

08005960 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	; 0x30
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005968:	2300      	movs	r3, #0
 800596a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800596c:	2300      	movs	r3, #0
 800596e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005970:	2200      	movs	r2, #0
 8005972:	6879      	ldr	r1, [r7, #4]
 8005974:	2019      	movs	r0, #25
 8005976:	f002 fc05 	bl	8008184 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800597a:	2019      	movs	r0, #25
 800597c:	f002 fc1e 	bl	80081bc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005980:	4b1f      	ldr	r3, [pc, #124]	; (8005a00 <HAL_InitTick+0xa0>)
 8005982:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005984:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <HAL_InitTick+0xa0>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	6453      	str	r3, [r2, #68]	; 0x44
 800598c:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <HAL_InitTick+0xa0>)
 800598e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005990:	f003 0301 	and.w	r3, r3, #1
 8005994:	60fb      	str	r3, [r7, #12]
 8005996:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005998:	f107 0210 	add.w	r2, r7, #16
 800599c:	f107 0314 	add.w	r3, r7, #20
 80059a0:	4611      	mov	r1, r2
 80059a2:	4618      	mov	r0, r3
 80059a4:	f005 f87c 	bl	800aaa0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80059a8:	f005 f866 	bl	800aa78 <HAL_RCC_GetPCLK2Freq>
 80059ac:	4603      	mov	r3, r0
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	4a13      	ldr	r2, [pc, #76]	; (8005a04 <HAL_InitTick+0xa4>)
 80059b6:	fba2 2303 	umull	r2, r3, r2, r3
 80059ba:	0c9b      	lsrs	r3, r3, #18
 80059bc:	3b01      	subs	r3, #1
 80059be:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80059c0:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <HAL_InitTick+0xa8>)
 80059c2:	4a12      	ldr	r2, [pc, #72]	; (8005a0c <HAL_InitTick+0xac>)
 80059c4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80059c6:	4b10      	ldr	r3, [pc, #64]	; (8005a08 <HAL_InitTick+0xa8>)
 80059c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059cc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80059ce:	4a0e      	ldr	r2, [pc, #56]	; (8005a08 <HAL_InitTick+0xa8>)
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80059d4:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <HAL_InitTick+0xa8>)
 80059d6:	2200      	movs	r2, #0
 80059d8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059da:	4b0b      	ldr	r3, [pc, #44]	; (8005a08 <HAL_InitTick+0xa8>)
 80059dc:	2200      	movs	r2, #0
 80059de:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80059e0:	4809      	ldr	r0, [pc, #36]	; (8005a08 <HAL_InitTick+0xa8>)
 80059e2:	f007 fe11 	bl	800d608 <HAL_TIM_Base_Init>
 80059e6:	4603      	mov	r3, r0
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d104      	bne.n	80059f6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80059ec:	4806      	ldr	r0, [pc, #24]	; (8005a08 <HAL_InitTick+0xa8>)
 80059ee:	f007 fe41 	bl	800d674 <HAL_TIM_Base_Start_IT>
 80059f2:	4603      	mov	r3, r0
 80059f4:	e000      	b.n	80059f8 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3730      	adds	r7, #48	; 0x30
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}
 8005a00:	40023800 	.word	0x40023800
 8005a04:	431bde83 	.word	0x431bde83
 8005a08:	2001c164 	.word	0x2001c164
 8005a0c:	40010000 	.word	0x40010000

08005a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a22:	e7fe      	b.n	8005a22 <HardFault_Handler+0x4>

08005a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a24:	b480      	push	{r7}
 8005a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a28:	e7fe      	b.n	8005a28 <MemManage_Handler+0x4>

08005a2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a2e:	e7fe      	b.n	8005a2e <BusFault_Handler+0x4>

08005a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a34:	e7fe      	b.n	8005a34 <UsageFault_Handler+0x4>

08005a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a36:	b480      	push	{r7}
 8005a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a3a:	bf00      	nop
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005a48:	4802      	ldr	r0, [pc, #8]	; (8005a54 <DMA1_Stream0_IRQHandler+0x10>)
 8005a4a:	f002 fd65 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005a4e:	bf00      	nop
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	2001c0f4 	.word	0x2001c0f4

08005a58 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005a5c:	4802      	ldr	r0, [pc, #8]	; (8005a68 <DMA1_Stream1_IRQHandler+0x10>)
 8005a5e:	f002 fd5b 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005a62:	bf00      	nop
 8005a64:	bd80      	pop	{r7, pc}
 8005a66:	bf00      	nop
 8005a68:	200096cc 	.word	0x200096cc

08005a6c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005a70:	4802      	ldr	r0, [pc, #8]	; (8005a7c <DMA1_Stream2_IRQHandler+0x10>)
 8005a72:	f002 fd51 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005a76:	bf00      	nop
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20009514 	.word	0x20009514

08005a80 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005a84:	4802      	ldr	r0, [pc, #8]	; (8005a90 <DMA1_Stream3_IRQHandler+0x10>)
 8005a86:	f002 fd47 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005a8a:	bf00      	nop
 8005a8c:	bd80      	pop	{r7, pc}
 8005a8e:	bf00      	nop
 8005a90:	2000b8cc 	.word	0x2000b8cc

08005a94 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005a98:	4802      	ldr	r0, [pc, #8]	; (8005aa4 <DMA1_Stream5_IRQHandler+0x10>)
 8005a9a:	f002 fd3d 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005a9e:	bf00      	nop
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	bf00      	nop
 8005aa4:	20009578 	.word	0x20009578

08005aa8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005aac:	4802      	ldr	r0, [pc, #8]	; (8005ab8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005aae:	f007 fe0b 	bl	800d6c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005ab2:	bf00      	nop
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop
 8005ab8:	2001c164 	.word	0x2001c164

08005abc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005ac0:	4802      	ldr	r0, [pc, #8]	; (8005acc <SPI1_IRQHandler+0x10>)
 8005ac2:	f007 fa05 	bl	800ced0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005ac6:	bf00      	nop
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	20017e2c 	.word	0x20017e2c

08005ad0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005ad4:	4802      	ldr	r0, [pc, #8]	; (8005ae0 <SPI2_IRQHandler+0x10>)
 8005ad6:	f007 f9fb 	bl	800ced0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005ada:	bf00      	nop
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	200095e0 	.word	0x200095e0

08005ae4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8005ae8:	4802      	ldr	r0, [pc, #8]	; (8005af4 <SDMMC1_IRQHandler+0x10>)
 8005aea:	f005 fe33 	bl	800b754 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005aee:	bf00      	nop
 8005af0:	bd80      	pop	{r7, pc}
 8005af2:	bf00      	nop
 8005af4:	2000b92c 	.word	0x2000b92c

08005af8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005afc:	4802      	ldr	r0, [pc, #8]	; (8005b08 <SPI3_IRQHandler+0x10>)
 8005afe:	f007 f9e7 	bl	800ced0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005b02:	bf00      	nop
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop
 8005b08:	2000f9d0 	.word	0x2000f9d0

08005b0c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005b10:	4802      	ldr	r0, [pc, #8]	; (8005b1c <DMA2_Stream0_IRQHandler+0x10>)
 8005b12:	f002 fd01 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005b16:	bf00      	nop
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	20019fd0 	.word	0x20019fd0

08005b20 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005b24:	4802      	ldr	r0, [pc, #8]	; (8005b30 <DMA2_Stream2_IRQHandler+0x10>)
 8005b26:	f002 fcf7 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005b2a:	bf00      	nop
 8005b2c:	bd80      	pop	{r7, pc}
 8005b2e:	bf00      	nop
 8005b30:	2000fa94 	.word	0x2000fa94

08005b34 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005b38:	4802      	ldr	r0, [pc, #8]	; (8005b44 <DMA2_Stream3_IRQHandler+0x10>)
 8005b3a:	f002 fced 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005b3e:	bf00      	nop
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	2001c034 	.word	0x2001c034

08005b48 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b4c:	4802      	ldr	r0, [pc, #8]	; (8005b58 <DMA2_Stream4_IRQHandler+0x10>)
 8005b4e:	f002 fce3 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005b52:	bf00      	nop
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	2000fbec 	.word	0x2000fbec

08005b5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005b60:	4802      	ldr	r0, [pc, #8]	; (8005b6c <OTG_FS_IRQHandler+0x10>)
 8005b62:	f003 fa88 	bl	8009076 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005b66:	bf00      	nop
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	2001df98 	.word	0x2001df98

08005b70 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005b74:	4802      	ldr	r0, [pc, #8]	; (8005b80 <DMA2_Stream6_IRQHandler+0x10>)
 8005b76:	f002 fccf 	bl	8008518 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005b7a:	bf00      	nop
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	20013d40 	.word	0x20013d40

08005b84 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005b88:	4802      	ldr	r0, [pc, #8]	; (8005b94 <UART7_IRQHandler+0x10>)
 8005b8a:	f008 faaf 	bl	800e0ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005b8e:	bf00      	nop
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	2000964c 	.word	0x2000964c

08005b98 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005ba0:	4b11      	ldr	r3, [pc, #68]	; (8005be8 <_sbrk+0x50>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d102      	bne.n	8005bae <_sbrk+0x16>
		heap_end = &end;
 8005ba8:	4b0f      	ldr	r3, [pc, #60]	; (8005be8 <_sbrk+0x50>)
 8005baa:	4a10      	ldr	r2, [pc, #64]	; (8005bec <_sbrk+0x54>)
 8005bac:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005bae:	4b0e      	ldr	r3, [pc, #56]	; (8005be8 <_sbrk+0x50>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <_sbrk+0x50>)
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4413      	add	r3, r2
 8005bbc:	466a      	mov	r2, sp
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d907      	bls.n	8005bd2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005bc2:	f014 fcfd 	bl	801a5c0 <__errno>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	230c      	movs	r3, #12
 8005bca:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	e006      	b.n	8005be0 <_sbrk+0x48>
	}

	heap_end += incr;
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <_sbrk+0x50>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4413      	add	r3, r2
 8005bda:	4a03      	ldr	r2, [pc, #12]	; (8005be8 <_sbrk+0x50>)
 8005bdc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005bde:	68fb      	ldr	r3, [r7, #12]
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3710      	adds	r7, #16
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	200002c8 	.word	0x200002c8
 8005bec:	2001e3a0 	.word	0x2001e3a0

08005bf0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bf4:	4b15      	ldr	r3, [pc, #84]	; (8005c4c <SystemInit+0x5c>)
 8005bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bfa:	4a14      	ldr	r2, [pc, #80]	; (8005c4c <SystemInit+0x5c>)
 8005bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c04:	4b12      	ldr	r3, [pc, #72]	; (8005c50 <SystemInit+0x60>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a11      	ldr	r2, [pc, #68]	; (8005c50 <SystemInit+0x60>)
 8005c0a:	f043 0301 	orr.w	r3, r3, #1
 8005c0e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c10:	4b0f      	ldr	r3, [pc, #60]	; (8005c50 <SystemInit+0x60>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c16:	4b0e      	ldr	r3, [pc, #56]	; (8005c50 <SystemInit+0x60>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	490d      	ldr	r1, [pc, #52]	; (8005c50 <SystemInit+0x60>)
 8005c1c:	4b0d      	ldr	r3, [pc, #52]	; (8005c54 <SystemInit+0x64>)
 8005c1e:	4013      	ands	r3, r2
 8005c20:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005c22:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <SystemInit+0x60>)
 8005c24:	4a0c      	ldr	r2, [pc, #48]	; (8005c58 <SystemInit+0x68>)
 8005c26:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c28:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <SystemInit+0x60>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <SystemInit+0x60>)
 8005c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005c34:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <SystemInit+0x60>)
 8005c36:	2200      	movs	r2, #0
 8005c38:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c3a:	4b04      	ldr	r3, [pc, #16]	; (8005c4c <SystemInit+0x5c>)
 8005c3c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c40:	609a      	str	r2, [r3, #8]
#endif
}
 8005c42:	bf00      	nop
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr
 8005c4c:	e000ed00 	.word	0xe000ed00
 8005c50:	40023800 	.word	0x40023800
 8005c54:	fef6ffff 	.word	0xfef6ffff
 8005c58:	24003010 	.word	0x24003010
 8005c5c:	00000000 	.word	0x00000000

08005c60 <vTaskBattery>:
#include "tasks/task_battery.h"

float get_temp (uint16_t adc_value);


void vTaskBattery(void *argument) {
 8005c60:	b5b0      	push	{r4, r5, r7, lr}
 8005c62:	b09e      	sub	sp, #120	; 0x78
 8005c64:	af02      	add	r7, sp, #8
 8005c66:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	double mah;
	double curr = 0;
 8005c68:	f04f 0300 	mov.w	r3, #0
 8005c6c:	f04f 0400 	mov.w	r4, #0
 8005c70:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	double supp = 0;
 8005c74:	f04f 0300 	mov.w	r3, #0
 8005c78:	f04f 0400 	mov.w	r4, #0
 8005c7c:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double bat = 0;
 8005c80:	f04f 0300 	mov.w	r3, #0
 8005c84:	f04f 0400 	mov.w	r4, #0
 8005c88:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48


	battery_data_t battery_data = { 0 };
 8005c8c:	f107 031c 	add.w	r3, r7, #28
 8005c90:	2200      	movs	r2, #0
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	605a      	str	r2, [r3, #4]
 8005c96:	811a      	strh	r2, [r3, #8]

	int counter = 0;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	647b      	str	r3, [r7, #68]	; 0x44

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005c9c:	f00f ffe6 	bl	8015c6c <osKernelGetTickCount>
 8005ca0:	66f8      	str	r0, [r7, #108]	; 0x6c
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8005ca2:	f010 f80b 	bl	8015cbc <osKernelGetTickFreq>
 8005ca6:	4602      	mov	r2, r0
 8005ca8:	4b6f      	ldr	r3, [pc, #444]	; (8005e68 <vTaskBattery+0x208>)
 8005caa:	fba3 2302 	umull	r2, r3, r3, r2
 8005cae:	091b      	lsrs	r3, r3, #4
 8005cb0:	643b      	str	r3, [r7, #64]	; 0x40

	//ADC init
	uint32_t adc_value[5];

	HAL_ADC_Stop_DMA(&hadc1);
 8005cb2:	486e      	ldr	r0, [pc, #440]	; (8005e6c <vTaskBattery+0x20c>)
 8005cb4:	f001 fe80 	bl	80079b8 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8005cb8:	f107 0308 	add.w	r3, r7, #8
 8005cbc:	2205      	movs	r2, #5
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	486a      	ldr	r0, [pc, #424]	; (8005e6c <vTaskBattery+0x20c>)
 8005cc2:	f001 fd8b 	bl	80077dc <HAL_ADC_Start_DMA>

	osDelay(200);
 8005cc6:	20c8      	movs	r0, #200	; 0xc8
 8005cc8:	f010 f8a8 	bl	8015e1c <osDelay>



	for (;;) {
		tick_count += tick_update;
 8005ccc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd0:	4413      	add	r3, r2
 8005cd2:	66fb      	str	r3, [r7, #108]	; 0x6c

		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f7fa fc34 	bl	8000544 <__aeabi_ui2d>
 8005cdc:	f04f 0200 	mov.w	r2, #0
 8005ce0:	4b63      	ldr	r3, [pc, #396]	; (8005e70 <vTaskBattery+0x210>)
 8005ce2:	f7fa fca9 	bl	8000638 <__aeabi_dmul>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	460c      	mov	r4, r1
 8005cea:	4618      	mov	r0, r3
 8005cec:	4621      	mov	r1, r4
 8005cee:	a358      	add	r3, pc, #352	; (adr r3, 8005e50 <vTaskBattery+0x1f0>)
 8005cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf4:	f7fa fae8 	bl	80002c8 <__aeabi_dsub>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	460c      	mov	r4, r1
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	4621      	mov	r1, r4
 8005d00:	a355      	add	r3, pc, #340	; (adr r3, 8005e58 <vTaskBattery+0x1f8>)
 8005d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d06:	f7fa fdc1 	bl	800088c <__aeabi_ddiv>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	460c      	mov	r4, r1
 8005d0e:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fa fc15 	bl	8000544 <__aeabi_ui2d>
 8005d1a:	f04f 0200 	mov.w	r2, #0
 8005d1e:	4b54      	ldr	r3, [pc, #336]	; (8005e70 <vTaskBattery+0x210>)
 8005d20:	f7fa fc8a 	bl	8000638 <__aeabi_dmul>
 8005d24:	4603      	mov	r3, r0
 8005d26:	460c      	mov	r4, r1
 8005d28:	4618      	mov	r0, r3
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	4602      	mov	r2, r0
 8005d2e:	460b      	mov	r3, r1
 8005d30:	f7fa facc 	bl	80002cc <__adddf3>
 8005d34:	4603      	mov	r3, r0
 8005d36:	460c      	mov	r4, r1
 8005d38:	4618      	mov	r0, r3
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	f7fa ff4c 	bl	8000bd8 <__aeabi_d2f>
 8005d40:	4603      	mov	r3, r0
 8005d42:	637b      	str	r3, [r7, #52]	; 0x34
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7fa fbfc 	bl	8000544 <__aeabi_ui2d>
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	4b47      	ldr	r3, [pc, #284]	; (8005e70 <vTaskBattery+0x210>)
 8005d52:	f7fa fc71 	bl	8000638 <__aeabi_dmul>
 8005d56:	4603      	mov	r3, r0
 8005d58:	460c      	mov	r4, r1
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	4621      	mov	r1, r4
 8005d5e:	a340      	add	r3, pc, #256	; (adr r3, 8005e60 <vTaskBattery+0x200>)
 8005d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d64:	f7fa fc68 	bl	8000638 <__aeabi_dmul>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	4621      	mov	r1, r4
 8005d70:	f7fa ff32 	bl	8000bd8 <__aeabi_d2f>
 8005d74:	4603      	mov	r3, r0
 8005d76:	633b      	str	r3, [r7, #48]	; 0x30
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7fa fbe2 	bl	8000544 <__aeabi_ui2d>
 8005d80:	f04f 0200 	mov.w	r2, #0
 8005d84:	4b3a      	ldr	r3, [pc, #232]	; (8005e70 <vTaskBattery+0x210>)
 8005d86:	f7fa fc57 	bl	8000638 <__aeabi_dmul>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	460c      	mov	r4, r1
 8005d8e:	4618      	mov	r0, r3
 8005d90:	4621      	mov	r1, r4
 8005d92:	a32f      	add	r3, pc, #188	; (adr r3, 8005e50 <vTaskBattery+0x1f0>)
 8005d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d98:	f7fa fa96 	bl	80002c8 <__aeabi_dsub>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	460c      	mov	r4, r1
 8005da0:	4618      	mov	r0, r3
 8005da2:	4621      	mov	r1, r4
 8005da4:	a32c      	add	r3, pc, #176	; (adr r3, 8005e58 <vTaskBattery+0x1f8>)
 8005da6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005daa:	f7fa fd6f 	bl	800088c <__aeabi_ddiv>
 8005dae:	4603      	mov	r3, r0
 8005db0:	460c      	mov	r4, r1
 8005db2:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		get_temp(adc_value[4]); // temp
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f000 f92c 	bl	8006018 <get_temp>

		if ((adc_value[0] | adc_value[1]) == 0){
 8005dc0:	68ba      	ldr	r2, [r7, #8]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d109      	bne.n	8005dde <vTaskBattery+0x17e>
			HAL_ADC_Stop_DMA(&hadc1);
 8005dca:	4828      	ldr	r0, [pc, #160]	; (8005e6c <vTaskBattery+0x20c>)
 8005dcc:	f001 fdf4 	bl	80079b8 <HAL_ADC_Stop_DMA>
			HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8005dd0:	f107 0308 	add.w	r3, r7, #8
 8005dd4:	2205      	movs	r2, #5
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4824      	ldr	r0, [pc, #144]	; (8005e6c <vTaskBattery+0x20c>)
 8005dda:	f001 fcff 	bl	80077dc <HAL_ADC_Start_DMA>
		}
		// Filter adc values
		if (counter < 50) {
 8005dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de0:	2b31      	cmp	r3, #49	; 0x31
 8005de2:	dc47      	bgt.n	8005e74 <vTaskBattery+0x214>
			counter++;
 8005de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005de6:	3301      	adds	r3, #1
 8005de8:	647b      	str	r3, [r7, #68]	; 0x44
			curr += current1 + current2;
 8005dea:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dee:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005df2:	f7fa fa6b 	bl	80002cc <__adddf3>
 8005df6:	4603      	mov	r3, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4623      	mov	r3, r4
 8005dfe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e02:	f7fa fa63 	bl	80002cc <__adddf3>
 8005e06:	4603      	mov	r3, r0
 8005e08:	460c      	mov	r4, r1
 8005e0a:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			supp += supply_voltage;
 8005e0e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e10:	f7fa fbba 	bl	8000588 <__aeabi_f2d>
 8005e14:	4603      	mov	r3, r0
 8005e16:	460c      	mov	r4, r1
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4623      	mov	r3, r4
 8005e1c:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e20:	f7fa fa54 	bl	80002cc <__adddf3>
 8005e24:	4603      	mov	r3, r0
 8005e26:	460c      	mov	r4, r1
 8005e28:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			bat += battery_voltage;
 8005e2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e2e:	f7fa fbab 	bl	8000588 <__aeabi_f2d>
 8005e32:	4603      	mov	r3, r0
 8005e34:	460c      	mov	r4, r1
 8005e36:	461a      	mov	r2, r3
 8005e38:	4623      	mov	r3, r4
 8005e3a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e3e:	f7fa fa45 	bl	80002cc <__adddf3>
 8005e42:	4603      	mov	r3, r0
 8005e44:	460c      	mov	r4, r1
 8005e46:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8005e4a:	e0cc      	b.n	8005fe6 <vTaskBattery+0x386>
 8005e4c:	f3af 8000 	nop.w
 8005e50:	be0ded28 	.word	0xbe0ded28
 8005e54:	3fd69930 	.word	0x3fd69930
 8005e58:	4189374c 	.word	0x4189374c
 8005e5c:	3fd0e560 	.word	0x3fd0e560
 8005e60:	cccccccd 	.word	0xcccccccd
 8005e64:	4014cccc 	.word	0x4014cccc
 8005e68:	51eb851f 	.word	0x51eb851f
 8005e6c:	2000fa44 	.word	0x2000fa44
 8005e70:	3f440000 	.word	0x3f440000
		} else {
			counter = 0;
 8005e74:	2300      	movs	r3, #0
 8005e76:	647b      	str	r3, [r7, #68]	; 0x44
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8005e78:	f04f 0200 	mov.w	r2, #0
 8005e7c:	4b5c      	ldr	r3, [pc, #368]	; (8005ff0 <vTaskBattery+0x390>)
 8005e7e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e82:	f7fa fd03 	bl	800088c <__aeabi_ddiv>
 8005e86:	4603      	mov	r3, r0
 8005e88:	460c      	mov	r4, r1
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	4623      	mov	r3, r4
 8005e8e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e92:	f7fa fa1b 	bl	80002cc <__adddf3>
 8005e96:	4603      	mov	r3, r0
 8005e98:	460c      	mov	r4, r1
 8005e9a:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			battery_data.consumption = (uint16_t)mah;
 8005e9e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005ea2:	f7fa fe79 	bl	8000b98 <__aeabi_d2uiz>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	847b      	strh	r3, [r7, #34]	; 0x22
			battery_data.current = (uint16_t)(curr*1000)/50;
 8005eac:	f04f 0200 	mov.w	r2, #0
 8005eb0:	4b50      	ldr	r3, [pc, #320]	; (8005ff4 <vTaskBattery+0x394>)
 8005eb2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005eb6:	f7fa fbbf 	bl	8000638 <__aeabi_dmul>
 8005eba:	4603      	mov	r3, r0
 8005ebc:	460c      	mov	r4, r1
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	4621      	mov	r1, r4
 8005ec2:	f7fa fe69 	bl	8000b98 <__aeabi_d2uiz>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	b29b      	uxth	r3, r3
 8005eca:	4a4b      	ldr	r2, [pc, #300]	; (8005ff8 <vTaskBattery+0x398>)
 8005ecc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ed0:	091b      	lsrs	r3, r3, #4
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	843b      	strh	r3, [r7, #32]
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	4b46      	ldr	r3, [pc, #280]	; (8005ff4 <vTaskBattery+0x394>)
 8005edc:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ee0:	f7fa fbaa 	bl	8000638 <__aeabi_dmul>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	4618      	mov	r0, r3
 8005eea:	4621      	mov	r1, r4
 8005eec:	f04f 0200 	mov.w	r2, #0
 8005ef0:	4b42      	ldr	r3, [pc, #264]	; (8005ffc <vTaskBattery+0x39c>)
 8005ef2:	f7fa fccb 	bl	800088c <__aeabi_ddiv>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	4625      	mov	r5, r4
 8005efc:	461c      	mov	r4, r3
 8005efe:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005f02:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8006000 <vTaskBattery+0x3a0>
 8005f06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005f0a:	ee16 0a90 	vmov	r0, s13
 8005f0e:	f7fa fb3b 	bl	8000588 <__aeabi_f2d>
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4620      	mov	r0, r4
 8005f18:	4629      	mov	r1, r5
 8005f1a:	f7fa fb8d 	bl	8000638 <__aeabi_dmul>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	460c      	mov	r4, r1
 8005f22:	4618      	mov	r0, r3
 8005f24:	4621      	mov	r1, r4
 8005f26:	f7fa fe37 	bl	8000b98 <__aeabi_d2uiz>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
			battery_data.supply = (uint16_t)(supp * 20);
 8005f30:	f04f 0200 	mov.w	r2, #0
 8005f34:	4b33      	ldr	r3, [pc, #204]	; (8006004 <vTaskBattery+0x3a4>)
 8005f36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f3a:	f7fa fb7d 	bl	8000638 <__aeabi_dmul>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	460c      	mov	r4, r1
 8005f42:	4618      	mov	r0, r3
 8005f44:	4621      	mov	r1, r4
 8005f46:	f7fa fe27 	bl	8000b98 <__aeabi_d2uiz>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	83bb      	strh	r3, [r7, #28]
			battery_data.battery = (uint16_t)(bat * 20);
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	4b2b      	ldr	r3, [pc, #172]	; (8006004 <vTaskBattery+0x3a4>)
 8005f56:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f5a:	f7fa fb6d 	bl	8000638 <__aeabi_dmul>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	460c      	mov	r4, r1
 8005f62:	4618      	mov	r0, r3
 8005f64:	4621      	mov	r1, r4
 8005f66:	f7fa fe17 	bl	8000b98 <__aeabi_d2uiz>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	83fb      	strh	r3, [r7, #30]
			curr = 0;
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f04f 0400 	mov.w	r4, #0
 8005f78:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			bat = 0;
 8005f7c:	f04f 0300 	mov.w	r3, #0
 8005f80:	f04f 0400 	mov.w	r4, #0
 8005f84:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			supp = 0;
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	f04f 0400 	mov.w	r4, #0
 8005f90:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f94:	8bbb      	ldrh	r3, [r7, #28]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f96:	4619      	mov	r1, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f98:	8bfb      	ldrh	r3, [r7, #30]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f9a:	4618      	mov	r0, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f9c:	8c3b      	ldrh	r3, [r7, #32]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f9e:	461c      	mov	r4, r3
					battery_data.consumption, battery_data.power);
 8005fa0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005fa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005fa4:	9201      	str	r2, [sp, #4]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	4623      	mov	r3, r4
 8005faa:	4602      	mov	r2, r0
 8005fac:	4816      	ldr	r0, [pc, #88]	; (8006008 <vTaskBattery+0x3a8>)
 8005fae:	f7fe f9c1 	bl	8004334 <UsbPrint>

			/* Log Battery Power */
			logSensor(osKernelGetTickCount(), 1, BATTERY, &battery_data);
 8005fb2:	f00f fe5b 	bl	8015c6c <osKernelGetTickCount>
 8005fb6:	f107 031c 	add.w	r3, r7, #28
 8005fba:	2204      	movs	r2, #4
 8005fbc:	2101      	movs	r1, #1
 8005fbe:	f7fd ffe3 	bl	8003f88 <logSensor>

			/* Write Data into global Variable */
			if(AcquireMutex(&battery_mutex) == osOK ){
 8005fc2:	4812      	ldr	r0, [pc, #72]	; (800600c <vTaskBattery+0x3ac>)
 8005fc4:	f7fd fed4 	bl	8003d70 <AcquireMutex>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d10b      	bne.n	8005fe6 <vTaskBattery+0x386>
				global_battery_data.battery = battery_data.battery;
 8005fce:	8bfa      	ldrh	r2, [r7, #30]
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <vTaskBattery+0x3b0>)
 8005fd2:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 8005fd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005fd6:	4b0e      	ldr	r3, [pc, #56]	; (8006010 <vTaskBattery+0x3b0>)
 8005fd8:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8005fda:	8c3a      	ldrh	r2, [r7, #32]
 8005fdc:	4b0c      	ldr	r3, [pc, #48]	; (8006010 <vTaskBattery+0x3b0>)
 8005fde:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8005fe0:	480a      	ldr	r0, [pc, #40]	; (800600c <vTaskBattery+0x3ac>)
 8005fe2:	f7fd fedf 	bl	8003da4 <ReleaseMutex>
			}
		}

		/* Sleep */
		osDelayUntil(tick_count);
 8005fe6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fe8:	f00f ff46 	bl	8015e78 <osDelayUntil>
	for (;;) {
 8005fec:	e66e      	b.n	8005ccc <vTaskBattery+0x6c>
 8005fee:	bf00      	nop
 8005ff0:	40668000 	.word	0x40668000
 8005ff4:	408f4000 	.word	0x408f4000
 8005ff8:	51eb851f 	.word	0x51eb851f
 8005ffc:	40490000 	.word	0x40490000
 8006000:	42480000 	.word	0x42480000
 8006004:	40340000 	.word	0x40340000
 8006008:	0801d258 	.word	0x0801d258
 800600c:	20009644 	.word	0x20009644
 8006010:	2000fa3c 	.word	0x2000fa3c
 8006014:	00000000 	.word	0x00000000

08006018 <get_temp>:
	}
}


float get_temp (uint16_t adc_value){
 8006018:	b590      	push	{r4, r7, lr}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	4603      	mov	r3, r0
 8006020:	80fb      	strh	r3, [r7, #6]
	float VSENSE;
	VSENSE = 2.5/4096 * adc_value;
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	4618      	mov	r0, r3
 8006026:	f7fa fa9d 	bl	8000564 <__aeabi_i2d>
 800602a:	f04f 0200 	mov.w	r2, #0
 800602e:	4b20      	ldr	r3, [pc, #128]	; (80060b0 <get_temp+0x98>)
 8006030:	f7fa fb02 	bl	8000638 <__aeabi_dmul>
 8006034:	4603      	mov	r3, r0
 8006036:	460c      	mov	r4, r1
 8006038:	4618      	mov	r0, r3
 800603a:	4621      	mov	r1, r4
 800603c:	f7fa fdcc 	bl	8000bd8 <__aeabi_d2f>
 8006040:	4603      	mov	r3, r0
 8006042:	60fb      	str	r3, [r7, #12]
	return ((V25 - VSENSE) / AVG_SLOPE + 25);
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7fa fa9f 	bl	8000588 <__aeabi_f2d>
 800604a:	4603      	mov	r3, r0
 800604c:	460c      	mov	r4, r1
 800604e:	461a      	mov	r2, r3
 8006050:	4623      	mov	r3, r4
 8006052:	a113      	add	r1, pc, #76	; (adr r1, 80060a0 <get_temp+0x88>)
 8006054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006058:	f7fa f936 	bl	80002c8 <__aeabi_dsub>
 800605c:	4603      	mov	r3, r0
 800605e:	460c      	mov	r4, r1
 8006060:	4618      	mov	r0, r3
 8006062:	4621      	mov	r1, r4
 8006064:	a310      	add	r3, pc, #64	; (adr r3, 80060a8 <get_temp+0x90>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa fc0f 	bl	800088c <__aeabi_ddiv>
 800606e:	4603      	mov	r3, r0
 8006070:	460c      	mov	r4, r1
 8006072:	4618      	mov	r0, r3
 8006074:	4621      	mov	r1, r4
 8006076:	f04f 0200 	mov.w	r2, #0
 800607a:	4b0e      	ldr	r3, [pc, #56]	; (80060b4 <get_temp+0x9c>)
 800607c:	f7fa f926 	bl	80002cc <__adddf3>
 8006080:	4603      	mov	r3, r0
 8006082:	460c      	mov	r4, r1
 8006084:	4618      	mov	r0, r3
 8006086:	4621      	mov	r1, r4
 8006088:	f7fa fda6 	bl	8000bd8 <__aeabi_d2f>
 800608c:	4603      	mov	r3, r0
 800608e:	ee07 3a90 	vmov	s15, r3
}
 8006092:	eeb0 0a67 	vmov.f32	s0, s15
 8006096:	3714      	adds	r7, #20
 8006098:	46bd      	mov	sp, r7
 800609a:	bd90      	pop	{r4, r7, pc}
 800609c:	f3af 8000 	nop.w
 80060a0:	ae147ae1 	.word	0xae147ae1
 80060a4:	3ff6e147 	.word	0x3ff6e147
 80060a8:	75f6fd22 	.word	0x75f6fd22
 80060ac:	3f719ce0 	.word	0x3f719ce0
 80060b0:	3f440000 	.word	0x3f440000
 80060b4:	40390000 	.word	0x40390000

080060b8 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 80060be:	af00      	add	r7, sp, #0
 80060c0:	1d3b      	adds	r3, r7, #4
 80060c2:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 80060c4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80060c8:	2200      	movs	r2, #0
 80060ca:	601a      	str	r2, [r3, #0]
 80060cc:	605a      	str	r2, [r3, #4]
 80060ce:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 80060d0:	f107 0308 	add.w	r3, r7, #8
 80060d4:	4618      	mov	r0, r3
 80060d6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80060da:	461a      	mov	r2, r3
 80060dc:	2100      	movs	r1, #0
 80060de:	f014 fab4 	bl	801a64a <memset>
    control_data_init(&control_data);
 80060e2:	f107 0308 	add.w	r3, r7, #8
 80060e6:	4618      	mov	r0, r3
 80060e8:	f7fb feb4 	bl	8001e54 <control_data_init>

	osDelay(800);
 80060ec:	f44f 7048 	mov.w	r0, #800	; 0x320
 80060f0:	f00f fe94 	bl	8015e1c <osDelay>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80060f4:	f00f fdba 	bl	8015c6c <osKernelGetTickCount>
 80060f8:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80060fc:	f00f fdde 	bl	8015cbc <osKernelGetTickFreq>
 8006100:	4602      	mov	r2, r0
 8006102:	4b41      	ldr	r3, [pc, #260]	; (8006208 <vTaskController+0x150>)
 8006104:	fba3 2302 	umull	r2, r3, r3, r2
 8006108:	095b      	lsrs	r3, r3, #5
 800610a:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470


	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 800610e:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 8006112:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 8006116:	4413      	add	r3, r2
 8006118:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 800611c:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8006120:	233c      	movs	r3, #60	; 0x3c
 8006122:	493a      	ldr	r1, [pc, #232]	; (800620c <vTaskController+0x154>)
 8006124:	483a      	ldr	r0, [pc, #232]	; (8006210 <vTaskController+0x158>)
 8006126:	f7fd fe4b 	bl	8003dc0 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 800612a:	4b38      	ldr	r3, [pc, #224]	; (800620c <vTaskController+0x154>)
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	ee07 3a90 	vmov	s15, r3
 8006132:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006136:	eddf 6a37 	vldr	s13, [pc, #220]	; 8006214 <vTaskController+0x15c>
 800613a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800613e:	f107 0308 	add.w	r3, r7, #8
 8006142:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8006146:	4b31      	ldr	r3, [pc, #196]	; (800620c <vTaskController+0x154>)
 8006148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614a:	ee07 3a90 	vmov	s15, r3
 800614e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006152:	eddf 6a30 	vldr	s13, [pc, #192]	; 8006214 <vTaskController+0x15c>
 8006156:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800615a:	f107 0308 	add.w	r3, r7, #8
 800615e:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8006162:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8006166:	233c      	movs	r3, #60	; 0x3c
 8006168:	492b      	ldr	r1, [pc, #172]	; (8006218 <vTaskController+0x160>)
 800616a:	482c      	ldr	r0, [pc, #176]	; (800621c <vTaskController+0x164>)
 800616c:	f7fd fe28 	bl	8003dc0 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8006170:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8006174:	f107 0308 	add.w	r3, r7, #8
 8006178:	4611      	mov	r1, r2
 800617a:	4618      	mov	r0, r3
 800617c:	f7fb fd58 	bl	8001c30 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8006180:	4827      	ldr	r0, [pc, #156]	; (8006220 <vTaskController+0x168>)
 8006182:	f7fd fdf5 	bl	8003d70 <AcquireMutex>
 8006186:	4603      	mov	r3, r0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d110      	bne.n	80061ae <vTaskController+0xf6>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 800618c:	f107 0308 	add.w	r3, r7, #8
 8006190:	edd3 7a00 	vldr	s15, [r3]
 8006194:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006214 <vTaskController+0x15c>
 8006198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800619c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061a0:	ee17 2a90 	vmov	r2, s15
 80061a4:	4b1f      	ldr	r3, [pc, #124]	; (8006224 <vTaskController+0x16c>)
 80061a6:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 80061a8:	481d      	ldr	r0, [pc, #116]	; (8006220 <vTaskController+0x168>)
 80061aa:	f7fd fdfb 	bl	8003da4 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 80061ae:	f00f fd5d 	bl	8015c6c <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 80061b2:	f107 0308 	add.w	r3, r7, #8
 80061b6:	edd3 7a00 	vldr	s15, [r3]
 80061ba:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8006214 <vTaskController+0x15c>
 80061be:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 80061c2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 80061c6:	f107 0308 	add.w	r3, r7, #8
 80061ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80061ce:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8006214 <vTaskController+0x15c>
 80061d2:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 80061d6:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 80061da:	f107 0308 	add.w	r3, r7, #8
 80061de:	edd3 7a02 	vldr	s15, [r3, #8]
 80061e2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8006214 <vTaskController+0x15c>
 80061e6:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 80061ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ee:	ee17 3a90 	vmov	r3, s15
 80061f2:	ee16 2a10 	vmov	r2, s12
 80061f6:	ee16 1a90 	vmov	r1, s13
 80061fa:	f7fe f841 	bl	8004280 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 80061fe:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 8006202:	f00f fe39 	bl	8015e78 <osDelayUntil>
		tick_count += tick_update;
 8006206:	e782      	b.n	800610e <vTaskController+0x56>
 8006208:	51eb851f 	.word	0x51eb851f
 800620c:	2000026c 	.word	0x2000026c
 8006210:	20011c58 	.word	0x20011c58
 8006214:	447a0000 	.word	0x447a0000
 8006218:	200002bc 	.word	0x200002bc
 800621c:	200095d8 	.word	0x200095d8
 8006220:	2000fa34 	.word	0x2000fa34
 8006224:	200002a8 	.word	0x200002a8

08006228 <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8006228:	b590      	push	{r4, r7, lr}
 800622a:	b0a1      	sub	sp, #132	; 0x84
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8006230:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006234:	2200      	movs	r2, #0
 8006236:	601a      	str	r2, [r3, #0]
 8006238:	605a      	str	r2, [r3, #4]
 800623a:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 800623c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006240:	4618      	mov	r0, r3
 8006242:	f7fc fa47 	bl	80026d4 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8006246:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800624a:	223c      	movs	r2, #60	; 0x3c
 800624c:	2100      	movs	r1, #0
 800624e:	4618      	mov	r0, r3
 8006250:	f014 f9fb 	bl	801a64a <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 8006254:	f107 0310 	add.w	r3, r7, #16
 8006258:	4618      	mov	r0, r3
 800625a:	f7fb ff7d 	bl	8002158 <init_env>
	init_env(&environment);
 800625e:	f107 0320 	add.w	r3, r7, #32
 8006262:	4618      	mov	r0, r3
 8006264:	f7fb ff78 	bl	8002158 <init_env>

	/* Telemetry Command */
	command_e telemetry_command = IDLE_COMMAND;
 8006268:	239b      	movs	r3, #155	; 0x9b
 800626a:	73fb      	strb	r3, [r7, #15]

	osDelay(700);
 800626c:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 8006270:	f00f fdd4 	bl	8015e1c <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006274:	f00f fcfa 	bl	8015c6c <osKernelGetTickCount>
 8006278:	67f8      	str	r0, [r7, #124]	; 0x7c
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 800627a:	f00f fd1f 	bl	8015cbc <osKernelGetTickFreq>
 800627e:	4602      	mov	r2, r0
 8006280:	4b28      	ldr	r3, [pc, #160]	; (8006324 <vTaskFSM+0xfc>)
 8006282:	fba3 2302 	umull	r2, r3, r3, r2
 8006286:	095b      	lsrs	r3, r3, #5
 8006288:	67bb      	str	r3, [r7, #120]	; 0x78

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 800628a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800628c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800628e:	4413      	add	r3, r2
 8006290:	67fb      	str	r3, [r7, #124]	; 0x7c

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8006292:	f107 020f 	add.w	r2, r7, #15
 8006296:	2301      	movs	r3, #1
 8006298:	4923      	ldr	r1, [pc, #140]	; (8006328 <vTaskFSM+0x100>)
 800629a:	4824      	ldr	r0, [pc, #144]	; (800632c <vTaskFSM+0x104>)
 800629c:	f7fd fd90 	bl	8003dc0 <ReadMutex>

		/* Reset Flight Phase if Telemetry asks to */
		if(telemetry_command == CALIBRATE_SENSORS && flight_phase_detection.flight_phase == IDLE){
 80062a0:	7bfb      	ldrb	r3, [r7, #15]
 80062a2:	2b49      	cmp	r3, #73	; 0x49
 80062a4:	d10a      	bne.n	80062bc <vTaskFSM+0x94>
 80062a6:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d106      	bne.n	80062bc <vTaskFSM+0x94>
			reset_flight_phase_detection(&flight_phase_detection);
 80062ae:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fc fa0e 	bl	80026d4 <reset_flight_phase_detection>
			telemetry_command = IDLE_COMMAND;
 80062b8:	239b      	movs	r3, #155	; 0x9b
 80062ba:	73fb      	strb	r3, [r7, #15]
		}


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 80062bc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80062c0:	233c      	movs	r3, #60	; 0x3c
 80062c2:	491b      	ldr	r1, [pc, #108]	; (8006330 <vTaskFSM+0x108>)
 80062c4:	481b      	ldr	r0, [pc, #108]	; (8006334 <vTaskFSM+0x10c>)
 80062c6:	f7fd fd7b 	bl	8003dc0 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 80062ca:	f107 0220 	add.w	r2, r7, #32
 80062ce:	2310      	movs	r3, #16
 80062d0:	4919      	ldr	r1, [pc, #100]	; (8006338 <vTaskFSM+0x110>)
 80062d2:	481a      	ldr	r0, [pc, #104]	; (800633c <vTaskFSM+0x114>)
 80062d4:	f7fd fd74 	bl	8003dc0 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 80062d8:	f107 0220 	add.w	r2, r7, #32
 80062dc:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80062e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fc f8f3 	bl	80024d0 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 80062ea:	4815      	ldr	r0, [pc, #84]	; (8006340 <vTaskFSM+0x118>)
 80062ec:	f7fd fd40 	bl	8003d70 <AcquireMutex>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <vTaskFSM+0xe4>
			global_flight_phase_detection = flight_phase_detection;
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <vTaskFSM+0x11c>)
 80062f8:	461c      	mov	r4, r3
 80062fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80062fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006302:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 8006306:	480e      	ldr	r0, [pc, #56]	; (8006340 <vTaskFSM+0x118>)
 8006308:	f7fd fd4c 	bl	8003da4 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 800630c:	f00f fcae 	bl	8015c6c <osKernelGetTickCount>
 8006310:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006314:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006316:	f7fd ff53 	bl	80041c0 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 800631a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800631c:	f00f fdac 	bl	8015e78 <osDelayUntil>
		tick_count += tick_update;
 8006320:	e7b3      	b.n	800628a <vTaskFSM+0x62>
 8006322:	bf00      	nop
 8006324:	51eb851f 	.word	0x51eb851f
 8006328:	20013ce0 	.word	0x20013ce0
 800632c:	2000b9bc 	.word	0x2000b9bc
 8006330:	2000026c 	.word	0x2000026c
 8006334:	20011c58 	.word	0x20011c58
 8006338:	200002ac 	.word	0x200002ac
 800633c:	2000b9c4 	.word	0x2000b9c4
 8006340:	200095d8 	.word	0x200095d8
 8006344:	200002bc 	.word	0x200002bc

08006348 <vTaskGps>:





void vTaskGps(void *argument) {
 8006348:	b5b0      	push	{r4, r5, r7, lr}
 800634a:	b0b2      	sub	sp, #200	; 0xc8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

	UBLOX GPS1 = {0,&huart1};
 8006350:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006354:	222c      	movs	r2, #44	; 0x2c
 8006356:	2100      	movs	r1, #0
 8006358:	4618      	mov	r0, r3
 800635a:	f014 f976 	bl	801a64a <memset>
 800635e:	4b9f      	ldr	r3, [pc, #636]	; (80065dc <vTaskGps+0x294>)
 8006360:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	UBLOX GPS2 = {1,&huart2};
 8006364:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006368:	222c      	movs	r2, #44	; 0x2c
 800636a:	2100      	movs	r1, #0
 800636c:	4618      	mov	r0, r3
 800636e:	f014 f96c 	bl	801a64a <memset>
 8006372:	2301      	movs	r3, #1
 8006374:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8006378:	4b99      	ldr	r3, [pc, #612]	; (80065e0 <vTaskGps+0x298>)
 800637a:	65fb      	str	r3, [r7, #92]	; 0x5c
	UBLOX GPS3 = {2,&huart3};
 800637c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006380:	222c      	movs	r2, #44	; 0x2c
 8006382:	2100      	movs	r1, #0
 8006384:	4618      	mov	r0, r3
 8006386:	f014 f960 	bl	801a64a <memset>
 800638a:	2302      	movs	r3, #2
 800638c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006390:	4b94      	ldr	r3, [pc, #592]	; (80065e4 <vTaskGps+0x29c>)
 8006392:	633b      	str	r3, [r7, #48]	; 0x30

	int timeout_counter1 = 0;
 8006394:	2300      	movs	r3, #0
 8006396:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int timeout_counter2 = 0;
 800639a:	2300      	movs	r3, #0
 800639c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int timeout_counter3 = 0;
 80063a0:	2300      	movs	r3, #0
 80063a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	/* For periodic update */
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	gps_data_t gps_telemetry = { 0 };
 80063a6:	f107 0308 	add.w	r3, r7, #8
 80063aa:	2224      	movs	r2, #36	; 0x24
 80063ac:	2100      	movs	r1, #0
 80063ae:	4618      	mov	r0, r3
 80063b0:	f014 f94b 	bl	801a64a <memset>
	uint8_t choose_GPS = 1;
 80063b4:	2301      	movs	r3, #1
 80063b6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80063ba:	f00f fc57 	bl	8015c6c <osKernelGetTickCount>
 80063be:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 80063c2:	f00f fc7b 	bl	8015cbc <osKernelGetTickFreq>
 80063c6:	4603      	mov	r3, r0
 80063c8:	085b      	lsrs	r3, r3, #1
 80063ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	osDelay(200);
 80063ce:	20c8      	movs	r0, #200	; 0xc8
 80063d0:	f00f fd24 	bl	8015e1c <osDelay>

	gps_dma_init(&GPS1);
 80063d4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80063d8:	4618      	mov	r0, r3
 80063da:	f7fb fb2f 	bl	8001a3c <gps_dma_init>
	gps_dma_init(&GPS2);
 80063de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fb fb2a 	bl	8001a3c <gps_dma_init>
	gps_dma_init(&GPS3);
 80063e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fb fb25 	bl	8001a3c <gps_dma_init>

	for (;;) {
		tick_count += tick_update;
 80063f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80063f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063fa:	4413      	add	r3, r2
 80063fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

		/* Read GPS */
		if (gps_read_sensor(&GPS1)){
 8006400:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006404:	4618      	mov	r0, r3
 8006406:	f7fb fb3d 	bl	8001a84 <gps_read_sensor>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <vTaskGps+0xd0>
			timeout_counter1 = 0;
 8006410:	2300      	movs	r3, #0
 8006412:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006416:	e010      	b.n	800643a <vTaskGps+0xf2>
		} else {
			timeout_counter1++;
 8006418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800641c:	3301      	adds	r3, #1
 800641e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			if (timeout_counter1 == 10){
 8006422:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006426:	2b0a      	cmp	r3, #10
 8006428:	d107      	bne.n	800643a <vTaskGps+0xf2>
				gps_reset(&GPS1);
 800642a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800642e:	4618      	mov	r0, r3
 8006430:	f7fb fb72 	bl	8001b18 <gps_reset>
				timeout_counter1 = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			}
		}
		if (gps_read_sensor(&GPS2)){
 800643a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800643e:	4618      	mov	r0, r3
 8006440:	f7fb fb20 	bl	8001a84 <gps_read_sensor>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <vTaskGps+0x10a>
			timeout_counter2 = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006450:	e010      	b.n	8006474 <vTaskGps+0x12c>
		} else {
			timeout_counter2++;
 8006452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006456:	3301      	adds	r3, #1
 8006458:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if (timeout_counter2 == 10){
 800645c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006460:	2b0a      	cmp	r3, #10
 8006462:	d107      	bne.n	8006474 <vTaskGps+0x12c>
				gps_reset(&GPS2);
 8006464:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006468:	4618      	mov	r0, r3
 800646a:	f7fb fb55 	bl	8001b18 <gps_reset>
				timeout_counter2 = 0;
 800646e:	2300      	movs	r3, #0
 8006470:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			}
		}
		if (gps_read_sensor(&GPS3)){
 8006474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006478:	4618      	mov	r0, r3
 800647a:	f7fb fb03 	bl	8001a84 <gps_read_sensor>
 800647e:	4603      	mov	r3, r0
 8006480:	2b00      	cmp	r3, #0
 8006482:	d003      	beq.n	800648c <vTaskGps+0x144>
			timeout_counter3 = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800648a:	e010      	b.n	80064ae <vTaskGps+0x166>
		} else {
			timeout_counter3++;
 800648c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006490:	3301      	adds	r3, #1
 8006492:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			if (timeout_counter3 == 10){
 8006496:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800649a:	2b0a      	cmp	r3, #10
 800649c:	d107      	bne.n	80064ae <vTaskGps+0x166>
				gps_reset(&GPS3);
 800649e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7fb fb38 	bl	8001b18 <gps_reset>
				timeout_counter3 = 0;
 80064a8:	2300      	movs	r3, #0
 80064aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		//		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
		//								GPS3.data.hour, GPS3.data.minute, GPS3.data.second, GPS3.data.lat_deg,
		//								GPS3.data.lat_decimal, GPS3.data.lon_deg, GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 80064ae:	f00f fbdd 	bl	8015c6c <osKernelGetTickCount>
 80064b2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80064b6:	3308      	adds	r3, #8
 80064b8:	2203      	movs	r2, #3
 80064ba:	2101      	movs	r1, #1
 80064bc:	f7fd fd64 	bl	8003f88 <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 80064c0:	f00f fbd4 	bl	8015c6c <osKernelGetTickCount>
 80064c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80064c8:	3308      	adds	r3, #8
 80064ca:	2203      	movs	r2, #3
 80064cc:	2102      	movs	r1, #2
 80064ce:	f7fd fd5b 	bl	8003f88 <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 80064d2:	f00f fbcb 	bl	8015c6c <osKernelGetTickCount>
 80064d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80064da:	3308      	adds	r3, #8
 80064dc:	2203      	movs	r2, #3
 80064de:	2103      	movs	r1, #3
 80064e0:	f7fd fd52 	bl	8003f88 <logSensor>

		/* get best possible GPS for Telemetry */

		if(GPS1.data.satellite >= GPS2.data.satellite){
 80064e4:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 80064e8:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 80064ec:	429a      	cmp	r2, r3
 80064ee:	d30d      	bcc.n	800650c <vTaskGps+0x1c4>
			if(GPS1.data.satellite >= GPS3.data.satellite){
 80064f0:	f897 2098 	ldrb.w	r2, [r7, #152]	; 0x98
 80064f4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d303      	bcc.n	8006504 <vTaskGps+0x1bc>
				choose_GPS = 1;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006502:	e02a      	b.n	800655a <vTaskGps+0x212>
			}
			else{
				choose_GPS = 3;
 8006504:	2303      	movs	r3, #3
 8006506:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800650a:	e026      	b.n	800655a <vTaskGps+0x212>
			}
		}
		else if(GPS2.data.satellite >= GPS3.data.satellite){
 800650c:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 8006510:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8006514:	429a      	cmp	r2, r3
 8006516:	d30d      	bcc.n	8006534 <vTaskGps+0x1ec>
			if(GPS2.data.satellite >= GPS1.data.satellite){
 8006518:	f897 206c 	ldrb.w	r2, [r7, #108]	; 0x6c
 800651c:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8006520:	429a      	cmp	r2, r3
 8006522:	d303      	bcc.n	800652c <vTaskGps+0x1e4>
				choose_GPS = 2;
 8006524:	2302      	movs	r3, #2
 8006526:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 800652a:	e016      	b.n	800655a <vTaskGps+0x212>
			}
			else{
				choose_GPS = 1;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006532:	e012      	b.n	800655a <vTaskGps+0x212>
			}
		}
		else if(GPS3.data.satellite >= GPS1.data.satellite){
 8006534:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8006538:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 800653c:	429a      	cmp	r2, r3
 800653e:	d30c      	bcc.n	800655a <vTaskGps+0x212>
			if(GPS3.data.satellite >= GPS2.data.satellite){
 8006540:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8006544:	f897 306c 	ldrb.w	r3, [r7, #108]	; 0x6c
 8006548:	429a      	cmp	r2, r3
 800654a:	d303      	bcc.n	8006554 <vTaskGps+0x20c>
				choose_GPS = 3;
 800654c:	2303      	movs	r3, #3
 800654e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 8006552:	e002      	b.n	800655a <vTaskGps+0x212>
			}
			else{
				choose_GPS = 2;
 8006554:	2302      	movs	r3, #2
 8006556:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			}
		}

		if(choose_GPS == 1){
 800655a:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800655e:	2b01      	cmp	r3, #1
 8006560:	d10a      	bne.n	8006578 <vTaskGps+0x230>
			gps_telemetry = GPS1.data;
 8006562:	f107 0408 	add.w	r4, r7, #8
 8006566:	f107 058c 	add.w	r5, r7, #140	; 0x8c
 800656a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800656c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800656e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006572:	682b      	ldr	r3, [r5, #0]
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	e018      	b.n	80065aa <vTaskGps+0x262>
//			gps_telemetry.lat_decimal = GPS1.data.lat_decimal;
//			gps_telemetry.lon_deg = GPS1.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS1.data.lon_decimal;
//			gps_telemetry.satellite = GPS1.data.satellite;
		}
		else if(choose_GPS == 2){
 8006578:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 800657c:	2b02      	cmp	r3, #2
 800657e:	d10a      	bne.n	8006596 <vTaskGps+0x24e>
			gps_telemetry = GPS2.data;
 8006580:	f107 0408 	add.w	r4, r7, #8
 8006584:	f107 0560 	add.w	r5, r7, #96	; 0x60
 8006588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800658c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800658e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006590:	682b      	ldr	r3, [r5, #0]
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	e009      	b.n	80065aa <vTaskGps+0x262>
//			gps_telemetry.lon_deg = GPS2.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS2.data.lon_decimal;
//			gps_telemetry.satellite = GPS2.data.satellite;
		}
		else{
			gps_telemetry = GPS3.data;
 8006596:	f107 0408 	add.w	r4, r7, #8
 800659a:	f107 0534 	add.w	r5, r7, #52	; 0x34
 800659e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80065a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a6:	682b      	ldr	r3, [r5, #0]
 80065a8:	6023      	str	r3, [r4, #0]
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if(AcquireMutex(&gps_mutex) == osOK){
 80065aa:	480f      	ldr	r0, [pc, #60]	; (80065e8 <vTaskGps+0x2a0>)
 80065ac:	f7fd fbe0 	bl	8003d70 <AcquireMutex>
 80065b0:	4603      	mov	r3, r0
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10c      	bne.n	80065d0 <vTaskGps+0x288>
			globalGPS = gps_telemetry;
 80065b6:	4b0d      	ldr	r3, [pc, #52]	; (80065ec <vTaskGps+0x2a4>)
 80065b8:	461d      	mov	r5, r3
 80065ba:	f107 0408 	add.w	r4, r7, #8
 80065be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065c6:	6823      	ldr	r3, [r4, #0]
 80065c8:	602b      	str	r3, [r5, #0]
			ReleaseMutex(&gps_mutex);
 80065ca:	4807      	ldr	r0, [pc, #28]	; (80065e8 <vTaskGps+0x2a0>)
 80065cc:	f7fd fbea 	bl	8003da4 <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 80065d0:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 80065d4:	f00f fc50 	bl	8015e78 <osDelayUntil>
		tick_count += tick_update;
 80065d8:	e70b      	b.n	80063f2 <vTaskGps+0xaa>
 80065da:	bf00      	nop
 80065dc:	2000fb58 	.word	0x2000fb58
 80065e0:	20019ef4 	.word	0x20019ef4
 80065e4:	2000972c 	.word	0x2000972c
 80065e8:	20017da4 	.word	0x20017da4
 80065ec:	20013cbc 	.word	0x20013cbc

080065f0 <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes(int32_t position);


void vTaskMotorCont(void *argument) {
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b090      	sub	sp, #64	; 0x40
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 80065fc:	239b      	movs	r3, #155	; 0x9b
 80065fe:	77fb      	strb	r3, [r7, #31]
	flight_phase_detection_t flight_phase_detection = { 0 };
 8006600:	f107 0310 	add.w	r3, r7, #16
 8006604:	2200      	movs	r2, #0
 8006606:	601a      	str	r2, [r3, #0]
 8006608:	605a      	str	r2, [r3, #4]
 800660a:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 800660c:	2301      	movs	r3, #1
 800660e:	743b      	strb	r3, [r7, #16]
	flight_phase_detection.mach_number = SUBSONIC;
 8006610:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006614:	617b      	str	r3, [r7, #20]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 8006616:	2301      	movs	r3, #1
 8006618:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int32_t PPM_velocity = 10000;
 800661c:	f242 7310 	movw	r3, #10000	; 0x2710
 8006620:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t PPM_acceleration = 100000;
 8006622:	4b5d      	ldr	r3, [pc, #372]	; (8006798 <vTaskMotorCont+0x1a8>)
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PPM_deceleration = 100000;
 8006626:	4b5c      	ldr	r3, [pc, #368]	; (8006798 <vTaskMotorCont+0x1a8>)
 8006628:	627b      	str	r3, [r7, #36]	; 0x24

	osDelay(2000);
 800662a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800662e:	f00f fbf5 	bl	8015e1c <osDelay>


	/* Controller Variables */
	int32_t controller_actuation = 0;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 8006636:	2300      	movs	r3, #0
 8006638:	637b      	str	r3, [r7, #52]	; 0x34
	int32_t measured_motor_position = 0;
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]

	while(EnableMotor() != osOK){
 800663e:	e003      	b.n	8006648 <vTaskMotorCont+0x58>
		osDelay(1000);
 8006640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006644:	f00f fbea 	bl	8015e1c <osDelay>
	while(EnableMotor() != osOK){
 8006648:	f7fa fcea 	bl	8001020 <EnableMotor>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d1f6      	bne.n	8006640 <vTaskMotorCont+0x50>
	};

	SetPositionMode(position_mode);
 8006652:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006656:	4618      	mov	r0, r3
 8006658:	f7fa fd5b 	bl	8001112 <SetPositionMode>
	while(SetPositionMode(position_mode) != osOK){
 800665c:	e003      	b.n	8006666 <vTaskMotorCont+0x76>
		osDelay(1000);
 800665e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006662:	f00f fbdb 	bl	8015e1c <osDelay>
	while(SetPositionMode(position_mode) != osOK){
 8006666:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800666a:	4618      	mov	r0, r3
 800666c:	f7fa fd51 	bl	8001112 <SetPositionMode>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d1f3      	bne.n	800665e <vTaskMotorCont+0x6e>
	};

	if (position_mode == 0x01) {
 8006676:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800667a:	2b01      	cmp	r3, #1
 800667c:	d105      	bne.n	800668a <vTaskMotorCont+0x9a>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 800667e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006680:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006682:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006684:	f7fa fdc5 	bl	8001212 <ConfigurePPM>
 8006688:	63b8      	str	r0, [r7, #56]	; 0x38




	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 800668a:	f00f faef 	bl	8015c6c <osKernelGetTickCount>
 800668e:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 8006690:	f00f fb14 	bl	8015cbc <osKernelGetTickFreq>
 8006694:	4602      	mov	r2, r0
 8006696:	4b41      	ldr	r3, [pc, #260]	; (800679c <vTaskMotorCont+0x1ac>)
 8006698:	fba3 2302 	umull	r2, r3, r3, r2
 800669c:	091b      	lsrs	r3, r3, #4
 800669e:	623b      	str	r3, [r7, #32]

	for (;;) {
		tick_count += tick_update;
 80066a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066a2:	6a3b      	ldr	r3, [r7, #32]
 80066a4:	4413      	add	r3, r2
 80066a6:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 80066a8:	f107 0308 	add.w	r3, r7, #8
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fa fe27 	bl	8001300 <GetPosition>
 80066b2:	63b8      	str	r0, [r7, #56]	; 0x38

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 80066b4:	f107 021f 	add.w	r2, r7, #31
 80066b8:	2301      	movs	r3, #1
 80066ba:	4939      	ldr	r1, [pc, #228]	; (80067a0 <vTaskMotorCont+0x1b0>)
 80066bc:	4839      	ldr	r0, [pc, #228]	; (80067a4 <vTaskMotorCont+0x1b4>)
 80066be:	f7fd fb7f 	bl	8003dc0 <ReadMutex>

		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4619      	mov	r1, r3
 80066c6:	4838      	ldr	r0, [pc, #224]	; (80067a8 <vTaskMotorCont+0x1b8>)
 80066c8:	f7fd fe34 	bl	8004334 <UsbPrint>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 80066cc:	f107 0210 	add.w	r2, r7, #16
 80066d0:	230c      	movs	r3, #12
 80066d2:	4936      	ldr	r1, [pc, #216]	; (80067ac <vTaskMotorCont+0x1bc>)
 80066d4:	4836      	ldr	r0, [pc, #216]	; (80067b0 <vTaskMotorCont+0x1c0>)
 80066d6:	f7fd fb73 	bl	8003dc0 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 80066da:	f107 020c 	add.w	r2, r7, #12
 80066de:	2304      	movs	r3, #4
 80066e0:	4934      	ldr	r1, [pc, #208]	; (80067b4 <vTaskMotorCont+0x1c4>)
 80066e2:	4835      	ldr	r0, [pc, #212]	; (80067b8 <vTaskMotorCont+0x1c8>)
 80066e4:	f7fd fb6c 	bl	8003dc0 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-150));
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066f2:	eddf 6a32 	vldr	s13, [pc, #200]	; 80067bc <vTaskMotorCont+0x1cc>
 80066f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066fa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80067c0 <vTaskMotorCont+0x1d0>
 80066fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006702:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006706:	ee17 3a90 	vmov	r3, s15
 800670a:	637b      	str	r3, [r7, #52]	; 0x34

		/* Check Bounds */
		if(desired_motor_position > -2){
 800670c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800670e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006712:	db02      	blt.n	800671a <vTaskMotorCont+0x12a>
			desired_motor_position = -2;
 8006714:	f06f 0301 	mvn.w	r3, #1
 8006718:	637b      	str	r3, [r7, #52]	; 0x34
		}

		if(desired_motor_position < -150){
 800671a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800671c:	f113 0f96 	cmn.w	r3, #150	; 0x96
 8006720:	da02      	bge.n	8006728 <vTaskMotorCont+0x138>
			desired_motor_position = -150;
 8006722:	f06f 0395 	mvn.w	r3, #149	; 0x95
 8006726:	637b      	str	r3, [r7, #52]	; 0x34
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 8006728:	7c3b      	ldrb	r3, [r7, #16]
 800672a:	2b04      	cmp	r3, #4
 800672c:	d104      	bne.n	8006738 <vTaskMotorCont+0x148>
			/* Move the Motor */
			motor_status = MoveToPositionPPM(desired_motor_position);
 800672e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006730:	f7fa fd14 	bl	800115c <MoveToPositionPPM>
 8006734:	63b8      	str	r0, [r7, #56]	; 0x38
 8006736:	e003      	b.n	8006740 <vTaskMotorCont+0x150>
		}
		else{
			motor_status = MoveToPositionPPM(0);
 8006738:	2000      	movs	r0, #0
 800673a:	f7fa fd0f 	bl	800115c <MoveToPositionPPM>
 800673e:	63b8      	str	r0, [r7, #56]	; 0x38
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND
 8006740:	7c3b      	ldrb	r3, [r7, #16]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d10f      	bne.n	8006766 <vTaskMotorCont+0x176>
 8006746:	7ffb      	ldrb	r3, [r7, #31]
 8006748:	2bd9      	cmp	r3, #217	; 0xd9
 800674a:	d10c      	bne.n	8006766 <vTaskMotorCont+0x176>
				&& osKernelGetTickCount() < 60000){
 800674c:	f00f fa8e 	bl	8015c6c <osKernelGetTickCount>
 8006750:	4602      	mov	r2, r0
 8006752:	f64e 235f 	movw	r3, #59999	; 0xea5f
 8006756:	429a      	cmp	r2, r3
 8006758:	d805      	bhi.n	8006766 <vTaskMotorCont+0x176>
			testairbrakes(-140);
 800675a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
 800675e:	f000 f831 	bl	80067c4 <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 8006762:	239b      	movs	r3, #155	; 0x9b
 8006764:	77fb      	strb	r3, [r7, #31]
		}


		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 8006766:	f00f fa81 	bl	8015c6c <osKernelGetTickCount>
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	461a      	mov	r2, r3
 800676e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006770:	f7fd fdb4 	bl	80042dc <logMotor>

		if(motor_status != osOK && flight_phase_detection.flight_phase == IDLE){
 8006774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <vTaskMotorCont+0x1a0>
 800677a:	7c3b      	ldrb	r3, [r7, #16]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d107      	bne.n	8006790 <vTaskMotorCont+0x1a0>
			DisableMotor();
 8006780:	f7fa fca7 	bl	80010d2 <DisableMotor>
			osDelay(1000);
 8006784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006788:	f00f fb48 	bl	8015e1c <osDelay>
			EnableMotor();
 800678c:	f7fa fc48 	bl	8001020 <EnableMotor>
		}


		osDelayUntil(tick_count);
 8006790:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006792:	f00f fb71 	bl	8015e78 <osDelayUntil>
		tick_count += tick_update;
 8006796:	e783      	b.n	80066a0 <vTaskMotorCont+0xb0>
 8006798:	000186a0 	.word	0x000186a0
 800679c:	cccccccd 	.word	0xcccccccd
 80067a0:	20013ce0 	.word	0x20013ce0
 80067a4:	2000b9bc 	.word	0x2000b9bc
 80067a8:	0801d2a8 	.word	0x0801d2a8
 80067ac:	200002bc 	.word	0x200002bc
 80067b0:	200095d8 	.word	0x200095d8
 80067b4:	200002a8 	.word	0x200002a8
 80067b8:	2000fa34 	.word	0x2000fa34
 80067bc:	447a0000 	.word	0x447a0000
 80067c0:	c3160000 	.word	0xc3160000

080067c4 <testairbrakes>:
	}
}

void testairbrakes(int32_t position){
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
	MoveToPositionPPM(position);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fa fcc5 	bl	800115c <MoveToPositionPPM>
	osDelay(1000);
 80067d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80067d6:	f00f fb21 	bl	8015e1c <osDelay>
	MoveToPositionPPM(0);
 80067da:	2000      	movs	r0, #0
 80067dc:	f7fa fcbe 	bl	800115c <MoveToPositionPPM>
}
 80067e0:	bf00      	nop
 80067e2:	3708      	adds	r7, #8
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 80067e8:	b5b0      	push	{r4, r5, r7, lr}
 80067ea:	b0cc      	sub	sp, #304	; 0x130
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	1d3b      	adds	r3, r7, #4
 80067f0:	6018      	str	r0, [r3, #0]
	osDelay(100);
 80067f2:	2064      	movs	r0, #100	; 0x64
 80067f4:	f00f fb12 	bl	8015e1c <osDelay>
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 80067f8:	2300      	movs	r3, #0
 80067fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80067fe:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8006802:	2200      	movs	r2, #0
 8006804:	601a      	str	r2, [r3, #0]
 8006806:	605a      	str	r2, [r3, #4]
 8006808:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 800680a:	48c3      	ldr	r0, [pc, #780]	; (8006b18 <vTaskSdCard+0x330>)
 800680c:	f7fd fd92 	bl	8004334 <UsbPrint>
 8006810:	e000      	b.n	8006814 <vTaskSdCard+0x2c>

	resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
 8006812:	bf00      	nop
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 8006814:	2201      	movs	r2, #1
 8006816:	49c1      	ldr	r1, [pc, #772]	; (8006b1c <vTaskSdCard+0x334>)
 8006818:	48c1      	ldr	r0, [pc, #772]	; (8006b20 <vTaskSdCard+0x338>)
 800681a:	f00e f91b 	bl	8014a54 <f_mount>
 800681e:	4603      	mov	r3, r0
 8006820:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8006824:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006828:	2b00      	cmp	r3, #0
 800682a:	d00b      	beq.n	8006844 <vTaskSdCard+0x5c>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 800682c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006830:	4619      	mov	r1, r3
 8006832:	48bc      	ldr	r0, [pc, #752]	; (8006b24 <vTaskSdCard+0x33c>)
 8006834:	f7fd fd7e 	bl	8004334 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8006838:	4bbb      	ldr	r3, [pc, #748]	; (8006b28 <vTaskSdCard+0x340>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 800683e:	2064      	movs	r0, #100	; 0x64
 8006840:	f00f faec 	bl	8015e1c <osDelay>
		}
	} while (res != FR_OK);
 8006844:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006848:	2b00      	cmp	r3, #0
 800684a:	d1e2      	bne.n	8006812 <vTaskSdCard+0x2a>

	if (!EULER_LOG_FILE_NAME[0]) {
 800684c:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8006850:	2b00      	cmp	r3, #0
 8006852:	f040 80a9 	bne.w	80069a8 <vTaskSdCard+0x1c0>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 8006856:	48b5      	ldr	r0, [pc, #724]	; (8006b2c <vTaskSdCard+0x344>)
 8006858:	f7fd fd6c 	bl	8004334 <UsbPrint>

		unsigned int file_number = 1;
 800685c:	2301      	movs	r3, #1
 800685e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 8006862:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8006866:	f107 0008 	add.w	r0, r7, #8
 800686a:	4bb1      	ldr	r3, [pc, #708]	; (8006b30 <vTaskSdCard+0x348>)
 800686c:	4aab      	ldr	r2, [pc, #684]	; (8006b1c <vTaskSdCard+0x334>)
 800686e:	f00f f8a9 	bl	80159c4 <f_findfirst>
 8006872:	4603      	mov	r3, r0
 8006874:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 8006878:	e02b      	b.n	80068d2 <vTaskSdCard+0xea>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 800687a:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 800687e:	3b30      	subs	r3, #48	; 0x30
 8006880:	2264      	movs	r2, #100	; 0x64
 8006882:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 8006886:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800688a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	005b      	lsls	r3, r3, #1
 8006896:	18ca      	adds	r2, r1, r3
 8006898:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800689c:	3b30      	subs	r3, #48	; 0x30
 800689e:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80068a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 80068a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068a8:	3301      	adds	r3, #1
 80068aa:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d204      	bcs.n	80068bc <vTaskSdCard+0xd4>
				file_number = current_file_number + 1;
 80068b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80068b6:	3301      	adds	r3, #1
 80068b8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 80068bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80068c0:	f107 0308 	add.w	r3, r7, #8
 80068c4:	4611      	mov	r1, r2
 80068c6:	4618      	mov	r0, r3
 80068c8:	f00f f854 	bl	8015974 <f_findnext>
 80068cc:	4603      	mov	r3, r0
 80068ce:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80068d2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <vTaskSdCard+0xfa>
 80068da:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d1cb      	bne.n	800687a <vTaskSdCard+0x92>
		}
		if (res != FR_OK) {
 80068e2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d006      	beq.n	80068f8 <vTaskSdCard+0x110>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 80068ea:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068ee:	4619      	mov	r1, r3
 80068f0:	4890      	ldr	r0, [pc, #576]	; (8006b34 <vTaskSdCard+0x34c>)
 80068f2:	f7fd fd1f 	bl	8004334 <UsbPrint>
					res);
			goto resetSDCard;
 80068f6:	e78d      	b.n	8006814 <vTaskSdCard+0x2c>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 80068f8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068fc:	4a8e      	ldr	r2, [pc, #568]	; (8006b38 <vTaskSdCard+0x350>)
 80068fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8006900:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 8006904:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8006908:	4b8c      	ldr	r3, [pc, #560]	; (8006b3c <vTaskSdCard+0x354>)
 800690a:	fba3 2301 	umull	r2, r3, r3, r1
 800690e:	08da      	lsrs	r2, r3, #3
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	005b      	lsls	r3, r3, #1
 8006918:	1aca      	subs	r2, r1, r3
 800691a:	b2d3      	uxtb	r3, r2
 800691c:	3330      	adds	r3, #48	; 0x30
 800691e:	b2db      	uxtb	r3, r3
 8006920:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 8006924:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006928:	4a84      	ldr	r2, [pc, #528]	; (8006b3c <vTaskSdCard+0x354>)
 800692a:	fba2 2303 	umull	r2, r3, r2, r3
 800692e:	08d9      	lsrs	r1, r3, #3
 8006930:	4b82      	ldr	r3, [pc, #520]	; (8006b3c <vTaskSdCard+0x354>)
 8006932:	fba3 2301 	umull	r2, r3, r3, r1
 8006936:	08da      	lsrs	r2, r3, #3
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	005b      	lsls	r3, r3, #1
 8006940:	1aca      	subs	r2, r1, r3
 8006942:	b2d3      	uxtb	r3, r2
 8006944:	3330      	adds	r3, #48	; 0x30
 8006946:	b2db      	uxtb	r3, r3
 8006948:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 800694c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006950:	4a7b      	ldr	r2, [pc, #492]	; (8006b40 <vTaskSdCard+0x358>)
 8006952:	fba2 2303 	umull	r2, r3, r2, r3
 8006956:	0959      	lsrs	r1, r3, #5
 8006958:	4b78      	ldr	r3, [pc, #480]	; (8006b3c <vTaskSdCard+0x354>)
 800695a:	fba3 2301 	umull	r2, r3, r3, r1
 800695e:	08da      	lsrs	r2, r3, #3
 8006960:	4613      	mov	r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	4413      	add	r3, r2
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	1aca      	subs	r2, r1, r3
 800696a:	b2d3      	uxtb	r3, r2
 800696c:	3330      	adds	r3, #48	; 0x30
 800696e:	b2db      	uxtb	r3, r3
 8006970:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 8006974:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006978:	4619      	mov	r1, r3
 800697a:	4872      	ldr	r0, [pc, #456]	; (8006b44 <vTaskSdCard+0x35c>)
 800697c:	f7fd fcda 	bl	8004334 <UsbPrint>

		res = f_closedir(&dj);
 8006980:	f107 0308 	add.w	r3, r7, #8
 8006984:	4618      	mov	r0, r3
 8006986:	f00e ff87 	bl	8015898 <f_closedir>
 800698a:	4603      	mov	r3, r0
 800698c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 8006990:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006994:	2b00      	cmp	r3, #0
 8006996:	d007      	beq.n	80069a8 <vTaskSdCard+0x1c0>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 8006998:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800699c:	4619      	mov	r1, r3
 800699e:	486a      	ldr	r0, [pc, #424]	; (8006b48 <vTaskSdCard+0x360>)
 80069a0:	f7fd fcc8 	bl	8004334 <UsbPrint>
			goto resetSDCard;
 80069a4:	bf00      	nop
 80069a6:	e735      	b.n	8006814 <vTaskSdCard+0x2c>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 80069a8:	4868      	ldr	r0, [pc, #416]	; (8006b4c <vTaskSdCard+0x364>)
 80069aa:	f7fd fcc3 	bl	8004334 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 80069ae:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80069b2:	2212      	movs	r2, #18
 80069b4:	4619      	mov	r1, r3
 80069b6:	4866      	ldr	r0, [pc, #408]	; (8006b50 <vTaskSdCard+0x368>)
 80069b8:	f00e f8b0 	bl	8014b1c <f_open>
 80069bc:	4603      	mov	r3, r0
 80069be:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 80069c2:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d006      	beq.n	80069d8 <vTaskSdCard+0x1f0>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 80069ca:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069ce:	4619      	mov	r1, r3
 80069d0:	4860      	ldr	r0, [pc, #384]	; (8006b54 <vTaskSdCard+0x36c>)
 80069d2:	f7fd fcaf 	bl	8004334 <UsbPrint>
		goto resetSDCard;
 80069d6:	e71d      	b.n	8006814 <vTaskSdCard+0x2c>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 80069d8:	485f      	ldr	r0, [pc, #380]	; (8006b58 <vTaskSdCard+0x370>)
 80069da:	f7fd fcab 	bl	8004334 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 80069de:	4b5c      	ldr	r3, [pc, #368]	; (8006b50 <vTaskSdCard+0x368>)
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	4619      	mov	r1, r3
 80069e4:	485a      	ldr	r0, [pc, #360]	; (8006b50 <vTaskSdCard+0x368>)
 80069e6:	f00e fc8b 	bl	8015300 <f_lseek>
 80069ea:	4603      	mov	r3, r0
 80069ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 80069f0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d006      	beq.n	8006a06 <vTaskSdCard+0x21e>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 80069f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069fc:	4619      	mov	r1, r3
 80069fe:	4857      	ldr	r0, [pc, #348]	; (8006b5c <vTaskSdCard+0x374>)
 8006a00:	f7fd fc98 	bl	8004334 <UsbPrint>
		goto resetSDCard;
 8006a04:	e706      	b.n	8006814 <vTaskSdCard+0x2c>
	}

	volatile int32_t msgCounter = 0;
 8006a06:	2300      	movs	r3, #0
 8006a08:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8006a0c:	4b54      	ldr	r3, [pc, #336]	; (8006b60 <vTaskSdCard+0x378>)
 8006a0e:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 8006a12:	461d      	mov	r5, r3
 8006a14:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a16:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a18:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006a1c:	c407      	stmia	r4!, {r0, r1, r2}
 8006a1e:	8023      	strh	r3, [r4, #0]
 8006a20:	3402      	adds	r4, #2
 8006a22:	0c1b      	lsrs	r3, r3, #16
 8006a24:	7023      	strb	r3, [r4, #0]
 8006a26:	2300      	movs	r3, #0
 8006a28:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 8006a32:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8006a36:	4618      	mov	r0, r3
 8006a38:	f7f9 fbea 	bl	8000210 <strlen>
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 8006a42:	4b48      	ldr	r3, [pc, #288]	; (8006b64 <vTaskSdCard+0x37c>)
 8006a44:	4842      	ldr	r0, [pc, #264]	; (8006b50 <vTaskSdCard+0x368>)
 8006a46:	f00e fa2e 	bl	8014ea6 <f_write>
 8006a4a:	4603      	mov	r3, r0
 8006a4c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8006a50:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d006      	beq.n	8006a66 <vTaskSdCard+0x27e>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 8006a58:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	4842      	ldr	r0, [pc, #264]	; (8006b68 <vTaskSdCard+0x380>)
 8006a60:	f7fd fc68 	bl	8004334 <UsbPrint>
		goto resetSDCard;
 8006a64:	e6d6      	b.n	8006814 <vTaskSdCard+0x2c>
	}
	log_entry_t log_entry = { 0 };
 8006a66:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006a6a:	2296      	movs	r2, #150	; 0x96
 8006a6c:	2100      	movs	r1, #0
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f013 fdeb 	bl	801a64a <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 8006a74:	4b3d      	ldr	r3, [pc, #244]	; (8006b6c <vTaskSdCard+0x384>)
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8006a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a80:	2200      	movs	r2, #0
 8006a82:	f00f fe0d 	bl	80166a0 <osMessageQueueGet>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1f3      	bne.n	8006a74 <vTaskSdCard+0x28c>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 8006a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006a90:	4618      	mov	r0, r3
 8006a92:	f7f9 fbbd 	bl	8000210 <strlen>
 8006a96:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 8006a9a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d015      	beq.n	8006ace <vTaskSdCard+0x2e6>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 8006aa2:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8006aa6:	4b2f      	ldr	r3, [pc, #188]	; (8006b64 <vTaskSdCard+0x37c>)
 8006aa8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8006aac:	4828      	ldr	r0, [pc, #160]	; (8006b50 <vTaskSdCard+0x368>)
 8006aae:	f00e f9fa 	bl	8014ea6 <f_write>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8006ab8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d006      	beq.n	8006ace <vTaskSdCard+0x2e6>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8006ac0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4828      	ldr	r0, [pc, #160]	; (8006b68 <vTaskSdCard+0x380>)
 8006ac8:	f7fd fc34 	bl	8004334 <UsbPrint>
							res);
					goto resetSDCard;
 8006acc:	e6a2      	b.n	8006814 <vTaskSdCard+0x2c>
				}
			}

			msgCounter++;
 8006ace:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8006ad8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006adc:	2b7f      	cmp	r3, #127	; 0x7f
 8006ade:	ddc9      	ble.n	8006a74 <vTaskSdCard+0x28c>
				msgCounter = 0;
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8006ae6:	4822      	ldr	r0, [pc, #136]	; (8006b70 <vTaskSdCard+0x388>)
 8006ae8:	f7fd fc24 	bl	8004334 <UsbPrint>
				HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8006aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006af0:	4820      	ldr	r0, [pc, #128]	; (8006b74 <vTaskSdCard+0x38c>)
 8006af2:	f002 f960 	bl	8008db6 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8006af6:	4816      	ldr	r0, [pc, #88]	; (8006b50 <vTaskSdCard+0x368>)
 8006af8:	f00e fb79 	bl	80151ee <f_sync>
 8006afc:	4603      	mov	r3, r0
 8006afe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8006b02:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d0b4      	beq.n	8006a74 <vTaskSdCard+0x28c>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8006b0a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006b0e:	4619      	mov	r1, r3
 8006b10:	4819      	ldr	r0, [pc, #100]	; (8006b78 <vTaskSdCard+0x390>)
 8006b12:	f7fd fc0f 	bl	8004334 <UsbPrint>
					goto resetSDCard;
 8006b16:	e67d      	b.n	8006814 <vTaskSdCard+0x2c>
 8006b18:	0801d2c4 	.word	0x0801d2c4
 8006b1c:	0801d2ec 	.word	0x0801d2ec
 8006b20:	2001c3d4 	.word	0x2001c3d4
 8006b24:	0801d2f0 	.word	0x0801d2f0
 8006b28:	20000368 	.word	0x20000368
 8006b2c:	0801d31c 	.word	0x0801d31c
 8006b30:	0801d340 	.word	0x0801d340
 8006b34:	0801d34c 	.word	0x0801d34c
 8006b38:	0801d384 	.word	0x0801d384
 8006b3c:	cccccccd 	.word	0xcccccccd
 8006b40:	51eb851f 	.word	0x51eb851f
 8006b44:	0801d390 	.word	0x0801d390
 8006b48:	0801d3b4 	.word	0x0801d3b4
 8006b4c:	0801d3e4 	.word	0x0801d3e4
 8006b50:	2001c1a4 	.word	0x2001c1a4
 8006b54:	0801d408 	.word	0x0801d408
 8006b58:	0801d434 	.word	0x0801d434
 8006b5c:	0801d45c 	.word	0x0801d45c
 8006b60:	0801d500 	.word	0x0801d500
 8006b64:	2001c608 	.word	0x2001c608
 8006b68:	0801d48c 	.word	0x0801d48c
 8006b6c:	20017e90 	.word	0x20017e90
 8006b70:	0801d4b8 	.word	0x0801d4b8
 8006b74:	40020c00 	.word	0x40020c00
 8006b78:	0801d4d8 	.word	0x0801d4d8

08006b7c <vTaskSensRead>:
/* SPI Read Data */
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

void vTaskSensRead(void *argument) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b084      	sub	sp, #16
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(500);
 8006b84:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006b88:	f00f f948 	bl	8015e1c <osDelay>
	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006b8c:	f00f f86e 	bl	8015c6c <osKernelGetTickCount>
 8006b90:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8006b92:	f00f f893 	bl	8015cbc <osKernelGetTickFreq>
 8006b96:	4602      	mov	r2, r0
 8006b98:	4b22      	ldr	r3, [pc, #136]	; (8006c24 <vTaskSensRead+0xa8>)
 8006b9a:	fba3 2302 	umull	r2, r3, r3, r2
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	60bb      	str	r3, [r7, #8]

	for (;;) {
		tick_count += tick_update;
 8006ba2:	68fa      	ldr	r2, [r7, #12]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8006baa:	4a1f      	ldr	r2, [pc, #124]	; (8006c28 <vTaskSensRead+0xac>)
 8006bac:	491f      	ldr	r1, [pc, #124]	; (8006c2c <vTaskSensRead+0xb0>)
 8006bae:	4820      	ldr	r0, [pc, #128]	; (8006c30 <vTaskSensRead+0xb4>)
 8006bb0:	f000 f858 	bl	8006c64 <ReadDataSB>
		}
		/* Log Data */
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8006bb4:	4b1e      	ldr	r3, [pc, #120]	; (8006c30 <vTaskSensRead+0xb4>)
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2101      	movs	r1, #1
 8006bba:	68f8      	ldr	r0, [r7, #12]
 8006bbc:	f7fd f9e4 	bl	8003f88 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8006bc0:	4b1c      	ldr	r3, [pc, #112]	; (8006c34 <vTaskSensRead+0xb8>)
 8006bc2:	2202      	movs	r2, #2
 8006bc4:	2101      	movs	r1, #1
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7fd f9de 	bl	8003f88 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8006bcc:	4b17      	ldr	r3, [pc, #92]	; (8006c2c <vTaskSensRead+0xb0>)
 8006bce:	2201      	movs	r2, #1
 8006bd0:	2102      	movs	r1, #2
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f7fd f9d8 	bl	8003f88 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8006bd8:	4b17      	ldr	r3, [pc, #92]	; (8006c38 <vTaskSensRead+0xbc>)
 8006bda:	2202      	movs	r2, #2
 8006bdc:	2102      	movs	r1, #2
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f7fd f9d2 	bl	8003f88 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8006be4:	4b10      	ldr	r3, [pc, #64]	; (8006c28 <vTaskSensRead+0xac>)
 8006be6:	2201      	movs	r2, #1
 8006be8:	2103      	movs	r1, #3
 8006bea:	68f8      	ldr	r0, [r7, #12]
 8006bec:	f7fd f9cc 	bl	8003f88 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8006bf0:	4b12      	ldr	r3, [pc, #72]	; (8006c3c <vTaskSensRead+0xc0>)
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	2103      	movs	r1, #3
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	f7fd f9c6 	bl	8003f88 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	490c      	ldr	r1, [pc, #48]	; (8006c30 <vTaskSensRead+0xb4>)
 8006c00:	480f      	ldr	r0, [pc, #60]	; (8006c40 <vTaskSensRead+0xc4>)
 8006c02:	f005 febd 	bl	800c980 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 8006c06:	2220      	movs	r2, #32
 8006c08:	4908      	ldr	r1, [pc, #32]	; (8006c2c <vTaskSensRead+0xb0>)
 8006c0a:	480e      	ldr	r0, [pc, #56]	; (8006c44 <vTaskSensRead+0xc8>)
 8006c0c:	f005 feb8 	bl	800c980 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8006c10:	2220      	movs	r2, #32
 8006c12:	4905      	ldr	r1, [pc, #20]	; (8006c28 <vTaskSensRead+0xac>)
 8006c14:	480c      	ldr	r0, [pc, #48]	; (8006c48 <vTaskSensRead+0xcc>)
 8006c16:	f005 feb3 	bl	800c980 <HAL_SPI_Receive_DMA>
		/* Periodic Update */
		osDelayUntil(tick_count);
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f00f f92c 	bl	8015e78 <osDelayUntil>
		tick_count += tick_update;
 8006c20:	e7bf      	b.n	8006ba2 <vTaskSensRead+0x26>
 8006c22:	bf00      	nop
 8006c24:	51eb851f 	.word	0x51eb851f
 8006c28:	2000030c 	.word	0x2000030c
 8006c2c:	200002ec 	.word	0x200002ec
 8006c30:	200002cc 	.word	0x200002cc
 8006c34:	200002d8 	.word	0x200002d8
 8006c38:	200002f8 	.word	0x200002f8
 8006c3c:	20000318 	.word	0x20000318
 8006c40:	20017e2c 	.word	0x20017e2c
 8006c44:	200095e0 	.word	0x200095e0
 8006c48:	2000f9d0 	.word	0x2000f9d0

08006c4c <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b082      	sub	sp, #8
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
	HAL_SPIEx_FlushRxFifo(hspi);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f006 fcb5 	bl	800d5c4 <HAL_SPIEx_FlushRxFifo>
}
 8006c5a:	bf00      	nop
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <ReadDataSB>:



/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 8006c64:	b590      	push	{r4, r7, lr}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum_sb(sb1);
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 f88b 	bl	8006d8c <calculate_checksum_sb>
 8006c76:	4603      	mov	r3, r0
 8006c78:	75fb      	strb	r3, [r7, #23]
	if(checksum == sb1->checksum){
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	7f1b      	ldrb	r3, [r3, #28]
 8006c7e:	7dfa      	ldrb	r2, [r7, #23]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d11d      	bne.n	8006cc0 <ReadDataSB+0x5c>
		if(AcquireMutex(&sb1_mutex) == osOK ){
 8006c84:	4838      	ldr	r0, [pc, #224]	; (8006d68 <ReadDataSB+0x104>)
 8006c86:	f7fd f873 	bl	8003d70 <AcquireMutex>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d117      	bne.n	8006cc0 <ReadDataSB+0x5c>
			sb1_baro = sb1->baro;
 8006c90:	4b36      	ldr	r3, [pc, #216]	; (8006d6c <ReadDataSB+0x108>)
 8006c92:	68fa      	ldr	r2, [r7, #12]
 8006c94:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c96:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8006c9a:	4a35      	ldr	r2, [pc, #212]	; (8006d70 <ReadDataSB+0x10c>)
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	4614      	mov	r4, r2
 8006ca0:	330c      	adds	r3, #12
 8006ca2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006ca4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8006ca8:	482f      	ldr	r0, [pc, #188]	; (8006d68 <ReadDataSB+0x104>)
 8006caa:	f7fd f87b 	bl	8003da4 <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8006cae:	4b30      	ldr	r3, [pc, #192]	; (8006d70 <ReadDataSB+0x10c>)
 8006cb0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	425b      	negs	r3, r3
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	b21a      	sxth	r2, r3
 8006cbc:	4b2c      	ldr	r3, [pc, #176]	; (8006d70 <ReadDataSB+0x10c>)
 8006cbe:	815a      	strh	r2, [r3, #10]
		}
	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum_sb(sb2);
 8006cc0:	68b8      	ldr	r0, [r7, #8]
 8006cc2:	f000 f863 	bl	8006d8c <calculate_checksum_sb>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]
	if(checksum == sb2->checksum){
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	7f1b      	ldrb	r3, [r3, #28]
 8006cce:	7dfa      	ldrb	r2, [r7, #23]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d11d      	bne.n	8006d10 <ReadDataSB+0xac>
		if(AcquireMutex(&sb2_mutex) == osOK){
 8006cd4:	4827      	ldr	r0, [pc, #156]	; (8006d74 <ReadDataSB+0x110>)
 8006cd6:	f7fd f84b 	bl	8003d70 <AcquireMutex>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d117      	bne.n	8006d10 <ReadDataSB+0xac>
			sb2_baro = sb2->baro;
 8006ce0:	4b25      	ldr	r3, [pc, #148]	; (8006d78 <ReadDataSB+0x114>)
 8006ce2:	68ba      	ldr	r2, [r7, #8]
 8006ce4:	ca07      	ldmia	r2, {r0, r1, r2}
 8006ce6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8006cea:	4a24      	ldr	r2, [pc, #144]	; (8006d7c <ReadDataSB+0x118>)
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	4614      	mov	r4, r2
 8006cf0:	330c      	adds	r3, #12
 8006cf2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006cf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8006cf8:	481e      	ldr	r0, [pc, #120]	; (8006d74 <ReadDataSB+0x110>)
 8006cfa:	f7fd f853 	bl	8003da4 <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8006cfe:	4b1f      	ldr	r3, [pc, #124]	; (8006d7c <ReadDataSB+0x118>)
 8006d00:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	425b      	negs	r3, r3
 8006d08:	b29b      	uxth	r3, r3
 8006d0a:	b21a      	sxth	r2, r3
 8006d0c:	4b1b      	ldr	r3, [pc, #108]	; (8006d7c <ReadDataSB+0x118>)
 8006d0e:	815a      	strh	r2, [r3, #10]
		}
	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum_sb(sb3);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f83b 	bl	8006d8c <calculate_checksum_sb>
 8006d16:	4603      	mov	r3, r0
 8006d18:	75fb      	strb	r3, [r7, #23]
	if(checksum == sb3->checksum){
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	7f1b      	ldrb	r3, [r3, #28]
 8006d1e:	7dfa      	ldrb	r2, [r7, #23]
 8006d20:	429a      	cmp	r2, r3
 8006d22:	d11d      	bne.n	8006d60 <ReadDataSB+0xfc>
		if(AcquireMutex(&sb3_mutex) == osOK){
 8006d24:	4816      	ldr	r0, [pc, #88]	; (8006d80 <ReadDataSB+0x11c>)
 8006d26:	f7fd f823 	bl	8003d70 <AcquireMutex>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d117      	bne.n	8006d60 <ReadDataSB+0xfc>
			sb3_baro = sb2->baro;
 8006d30:	4b14      	ldr	r3, [pc, #80]	; (8006d84 <ReadDataSB+0x120>)
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	ca07      	ldmia	r2, {r0, r1, r2}
 8006d36:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb2->imu;
 8006d3a:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <ReadDataSB+0x124>)
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	4614      	mov	r4, r2
 8006d40:	330c      	adds	r3, #12
 8006d42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006d44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8006d48:	480d      	ldr	r0, [pc, #52]	; (8006d80 <ReadDataSB+0x11c>)
 8006d4a:	f7fd f82b 	bl	8003da4 <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8006d4e:	4b0e      	ldr	r3, [pc, #56]	; (8006d88 <ReadDataSB+0x124>)
 8006d50:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006d54:	b29b      	uxth	r3, r3
 8006d56:	425b      	negs	r3, r3
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	b21a      	sxth	r2, r3
 8006d5c:	4b0a      	ldr	r3, [pc, #40]	; (8006d88 <ReadDataSB+0x124>)
 8006d5e:	815a      	strh	r2, [r3, #10]
		}
	}
}
 8006d60:	bf00      	nop
 8006d62:	371c      	adds	r7, #28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd90      	pop	{r4, r7, pc}
 8006d68:	2000faf4 	.word	0x2000faf4
 8006d6c:	20000218 	.word	0x20000218
 8006d70:	20000224 	.word	0x20000224
 8006d74:	2001c15c 	.word	0x2001c15c
 8006d78:	20000234 	.word	0x20000234
 8006d7c:	20000240 	.word	0x20000240
 8006d80:	2000fbe4 	.word	0x2000fbe4
 8006d84:	20000250 	.word	0x20000250
 8006d88:	2000025c 	.word	0x2000025c

08006d8c <calculate_checksum_sb>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum_sb(sb_data_t *sb_data){
 8006d8c:	b480      	push	{r7}
 8006d8e:	b083      	sub	sp, #12
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	b2da      	uxtb	r2, r3
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	4413      	add	r3, r2
 8006da2:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	4413      	add	r3, r2
 8006dae:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	4413      	add	r3, r2
 8006dba:	b2da      	uxtb	r2, r3
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	4413      	add	r3, r2
 8006dc6:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	4413      	add	r3, r2
 8006dd2:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	4413      	add	r3, r2
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006de6:	b2db      	uxtb	r3, r3
 8006de8:	4413      	add	r3, r2
 8006dea:	b2db      	uxtb	r3, r3
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	370c      	adds	r7, #12
 8006df0:	46bd      	mov	sp, r7
 8006df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df6:	4770      	bx	lr

08006df8 <vTaskStateEst>:
void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory,
		float pressure, float temperature);


void vTaskStateEst(void *argument) {
 8006df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006dfa:	f2ad 5dcc 	subw	sp, sp, #1484	; 0x5cc
 8006dfe:	af0c      	add	r7, sp, #48	; 0x30
 8006e00:	1d3b      	adds	r3, r7, #4
 8006e02:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8006e04:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7fb f9a5 	bl	8002158 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8006e0e:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8006e12:	2278      	movs	r2, #120	; 0x78
 8006e14:	2100      	movs	r1, #0
 8006e16:	4618      	mov	r0, r3
 8006e18:	f013 fc17 	bl	801a64a <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8006e1c:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006e20:	4618      	mov	r0, r3
 8006e22:	2378      	movs	r3, #120	; 0x78
 8006e24:	461a      	mov	r2, r3
 8006e26:	2100      	movs	r1, #0
 8006e28:	f013 fc0f 	bl	801a64a <memset>

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8006e2c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fb fc67 	bl	8002704 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8006e36:	f107 0318 	add.w	r3, r7, #24
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	23b0      	movs	r3, #176	; 0xb0
 8006e3e:	461a      	mov	r2, r3
 8006e40:	2100      	movs	r1, #0
 8006e42:	f013 fc02 	bl	801a64a <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8006e46:	f107 0318 	add.w	r3, r7, #24
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 8006e4e:	f107 030c 	add.w	r3, r7, #12
 8006e52:	461a      	mov	r2, r3
 8006e54:	2300      	movs	r3, #0
 8006e56:	6013      	str	r3, [r2, #0]
 8006e58:	6053      	str	r3, [r2, #4]
 8006e5a:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8006e5c:	f107 030c 	add.w	r3, r7, #12
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fb fc37 	bl	80026d4 <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 8006e66:	f107 030b 	add.w	r3, r7, #11
 8006e6a:	229b      	movs	r2, #155	; 0x9b
 8006e6c:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8006e6e:	f107 0318 	add.w	r3, r7, #24
 8006e72:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006e76:	f107 010c 	add.w	r1, r7, #12
 8006e7a:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006e7e:	f7fc f82f 	bl	8002ee0 <select_noise_models>

	/* average Temperature */
	float average_temp = 0;
 8006e82:	f04f 0300 	mov.w	r3, #0
 8006e86:	f507 62b2 	add.w	r2, r7, #1424	; 0x590
 8006e8a:	6013      	str	r3, [r2, #0]
	float sum_temp = 0;
 8006e8c:	f04f 0300 	mov.w	r3, #0
 8006e90:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8006e94:	6013      	str	r3, [r2, #0]
	/* average Pressure */
	float average_press = 0;
 8006e96:	f04f 0300 	mov.w	r3, #0
 8006e9a:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006e9e:	6013      	str	r3, [r2, #0]
	float sum_press = 0;
 8006ea0:	f04f 0300 	mov.w	r3, #0
 8006ea4:	f207 5284 	addw	r2, r7, #1412	; 0x584
 8006ea8:	6013      	str	r3, [r2, #0]
	uint16_t calibrate_count = 0;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	f8a7 3582 	strh.w	r3, [r7, #1410]	; 0x582

	/* reset counter */
	uint32_t reset_counter = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
	bool was_reset = false;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	f887 357b 	strb.w	r3, [r7, #1403]	; 0x57b

	osDelay(600);
 8006ebc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006ec0:	f00e ffac 	bl	8015e1c <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006ec4:	f00e fed2 	bl	8015c6c <osKernelGetTickCount>
 8006ec8:	f8c7 0594 	str.w	r0, [r7, #1428]	; 0x594
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8006ecc:	f00e fef6 	bl	8015cbc <osKernelGetTickFreq>
 8006ed0:	4602      	mov	r2, r0
 8006ed2:	4bb1      	ldr	r3, [pc, #708]	; (8007198 <vTaskStateEst+0x3a0>)
 8006ed4:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

	for (;;) {
		tick_count += tick_update;
 8006ede:	f8d7 2594 	ldr.w	r2, [r7, #1428]	; 0x594
 8006ee2:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8006ee6:	4413      	add	r3, r2
 8006ee8:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8006eec:	f107 020b 	add.w	r2, r7, #11
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	49aa      	ldr	r1, [pc, #680]	; (800719c <vTaskStateEst+0x3a4>)
 8006ef4:	48aa      	ldr	r0, [pc, #680]	; (80071a0 <vTaskStateEst+0x3a8>)
 8006ef6:	f7fc ff63 	bl	8003dc0 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8006efa:	f107 030c 	add.w	r3, r7, #12
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d115      	bne.n	8006f30 <vTaskStateEst+0x138>
 8006f04:	4ba5      	ldr	r3, [pc, #660]	; (800719c <vTaskStateEst+0x3a4>)
 8006f06:	781b      	ldrb	r3, [r3, #0]
 8006f08:	2b49      	cmp	r3, #73	; 0x49
 8006f0a:	d111      	bne.n	8006f30 <vTaskStateEst+0x138>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 8006f0c:	f107 0318 	add.w	r3, r7, #24
 8006f10:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006f14:	f107 010c 	add.w	r1, r7, #12
 8006f18:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006f1c:	f507 64b2 	add.w	r4, r7, #1424	; 0x590
 8006f20:	edd4 0a00 	vldr	s1, [r4]
 8006f24:	f507 64b1 	add.w	r4, r7, #1416	; 0x588
 8006f28:	ed94 0a00 	vldr	s0, [r4]
 8006f2c:	f000 f958 	bl	80071e0 <resetStateEstimation>
		}

		/* Reset the whole thing automatically after 30 Seconds of running */
		if(reset_counter > 30*STATE_ESTIMATION_FREQUENCY && !was_reset){
 8006f30:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8006f34:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d91b      	bls.n	8006f74 <vTaskStateEst+0x17c>
 8006f3c:	f897 357b 	ldrb.w	r3, [r7, #1403]	; 0x57b
 8006f40:	f083 0301 	eor.w	r3, r3, #1
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d014      	beq.n	8006f74 <vTaskStateEst+0x17c>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 8006f4a:	f107 0318 	add.w	r3, r7, #24
 8006f4e:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006f52:	f107 010c 	add.w	r1, r7, #12
 8006f56:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006f5a:	f507 64b2 	add.w	r4, r7, #1424	; 0x590
 8006f5e:	edd4 0a00 	vldr	s1, [r4]
 8006f62:	f507 64b1 	add.w	r4, r7, #1416	; 0x588
 8006f66:	ed94 0a00 	vldr	s0, [r4]
 8006f6a:	f000 f939 	bl	80071e0 <resetStateEstimation>
			was_reset = true;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	f887 357b 	strb.w	r3, [r7, #1403]	; 0x57b
		}
		reset_counter++;
 8006f74:	f8d7 357c 	ldr.w	r3, [r7, #1404]	; 0x57c
 8006f78:	3301      	adds	r3, #1
 8006f7a:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c


		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8006f7e:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006f82:	2301      	movs	r3, #1
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	4613      	mov	r3, r2
 8006f88:	4a86      	ldr	r2, [pc, #536]	; (80071a4 <vTaskStateEst+0x3ac>)
 8006f8a:	4987      	ldr	r1, [pc, #540]	; (80071a8 <vTaskStateEst+0x3b0>)
 8006f8c:	4887      	ldr	r0, [pc, #540]	; (80071ac <vTaskStateEst+0x3b4>)
 8006f8e:	f7fc ff53 	bl	8003e38 <ReadMutexStateEst>

		/* Sensor Board 2 */
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8006f92:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006f96:	2302      	movs	r3, #2
 8006f98:	9300      	str	r3, [sp, #0]
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	4a84      	ldr	r2, [pc, #528]	; (80071b0 <vTaskStateEst+0x3b8>)
 8006f9e:	4985      	ldr	r1, [pc, #532]	; (80071b4 <vTaskStateEst+0x3bc>)
 8006fa0:	4885      	ldr	r0, [pc, #532]	; (80071b8 <vTaskStateEst+0x3c0>)
 8006fa2:	f7fc ff49 	bl	8003e38 <ReadMutexStateEst>

		/* Sensor Board 3 */
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8006fa6:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006faa:	2303      	movs	r3, #3
 8006fac:	9300      	str	r3, [sp, #0]
 8006fae:	4613      	mov	r3, r2
 8006fb0:	4a82      	ldr	r2, [pc, #520]	; (80071bc <vTaskStateEst+0x3c4>)
 8006fb2:	4983      	ldr	r1, [pc, #524]	; (80071c0 <vTaskStateEst+0x3c8>)
 8006fb4:	4883      	ldr	r0, [pc, #524]	; (80071c4 <vTaskStateEst+0x3cc>)
 8006fb6:	f7fc ff3f 	bl	8003e38 <ReadMutexStateEst>

		/* calculate averaging */
		if(flight_phase_detection.flight_phase == IDLE){
 8006fba:	f107 030c 	add.w	r3, r7, #12
 8006fbe:	781b      	ldrb	r3, [r3, #0]
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d165      	bne.n	8007090 <vTaskStateEst+0x298>
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8006fc4:	4b78      	ldr	r3, [pc, #480]	; (80071a8 <vTaskStateEst+0x3b0>)
 8006fc6:	681a      	ldr	r2, [r3, #0]
 8006fc8:	4b7a      	ldr	r3, [pc, #488]	; (80071b4 <vTaskStateEst+0x3bc>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	441a      	add	r2, r3
 8006fce:	4b7c      	ldr	r3, [pc, #496]	; (80071c0 <vTaskStateEst+0x3c8>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	ee07 3a90 	vmov	s15, r3
 8006fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fdc:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006fe0:	ed93 7a00 	vldr	s14, [r3]
 8006fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fe8:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006fec:	edc3 7a00 	vstr	s15, [r3]
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8006ff0:	4b6d      	ldr	r3, [pc, #436]	; (80071a8 <vTaskStateEst+0x3b0>)
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	4b6f      	ldr	r3, [pc, #444]	; (80071b4 <vTaskStateEst+0x3bc>)
 8006ff6:	685b      	ldr	r3, [r3, #4]
 8006ff8:	441a      	add	r2, r3
 8006ffa:	4b71      	ldr	r3, [pc, #452]	; (80071c0 <vTaskStateEst+0x3c8>)
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	4413      	add	r3, r2
 8007000:	ee07 3a90 	vmov	s15, r3
 8007004:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007008:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80071c8 <vTaskStateEst+0x3d0>
 800700c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007010:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8007014:	ed93 7a00 	vldr	s14, [r3]
 8007018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800701c:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8007020:	edc3 7a00 	vstr	s15, [r3]
			calibrate_count += 3;
 8007024:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 8007028:	3303      	adds	r3, #3
 800702a:	f8a7 3582 	strh.w	r3, [r7, #1410]	; 0x582
			if(calibrate_count > 150){
 800702e:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 8007032:	2b96      	cmp	r3, #150	; 0x96
 8007034:	d92c      	bls.n	8007090 <vTaskStateEst+0x298>
				average_press = sum_press / (float)calibrate_count;
 8007036:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 800703a:	ee07 3a90 	vmov	s15, r3
 800703e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007042:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8007046:	edd3 6a00 	vldr	s13, [r3]
 800704a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800704e:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8007052:	edc3 7a00 	vstr	s15, [r3]
				average_temp = sum_temp / (float)calibrate_count;
 8007056:	f8b7 3582 	ldrh.w	r3, [r7, #1410]	; 0x582
 800705a:	ee07 3a90 	vmov	s15, r3
 800705e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007062:	f207 538c 	addw	r3, r7, #1420	; 0x58c
 8007066:	edd3 6a00 	vldr	s13, [r3]
 800706a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800706e:	f507 63b2 	add.w	r3, r7, #1424	; 0x590
 8007072:	edc3 7a00 	vstr	s15, [r3]
				sum_press = 0;
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	f207 5284 	addw	r2, r7, #1412	; 0x584
 800707e:	6013      	str	r3, [r2, #0]
				sum_temp = 0;
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	f207 528c 	addw	r2, r7, #1420	; 0x58c
 8007088:	6013      	str	r3, [r2, #0]
				calibrate_count = 0;
 800708a:	2300      	movs	r3, #0
 800708c:	f8a7 3582 	strh.w	r3, [r7, #1410]	; 0x582
			}
		}

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 8007090:	f107 020c 	add.w	r2, r7, #12
 8007094:	230c      	movs	r3, #12
 8007096:	494d      	ldr	r1, [pc, #308]	; (80071cc <vTaskStateEst+0x3d4>)
 8007098:	484d      	ldr	r0, [pc, #308]	; (80071d0 <vTaskStateEst+0x3d8>)
 800709a:	f7fc fe91 	bl	8003dc0 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 800709e:	f207 4074 	addw	r0, r7, #1140	; 0x474
 80070a2:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 80070a6:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80070aa:	f107 0318 	add.w	r3, r7, #24
 80070ae:	9301      	str	r3, [sp, #4]
 80070b0:	f207 5364 	addw	r3, r7, #1380	; 0x564
 80070b4:	9300      	str	r3, [sp, #0]
 80070b6:	4603      	mov	r3, r0
 80070b8:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 80070bc:	f7fb fda4 	bl	8002c08 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 80070c0:	f107 0318 	add.w	r3, r7, #24
 80070c4:	f207 5264 	addw	r2, r7, #1380	; 0x564
 80070c8:	f107 010c 	add.w	r1, r7, #12
 80070cc:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80070d0:	f7fb ff06 	bl	8002ee0 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 80070d4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80070d8:	4618      	mov	r0, r3
 80070da:	f7fb fba9 	bl	8002830 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 80070de:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80070e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	dd0a      	ble.n	8007100 <vTaskStateEst+0x308>
			select_kf_observation_matrices(&kf_state);
 80070ea:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80070ee:	4618      	mov	r0, r3
 80070f0:	f7fb fc0f 	bl	8002912 <select_kf_observation_matrices>
			kf_update(&kf_state);
 80070f4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fb fc47 	bl	800298c <kf_update>
 80070fe:	e00a      	b.n	8007116 <vTaskStateEst+0x31e>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8007100:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007104:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8007108:	f503 7382 	add.w	r3, r3, #260	; 0x104
 800710c:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8007110:	ca07      	ldmia	r2, {r0, r1, r2}
 8007112:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8007116:	f207 4374 	addw	r3, r7, #1140	; 0x474
 800711a:	4618      	mov	r0, r3
 800711c:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8007120:	2278      	movs	r2, #120	; 0x78
 8007122:	4619      	mov	r1, r3
 8007124:	f013 fa86 	bl	801a634 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 8007128:	482a      	ldr	r0, [pc, #168]	; (80071d4 <vTaskStateEst+0x3dc>)
 800712a:	f7fc fe21 	bl	8003d70 <AcquireMutex>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d108      	bne.n	8007146 <vTaskStateEst+0x34e>
			update_state_est_data(&state_est_data_global, &kf_state);
 8007134:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8007138:	4619      	mov	r1, r3
 800713a:	4827      	ldr	r0, [pc, #156]	; (80071d8 <vTaskStateEst+0x3e0>)
 800713c:	f7fb fd14 	bl	8002b68 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8007140:	4824      	ldr	r0, [pc, #144]	; (80071d4 <vTaskStateEst+0x3dc>)
 8007142:	f7fc fe2f 	bl	8003da4 <ReleaseMutex>
		}

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8007146:	4822      	ldr	r0, [pc, #136]	; (80071d0 <vTaskStateEst+0x3d8>)
 8007148:	f7fc fe12 	bl	8003d70 <AcquireMutex>
 800714c:	4603      	mov	r3, r0
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <vTaskStateEst+0x36e>
			global_env = env;
 8007152:	4b22      	ldr	r3, [pc, #136]	; (80071dc <vTaskStateEst+0x3e4>)
 8007154:	461c      	mov	r4, r3
 8007156:	f207 5364 	addw	r3, r7, #1380	; 0x564
 800715a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800715c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8007160:	481b      	ldr	r0, [pc, #108]	; (80071d0 <vTaskStateEst+0x3d8>)
 8007162:	f7fc fe1f 	bl	8003da4 <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8007166:	f00e fd81 	bl	8015c6c <osKernelGetTickCount>
 800716a:	4684      	mov	ip, r0
 800716c:	4e1a      	ldr	r6, [pc, #104]	; (80071d8 <vTaskStateEst+0x3e0>)
 800716e:	466d      	mov	r5, sp
 8007170:	f106 040c 	add.w	r4, r6, #12
 8007174:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007176:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007178:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800717a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800717c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007180:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007184:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 8007188:	4660      	mov	r0, ip
 800718a:	f7fd f843 	bl	8004214 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 800718e:	f8d7 0594 	ldr.w	r0, [r7, #1428]	; 0x594
 8007192:	f00e fe71 	bl	8015e78 <osDelayUntil>
		tick_count += tick_update;
 8007196:	e6a2      	b.n	8006ede <vTaskStateEst+0xe6>
 8007198:	51eb851f 	.word	0x51eb851f
 800719c:	20013ce0 	.word	0x20013ce0
 80071a0:	2000b9bc 	.word	0x2000b9bc
 80071a4:	20000224 	.word	0x20000224
 80071a8:	20000218 	.word	0x20000218
 80071ac:	2000faf4 	.word	0x2000faf4
 80071b0:	20000240 	.word	0x20000240
 80071b4:	20000234 	.word	0x20000234
 80071b8:	2001c15c 	.word	0x2001c15c
 80071bc:	2000025c 	.word	0x2000025c
 80071c0:	20000250 	.word	0x20000250
 80071c4:	2000fbe4 	.word	0x2000fbe4
 80071c8:	42c80000 	.word	0x42c80000
 80071cc:	200002bc 	.word	0x200002bc
 80071d0:	200095d8 	.word	0x200095d8
 80071d4:	20011c58 	.word	0x20011c58
 80071d8:	2000026c 	.word	0x2000026c
 80071dc:	200002ac 	.word	0x200002ac

080071e0 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b086      	sub	sp, #24
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6178      	str	r0, [r7, #20]
 80071e8:	6139      	str	r1, [r7, #16]
 80071ea:	60fa      	str	r2, [r7, #12]
 80071ec:	60bb      	str	r3, [r7, #8]
 80071ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80071f2:	edc7 0a00 	vstr	s1, [r7]
	reset_flight_phase_detection(flight_phase_detection);
 80071f6:	6938      	ldr	r0, [r7, #16]
 80071f8:	f7fb fa6c 	bl	80026d4 <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 80071fc:	edd7 0a00 	vldr	s1, [r7]
 8007200:	ed97 0a01 	vldr	s0, [r7, #4]
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7fa ffbf 	bl	8002188 <calibrate_env>
	update_env(environment, temperature);
 800720a:	ed97 0a00 	vldr	s0, [r7]
 800720e:	68f8      	ldr	r0, [r7, #12]
 8007210:	f7fa ffde 	bl	80021d0 <update_env>
	reset_kf_state(kf_state);
 8007214:	6978      	ldr	r0, [r7, #20]
 8007216:	f7fb fa75 	bl	8002704 <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 800721a:	68bb      	ldr	r3, [r7, #8]
 800721c:	4618      	mov	r0, r3
 800721e:	23b0      	movs	r3, #176	; 0xb0
 8007220:	461a      	mov	r2, r3
 8007222:	2100      	movs	r1, #0
 8007224:	f013 fa11 	bl	801a64a <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 8007228:	68bb      	ldr	r3, [r7, #8]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	6939      	ldr	r1, [r7, #16]
 800722e:	6978      	ldr	r0, [r7, #20]
 8007230:	f7fb fe56 	bl	8002ee0 <select_noise_models>
}
 8007234:	bf00      	nop
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <vTaskXbee>:
bool buzzer_on_telemetry = false;


uint8_t calculate_checksum(telemetry_t *cnf);

void vTaskXbee(void *argument) {
 800723c:	b580      	push	{r7, lr}
 800723e:	b0b4      	sub	sp, #208	; 0xd0
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
	/* local Data */
	state_est_data_t state_est_data;
	sb_data_t local_sb_data;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 8007244:	f107 0308 	add.w	r3, r7, #8
 8007248:	225c      	movs	r2, #92	; 0x5c
 800724a:	2100      	movs	r1, #0
 800724c:	4618      	mov	r0, r3
 800724e:	f013 f9fc 	bl	801a64a <memset>
	telemetry_send.flight_phase = IDLE;
 8007252:	2301      	movs	r3, #1
 8007254:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	telemetry_send.startbyte = 0x17;
 8007258:	2317      	movs	r3, #23
 800725a:	723b      	strb	r3, [r7, #8]


	/* Command struct */
	local_command_rx = IDLE_COMMAND;
 800725c:	4baf      	ldr	r3, [pc, #700]	; (800751c <vTaskXbee+0x2e0>)
 800725e:	229b      	movs	r2, #155	; 0x9b
 8007260:	701a      	strb	r2, [r3, #0]
	local_command = IDLE_COMMAND;
 8007262:	4baf      	ldr	r3, [pc, #700]	; (8007520 <vTaskXbee+0x2e4>)
 8007264:	229b      	movs	r2, #155	; 0x9b
 8007266:	701a      	strb	r2, [r3, #0]

	uint8_t buzzercounter = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

	osDelay(400);
 800726e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007272:	f00e fdd3 	bl	8015e1c <osDelay>
	HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8007276:	2201      	movs	r2, #1
 8007278:	2102      	movs	r1, #2
 800727a:	48aa      	ldr	r0, [pc, #680]	; (8007524 <vTaskXbee+0x2e8>)
 800727c:	f001 fd82 	bl	8008d84 <HAL_GPIO_WritePin>


	/* Infinite loop */

	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8007280:	f00e fd1c 	bl	8015cbc <osKernelGetTickFreq>
 8007284:	4602      	mov	r2, r0
 8007286:	4ba8      	ldr	r3, [pc, #672]	; (8007528 <vTaskXbee+0x2ec>)
 8007288:	fba3 2302 	umull	r2, r3, r3, r2
 800728c:	08db      	lsrs	r3, r3, #3
 800728e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8007292:	f00e fd13 	bl	8015cbc <osKernelGetTickFreq>
 8007296:	4602      	mov	r2, r0
 8007298:	4ba4      	ldr	r3, [pc, #656]	; (800752c <vTaskXbee+0x2f0>)
 800729a:	fba3 2302 	umull	r2, r3, r3, r2
 800729e:	095b      	lsrs	r3, r3, #5
 80072a0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	bool fast_sampling = false;
 80072a4:	2300      	movs	r3, #0
 80072a6:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
	tick_count = osKernelGetTickCount();
 80072aa:	f00e fcdf 	bl	8015c6c <osKernelGetTickCount>
 80072ae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	while (1) {
		/* Tick Update */
		if(fast_sampling){
 80072b2:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d007      	beq.n	80072ca <vTaskXbee+0x8e>
			tick_count += tick_update_fast;
 80072ba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80072be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072c2:	4413      	add	r3, r2
 80072c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072c8:	e006      	b.n	80072d8 <vTaskXbee+0x9c>
		}
		else{
			tick_count += tick_update_slow;
 80072ca:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80072ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80072d2:	4413      	add	r3, r2
 80072d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		}
		/* Read Command */
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 80072d8:	2201      	movs	r2, #1
 80072da:	4990      	ldr	r1, [pc, #576]	; (800751c <vTaskXbee+0x2e0>)
 80072dc:	4894      	ldr	r0, [pc, #592]	; (8007530 <vTaskXbee+0x2f4>)
 80072de:	f006 fcd9 	bl	800dc94 <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 80072e2:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80072e4:	4b8e      	ldr	r3, [pc, #568]	; (8007520 <vTaskXbee+0x2e4>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	461a      	mov	r2, r3
 80072ea:	4b8c      	ldr	r3, [pc, #560]	; (800751c <vTaskXbee+0x2e0>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	4891      	ldr	r0, [pc, #580]	; (8007534 <vTaskXbee+0x2f8>)
 80072f0:	f7fd f820 	bl	8004334 <UsbPrint>
				telemetry_send.ts, local_command, local_command_rx);

		if(AcquireMutex(&command_mutex) == osOK){
 80072f4:	4890      	ldr	r0, [pc, #576]	; (8007538 <vTaskXbee+0x2fc>)
 80072f6:	f7fc fd3b 	bl	8003d70 <AcquireMutex>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d106      	bne.n	800730e <vTaskXbee+0xd2>
			global_telemetry_command = local_command;
 8007300:	4b87      	ldr	r3, [pc, #540]	; (8007520 <vTaskXbee+0x2e4>)
 8007302:	781a      	ldrb	r2, [r3, #0]
 8007304:	4b8d      	ldr	r3, [pc, #564]	; (800753c <vTaskXbee+0x300>)
 8007306:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 8007308:	488b      	ldr	r0, [pc, #556]	; (8007538 <vTaskXbee+0x2fc>)
 800730a:	f7fc fd4b 	bl	8003da4 <ReleaseMutex>
		}

		/* Check if we need to go to fast sampling */
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 800730e:	4b84      	ldr	r3, [pc, #528]	; (8007520 <vTaskXbee+0x2e4>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b0d      	cmp	r3, #13
 8007314:	d102      	bne.n	800731c <vTaskXbee+0xe0>
			fast_sampling = true;
 8007316:	2301      	movs	r3, #1
 8007318:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		}

		/* Check if we need to go to low sampling */
		if(local_command == TELEMETRY_LOW_SAMPLING){
 800731c:	4b80      	ldr	r3, [pc, #512]	; (8007520 <vTaskXbee+0x2e4>)
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	2bc5      	cmp	r3, #197	; 0xc5
 8007322:	d102      	bne.n	800732a <vTaskXbee+0xee>
			fast_sampling = false;
 8007324:	2300      	movs	r3, #0
 8007326:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		}

		/* Enable Buzzer trough Telemetry */
		if(local_command == ENABLE_BUZZER){
 800732a:	4b7d      	ldr	r3, [pc, #500]	; (8007520 <vTaskXbee+0x2e4>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b71      	cmp	r3, #113	; 0x71
 8007330:	d10e      	bne.n	8007350 <vTaskXbee+0x114>
			buzzer_on_telemetry = !buzzer_on_telemetry;
 8007332:	4b83      	ldr	r3, [pc, #524]	; (8007540 <vTaskXbee+0x304>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	bf14      	ite	ne
 800733a:	2301      	movne	r3, #1
 800733c:	2300      	moveq	r3, #0
 800733e:	b2db      	uxtb	r3, r3
 8007340:	f083 0301 	eor.w	r3, r3, #1
 8007344:	b2db      	uxtb	r3, r3
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	b2da      	uxtb	r2, r3
 800734c:	4b7c      	ldr	r3, [pc, #496]	; (8007540 <vTaskXbee+0x304>)
 800734e:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Buzzer Trough FSM */
		if(telemetry_send.flight_phase == RECOVERY){
 8007350:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8007354:	2b06      	cmp	r3, #6
 8007356:	d102      	bne.n	800735e <vTaskXbee+0x122>
			buzzer_on_fsm = true;
 8007358:	4b7a      	ldr	r3, [pc, #488]	; (8007544 <vTaskXbee+0x308>)
 800735a:	2201      	movs	r2, #1
 800735c:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Self Power Hold */
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 800735e:	4b70      	ldr	r3, [pc, #448]	; (8007520 <vTaskXbee+0x2e4>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b0d      	cmp	r3, #13
 8007364:	d104      	bne.n	8007370 <vTaskXbee+0x134>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_RESET);
 8007366:	2200      	movs	r2, #0
 8007368:	2102      	movs	r1, #2
 800736a:	486e      	ldr	r0, [pc, #440]	; (8007524 <vTaskXbee+0x2e8>)
 800736c:	f001 fd0a 	bl	8008d84 <HAL_GPIO_WritePin>
		}

		/* Go Back to Low Sampling if we are in Recovery */
		if(telemetry_send.flight_phase == RECOVERY){
 8007370:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8007374:	2b06      	cmp	r3, #6
 8007376:	d102      	bne.n	800737e <vTaskXbee+0x142>
			fast_sampling = false;
 8007378:	2300      	movs	r3, #0
 800737a:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		}

		/* Disable Self Power Hold */
		if(local_command == DISABLE_SELF_HOLD){
 800737e:	4b68      	ldr	r3, [pc, #416]	; (8007520 <vTaskXbee+0x2e4>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2bfb      	cmp	r3, #251	; 0xfb
 8007384:	d104      	bne.n	8007390 <vTaskXbee+0x154>
			HAL_GPIO_WritePin(PW_HOLD_GPIO_Port, PW_HOLD_Pin, GPIO_PIN_SET);
 8007386:	2201      	movs	r2, #1
 8007388:	2102      	movs	r1, #2
 800738a:	4866      	ldr	r0, [pc, #408]	; (8007524 <vTaskXbee+0x2e8>)
 800738c:	f001 fcfa 	bl	8008d84 <HAL_GPIO_WritePin>
		}

		/* reset command */
		if(new_command){
 8007390:	4b6d      	ldr	r3, [pc, #436]	; (8007548 <vTaskXbee+0x30c>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d005      	beq.n	80073a4 <vTaskXbee+0x168>
			local_command = IDLE_COMMAND;
 8007398:	4b61      	ldr	r3, [pc, #388]	; (8007520 <vTaskXbee+0x2e4>)
 800739a:	229b      	movs	r2, #155	; 0x9b
 800739c:	701a      	strb	r2, [r3, #0]
			new_command = false;
 800739e:	4b6a      	ldr	r3, [pc, #424]	; (8007548 <vTaskXbee+0x30c>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Buzzer */
		if(buzzer_on_fsm ^ buzzer_on_telemetry){
 80073a4:	4b67      	ldr	r3, [pc, #412]	; (8007544 <vTaskXbee+0x308>)
 80073a6:	781a      	ldrb	r2, [r3, #0]
 80073a8:	4b65      	ldr	r3, [pc, #404]	; (8007540 <vTaskXbee+0x304>)
 80073aa:	781b      	ldrb	r3, [r3, #0]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d029      	beq.n	8007404 <vTaskXbee+0x1c8>
			if(fast_sampling){
 80073b0:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d012      	beq.n	80073de <vTaskXbee+0x1a2>
				if(buzzercounter > (400/tick_update_fast)){
 80073b8:	f897 20cb 	ldrb.w	r2, [r7, #203]	; 0xcb
 80073bc:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80073c4:	fbb1 f3f3 	udiv	r3, r1, r3
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d921      	bls.n	8007410 <vTaskXbee+0x1d4>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80073cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073d0:	485e      	ldr	r0, [pc, #376]	; (800754c <vTaskXbee+0x310>)
 80073d2:	f001 fcf0 	bl	8008db6 <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 80073d6:	2300      	movs	r3, #0
 80073d8:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 80073dc:	e018      	b.n	8007410 <vTaskXbee+0x1d4>
				}
			}
			else{
				if(buzzercounter > (400/tick_update_slow)){
 80073de:	f897 20cb 	ldrb.w	r2, [r7, #203]	; 0xcb
 80073e2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80073e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80073ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d90e      	bls.n	8007410 <vTaskXbee+0x1d4>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 80073f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80073f6:	4855      	ldr	r0, [pc, #340]	; (800754c <vTaskXbee+0x310>)
 80073f8:	f001 fcdd 	bl	8008db6 <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8007402:	e005      	b.n	8007410 <vTaskXbee+0x1d4>
				}
			}
		}
		else{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8007404:	2200      	movs	r2, #0
 8007406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800740a:	4850      	ldr	r0, [pc, #320]	; (800754c <vTaskXbee+0x310>)
 800740c:	f001 fcba 	bl	8008d84 <HAL_GPIO_WritePin>
		}
		buzzercounter++;
 8007410:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8007414:	3301      	adds	r3, #1
 8007416:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 800741a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800741e:	230c      	movs	r3, #12
 8007420:	494b      	ldr	r1, [pc, #300]	; (8007550 <vTaskXbee+0x314>)
 8007422:	484c      	ldr	r0, [pc, #304]	; (8007554 <vTaskXbee+0x318>)
 8007424:	f7fc fccc 	bl	8003dc0 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 8007428:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800742c:	f103 020c 	add.w	r2, r3, #12
 8007430:	2310      	movs	r3, #16
 8007432:	4949      	ldr	r1, [pc, #292]	; (8007558 <vTaskXbee+0x31c>)
 8007434:	4847      	ldr	r0, [pc, #284]	; (8007554 <vTaskXbee+0x318>)
 8007436:	f7fc fcc3 	bl	8003dc0 <ReadMutex>

		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 800743a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800743c:	60fb      	str	r3, [r7, #12]
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 800743e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007440:	613b      	str	r3, [r7, #16]
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 8007442:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 8007446:	837b      	strh	r3, [r7, #26]
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 8007448:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 800744c:	83bb      	strh	r3, [r7, #28]
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 800744e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8007452:	83fb      	strh	r3, [r7, #30]
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 8007454:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 8007458:	82bb      	strh	r3, [r7, #20]
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 800745a:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 800745e:	82fb      	strh	r3, [r7, #22]
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 8007460:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 8007464:	833b      	strh	r3, [r7, #24]


		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 8007466:	f107 0284 	add.w	r2, r7, #132	; 0x84
 800746a:	233c      	movs	r3, #60	; 0x3c
 800746c:	493b      	ldr	r1, [pc, #236]	; (800755c <vTaskXbee+0x320>)
 800746e:	483c      	ldr	r0, [pc, #240]	; (8007560 <vTaskXbee+0x324>)
 8007470:	f7fc fca6 	bl	8003dc0 <ReadMutex>

		ReadMutex(&controller_mutex, &controller_output_global, &telemetry_send.airbrake_extension, sizeof(controller_output_global));
 8007474:	f107 0308 	add.w	r3, r7, #8
 8007478:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 800747c:	2304      	movs	r3, #4
 800747e:	4939      	ldr	r1, [pc, #228]	; (8007564 <vTaskXbee+0x328>)
 8007480:	4839      	ldr	r0, [pc, #228]	; (8007568 <vTaskXbee+0x32c>)
 8007482:	f7fc fc9d 	bl	8003dc0 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	f103 0250 	add.w	r2, r3, #80	; 0x50
 800748e:	2301      	movs	r3, #1
 8007490:	4936      	ldr	r1, [pc, #216]	; (800756c <vTaskXbee+0x330>)
 8007492:	4837      	ldr	r0, [pc, #220]	; (8007570 <vTaskXbee+0x334>)
 8007494:	f7fc fc94 	bl	8003dc0 <ReadMutex>

		/* read GPS */
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps, sizeof(globalGPS));
 8007498:	f107 0308 	add.w	r3, r7, #8
 800749c:	f103 0220 	add.w	r2, r3, #32
 80074a0:	2324      	movs	r3, #36	; 0x24
 80074a2:	4934      	ldr	r1, [pc, #208]	; (8007574 <vTaskXbee+0x338>)
 80074a4:	4834      	ldr	r0, [pc, #208]	; (8007578 <vTaskXbee+0x33c>)
 80074a6:	f7fc fc8b 	bl	8003dc0 <ReadMutex>

		/* read Battery */
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery, sizeof(global_battery_data));
 80074aa:	f107 0308 	add.w	r3, r7, #8
 80074ae:	f103 0218 	add.w	r2, r3, #24
 80074b2:	2306      	movs	r3, #6
 80074b4:	4931      	ldr	r1, [pc, #196]	; (800757c <vTaskXbee+0x340>)
 80074b6:	4832      	ldr	r0, [pc, #200]	; (8007580 <vTaskXbee+0x344>)
 80074b8:	f7fc fc82 	bl	8003dc0 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 80074bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074c0:	64fb      	str	r3, [r7, #76]	; 0x4c
		telemetry_send.velocity = state_est_data.velocity_world[2];
 80074c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80074c6:	653b      	str	r3, [r7, #80]	; 0x50
		telemetry_send.ts = osKernelGetTickCount();
 80074c8:	f00e fbd0 	bl	8015c6c <osKernelGetTickCount>
 80074cc:	4603      	mov	r3, r0
 80074ce:	65fb      	str	r3, [r7, #92]	; 0x5c

		/* Write Buzzer State*/
		telemetry_send.flight_phase = telemetry_send.flight_phase + 128*(buzzer_on_fsm ^ buzzer_on_telemetry);
 80074d0:	f897 2058 	ldrb.w	r2, [r7, #88]	; 0x58
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <vTaskXbee+0x308>)
 80074d6:	7819      	ldrb	r1, [r3, #0]
 80074d8:	4b19      	ldr	r3, [pc, #100]	; (8007540 <vTaskXbee+0x304>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	404b      	eors	r3, r1
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	01db      	lsls	r3, r3, #7
 80074e2:	b2db      	uxtb	r3, r3
 80074e4:	4413      	add	r3, r2
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58

		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f895 	bl	8007620 <calculate_checksum>
 80074f6:	4603      	mov	r3, r0
 80074f8:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 80074fc:	f107 0108 	add.w	r1, r7, #8
 8007500:	2364      	movs	r3, #100	; 0x64
 8007502:	225c      	movs	r2, #92	; 0x5c
 8007504:	480a      	ldr	r0, [pc, #40]	; (8007530 <vTaskXbee+0x2f4>)
 8007506:	f006 fb33 	bl	800db70 <HAL_UART_Transmit>

		telemetry_send.checksum = 0;
 800750a:	2300      	movs	r3, #0
 800750c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

		/* Sleep */
		osDelayUntil(tick_count);
 8007510:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8007514:	f00e fcb0 	bl	8015e78 <osDelayUntil>
		if(fast_sampling){
 8007518:	e6cb      	b.n	80072b2 <vTaskXbee+0x76>
 800751a:	bf00      	nop
 800751c:	2001c60d 	.word	0x2001c60d
 8007520:	2001c60c 	.word	0x2001c60c
 8007524:	40020400 	.word	0x40020400
 8007528:	cccccccd 	.word	0xcccccccd
 800752c:	51eb851f 	.word	0x51eb851f
 8007530:	2000964c 	.word	0x2000964c
 8007534:	0801d520 	.word	0x0801d520
 8007538:	2000b9bc 	.word	0x2000b9bc
 800753c:	20013ce0 	.word	0x20013ce0
 8007540:	2000032e 	.word	0x2000032e
 8007544:	2000032d 	.word	0x2000032d
 8007548:	2000032c 	.word	0x2000032c
 800754c:	40020c00 	.word	0x40020c00
 8007550:	20000218 	.word	0x20000218
 8007554:	2000faf4 	.word	0x2000faf4
 8007558:	20000224 	.word	0x20000224
 800755c:	2000026c 	.word	0x2000026c
 8007560:	20011c58 	.word	0x20011c58
 8007564:	200002a8 	.word	0x200002a8
 8007568:	2000fa34 	.word	0x2000fa34
 800756c:	200002bc 	.word	0x200002bc
 8007570:	200095d8 	.word	0x200095d8
 8007574:	20013cbc 	.word	0x20013cbc
 8007578:	20017da4 	.word	0x20017da4
 800757c:	2000fa3c 	.word	0x2000fa3c
 8007580:	20009644 	.word	0x20009644

08007584 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
	if(huart==&huart7){
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a1e      	ldr	r2, [pc, #120]	; (8007608 <HAL_UART_RxCpltCallback+0x84>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d135      	bne.n	8007600 <HAL_UART_RxCpltCallback+0x7c>
		static int counter = 0;
		static uint8_t buffer [4];
		buffer[counter] = local_command_rx;
 8007594:	4b1d      	ldr	r3, [pc, #116]	; (800760c <HAL_UART_RxCpltCallback+0x88>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <HAL_UART_RxCpltCallback+0x8c>)
 800759a:	7811      	ldrb	r1, [r2, #0]
 800759c:	4a1d      	ldr	r2, [pc, #116]	; (8007614 <HAL_UART_RxCpltCallback+0x90>)
 800759e:	54d1      	strb	r1, [r2, r3]
		counter++;
 80075a0:	4b1a      	ldr	r3, [pc, #104]	; (800760c <HAL_UART_RxCpltCallback+0x88>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3301      	adds	r3, #1
 80075a6:	4a19      	ldr	r2, [pc, #100]	; (800760c <HAL_UART_RxCpltCallback+0x88>)
 80075a8:	6013      	str	r3, [r2, #0]
		if(counter == 4){
 80075aa:	4b18      	ldr	r3, [pc, #96]	; (800760c <HAL_UART_RxCpltCallback+0x88>)
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d121      	bne.n	80075f6 <HAL_UART_RxCpltCallback+0x72>
			uint8_t succesful = 1;
 80075b2:	2301      	movs	r3, #1
 80075b4:	73fb      	strb	r3, [r7, #15]
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 80075b6:	2301      	movs	r3, #1
 80075b8:	60bb      	str	r3, [r7, #8]
 80075ba:	e00c      	b.n	80075d6 <HAL_UART_RxCpltCallback+0x52>
 80075bc:	4b15      	ldr	r3, [pc, #84]	; (8007614 <HAL_UART_RxCpltCallback+0x90>)
 80075be:	781a      	ldrb	r2, [r3, #0]
 80075c0:	4914      	ldr	r1, [pc, #80]	; (8007614 <HAL_UART_RxCpltCallback+0x90>)
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	440b      	add	r3, r1
 80075c6:	781b      	ldrb	r3, [r3, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d001      	beq.n	80075d0 <HAL_UART_RxCpltCallback+0x4c>
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	3301      	adds	r3, #1
 80075d4:	60bb      	str	r3, [r7, #8]
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	2b03      	cmp	r3, #3
 80075da:	ddef      	ble.n	80075bc <HAL_UART_RxCpltCallback+0x38>
			counter = 0;
 80075dc:	4b0b      	ldr	r3, [pc, #44]	; (800760c <HAL_UART_RxCpltCallback+0x88>)
 80075de:	2200      	movs	r2, #0
 80075e0:	601a      	str	r2, [r3, #0]
			if (succesful) {
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d006      	beq.n	80075f6 <HAL_UART_RxCpltCallback+0x72>
				new_command = true;
 80075e8:	4b0b      	ldr	r3, [pc, #44]	; (8007618 <HAL_UART_RxCpltCallback+0x94>)
 80075ea:	2201      	movs	r2, #1
 80075ec:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 80075ee:	4b08      	ldr	r3, [pc, #32]	; (8007610 <HAL_UART_RxCpltCallback+0x8c>)
 80075f0:	781a      	ldrb	r2, [r3, #0]
 80075f2:	4b0a      	ldr	r3, [pc, #40]	; (800761c <HAL_UART_RxCpltCallback+0x98>)
 80075f4:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 80075f6:	2201      	movs	r2, #1
 80075f8:	4905      	ldr	r1, [pc, #20]	; (8007610 <HAL_UART_RxCpltCallback+0x8c>)
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f006 fb4a 	bl	800dc94 <HAL_UART_Receive_IT>
	}
}
 8007600:	bf00      	nop
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}
 8007608:	2000964c 	.word	0x2000964c
 800760c:	20000330 	.word	0x20000330
 8007610:	2001c60d 	.word	0x2001c60d
 8007614:	20000334 	.word	0x20000334
 8007618:	2000032c 	.word	0x2000032c
 800761c:	2001c60c 	.word	0x2001c60c

08007620 <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf){
 8007620:	b480      	push	{r7}
 8007622:	b087      	sub	sp, #28
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
	uint8_t cs=0;
 8007628:	2300      	movs	r3, #0
 800762a:	75fb      	strb	r3, [r7, #23]
	uint8_t *data;
	data = (uint8_t*) cnf;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	613b      	str	r3, [r7, #16]
	for(int i=0; i< sizeof(telemetry_t);i++){
 8007630:	2300      	movs	r3, #0
 8007632:	60fb      	str	r3, [r7, #12]
 8007634:	e009      	b.n	800764a <calculate_checksum+0x2a>
		cs+=*data++;
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	1c5a      	adds	r2, r3, #1
 800763a:	613a      	str	r2, [r7, #16]
 800763c:	781a      	ldrb	r2, [r3, #0]
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	4413      	add	r3, r2
 8007642:	75fb      	strb	r3, [r7, #23]
	for(int i=0; i< sizeof(telemetry_t);i++){
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3301      	adds	r3, #1
 8007648:	60fb      	str	r3, [r7, #12]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2b5b      	cmp	r3, #91	; 0x5b
 800764e:	d9f2      	bls.n	8007636 <calculate_checksum+0x16>
	}
	return (255 - cs);
 8007650:	7dfb      	ldrb	r3, [r7, #23]
 8007652:	43db      	mvns	r3, r3
 8007654:	b2db      	uxtb	r3, r3
}
 8007656:	4618      	mov	r0, r3
 8007658:	371c      	adds	r7, #28
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
	...

08007664 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8007664:	f8df d034 	ldr.w	sp, [pc, #52]	; 800769c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007668:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800766a:	e003      	b.n	8007674 <LoopCopyDataInit>

0800766c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800766c:	4b0c      	ldr	r3, [pc, #48]	; (80076a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800766e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007670:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007672:	3104      	adds	r1, #4

08007674 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007674:	480b      	ldr	r0, [pc, #44]	; (80076a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007676:	4b0c      	ldr	r3, [pc, #48]	; (80076a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007678:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800767a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800767c:	d3f6      	bcc.n	800766c <CopyDataInit>
  ldr  r2, =_sbss
 800767e:	4a0b      	ldr	r2, [pc, #44]	; (80076ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007680:	e002      	b.n	8007688 <LoopFillZerobss>

08007682 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007682:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007684:	f842 3b04 	str.w	r3, [r2], #4

08007688 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007688:	4b09      	ldr	r3, [pc, #36]	; (80076b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800768a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800768c:	d3f9      	bcc.n	8007682 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800768e:	f7fe faaf 	bl	8005bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007692:	f012 ff9b 	bl	801a5cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007696:	f7fc fe5b 	bl	8004350 <main>
  bx  lr    
 800769a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800769c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80076a0:	0801d938 	.word	0x0801d938
  ldr  r0, =_sdata
 80076a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80076a8:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 80076ac:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 80076b0:	2001e3a0 	.word	0x2001e3a0

080076b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076b4:	e7fe      	b.n	80076b4 <ADC_IRQHandler>

080076b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80076ba:	2003      	movs	r0, #3
 80076bc:	f000 fd57 	bl	800816e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80076c0:	2000      	movs	r0, #0
 80076c2:	f7fe f94d 	bl	8005960 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80076c6:	f7fd fc3d 	bl	8004f44 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80076ca:	2300      	movs	r3, #0
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80076d0:	b480      	push	{r7}
 80076d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80076d4:	4b06      	ldr	r3, [pc, #24]	; (80076f0 <HAL_IncTick+0x20>)
 80076d6:	781b      	ldrb	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	4b06      	ldr	r3, [pc, #24]	; (80076f4 <HAL_IncTick+0x24>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4413      	add	r3, r2
 80076e0:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <HAL_IncTick+0x24>)
 80076e2:	6013      	str	r3, [r2, #0]
}
 80076e4:	bf00      	nop
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	20000008 	.word	0x20000008
 80076f4:	2001c618 	.word	0x2001c618

080076f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  return uwTick;
 80076fc:	4b03      	ldr	r3, [pc, #12]	; (800770c <HAL_GetTick+0x14>)
 80076fe:	681b      	ldr	r3, [r3, #0]
}
 8007700:	4618      	mov	r0, r3
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	2001c618 	.word	0x2001c618

08007710 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b084      	sub	sp, #16
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007718:	f7ff ffee 	bl	80076f8 <HAL_GetTick>
 800771c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007728:	d005      	beq.n	8007736 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800772a:	4b09      	ldr	r3, [pc, #36]	; (8007750 <HAL_Delay+0x40>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	461a      	mov	r2, r3
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	4413      	add	r3, r2
 8007734:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007736:	bf00      	nop
 8007738:	f7ff ffde 	bl	80076f8 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	429a      	cmp	r2, r3
 8007746:	d8f7      	bhi.n	8007738 <HAL_Delay+0x28>
  {
  }
}
 8007748:	bf00      	nop
 800774a:	3710      	adds	r7, #16
 800774c:	46bd      	mov	sp, r7
 800774e:	bd80      	pop	{r7, pc}
 8007750:	20000008 	.word	0x20000008

08007754 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b084      	sub	sp, #16
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800775c:	2300      	movs	r3, #0
 800775e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d101      	bne.n	800776a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	e031      	b.n	80077ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d109      	bne.n	8007786 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007772:	6878      	ldr	r0, [r7, #4]
 8007774:	f7fd fc0e 	bl	8004f94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	f003 0310 	and.w	r3, r3, #16
 800778e:	2b00      	cmp	r3, #0
 8007790:	d116      	bne.n	80077c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007796:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <HAL_ADC_Init+0x84>)
 8007798:	4013      	ands	r3, r2
 800779a:	f043 0202 	orr.w	r2, r3, #2
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 faba 	bl	8007d1c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f023 0303 	bic.w	r3, r3, #3
 80077b6:	f043 0201 	orr.w	r2, r3, #1
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	641a      	str	r2, [r3, #64]	; 0x40
 80077be:	e001      	b.n	80077c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
 80077c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80077cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3710      	adds	r7, #16
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	ffffeefd 	.word	0xffffeefd

080077dc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	d101      	bne.n	80077fa <HAL_ADC_Start_DMA+0x1e>
 80077f6:	2302      	movs	r3, #2
 80077f8:	e0c7      	b.n	800798a <HAL_ADC_Start_DMA+0x1ae>
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2201      	movs	r2, #1
 80077fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f003 0301 	and.w	r3, r3, #1
 800780c:	2b01      	cmp	r3, #1
 800780e:	d018      	beq.n	8007842 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	689a      	ldr	r2, [r3, #8]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f042 0201 	orr.w	r2, r2, #1
 800781e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007820:	4b5c      	ldr	r3, [pc, #368]	; (8007994 <HAL_ADC_Start_DMA+0x1b8>)
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a5c      	ldr	r2, [pc, #368]	; (8007998 <HAL_ADC_Start_DMA+0x1bc>)
 8007826:	fba2 2303 	umull	r2, r3, r2, r3
 800782a:	0c9a      	lsrs	r2, r3, #18
 800782c:	4613      	mov	r3, r2
 800782e:	005b      	lsls	r3, r3, #1
 8007830:	4413      	add	r3, r2
 8007832:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8007834:	e002      	b.n	800783c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	3b01      	subs	r3, #1
 800783a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f9      	bne.n	8007836 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	689b      	ldr	r3, [r3, #8]
 8007848:	f003 0301 	and.w	r3, r3, #1
 800784c:	2b01      	cmp	r3, #1
 800784e:	f040 809b 	bne.w	8007988 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007856:	4b51      	ldr	r3, [pc, #324]	; (800799c <HAL_ADC_Start_DMA+0x1c0>)
 8007858:	4013      	ands	r3, r2
 800785a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800786c:	2b00      	cmp	r3, #0
 800786e:	d007      	beq.n	8007880 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007878:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007888:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800788c:	d106      	bne.n	800789c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007892:	f023 0206 	bic.w	r2, r3, #6
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	645a      	str	r2, [r3, #68]	; 0x44
 800789a:	e002      	b.n	80078a2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2200      	movs	r2, #0
 80078a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	4a3c      	ldr	r2, [pc, #240]	; (80079a0 <HAL_ADC_Start_DMA+0x1c4>)
 80078b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	4a3b      	ldr	r2, [pc, #236]	; (80079a4 <HAL_ADC_Start_DMA+0x1c8>)
 80078b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078be:	4a3a      	ldr	r2, [pc, #232]	; (80079a8 <HAL_ADC_Start_DMA+0x1cc>)
 80078c0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80078ca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80078da:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078ea:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	334c      	adds	r3, #76	; 0x4c
 80078f6:	4619      	mov	r1, r3
 80078f8:	68ba      	ldr	r2, [r7, #8]
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	f000 fd1a 	bl	8008334 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007900:	4b2a      	ldr	r3, [pc, #168]	; (80079ac <HAL_ADC_Start_DMA+0x1d0>)
 8007902:	685b      	ldr	r3, [r3, #4]
 8007904:	f003 031f 	and.w	r3, r3, #31
 8007908:	2b00      	cmp	r3, #0
 800790a:	d10f      	bne.n	800792c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	689b      	ldr	r3, [r3, #8]
 8007912:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007916:	2b00      	cmp	r3, #0
 8007918:	d136      	bne.n	8007988 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	689a      	ldr	r2, [r3, #8]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007928:	609a      	str	r2, [r3, #8]
 800792a:	e02d      	b.n	8007988 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4a1f      	ldr	r2, [pc, #124]	; (80079b0 <HAL_ADC_Start_DMA+0x1d4>)
 8007932:	4293      	cmp	r3, r2
 8007934:	d10e      	bne.n	8007954 <HAL_ADC_Start_DMA+0x178>
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	689b      	ldr	r3, [r3, #8]
 800793c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d107      	bne.n	8007954 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	689a      	ldr	r2, [r3, #8]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007952:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8007954:	4b15      	ldr	r3, [pc, #84]	; (80079ac <HAL_ADC_Start_DMA+0x1d0>)
 8007956:	685b      	ldr	r3, [r3, #4]
 8007958:	f003 0310 	and.w	r3, r3, #16
 800795c:	2b00      	cmp	r3, #0
 800795e:	d113      	bne.n	8007988 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	4a13      	ldr	r2, [pc, #76]	; (80079b4 <HAL_ADC_Start_DMA+0x1d8>)
 8007966:	4293      	cmp	r3, r2
 8007968:	d10e      	bne.n	8007988 <HAL_ADC_Start_DMA+0x1ac>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007974:	2b00      	cmp	r3, #0
 8007976:	d107      	bne.n	8007988 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007986:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3718      	adds	r7, #24
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000000 	.word	0x20000000
 8007998:	431bde83 	.word	0x431bde83
 800799c:	fffff8fe 	.word	0xfffff8fe
 80079a0:	08007f11 	.word	0x08007f11
 80079a4:	08007fcb 	.word	0x08007fcb
 80079a8:	08007fe7 	.word	0x08007fe7
 80079ac:	40012300 	.word	0x40012300
 80079b0:	40012000 	.word	0x40012000
 80079b4:	40012200 	.word	0x40012200

080079b8 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b084      	sub	sp, #16
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80079c0:	2300      	movs	r3, #0
 80079c2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d101      	bne.n	80079d2 <HAL_ADC_Stop_DMA+0x1a>
 80079ce:	2302      	movs	r3, #2
 80079d0:	e036      	b.n	8007a40 <HAL_ADC_Stop_DMA+0x88>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2201      	movs	r2, #1
 80079d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f022 0201 	bic.w	r2, r2, #1
 80079e8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	689b      	ldr	r3, [r3, #8]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11e      	bne.n	8007a36 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a06:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	f000 fcf1 	bl	80083f4 <HAL_DMA_Abort>
 8007a12:	4603      	mov	r3, r0
 8007a14:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007a24:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a2a:	4b07      	ldr	r3, [pc, #28]	; (8007a48 <HAL_ADC_Stop_DMA+0x90>)
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	f043 0201 	orr.w	r2, r3, #1
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8007a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3710      	adds	r7, #16
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	ffffeefe 	.word	0xffffeefe

08007a4c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b083      	sub	sp, #12
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8007a54:	bf00      	nop
 8007a56:	370c      	adds	r7, #12
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8007a68:	bf00      	nop
 8007a6a:	370c      	adds	r7, #12
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
 8007a90:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_ADC_ConfigChannel+0x1c>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e12a      	b.n	8007cfa <HAL_ADC_ConfigChannel+0x272>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	2b09      	cmp	r3, #9
 8007ab2:	d93a      	bls.n	8007b2a <HAL_ADC_ConfigChannel+0xa2>
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007abc:	d035      	beq.n	8007b2a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	68d9      	ldr	r1, [r3, #12]
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	461a      	mov	r2, r3
 8007acc:	4613      	mov	r3, r2
 8007ace:	005b      	lsls	r3, r3, #1
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3b1e      	subs	r3, #30
 8007ad4:	2207      	movs	r2, #7
 8007ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8007ada:	43da      	mvns	r2, r3
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	400a      	ands	r2, r1
 8007ae2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a87      	ldr	r2, [pc, #540]	; (8007d08 <HAL_ADC_ConfigChannel+0x280>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d10a      	bne.n	8007b04 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	68d9      	ldr	r1, [r3, #12]
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	061a      	lsls	r2, r3, #24
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	430a      	orrs	r2, r1
 8007b00:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b02:	e035      	b.n	8007b70 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68d9      	ldr	r1, [r3, #12]
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	689a      	ldr	r2, [r3, #8]
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	b29b      	uxth	r3, r3
 8007b14:	4618      	mov	r0, r3
 8007b16:	4603      	mov	r3, r0
 8007b18:	005b      	lsls	r3, r3, #1
 8007b1a:	4403      	add	r3, r0
 8007b1c:	3b1e      	subs	r3, #30
 8007b1e:	409a      	lsls	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	430a      	orrs	r2, r1
 8007b26:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b28:	e022      	b.n	8007b70 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6919      	ldr	r1, [r3, #16]
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	b29b      	uxth	r3, r3
 8007b36:	461a      	mov	r2, r3
 8007b38:	4613      	mov	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	4413      	add	r3, r2
 8007b3e:	2207      	movs	r2, #7
 8007b40:	fa02 f303 	lsl.w	r3, r2, r3
 8007b44:	43da      	mvns	r2, r3
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	400a      	ands	r2, r1
 8007b4c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	6919      	ldr	r1, [r3, #16]
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	689a      	ldr	r2, [r3, #8]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4618      	mov	r0, r3
 8007b60:	4603      	mov	r3, r0
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	4403      	add	r3, r0
 8007b66:	409a      	lsls	r2, r3
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b06      	cmp	r3, #6
 8007b76:	d824      	bhi.n	8007bc2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	685a      	ldr	r2, [r3, #4]
 8007b82:	4613      	mov	r3, r2
 8007b84:	009b      	lsls	r3, r3, #2
 8007b86:	4413      	add	r3, r2
 8007b88:	3b05      	subs	r3, #5
 8007b8a:	221f      	movs	r2, #31
 8007b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007b90:	43da      	mvns	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	400a      	ands	r2, r1
 8007b98:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	4613      	mov	r3, r2
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	4413      	add	r3, r2
 8007bb2:	3b05      	subs	r3, #5
 8007bb4:	fa00 f203 	lsl.w	r2, r0, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	430a      	orrs	r2, r1
 8007bbe:	635a      	str	r2, [r3, #52]	; 0x34
 8007bc0:	e04c      	b.n	8007c5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b0c      	cmp	r3, #12
 8007bc8:	d824      	bhi.n	8007c14 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	685a      	ldr	r2, [r3, #4]
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	4413      	add	r3, r2
 8007bda:	3b23      	subs	r3, #35	; 0x23
 8007bdc:	221f      	movs	r2, #31
 8007bde:	fa02 f303 	lsl.w	r3, r2, r3
 8007be2:	43da      	mvns	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	400a      	ands	r2, r1
 8007bea:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007bf2:	683b      	ldr	r3, [r7, #0]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	4613      	mov	r3, r2
 8007c00:	009b      	lsls	r3, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	3b23      	subs	r3, #35	; 0x23
 8007c06:	fa00 f203 	lsl.w	r2, r0, r3
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	631a      	str	r2, [r3, #48]	; 0x30
 8007c12:	e023      	b.n	8007c5c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	685a      	ldr	r2, [r3, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	4413      	add	r3, r2
 8007c24:	3b41      	subs	r3, #65	; 0x41
 8007c26:	221f      	movs	r2, #31
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	43da      	mvns	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	400a      	ands	r2, r1
 8007c34:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	b29b      	uxth	r3, r3
 8007c42:	4618      	mov	r0, r3
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	685a      	ldr	r2, [r3, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	4413      	add	r3, r2
 8007c4e:	3b41      	subs	r3, #65	; 0x41
 8007c50:	fa00 f203 	lsl.w	r2, r0, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	430a      	orrs	r2, r1
 8007c5a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a2a      	ldr	r2, [pc, #168]	; (8007d0c <HAL_ADC_ConfigChannel+0x284>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d10a      	bne.n	8007c7c <HAL_ADC_ConfigChannel+0x1f4>
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c6e:	d105      	bne.n	8007c7c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007c70:	4b27      	ldr	r3, [pc, #156]	; (8007d10 <HAL_ADC_ConfigChannel+0x288>)
 8007c72:	685b      	ldr	r3, [r3, #4]
 8007c74:	4a26      	ldr	r2, [pc, #152]	; (8007d10 <HAL_ADC_ConfigChannel+0x288>)
 8007c76:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007c7a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a22      	ldr	r2, [pc, #136]	; (8007d0c <HAL_ADC_ConfigChannel+0x284>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d109      	bne.n	8007c9a <HAL_ADC_ConfigChannel+0x212>
 8007c86:	683b      	ldr	r3, [r7, #0]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b12      	cmp	r3, #18
 8007c8c:	d105      	bne.n	8007c9a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007c8e:	4b20      	ldr	r3, [pc, #128]	; (8007d10 <HAL_ADC_ConfigChannel+0x288>)
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	4a1f      	ldr	r2, [pc, #124]	; (8007d10 <HAL_ADC_ConfigChannel+0x288>)
 8007c94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c98:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a1b      	ldr	r2, [pc, #108]	; (8007d0c <HAL_ADC_ConfigChannel+0x284>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d125      	bne.n	8007cf0 <HAL_ADC_ConfigChannel+0x268>
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a17      	ldr	r2, [pc, #92]	; (8007d08 <HAL_ADC_ConfigChannel+0x280>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d003      	beq.n	8007cb6 <HAL_ADC_ConfigChannel+0x22e>
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2b11      	cmp	r3, #17
 8007cb4:	d11c      	bne.n	8007cf0 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007cb6:	4b16      	ldr	r3, [pc, #88]	; (8007d10 <HAL_ADC_ConfigChannel+0x288>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	4a15      	ldr	r2, [pc, #84]	; (8007d10 <HAL_ADC_ConfigChannel+0x288>)
 8007cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cc0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4a10      	ldr	r2, [pc, #64]	; (8007d08 <HAL_ADC_ConfigChannel+0x280>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d111      	bne.n	8007cf0 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007ccc:	4b11      	ldr	r3, [pc, #68]	; (8007d14 <HAL_ADC_ConfigChannel+0x28c>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4a11      	ldr	r2, [pc, #68]	; (8007d18 <HAL_ADC_ConfigChannel+0x290>)
 8007cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8007cd6:	0c9a      	lsrs	r2, r3, #18
 8007cd8:	4613      	mov	r3, r2
 8007cda:	009b      	lsls	r3, r3, #2
 8007cdc:	4413      	add	r3, r2
 8007cde:	005b      	lsls	r3, r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007ce2:	e002      	b.n	8007cea <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	3b01      	subs	r3, #1
 8007ce8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d1f9      	bne.n	8007ce4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007cf8:	2300      	movs	r3, #0
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3714      	adds	r7, #20
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
 8007d06:	bf00      	nop
 8007d08:	10000012 	.word	0x10000012
 8007d0c:	40012000 	.word	0x40012000
 8007d10:	40012300 	.word	0x40012300
 8007d14:	20000000 	.word	0x20000000
 8007d18:	431bde83 	.word	0x431bde83

08007d1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b083      	sub	sp, #12
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007d24:	4b78      	ldr	r3, [pc, #480]	; (8007f08 <ADC_Init+0x1ec>)
 8007d26:	685b      	ldr	r3, [r3, #4]
 8007d28:	4a77      	ldr	r2, [pc, #476]	; (8007f08 <ADC_Init+0x1ec>)
 8007d2a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007d2e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007d30:	4b75      	ldr	r3, [pc, #468]	; (8007f08 <ADC_Init+0x1ec>)
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4973      	ldr	r1, [pc, #460]	; (8007f08 <ADC_Init+0x1ec>)
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685a      	ldr	r2, [r3, #4]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007d4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6859      	ldr	r1, [r3, #4]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	021a      	lsls	r2, r3, #8
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	685a      	ldr	r2, [r3, #4]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007d70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	6859      	ldr	r1, [r3, #4]
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	689a      	ldr	r2, [r3, #8]
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	430a      	orrs	r2, r1
 8007d82:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	689a      	ldr	r2, [r3, #8]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007d92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6899      	ldr	r1, [r3, #8]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	68da      	ldr	r2, [r3, #12]
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	430a      	orrs	r2, r1
 8007da4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007daa:	4a58      	ldr	r2, [pc, #352]	; (8007f0c <ADC_Init+0x1f0>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d022      	beq.n	8007df6 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	689a      	ldr	r2, [r3, #8]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007dbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	6899      	ldr	r1, [r3, #8]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	430a      	orrs	r2, r1
 8007dd0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	689a      	ldr	r2, [r3, #8]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007de0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6899      	ldr	r1, [r3, #8]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	609a      	str	r2, [r3, #8]
 8007df4:	e00f      	b.n	8007e16 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	689a      	ldr	r2, [r3, #8]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007e04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	689a      	ldr	r2, [r3, #8]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007e14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	689a      	ldr	r2, [r3, #8]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f022 0202 	bic.w	r2, r2, #2
 8007e24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	6899      	ldr	r1, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	005a      	lsls	r2, r3, #1
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d01b      	beq.n	8007e7c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	685a      	ldr	r2, [r3, #4]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685a      	ldr	r2, [r3, #4]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007e62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	6859      	ldr	r1, [r3, #4]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	035a      	lsls	r2, r3, #13
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	605a      	str	r2, [r3, #4]
 8007e7a:	e007      	b.n	8007e8c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	685a      	ldr	r2, [r3, #4]
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007e8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007e9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	69db      	ldr	r3, [r3, #28]
 8007ea6:	3b01      	subs	r3, #1
 8007ea8:	051a      	lsls	r2, r3, #20
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007ec0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	6899      	ldr	r1, [r3, #8]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007ece:	025a      	lsls	r2, r3, #9
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	689a      	ldr	r2, [r3, #8]
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ee6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	6899      	ldr	r1, [r3, #8]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	695b      	ldr	r3, [r3, #20]
 8007ef2:	029a      	lsls	r2, r3, #10
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	609a      	str	r2, [r3, #8]
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	40012300 	.word	0x40012300
 8007f0c:	0f000001 	.word	0x0f000001

08007f10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b084      	sub	sp, #16
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d13c      	bne.n	8007fa4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d12b      	bne.n	8007f9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d127      	bne.n	8007f9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d006      	beq.n	8007f68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d119      	bne.n	8007f9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	685a      	ldr	r2, [r3, #4]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f022 0220 	bic.w	r2, r2, #32
 8007f76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d105      	bne.n	8007f9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f94:	f043 0201 	orr.w	r2, r3, #1
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f7ff fd55 	bl	8007a4c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007fa2:	e00e      	b.n	8007fc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fa8:	f003 0310 	and.w	r3, r3, #16
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007fb0:	68f8      	ldr	r0, [r7, #12]
 8007fb2:	f7ff fd5f 	bl	8007a74 <HAL_ADC_ErrorCallback>
}
 8007fb6:	e004      	b.n	8007fc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	4798      	blx	r3
}
 8007fc2:	bf00      	nop
 8007fc4:	3710      	adds	r7, #16
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	bd80      	pop	{r7, pc}

08007fca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007fca:	b580      	push	{r7, lr}
 8007fcc:	b084      	sub	sp, #16
 8007fce:	af00      	add	r7, sp, #0
 8007fd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fd41 	bl	8007a60 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007fde:	bf00      	nop
 8007fe0:	3710      	adds	r7, #16
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd80      	pop	{r7, pc}

08007fe6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007fe6:	b580      	push	{r7, lr}
 8007fe8:	b084      	sub	sp, #16
 8007fea:	af00      	add	r7, sp, #0
 8007fec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ff2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2240      	movs	r2, #64	; 0x40
 8007ff8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ffe:	f043 0204 	orr.w	r2, r3, #4
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff fd34 	bl	8007a74 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800800c:	bf00      	nop
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <__NVIC_SetPriorityGrouping+0x40>)
 8008026:	68db      	ldr	r3, [r3, #12]
 8008028:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008030:	4013      	ands	r3, r2
 8008032:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800803c:	4b06      	ldr	r3, [pc, #24]	; (8008058 <__NVIC_SetPriorityGrouping+0x44>)
 800803e:	4313      	orrs	r3, r2
 8008040:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008042:	4a04      	ldr	r2, [pc, #16]	; (8008054 <__NVIC_SetPriorityGrouping+0x40>)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	60d3      	str	r3, [r2, #12]
}
 8008048:	bf00      	nop
 800804a:	3714      	adds	r7, #20
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr
 8008054:	e000ed00 	.word	0xe000ed00
 8008058:	05fa0000 	.word	0x05fa0000

0800805c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800805c:	b480      	push	{r7}
 800805e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008060:	4b04      	ldr	r3, [pc, #16]	; (8008074 <__NVIC_GetPriorityGrouping+0x18>)
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	0a1b      	lsrs	r3, r3, #8
 8008066:	f003 0307 	and.w	r3, r3, #7
}
 800806a:	4618      	mov	r0, r3
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	e000ed00 	.word	0xe000ed00

08008078 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008078:	b480      	push	{r7}
 800807a:	b083      	sub	sp, #12
 800807c:	af00      	add	r7, sp, #0
 800807e:	4603      	mov	r3, r0
 8008080:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008082:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008086:	2b00      	cmp	r3, #0
 8008088:	db0b      	blt.n	80080a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	f003 021f 	and.w	r2, r3, #31
 8008090:	4907      	ldr	r1, [pc, #28]	; (80080b0 <__NVIC_EnableIRQ+0x38>)
 8008092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008096:	095b      	lsrs	r3, r3, #5
 8008098:	2001      	movs	r0, #1
 800809a:	fa00 f202 	lsl.w	r2, r0, r2
 800809e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80080a2:	bf00      	nop
 80080a4:	370c      	adds	r7, #12
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr
 80080ae:	bf00      	nop
 80080b0:	e000e100 	.word	0xe000e100

080080b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80080b4:	b480      	push	{r7}
 80080b6:	b083      	sub	sp, #12
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	4603      	mov	r3, r0
 80080bc:	6039      	str	r1, [r7, #0]
 80080be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	db0a      	blt.n	80080de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	490c      	ldr	r1, [pc, #48]	; (8008100 <__NVIC_SetPriority+0x4c>)
 80080ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080d2:	0112      	lsls	r2, r2, #4
 80080d4:	b2d2      	uxtb	r2, r2
 80080d6:	440b      	add	r3, r1
 80080d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80080dc:	e00a      	b.n	80080f4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	4908      	ldr	r1, [pc, #32]	; (8008104 <__NVIC_SetPriority+0x50>)
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	f003 030f 	and.w	r3, r3, #15
 80080ea:	3b04      	subs	r3, #4
 80080ec:	0112      	lsls	r2, r2, #4
 80080ee:	b2d2      	uxtb	r2, r2
 80080f0:	440b      	add	r3, r1
 80080f2:	761a      	strb	r2, [r3, #24]
}
 80080f4:	bf00      	nop
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	e000e100 	.word	0xe000e100
 8008104:	e000ed00 	.word	0xe000ed00

08008108 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008108:	b480      	push	{r7}
 800810a:	b089      	sub	sp, #36	; 0x24
 800810c:	af00      	add	r7, sp, #0
 800810e:	60f8      	str	r0, [r7, #12]
 8008110:	60b9      	str	r1, [r7, #8]
 8008112:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	f1c3 0307 	rsb	r3, r3, #7
 8008122:	2b04      	cmp	r3, #4
 8008124:	bf28      	it	cs
 8008126:	2304      	movcs	r3, #4
 8008128:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3304      	adds	r3, #4
 800812e:	2b06      	cmp	r3, #6
 8008130:	d902      	bls.n	8008138 <NVIC_EncodePriority+0x30>
 8008132:	69fb      	ldr	r3, [r7, #28]
 8008134:	3b03      	subs	r3, #3
 8008136:	e000      	b.n	800813a <NVIC_EncodePriority+0x32>
 8008138:	2300      	movs	r3, #0
 800813a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800813c:	f04f 32ff 	mov.w	r2, #4294967295
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	fa02 f303 	lsl.w	r3, r2, r3
 8008146:	43da      	mvns	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	401a      	ands	r2, r3
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008150:	f04f 31ff 	mov.w	r1, #4294967295
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	fa01 f303 	lsl.w	r3, r1, r3
 800815a:	43d9      	mvns	r1, r3
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008160:	4313      	orrs	r3, r2
         );
}
 8008162:	4618      	mov	r0, r3
 8008164:	3724      	adds	r7, #36	; 0x24
 8008166:	46bd      	mov	sp, r7
 8008168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816c:	4770      	bx	lr

0800816e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b082      	sub	sp, #8
 8008172:	af00      	add	r7, sp, #0
 8008174:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f7ff ff4c 	bl	8008014 <__NVIC_SetPriorityGrouping>
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	4603      	mov	r3, r0
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	607a      	str	r2, [r7, #4]
 8008190:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008192:	2300      	movs	r3, #0
 8008194:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008196:	f7ff ff61 	bl	800805c <__NVIC_GetPriorityGrouping>
 800819a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800819c:	687a      	ldr	r2, [r7, #4]
 800819e:	68b9      	ldr	r1, [r7, #8]
 80081a0:	6978      	ldr	r0, [r7, #20]
 80081a2:	f7ff ffb1 	bl	8008108 <NVIC_EncodePriority>
 80081a6:	4602      	mov	r2, r0
 80081a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80081ac:	4611      	mov	r1, r2
 80081ae:	4618      	mov	r0, r3
 80081b0:	f7ff ff80 	bl	80080b4 <__NVIC_SetPriority>
}
 80081b4:	bf00      	nop
 80081b6:	3718      	adds	r7, #24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b082      	sub	sp, #8
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	4603      	mov	r3, r0
 80081c4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7ff ff54 	bl	8008078 <__NVIC_EnableIRQ>
}
 80081d0:	bf00      	nop
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b086      	sub	sp, #24
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80081e0:	2300      	movs	r3, #0
 80081e2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80081e4:	f7ff fa88 	bl	80076f8 <HAL_GetTick>
 80081e8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80081f0:	2301      	movs	r3, #1
 80081f2:	e099      	b.n	8008328 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2202      	movs	r2, #2
 8008200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f022 0201 	bic.w	r2, r2, #1
 8008212:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008214:	e00f      	b.n	8008236 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008216:	f7ff fa6f 	bl	80076f8 <HAL_GetTick>
 800821a:	4602      	mov	r2, r0
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	1ad3      	subs	r3, r2, r3
 8008220:	2b05      	cmp	r3, #5
 8008222:	d908      	bls.n	8008236 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2220      	movs	r2, #32
 8008228:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2203      	movs	r2, #3
 800822e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8008232:	2303      	movs	r3, #3
 8008234:	e078      	b.n	8008328 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0301 	and.w	r3, r3, #1
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e8      	bne.n	8008216 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800824c:	697a      	ldr	r2, [r7, #20]
 800824e:	4b38      	ldr	r3, [pc, #224]	; (8008330 <HAL_DMA_Init+0x158>)
 8008250:	4013      	ands	r3, r2
 8008252:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	685a      	ldr	r2, [r3, #4]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008262:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800826e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	699b      	ldr	r3, [r3, #24]
 8008274:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800827a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	6a1b      	ldr	r3, [r3, #32]
 8008280:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8008282:	697a      	ldr	r2, [r7, #20]
 8008284:	4313      	orrs	r3, r2
 8008286:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800828c:	2b04      	cmp	r3, #4
 800828e:	d107      	bne.n	80082a0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008298:	4313      	orrs	r3, r2
 800829a:	697a      	ldr	r2, [r7, #20]
 800829c:	4313      	orrs	r3, r2
 800829e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f023 0307 	bic.w	r3, r3, #7
 80082b6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	4313      	orrs	r3, r2
 80082c0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d117      	bne.n	80082fa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	4313      	orrs	r3, r2
 80082d2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d00e      	beq.n	80082fa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fb15 	bl	800890c <DMA_CheckFifoParam>
 80082e2:	4603      	mov	r3, r0
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d008      	beq.n	80082fa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2240      	movs	r2, #64	; 0x40
 80082ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80082f6:	2301      	movs	r3, #1
 80082f8:	e016      	b.n	8008328 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	697a      	ldr	r2, [r7, #20]
 8008300:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 facc 	bl	80088a0 <DMA_CalcBaseAndBitshift>
 8008308:	4603      	mov	r3, r0
 800830a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008310:	223f      	movs	r2, #63	; 0x3f
 8008312:	409a      	lsls	r2, r3
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3718      	adds	r7, #24
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}
 8008330:	f010803f 	.word	0xf010803f

08008334 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	60f8      	str	r0, [r7, #12]
 800833c:	60b9      	str	r1, [r7, #8]
 800833e:	607a      	str	r2, [r7, #4]
 8008340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008342:	2300      	movs	r3, #0
 8008344:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800834a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_DMA_Start_IT+0x26>
 8008356:	2302      	movs	r3, #2
 8008358:	e048      	b.n	80083ec <HAL_DMA_Start_IT+0xb8>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008368:	b2db      	uxtb	r3, r3
 800836a:	2b01      	cmp	r3, #1
 800836c:	d137      	bne.n	80083de <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2202      	movs	r2, #2
 8008372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2200      	movs	r2, #0
 800837a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	68b9      	ldr	r1, [r7, #8]
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f000 fa5e 	bl	8008844 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800838c:	223f      	movs	r2, #63	; 0x3f
 800838e:	409a      	lsls	r2, r3
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	681a      	ldr	r2, [r3, #0]
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f042 0216 	orr.w	r2, r2, #22
 80083a2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	695a      	ldr	r2, [r3, #20]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80083b2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d007      	beq.n	80083cc <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f042 0208 	orr.w	r2, r2, #8
 80083ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0201 	orr.w	r2, r2, #1
 80083da:	601a      	str	r2, [r3, #0]
 80083dc:	e005      	b.n	80083ea <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80083e6:	2302      	movs	r3, #2
 80083e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008400:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008402:	f7ff f979 	bl	80076f8 <HAL_GetTick>
 8008406:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b02      	cmp	r3, #2
 8008412:	d008      	beq.n	8008426 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2280      	movs	r2, #128	; 0x80
 8008418:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2200      	movs	r2, #0
 800841e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	e052      	b.n	80084cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f022 0216 	bic.w	r2, r2, #22
 8008434:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	695a      	ldr	r2, [r3, #20]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008444:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800844a:	2b00      	cmp	r3, #0
 800844c:	d103      	bne.n	8008456 <HAL_DMA_Abort+0x62>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008452:	2b00      	cmp	r3, #0
 8008454:	d007      	beq.n	8008466 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0208 	bic.w	r2, r2, #8
 8008464:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f022 0201 	bic.w	r2, r2, #1
 8008474:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008476:	e013      	b.n	80084a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008478:	f7ff f93e 	bl	80076f8 <HAL_GetTick>
 800847c:	4602      	mov	r2, r0
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	2b05      	cmp	r3, #5
 8008484:	d90c      	bls.n	80084a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2220      	movs	r2, #32
 800848a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2203      	movs	r2, #3
 8008498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800849c:	2303      	movs	r3, #3
 800849e:	e015      	b.n	80084cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1e4      	bne.n	8008478 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084b2:	223f      	movs	r2, #63	; 0x3f
 80084b4:	409a      	lsls	r2, r3
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3710      	adds	r7, #16
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d004      	beq.n	80084f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2280      	movs	r2, #128	; 0x80
 80084ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e00c      	b.n	800850c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2205      	movs	r2, #5
 80084f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0201 	bic.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	370c      	adds	r7, #12
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008520:	2300      	movs	r3, #0
 8008522:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008524:	4b92      	ldr	r3, [pc, #584]	; (8008770 <HAL_DMA_IRQHandler+0x258>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a92      	ldr	r2, [pc, #584]	; (8008774 <HAL_DMA_IRQHandler+0x25c>)
 800852a:	fba2 2303 	umull	r2, r3, r2, r3
 800852e:	0a9b      	lsrs	r3, r3, #10
 8008530:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008536:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008542:	2208      	movs	r2, #8
 8008544:	409a      	lsls	r2, r3
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4013      	ands	r3, r2
 800854a:	2b00      	cmp	r3, #0
 800854c:	d01a      	beq.n	8008584 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0304 	and.w	r3, r3, #4
 8008558:	2b00      	cmp	r3, #0
 800855a:	d013      	beq.n	8008584 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f022 0204 	bic.w	r2, r2, #4
 800856a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008570:	2208      	movs	r2, #8
 8008572:	409a      	lsls	r2, r3
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857c:	f043 0201 	orr.w	r2, r3, #1
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008588:	2201      	movs	r2, #1
 800858a:	409a      	lsls	r2, r3
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	4013      	ands	r3, r2
 8008590:	2b00      	cmp	r3, #0
 8008592:	d012      	beq.n	80085ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00b      	beq.n	80085ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085a6:	2201      	movs	r2, #1
 80085a8:	409a      	lsls	r2, r3
 80085aa:	693b      	ldr	r3, [r7, #16]
 80085ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b2:	f043 0202 	orr.w	r2, r3, #2
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085be:	2204      	movs	r2, #4
 80085c0:	409a      	lsls	r2, r3
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	4013      	ands	r3, r2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d012      	beq.n	80085f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f003 0302 	and.w	r3, r3, #2
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085dc:	2204      	movs	r2, #4
 80085de:	409a      	lsls	r2, r3
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085e8:	f043 0204 	orr.w	r2, r3, #4
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f4:	2210      	movs	r2, #16
 80085f6:	409a      	lsls	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4013      	ands	r3, r2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d043      	beq.n	8008688 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d03c      	beq.n	8008688 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008612:	2210      	movs	r2, #16
 8008614:	409a      	lsls	r2, r3
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008624:	2b00      	cmp	r3, #0
 8008626:	d018      	beq.n	800865a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d108      	bne.n	8008648 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800863a:	2b00      	cmp	r3, #0
 800863c:	d024      	beq.n	8008688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	4798      	blx	r3
 8008646:	e01f      	b.n	8008688 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01b      	beq.n	8008688 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	4798      	blx	r3
 8008658:	e016      	b.n	8008688 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008664:	2b00      	cmp	r3, #0
 8008666:	d107      	bne.n	8008678 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f022 0208 	bic.w	r2, r2, #8
 8008676:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867c:	2b00      	cmp	r3, #0
 800867e:	d003      	beq.n	8008688 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800868c:	2220      	movs	r2, #32
 800868e:	409a      	lsls	r2, r3
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4013      	ands	r3, r2
 8008694:	2b00      	cmp	r3, #0
 8008696:	f000 808e 	beq.w	80087b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f003 0310 	and.w	r3, r3, #16
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8086 	beq.w	80087b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ae:	2220      	movs	r2, #32
 80086b0:	409a      	lsls	r2, r3
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b05      	cmp	r3, #5
 80086c0:	d136      	bne.n	8008730 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f022 0216 	bic.w	r2, r2, #22
 80086d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	695a      	ldr	r2, [r3, #20]
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80086e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d103      	bne.n	80086f2 <HAL_DMA_IRQHandler+0x1da>
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d007      	beq.n	8008702 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0208 	bic.w	r2, r2, #8
 8008700:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008706:	223f      	movs	r2, #63	; 0x3f
 8008708:	409a      	lsls	r2, r3
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2201      	movs	r2, #1
 800871a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008722:	2b00      	cmp	r3, #0
 8008724:	d07d      	beq.n	8008822 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	4798      	blx	r3
        }
        return;
 800872e:	e078      	b.n	8008822 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800873a:	2b00      	cmp	r3, #0
 800873c:	d01c      	beq.n	8008778 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d108      	bne.n	800875e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008750:	2b00      	cmp	r3, #0
 8008752:	d030      	beq.n	80087b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	4798      	blx	r3
 800875c:	e02b      	b.n	80087b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008762:	2b00      	cmp	r3, #0
 8008764:	d027      	beq.n	80087b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	4798      	blx	r3
 800876e:	e022      	b.n	80087b6 <HAL_DMA_IRQHandler+0x29e>
 8008770:	20000000 	.word	0x20000000
 8008774:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10f      	bne.n	80087a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	681a      	ldr	r2, [r3, #0]
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f022 0210 	bic.w	r2, r2, #16
 8008794:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2200      	movs	r2, #0
 800879a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2201      	movs	r2, #1
 80087a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d032      	beq.n	8008824 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c2:	f003 0301 	and.w	r3, r3, #1
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d022      	beq.n	8008810 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2205      	movs	r2, #5
 80087ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f022 0201 	bic.w	r2, r2, #1
 80087e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80087e2:	68bb      	ldr	r3, [r7, #8]
 80087e4:	3301      	adds	r3, #1
 80087e6:	60bb      	str	r3, [r7, #8]
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d307      	bcc.n	80087fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f003 0301 	and.w	r3, r3, #1
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1f2      	bne.n	80087e2 <HAL_DMA_IRQHandler+0x2ca>
 80087fc:	e000      	b.n	8008800 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80087fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2200      	movs	r2, #0
 8008804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2201      	movs	r2, #1
 800880c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008814:	2b00      	cmp	r3, #0
 8008816:	d005      	beq.n	8008824 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800881c:	6878      	ldr	r0, [r7, #4]
 800881e:	4798      	blx	r3
 8008820:	e000      	b.n	8008824 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008822:	bf00      	nop
    }
  }
}
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop

0800882c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800882c:	b480      	push	{r7}
 800882e:	b083      	sub	sp, #12
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8008838:	4618      	mov	r0, r3
 800883a:	370c      	adds	r7, #12
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008844:	b480      	push	{r7}
 8008846:	b085      	sub	sp, #20
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
 8008850:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	681a      	ldr	r2, [r3, #0]
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008860:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	2b40      	cmp	r3, #64	; 0x40
 8008870:	d108      	bne.n	8008884 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68ba      	ldr	r2, [r7, #8]
 8008880:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008882:	e007      	b.n	8008894 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	687a      	ldr	r2, [r7, #4]
 8008892:	60da      	str	r2, [r3, #12]
}
 8008894:	bf00      	nop
 8008896:	3714      	adds	r7, #20
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b085      	sub	sp, #20
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	3b10      	subs	r3, #16
 80088b0:	4a13      	ldr	r2, [pc, #76]	; (8008900 <DMA_CalcBaseAndBitshift+0x60>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	091b      	lsrs	r3, r3, #4
 80088b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80088ba:	4a12      	ldr	r2, [pc, #72]	; (8008904 <DMA_CalcBaseAndBitshift+0x64>)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	4413      	add	r3, r2
 80088c0:	781b      	ldrb	r3, [r3, #0]
 80088c2:	461a      	mov	r2, r3
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2b03      	cmp	r3, #3
 80088cc:	d908      	bls.n	80088e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	461a      	mov	r2, r3
 80088d4:	4b0c      	ldr	r3, [pc, #48]	; (8008908 <DMA_CalcBaseAndBitshift+0x68>)
 80088d6:	4013      	ands	r3, r2
 80088d8:	1d1a      	adds	r2, r3, #4
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	659a      	str	r2, [r3, #88]	; 0x58
 80088de:	e006      	b.n	80088ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	4b08      	ldr	r3, [pc, #32]	; (8008908 <DMA_CalcBaseAndBitshift+0x68>)
 80088e8:	4013      	ands	r3, r2
 80088ea:	687a      	ldr	r2, [r7, #4]
 80088ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr
 80088fe:	bf00      	nop
 8008900:	aaaaaaab 	.word	0xaaaaaaab
 8008904:	0801d780 	.word	0x0801d780
 8008908:	fffffc00 	.word	0xfffffc00

0800890c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d11f      	bne.n	8008966 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	2b03      	cmp	r3, #3
 800892a:	d855      	bhi.n	80089d8 <DMA_CheckFifoParam+0xcc>
 800892c:	a201      	add	r2, pc, #4	; (adr r2, 8008934 <DMA_CheckFifoParam+0x28>)
 800892e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008932:	bf00      	nop
 8008934:	08008945 	.word	0x08008945
 8008938:	08008957 	.word	0x08008957
 800893c:	08008945 	.word	0x08008945
 8008940:	080089d9 	.word	0x080089d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008948:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800894c:	2b00      	cmp	r3, #0
 800894e:	d045      	beq.n	80089dc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8008950:	2301      	movs	r3, #1
 8008952:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008954:	e042      	b.n	80089dc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800895e:	d13f      	bne.n	80089e0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008964:	e03c      	b.n	80089e0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896e:	d121      	bne.n	80089b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b03      	cmp	r3, #3
 8008974:	d836      	bhi.n	80089e4 <DMA_CheckFifoParam+0xd8>
 8008976:	a201      	add	r2, pc, #4	; (adr r2, 800897c <DMA_CheckFifoParam+0x70>)
 8008978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800897c:	0800898d 	.word	0x0800898d
 8008980:	08008993 	.word	0x08008993
 8008984:	0800898d 	.word	0x0800898d
 8008988:	080089a5 	.word	0x080089a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800898c:	2301      	movs	r3, #1
 800898e:	73fb      	strb	r3, [r7, #15]
      break;
 8008990:	e02f      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008996:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800899a:	2b00      	cmp	r3, #0
 800899c:	d024      	beq.n	80089e8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089a2:	e021      	b.n	80089e8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80089ac:	d11e      	bne.n	80089ec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80089ae:	2301      	movs	r3, #1
 80089b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80089b2:	e01b      	b.n	80089ec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d902      	bls.n	80089c0 <DMA_CheckFifoParam+0xb4>
 80089ba:	2b03      	cmp	r3, #3
 80089bc:	d003      	beq.n	80089c6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80089be:	e018      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	73fb      	strb	r3, [r7, #15]
      break;
 80089c4:	e015      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00e      	beq.n	80089f0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	73fb      	strb	r3, [r7, #15]
      break;
 80089d6:	e00b      	b.n	80089f0 <DMA_CheckFifoParam+0xe4>
      break;
 80089d8:	bf00      	nop
 80089da:	e00a      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      break;
 80089dc:	bf00      	nop
 80089de:	e008      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      break;
 80089e0:	bf00      	nop
 80089e2:	e006      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      break;
 80089e4:	bf00      	nop
 80089e6:	e004      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      break;
 80089e8:	bf00      	nop
 80089ea:	e002      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      break;   
 80089ec:	bf00      	nop
 80089ee:	e000      	b.n	80089f2 <DMA_CheckFifoParam+0xe6>
      break;
 80089f0:	bf00      	nop
    }
  } 
  
  return status; 
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b089      	sub	sp, #36	; 0x24
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
 8008a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008a12:	2300      	movs	r3, #0
 8008a14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008a16:	2300      	movs	r3, #0
 8008a18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
 8008a1e:	e175      	b.n	8008d0c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008a20:	2201      	movs	r2, #1
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	fa02 f303 	lsl.w	r3, r2, r3
 8008a28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008a2a:	683b      	ldr	r3, [r7, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	697a      	ldr	r2, [r7, #20]
 8008a30:	4013      	ands	r3, r2
 8008a32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	429a      	cmp	r2, r3
 8008a3a:	f040 8164 	bne.w	8008d06 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d00b      	beq.n	8008a5e <HAL_GPIO_Init+0x5e>
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d007      	beq.n	8008a5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a52:	2b11      	cmp	r3, #17
 8008a54:	d003      	beq.n	8008a5e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	685b      	ldr	r3, [r3, #4]
 8008a5a:	2b12      	cmp	r3, #18
 8008a5c:	d130      	bne.n	8008ac0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	689b      	ldr	r3, [r3, #8]
 8008a62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8008a64:	69fb      	ldr	r3, [r7, #28]
 8008a66:	005b      	lsls	r3, r3, #1
 8008a68:	2203      	movs	r2, #3
 8008a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a6e:	43db      	mvns	r3, r3
 8008a70:	69ba      	ldr	r2, [r7, #24]
 8008a72:	4013      	ands	r3, r2
 8008a74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	005b      	lsls	r3, r3, #1
 8008a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a82:	69ba      	ldr	r2, [r7, #24]
 8008a84:	4313      	orrs	r3, r2
 8008a86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	69ba      	ldr	r2, [r7, #24]
 8008a8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008a94:	2201      	movs	r2, #1
 8008a96:	69fb      	ldr	r3, [r7, #28]
 8008a98:	fa02 f303 	lsl.w	r3, r2, r3
 8008a9c:	43db      	mvns	r3, r3
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	4013      	ands	r3, r2
 8008aa2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	091b      	lsrs	r3, r3, #4
 8008aaa:	f003 0201 	and.w	r2, r3, #1
 8008aae:	69fb      	ldr	r3, [r7, #28]
 8008ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	68db      	ldr	r3, [r3, #12]
 8008ac4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	005b      	lsls	r3, r3, #1
 8008aca:	2203      	movs	r2, #3
 8008acc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae4:	69ba      	ldr	r2, [r7, #24]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	2b02      	cmp	r3, #2
 8008af6:	d003      	beq.n	8008b00 <HAL_GPIO_Init+0x100>
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	2b12      	cmp	r3, #18
 8008afe:	d123      	bne.n	8008b48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	08da      	lsrs	r2, r3, #3
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3208      	adds	r2, #8
 8008b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008b0e:	69fb      	ldr	r3, [r7, #28]
 8008b10:	f003 0307 	and.w	r3, r3, #7
 8008b14:	009b      	lsls	r3, r3, #2
 8008b16:	220f      	movs	r2, #15
 8008b18:	fa02 f303 	lsl.w	r3, r2, r3
 8008b1c:	43db      	mvns	r3, r3
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	4013      	ands	r3, r2
 8008b22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	691a      	ldr	r2, [r3, #16]
 8008b28:	69fb      	ldr	r3, [r7, #28]
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	fa02 f303 	lsl.w	r3, r2, r3
 8008b34:	69ba      	ldr	r2, [r7, #24]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	08da      	lsrs	r2, r3, #3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	3208      	adds	r2, #8
 8008b42:	69b9      	ldr	r1, [r7, #24]
 8008b44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	005b      	lsls	r3, r3, #1
 8008b52:	2203      	movs	r2, #3
 8008b54:	fa02 f303 	lsl.w	r3, r2, r3
 8008b58:	43db      	mvns	r3, r3
 8008b5a:	69ba      	ldr	r2, [r7, #24]
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	f003 0203 	and.w	r2, r3, #3
 8008b68:	69fb      	ldr	r3, [r7, #28]
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b70:	69ba      	ldr	r2, [r7, #24]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	f000 80be 	beq.w	8008d06 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b8a:	4b65      	ldr	r3, [pc, #404]	; (8008d20 <HAL_GPIO_Init+0x320>)
 8008b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b8e:	4a64      	ldr	r2, [pc, #400]	; (8008d20 <HAL_GPIO_Init+0x320>)
 8008b90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008b94:	6453      	str	r3, [r2, #68]	; 0x44
 8008b96:	4b62      	ldr	r3, [pc, #392]	; (8008d20 <HAL_GPIO_Init+0x320>)
 8008b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008b9e:	60fb      	str	r3, [r7, #12]
 8008ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008ba2:	4a60      	ldr	r2, [pc, #384]	; (8008d24 <HAL_GPIO_Init+0x324>)
 8008ba4:	69fb      	ldr	r3, [r7, #28]
 8008ba6:	089b      	lsrs	r3, r3, #2
 8008ba8:	3302      	adds	r3, #2
 8008baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008bb0:	69fb      	ldr	r3, [r7, #28]
 8008bb2:	f003 0303 	and.w	r3, r3, #3
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	220f      	movs	r2, #15
 8008bba:	fa02 f303 	lsl.w	r3, r2, r3
 8008bbe:	43db      	mvns	r3, r3
 8008bc0:	69ba      	ldr	r2, [r7, #24]
 8008bc2:	4013      	ands	r3, r2
 8008bc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	4a57      	ldr	r2, [pc, #348]	; (8008d28 <HAL_GPIO_Init+0x328>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d037      	beq.n	8008c3e <HAL_GPIO_Init+0x23e>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	4a56      	ldr	r2, [pc, #344]	; (8008d2c <HAL_GPIO_Init+0x32c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d031      	beq.n	8008c3a <HAL_GPIO_Init+0x23a>
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	4a55      	ldr	r2, [pc, #340]	; (8008d30 <HAL_GPIO_Init+0x330>)
 8008bda:	4293      	cmp	r3, r2
 8008bdc:	d02b      	beq.n	8008c36 <HAL_GPIO_Init+0x236>
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a54      	ldr	r2, [pc, #336]	; (8008d34 <HAL_GPIO_Init+0x334>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d025      	beq.n	8008c32 <HAL_GPIO_Init+0x232>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a53      	ldr	r2, [pc, #332]	; (8008d38 <HAL_GPIO_Init+0x338>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d01f      	beq.n	8008c2e <HAL_GPIO_Init+0x22e>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a52      	ldr	r2, [pc, #328]	; (8008d3c <HAL_GPIO_Init+0x33c>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d019      	beq.n	8008c2a <HAL_GPIO_Init+0x22a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a51      	ldr	r2, [pc, #324]	; (8008d40 <HAL_GPIO_Init+0x340>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d013      	beq.n	8008c26 <HAL_GPIO_Init+0x226>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a50      	ldr	r2, [pc, #320]	; (8008d44 <HAL_GPIO_Init+0x344>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d00d      	beq.n	8008c22 <HAL_GPIO_Init+0x222>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a4f      	ldr	r2, [pc, #316]	; (8008d48 <HAL_GPIO_Init+0x348>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d007      	beq.n	8008c1e <HAL_GPIO_Init+0x21e>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a4e      	ldr	r2, [pc, #312]	; (8008d4c <HAL_GPIO_Init+0x34c>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d101      	bne.n	8008c1a <HAL_GPIO_Init+0x21a>
 8008c16:	2309      	movs	r3, #9
 8008c18:	e012      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c1a:	230a      	movs	r3, #10
 8008c1c:	e010      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c1e:	2308      	movs	r3, #8
 8008c20:	e00e      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c22:	2307      	movs	r3, #7
 8008c24:	e00c      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c26:	2306      	movs	r3, #6
 8008c28:	e00a      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c2a:	2305      	movs	r3, #5
 8008c2c:	e008      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c2e:	2304      	movs	r3, #4
 8008c30:	e006      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c32:	2303      	movs	r3, #3
 8008c34:	e004      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c36:	2302      	movs	r3, #2
 8008c38:	e002      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	e000      	b.n	8008c40 <HAL_GPIO_Init+0x240>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	f002 0203 	and.w	r2, r2, #3
 8008c46:	0092      	lsls	r2, r2, #2
 8008c48:	4093      	lsls	r3, r2
 8008c4a:	69ba      	ldr	r2, [r7, #24]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008c50:	4934      	ldr	r1, [pc, #208]	; (8008d24 <HAL_GPIO_Init+0x324>)
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	089b      	lsrs	r3, r3, #2
 8008c56:	3302      	adds	r3, #2
 8008c58:	69ba      	ldr	r2, [r7, #24]
 8008c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008c5e:	4b3c      	ldr	r3, [pc, #240]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	43db      	mvns	r3, r3
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008c7a:	69ba      	ldr	r2, [r7, #24]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008c82:	4a33      	ldr	r2, [pc, #204]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008c84:	69bb      	ldr	r3, [r7, #24]
 8008c86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008c88:	4b31      	ldr	r3, [pc, #196]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008c8e:	693b      	ldr	r3, [r7, #16]
 8008c90:	43db      	mvns	r3, r3
 8008c92:	69ba      	ldr	r2, [r7, #24]
 8008c94:	4013      	ands	r3, r2
 8008c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c98:	683b      	ldr	r3, [r7, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d003      	beq.n	8008cac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008ca4:	69ba      	ldr	r2, [r7, #24]
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008cac:	4a28      	ldr	r2, [pc, #160]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008cae:	69bb      	ldr	r3, [r7, #24]
 8008cb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cb2:	4b27      	ldr	r3, [pc, #156]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	43db      	mvns	r3, r3
 8008cbc:	69ba      	ldr	r2, [r7, #24]
 8008cbe:	4013      	ands	r3, r2
 8008cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	685b      	ldr	r3, [r3, #4]
 8008cc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008cd6:	4a1e      	ldr	r2, [pc, #120]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008cd8:	69bb      	ldr	r3, [r7, #24]
 8008cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008cdc:	4b1c      	ldr	r3, [pc, #112]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008cde:	68db      	ldr	r3, [r3, #12]
 8008ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008d00:	4a13      	ldr	r2, [pc, #76]	; (8008d50 <HAL_GPIO_Init+0x350>)
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008d06:	69fb      	ldr	r3, [r7, #28]
 8008d08:	3301      	adds	r3, #1
 8008d0a:	61fb      	str	r3, [r7, #28]
 8008d0c:	69fb      	ldr	r3, [r7, #28]
 8008d0e:	2b0f      	cmp	r3, #15
 8008d10:	f67f ae86 	bls.w	8008a20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008d14:	bf00      	nop
 8008d16:	3724      	adds	r7, #36	; 0x24
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr
 8008d20:	40023800 	.word	0x40023800
 8008d24:	40013800 	.word	0x40013800
 8008d28:	40020000 	.word	0x40020000
 8008d2c:	40020400 	.word	0x40020400
 8008d30:	40020800 	.word	0x40020800
 8008d34:	40020c00 	.word	0x40020c00
 8008d38:	40021000 	.word	0x40021000
 8008d3c:	40021400 	.word	0x40021400
 8008d40:	40021800 	.word	0x40021800
 8008d44:	40021c00 	.word	0x40021c00
 8008d48:	40022000 	.word	0x40022000
 8008d4c:	40022400 	.word	0x40022400
 8008d50:	40013c00 	.word	0x40013c00

08008d54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	691a      	ldr	r2, [r3, #16]
 8008d64:	887b      	ldrh	r3, [r7, #2]
 8008d66:	4013      	ands	r3, r2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d002      	beq.n	8008d72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	73fb      	strb	r3, [r7, #15]
 8008d70:	e001      	b.n	8008d76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008d72:	2300      	movs	r3, #0
 8008d74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3714      	adds	r7, #20
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	807b      	strh	r3, [r7, #2]
 8008d90:	4613      	mov	r3, r2
 8008d92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008d94:	787b      	ldrb	r3, [r7, #1]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008d9a:	887a      	ldrh	r2, [r7, #2]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008da0:	e003      	b.n	8008daa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008da2:	887b      	ldrh	r3, [r7, #2]
 8008da4:	041a      	lsls	r2, r3, #16
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	619a      	str	r2, [r3, #24]
}
 8008daa:	bf00      	nop
 8008dac:	370c      	adds	r7, #12
 8008dae:	46bd      	mov	sp, r7
 8008db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db4:	4770      	bx	lr

08008db6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008db6:	b480      	push	{r7}
 8008db8:	b083      	sub	sp, #12
 8008dba:	af00      	add	r7, sp, #0
 8008dbc:	6078      	str	r0, [r7, #4]
 8008dbe:	460b      	mov	r3, r1
 8008dc0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	695a      	ldr	r2, [r3, #20]
 8008dc6:	887b      	ldrh	r3, [r7, #2]
 8008dc8:	4013      	ands	r3, r2
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d004      	beq.n	8008dd8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008dce:	887b      	ldrh	r3, [r7, #2]
 8008dd0:	041a      	lsls	r2, r3, #16
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008dd6:	e002      	b.n	8008dde <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008dd8:	887a      	ldrh	r2, [r7, #2]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	619a      	str	r2, [r3, #24]
}
 8008dde:	bf00      	nop
 8008de0:	370c      	adds	r7, #12
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr

08008dea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008dea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dec:	b08f      	sub	sp, #60	; 0x3c
 8008dee:	af0a      	add	r7, sp, #40	; 0x28
 8008df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d101      	bne.n	8008dfc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008df8:	2301      	movs	r3, #1
 8008dfa:	e116      	b.n	800902a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f011 f880 	bl	8019f1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2203      	movs	r2, #3
 8008e20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d102      	bne.n	8008e36 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f006 fe95 	bl	800fb6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	603b      	str	r3, [r7, #0]
 8008e46:	687e      	ldr	r6, [r7, #4]
 8008e48:	466d      	mov	r5, sp
 8008e4a:	f106 0410 	add.w	r4, r6, #16
 8008e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e5e:	1d33      	adds	r3, r6, #4
 8008e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e62:	6838      	ldr	r0, [r7, #0]
 8008e64:	f006 fd76 	bl	800f954 <USB_CoreInit>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d005      	beq.n	8008e7a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2202      	movs	r2, #2
 8008e72:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008e76:	2301      	movs	r3, #1
 8008e78:	e0d7      	b.n	800902a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	2100      	movs	r1, #0
 8008e80:	4618      	mov	r0, r3
 8008e82:	f006 fe83 	bl	800fb8c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e86:	2300      	movs	r3, #0
 8008e88:	73fb      	strb	r3, [r7, #15]
 8008e8a:	e04a      	b.n	8008f22 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008e8c:	7bfa      	ldrb	r2, [r7, #15]
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	333d      	adds	r3, #61	; 0x3d
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008ea0:	7bfa      	ldrb	r2, [r7, #15]
 8008ea2:	6879      	ldr	r1, [r7, #4]
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	00db      	lsls	r3, r3, #3
 8008ea8:	1a9b      	subs	r3, r3, r2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	440b      	add	r3, r1
 8008eae:	333c      	adds	r3, #60	; 0x3c
 8008eb0:	7bfa      	ldrb	r2, [r7, #15]
 8008eb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008eb4:	7bfa      	ldrb	r2, [r7, #15]
 8008eb6:	7bfb      	ldrb	r3, [r7, #15]
 8008eb8:	b298      	uxth	r0, r3
 8008eba:	6879      	ldr	r1, [r7, #4]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	1a9b      	subs	r3, r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	440b      	add	r3, r1
 8008ec6:	3342      	adds	r3, #66	; 0x42
 8008ec8:	4602      	mov	r2, r0
 8008eca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008ecc:	7bfa      	ldrb	r2, [r7, #15]
 8008ece:	6879      	ldr	r1, [r7, #4]
 8008ed0:	4613      	mov	r3, r2
 8008ed2:	00db      	lsls	r3, r3, #3
 8008ed4:	1a9b      	subs	r3, r3, r2
 8008ed6:	009b      	lsls	r3, r3, #2
 8008ed8:	440b      	add	r3, r1
 8008eda:	333f      	adds	r3, #63	; 0x3f
 8008edc:	2200      	movs	r2, #0
 8008ede:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008ee0:	7bfa      	ldrb	r2, [r7, #15]
 8008ee2:	6879      	ldr	r1, [r7, #4]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	00db      	lsls	r3, r3, #3
 8008ee8:	1a9b      	subs	r3, r3, r2
 8008eea:	009b      	lsls	r3, r3, #2
 8008eec:	440b      	add	r3, r1
 8008eee:	3344      	adds	r3, #68	; 0x44
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008ef4:	7bfa      	ldrb	r2, [r7, #15]
 8008ef6:	6879      	ldr	r1, [r7, #4]
 8008ef8:	4613      	mov	r3, r2
 8008efa:	00db      	lsls	r3, r3, #3
 8008efc:	1a9b      	subs	r3, r3, r2
 8008efe:	009b      	lsls	r3, r3, #2
 8008f00:	440b      	add	r3, r1
 8008f02:	3348      	adds	r3, #72	; 0x48
 8008f04:	2200      	movs	r2, #0
 8008f06:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008f08:	7bfa      	ldrb	r2, [r7, #15]
 8008f0a:	6879      	ldr	r1, [r7, #4]
 8008f0c:	4613      	mov	r3, r2
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	1a9b      	subs	r3, r3, r2
 8008f12:	009b      	lsls	r3, r3, #2
 8008f14:	440b      	add	r3, r1
 8008f16:	3350      	adds	r3, #80	; 0x50
 8008f18:	2200      	movs	r2, #0
 8008f1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	73fb      	strb	r3, [r7, #15]
 8008f22:	7bfa      	ldrb	r2, [r7, #15]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	429a      	cmp	r2, r3
 8008f2a:	d3af      	bcc.n	8008e8c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	73fb      	strb	r3, [r7, #15]
 8008f30:	e044      	b.n	8008fbc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008f32:	7bfa      	ldrb	r2, [r7, #15]
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	4613      	mov	r3, r2
 8008f38:	00db      	lsls	r3, r3, #3
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	440b      	add	r3, r1
 8008f40:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008f44:	2200      	movs	r2, #0
 8008f46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008f48:	7bfa      	ldrb	r2, [r7, #15]
 8008f4a:	6879      	ldr	r1, [r7, #4]
 8008f4c:	4613      	mov	r3, r2
 8008f4e:	00db      	lsls	r3, r3, #3
 8008f50:	1a9b      	subs	r3, r3, r2
 8008f52:	009b      	lsls	r3, r3, #2
 8008f54:	440b      	add	r3, r1
 8008f56:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008f5a:	7bfa      	ldrb	r2, [r7, #15]
 8008f5c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008f5e:	7bfa      	ldrb	r2, [r7, #15]
 8008f60:	6879      	ldr	r1, [r7, #4]
 8008f62:	4613      	mov	r3, r2
 8008f64:	00db      	lsls	r3, r3, #3
 8008f66:	1a9b      	subs	r3, r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	440b      	add	r3, r1
 8008f6c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008f70:	2200      	movs	r2, #0
 8008f72:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008f74:	7bfa      	ldrb	r2, [r7, #15]
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	00db      	lsls	r3, r3, #3
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	440b      	add	r3, r1
 8008f82:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008f86:	2200      	movs	r2, #0
 8008f88:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008f8a:	7bfa      	ldrb	r2, [r7, #15]
 8008f8c:	6879      	ldr	r1, [r7, #4]
 8008f8e:	4613      	mov	r3, r2
 8008f90:	00db      	lsls	r3, r3, #3
 8008f92:	1a9b      	subs	r3, r3, r2
 8008f94:	009b      	lsls	r3, r3, #2
 8008f96:	440b      	add	r3, r1
 8008f98:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008fa0:	7bfa      	ldrb	r2, [r7, #15]
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	00db      	lsls	r3, r3, #3
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008fb6:	7bfb      	ldrb	r3, [r7, #15]
 8008fb8:	3301      	adds	r3, #1
 8008fba:	73fb      	strb	r3, [r7, #15]
 8008fbc:	7bfa      	ldrb	r2, [r7, #15]
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	429a      	cmp	r2, r3
 8008fc4:	d3b5      	bcc.n	8008f32 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	603b      	str	r3, [r7, #0]
 8008fcc:	687e      	ldr	r6, [r7, #4]
 8008fce:	466d      	mov	r5, sp
 8008fd0:	f106 0410 	add.w	r4, r6, #16
 8008fd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008fda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008fdc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008fe0:	e885 0003 	stmia.w	r5, {r0, r1}
 8008fe4:	1d33      	adds	r3, r6, #4
 8008fe6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008fe8:	6838      	ldr	r0, [r7, #0]
 8008fea:	f006 fdf9 	bl	800fbe0 <USB_DevInit>
 8008fee:	4603      	mov	r3, r0
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d005      	beq.n	8009000 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2202      	movs	r2, #2
 8008ff8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e014      	b.n	800902a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	2b01      	cmp	r3, #1
 8009016:	d102      	bne.n	800901e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 f881 	bl	800a120 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4618      	mov	r0, r3
 8009024:	f007 fe48 	bl	8010cb8 <USB_DevDisconnect>

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009032 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8009032:	b580      	push	{r7, lr}
 8009034:	b082      	sub	sp, #8
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009040:	2b01      	cmp	r3, #1
 8009042:	d101      	bne.n	8009048 <HAL_PCD_Start+0x16>
 8009044:	2302      	movs	r3, #2
 8009046:	e012      	b.n	800906e <HAL_PCD_Start+0x3c>
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	2201      	movs	r2, #1
 800904c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	4618      	mov	r0, r3
 8009056:	f007 fe17 	bl	8010c88 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	4618      	mov	r0, r3
 8009060:	f006 fd72 	bl	800fb48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3708      	adds	r7, #8
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}

08009076 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8009076:	b590      	push	{r4, r7, lr}
 8009078:	b08d      	sub	sp, #52	; 0x34
 800907a:	af00      	add	r7, sp, #0
 800907c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009084:	6a3b      	ldr	r3, [r7, #32]
 8009086:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4618      	mov	r0, r3
 800908e:	f007 febe 	bl	8010e0e <USB_GetMode>
 8009092:	4603      	mov	r3, r0
 8009094:	2b00      	cmp	r3, #0
 8009096:	f040 83ca 	bne.w	800982e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4618      	mov	r0, r3
 80090a0:	f007 fe22 	bl	8010ce8 <USB_ReadInterrupts>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 83c0 	beq.w	800982c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	4618      	mov	r0, r3
 80090b2:	f007 fe19 	bl	8010ce8 <USB_ReadInterrupts>
 80090b6:	4603      	mov	r3, r0
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b02      	cmp	r3, #2
 80090be:	d107      	bne.n	80090d0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	695a      	ldr	r2, [r3, #20]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f002 0202 	and.w	r2, r2, #2
 80090ce:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f007 fe07 	bl	8010ce8 <USB_ReadInterrupts>
 80090da:	4603      	mov	r3, r0
 80090dc:	f003 0310 	and.w	r3, r3, #16
 80090e0:	2b10      	cmp	r3, #16
 80090e2:	d161      	bne.n	80091a8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	699a      	ldr	r2, [r3, #24]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0210 	bic.w	r2, r2, #16
 80090f2:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80090f4:	6a3b      	ldr	r3, [r7, #32]
 80090f6:	6a1b      	ldr	r3, [r3, #32]
 80090f8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80090fa:	69bb      	ldr	r3, [r7, #24]
 80090fc:	f003 020f 	and.w	r2, r3, #15
 8009100:	4613      	mov	r3, r2
 8009102:	00db      	lsls	r3, r3, #3
 8009104:	1a9b      	subs	r3, r3, r2
 8009106:	009b      	lsls	r3, r3, #2
 8009108:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800910c:	687a      	ldr	r2, [r7, #4]
 800910e:	4413      	add	r3, r2
 8009110:	3304      	adds	r3, #4
 8009112:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8009114:	69bb      	ldr	r3, [r7, #24]
 8009116:	0c5b      	lsrs	r3, r3, #17
 8009118:	f003 030f 	and.w	r3, r3, #15
 800911c:	2b02      	cmp	r3, #2
 800911e:	d124      	bne.n	800916a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8009120:	69ba      	ldr	r2, [r7, #24]
 8009122:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8009126:	4013      	ands	r3, r2
 8009128:	2b00      	cmp	r3, #0
 800912a:	d035      	beq.n	8009198 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800912c:	697b      	ldr	r3, [r7, #20]
 800912e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8009130:	69bb      	ldr	r3, [r7, #24]
 8009132:	091b      	lsrs	r3, r3, #4
 8009134:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8009136:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800913a:	b29b      	uxth	r3, r3
 800913c:	461a      	mov	r2, r3
 800913e:	6a38      	ldr	r0, [r7, #32]
 8009140:	f007 fc7f 	bl	8010a42 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	68da      	ldr	r2, [r3, #12]
 8009148:	69bb      	ldr	r3, [r7, #24]
 800914a:	091b      	lsrs	r3, r3, #4
 800914c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009150:	441a      	add	r2, r3
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009156:	697b      	ldr	r3, [r7, #20]
 8009158:	699a      	ldr	r2, [r3, #24]
 800915a:	69bb      	ldr	r3, [r7, #24]
 800915c:	091b      	lsrs	r3, r3, #4
 800915e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009162:	441a      	add	r2, r3
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	619a      	str	r2, [r3, #24]
 8009168:	e016      	b.n	8009198 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800916a:	69bb      	ldr	r3, [r7, #24]
 800916c:	0c5b      	lsrs	r3, r3, #17
 800916e:	f003 030f 	and.w	r3, r3, #15
 8009172:	2b06      	cmp	r3, #6
 8009174:	d110      	bne.n	8009198 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800917c:	2208      	movs	r2, #8
 800917e:	4619      	mov	r1, r3
 8009180:	6a38      	ldr	r0, [r7, #32]
 8009182:	f007 fc5e 	bl	8010a42 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	699a      	ldr	r2, [r3, #24]
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	091b      	lsrs	r3, r3, #4
 800918e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009192:	441a      	add	r2, r3
 8009194:	697b      	ldr	r3, [r7, #20]
 8009196:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	699a      	ldr	r2, [r3, #24]
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	f042 0210 	orr.w	r2, r2, #16
 80091a6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f007 fd9b 	bl	8010ce8 <USB_ReadInterrupts>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80091b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80091bc:	d16e      	bne.n	800929c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	4618      	mov	r0, r3
 80091c8:	f007 fda1 	bl	8010d0e <USB_ReadDevAllOutEpInterrupt>
 80091cc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80091ce:	e062      	b.n	8009296 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80091d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091d2:	f003 0301 	and.w	r3, r3, #1
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d057      	beq.n	800928a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091e0:	b2d2      	uxtb	r2, r2
 80091e2:	4611      	mov	r1, r2
 80091e4:	4618      	mov	r0, r3
 80091e6:	f007 fdc6 	bl	8010d76 <USB_ReadDevOutEPInterrupt>
 80091ea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80091ec:	693b      	ldr	r3, [r7, #16]
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d00c      	beq.n	8009210 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80091f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f8:	015a      	lsls	r2, r3, #5
 80091fa:	69fb      	ldr	r3, [r7, #28]
 80091fc:	4413      	add	r3, r2
 80091fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009202:	461a      	mov	r2, r3
 8009204:	2301      	movs	r3, #1
 8009206:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009208:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fdde 	bl	8009dcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009210:	693b      	ldr	r3, [r7, #16]
 8009212:	f003 0308 	and.w	r3, r3, #8
 8009216:	2b00      	cmp	r3, #0
 8009218:	d00c      	beq.n	8009234 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800921a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921c:	015a      	lsls	r2, r3, #5
 800921e:	69fb      	ldr	r3, [r7, #28]
 8009220:	4413      	add	r3, r2
 8009222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009226:	461a      	mov	r2, r3
 8009228:	2308      	movs	r3, #8
 800922a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800922c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 fed8 	bl	8009fe4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	f003 0310 	and.w	r3, r3, #16
 800923a:	2b00      	cmp	r3, #0
 800923c:	d008      	beq.n	8009250 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	015a      	lsls	r2, r3, #5
 8009242:	69fb      	ldr	r3, [r7, #28]
 8009244:	4413      	add	r3, r2
 8009246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800924a:	461a      	mov	r2, r3
 800924c:	2310      	movs	r3, #16
 800924e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009250:	693b      	ldr	r3, [r7, #16]
 8009252:	f003 0320 	and.w	r3, r3, #32
 8009256:	2b00      	cmp	r3, #0
 8009258:	d008      	beq.n	800926c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800925a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800925c:	015a      	lsls	r2, r3, #5
 800925e:	69fb      	ldr	r3, [r7, #28]
 8009260:	4413      	add	r3, r2
 8009262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009266:	461a      	mov	r2, r3
 8009268:	2320      	movs	r3, #32
 800926a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009272:	2b00      	cmp	r3, #0
 8009274:	d009      	beq.n	800928a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8009276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009278:	015a      	lsls	r2, r3, #5
 800927a:	69fb      	ldr	r3, [r7, #28]
 800927c:	4413      	add	r3, r2
 800927e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009282:	461a      	mov	r2, r3
 8009284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009288:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800928a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800928c:	3301      	adds	r3, #1
 800928e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009292:	085b      	lsrs	r3, r3, #1
 8009294:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009298:	2b00      	cmp	r3, #0
 800929a:	d199      	bne.n	80091d0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f007 fd21 	bl	8010ce8 <USB_ReadInterrupts>
 80092a6:	4603      	mov	r3, r0
 80092a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80092ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80092b0:	f040 80c0 	bne.w	8009434 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	4618      	mov	r0, r3
 80092ba:	f007 fd42 	bl	8010d42 <USB_ReadDevAllInEpInterrupt>
 80092be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80092c4:	e0b2      	b.n	800942c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	f000 80a7 	beq.w	8009420 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d8:	b2d2      	uxtb	r2, r2
 80092da:	4611      	mov	r1, r2
 80092dc:	4618      	mov	r0, r3
 80092de:	f007 fd68 	bl	8010db2 <USB_ReadDevInEPInterrupt>
 80092e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80092e4:	693b      	ldr	r3, [r7, #16]
 80092e6:	f003 0301 	and.w	r3, r3, #1
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d057      	beq.n	800939e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80092ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f0:	f003 030f 	and.w	r3, r3, #15
 80092f4:	2201      	movs	r2, #1
 80092f6:	fa02 f303 	lsl.w	r3, r2, r3
 80092fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80092fc:	69fb      	ldr	r3, [r7, #28]
 80092fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	43db      	mvns	r3, r3
 8009308:	69f9      	ldr	r1, [r7, #28]
 800930a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800930e:	4013      	ands	r3, r2
 8009310:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800931e:	461a      	mov	r2, r3
 8009320:	2301      	movs	r3, #1
 8009322:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	691b      	ldr	r3, [r3, #16]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d132      	bne.n	8009392 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800932c:	6879      	ldr	r1, [r7, #4]
 800932e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009330:	4613      	mov	r3, r2
 8009332:	00db      	lsls	r3, r3, #3
 8009334:	1a9b      	subs	r3, r3, r2
 8009336:	009b      	lsls	r3, r3, #2
 8009338:	440b      	add	r3, r1
 800933a:	3348      	adds	r3, #72	; 0x48
 800933c:	6819      	ldr	r1, [r3, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009342:	4613      	mov	r3, r2
 8009344:	00db      	lsls	r3, r3, #3
 8009346:	1a9b      	subs	r3, r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	4403      	add	r3, r0
 800934c:	3344      	adds	r3, #68	; 0x44
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4419      	add	r1, r3
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009356:	4613      	mov	r3, r2
 8009358:	00db      	lsls	r3, r3, #3
 800935a:	1a9b      	subs	r3, r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4403      	add	r3, r0
 8009360:	3348      	adds	r3, #72	; 0x48
 8009362:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8009364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009366:	2b00      	cmp	r3, #0
 8009368:	d113      	bne.n	8009392 <HAL_PCD_IRQHandler+0x31c>
 800936a:	6879      	ldr	r1, [r7, #4]
 800936c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800936e:	4613      	mov	r3, r2
 8009370:	00db      	lsls	r3, r3, #3
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	3350      	adds	r3, #80	; 0x50
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d108      	bne.n	8009392 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	6818      	ldr	r0, [r3, #0]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800938a:	461a      	mov	r2, r3
 800938c:	2101      	movs	r1, #1
 800938e:	f007 fd71 	bl	8010e74 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009394:	b2db      	uxtb	r3, r3
 8009396:	4619      	mov	r1, r3
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f010 fe42 	bl	801a022 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d008      	beq.n	80093ba <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093b4:	461a      	mov	r2, r3
 80093b6:	2308      	movs	r3, #8
 80093b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f003 0310 	and.w	r3, r3, #16
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d008      	beq.n	80093d6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80093c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	69fb      	ldr	r3, [r7, #28]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093d0:	461a      	mov	r2, r3
 80093d2:	2310      	movs	r3, #16
 80093d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d008      	beq.n	80093f2 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80093e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e2:	015a      	lsls	r2, r3, #5
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	4413      	add	r3, r2
 80093e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ec:	461a      	mov	r2, r3
 80093ee:	2340      	movs	r3, #64	; 0x40
 80093f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80093f2:	693b      	ldr	r3, [r7, #16]
 80093f4:	f003 0302 	and.w	r3, r3, #2
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d008      	beq.n	800940e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80093fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009408:	461a      	mov	r2, r3
 800940a:	2302      	movs	r3, #2
 800940c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009414:	2b00      	cmp	r3, #0
 8009416:	d003      	beq.n	8009420 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fc48 	bl	8009cb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009422:	3301      	adds	r3, #1
 8009424:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009428:	085b      	lsrs	r3, r3, #1
 800942a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	2b00      	cmp	r3, #0
 8009430:	f47f af49 	bne.w	80092c6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	4618      	mov	r0, r3
 800943a:	f007 fc55 	bl	8010ce8 <USB_ReadInterrupts>
 800943e:	4603      	mov	r3, r0
 8009440:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009444:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009448:	d122      	bne.n	8009490 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800944a:	69fb      	ldr	r3, [r7, #28]
 800944c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	69fa      	ldr	r2, [r7, #28]
 8009454:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009458:	f023 0301 	bic.w	r3, r3, #1
 800945c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009464:	2b01      	cmp	r3, #1
 8009466:	d108      	bne.n	800947a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2200      	movs	r2, #0
 800946c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8009470:	2100      	movs	r1, #0
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f011 f824 	bl	801a4c0 <HAL_PCDEx_LPM_Callback>
 8009478:	e002      	b.n	8009480 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f010 fe48 	bl	801a110 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	695a      	ldr	r2, [r3, #20]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800948e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4618      	mov	r0, r3
 8009496:	f007 fc27 	bl	8010ce8 <USB_ReadInterrupts>
 800949a:	4603      	mov	r3, r0
 800949c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094a4:	d112      	bne.n	80094cc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80094a6:	69fb      	ldr	r3, [r7, #28]
 80094a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	f003 0301 	and.w	r3, r3, #1
 80094b2:	2b01      	cmp	r3, #1
 80094b4:	d102      	bne.n	80094bc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80094b6:	6878      	ldr	r0, [r7, #4]
 80094b8:	f010 fe04 	bl	801a0c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	695a      	ldr	r2, [r3, #20]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80094ca:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4618      	mov	r0, r3
 80094d2:	f007 fc09 	bl	8010ce8 <USB_ReadInterrupts>
 80094d6:	4603      	mov	r3, r0
 80094d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094e0:	d121      	bne.n	8009526 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	695a      	ldr	r2, [r3, #20]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80094f0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d111      	bne.n	8009520 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2201      	movs	r2, #1
 8009500:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800950a:	089b      	lsrs	r3, r3, #2
 800950c:	f003 020f 	and.w	r2, r3, #15
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009516:	2101      	movs	r1, #1
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f010 ffd1 	bl	801a4c0 <HAL_PCDEx_LPM_Callback>
 800951e:	e002      	b.n	8009526 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f010 fdcf 	bl	801a0c4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f007 fbdc 	bl	8010ce8 <USB_ReadInterrupts>
 8009530:	4603      	mov	r3, r0
 8009532:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009536:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953a:	f040 80c7 	bne.w	80096cc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	69fa      	ldr	r2, [r7, #28]
 8009548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800954c:	f023 0301 	bic.w	r3, r3, #1
 8009550:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2110      	movs	r1, #16
 8009558:	4618      	mov	r0, r3
 800955a:	f006 fcaf 	bl	800febc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800955e:	2300      	movs	r3, #0
 8009560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009562:	e056      	b.n	8009612 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8009564:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009566:	015a      	lsls	r2, r3, #5
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	4413      	add	r3, r2
 800956c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009570:	461a      	mov	r2, r3
 8009572:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009576:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800957a:	015a      	lsls	r2, r3, #5
 800957c:	69fb      	ldr	r3, [r7, #28]
 800957e:	4413      	add	r3, r2
 8009580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009588:	0151      	lsls	r1, r2, #5
 800958a:	69fa      	ldr	r2, [r7, #28]
 800958c:	440a      	add	r2, r1
 800958e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009592:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009596:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800959a:	015a      	lsls	r2, r3, #5
 800959c:	69fb      	ldr	r3, [r7, #28]
 800959e:	4413      	add	r3, r2
 80095a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095a8:	0151      	lsls	r1, r2, #5
 80095aa:	69fa      	ldr	r2, [r7, #28]
 80095ac:	440a      	add	r2, r1
 80095ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80095b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80095b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ba:	015a      	lsls	r2, r3, #5
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	4413      	add	r3, r2
 80095c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095c4:	461a      	mov	r2, r3
 80095c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80095ca:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80095cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ce:	015a      	lsls	r2, r3, #5
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	4413      	add	r3, r2
 80095d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095dc:	0151      	lsls	r1, r2, #5
 80095de:	69fa      	ldr	r2, [r7, #28]
 80095e0:	440a      	add	r2, r1
 80095e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80095e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095ea:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80095ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095ee:	015a      	lsls	r2, r3, #5
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	4413      	add	r3, r2
 80095f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80095fc:	0151      	lsls	r1, r2, #5
 80095fe:	69fa      	ldr	r2, [r7, #28]
 8009600:	440a      	add	r2, r1
 8009602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009606:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800960a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800960c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800960e:	3301      	adds	r3, #1
 8009610:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009618:	429a      	cmp	r2, r3
 800961a:	d3a3      	bcc.n	8009564 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	69fa      	ldr	r2, [r7, #28]
 8009626:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800962a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800962e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009634:	2b00      	cmp	r3, #0
 8009636:	d016      	beq.n	8009666 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800963e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009648:	f043 030b 	orr.w	r3, r3, #11
 800964c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800965e:	f043 030b 	orr.w	r3, r3, #11
 8009662:	6453      	str	r3, [r2, #68]	; 0x44
 8009664:	e015      	b.n	8009692 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8009666:	69fb      	ldr	r3, [r7, #28]
 8009668:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800966c:	695a      	ldr	r2, [r3, #20]
 800966e:	69fb      	ldr	r3, [r7, #28]
 8009670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009674:	4619      	mov	r1, r3
 8009676:	f242 032b 	movw	r3, #8235	; 0x202b
 800967a:	4313      	orrs	r3, r2
 800967c:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009684:	691b      	ldr	r3, [r3, #16]
 8009686:	69fa      	ldr	r2, [r7, #28]
 8009688:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800968c:	f043 030b 	orr.w	r3, r3, #11
 8009690:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009692:	69fb      	ldr	r3, [r7, #28]
 8009694:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	69fa      	ldr	r2, [r7, #28]
 800969c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80096a0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80096a4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	6818      	ldr	r0, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80096b6:	461a      	mov	r2, r3
 80096b8:	f007 fbdc 	bl	8010e74 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	695a      	ldr	r2, [r3, #20]
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80096ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4618      	mov	r0, r3
 80096d2:	f007 fb09 	bl	8010ce8 <USB_ReadInterrupts>
 80096d6:	4603      	mov	r3, r0
 80096d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80096dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096e0:	d124      	bne.n	800972c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f007 fba0 	bl	8010e2c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4618      	mov	r0, r3
 80096f2:	f006 fc44 	bl	800ff7e <USB_GetDevSpeed>
 80096f6:	4603      	mov	r3, r0
 80096f8:	461a      	mov	r2, r3
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681c      	ldr	r4, [r3, #0]
 8009702:	f001 f999 	bl	800aa38 <HAL_RCC_GetHCLKFreq>
 8009706:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800970c:	b2db      	uxtb	r3, r3
 800970e:	461a      	mov	r2, r3
 8009710:	4620      	mov	r0, r4
 8009712:	f006 f977 	bl	800fa04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f010 fcab 	bl	801a072 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	695a      	ldr	r2, [r3, #20]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800972a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4618      	mov	r0, r3
 8009732:	f007 fad9 	bl	8010ce8 <USB_ReadInterrupts>
 8009736:	4603      	mov	r3, r0
 8009738:	f003 0308 	and.w	r3, r3, #8
 800973c:	2b08      	cmp	r3, #8
 800973e:	d10a      	bne.n	8009756 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	f010 fc88 	bl	801a056 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	695a      	ldr	r2, [r3, #20]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f002 0208 	and.w	r2, r2, #8
 8009754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4618      	mov	r0, r3
 800975c:	f007 fac4 	bl	8010ce8 <USB_ReadInterrupts>
 8009760:	4603      	mov	r3, r0
 8009762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800976a:	d10f      	bne.n	800978c <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800976c:	2300      	movs	r3, #0
 800976e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8009770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009772:	b2db      	uxtb	r3, r3
 8009774:	4619      	mov	r1, r3
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	f010 fcea 	bl	801a150 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	695a      	ldr	r2, [r3, #20]
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800978a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4618      	mov	r0, r3
 8009792:	f007 faa9 	bl	8010ce8 <USB_ReadInterrupts>
 8009796:	4603      	mov	r3, r0
 8009798:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800979c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80097a0:	d10f      	bne.n	80097c2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80097a2:	2300      	movs	r3, #0
 80097a4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80097a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f010 fcbd 	bl	801a12c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	695a      	ldr	r2, [r3, #20]
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80097c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f007 fa8e 	bl	8010ce8 <USB_ReadInterrupts>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80097d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097d6:	d10a      	bne.n	80097ee <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f010 fccb 	bl	801a174 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	695a      	ldr	r2, [r3, #20]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80097ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4618      	mov	r0, r3
 80097f4:	f007 fa78 	bl	8010ce8 <USB_ReadInterrupts>
 80097f8:	4603      	mov	r3, r0
 80097fa:	f003 0304 	and.w	r3, r3, #4
 80097fe:	2b04      	cmp	r3, #4
 8009800:	d115      	bne.n	800982e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	685b      	ldr	r3, [r3, #4]
 8009808:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	f003 0304 	and.w	r3, r3, #4
 8009810:	2b00      	cmp	r3, #0
 8009812:	d002      	beq.n	800981a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f010 fcbb 	bl	801a190 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	6859      	ldr	r1, [r3, #4]
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	430a      	orrs	r2, r1
 8009828:	605a      	str	r2, [r3, #4]
 800982a:	e000      	b.n	800982e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800982c:	bf00      	nop
    }
  }
}
 800982e:	3734      	adds	r7, #52	; 0x34
 8009830:	46bd      	mov	sp, r7
 8009832:	bd90      	pop	{r4, r7, pc}

08009834 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009846:	2b01      	cmp	r3, #1
 8009848:	d101      	bne.n	800984e <HAL_PCD_SetAddress+0x1a>
 800984a:	2302      	movs	r3, #2
 800984c:	e013      	b.n	8009876 <HAL_PCD_SetAddress+0x42>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	78fa      	ldrb	r2, [r7, #3]
 800985a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	4611      	mov	r1, r2
 8009866:	4618      	mov	r0, r3
 8009868:	f007 f9e8 	bl	8010c3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009874:	2300      	movs	r3, #0
}
 8009876:	4618      	mov	r0, r3
 8009878:	3708      	adds	r7, #8
 800987a:	46bd      	mov	sp, r7
 800987c:	bd80      	pop	{r7, pc}

0800987e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 800987e:	b580      	push	{r7, lr}
 8009880:	b084      	sub	sp, #16
 8009882:	af00      	add	r7, sp, #0
 8009884:	6078      	str	r0, [r7, #4]
 8009886:	4608      	mov	r0, r1
 8009888:	4611      	mov	r1, r2
 800988a:	461a      	mov	r2, r3
 800988c:	4603      	mov	r3, r0
 800988e:	70fb      	strb	r3, [r7, #3]
 8009890:	460b      	mov	r3, r1
 8009892:	803b      	strh	r3, [r7, #0]
 8009894:	4613      	mov	r3, r2
 8009896:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009898:	2300      	movs	r3, #0
 800989a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800989c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	da0f      	bge.n	80098c4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	f003 020f 	and.w	r2, r3, #15
 80098aa:	4613      	mov	r3, r2
 80098ac:	00db      	lsls	r3, r3, #3
 80098ae:	1a9b      	subs	r3, r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	3338      	adds	r3, #56	; 0x38
 80098b4:	687a      	ldr	r2, [r7, #4]
 80098b6:	4413      	add	r3, r2
 80098b8:	3304      	adds	r3, #4
 80098ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2201      	movs	r2, #1
 80098c0:	705a      	strb	r2, [r3, #1]
 80098c2:	e00f      	b.n	80098e4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80098c4:	78fb      	ldrb	r3, [r7, #3]
 80098c6:	f003 020f 	and.w	r2, r3, #15
 80098ca:	4613      	mov	r3, r2
 80098cc:	00db      	lsls	r3, r3, #3
 80098ce:	1a9b      	subs	r3, r3, r2
 80098d0:	009b      	lsls	r3, r3, #2
 80098d2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80098d6:	687a      	ldr	r2, [r7, #4]
 80098d8:	4413      	add	r3, r2
 80098da:	3304      	adds	r3, #4
 80098dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	2200      	movs	r2, #0
 80098e2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80098e4:	78fb      	ldrb	r3, [r7, #3]
 80098e6:	f003 030f 	and.w	r3, r3, #15
 80098ea:	b2da      	uxtb	r2, r3
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80098f0:	883a      	ldrh	r2, [r7, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	78ba      	ldrb	r2, [r7, #2]
 80098fa:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	785b      	ldrb	r3, [r3, #1]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d004      	beq.n	800990e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	b29a      	uxth	r2, r3
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800990e:	78bb      	ldrb	r3, [r7, #2]
 8009910:	2b02      	cmp	r3, #2
 8009912:	d102      	bne.n	800991a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009920:	2b01      	cmp	r3, #1
 8009922:	d101      	bne.n	8009928 <HAL_PCD_EP_Open+0xaa>
 8009924:	2302      	movs	r3, #2
 8009926:	e00e      	b.n	8009946 <HAL_PCD_EP_Open+0xc8>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2201      	movs	r2, #1
 800992c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	68f9      	ldr	r1, [r7, #12]
 8009936:	4618      	mov	r0, r3
 8009938:	f006 fb46 	bl	800ffc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8009944:	7afb      	ldrb	r3, [r7, #11]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3710      	adds	r7, #16
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}

0800994e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800994e:	b580      	push	{r7, lr}
 8009950:	b084      	sub	sp, #16
 8009952:	af00      	add	r7, sp, #0
 8009954:	6078      	str	r0, [r7, #4]
 8009956:	460b      	mov	r3, r1
 8009958:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800995a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800995e:	2b00      	cmp	r3, #0
 8009960:	da0f      	bge.n	8009982 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009962:	78fb      	ldrb	r3, [r7, #3]
 8009964:	f003 020f 	and.w	r2, r3, #15
 8009968:	4613      	mov	r3, r2
 800996a:	00db      	lsls	r3, r3, #3
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	3338      	adds	r3, #56	; 0x38
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	4413      	add	r3, r2
 8009976:	3304      	adds	r3, #4
 8009978:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	2201      	movs	r2, #1
 800997e:	705a      	strb	r2, [r3, #1]
 8009980:	e00f      	b.n	80099a2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009982:	78fb      	ldrb	r3, [r7, #3]
 8009984:	f003 020f 	and.w	r2, r3, #15
 8009988:	4613      	mov	r3, r2
 800998a:	00db      	lsls	r3, r3, #3
 800998c:	1a9b      	subs	r3, r3, r2
 800998e:	009b      	lsls	r3, r3, #2
 8009990:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009994:	687a      	ldr	r2, [r7, #4]
 8009996:	4413      	add	r3, r2
 8009998:	3304      	adds	r3, #4
 800999a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	2200      	movs	r2, #0
 80099a0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80099a2:	78fb      	ldrb	r3, [r7, #3]
 80099a4:	f003 030f 	and.w	r3, r3, #15
 80099a8:	b2da      	uxtb	r2, r3
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d101      	bne.n	80099bc <HAL_PCD_EP_Close+0x6e>
 80099b8:	2302      	movs	r3, #2
 80099ba:	e00e      	b.n	80099da <HAL_PCD_EP_Close+0x8c>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68f9      	ldr	r1, [r7, #12]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f006 fb84 	bl	80100d8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80099d8:	2300      	movs	r3, #0
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b086      	sub	sp, #24
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	60f8      	str	r0, [r7, #12]
 80099ea:	607a      	str	r2, [r7, #4]
 80099ec:	603b      	str	r3, [r7, #0]
 80099ee:	460b      	mov	r3, r1
 80099f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80099f2:	7afb      	ldrb	r3, [r7, #11]
 80099f4:	f003 020f 	and.w	r2, r3, #15
 80099f8:	4613      	mov	r3, r2
 80099fa:	00db      	lsls	r3, r3, #3
 80099fc:	1a9b      	subs	r3, r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	4413      	add	r3, r2
 8009a08:	3304      	adds	r3, #4
 8009a0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	683a      	ldr	r2, [r7, #0]
 8009a16:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	2200      	movs	r2, #0
 8009a22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a24:	7afb      	ldrb	r3, [r7, #11]
 8009a26:	f003 030f 	and.w	r3, r3, #15
 8009a2a:	b2da      	uxtb	r2, r3
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d102      	bne.n	8009a3e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009a38:	687a      	ldr	r2, [r7, #4]
 8009a3a:	697b      	ldr	r3, [r7, #20]
 8009a3c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009a3e:	7afb      	ldrb	r3, [r7, #11]
 8009a40:	f003 030f 	and.w	r3, r3, #15
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d109      	bne.n	8009a5c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	691b      	ldr	r3, [r3, #16]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	6979      	ldr	r1, [r7, #20]
 8009a56:	f006 fe67 	bl	8010728 <USB_EP0StartXfer>
 8009a5a:	e008      	b.n	8009a6e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	6818      	ldr	r0, [r3, #0]
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	691b      	ldr	r3, [r3, #16]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	461a      	mov	r2, r3
 8009a68:	6979      	ldr	r1, [r7, #20]
 8009a6a:	f006 fc11 	bl	8010290 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3718      	adds	r7, #24
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}

08009a78 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b083      	sub	sp, #12
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8009a84:	78fb      	ldrb	r3, [r7, #3]
 8009a86:	f003 020f 	and.w	r2, r3, #15
 8009a8a:	6879      	ldr	r1, [r7, #4]
 8009a8c:	4613      	mov	r3, r2
 8009a8e:	00db      	lsls	r3, r3, #3
 8009a90:	1a9b      	subs	r3, r3, r2
 8009a92:	009b      	lsls	r3, r3, #2
 8009a94:	440b      	add	r3, r1
 8009a96:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009a9a:	681b      	ldr	r3, [r3, #0]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	607a      	str	r2, [r7, #4]
 8009ab2:	603b      	str	r3, [r7, #0]
 8009ab4:	460b      	mov	r3, r1
 8009ab6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009ab8:	7afb      	ldrb	r3, [r7, #11]
 8009aba:	f003 020f 	and.w	r2, r3, #15
 8009abe:	4613      	mov	r3, r2
 8009ac0:	00db      	lsls	r3, r3, #3
 8009ac2:	1a9b      	subs	r3, r3, r2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	3338      	adds	r3, #56	; 0x38
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	4413      	add	r3, r2
 8009acc:	3304      	adds	r3, #4
 8009ace:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	683a      	ldr	r2, [r7, #0]
 8009ada:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009ae2:	697b      	ldr	r3, [r7, #20]
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ae8:	7afb      	ldrb	r3, [r7, #11]
 8009aea:	f003 030f 	and.w	r3, r3, #15
 8009aee:	b2da      	uxtb	r2, r3
 8009af0:	697b      	ldr	r3, [r7, #20]
 8009af2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d102      	bne.n	8009b02 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009afc:	687a      	ldr	r2, [r7, #4]
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009b02:	7afb      	ldrb	r3, [r7, #11]
 8009b04:	f003 030f 	and.w	r3, r3, #15
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d109      	bne.n	8009b20 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	6818      	ldr	r0, [r3, #0]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	691b      	ldr	r3, [r3, #16]
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	461a      	mov	r2, r3
 8009b18:	6979      	ldr	r1, [r7, #20]
 8009b1a:	f006 fe05 	bl	8010728 <USB_EP0StartXfer>
 8009b1e:	e008      	b.n	8009b32 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6818      	ldr	r0, [r3, #0]
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	691b      	ldr	r3, [r3, #16]
 8009b28:	b2db      	uxtb	r3, r3
 8009b2a:	461a      	mov	r2, r3
 8009b2c:	6979      	ldr	r1, [r7, #20]
 8009b2e:	f006 fbaf 	bl	8010290 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3718      	adds	r7, #24
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	460b      	mov	r3, r1
 8009b46:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009b48:	78fb      	ldrb	r3, [r7, #3]
 8009b4a:	f003 020f 	and.w	r2, r3, #15
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	429a      	cmp	r2, r3
 8009b54:	d901      	bls.n	8009b5a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e050      	b.n	8009bfc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	da0f      	bge.n	8009b82 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009b62:	78fb      	ldrb	r3, [r7, #3]
 8009b64:	f003 020f 	and.w	r2, r3, #15
 8009b68:	4613      	mov	r3, r2
 8009b6a:	00db      	lsls	r3, r3, #3
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	3338      	adds	r3, #56	; 0x38
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	4413      	add	r3, r2
 8009b76:	3304      	adds	r3, #4
 8009b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	2201      	movs	r2, #1
 8009b7e:	705a      	strb	r2, [r3, #1]
 8009b80:	e00d      	b.n	8009b9e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	4613      	mov	r3, r2
 8009b86:	00db      	lsls	r3, r3, #3
 8009b88:	1a9b      	subs	r3, r3, r2
 8009b8a:	009b      	lsls	r3, r3, #2
 8009b8c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009b90:	687a      	ldr	r2, [r7, #4]
 8009b92:	4413      	add	r3, r2
 8009b94:	3304      	adds	r3, #4
 8009b96:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2201      	movs	r2, #1
 8009ba2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ba4:	78fb      	ldrb	r3, [r7, #3]
 8009ba6:	f003 030f 	and.w	r3, r3, #15
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d101      	bne.n	8009bbe <HAL_PCD_EP_SetStall+0x82>
 8009bba:	2302      	movs	r3, #2
 8009bbc:	e01e      	b.n	8009bfc <HAL_PCD_EP_SetStall+0xc0>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2201      	movs	r2, #1
 8009bc2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	68f9      	ldr	r1, [r7, #12]
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f006 ff61 	bl	8010a94 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009bd2:	78fb      	ldrb	r3, [r7, #3]
 8009bd4:	f003 030f 	and.w	r3, r3, #15
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d10a      	bne.n	8009bf2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	6818      	ldr	r0, [r3, #0]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	b2d9      	uxtb	r1, r3
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009bec:	461a      	mov	r2, r3
 8009bee:	f007 f941 	bl	8010e74 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009bfa:	2300      	movs	r3, #0
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	460b      	mov	r3, r1
 8009c0e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009c10:	78fb      	ldrb	r3, [r7, #3]
 8009c12:	f003 020f 	and.w	r2, r3, #15
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	429a      	cmp	r2, r3
 8009c1c:	d901      	bls.n	8009c22 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e042      	b.n	8009ca8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009c22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	da0f      	bge.n	8009c4a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009c2a:	78fb      	ldrb	r3, [r7, #3]
 8009c2c:	f003 020f 	and.w	r2, r3, #15
 8009c30:	4613      	mov	r3, r2
 8009c32:	00db      	lsls	r3, r3, #3
 8009c34:	1a9b      	subs	r3, r3, r2
 8009c36:	009b      	lsls	r3, r3, #2
 8009c38:	3338      	adds	r3, #56	; 0x38
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3304      	adds	r3, #4
 8009c40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	705a      	strb	r2, [r3, #1]
 8009c48:	e00f      	b.n	8009c6a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009c4a:	78fb      	ldrb	r3, [r7, #3]
 8009c4c:	f003 020f 	and.w	r2, r3, #15
 8009c50:	4613      	mov	r3, r2
 8009c52:	00db      	lsls	r3, r3, #3
 8009c54:	1a9b      	subs	r3, r3, r2
 8009c56:	009b      	lsls	r3, r3, #2
 8009c58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	4413      	add	r3, r2
 8009c60:	3304      	adds	r3, #4
 8009c62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2200      	movs	r2, #0
 8009c68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009c70:	78fb      	ldrb	r3, [r7, #3]
 8009c72:	f003 030f 	and.w	r3, r3, #15
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_PCD_EP_ClrStall+0x86>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e00e      	b.n	8009ca8 <HAL_PCD_EP_ClrStall+0xa4>
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	68f9      	ldr	r1, [r7, #12]
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f006 ff69 	bl	8010b70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3710      	adds	r7, #16
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b08a      	sub	sp, #40	; 0x28
 8009cb4:	af02      	add	r7, sp, #8
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	00db      	lsls	r3, r3, #3
 8009cca:	1a9b      	subs	r3, r3, r2
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	3338      	adds	r3, #56	; 0x38
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	699a      	ldr	r2, [r3, #24]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	429a      	cmp	r2, r3
 8009ce2:	d901      	bls.n	8009ce8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009ce4:	2301      	movs	r3, #1
 8009ce6:	e06c      	b.n	8009dc2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	695a      	ldr	r2, [r3, #20]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	1ad3      	subs	r3, r2, r3
 8009cf2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	689b      	ldr	r3, [r3, #8]
 8009cf8:	69fa      	ldr	r2, [r7, #28]
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d902      	bls.n	8009d04 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009d04:	69fb      	ldr	r3, [r7, #28]
 8009d06:	3303      	adds	r3, #3
 8009d08:	089b      	lsrs	r3, r3, #2
 8009d0a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d0c:	e02b      	b.n	8009d66 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	695a      	ldr	r2, [r3, #20]
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	699b      	ldr	r3, [r3, #24]
 8009d16:	1ad3      	subs	r3, r2, r3
 8009d18:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	69fa      	ldr	r2, [r7, #28]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d902      	bls.n	8009d2a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009d2a:	69fb      	ldr	r3, [r7, #28]
 8009d2c:	3303      	adds	r3, #3
 8009d2e:	089b      	lsrs	r3, r3, #2
 8009d30:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	68d9      	ldr	r1, [r3, #12]
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	69fb      	ldr	r3, [r7, #28]
 8009d3c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009d42:	b2db      	uxtb	r3, r3
 8009d44:	9300      	str	r3, [sp, #0]
 8009d46:	4603      	mov	r3, r0
 8009d48:	6978      	ldr	r0, [r7, #20]
 8009d4a:	f006 fe45 	bl	80109d8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	68da      	ldr	r2, [r3, #12]
 8009d52:	69fb      	ldr	r3, [r7, #28]
 8009d54:	441a      	add	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	699a      	ldr	r2, [r3, #24]
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	441a      	add	r2, r3
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	015a      	lsls	r2, r3, #5
 8009d6a:	693b      	ldr	r3, [r7, #16]
 8009d6c:	4413      	add	r3, r2
 8009d6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009d72:	699b      	ldr	r3, [r3, #24]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	69ba      	ldr	r2, [r7, #24]
 8009d78:	429a      	cmp	r2, r3
 8009d7a:	d809      	bhi.n	8009d90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	699a      	ldr	r2, [r3, #24]
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009d84:	429a      	cmp	r2, r3
 8009d86:	d203      	bcs.n	8009d90 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	695b      	ldr	r3, [r3, #20]
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1be      	bne.n	8009d0e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	695a      	ldr	r2, [r3, #20]
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	699b      	ldr	r3, [r3, #24]
 8009d98:	429a      	cmp	r2, r3
 8009d9a:	d811      	bhi.n	8009dc0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	f003 030f 	and.w	r3, r3, #15
 8009da2:	2201      	movs	r2, #1
 8009da4:	fa02 f303 	lsl.w	r3, r2, r3
 8009da8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009db2:	68bb      	ldr	r3, [r7, #8]
 8009db4:	43db      	mvns	r3, r3
 8009db6:	6939      	ldr	r1, [r7, #16]
 8009db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009dbc:	4013      	ands	r3, r2
 8009dbe:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009dc0:	2300      	movs	r3, #0
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3720      	adds	r7, #32
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
	...

08009dcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b086      	sub	sp, #24
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	333c      	adds	r3, #60	; 0x3c
 8009de4:	3304      	adds	r3, #4
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	015a      	lsls	r2, r3, #5
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	4413      	add	r3, r2
 8009df2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df6:	689b      	ldr	r3, [r3, #8]
 8009df8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	f040 80a0 	bne.w	8009f44 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	f003 0308 	and.w	r3, r3, #8
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d015      	beq.n	8009e3a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	4a72      	ldr	r2, [pc, #456]	; (8009fdc <PCD_EP_OutXfrComplete_int+0x210>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	f240 80dd 	bls.w	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e18:	68bb      	ldr	r3, [r7, #8]
 8009e1a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80d7 	beq.w	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	015a      	lsls	r2, r3, #5
 8009e28:	693b      	ldr	r3, [r7, #16]
 8009e2a:	4413      	add	r3, r2
 8009e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e30:	461a      	mov	r2, r3
 8009e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e36:	6093      	str	r3, [r2, #8]
 8009e38:	e0cb      	b.n	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	f003 0320 	and.w	r3, r3, #32
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d009      	beq.n	8009e58 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e50:	461a      	mov	r2, r3
 8009e52:	2320      	movs	r3, #32
 8009e54:	6093      	str	r3, [r2, #8]
 8009e56:	e0bc      	b.n	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009e58:	68bb      	ldr	r3, [r7, #8]
 8009e5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	f040 80b7 	bne.w	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	4a5d      	ldr	r2, [pc, #372]	; (8009fdc <PCD_EP_OutXfrComplete_int+0x210>)
 8009e68:	4293      	cmp	r3, r2
 8009e6a:	d90f      	bls.n	8009e8c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d00a      	beq.n	8009e8c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	015a      	lsls	r2, r3, #5
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	4413      	add	r3, r2
 8009e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e82:	461a      	mov	r2, r3
 8009e84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e88:	6093      	str	r3, [r2, #8]
 8009e8a:	e0a2      	b.n	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009e8c:	6879      	ldr	r1, [r7, #4]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	4613      	mov	r3, r2
 8009e92:	00db      	lsls	r3, r3, #3
 8009e94:	1a9b      	subs	r3, r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	440b      	add	r3, r1
 8009e9a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009e9e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	0159      	lsls	r1, r3, #5
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	440b      	add	r3, r1
 8009ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009eb2:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	00db      	lsls	r3, r3, #3
 8009ebc:	1a9b      	subs	r3, r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4403      	add	r3, r0
 8009ec2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009ec6:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009ec8:	6879      	ldr	r1, [r7, #4]
 8009eca:	683a      	ldr	r2, [r7, #0]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	00db      	lsls	r3, r3, #3
 8009ed0:	1a9b      	subs	r3, r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	440b      	add	r3, r1
 8009ed6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009eda:	6819      	ldr	r1, [r3, #0]
 8009edc:	6878      	ldr	r0, [r7, #4]
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	4613      	mov	r3, r2
 8009ee2:	00db      	lsls	r3, r3, #3
 8009ee4:	1a9b      	subs	r3, r3, r2
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	4403      	add	r3, r0
 8009eea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	4419      	add	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	683a      	ldr	r2, [r7, #0]
 8009ef6:	4613      	mov	r3, r2
 8009ef8:	00db      	lsls	r3, r3, #3
 8009efa:	1a9b      	subs	r3, r3, r2
 8009efc:	009b      	lsls	r3, r3, #2
 8009efe:	4403      	add	r3, r0
 8009f00:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009f04:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d114      	bne.n	8009f36 <PCD_EP_OutXfrComplete_int+0x16a>
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	683a      	ldr	r2, [r7, #0]
 8009f10:	4613      	mov	r3, r2
 8009f12:	00db      	lsls	r3, r3, #3
 8009f14:	1a9b      	subs	r3, r3, r2
 8009f16:	009b      	lsls	r3, r3, #2
 8009f18:	440b      	add	r3, r1
 8009f1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d108      	bne.n	8009f36 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6818      	ldr	r0, [r3, #0]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009f2e:	461a      	mov	r2, r3
 8009f30:	2101      	movs	r1, #1
 8009f32:	f006 ff9f 	bl	8010e74 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f36:	683b      	ldr	r3, [r7, #0]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	4619      	mov	r1, r3
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f010 f855 	bl	8019fec <HAL_PCD_DataOutStageCallback>
 8009f42:	e046      	b.n	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4a26      	ldr	r2, [pc, #152]	; (8009fe0 <PCD_EP_OutXfrComplete_int+0x214>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d124      	bne.n	8009f96 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d00a      	beq.n	8009f6c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009f56:	683b      	ldr	r3, [r7, #0]
 8009f58:	015a      	lsls	r2, r3, #5
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	4413      	add	r3, r2
 8009f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f62:	461a      	mov	r2, r3
 8009f64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f68:	6093      	str	r3, [r2, #8]
 8009f6a:	e032      	b.n	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	f003 0320 	and.w	r3, r3, #32
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d008      	beq.n	8009f88 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	015a      	lsls	r2, r3, #5
 8009f7a:	693b      	ldr	r3, [r7, #16]
 8009f7c:	4413      	add	r3, r2
 8009f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f82:	461a      	mov	r2, r3
 8009f84:	2320      	movs	r3, #32
 8009f86:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f010 f82c 	bl	8019fec <HAL_PCD_DataOutStageCallback>
 8009f94:	e01d      	b.n	8009fd2 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d114      	bne.n	8009fc6 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009f9c:	6879      	ldr	r1, [r7, #4]
 8009f9e:	683a      	ldr	r2, [r7, #0]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	00db      	lsls	r3, r3, #3
 8009fa4:	1a9b      	subs	r3, r3, r2
 8009fa6:	009b      	lsls	r3, r3, #2
 8009fa8:	440b      	add	r3, r1
 8009faa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d108      	bne.n	8009fc6 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	2100      	movs	r1, #0
 8009fc2:	f006 ff57 	bl	8010e74 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	b2db      	uxtb	r3, r3
 8009fca:	4619      	mov	r1, r3
 8009fcc:	6878      	ldr	r0, [r7, #4]
 8009fce:	f010 f80d 	bl	8019fec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009fd2:	2300      	movs	r3, #0
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3718      	adds	r7, #24
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}
 8009fdc:	4f54300a 	.word	0x4f54300a
 8009fe0:	4f54310a 	.word	0x4f54310a

08009fe4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b086      	sub	sp, #24
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	6078      	str	r0, [r7, #4]
 8009fec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	333c      	adds	r3, #60	; 0x3c
 8009ffc:	3304      	adds	r3, #4
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	015a      	lsls	r2, r3, #5
 800a006:	693b      	ldr	r3, [r7, #16]
 800a008:	4413      	add	r3, r2
 800a00a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	4a15      	ldr	r2, [pc, #84]	; (800a06c <PCD_EP_OutSetupPacket_int+0x88>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d90e      	bls.n	800a038 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800a01a:	68bb      	ldr	r3, [r7, #8]
 800a01c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800a020:	2b00      	cmp	r3, #0
 800a022:	d009      	beq.n	800a038 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	015a      	lsls	r2, r3, #5
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	4413      	add	r3, r2
 800a02c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a030:	461a      	mov	r2, r3
 800a032:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a036:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f00f ffc5 	bl	8019fc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	4a0a      	ldr	r2, [pc, #40]	; (800a06c <PCD_EP_OutSetupPacket_int+0x88>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d90c      	bls.n	800a060 <PCD_EP_OutSetupPacket_int+0x7c>
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d108      	bne.n	800a060 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800a058:	461a      	mov	r2, r3
 800a05a:	2101      	movs	r1, #1
 800a05c:	f006 ff0a 	bl	8010e74 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800a060:	2300      	movs	r3, #0
}
 800a062:	4618      	mov	r0, r3
 800a064:	3718      	adds	r7, #24
 800a066:	46bd      	mov	sp, r7
 800a068:	bd80      	pop	{r7, pc}
 800a06a:	bf00      	nop
 800a06c:	4f54300a 	.word	0x4f54300a

0800a070 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800a070:	b480      	push	{r7}
 800a072:	b085      	sub	sp, #20
 800a074:	af00      	add	r7, sp, #0
 800a076:	6078      	str	r0, [r7, #4]
 800a078:	460b      	mov	r3, r1
 800a07a:	70fb      	strb	r3, [r7, #3]
 800a07c:	4613      	mov	r3, r2
 800a07e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a086:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800a088:	78fb      	ldrb	r3, [r7, #3]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d107      	bne.n	800a09e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800a08e:	883b      	ldrh	r3, [r7, #0]
 800a090:	0419      	lsls	r1, r3, #16
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68ba      	ldr	r2, [r7, #8]
 800a098:	430a      	orrs	r2, r1
 800a09a:	629a      	str	r2, [r3, #40]	; 0x28
 800a09c:	e028      	b.n	800a0f0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0a4:	0c1b      	lsrs	r3, r3, #16
 800a0a6:	68ba      	ldr	r2, [r7, #8]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
 800a0b0:	e00d      	b.n	800a0ce <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	7bfb      	ldrb	r3, [r7, #15]
 800a0b8:	3340      	adds	r3, #64	; 0x40
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	4413      	add	r3, r2
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	0c1b      	lsrs	r3, r3, #16
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800a0c8:	7bfb      	ldrb	r3, [r7, #15]
 800a0ca:	3301      	adds	r3, #1
 800a0cc:	73fb      	strb	r3, [r7, #15]
 800a0ce:	7bfa      	ldrb	r2, [r7, #15]
 800a0d0:	78fb      	ldrb	r3, [r7, #3]
 800a0d2:	3b01      	subs	r3, #1
 800a0d4:	429a      	cmp	r2, r3
 800a0d6:	d3ec      	bcc.n	800a0b2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800a0d8:	883b      	ldrh	r3, [r7, #0]
 800a0da:	0418      	lsls	r0, r3, #16
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	6819      	ldr	r1, [r3, #0]
 800a0e0:	78fb      	ldrb	r3, [r7, #3]
 800a0e2:	3b01      	subs	r3, #1
 800a0e4:	68ba      	ldr	r2, [r7, #8]
 800a0e6:	4302      	orrs	r2, r0
 800a0e8:	3340      	adds	r3, #64	; 0x40
 800a0ea:	009b      	lsls	r3, r3, #2
 800a0ec:	440b      	add	r3, r1
 800a0ee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3714      	adds	r7, #20
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
 800a106:	460b      	mov	r3, r1
 800a108:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	887a      	ldrh	r2, [r7, #2]
 800a110:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a112:	2300      	movs	r3, #0
}
 800a114:	4618      	mov	r0, r3
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800a120:	b480      	push	{r7}
 800a122:	b085      	sub	sp, #20
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a14e:	4b05      	ldr	r3, [pc, #20]	; (800a164 <HAL_PCDEx_ActivateLPM+0x44>)
 800a150:	4313      	orrs	r3, r2
 800a152:	68fa      	ldr	r2, [r7, #12]
 800a154:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800a156:	2300      	movs	r3, #0
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3714      	adds	r7, #20
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	10000003 	.word	0x10000003

0800a168 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b086      	sub	sp, #24
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800a170:	2300      	movs	r3, #0
 800a172:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d101      	bne.n	800a17e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800a17a:	2301      	movs	r3, #1
 800a17c:	e291      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f003 0301 	and.w	r3, r3, #1
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 8087 	beq.w	800a29a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800a18c:	4b96      	ldr	r3, [pc, #600]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	f003 030c 	and.w	r3, r3, #12
 800a194:	2b04      	cmp	r3, #4
 800a196:	d00c      	beq.n	800a1b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a198:	4b93      	ldr	r3, [pc, #588]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	f003 030c 	and.w	r3, r3, #12
 800a1a0:	2b08      	cmp	r3, #8
 800a1a2:	d112      	bne.n	800a1ca <HAL_RCC_OscConfig+0x62>
 800a1a4:	4b90      	ldr	r3, [pc, #576]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a1ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a1b0:	d10b      	bne.n	800a1ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a1b2:	4b8d      	ldr	r3, [pc, #564]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d06c      	beq.n	800a298 <HAL_RCC_OscConfig+0x130>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d168      	bne.n	800a298 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e26b      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1d2:	d106      	bne.n	800a1e2 <HAL_RCC_OscConfig+0x7a>
 800a1d4:	4b84      	ldr	r3, [pc, #528]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	4a83      	ldr	r2, [pc, #524]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1de:	6013      	str	r3, [r2, #0]
 800a1e0:	e02e      	b.n	800a240 <HAL_RCC_OscConfig+0xd8>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d10c      	bne.n	800a204 <HAL_RCC_OscConfig+0x9c>
 800a1ea:	4b7f      	ldr	r3, [pc, #508]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a7e      	ldr	r2, [pc, #504]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	4b7c      	ldr	r3, [pc, #496]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	4a7b      	ldr	r2, [pc, #492]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a1fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	e01d      	b.n	800a240 <HAL_RCC_OscConfig+0xd8>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a20c:	d10c      	bne.n	800a228 <HAL_RCC_OscConfig+0xc0>
 800a20e:	4b76      	ldr	r3, [pc, #472]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a75      	ldr	r2, [pc, #468]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a218:	6013      	str	r3, [r2, #0]
 800a21a:	4b73      	ldr	r3, [pc, #460]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	4a72      	ldr	r2, [pc, #456]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a224:	6013      	str	r3, [r2, #0]
 800a226:	e00b      	b.n	800a240 <HAL_RCC_OscConfig+0xd8>
 800a228:	4b6f      	ldr	r3, [pc, #444]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a6e      	ldr	r2, [pc, #440]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a22e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a232:	6013      	str	r3, [r2, #0]
 800a234:	4b6c      	ldr	r3, [pc, #432]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a6b      	ldr	r2, [pc, #428]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a23a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a23e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d013      	beq.n	800a270 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a248:	f7fd fa56 	bl	80076f8 <HAL_GetTick>
 800a24c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a24e:	e008      	b.n	800a262 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a250:	f7fd fa52 	bl	80076f8 <HAL_GetTick>
 800a254:	4602      	mov	r2, r0
 800a256:	693b      	ldr	r3, [r7, #16]
 800a258:	1ad3      	subs	r3, r2, r3
 800a25a:	2b64      	cmp	r3, #100	; 0x64
 800a25c:	d901      	bls.n	800a262 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a25e:	2303      	movs	r3, #3
 800a260:	e21f      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a262:	4b61      	ldr	r3, [pc, #388]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d0f0      	beq.n	800a250 <HAL_RCC_OscConfig+0xe8>
 800a26e:	e014      	b.n	800a29a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a270:	f7fd fa42 	bl	80076f8 <HAL_GetTick>
 800a274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a276:	e008      	b.n	800a28a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a278:	f7fd fa3e 	bl	80076f8 <HAL_GetTick>
 800a27c:	4602      	mov	r2, r0
 800a27e:	693b      	ldr	r3, [r7, #16]
 800a280:	1ad3      	subs	r3, r2, r3
 800a282:	2b64      	cmp	r3, #100	; 0x64
 800a284:	d901      	bls.n	800a28a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a286:	2303      	movs	r3, #3
 800a288:	e20b      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a28a:	4b57      	ldr	r3, [pc, #348]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d1f0      	bne.n	800a278 <HAL_RCC_OscConfig+0x110>
 800a296:	e000      	b.n	800a29a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f003 0302 	and.w	r3, r3, #2
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d069      	beq.n	800a37a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a2a6:	4b50      	ldr	r3, [pc, #320]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a2a8:	689b      	ldr	r3, [r3, #8]
 800a2aa:	f003 030c 	and.w	r3, r3, #12
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d00b      	beq.n	800a2ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a2b2:	4b4d      	ldr	r3, [pc, #308]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f003 030c 	and.w	r3, r3, #12
 800a2ba:	2b08      	cmp	r3, #8
 800a2bc:	d11c      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x190>
 800a2be:	4b4a      	ldr	r3, [pc, #296]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d116      	bne.n	800a2f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2ca:	4b47      	ldr	r3, [pc, #284]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f003 0302 	and.w	r3, r3, #2
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d005      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x17a>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68db      	ldr	r3, [r3, #12]
 800a2da:	2b01      	cmp	r3, #1
 800a2dc:	d001      	beq.n	800a2e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a2de:	2301      	movs	r3, #1
 800a2e0:	e1df      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a2e2:	4b41      	ldr	r3, [pc, #260]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	691b      	ldr	r3, [r3, #16]
 800a2ee:	00db      	lsls	r3, r3, #3
 800a2f0:	493d      	ldr	r1, [pc, #244]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a2f6:	e040      	b.n	800a37a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68db      	ldr	r3, [r3, #12]
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d023      	beq.n	800a348 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a300:	4b39      	ldr	r3, [pc, #228]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	4a38      	ldr	r2, [pc, #224]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a306:	f043 0301 	orr.w	r3, r3, #1
 800a30a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a30c:	f7fd f9f4 	bl	80076f8 <HAL_GetTick>
 800a310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a312:	e008      	b.n	800a326 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a314:	f7fd f9f0 	bl	80076f8 <HAL_GetTick>
 800a318:	4602      	mov	r2, r0
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	1ad3      	subs	r3, r2, r3
 800a31e:	2b02      	cmp	r3, #2
 800a320:	d901      	bls.n	800a326 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a322:	2303      	movs	r3, #3
 800a324:	e1bd      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a326:	4b30      	ldr	r3, [pc, #192]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f003 0302 	and.w	r3, r3, #2
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d0f0      	beq.n	800a314 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a332:	4b2d      	ldr	r3, [pc, #180]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	691b      	ldr	r3, [r3, #16]
 800a33e:	00db      	lsls	r3, r3, #3
 800a340:	4929      	ldr	r1, [pc, #164]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a342:	4313      	orrs	r3, r2
 800a344:	600b      	str	r3, [r1, #0]
 800a346:	e018      	b.n	800a37a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a348:	4b27      	ldr	r3, [pc, #156]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4a26      	ldr	r2, [pc, #152]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a34e:	f023 0301 	bic.w	r3, r3, #1
 800a352:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a354:	f7fd f9d0 	bl	80076f8 <HAL_GetTick>
 800a358:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a35a:	e008      	b.n	800a36e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a35c:	f7fd f9cc 	bl	80076f8 <HAL_GetTick>
 800a360:	4602      	mov	r2, r0
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	1ad3      	subs	r3, r2, r3
 800a366:	2b02      	cmp	r3, #2
 800a368:	d901      	bls.n	800a36e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a36a:	2303      	movs	r3, #3
 800a36c:	e199      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a36e:	4b1e      	ldr	r3, [pc, #120]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	f003 0302 	and.w	r3, r3, #2
 800a376:	2b00      	cmp	r3, #0
 800a378:	d1f0      	bne.n	800a35c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 0308 	and.w	r3, r3, #8
 800a382:	2b00      	cmp	r3, #0
 800a384:	d038      	beq.n	800a3f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	695b      	ldr	r3, [r3, #20]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d019      	beq.n	800a3c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a38e:	4b16      	ldr	r3, [pc, #88]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a390:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a392:	4a15      	ldr	r2, [pc, #84]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a394:	f043 0301 	orr.w	r3, r3, #1
 800a398:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a39a:	f7fd f9ad 	bl	80076f8 <HAL_GetTick>
 800a39e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3a0:	e008      	b.n	800a3b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3a2:	f7fd f9a9 	bl	80076f8 <HAL_GetTick>
 800a3a6:	4602      	mov	r2, r0
 800a3a8:	693b      	ldr	r3, [r7, #16]
 800a3aa:	1ad3      	subs	r3, r2, r3
 800a3ac:	2b02      	cmp	r3, #2
 800a3ae:	d901      	bls.n	800a3b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a3b0:	2303      	movs	r3, #3
 800a3b2:	e176      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a3b4:	4b0c      	ldr	r3, [pc, #48]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a3b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3b8:	f003 0302 	and.w	r3, r3, #2
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d0f0      	beq.n	800a3a2 <HAL_RCC_OscConfig+0x23a>
 800a3c0:	e01a      	b.n	800a3f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3c2:	4b09      	ldr	r3, [pc, #36]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a3c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3c6:	4a08      	ldr	r2, [pc, #32]	; (800a3e8 <HAL_RCC_OscConfig+0x280>)
 800a3c8:	f023 0301 	bic.w	r3, r3, #1
 800a3cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3ce:	f7fd f993 	bl	80076f8 <HAL_GetTick>
 800a3d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3d4:	e00a      	b.n	800a3ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3d6:	f7fd f98f 	bl	80076f8 <HAL_GetTick>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	1ad3      	subs	r3, r2, r3
 800a3e0:	2b02      	cmp	r3, #2
 800a3e2:	d903      	bls.n	800a3ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a3e4:	2303      	movs	r3, #3
 800a3e6:	e15c      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
 800a3e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a3ec:	4b91      	ldr	r3, [pc, #580]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d1ee      	bne.n	800a3d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	f000 80a4 	beq.w	800a54e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a406:	4b8b      	ldr	r3, [pc, #556]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a40a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d10d      	bne.n	800a42e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a412:	4b88      	ldr	r3, [pc, #544]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a416:	4a87      	ldr	r2, [pc, #540]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a41c:	6413      	str	r3, [r2, #64]	; 0x40
 800a41e:	4b85      	ldr	r3, [pc, #532]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a426:	60bb      	str	r3, [r7, #8]
 800a428:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a42a:	2301      	movs	r3, #1
 800a42c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a42e:	4b82      	ldr	r3, [pc, #520]	; (800a638 <HAL_RCC_OscConfig+0x4d0>)
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a436:	2b00      	cmp	r3, #0
 800a438:	d118      	bne.n	800a46c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a43a:	4b7f      	ldr	r3, [pc, #508]	; (800a638 <HAL_RCC_OscConfig+0x4d0>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a7e      	ldr	r2, [pc, #504]	; (800a638 <HAL_RCC_OscConfig+0x4d0>)
 800a440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a444:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a446:	f7fd f957 	bl	80076f8 <HAL_GetTick>
 800a44a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a44c:	e008      	b.n	800a460 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a44e:	f7fd f953 	bl	80076f8 <HAL_GetTick>
 800a452:	4602      	mov	r2, r0
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	1ad3      	subs	r3, r2, r3
 800a458:	2b64      	cmp	r3, #100	; 0x64
 800a45a:	d901      	bls.n	800a460 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e120      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a460:	4b75      	ldr	r3, [pc, #468]	; (800a638 <HAL_RCC_OscConfig+0x4d0>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d0f0      	beq.n	800a44e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	2b01      	cmp	r3, #1
 800a472:	d106      	bne.n	800a482 <HAL_RCC_OscConfig+0x31a>
 800a474:	4b6f      	ldr	r3, [pc, #444]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a478:	4a6e      	ldr	r2, [pc, #440]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a47a:	f043 0301 	orr.w	r3, r3, #1
 800a47e:	6713      	str	r3, [r2, #112]	; 0x70
 800a480:	e02d      	b.n	800a4de <HAL_RCC_OscConfig+0x376>
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d10c      	bne.n	800a4a4 <HAL_RCC_OscConfig+0x33c>
 800a48a:	4b6a      	ldr	r3, [pc, #424]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a48e:	4a69      	ldr	r2, [pc, #420]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a490:	f023 0301 	bic.w	r3, r3, #1
 800a494:	6713      	str	r3, [r2, #112]	; 0x70
 800a496:	4b67      	ldr	r3, [pc, #412]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a49a:	4a66      	ldr	r2, [pc, #408]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a49c:	f023 0304 	bic.w	r3, r3, #4
 800a4a0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4a2:	e01c      	b.n	800a4de <HAL_RCC_OscConfig+0x376>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	2b05      	cmp	r3, #5
 800a4aa:	d10c      	bne.n	800a4c6 <HAL_RCC_OscConfig+0x35e>
 800a4ac:	4b61      	ldr	r3, [pc, #388]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4b0:	4a60      	ldr	r2, [pc, #384]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4b2:	f043 0304 	orr.w	r3, r3, #4
 800a4b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a4b8:	4b5e      	ldr	r3, [pc, #376]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4bc:	4a5d      	ldr	r2, [pc, #372]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4be:	f043 0301 	orr.w	r3, r3, #1
 800a4c2:	6713      	str	r3, [r2, #112]	; 0x70
 800a4c4:	e00b      	b.n	800a4de <HAL_RCC_OscConfig+0x376>
 800a4c6:	4b5b      	ldr	r3, [pc, #364]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ca:	4a5a      	ldr	r2, [pc, #360]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4cc:	f023 0301 	bic.w	r3, r3, #1
 800a4d0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4d2:	4b58      	ldr	r3, [pc, #352]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4d6:	4a57      	ldr	r2, [pc, #348]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a4d8:	f023 0304 	bic.w	r3, r3, #4
 800a4dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d015      	beq.n	800a512 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a4e6:	f7fd f907 	bl	80076f8 <HAL_GetTick>
 800a4ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4ec:	e00a      	b.n	800a504 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a4ee:	f7fd f903 	bl	80076f8 <HAL_GetTick>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d901      	bls.n	800a504 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a500:	2303      	movs	r3, #3
 800a502:	e0ce      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a504:	4b4b      	ldr	r3, [pc, #300]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a508:	f003 0302 	and.w	r3, r3, #2
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d0ee      	beq.n	800a4ee <HAL_RCC_OscConfig+0x386>
 800a510:	e014      	b.n	800a53c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a512:	f7fd f8f1 	bl	80076f8 <HAL_GetTick>
 800a516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a518:	e00a      	b.n	800a530 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a51a:	f7fd f8ed 	bl	80076f8 <HAL_GetTick>
 800a51e:	4602      	mov	r2, r0
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	1ad3      	subs	r3, r2, r3
 800a524:	f241 3288 	movw	r2, #5000	; 0x1388
 800a528:	4293      	cmp	r3, r2
 800a52a:	d901      	bls.n	800a530 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a52c:	2303      	movs	r3, #3
 800a52e:	e0b8      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a530:	4b40      	ldr	r3, [pc, #256]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a534:	f003 0302 	and.w	r3, r3, #2
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d1ee      	bne.n	800a51a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a53c:	7dfb      	ldrb	r3, [r7, #23]
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d105      	bne.n	800a54e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a542:	4b3c      	ldr	r3, [pc, #240]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a546:	4a3b      	ldr	r2, [pc, #236]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a548:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a54c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	699b      	ldr	r3, [r3, #24]
 800a552:	2b00      	cmp	r3, #0
 800a554:	f000 80a4 	beq.w	800a6a0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a558:	4b36      	ldr	r3, [pc, #216]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a55a:	689b      	ldr	r3, [r3, #8]
 800a55c:	f003 030c 	and.w	r3, r3, #12
 800a560:	2b08      	cmp	r3, #8
 800a562:	d06b      	beq.n	800a63c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	699b      	ldr	r3, [r3, #24]
 800a568:	2b02      	cmp	r3, #2
 800a56a:	d149      	bne.n	800a600 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a56c:	4b31      	ldr	r3, [pc, #196]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a30      	ldr	r2, [pc, #192]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a572:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a576:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a578:	f7fd f8be 	bl	80076f8 <HAL_GetTick>
 800a57c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a57e:	e008      	b.n	800a592 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a580:	f7fd f8ba 	bl	80076f8 <HAL_GetTick>
 800a584:	4602      	mov	r2, r0
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	1ad3      	subs	r3, r2, r3
 800a58a:	2b02      	cmp	r3, #2
 800a58c:	d901      	bls.n	800a592 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a58e:	2303      	movs	r3, #3
 800a590:	e087      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a592:	4b28      	ldr	r3, [pc, #160]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d1f0      	bne.n	800a580 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	69da      	ldr	r2, [r3, #28]
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	431a      	orrs	r2, r3
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ac:	019b      	lsls	r3, r3, #6
 800a5ae:	431a      	orrs	r2, r3
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5b4:	085b      	lsrs	r3, r3, #1
 800a5b6:	3b01      	subs	r3, #1
 800a5b8:	041b      	lsls	r3, r3, #16
 800a5ba:	431a      	orrs	r2, r3
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5c0:	061b      	lsls	r3, r3, #24
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	4a1b      	ldr	r2, [pc, #108]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a5c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a5ca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a5cc:	4b19      	ldr	r3, [pc, #100]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	4a18      	ldr	r2, [pc, #96]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a5d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a5d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d8:	f7fd f88e 	bl	80076f8 <HAL_GetTick>
 800a5dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5de:	e008      	b.n	800a5f2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e0:	f7fd f88a 	bl	80076f8 <HAL_GetTick>
 800a5e4:	4602      	mov	r2, r0
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	1ad3      	subs	r3, r2, r3
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d901      	bls.n	800a5f2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a5ee:	2303      	movs	r3, #3
 800a5f0:	e057      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5f2:	4b10      	ldr	r3, [pc, #64]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0f0      	beq.n	800a5e0 <HAL_RCC_OscConfig+0x478>
 800a5fe:	e04f      	b.n	800a6a0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a600:	4b0c      	ldr	r3, [pc, #48]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a0b      	ldr	r2, [pc, #44]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a60a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a60c:	f7fd f874 	bl	80076f8 <HAL_GetTick>
 800a610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a612:	e008      	b.n	800a626 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a614:	f7fd f870 	bl	80076f8 <HAL_GetTick>
 800a618:	4602      	mov	r2, r0
 800a61a:	693b      	ldr	r3, [r7, #16]
 800a61c:	1ad3      	subs	r3, r2, r3
 800a61e:	2b02      	cmp	r3, #2
 800a620:	d901      	bls.n	800a626 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a622:	2303      	movs	r3, #3
 800a624:	e03d      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a626:	4b03      	ldr	r3, [pc, #12]	; (800a634 <HAL_RCC_OscConfig+0x4cc>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1f0      	bne.n	800a614 <HAL_RCC_OscConfig+0x4ac>
 800a632:	e035      	b.n	800a6a0 <HAL_RCC_OscConfig+0x538>
 800a634:	40023800 	.word	0x40023800
 800a638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a63c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <HAL_RCC_OscConfig+0x544>)
 800a63e:	685b      	ldr	r3, [r3, #4]
 800a640:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	699b      	ldr	r3, [r3, #24]
 800a646:	2b01      	cmp	r3, #1
 800a648:	d028      	beq.n	800a69c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a654:	429a      	cmp	r2, r3
 800a656:	d121      	bne.n	800a69c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a662:	429a      	cmp	r2, r3
 800a664:	d11a      	bne.n	800a69c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a666:	68fa      	ldr	r2, [r7, #12]
 800a668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a66c:	4013      	ands	r3, r2
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a672:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a674:	4293      	cmp	r3, r2
 800a676:	d111      	bne.n	800a69c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a682:	085b      	lsrs	r3, r3, #1
 800a684:	3b01      	subs	r3, #1
 800a686:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a688:	429a      	cmp	r2, r3
 800a68a:	d107      	bne.n	800a69c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a696:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a698:	429a      	cmp	r2, r3
 800a69a:	d001      	beq.n	800a6a0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	e000      	b.n	800a6a2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a6a0:	2300      	movs	r3, #0
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3718      	adds	r7, #24
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}
 800a6aa:	bf00      	nop
 800a6ac:	40023800 	.word	0x40023800

0800a6b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
 800a6b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d101      	bne.n	800a6c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	e0d0      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a6c8:	4b6a      	ldr	r3, [pc, #424]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f003 030f 	and.w	r3, r3, #15
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	429a      	cmp	r2, r3
 800a6d4:	d910      	bls.n	800a6f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6d6:	4b67      	ldr	r3, [pc, #412]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f023 020f 	bic.w	r2, r3, #15
 800a6de:	4965      	ldr	r1, [pc, #404]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6e0:	683b      	ldr	r3, [r7, #0]
 800a6e2:	4313      	orrs	r3, r2
 800a6e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6e6:	4b63      	ldr	r3, [pc, #396]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f003 030f 	and.w	r3, r3, #15
 800a6ee:	683a      	ldr	r2, [r7, #0]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d001      	beq.n	800a6f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e0b8      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	f003 0302 	and.w	r3, r3, #2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d020      	beq.n	800a746 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f003 0304 	and.w	r3, r3, #4
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d005      	beq.n	800a71c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a710:	4b59      	ldr	r3, [pc, #356]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	4a58      	ldr	r2, [pc, #352]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a716:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a71a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	f003 0308 	and.w	r3, r3, #8
 800a724:	2b00      	cmp	r3, #0
 800a726:	d005      	beq.n	800a734 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a728:	4b53      	ldr	r3, [pc, #332]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	4a52      	ldr	r2, [pc, #328]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a72e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a732:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a734:	4b50      	ldr	r3, [pc, #320]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a736:	689b      	ldr	r3, [r3, #8]
 800a738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	494d      	ldr	r1, [pc, #308]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a742:	4313      	orrs	r3, r2
 800a744:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d040      	beq.n	800a7d4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	2b01      	cmp	r3, #1
 800a758:	d107      	bne.n	800a76a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a75a:	4b47      	ldr	r3, [pc, #284]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a762:	2b00      	cmp	r3, #0
 800a764:	d115      	bne.n	800a792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a766:	2301      	movs	r3, #1
 800a768:	e07f      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	2b02      	cmp	r3, #2
 800a770:	d107      	bne.n	800a782 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a772:	4b41      	ldr	r3, [pc, #260]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d109      	bne.n	800a792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e073      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a782:	4b3d      	ldr	r3, [pc, #244]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f003 0302 	and.w	r3, r3, #2
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d101      	bne.n	800a792 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a78e:	2301      	movs	r3, #1
 800a790:	e06b      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a792:	4b39      	ldr	r3, [pc, #228]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a794:	689b      	ldr	r3, [r3, #8]
 800a796:	f023 0203 	bic.w	r2, r3, #3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	4936      	ldr	r1, [pc, #216]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a7a4:	f7fc ffa8 	bl	80076f8 <HAL_GetTick>
 800a7a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7aa:	e00a      	b.n	800a7c2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a7ac:	f7fc ffa4 	bl	80076f8 <HAL_GetTick>
 800a7b0:	4602      	mov	r2, r0
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	1ad3      	subs	r3, r2, r3
 800a7b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ba:	4293      	cmp	r3, r2
 800a7bc:	d901      	bls.n	800a7c2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	e053      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a7c2:	4b2d      	ldr	r3, [pc, #180]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a7c4:	689b      	ldr	r3, [r3, #8]
 800a7c6:	f003 020c 	and.w	r2, r3, #12
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	009b      	lsls	r3, r3, #2
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d1eb      	bne.n	800a7ac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a7d4:	4b27      	ldr	r3, [pc, #156]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f003 030f 	and.w	r3, r3, #15
 800a7dc:	683a      	ldr	r2, [r7, #0]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d210      	bcs.n	800a804 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7e2:	4b24      	ldr	r3, [pc, #144]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f023 020f 	bic.w	r2, r3, #15
 800a7ea:	4922      	ldr	r1, [pc, #136]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7f2:	4b20      	ldr	r3, [pc, #128]	; (800a874 <HAL_RCC_ClockConfig+0x1c4>)
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f003 030f 	and.w	r3, r3, #15
 800a7fa:	683a      	ldr	r2, [r7, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d001      	beq.n	800a804 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e032      	b.n	800a86a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 0304 	and.w	r3, r3, #4
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d008      	beq.n	800a822 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a810:	4b19      	ldr	r3, [pc, #100]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a812:	689b      	ldr	r3, [r3, #8]
 800a814:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4916      	ldr	r1, [pc, #88]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a81e:	4313      	orrs	r3, r2
 800a820:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 0308 	and.w	r3, r3, #8
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d009      	beq.n	800a842 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a82e:	4b12      	ldr	r3, [pc, #72]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a830:	689b      	ldr	r3, [r3, #8]
 800a832:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	691b      	ldr	r3, [r3, #16]
 800a83a:	00db      	lsls	r3, r3, #3
 800a83c:	490e      	ldr	r1, [pc, #56]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a83e:	4313      	orrs	r3, r2
 800a840:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a842:	f000 f821 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800a846:	4601      	mov	r1, r0
 800a848:	4b0b      	ldr	r3, [pc, #44]	; (800a878 <HAL_RCC_ClockConfig+0x1c8>)
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	091b      	lsrs	r3, r3, #4
 800a84e:	f003 030f 	and.w	r3, r3, #15
 800a852:	4a0a      	ldr	r2, [pc, #40]	; (800a87c <HAL_RCC_ClockConfig+0x1cc>)
 800a854:	5cd3      	ldrb	r3, [r2, r3]
 800a856:	fa21 f303 	lsr.w	r3, r1, r3
 800a85a:	4a09      	ldr	r2, [pc, #36]	; (800a880 <HAL_RCC_ClockConfig+0x1d0>)
 800a85c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a85e:	4b09      	ldr	r3, [pc, #36]	; (800a884 <HAL_RCC_ClockConfig+0x1d4>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4618      	mov	r0, r3
 800a864:	f7fb f87c 	bl	8005960 <HAL_InitTick>

  return HAL_OK;
 800a868:	2300      	movs	r3, #0
}
 800a86a:	4618      	mov	r0, r3
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	40023c00 	.word	0x40023c00
 800a878:	40023800 	.word	0x40023800
 800a87c:	0801d768 	.word	0x0801d768
 800a880:	20000000 	.word	0x20000000
 800a884:	20000004 	.word	0x20000004

0800a888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a888:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a88a:	b085      	sub	sp, #20
 800a88c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	607b      	str	r3, [r7, #4]
 800a892:	2300      	movs	r3, #0
 800a894:	60fb      	str	r3, [r7, #12]
 800a896:	2300      	movs	r3, #0
 800a898:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a89a:	2300      	movs	r3, #0
 800a89c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a89e:	4b63      	ldr	r3, [pc, #396]	; (800aa2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a8a0:	689b      	ldr	r3, [r3, #8]
 800a8a2:	f003 030c 	and.w	r3, r3, #12
 800a8a6:	2b04      	cmp	r3, #4
 800a8a8:	d007      	beq.n	800a8ba <HAL_RCC_GetSysClockFreq+0x32>
 800a8aa:	2b08      	cmp	r3, #8
 800a8ac:	d008      	beq.n	800a8c0 <HAL_RCC_GetSysClockFreq+0x38>
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	f040 80b4 	bne.w	800aa1c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a8b4:	4b5e      	ldr	r3, [pc, #376]	; (800aa30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a8b6:	60bb      	str	r3, [r7, #8]
      break;
 800a8b8:	e0b3      	b.n	800aa22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a8ba:	4b5e      	ldr	r3, [pc, #376]	; (800aa34 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a8bc:	60bb      	str	r3, [r7, #8]
      break;
 800a8be:	e0b0      	b.n	800aa22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a8c0:	4b5a      	ldr	r3, [pc, #360]	; (800aa2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a8c2:	685b      	ldr	r3, [r3, #4]
 800a8c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a8c8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a8ca:	4b58      	ldr	r3, [pc, #352]	; (800aa2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d04a      	beq.n	800a96c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a8d6:	4b55      	ldr	r3, [pc, #340]	; (800aa2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	099b      	lsrs	r3, r3, #6
 800a8dc:	f04f 0400 	mov.w	r4, #0
 800a8e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a8e4:	f04f 0200 	mov.w	r2, #0
 800a8e8:	ea03 0501 	and.w	r5, r3, r1
 800a8ec:	ea04 0602 	and.w	r6, r4, r2
 800a8f0:	4629      	mov	r1, r5
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	f04f 0300 	mov.w	r3, #0
 800a8f8:	f04f 0400 	mov.w	r4, #0
 800a8fc:	0154      	lsls	r4, r2, #5
 800a8fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a902:	014b      	lsls	r3, r1, #5
 800a904:	4619      	mov	r1, r3
 800a906:	4622      	mov	r2, r4
 800a908:	1b49      	subs	r1, r1, r5
 800a90a:	eb62 0206 	sbc.w	r2, r2, r6
 800a90e:	f04f 0300 	mov.w	r3, #0
 800a912:	f04f 0400 	mov.w	r4, #0
 800a916:	0194      	lsls	r4, r2, #6
 800a918:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a91c:	018b      	lsls	r3, r1, #6
 800a91e:	1a5b      	subs	r3, r3, r1
 800a920:	eb64 0402 	sbc.w	r4, r4, r2
 800a924:	f04f 0100 	mov.w	r1, #0
 800a928:	f04f 0200 	mov.w	r2, #0
 800a92c:	00e2      	lsls	r2, r4, #3
 800a92e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a932:	00d9      	lsls	r1, r3, #3
 800a934:	460b      	mov	r3, r1
 800a936:	4614      	mov	r4, r2
 800a938:	195b      	adds	r3, r3, r5
 800a93a:	eb44 0406 	adc.w	r4, r4, r6
 800a93e:	f04f 0100 	mov.w	r1, #0
 800a942:	f04f 0200 	mov.w	r2, #0
 800a946:	0262      	lsls	r2, r4, #9
 800a948:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a94c:	0259      	lsls	r1, r3, #9
 800a94e:	460b      	mov	r3, r1
 800a950:	4614      	mov	r4, r2
 800a952:	4618      	mov	r0, r3
 800a954:	4621      	mov	r1, r4
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f04f 0400 	mov.w	r4, #0
 800a95c:	461a      	mov	r2, r3
 800a95e:	4623      	mov	r3, r4
 800a960:	f7f6 f98a 	bl	8000c78 <__aeabi_uldivmod>
 800a964:	4603      	mov	r3, r0
 800a966:	460c      	mov	r4, r1
 800a968:	60fb      	str	r3, [r7, #12]
 800a96a:	e049      	b.n	800aa00 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a96c:	4b2f      	ldr	r3, [pc, #188]	; (800aa2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	099b      	lsrs	r3, r3, #6
 800a972:	f04f 0400 	mov.w	r4, #0
 800a976:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a97a:	f04f 0200 	mov.w	r2, #0
 800a97e:	ea03 0501 	and.w	r5, r3, r1
 800a982:	ea04 0602 	and.w	r6, r4, r2
 800a986:	4629      	mov	r1, r5
 800a988:	4632      	mov	r2, r6
 800a98a:	f04f 0300 	mov.w	r3, #0
 800a98e:	f04f 0400 	mov.w	r4, #0
 800a992:	0154      	lsls	r4, r2, #5
 800a994:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a998:	014b      	lsls	r3, r1, #5
 800a99a:	4619      	mov	r1, r3
 800a99c:	4622      	mov	r2, r4
 800a99e:	1b49      	subs	r1, r1, r5
 800a9a0:	eb62 0206 	sbc.w	r2, r2, r6
 800a9a4:	f04f 0300 	mov.w	r3, #0
 800a9a8:	f04f 0400 	mov.w	r4, #0
 800a9ac:	0194      	lsls	r4, r2, #6
 800a9ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a9b2:	018b      	lsls	r3, r1, #6
 800a9b4:	1a5b      	subs	r3, r3, r1
 800a9b6:	eb64 0402 	sbc.w	r4, r4, r2
 800a9ba:	f04f 0100 	mov.w	r1, #0
 800a9be:	f04f 0200 	mov.w	r2, #0
 800a9c2:	00e2      	lsls	r2, r4, #3
 800a9c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a9c8:	00d9      	lsls	r1, r3, #3
 800a9ca:	460b      	mov	r3, r1
 800a9cc:	4614      	mov	r4, r2
 800a9ce:	195b      	adds	r3, r3, r5
 800a9d0:	eb44 0406 	adc.w	r4, r4, r6
 800a9d4:	f04f 0100 	mov.w	r1, #0
 800a9d8:	f04f 0200 	mov.w	r2, #0
 800a9dc:	02a2      	lsls	r2, r4, #10
 800a9de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a9e2:	0299      	lsls	r1, r3, #10
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4614      	mov	r4, r2
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	4621      	mov	r1, r4
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f04f 0400 	mov.w	r4, #0
 800a9f2:	461a      	mov	r2, r3
 800a9f4:	4623      	mov	r3, r4
 800a9f6:	f7f6 f93f 	bl	8000c78 <__aeabi_uldivmod>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	460c      	mov	r4, r1
 800a9fe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800aa00:	4b0a      	ldr	r3, [pc, #40]	; (800aa2c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800aa02:	685b      	ldr	r3, [r3, #4]
 800aa04:	0c1b      	lsrs	r3, r3, #16
 800aa06:	f003 0303 	and.w	r3, r3, #3
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	005b      	lsls	r3, r3, #1
 800aa0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa18:	60bb      	str	r3, [r7, #8]
      break;
 800aa1a:	e002      	b.n	800aa22 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aa1c:	4b04      	ldr	r3, [pc, #16]	; (800aa30 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800aa1e:	60bb      	str	r3, [r7, #8]
      break;
 800aa20:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aa22:	68bb      	ldr	r3, [r7, #8]
}
 800aa24:	4618      	mov	r0, r3
 800aa26:	3714      	adds	r7, #20
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa2c:	40023800 	.word	0x40023800
 800aa30:	00f42400 	.word	0x00f42400
 800aa34:	007a1200 	.word	0x007a1200

0800aa38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800aa3c:	4b03      	ldr	r3, [pc, #12]	; (800aa4c <HAL_RCC_GetHCLKFreq+0x14>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	46bd      	mov	sp, r7
 800aa44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa48:	4770      	bx	lr
 800aa4a:	bf00      	nop
 800aa4c:	20000000 	.word	0x20000000

0800aa50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800aa54:	f7ff fff0 	bl	800aa38 <HAL_RCC_GetHCLKFreq>
 800aa58:	4601      	mov	r1, r0
 800aa5a:	4b05      	ldr	r3, [pc, #20]	; (800aa70 <HAL_RCC_GetPCLK1Freq+0x20>)
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	0a9b      	lsrs	r3, r3, #10
 800aa60:	f003 0307 	and.w	r3, r3, #7
 800aa64:	4a03      	ldr	r2, [pc, #12]	; (800aa74 <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa66:	5cd3      	ldrb	r3, [r2, r3]
 800aa68:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	bd80      	pop	{r7, pc}
 800aa70:	40023800 	.word	0x40023800
 800aa74:	0801d778 	.word	0x0801d778

0800aa78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800aa7c:	f7ff ffdc 	bl	800aa38 <HAL_RCC_GetHCLKFreq>
 800aa80:	4601      	mov	r1, r0
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <HAL_RCC_GetPCLK2Freq+0x20>)
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	0b5b      	lsrs	r3, r3, #13
 800aa88:	f003 0307 	and.w	r3, r3, #7
 800aa8c:	4a03      	ldr	r2, [pc, #12]	; (800aa9c <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa8e:	5cd3      	ldrb	r3, [r2, r3]
 800aa90:	fa21 f303 	lsr.w	r3, r1, r3
}
 800aa94:	4618      	mov	r0, r3
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	40023800 	.word	0x40023800
 800aa9c:	0801d778 	.word	0x0801d778

0800aaa0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b083      	sub	sp, #12
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
 800aaa8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	220f      	movs	r2, #15
 800aaae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aab0:	4b12      	ldr	r3, [pc, #72]	; (800aafc <HAL_RCC_GetClockConfig+0x5c>)
 800aab2:	689b      	ldr	r3, [r3, #8]
 800aab4:	f003 0203 	and.w	r2, r3, #3
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800aabc:	4b0f      	ldr	r3, [pc, #60]	; (800aafc <HAL_RCC_GetClockConfig+0x5c>)
 800aabe:	689b      	ldr	r3, [r3, #8]
 800aac0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800aac8:	4b0c      	ldr	r3, [pc, #48]	; (800aafc <HAL_RCC_GetClockConfig+0x5c>)
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800aad4:	4b09      	ldr	r3, [pc, #36]	; (800aafc <HAL_RCC_GetClockConfig+0x5c>)
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	08db      	lsrs	r3, r3, #3
 800aada:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aae2:	4b07      	ldr	r3, [pc, #28]	; (800ab00 <HAL_RCC_GetClockConfig+0x60>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	f003 020f 	and.w	r2, r3, #15
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	601a      	str	r2, [r3, #0]
}
 800aaee:	bf00      	nop
 800aaf0:	370c      	adds	r7, #12
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf8:	4770      	bx	lr
 800aafa:	bf00      	nop
 800aafc:	40023800 	.word	0x40023800
 800ab00:	40023c00 	.word	0x40023c00

0800ab04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b088      	sub	sp, #32
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800ab10:	2300      	movs	r3, #0
 800ab12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800ab14:	2300      	movs	r3, #0
 800ab16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f003 0301 	and.w	r3, r3, #1
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d012      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800ab2c:	4b69      	ldr	r3, [pc, #420]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	4a68      	ldr	r2, [pc, #416]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ab36:	6093      	str	r3, [r2, #8]
 800ab38:	4b66      	ldr	r3, [pc, #408]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab3a:	689a      	ldr	r2, [r3, #8]
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab40:	4964      	ldr	r1, [pc, #400]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab42:	4313      	orrs	r3, r2
 800ab44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800ab4e:	2301      	movs	r3, #1
 800ab50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d017      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab5e:	4b5d      	ldr	r3, [pc, #372]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab6c:	4959      	ldr	r1, [pc, #356]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab7c:	d101      	bne.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800ab7e:	2301      	movs	r3, #1
 800ab80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d101      	bne.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d017      	beq.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800ab9a:	4b4e      	ldr	r3, [pc, #312]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aba0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	494a      	ldr	r1, [pc, #296]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abaa:	4313      	orrs	r3, r2
 800abac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abb8:	d101      	bne.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800abba:	2301      	movs	r3, #1
 800abbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d101      	bne.n	800abca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800abc6:	2301      	movs	r3, #1
 800abc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d001      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800abd6:	2301      	movs	r3, #1
 800abd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	f003 0320 	and.w	r3, r3, #32
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 808b 	beq.w	800acfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800abe8:	4b3a      	ldr	r3, [pc, #232]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abec:	4a39      	ldr	r2, [pc, #228]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abf2:	6413      	str	r3, [r2, #64]	; 0x40
 800abf4:	4b37      	ldr	r3, [pc, #220]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800abf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800abfc:	60bb      	str	r3, [r7, #8]
 800abfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800ac00:	4b35      	ldr	r3, [pc, #212]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	4a34      	ldr	r2, [pc, #208]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ac06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ac0c:	f7fc fd74 	bl	80076f8 <HAL_GetTick>
 800ac10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ac12:	e008      	b.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac14:	f7fc fd70 	bl	80076f8 <HAL_GetTick>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	1ad3      	subs	r3, r2, r3
 800ac1e:	2b64      	cmp	r3, #100	; 0x64
 800ac20:	d901      	bls.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800ac22:	2303      	movs	r3, #3
 800ac24:	e31e      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800ac26:	4b2c      	ldr	r3, [pc, #176]	; (800acd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0f0      	beq.n	800ac14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800ac32:	4b28      	ldr	r3, [pc, #160]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d035      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac4a:	693a      	ldr	r2, [r7, #16]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d02e      	beq.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800ac50:	4b20      	ldr	r3, [pc, #128]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800ac5a:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac5e:	4a1d      	ldr	r2, [pc, #116]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800ac64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800ac66:	4b1b      	ldr	r3, [pc, #108]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac6a:	4a1a      	ldr	r2, [pc, #104]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800ac72:	4a18      	ldr	r2, [pc, #96]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800ac78:	4b16      	ldr	r3, [pc, #88]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ac7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	2b01      	cmp	r3, #1
 800ac82:	d114      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ac84:	f7fc fd38 	bl	80076f8 <HAL_GetTick>
 800ac88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ac8a:	e00a      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ac8c:	f7fc fd34 	bl	80076f8 <HAL_GetTick>
 800ac90:	4602      	mov	r2, r0
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	1ad3      	subs	r3, r2, r3
 800ac96:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d901      	bls.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ac9e:	2303      	movs	r3, #3
 800aca0:	e2e0      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aca2:	4b0c      	ldr	r3, [pc, #48]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca6:	f003 0302 	and.w	r3, r3, #2
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d0ee      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acba:	d111      	bne.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800acbc:	4b05      	ldr	r3, [pc, #20]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acbe:	689b      	ldr	r3, [r3, #8]
 800acc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800acc8:	4b04      	ldr	r3, [pc, #16]	; (800acdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800acca:	400b      	ands	r3, r1
 800accc:	4901      	ldr	r1, [pc, #4]	; (800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800acce:	4313      	orrs	r3, r2
 800acd0:	608b      	str	r3, [r1, #8]
 800acd2:	e00b      	b.n	800acec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800acd4:	40023800 	.word	0x40023800
 800acd8:	40007000 	.word	0x40007000
 800acdc:	0ffffcff 	.word	0x0ffffcff
 800ace0:	4bac      	ldr	r3, [pc, #688]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	4aab      	ldr	r2, [pc, #684]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ace6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800acea:	6093      	str	r3, [r2, #8]
 800acec:	4ba9      	ldr	r3, [pc, #676]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800acf8:	49a6      	ldr	r1, [pc, #664]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acfa:	4313      	orrs	r3, r2
 800acfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0310 	and.w	r3, r3, #16
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d010      	beq.n	800ad2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ad0a:	4ba2      	ldr	r3, [pc, #648]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ad10:	4aa0      	ldr	r2, [pc, #640]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ad16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ad1a:	4b9e      	ldr	r3, [pc, #632]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad24:	499b      	ldr	r1, [pc, #620]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad26:	4313      	orrs	r3, r2
 800ad28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00a      	beq.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ad38:	4b96      	ldr	r3, [pc, #600]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad46:	4993      	ldr	r1, [pc, #588]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00a      	beq.n	800ad70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ad5a:	4b8e      	ldr	r3, [pc, #568]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad68:	498a      	ldr	r1, [pc, #552]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d00a      	beq.n	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ad7c:	4b85      	ldr	r3, [pc, #532]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad8a:	4982      	ldr	r1, [pc, #520]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d00a      	beq.n	800adb4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad9e:	4b7d      	ldr	r3, [pc, #500]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ada0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ada4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adac:	4979      	ldr	r1, [pc, #484]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adae:	4313      	orrs	r3, r2
 800adb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d00a      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800adc0:	4b74      	ldr	r3, [pc, #464]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adc6:	f023 0203 	bic.w	r2, r3, #3
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800adce:	4971      	ldr	r1, [pc, #452]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800add0:	4313      	orrs	r3, r2
 800add2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d00a      	beq.n	800adf8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ade2:	4b6c      	ldr	r3, [pc, #432]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ade4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ade8:	f023 020c 	bic.w	r2, r3, #12
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adf0:	4968      	ldr	r1, [pc, #416]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adf2:	4313      	orrs	r3, r2
 800adf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d00a      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ae04:	4b63      	ldr	r3, [pc, #396]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae12:	4960      	ldr	r1, [pc, #384]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae14:	4313      	orrs	r3, r2
 800ae16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ae26:	4b5b      	ldr	r3, [pc, #364]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae34:	4957      	ldr	r1, [pc, #348]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae36:	4313      	orrs	r3, r2
 800ae38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00a      	beq.n	800ae5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800ae48:	4b52      	ldr	r3, [pc, #328]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae56:	494f      	ldr	r1, [pc, #316]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d00a      	beq.n	800ae80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800ae6a:	4b4a      	ldr	r3, [pc, #296]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae78:	4946      	ldr	r1, [pc, #280]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d00a      	beq.n	800aea2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800ae8c:	4b41      	ldr	r3, [pc, #260]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae9a:	493e      	ldr	r1, [pc, #248]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ae9c:	4313      	orrs	r3, r2
 800ae9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d00a      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800aeae:	4b39      	ldr	r3, [pc, #228]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aeb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aebc:	4935      	ldr	r1, [pc, #212]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aebe:	4313      	orrs	r3, r2
 800aec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d00a      	beq.n	800aee6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aed0:	4b30      	ldr	r3, [pc, #192]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aed6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aede:	492d      	ldr	r1, [pc, #180]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d011      	beq.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800aef2:	4b28      	ldr	r3, [pc, #160]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af00:	4924      	ldr	r1, [pc, #144]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af02:	4313      	orrs	r3, r2
 800af04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800af0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af10:	d101      	bne.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800af12:	2301      	movs	r3, #1
 800af14:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af22:	4b1c      	ldr	r3, [pc, #112]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af28:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af30:	4918      	ldr	r1, [pc, #96]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af32:	4313      	orrs	r3, r2
 800af34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d00b      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800af44:	4b13      	ldr	r3, [pc, #76]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af4a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af54:	490f      	ldr	r1, [pc, #60]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af56:	4313      	orrs	r3, r2
 800af58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	2b01      	cmp	r3, #1
 800af60:	d005      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af6a:	f040 80d8 	bne.w	800b11e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800af6e:	4b09      	ldr	r3, [pc, #36]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a08      	ldr	r2, [pc, #32]	; (800af94 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800af74:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800af78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af7a:	f7fc fbbd 	bl	80076f8 <HAL_GetTick>
 800af7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af80:	e00a      	b.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800af82:	f7fc fbb9 	bl	80076f8 <HAL_GetTick>
 800af86:	4602      	mov	r2, r0
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	1ad3      	subs	r3, r2, r3
 800af8c:	2b64      	cmp	r3, #100	; 0x64
 800af8e:	d903      	bls.n	800af98 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af90:	2303      	movs	r3, #3
 800af92:	e167      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800af94:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800af98:	4bad      	ldr	r3, [pc, #692]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d1ee      	bne.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f003 0301 	and.w	r3, r3, #1
 800afac:	2b00      	cmp	r3, #0
 800afae:	d021      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d11d      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800afb8:	4ba5      	ldr	r3, [pc, #660]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afbe:	0c1b      	lsrs	r3, r3, #16
 800afc0:	f003 0303 	and.w	r3, r3, #3
 800afc4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800afc6:	4ba2      	ldr	r3, [pc, #648]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800afcc:	0e1b      	lsrs	r3, r3, #24
 800afce:	f003 030f 	and.w	r3, r3, #15
 800afd2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	685b      	ldr	r3, [r3, #4]
 800afd8:	019a      	lsls	r2, r3, #6
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	041b      	lsls	r3, r3, #16
 800afde:	431a      	orrs	r2, r3
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	061b      	lsls	r3, r3, #24
 800afe4:	431a      	orrs	r2, r3
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	071b      	lsls	r3, r3, #28
 800afec:	4998      	ldr	r1, [pc, #608]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afee:	4313      	orrs	r3, r2
 800aff0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800affc:	2b00      	cmp	r3, #0
 800affe:	d004      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b008:	d00a      	beq.n	800b020 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800b012:	2b00      	cmp	r3, #0
 800b014:	d02e      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b01a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b01e:	d129      	bne.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800b020:	4b8b      	ldr	r3, [pc, #556]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b026:	0c1b      	lsrs	r3, r3, #16
 800b028:	f003 0303 	and.w	r3, r3, #3
 800b02c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b02e:	4b88      	ldr	r3, [pc, #544]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b030:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b034:	0f1b      	lsrs	r3, r3, #28
 800b036:	f003 0307 	and.w	r3, r3, #7
 800b03a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	019a      	lsls	r2, r3, #6
 800b042:	693b      	ldr	r3, [r7, #16]
 800b044:	041b      	lsls	r3, r3, #16
 800b046:	431a      	orrs	r2, r3
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	061b      	lsls	r3, r3, #24
 800b04e:	431a      	orrs	r2, r3
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	071b      	lsls	r3, r3, #28
 800b054:	497e      	ldr	r1, [pc, #504]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b056:	4313      	orrs	r3, r2
 800b058:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800b05c:	4b7c      	ldr	r3, [pc, #496]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b05e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b062:	f023 021f 	bic.w	r2, r3, #31
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b06a:	3b01      	subs	r3, #1
 800b06c:	4978      	ldr	r1, [pc, #480]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d01d      	beq.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800b080:	4b73      	ldr	r3, [pc, #460]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b082:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b086:	0e1b      	lsrs	r3, r3, #24
 800b088:	f003 030f 	and.w	r3, r3, #15
 800b08c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800b08e:	4b70      	ldr	r3, [pc, #448]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b090:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b094:	0f1b      	lsrs	r3, r3, #28
 800b096:	f003 0307 	and.w	r3, r3, #7
 800b09a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	685b      	ldr	r3, [r3, #4]
 800b0a0:	019a      	lsls	r2, r3, #6
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	691b      	ldr	r3, [r3, #16]
 800b0a6:	041b      	lsls	r3, r3, #16
 800b0a8:	431a      	orrs	r2, r3
 800b0aa:	693b      	ldr	r3, [r7, #16]
 800b0ac:	061b      	lsls	r3, r3, #24
 800b0ae:	431a      	orrs	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	071b      	lsls	r3, r3, #28
 800b0b4:	4966      	ldr	r1, [pc, #408]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b0b6:	4313      	orrs	r3, r2
 800b0b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d011      	beq.n	800b0ec <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	685b      	ldr	r3, [r3, #4]
 800b0cc:	019a      	lsls	r2, r3, #6
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	041b      	lsls	r3, r3, #16
 800b0d4:	431a      	orrs	r2, r3
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	68db      	ldr	r3, [r3, #12]
 800b0da:	061b      	lsls	r3, r3, #24
 800b0dc:	431a      	orrs	r2, r3
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	689b      	ldr	r3, [r3, #8]
 800b0e2:	071b      	lsls	r3, r3, #28
 800b0e4:	495a      	ldr	r1, [pc, #360]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b0ec:	4b58      	ldr	r3, [pc, #352]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	4a57      	ldr	r2, [pc, #348]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b0f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800b0f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0f8:	f7fc fafe 	bl	80076f8 <HAL_GetTick>
 800b0fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b0fe:	e008      	b.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b100:	f7fc fafa 	bl	80076f8 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	697b      	ldr	r3, [r7, #20]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b64      	cmp	r3, #100	; 0x64
 800b10c:	d901      	bls.n	800b112 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e0a8      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b112:	4b4f      	ldr	r3, [pc, #316]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d0f0      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	2b01      	cmp	r3, #1
 800b122:	f040 809e 	bne.w	800b262 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800b126:	4b4a      	ldr	r3, [pc, #296]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4a49      	ldr	r2, [pc, #292]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b12c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b130:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b132:	f7fc fae1 	bl	80076f8 <HAL_GetTick>
 800b136:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b138:	e008      	b.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b13a:	f7fc fadd 	bl	80076f8 <HAL_GetTick>
 800b13e:	4602      	mov	r2, r0
 800b140:	697b      	ldr	r3, [r7, #20]
 800b142:	1ad3      	subs	r3, r2, r3
 800b144:	2b64      	cmp	r3, #100	; 0x64
 800b146:	d901      	bls.n	800b14c <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b148:	2303      	movs	r3, #3
 800b14a:	e08b      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800b14c:	4b40      	ldr	r3, [pc, #256]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b154:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b158:	d0ef      	beq.n	800b13a <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b162:	2b00      	cmp	r3, #0
 800b164:	d003      	beq.n	800b16e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d009      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800b176:	2b00      	cmp	r3, #0
 800b178:	d02e      	beq.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d12a      	bne.n	800b1d8 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800b182:	4b33      	ldr	r3, [pc, #204]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b188:	0c1b      	lsrs	r3, r3, #16
 800b18a:	f003 0303 	and.w	r3, r3, #3
 800b18e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b190:	4b2f      	ldr	r3, [pc, #188]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b196:	0f1b      	lsrs	r3, r3, #28
 800b198:	f003 0307 	and.w	r3, r3, #7
 800b19c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	695b      	ldr	r3, [r3, #20]
 800b1a2:	019a      	lsls	r2, r3, #6
 800b1a4:	693b      	ldr	r3, [r7, #16]
 800b1a6:	041b      	lsls	r3, r3, #16
 800b1a8:	431a      	orrs	r2, r3
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	699b      	ldr	r3, [r3, #24]
 800b1ae:	061b      	lsls	r3, r3, #24
 800b1b0:	431a      	orrs	r2, r3
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	071b      	lsls	r3, r3, #28
 800b1b6:	4926      	ldr	r1, [pc, #152]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b1be:	4b24      	ldr	r3, [pc, #144]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b1c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b1c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	021b      	lsls	r3, r3, #8
 800b1d0:	491f      	ldr	r1, [pc, #124]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d022      	beq.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x726>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b1e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1ec:	d11d      	bne.n	800b22a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b1ee:	4b18      	ldr	r3, [pc, #96]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b1f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1f4:	0e1b      	lsrs	r3, r3, #24
 800b1f6:	f003 030f 	and.w	r3, r3, #15
 800b1fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b1fc:	4b14      	ldr	r3, [pc, #80]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b1fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b202:	0f1b      	lsrs	r3, r3, #28
 800b204:	f003 0307 	and.w	r3, r3, #7
 800b208:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	695b      	ldr	r3, [r3, #20]
 800b20e:	019a      	lsls	r2, r3, #6
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6a1b      	ldr	r3, [r3, #32]
 800b214:	041b      	lsls	r3, r3, #16
 800b216:	431a      	orrs	r2, r3
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	061b      	lsls	r3, r3, #24
 800b21c:	431a      	orrs	r2, r3
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	071b      	lsls	r3, r3, #28
 800b222:	490b      	ldr	r1, [pc, #44]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b224:	4313      	orrs	r3, r2
 800b226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b22a:	4b09      	ldr	r3, [pc, #36]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a08      	ldr	r2, [pc, #32]	; (800b250 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b230:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b236:	f7fc fa5f 	bl	80076f8 <HAL_GetTick>
 800b23a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b23c:	e00a      	b.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b23e:	f7fc fa5b 	bl	80076f8 <HAL_GetTick>
 800b242:	4602      	mov	r2, r0
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	1ad3      	subs	r3, r2, r3
 800b248:	2b64      	cmp	r3, #100	; 0x64
 800b24a:	d903      	bls.n	800b254 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b24c:	2303      	movs	r3, #3
 800b24e:	e009      	b.n	800b264 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800b250:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b254:	4b05      	ldr	r3, [pc, #20]	; (800b26c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b25c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b260:	d1ed      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3720      	adds	r7, #32
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	40023800 	.word	0x40023800

0800b270 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b27e:	2301      	movs	r3, #1
 800b280:	e022      	b.n	800b2c8 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b288:	b2db      	uxtb	r3, r3
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d105      	bne.n	800b29a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f7f9 ff0b 	bl	80050b0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	2203      	movs	r2, #3
 800b29e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b2a2:	6878      	ldr	r0, [r7, #4]
 800b2a4:	f000 f814 	bl	800b2d0 <HAL_SD_InitCard>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d001      	beq.n	800b2b2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e00a      	b.n	800b2c8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	2201      	movs	r2, #1
 800b2c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b2c6:	2300      	movs	r3, #0
}
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	3708      	adds	r7, #8
 800b2cc:	46bd      	mov	sp, r7
 800b2ce:	bd80      	pop	{r7, pc}

0800b2d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b2d0:	b5b0      	push	{r4, r5, r7, lr}
 800b2d2:	b08e      	sub	sp, #56	; 0x38
 800b2d4:	af04      	add	r7, sp, #16
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b2ec:	2376      	movs	r3, #118	; 0x76
 800b2ee:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	681d      	ldr	r5, [r3, #0]
 800b2f4:	466c      	mov	r4, sp
 800b2f6:	f107 0314 	add.w	r3, r7, #20
 800b2fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b2fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b302:	f107 0308 	add.w	r3, r7, #8
 800b306:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b308:	4628      	mov	r0, r5
 800b30a:	f003 fdbb 	bl	800ee84 <SDMMC_Init>
 800b30e:	4603      	mov	r3, r0
 800b310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b31c:	2301      	movs	r3, #1
 800b31e:	e03b      	b.n	800b398 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	685a      	ldr	r2, [r3, #4]
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b32e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	4618      	mov	r0, r3
 800b336:	f003 fdef 	bl	800ef18 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	685a      	ldr	r2, [r3, #4]
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b348:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b34a:	6878      	ldr	r0, [r7, #4]
 800b34c:	f000 ffca 	bl	800c2e4 <SD_PowerON>
 800b350:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b352:	6a3b      	ldr	r3, [r7, #32]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00b      	beq.n	800b370 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2201      	movs	r2, #1
 800b35c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	431a      	orrs	r2, r3
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	e013      	b.n	800b398 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 fee9 	bl	800c148 <SD_InitCard>
 800b376:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d00b      	beq.n	800b396 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2201      	movs	r2, #1
 800b382:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	431a      	orrs	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b392:	2301      	movs	r3, #1
 800b394:	e000      	b.n	800b398 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800b396:	2300      	movs	r3, #0
}
 800b398:	4618      	mov	r0, r3
 800b39a:	3728      	adds	r7, #40	; 0x28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	bdb0      	pop	{r4, r5, r7, pc}

0800b3a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08c      	sub	sp, #48	; 0x30
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	60f8      	str	r0, [r7, #12]
 800b3a8:	60b9      	str	r1, [r7, #8]
 800b3aa:	607a      	str	r2, [r7, #4]
 800b3ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d107      	bne.n	800b3c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e0cc      	b.n	800b562 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	f040 80c5 	bne.w	800b560 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2200      	movs	r2, #0
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b3dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	441a      	add	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b3e6:	429a      	cmp	r2, r3
 800b3e8:	d907      	bls.n	800b3fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	e0b3      	b.n	800b562 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	2203      	movs	r2, #3
 800b3fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	2200      	movs	r2, #0
 800b408:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b418:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b41e:	4a53      	ldr	r2, [pc, #332]	; (800b56c <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b420:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b426:	4a52      	ldr	r2, [pc, #328]	; (800b570 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800b428:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b42e:	2200      	movs	r2, #0
 800b430:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	3380      	adds	r3, #128	; 0x80
 800b43c:	4619      	mov	r1, r3
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	025b      	lsls	r3, r3, #9
 800b444:	089b      	lsrs	r3, r3, #2
 800b446:	f7fc ff75 	bl	8008334 <HAL_DMA_Start_IT>
 800b44a:	4603      	mov	r3, r0
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d017      	beq.n	800b480 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b45e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a43      	ldr	r2, [pc, #268]	; (800b574 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b466:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	2201      	movs	r2, #1
 800b478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b47c:	2301      	movs	r3, #1
 800b47e:	e070      	b.n	800b562 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	f042 0208 	orr.w	r2, r2, #8
 800b48e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b494:	2b01      	cmp	r3, #1
 800b496:	d002      	beq.n	800b49e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800b498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49a:	025b      	lsls	r3, r3, #9
 800b49c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	f003 fdca 	bl	800f040 <SDMMC_CmdBlockLength>
 800b4ac:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d00f      	beq.n	800b4d4 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	4a2e      	ldr	r2, [pc, #184]	; (800b574 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b4ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4c2:	431a      	orrs	r2, r3
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b4d0:	2301      	movs	r3, #1
 800b4d2:	e046      	b.n	800b562 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b4d8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b4da:	683b      	ldr	r3, [r7, #0]
 800b4dc:	025b      	lsls	r3, r3, #9
 800b4de:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b4e0:	2390      	movs	r3, #144	; 0x90
 800b4e2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b4e4:	2302      	movs	r3, #2
 800b4e6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b4ec:	2301      	movs	r3, #1
 800b4ee:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f107 0210 	add.w	r2, r7, #16
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f003 fd74 	bl	800efe8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	2b01      	cmp	r3, #1
 800b504:	d90a      	bls.n	800b51c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	2282      	movs	r2, #130	; 0x82
 800b50a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b512:	4618      	mov	r0, r3
 800b514:	f003 fdd8 	bl	800f0c8 <SDMMC_CmdReadMultiBlock>
 800b518:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b51a:	e009      	b.n	800b530 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2281      	movs	r2, #129	; 0x81
 800b520:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b522:	68fb      	ldr	r3, [r7, #12]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b528:	4618      	mov	r0, r3
 800b52a:	f003 fdab 	bl	800f084 <SDMMC_CmdReadSingleBlock>
 800b52e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b532:	2b00      	cmp	r3, #0
 800b534:	d012      	beq.n	800b55c <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	4a0e      	ldr	r2, [pc, #56]	; (800b574 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b53c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b544:	431a      	orrs	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2201      	movs	r2, #1
 800b54e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e002      	b.n	800b562 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800b55c:	2300      	movs	r3, #0
 800b55e:	e000      	b.n	800b562 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800b560:	2302      	movs	r3, #2
  }
}
 800b562:	4618      	mov	r0, r3
 800b564:	3730      	adds	r7, #48	; 0x30
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	0800bf57 	.word	0x0800bf57
 800b570:	0800bfc9 	.word	0x0800bfc9
 800b574:	004005ff 	.word	0x004005ff

0800b578 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b08c      	sub	sp, #48	; 0x30
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	60f8      	str	r0, [r7, #12]
 800b580:	60b9      	str	r1, [r7, #8]
 800b582:	607a      	str	r2, [r7, #4]
 800b584:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d107      	bne.n	800b5a0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b594:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b59c:	2301      	movs	r3, #1
 800b59e:	e0cf      	b.n	800b740 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	f040 80c8 	bne.w	800b73e <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b5b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	441a      	add	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d907      	bls.n	800b5d2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5c6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b5ce:	2301      	movs	r3, #1
 800b5d0:	e0b6      	b.n	800b740 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2203      	movs	r2, #3
 800b5d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	2200      	movs	r2, #0
 800b5e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	f042 021a 	orr.w	r2, r2, #26
 800b5f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5f6:	4a54      	ldr	r2, [pc, #336]	; (800b748 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b5f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b5fe:	4a53      	ldr	r2, [pc, #332]	; (800b74c <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b600:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b606:	2200      	movs	r2, #0
 800b608:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d002      	beq.n	800b618 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b614:	025b      	lsls	r3, r3, #9
 800b616:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b620:	4618      	mov	r0, r3
 800b622:	f003 fd0d 	bl	800f040 <SDMMC_CmdBlockLength>
 800b626:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d00f      	beq.n	800b64e <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	4a47      	ldr	r2, [pc, #284]	; (800b750 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b634:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b63a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b63c:	431a      	orrs	r2, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	2201      	movs	r2, #1
 800b646:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b64a:	2301      	movs	r3, #1
 800b64c:	e078      	b.n	800b740 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d90a      	bls.n	800b66a <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	22a0      	movs	r2, #160	; 0xa0
 800b658:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b660:	4618      	mov	r0, r3
 800b662:	f003 fd75 	bl	800f150 <SDMMC_CmdWriteMultiBlock>
 800b666:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b668:	e009      	b.n	800b67e <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	2290      	movs	r2, #144	; 0x90
 800b66e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b676:	4618      	mov	r0, r3
 800b678:	f003 fd48 	bl	800f10c <SDMMC_CmdWriteSingleBlock>
 800b67c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b67e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b680:	2b00      	cmp	r3, #0
 800b682:	d012      	beq.n	800b6aa <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	4a31      	ldr	r2, [pc, #196]	; (800b750 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b68a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b692:	431a      	orrs	r2, r3
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	e04a      	b.n	800b740 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	f042 0208 	orr.w	r2, r2, #8
 800b6b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b6be:	68b9      	ldr	r1, [r7, #8]
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	3380      	adds	r3, #128	; 0x80
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	683b      	ldr	r3, [r7, #0]
 800b6ca:	025b      	lsls	r3, r3, #9
 800b6cc:	089b      	lsrs	r3, r3, #2
 800b6ce:	f7fc fe31 	bl	8008334 <HAL_DMA_Start_IT>
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d01a      	beq.n	800b70e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	f022 021a 	bic.w	r2, r2, #26
 800b6e6:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	681b      	ldr	r3, [r3, #0]
 800b6ec:	4a18      	ldr	r2, [pc, #96]	; (800b750 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b6ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2200      	movs	r2, #0
 800b708:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e018      	b.n	800b740 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b70e:	f04f 33ff 	mov.w	r3, #4294967295
 800b712:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	025b      	lsls	r3, r3, #9
 800b718:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b71a:	2390      	movs	r3, #144	; 0x90
 800b71c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b71e:	2300      	movs	r3, #0
 800b720:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b722:	2300      	movs	r3, #0
 800b724:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b726:	2301      	movs	r3, #1
 800b728:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	f107 0210 	add.w	r2, r7, #16
 800b732:	4611      	mov	r1, r2
 800b734:	4618      	mov	r0, r3
 800b736:	f003 fc57 	bl	800efe8 <SDMMC_ConfigData>

      return HAL_OK;
 800b73a:	2300      	movs	r3, #0
 800b73c:	e000      	b.n	800b740 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b73e:	2302      	movs	r3, #2
  }
}
 800b740:	4618      	mov	r0, r3
 800b742:	3730      	adds	r7, #48	; 0x30
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	0800bf2d 	.word	0x0800bf2d
 800b74c:	0800bfc9 	.word	0x0800bfc9
 800b750:	004005ff 	.word	0x004005ff

0800b754 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b760:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d008      	beq.n	800b782 <HAL_SD_IRQHandler+0x2e>
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f003 0308 	and.w	r3, r3, #8
 800b776:	2b00      	cmp	r3, #0
 800b778:	d003      	beq.n	800b782 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b77a:	6878      	ldr	r0, [r7, #4]
 800b77c:	f000 ffc8 	bl	800c710 <SD_Read_IT>
 800b780:	e153      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f000 808d 	beq.w	800b8ac <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b79a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	4ba3      	ldr	r3, [pc, #652]	; (800ba34 <HAL_SD_IRQHandler+0x2e0>)
 800b7a8:	400b      	ands	r3, r1
 800b7aa:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f022 0201 	bic.w	r2, r2, #1
 800b7ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	f003 0308 	and.w	r3, r3, #8
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d039      	beq.n	800b83a <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f003 0302 	and.w	r3, r3, #2
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d104      	bne.n	800b7da <HAL_SD_IRQHandler+0x86>
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f003 0320 	and.w	r3, r3, #32
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d011      	beq.n	800b7fe <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	4618      	mov	r0, r3
 800b7e0:	f003 fcd8 	bl	800f194 <SDMMC_CmdStopTransfer>
 800b7e4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d008      	beq.n	800b7fe <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b7f0:	68bb      	ldr	r3, [r7, #8]
 800b7f2:	431a      	orrs	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 f921 	bl	800ba40 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f240 523a 	movw	r2, #1338	; 0x53a
 800b806:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2200      	movs	r2, #0
 800b814:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <HAL_SD_IRQHandler+0xd6>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	f003 0302 	and.w	r3, r3, #2
 800b826:	2b00      	cmp	r3, #0
 800b828:	d003      	beq.n	800b832 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b82a:	6878      	ldr	r0, [r7, #4]
 800b82c:	f005 fc5a 	bl	80110e4 <HAL_SD_RxCpltCallback>
 800b830:	e0fb      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b832:	6878      	ldr	r0, [r7, #4]
 800b834:	f005 fc4c 	bl	80110d0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b838:	e0f7      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 80f2 	beq.w	800ba2a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f003 0320 	and.w	r3, r3, #32
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d011      	beq.n	800b874 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	4618      	mov	r0, r3
 800b856:	f003 fc9d 	bl	800f194 <SDMMC_CmdStopTransfer>
 800b85a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b85c:	68bb      	ldr	r3, [r7, #8]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d008      	beq.n	800b874 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	431a      	orrs	r2, r3
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f8e6 	bl	800ba40 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f040 80d5 	bne.w	800ba2a <HAL_SD_IRQHandler+0x2d6>
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	f003 0302 	and.w	r3, r3, #2
 800b886:	2b00      	cmp	r3, #0
 800b888:	f040 80cf 	bne.w	800ba2a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	f022 0208 	bic.w	r2, r2, #8
 800b89a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	f005 fc13 	bl	80110d0 <HAL_SD_TxCpltCallback>
}
 800b8aa:	e0be      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d008      	beq.n	800b8cc <HAL_SD_IRQHandler+0x178>
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f003 0308 	and.w	r3, r3, #8
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d003      	beq.n	800b8cc <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 ff74 	bl	800c7b2 <SD_Write_IT>
 800b8ca:	e0ae      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8d2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 80a7 	beq.w	800ba2a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8e2:	f003 0302 	and.w	r3, r3, #2
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d005      	beq.n	800b8f6 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8ee:	f043 0202 	orr.w	r2, r3, #2
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b8fc:	f003 0308 	and.w	r3, r3, #8
 800b900:	2b00      	cmp	r3, #0
 800b902:	d005      	beq.n	800b910 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b908:	f043 0208 	orr.w	r2, r3, #8
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b916:	f003 0320 	and.w	r3, r3, #32
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d005      	beq.n	800b92a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b922:	f043 0220 	orr.w	r2, r3, #32
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b930:	f003 0310 	and.w	r3, r3, #16
 800b934:	2b00      	cmp	r3, #0
 800b936:	d005      	beq.n	800b944 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b93c:	f043 0210 	orr.w	r2, r3, #16
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f240 523a 	movw	r2, #1338	; 0x53a
 800b94c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b95c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	4618      	mov	r0, r3
 800b964:	f003 fc16 	bl	800f194 <SDMMC_CmdStopTransfer>
 800b968:	4602      	mov	r2, r0
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b96e:	431a      	orrs	r2, r3
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	f003 0308 	and.w	r3, r3, #8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d00a      	beq.n	800b994 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	2201      	movs	r2, #1
 800b982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f857 	bl	800ba40 <HAL_SD_ErrorCallback>
}
 800b992:	e04a      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d045      	beq.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	f003 0310 	and.w	r3, r3, #16
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d104      	bne.n	800b9b2 <HAL_SD_IRQHandler+0x25e>
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f003 0320 	and.w	r3, r3, #32
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d011      	beq.n	800b9d6 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9b6:	4a20      	ldr	r2, [pc, #128]	; (800ba38 <HAL_SD_IRQHandler+0x2e4>)
 800b9b8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7fc fd88 	bl	80084d4 <HAL_DMA_Abort_IT>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d02f      	beq.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f000 fb4c 	bl	800c06c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b9d4:	e029      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	f003 0301 	and.w	r3, r3, #1
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d104      	bne.n	800b9ea <HAL_SD_IRQHandler+0x296>
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f003 0302 	and.w	r3, r3, #2
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d011      	beq.n	800ba0e <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ee:	4a13      	ldr	r2, [pc, #76]	; (800ba3c <HAL_SD_IRQHandler+0x2e8>)
 800b9f0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fc fd6c 	bl	80084d4 <HAL_DMA_Abort_IT>
 800b9fc:	4603      	mov	r3, r0
 800b9fe:	2b00      	cmp	r3, #0
 800ba00:	d013      	beq.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba06:	4618      	mov	r0, r3
 800ba08:	f000 fb67 	bl	800c0da <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800ba0c:	e00d      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2200      	movs	r2, #0
 800ba12:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f005 fb4a 	bl	80110bc <HAL_SD_AbortCallback>
}
 800ba28:	e7ff      	b.n	800ba2a <HAL_SD_IRQHandler+0x2d6>
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}
 800ba32:	bf00      	nop
 800ba34:	ffff3ec5 	.word	0xffff3ec5
 800ba38:	0800c06d 	.word	0x0800c06d
 800ba3c:	0800c0db 	.word	0x0800c0db

0800ba40 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800ba40:	b480      	push	{r7}
 800ba42:	b083      	sub	sp, #12
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800ba48:	bf00      	nop
 800ba4a:	370c      	adds	r7, #12
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba52:	4770      	bx	lr

0800ba54 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b083      	sub	sp, #12
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
 800ba5c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba62:	0f9b      	lsrs	r3, r3, #30
 800ba64:	b2da      	uxtb	r2, r3
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba6e:	0e9b      	lsrs	r3, r3, #26
 800ba70:	b2db      	uxtb	r3, r3
 800ba72:	f003 030f 	and.w	r3, r3, #15
 800ba76:	b2da      	uxtb	r2, r3
 800ba78:	683b      	ldr	r3, [r7, #0]
 800ba7a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba80:	0e1b      	lsrs	r3, r3, #24
 800ba82:	b2db      	uxtb	r3, r3
 800ba84:	f003 0303 	and.w	r3, r3, #3
 800ba88:	b2da      	uxtb	r2, r3
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba92:	0c1b      	lsrs	r3, r3, #16
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ba9e:	0a1b      	lsrs	r3, r3, #8
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	683b      	ldr	r3, [r7, #0]
 800baa4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800baaa:	b2da      	uxtb	r2, r3
 800baac:	683b      	ldr	r3, [r7, #0]
 800baae:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bab4:	0d1b      	lsrs	r3, r3, #20
 800bab6:	b29a      	uxth	r2, r3
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bac0:	0c1b      	lsrs	r3, r3, #16
 800bac2:	b2db      	uxtb	r3, r3
 800bac4:	f003 030f 	and.w	r3, r3, #15
 800bac8:	b2da      	uxtb	r2, r3
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bad2:	0bdb      	lsrs	r3, r3, #15
 800bad4:	b2db      	uxtb	r3, r3
 800bad6:	f003 0301 	and.w	r3, r3, #1
 800bada:	b2da      	uxtb	r2, r3
 800badc:	683b      	ldr	r3, [r7, #0]
 800bade:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bae4:	0b9b      	lsrs	r3, r3, #14
 800bae6:	b2db      	uxtb	r3, r3
 800bae8:	f003 0301 	and.w	r3, r3, #1
 800baec:	b2da      	uxtb	r2, r3
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800baf6:	0b5b      	lsrs	r3, r3, #13
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	f003 0301 	and.w	r3, r3, #1
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb08:	0b1b      	lsrs	r3, r3, #12
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	f003 0301 	and.w	r3, r3, #1
 800bb10:	b2da      	uxtb	r2, r3
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d163      	bne.n	800bbec <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bb28:	009a      	lsls	r2, r3, #2
 800bb2a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800bb2e:	4013      	ands	r3, r2
 800bb30:	687a      	ldr	r2, [r7, #4]
 800bb32:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bb34:	0f92      	lsrs	r2, r2, #30
 800bb36:	431a      	orrs	r2, r3
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb40:	0edb      	lsrs	r3, r3, #27
 800bb42:	b2db      	uxtb	r3, r3
 800bb44:	f003 0307 	and.w	r3, r3, #7
 800bb48:	b2da      	uxtb	r2, r3
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb52:	0e1b      	lsrs	r3, r3, #24
 800bb54:	b2db      	uxtb	r3, r3
 800bb56:	f003 0307 	and.w	r3, r3, #7
 800bb5a:	b2da      	uxtb	r2, r3
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb64:	0d5b      	lsrs	r3, r3, #21
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	f003 0307 	and.w	r3, r3, #7
 800bb6c:	b2da      	uxtb	r2, r3
 800bb6e:	683b      	ldr	r3, [r7, #0]
 800bb70:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb76:	0c9b      	lsrs	r3, r3, #18
 800bb78:	b2db      	uxtb	r3, r3
 800bb7a:	f003 0307 	and.w	r3, r3, #7
 800bb7e:	b2da      	uxtb	r2, r3
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb88:	0bdb      	lsrs	r3, r3, #15
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	f003 0307 	and.w	r3, r3, #7
 800bb90:	b2da      	uxtb	r2, r3
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	7e1b      	ldrb	r3, [r3, #24]
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	f003 0307 	and.w	r3, r3, #7
 800bbaa:	3302      	adds	r3, #2
 800bbac:	2201      	movs	r2, #1
 800bbae:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800bbb6:	fb02 f203 	mul.w	r2, r2, r3
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	7a1b      	ldrb	r3, [r3, #8]
 800bbc2:	b2db      	uxtb	r3, r3
 800bbc4:	f003 030f 	and.w	r3, r3, #15
 800bbc8:	2201      	movs	r2, #1
 800bbca:	409a      	lsls	r2, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd4:	687a      	ldr	r2, [r7, #4]
 800bbd6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800bbd8:	0a52      	lsrs	r2, r2, #9
 800bbda:	fb02 f203 	mul.w	r2, r2, r3
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bbe8:	661a      	str	r2, [r3, #96]	; 0x60
 800bbea:	e031      	b.n	800bc50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d11d      	bne.n	800bc30 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bbf8:	041b      	lsls	r3, r3, #16
 800bbfa:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc02:	0c1b      	lsrs	r3, r3, #16
 800bc04:	431a      	orrs	r2, r3
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	691b      	ldr	r3, [r3, #16]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	029a      	lsls	r2, r3, #10
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc24:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	661a      	str	r2, [r3, #96]	; 0x60
 800bc2e:	e00f      	b.n	800bc50 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	4a58      	ldr	r2, [pc, #352]	; (800bd98 <HAL_SD_GetCardCSD+0x344>)
 800bc36:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	2201      	movs	r2, #1
 800bc48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	e09d      	b.n	800bd8c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc54:	0b9b      	lsrs	r3, r3, #14
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	b2da      	uxtb	r2, r3
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc66:	09db      	lsrs	r3, r3, #7
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc6e:	b2da      	uxtb	r2, r3
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc88:	0fdb      	lsrs	r3, r3, #31
 800bc8a:	b2da      	uxtb	r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc94:	0f5b      	lsrs	r3, r3, #29
 800bc96:	b2db      	uxtb	r3, r3
 800bc98:	f003 0303 	and.w	r3, r3, #3
 800bc9c:	b2da      	uxtb	r2, r3
 800bc9e:	683b      	ldr	r3, [r7, #0]
 800bca0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bca6:	0e9b      	lsrs	r3, r3, #26
 800bca8:	b2db      	uxtb	r3, r3
 800bcaa:	f003 0307 	and.w	r3, r3, #7
 800bcae:	b2da      	uxtb	r2, r3
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcb8:	0d9b      	lsrs	r3, r3, #22
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	f003 030f 	and.w	r3, r3, #15
 800bcc0:	b2da      	uxtb	r2, r3
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcca:	0d5b      	lsrs	r3, r3, #21
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	f003 0301 	and.w	r3, r3, #1
 800bcd2:	b2da      	uxtb	r2, r3
 800bcd4:	683b      	ldr	r3, [r7, #0]
 800bcd6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bce6:	0c1b      	lsrs	r3, r3, #16
 800bce8:	b2db      	uxtb	r3, r3
 800bcea:	f003 0301 	and.w	r3, r3, #1
 800bcee:	b2da      	uxtb	r2, r3
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bcfa:	0bdb      	lsrs	r3, r3, #15
 800bcfc:	b2db      	uxtb	r3, r3
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd0e:	0b9b      	lsrs	r3, r3, #14
 800bd10:	b2db      	uxtb	r3, r3
 800bd12:	f003 0301 	and.w	r3, r3, #1
 800bd16:	b2da      	uxtb	r2, r3
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd22:	0b5b      	lsrs	r3, r3, #13
 800bd24:	b2db      	uxtb	r3, r3
 800bd26:	f003 0301 	and.w	r3, r3, #1
 800bd2a:	b2da      	uxtb	r2, r3
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd36:	0b1b      	lsrs	r3, r3, #12
 800bd38:	b2db      	uxtb	r3, r3
 800bd3a:	f003 0301 	and.w	r3, r3, #1
 800bd3e:	b2da      	uxtb	r2, r3
 800bd40:	683b      	ldr	r3, [r7, #0]
 800bd42:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd4a:	0a9b      	lsrs	r3, r3, #10
 800bd4c:	b2db      	uxtb	r3, r3
 800bd4e:	f003 0303 	and.w	r3, r3, #3
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	683b      	ldr	r3, [r7, #0]
 800bd56:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd5e:	0a1b      	lsrs	r3, r3, #8
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	f003 0303 	and.w	r3, r3, #3
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bd72:	085b      	lsrs	r3, r3, #1
 800bd74:	b2db      	uxtb	r3, r3
 800bd76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bd7a:	b2da      	uxtb	r2, r3
 800bd7c:	683b      	ldr	r3, [r7, #0]
 800bd7e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2201      	movs	r2, #1
 800bd86:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr
 800bd98:	004005ff 	.word	0x004005ff

0800bd9c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b083      	sub	sp, #12
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
 800bda4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bdaa:	683b      	ldr	r3, [r7, #0]
 800bdac:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bdba:	683b      	ldr	r3, [r7, #0]
 800bdbc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bde6:	2300      	movs	r3, #0
}
 800bde8:	4618      	mov	r0, r3
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bdf4:	b5b0      	push	{r4, r5, r7, lr}
 800bdf6:	b08e      	sub	sp, #56	; 0x38
 800bdf8:	af04      	add	r7, sp, #16
 800bdfa:	6078      	str	r0, [r7, #4]
 800bdfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	2203      	movs	r2, #3
 800be02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be0a:	2b03      	cmp	r3, #3
 800be0c:	d02e      	beq.n	800be6c <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be14:	d106      	bne.n	800be24 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be1a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	639a      	str	r2, [r3, #56]	; 0x38
 800be22:	e029      	b.n	800be78 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800be2a:	d10a      	bne.n	800be42 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800be2c:	6878      	ldr	r0, [r7, #4]
 800be2e:	f000 fb0f 	bl	800c450 <SD_WideBus_Enable>
 800be32:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be3a:	431a      	orrs	r2, r3
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	639a      	str	r2, [r3, #56]	; 0x38
 800be40:	e01a      	b.n	800be78 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10a      	bne.n	800be5e <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800be48:	6878      	ldr	r0, [r7, #4]
 800be4a:	f000 fb4c 	bl	800c4e6 <SD_WideBus_Disable>
 800be4e:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be56:	431a      	orrs	r2, r3
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	639a      	str	r2, [r3, #56]	; 0x38
 800be5c:	e00c      	b.n	800be78 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be62:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	639a      	str	r2, [r3, #56]	; 0x38
 800be6a:	e005      	b.n	800be78 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d009      	beq.n	800be94 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	4a18      	ldr	r2, [pc, #96]	; (800bee8 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800be86:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	2201      	movs	r2, #1
 800be8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800be90:	2301      	movs	r3, #1
 800be92:	e024      	b.n	800bede <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	689b      	ldr	r3, [r3, #8]
 800be9e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	695b      	ldr	r3, [r3, #20]
 800beae:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	699b      	ldr	r3, [r3, #24]
 800beb4:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681d      	ldr	r5, [r3, #0]
 800beba:	466c      	mov	r4, sp
 800bebc:	f107 0318 	add.w	r3, r7, #24
 800bec0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bec4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bec8:	f107 030c 	add.w	r3, r7, #12
 800becc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bece:	4628      	mov	r0, r5
 800bed0:	f002 ffd8 	bl	800ee84 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	2201      	movs	r2, #1
 800bed8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bedc:	2300      	movs	r3, #0
}
 800bede:	4618      	mov	r0, r3
 800bee0:	3728      	adds	r7, #40	; 0x28
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bdb0      	pop	{r4, r5, r7, pc}
 800bee6:	bf00      	nop
 800bee8:	004005ff 	.word	0x004005ff

0800beec <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b086      	sub	sp, #24
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bef8:	f107 030c 	add.w	r3, r7, #12
 800befc:	4619      	mov	r1, r3
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fa7e 	bl	800c400 <SD_SendStatus>
 800bf04:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bf06:	697b      	ldr	r3, [r7, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d005      	beq.n	800bf18 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf10:	697b      	ldr	r3, [r7, #20]
 800bf12:	431a      	orrs	r2, r3
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	0a5b      	lsrs	r3, r3, #9
 800bf1c:	f003 030f 	and.w	r3, r3, #15
 800bf20:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bf22:	693b      	ldr	r3, [r7, #16]
}
 800bf24:	4618      	mov	r0, r3
 800bf26:	3718      	adds	r7, #24
 800bf28:	46bd      	mov	sp, r7
 800bf2a:	bd80      	pop	{r7, pc}

0800bf2c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf38:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bf48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bf4a:	bf00      	nop
 800bf4c:	3714      	adds	r7, #20
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf56:	b580      	push	{r7, lr}
 800bf58:	b084      	sub	sp, #16
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf62:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf68:	2b82      	cmp	r3, #130	; 0x82
 800bf6a:	d111      	bne.n	800bf90 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f003 f90f 	bl	800f194 <SDMMC_CmdStopTransfer>
 800bf76:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d008      	beq.n	800bf90 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	431a      	orrs	r2, r3
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800bf8a:	68f8      	ldr	r0, [r7, #12]
 800bf8c:	f7ff fd58 	bl	800ba40 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f022 0208 	bic.w	r2, r2, #8
 800bf9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f240 523a 	movw	r2, #1338	; 0x53a
 800bfa8:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	2201      	movs	r2, #1
 800bfae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800bfb8:	68f8      	ldr	r0, [r7, #12]
 800bfba:	f005 f893 	bl	80110e4 <HAL_SD_RxCpltCallback>
#endif
}
 800bfbe:	bf00      	nop
 800bfc0:	3710      	adds	r7, #16
 800bfc2:	46bd      	mov	sp, r7
 800bfc4:	bd80      	pop	{r7, pc}
	...

0800bfc8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b086      	sub	sp, #24
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfd4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f7fc fc28 	bl	800882c <HAL_DMA_GetError>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d03e      	beq.n	800c060 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800bfe2:	697b      	ldr	r3, [r7, #20]
 800bfe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfe6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bfe8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bff0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d002      	beq.n	800bffe <SD_DMAError+0x36>
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	2b01      	cmp	r3, #1
 800bffc:	d12d      	bne.n	800c05a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bffe:	697b      	ldr	r3, [r7, #20]
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	4a19      	ldr	r2, [pc, #100]	; (800c068 <SD_DMAError+0xa0>)
 800c004:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c00c:	697b      	ldr	r3, [r7, #20]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800c014:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800c022:	6978      	ldr	r0, [r7, #20]
 800c024:	f7ff ff62 	bl	800beec <HAL_SD_GetCardState>
 800c028:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	2b06      	cmp	r3, #6
 800c02e:	d002      	beq.n	800c036 <SD_DMAError+0x6e>
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	2b05      	cmp	r3, #5
 800c034:	d10a      	bne.n	800c04c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c036:	697b      	ldr	r3, [r7, #20]
 800c038:	681b      	ldr	r3, [r3, #0]
 800c03a:	4618      	mov	r0, r3
 800c03c:	f003 f8aa 	bl	800f194 <SDMMC_CmdStopTransfer>
 800c040:	4602      	mov	r2, r0
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c046:	431a      	orrs	r2, r3
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800c04c:	697b      	ldr	r3, [r7, #20]
 800c04e:	2201      	movs	r2, #1
 800c050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800c054:	697b      	ldr	r3, [r7, #20]
 800c056:	2200      	movs	r2, #0
 800c058:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800c05a:	6978      	ldr	r0, [r7, #20]
 800c05c:	f7ff fcf0 	bl	800ba40 <HAL_SD_ErrorCallback>
#endif
  }
}
 800c060:	bf00      	nop
 800c062:	3718      	adds	r7, #24
 800c064:	46bd      	mov	sp, r7
 800c066:	bd80      	pop	{r7, pc}
 800c068:	004005ff 	.word	0x004005ff

0800c06c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b084      	sub	sp, #16
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c078:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	f240 523a 	movw	r2, #1338	; 0x53a
 800c082:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c084:	68f8      	ldr	r0, [r7, #12]
 800c086:	f7ff ff31 	bl	800beec <HAL_SD_GetCardState>
 800c08a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c08c:	68fb      	ldr	r3, [r7, #12]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	2200      	movs	r2, #0
 800c098:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	2b06      	cmp	r3, #6
 800c09e:	d002      	beq.n	800c0a6 <SD_DMATxAbort+0x3a>
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2b05      	cmp	r3, #5
 800c0a4:	d10a      	bne.n	800c0bc <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4618      	mov	r0, r3
 800c0ac:	f003 f872 	bl	800f194 <SDMMC_CmdStopTransfer>
 800c0b0:	4602      	mov	r2, r0
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0b6:	431a      	orrs	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d103      	bne.n	800c0cc <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c0c4:	68f8      	ldr	r0, [r7, #12]
 800c0c6:	f004 fff9 	bl	80110bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c0ca:	e002      	b.n	800c0d2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c0cc:	68f8      	ldr	r0, [r7, #12]
 800c0ce:	f7ff fcb7 	bl	800ba40 <HAL_SD_ErrorCallback>
}
 800c0d2:	bf00      	nop
 800c0d4:	3710      	adds	r7, #16
 800c0d6:	46bd      	mov	sp, r7
 800c0d8:	bd80      	pop	{r7, pc}

0800c0da <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800c0da:	b580      	push	{r7, lr}
 800c0dc:	b084      	sub	sp, #16
 800c0de:	af00      	add	r7, sp, #0
 800c0e0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0e6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f240 523a 	movw	r2, #1338	; 0x53a
 800c0f0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800c0f2:	68f8      	ldr	r0, [r7, #12]
 800c0f4:	f7ff fefa 	bl	800beec <HAL_SD_GetCardState>
 800c0f8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	2201      	movs	r2, #1
 800c0fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	2200      	movs	r2, #0
 800c106:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800c108:	68bb      	ldr	r3, [r7, #8]
 800c10a:	2b06      	cmp	r3, #6
 800c10c:	d002      	beq.n	800c114 <SD_DMARxAbort+0x3a>
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b05      	cmp	r3, #5
 800c112:	d10a      	bne.n	800c12a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4618      	mov	r0, r3
 800c11a:	f003 f83b 	bl	800f194 <SDMMC_CmdStopTransfer>
 800c11e:	4602      	mov	r2, r0
 800c120:	68fb      	ldr	r3, [r7, #12]
 800c122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c124:	431a      	orrs	r2, r3
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d103      	bne.n	800c13a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800c132:	68f8      	ldr	r0, [r7, #12]
 800c134:	f004 ffc2 	bl	80110bc <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800c138:	e002      	b.n	800c140 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800c13a:	68f8      	ldr	r0, [r7, #12]
 800c13c:	f7ff fc80 	bl	800ba40 <HAL_SD_ErrorCallback>
}
 800c140:	bf00      	nop
 800c142:	3710      	adds	r7, #16
 800c144:	46bd      	mov	sp, r7
 800c146:	bd80      	pop	{r7, pc}

0800c148 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800c148:	b5b0      	push	{r4, r5, r7, lr}
 800c14a:	b094      	sub	sp, #80	; 0x50
 800c14c:	af04      	add	r7, sp, #16
 800c14e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800c150:	2301      	movs	r3, #1
 800c152:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	4618      	mov	r0, r3
 800c15a:	f002 feec 	bl	800ef36 <SDMMC_GetPowerState>
 800c15e:	4603      	mov	r3, r0
 800c160:	2b00      	cmp	r3, #0
 800c162:	d102      	bne.n	800c16a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c164:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800c168:	e0b7      	b.n	800c2da <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c16e:	2b03      	cmp	r3, #3
 800c170:	d02f      	beq.n	800c1d2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	4618      	mov	r0, r3
 800c178:	f003 f917 	bl	800f3aa <SDMMC_CmdSendCID>
 800c17c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d001      	beq.n	800c188 <SD_InitCard+0x40>
    {
      return errorstate;
 800c184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c186:	e0a8      	b.n	800c2da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2100      	movs	r1, #0
 800c18e:	4618      	mov	r0, r3
 800c190:	f002 ff17 	bl	800efc2 <SDMMC_GetResponse>
 800c194:	4602      	mov	r2, r0
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	2104      	movs	r1, #4
 800c1a0:	4618      	mov	r0, r3
 800c1a2:	f002 ff0e 	bl	800efc2 <SDMMC_GetResponse>
 800c1a6:	4602      	mov	r2, r0
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	2108      	movs	r1, #8
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f002 ff05 	bl	800efc2 <SDMMC_GetResponse>
 800c1b8:	4602      	mov	r2, r0
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	210c      	movs	r1, #12
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	f002 fefc 	bl	800efc2 <SDMMC_GetResponse>
 800c1ca:	4602      	mov	r2, r0
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1d6:	2b03      	cmp	r3, #3
 800c1d8:	d00d      	beq.n	800c1f6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f107 020e 	add.w	r2, r7, #14
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	f003 f91d 	bl	800f424 <SDMMC_CmdSetRelAdd>
 800c1ea:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d001      	beq.n	800c1f6 <SD_InitCard+0xae>
    {
      return errorstate;
 800c1f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f4:	e071      	b.n	800c2da <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1fa:	2b03      	cmp	r3, #3
 800c1fc:	d036      	beq.n	800c26c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c1fe:	89fb      	ldrh	r3, [r7, #14]
 800c200:	461a      	mov	r2, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681a      	ldr	r2, [r3, #0]
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c20e:	041b      	lsls	r3, r3, #16
 800c210:	4619      	mov	r1, r3
 800c212:	4610      	mov	r0, r2
 800c214:	f003 f8e7 	bl	800f3e6 <SDMMC_CmdSendCSD>
 800c218:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d001      	beq.n	800c224 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c222:	e05a      	b.n	800c2da <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	2100      	movs	r1, #0
 800c22a:	4618      	mov	r0, r3
 800c22c:	f002 fec9 	bl	800efc2 <SDMMC_GetResponse>
 800c230:	4602      	mov	r2, r0
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	2104      	movs	r1, #4
 800c23c:	4618      	mov	r0, r3
 800c23e:	f002 fec0 	bl	800efc2 <SDMMC_GetResponse>
 800c242:	4602      	mov	r2, r0
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	2108      	movs	r1, #8
 800c24e:	4618      	mov	r0, r3
 800c250:	f002 feb7 	bl	800efc2 <SDMMC_GetResponse>
 800c254:	4602      	mov	r2, r0
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	210c      	movs	r1, #12
 800c260:	4618      	mov	r0, r3
 800c262:	f002 feae 	bl	800efc2 <SDMMC_GetResponse>
 800c266:	4602      	mov	r2, r0
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	2104      	movs	r1, #4
 800c272:	4618      	mov	r0, r3
 800c274:	f002 fea5 	bl	800efc2 <SDMMC_GetResponse>
 800c278:	4603      	mov	r3, r0
 800c27a:	0d1a      	lsrs	r2, r3, #20
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c280:	f107 0310 	add.w	r3, r7, #16
 800c284:	4619      	mov	r1, r3
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f7ff fbe4 	bl	800ba54 <HAL_SD_GetCardCSD>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d002      	beq.n	800c298 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c292:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c296:	e020      	b.n	800c2da <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6819      	ldr	r1, [r3, #0]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c2a0:	041b      	lsls	r3, r3, #16
 800c2a2:	f04f 0400 	mov.w	r4, #0
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	4623      	mov	r3, r4
 800c2aa:	4608      	mov	r0, r1
 800c2ac:	f002 ff94 	bl	800f1d8 <SDMMC_CmdSelDesel>
 800c2b0:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <SD_InitCard+0x174>
  {
    return errorstate;
 800c2b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c2ba:	e00e      	b.n	800c2da <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681d      	ldr	r5, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	466c      	mov	r4, sp
 800c2c4:	f103 0210 	add.w	r2, r3, #16
 800c2c8:	ca07      	ldmia	r2, {r0, r1, r2}
 800c2ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2ce:	3304      	adds	r3, #4
 800c2d0:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c2d2:	4628      	mov	r0, r5
 800c2d4:	f002 fdd6 	bl	800ee84 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c2d8:	2300      	movs	r3, #0
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3740      	adds	r7, #64	; 0x40
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c2e4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	b086      	sub	sp, #24
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	617b      	str	r3, [r7, #20]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	f002 ff8e 	bl	800f21e <SDMMC_CmdGoIdleState>
 800c302:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c304:	68fb      	ldr	r3, [r7, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	d001      	beq.n	800c30e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	e072      	b.n	800c3f4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	4618      	mov	r0, r3
 800c314:	f002 ffa1 	bl	800f25a <SDMMC_CmdOperCond>
 800c318:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00d      	beq.n	800c33c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	4618      	mov	r0, r3
 800c32c:	f002 ff77 	bl	800f21e <SDMMC_CmdGoIdleState>
 800c330:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d004      	beq.n	800c342 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	e05b      	b.n	800c3f4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2201      	movs	r2, #1
 800c340:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c346:	2b01      	cmp	r3, #1
 800c348:	d137      	bne.n	800c3ba <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	2100      	movs	r1, #0
 800c350:	4618      	mov	r0, r3
 800c352:	f002 ffa1 	bl	800f298 <SDMMC_CmdAppCommand>
 800c356:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d02d      	beq.n	800c3ba <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c35e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c362:	e047      	b.n	800c3f4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	2100      	movs	r1, #0
 800c36a:	4618      	mov	r0, r3
 800c36c:	f002 ff94 	bl	800f298 <SDMMC_CmdAppCommand>
 800c370:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d001      	beq.n	800c37c <SD_PowerON+0x98>
    {
      return errorstate;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	e03b      	b.n	800c3f4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	491e      	ldr	r1, [pc, #120]	; (800c3fc <SD_PowerON+0x118>)
 800c382:	4618      	mov	r0, r3
 800c384:	f002 ffaa 	bl	800f2dc <SDMMC_CmdAppOperCommand>
 800c388:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d002      	beq.n	800c396 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c390:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c394:	e02e      	b.n	800c3f4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2100      	movs	r1, #0
 800c39c:	4618      	mov	r0, r3
 800c39e:	f002 fe10 	bl	800efc2 <SDMMC_GetResponse>
 800c3a2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c3a4:	697b      	ldr	r3, [r7, #20]
 800c3a6:	0fdb      	lsrs	r3, r3, #31
 800c3a8:	2b01      	cmp	r3, #1
 800c3aa:	d101      	bne.n	800c3b0 <SD_PowerON+0xcc>
 800c3ac:	2301      	movs	r3, #1
 800c3ae:	e000      	b.n	800c3b2 <SD_PowerON+0xce>
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	613b      	str	r3, [r7, #16]

    count++;
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	3301      	adds	r3, #1
 800c3b8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c3c0:	4293      	cmp	r3, r2
 800c3c2:	d802      	bhi.n	800c3ca <SD_PowerON+0xe6>
 800c3c4:	693b      	ldr	r3, [r7, #16]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d0cc      	beq.n	800c364 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c3ca:	68bb      	ldr	r3, [r7, #8]
 800c3cc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d902      	bls.n	800c3da <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c3d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c3d8:	e00c      	b.n	800c3f4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d003      	beq.n	800c3ec <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2201      	movs	r2, #1
 800c3e8:	645a      	str	r2, [r3, #68]	; 0x44
 800c3ea:	e002      	b.n	800c3f2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c3f2:	2300      	movs	r3, #0
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3718      	adds	r7, #24
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}
 800c3fc:	c1100000 	.word	0xc1100000

0800c400 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
 800c408:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d102      	bne.n	800c416 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c410:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c414:	e018      	b.n	800c448 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	681a      	ldr	r2, [r3, #0]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c41e:	041b      	lsls	r3, r3, #16
 800c420:	4619      	mov	r1, r3
 800c422:	4610      	mov	r0, r2
 800c424:	f003 f81f 	bl	800f466 <SDMMC_CmdSendStatus>
 800c428:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d001      	beq.n	800c434 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	e009      	b.n	800c448 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2100      	movs	r1, #0
 800c43a:	4618      	mov	r0, r3
 800c43c:	f002 fdc1 	bl	800efc2 <SDMMC_GetResponse>
 800c440:	4602      	mov	r2, r0
 800c442:	683b      	ldr	r3, [r7, #0]
 800c444:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c446:	2300      	movs	r3, #0
}
 800c448:	4618      	mov	r0, r3
 800c44a:	3710      	adds	r7, #16
 800c44c:	46bd      	mov	sp, r7
 800c44e:	bd80      	pop	{r7, pc}

0800c450 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c450:	b580      	push	{r7, lr}
 800c452:	b086      	sub	sp, #24
 800c454:	af00      	add	r7, sp, #0
 800c456:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c458:	2300      	movs	r3, #0
 800c45a:	60fb      	str	r3, [r7, #12]
 800c45c:	2300      	movs	r3, #0
 800c45e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	2100      	movs	r1, #0
 800c466:	4618      	mov	r0, r3
 800c468:	f002 fdab 	bl	800efc2 <SDMMC_GetResponse>
 800c46c:	4603      	mov	r3, r0
 800c46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c476:	d102      	bne.n	800c47e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c478:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c47c:	e02f      	b.n	800c4de <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c47e:	f107 030c 	add.w	r3, r7, #12
 800c482:	4619      	mov	r1, r3
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f879 	bl	800c57c <SD_FindSCR>
 800c48a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d001      	beq.n	800c496 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	e023      	b.n	800c4de <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c496:	693b      	ldr	r3, [r7, #16]
 800c498:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d01c      	beq.n	800c4da <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681a      	ldr	r2, [r3, #0]
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4a8:	041b      	lsls	r3, r3, #16
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	4610      	mov	r0, r2
 800c4ae:	f002 fef3 	bl	800f298 <SDMMC_CmdAppCommand>
 800c4b2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4b4:	697b      	ldr	r3, [r7, #20]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c4ba:	697b      	ldr	r3, [r7, #20]
 800c4bc:	e00f      	b.n	800c4de <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	2102      	movs	r1, #2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f002 ff2d 	bl	800f324 <SDMMC_CmdBusWidth>
 800c4ca:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d001      	beq.n	800c4d6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	e003      	b.n	800c4de <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c4d6:	2300      	movs	r3, #0
 800c4d8:	e001      	b.n	800c4de <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c4da:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3718      	adds	r7, #24
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}

0800c4e6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c4e6:	b580      	push	{r7, lr}
 800c4e8:	b086      	sub	sp, #24
 800c4ea:	af00      	add	r7, sp, #0
 800c4ec:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c4ee:	2300      	movs	r3, #0
 800c4f0:	60fb      	str	r3, [r7, #12]
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2100      	movs	r1, #0
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	f002 fd60 	bl	800efc2 <SDMMC_GetResponse>
 800c502:	4603      	mov	r3, r0
 800c504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c508:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c50c:	d102      	bne.n	800c514 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c50e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c512:	e02f      	b.n	800c574 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c514:	f107 030c 	add.w	r3, r7, #12
 800c518:	4619      	mov	r1, r3
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f000 f82e 	bl	800c57c <SD_FindSCR>
 800c520:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c522:	697b      	ldr	r3, [r7, #20]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d001      	beq.n	800c52c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	e023      	b.n	800c574 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c532:	2b00      	cmp	r3, #0
 800c534:	d01c      	beq.n	800c570 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681a      	ldr	r2, [r3, #0]
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c53e:	041b      	lsls	r3, r3, #16
 800c540:	4619      	mov	r1, r3
 800c542:	4610      	mov	r0, r2
 800c544:	f002 fea8 	bl	800f298 <SDMMC_CmdAppCommand>
 800c548:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d001      	beq.n	800c554 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c550:	697b      	ldr	r3, [r7, #20]
 800c552:	e00f      	b.n	800c574 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	2100      	movs	r1, #0
 800c55a:	4618      	mov	r0, r3
 800c55c:	f002 fee2 	bl	800f324 <SDMMC_CmdBusWidth>
 800c560:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c562:	697b      	ldr	r3, [r7, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d001      	beq.n	800c56c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	e003      	b.n	800c574 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c56c:	2300      	movs	r3, #0
 800c56e:	e001      	b.n	800c574 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c570:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c574:	4618      	mov	r0, r3
 800c576:	3718      	adds	r7, #24
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}

0800c57c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c57c:	b590      	push	{r4, r7, lr}
 800c57e:	b08f      	sub	sp, #60	; 0x3c
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
 800c584:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c586:	f7fb f8b7 	bl	80076f8 <HAL_GetTick>
 800c58a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c58c:	2300      	movs	r3, #0
 800c58e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c590:	2300      	movs	r3, #0
 800c592:	60bb      	str	r3, [r7, #8]
 800c594:	2300      	movs	r3, #0
 800c596:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	2108      	movs	r1, #8
 800c5a2:	4618      	mov	r0, r3
 800c5a4:	f002 fd4c 	bl	800f040 <SDMMC_CmdBlockLength>
 800c5a8:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d001      	beq.n	800c5b4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c5b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5b2:	e0a9      	b.n	800c708 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681a      	ldr	r2, [r3, #0]
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c5bc:	041b      	lsls	r3, r3, #16
 800c5be:	4619      	mov	r1, r3
 800c5c0:	4610      	mov	r0, r2
 800c5c2:	f002 fe69 	bl	800f298 <SDMMC_CmdAppCommand>
 800c5c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d001      	beq.n	800c5d2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c5ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5d0:	e09a      	b.n	800c708 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c5d2:	f04f 33ff 	mov.w	r3, #4294967295
 800c5d6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c5d8:	2308      	movs	r3, #8
 800c5da:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c5dc:	2330      	movs	r3, #48	; 0x30
 800c5de:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c5e0:	2302      	movs	r3, #2
 800c5e2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c5e8:	2301      	movs	r3, #1
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f107 0210 	add.w	r2, r7, #16
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f002 fcf6 	bl	800efe8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	4618      	mov	r0, r3
 800c602:	f002 feb1 	bl	800f368 <SDMMC_CmdSendSCR>
 800c606:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d022      	beq.n	800c654 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c610:	e07a      	b.n	800c708 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c618:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d00e      	beq.n	800c63e <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6819      	ldr	r1, [r3, #0]
 800c624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c626:	009b      	lsls	r3, r3, #2
 800c628:	f107 0208 	add.w	r2, r7, #8
 800c62c:	18d4      	adds	r4, r2, r3
 800c62e:	4608      	mov	r0, r1
 800c630:	f002 fc54 	bl	800eedc <SDMMC_ReadFIFO>
 800c634:	4603      	mov	r3, r0
 800c636:	6023      	str	r3, [r4, #0]
      index++;
 800c638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63a:	3301      	adds	r3, #1
 800c63c:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c63e:	f7fb f85b 	bl	80076f8 <HAL_GetTick>
 800c642:	4602      	mov	r2, r0
 800c644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c646:	1ad3      	subs	r3, r2, r3
 800c648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c64c:	d102      	bne.n	800c654 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c64e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c652:	e059      	b.n	800c708 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c65a:	f240 432a 	movw	r3, #1066	; 0x42a
 800c65e:	4013      	ands	r3, r2
 800c660:	2b00      	cmp	r3, #0
 800c662:	d0d6      	beq.n	800c612 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c66a:	f003 0308 	and.w	r3, r3, #8
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d005      	beq.n	800c67e <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	2208      	movs	r2, #8
 800c678:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c67a:	2308      	movs	r3, #8
 800c67c:	e044      	b.n	800c708 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c684:	f003 0302 	and.w	r3, r3, #2
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d005      	beq.n	800c698 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2202      	movs	r2, #2
 800c692:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c694:	2302      	movs	r3, #2
 800c696:	e037      	b.n	800c708 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c69e:	f003 0320 	and.w	r3, r3, #32
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d005      	beq.n	800c6b2 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c6ae:	2320      	movs	r3, #32
 800c6b0:	e02a      	b.n	800c708 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f240 523a 	movw	r2, #1338	; 0x53a
 800c6ba:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	061a      	lsls	r2, r3, #24
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	021b      	lsls	r3, r3, #8
 800c6c4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6c8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	0a1b      	lsrs	r3, r3, #8
 800c6ce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c6d2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	0e1b      	lsrs	r3, r3, #24
 800c6d8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6dc:	601a      	str	r2, [r3, #0]
    scr++;
 800c6de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6e0:	3304      	adds	r3, #4
 800c6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c6e4:	68bb      	ldr	r3, [r7, #8]
 800c6e6:	061a      	lsls	r2, r3, #24
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	021b      	lsls	r3, r3, #8
 800c6ec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c6f0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	0a1b      	lsrs	r3, r3, #8
 800c6f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c6fa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c6fc:	68bb      	ldr	r3, [r7, #8]
 800c6fe:	0e1b      	lsrs	r3, r3, #24
 800c700:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c704:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	373c      	adds	r7, #60	; 0x3c
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd90      	pop	{r4, r7, pc}

0800c710 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b086      	sub	sp, #24
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c71c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c722:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d03f      	beq.n	800c7aa <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c72a:	2300      	movs	r3, #0
 800c72c:	617b      	str	r3, [r7, #20]
 800c72e:	e033      	b.n	800c798 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	4618      	mov	r0, r3
 800c736:	f002 fbd1 	bl	800eedc <SDMMC_ReadFIFO>
 800c73a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	b2da      	uxtb	r2, r3
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	3301      	adds	r3, #1
 800c748:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c74a:	693b      	ldr	r3, [r7, #16]
 800c74c:	3b01      	subs	r3, #1
 800c74e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	0a1b      	lsrs	r3, r3, #8
 800c754:	b2da      	uxtb	r2, r3
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	3301      	adds	r3, #1
 800c75e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c760:	693b      	ldr	r3, [r7, #16]
 800c762:	3b01      	subs	r3, #1
 800c764:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c766:	68bb      	ldr	r3, [r7, #8]
 800c768:	0c1b      	lsrs	r3, r3, #16
 800c76a:	b2da      	uxtb	r2, r3
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	3301      	adds	r3, #1
 800c774:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3b01      	subs	r3, #1
 800c77a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	0e1b      	lsrs	r3, r3, #24
 800c780:	b2da      	uxtb	r2, r3
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	3301      	adds	r3, #1
 800c78a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	3b01      	subs	r3, #1
 800c790:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	3301      	adds	r3, #1
 800c796:	617b      	str	r3, [r7, #20]
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2b07      	cmp	r3, #7
 800c79c:	d9c8      	bls.n	800c730 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	68fa      	ldr	r2, [r7, #12]
 800c7a2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	693a      	ldr	r2, [r7, #16]
 800c7a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c7aa:	bf00      	nop
 800c7ac:	3718      	adds	r7, #24
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	bd80      	pop	{r7, pc}

0800c7b2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c7b2:	b580      	push	{r7, lr}
 800c7b4:	b086      	sub	sp, #24
 800c7b6:	af00      	add	r7, sp, #0
 800c7b8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6a1b      	ldr	r3, [r3, #32]
 800c7be:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7c4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c7c6:	693b      	ldr	r3, [r7, #16]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d043      	beq.n	800c854 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	617b      	str	r3, [r7, #20]
 800c7d0:	e037      	b.n	800c842 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	781b      	ldrb	r3, [r3, #0]
 800c7d6:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	3b01      	subs	r3, #1
 800c7e2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	781b      	ldrb	r3, [r3, #0]
 800c7e8:	021a      	lsls	r2, r3, #8
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	4313      	orrs	r3, r2
 800c7ee:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c7f6:	693b      	ldr	r3, [r7, #16]
 800c7f8:	3b01      	subs	r3, #1
 800c7fa:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	781b      	ldrb	r3, [r3, #0]
 800c800:	041a      	lsls	r2, r3, #16
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	4313      	orrs	r3, r2
 800c806:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	3301      	adds	r3, #1
 800c80c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	3b01      	subs	r3, #1
 800c812:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	061a      	lsls	r2, r3, #24
 800c81a:	68bb      	ldr	r3, [r7, #8]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	3301      	adds	r3, #1
 800c824:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c826:	693b      	ldr	r3, [r7, #16]
 800c828:	3b01      	subs	r3, #1
 800c82a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f107 0208 	add.w	r2, r7, #8
 800c834:	4611      	mov	r1, r2
 800c836:	4618      	mov	r0, r3
 800c838:	f002 fb5d 	bl	800eef6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c83c:	697b      	ldr	r3, [r7, #20]
 800c83e:	3301      	adds	r3, #1
 800c840:	617b      	str	r3, [r7, #20]
 800c842:	697b      	ldr	r3, [r7, #20]
 800c844:	2b07      	cmp	r3, #7
 800c846:	d9c4      	bls.n	800c7d2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	68fa      	ldr	r2, [r7, #12]
 800c84c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	693a      	ldr	r2, [r7, #16]
 800c852:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c854:	bf00      	nop
 800c856:	3718      	adds	r7, #24
 800c858:	46bd      	mov	sp, r7
 800c85a:	bd80      	pop	{r7, pc}

0800c85c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b084      	sub	sp, #16
 800c860:	af00      	add	r7, sp, #0
 800c862:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	2b00      	cmp	r3, #0
 800c868:	d101      	bne.n	800c86e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c86a:	2301      	movs	r3, #1
 800c86c:	e084      	b.n	800c978 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	2200      	movs	r2, #0
 800c872:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d106      	bne.n	800c88e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	2200      	movs	r2, #0
 800c884:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	f7f8 fcfb 	bl	8005284 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	2202      	movs	r2, #2
 800c892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	681a      	ldr	r2, [r3, #0]
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8a4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8ae:	d902      	bls.n	800c8b6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	e002      	b.n	800c8bc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c8b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	68db      	ldr	r3, [r3, #12]
 800c8c0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c8c4:	d007      	beq.n	800c8d6 <HAL_SPI_Init+0x7a>
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	68db      	ldr	r3, [r3, #12]
 800c8ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8ce:	d002      	beq.n	800c8d6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10b      	bne.n	800c8f6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8e6:	d903      	bls.n	800c8f0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2202      	movs	r2, #2
 800c8ec:	631a      	str	r2, [r3, #48]	; 0x30
 800c8ee:	e002      	b.n	800c8f6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2201      	movs	r2, #1
 800c8f4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	685a      	ldr	r2, [r3, #4]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	431a      	orrs	r2, r3
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	691b      	ldr	r3, [r3, #16]
 800c904:	431a      	orrs	r2, r3
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	431a      	orrs	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	699b      	ldr	r3, [r3, #24]
 800c910:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c914:	431a      	orrs	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	69db      	ldr	r3, [r3, #28]
 800c91a:	431a      	orrs	r2, r3
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	6a1b      	ldr	r3, [r3, #32]
 800c920:	ea42 0103 	orr.w	r1, r2, r3
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	430a      	orrs	r2, r1
 800c92e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	699b      	ldr	r3, [r3, #24]
 800c934:	0c1b      	lsrs	r3, r3, #16
 800c936:	f003 0204 	and.w	r2, r3, #4
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93e:	431a      	orrs	r2, r3
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c944:	431a      	orrs	r2, r3
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	68db      	ldr	r3, [r3, #12]
 800c94a:	ea42 0103 	orr.w	r1, r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	430a      	orrs	r2, r1
 800c956:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	69da      	ldr	r2, [r3, #28]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c966:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2200      	movs	r2, #0
 800c96c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2201      	movs	r2, #1
 800c972:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b086      	sub	sp, #24
 800c984:	af00      	add	r7, sp, #0
 800c986:	60f8      	str	r0, [r7, #12]
 800c988:	60b9      	str	r1, [r7, #8]
 800c98a:	4613      	mov	r3, r2
 800c98c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	689b      	ldr	r3, [r3, #8]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d110      	bne.n	800c9bc <HAL_SPI_Receive_DMA+0x3c>
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c9a2:	d10b      	bne.n	800c9bc <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	2204      	movs	r2, #4
 800c9a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c9ac:	88fb      	ldrh	r3, [r7, #6]
 800c9ae:	68ba      	ldr	r2, [r7, #8]
 800c9b0:	68b9      	ldr	r1, [r7, #8]
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f000 f900 	bl	800cbb8 <HAL_SPI_TransmitReceive_DMA>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	e0f3      	b.n	800cba4 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d101      	bne.n	800c9ca <HAL_SPI_Receive_DMA+0x4a>
 800c9c6:	2302      	movs	r3, #2
 800c9c8:	e0ec      	b.n	800cba4 <HAL_SPI_Receive_DMA+0x224>
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2201      	movs	r2, #1
 800c9ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	d002      	beq.n	800c9e4 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800c9de:	2302      	movs	r3, #2
 800c9e0:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c9e2:	e0da      	b.n	800cb9a <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800c9e4:	68bb      	ldr	r3, [r7, #8]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d002      	beq.n	800c9f0 <HAL_SPI_Receive_DMA+0x70>
 800c9ea:	88fb      	ldrh	r3, [r7, #6]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d102      	bne.n	800c9f6 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800c9f0:	2301      	movs	r3, #1
 800c9f2:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c9f4:	e0d1      	b.n	800cb9a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	2204      	movs	r2, #4
 800c9fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	2200      	movs	r2, #0
 800ca02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	68ba      	ldr	r2, [r7, #8]
 800ca08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	88fa      	ldrh	r2, [r7, #6]
 800ca0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	88fa      	ldrh	r2, [r7, #6]
 800ca16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2200      	movs	r2, #0
 800ca1e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	2200      	movs	r2, #0
 800ca2a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	689b      	ldr	r3, [r3, #8]
 800ca36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ca3a:	d107      	bne.n	800ca4c <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ca4a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	685a      	ldr	r2, [r3, #4]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800ca5a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800ca64:	d908      	bls.n	800ca78 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ca74:	605a      	str	r2, [r3, #4]
 800ca76:	e042      	b.n	800cafe <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	685a      	ldr	r2, [r3, #4]
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ca86:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca8c:	699b      	ldr	r3, [r3, #24]
 800ca8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca92:	d134      	bne.n	800cafe <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800caa2:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d111      	bne.n	800cad8 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	685a      	ldr	r2, [r3, #4]
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cac2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caca:	b29b      	uxth	r3, r3
 800cacc:	085b      	lsrs	r3, r3, #1
 800cace:	b29a      	uxth	r2, r3
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cad6:	e012      	b.n	800cafe <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	685a      	ldr	r2, [r3, #4]
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cae6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800caee:	b29b      	uxth	r3, r3
 800caf0:	085b      	lsrs	r3, r3, #1
 800caf2:	b29b      	uxth	r3, r3
 800caf4:	3301      	adds	r3, #1
 800caf6:	b29a      	uxth	r2, r3
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb02:	4a2a      	ldr	r2, [pc, #168]	; (800cbac <HAL_SPI_Receive_DMA+0x22c>)
 800cb04:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb0a:	4a29      	ldr	r2, [pc, #164]	; (800cbb0 <HAL_SPI_Receive_DMA+0x230>)
 800cb0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb12:	4a28      	ldr	r2, [pc, #160]	; (800cbb4 <HAL_SPI_Receive_DMA+0x234>)
 800cb14:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	330c      	adds	r3, #12
 800cb28:	4619      	mov	r1, r3
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb2e:	461a      	mov	r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb36:	b29b      	uxth	r3, r3
 800cb38:	f7fb fbfc 	bl	8008334 <HAL_DMA_Start_IT>
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d00c      	beq.n	800cb5c <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cb46:	f043 0210 	orr.w	r2, r3, #16
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cb4e:	2301      	movs	r3, #1
 800cb50:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2201      	movs	r2, #1
 800cb56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cb5a:	e01e      	b.n	800cb9a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb66:	2b40      	cmp	r3, #64	; 0x40
 800cb68:	d007      	beq.n	800cb7a <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	681a      	ldr	r2, [r3, #0]
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb78:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	f042 0220 	orr.w	r2, r2, #32
 800cb88:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685a      	ldr	r2, [r3, #4]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	f042 0201 	orr.w	r2, r2, #1
 800cb98:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cba2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba4:	4618      	mov	r0, r3
 800cba6:	3718      	adds	r7, #24
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}
 800cbac:	0800d239 	.word	0x0800d239
 800cbb0:	0800d121 	.word	0x0800d121
 800cbb4:	0800d271 	.word	0x0800d271

0800cbb8 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b086      	sub	sp, #24
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
 800cbc4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800cbd0:	2b01      	cmp	r3, #1
 800cbd2:	d101      	bne.n	800cbd8 <HAL_SPI_TransmitReceive_DMA+0x20>
 800cbd4:	2302      	movs	r3, #2
 800cbd6:	e16c      	b.n	800ceb2 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cbe6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800cbee:	7dbb      	ldrb	r3, [r7, #22]
 800cbf0:	2b01      	cmp	r3, #1
 800cbf2:	d00d      	beq.n	800cc10 <HAL_SPI_TransmitReceive_DMA+0x58>
 800cbf4:	693b      	ldr	r3, [r7, #16]
 800cbf6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800cbfa:	d106      	bne.n	800cc0a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	689b      	ldr	r3, [r3, #8]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d102      	bne.n	800cc0a <HAL_SPI_TransmitReceive_DMA+0x52>
 800cc04:	7dbb      	ldrb	r3, [r7, #22]
 800cc06:	2b04      	cmp	r3, #4
 800cc08:	d002      	beq.n	800cc10 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800cc0a:	2302      	movs	r3, #2
 800cc0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc0e:	e14b      	b.n	800cea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d005      	beq.n	800cc22 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d002      	beq.n	800cc22 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800cc1c:	887b      	ldrh	r3, [r7, #2]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d102      	bne.n	800cc28 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	75fb      	strb	r3, [r7, #23]
    goto error;
 800cc26:	e13f      	b.n	800cea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cc2e:	b2db      	uxtb	r3, r3
 800cc30:	2b04      	cmp	r3, #4
 800cc32:	d003      	beq.n	800cc3c <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2205      	movs	r2, #5
 800cc38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	68ba      	ldr	r2, [r7, #8]
 800cc46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	887a      	ldrh	r2, [r7, #2]
 800cc4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cc4e:	68fb      	ldr	r3, [r7, #12]
 800cc50:	887a      	ldrh	r2, [r7, #2]
 800cc52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	687a      	ldr	r2, [r7, #4]
 800cc58:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	887a      	ldrh	r2, [r7, #2]
 800cc5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	887a      	ldrh	r2, [r7, #2]
 800cc66:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2200      	movs	r2, #0
 800cc74:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	685a      	ldr	r2, [r3, #4]
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800cc84:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	68db      	ldr	r3, [r3, #12]
 800cc8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cc8e:	d908      	bls.n	800cca2 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	685a      	ldr	r2, [r3, #4]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cc9e:	605a      	str	r2, [r3, #4]
 800cca0:	e06f      	b.n	800cd82 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	685a      	ldr	r2, [r3, #4]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ccb0:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccb6:	699b      	ldr	r3, [r3, #24]
 800ccb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ccbc:	d126      	bne.n	800cd0c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800ccc2:	f003 0301 	and.w	r3, r3, #1
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d10f      	bne.n	800ccea <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	685a      	ldr	r2, [r3, #4]
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ccd8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccde:	b29b      	uxth	r3, r3
 800cce0:	085b      	lsrs	r3, r3, #1
 800cce2:	b29a      	uxth	r2, r3
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cce8:	e010      	b.n	800cd0c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	685a      	ldr	r2, [r3, #4]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ccf8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccfe:	b29b      	uxth	r3, r3
 800cd00:	085b      	lsrs	r3, r3, #1
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	3301      	adds	r3, #1
 800cd06:	b29a      	uxth	r2, r3
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd10:	699b      	ldr	r3, [r3, #24]
 800cd12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cd16:	d134      	bne.n	800cd82 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	685a      	ldr	r2, [r3, #4]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cd26:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cd28:	68fb      	ldr	r3, [r7, #12]
 800cd2a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	f003 0301 	and.w	r3, r3, #1
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d111      	bne.n	800cd5c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	685a      	ldr	r2, [r3, #4]
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cd46:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	085b      	lsrs	r3, r3, #1
 800cd52:	b29a      	uxth	r2, r3
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cd5a:	e012      	b.n	800cd82 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	685a      	ldr	r2, [r3, #4]
 800cd62:	68fb      	ldr	r3, [r7, #12]
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cd6a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cd72:	b29b      	uxth	r3, r3
 800cd74:	085b      	lsrs	r3, r3, #1
 800cd76:	b29b      	uxth	r3, r3
 800cd78:	3301      	adds	r3, #1
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	68fb      	ldr	r3, [r7, #12]
 800cd7e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cd88:	b2db      	uxtb	r3, r3
 800cd8a:	2b04      	cmp	r3, #4
 800cd8c:	d108      	bne.n	800cda0 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd92:	4a4a      	ldr	r2, [pc, #296]	; (800cebc <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cd94:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd9a:	4a49      	ldr	r2, [pc, #292]	; (800cec0 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800cd9c:	63da      	str	r2, [r3, #60]	; 0x3c
 800cd9e:	e007      	b.n	800cdb0 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cda4:	4a47      	ldr	r2, [pc, #284]	; (800cec4 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800cda6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdac:	4a46      	ldr	r2, [pc, #280]	; (800cec8 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cdae:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdb4:	4a45      	ldr	r2, [pc, #276]	; (800cecc <HAL_SPI_TransmitReceive_DMA+0x314>)
 800cdb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	330c      	adds	r3, #12
 800cdca:	4619      	mov	r1, r3
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd0:	461a      	mov	r2, r3
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cdd8:	b29b      	uxth	r3, r3
 800cdda:	f7fb faab 	bl	8008334 <HAL_DMA_Start_IT>
 800cdde:	4603      	mov	r3, r0
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d00c      	beq.n	800cdfe <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cde8:	f043 0210 	orr.w	r2, r3, #16
 800cdec:	68fb      	ldr	r3, [r7, #12]
 800cdee:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	2201      	movs	r2, #1
 800cdf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cdfc:	e054      	b.n	800cea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cdfe:	68fb      	ldr	r3, [r7, #12]
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	685a      	ldr	r2, [r3, #4]
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	f042 0201 	orr.w	r2, r2, #1
 800ce0c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce12:	2200      	movs	r2, #0
 800ce14:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce22:	2200      	movs	r2, #0
 800ce24:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce2a:	2200      	movs	r2, #0
 800ce2c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce36:	4619      	mov	r1, r3
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	330c      	adds	r3, #12
 800ce3e:	461a      	mov	r2, r3
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	f7fb fa75 	bl	8008334 <HAL_DMA_Start_IT>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00c      	beq.n	800ce6a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce54:	f043 0210 	orr.w	r2, r3, #16
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	2201      	movs	r2, #1
 800ce64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ce68:	e01e      	b.n	800cea8 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce74:	2b40      	cmp	r3, #64	; 0x40
 800ce76:	d007      	beq.n	800ce88 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	681a      	ldr	r2, [r3, #0]
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce86:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	685a      	ldr	r2, [r3, #4]
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f042 0220 	orr.w	r2, r2, #32
 800ce96:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	685a      	ldr	r2, [r3, #4]
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	f042 0202 	orr.w	r2, r2, #2
 800cea6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ceb0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	3718      	adds	r7, #24
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	bd80      	pop	{r7, pc}
 800ceba:	bf00      	nop
 800cebc:	0800d239 	.word	0x0800d239
 800cec0:	0800d121 	.word	0x0800d121
 800cec4:	0800d255 	.word	0x0800d255
 800cec8:	0800d1a7 	.word	0x0800d1a7
 800cecc:	0800d271 	.word	0x0800d271

0800ced0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b088      	sub	sp, #32
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	689b      	ldr	r3, [r3, #8]
 800cee6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cee8:	69bb      	ldr	r3, [r7, #24]
 800ceea:	099b      	lsrs	r3, r3, #6
 800ceec:	f003 0301 	and.w	r3, r3, #1
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d10f      	bne.n	800cf14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cef4:	69bb      	ldr	r3, [r7, #24]
 800cef6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00a      	beq.n	800cf14 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cefe:	69fb      	ldr	r3, [r7, #28]
 800cf00:	099b      	lsrs	r3, r3, #6
 800cf02:	f003 0301 	and.w	r3, r3, #1
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d004      	beq.n	800cf14 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	4798      	blx	r3
    return;
 800cf12:	e0d8      	b.n	800d0c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cf14:	69bb      	ldr	r3, [r7, #24]
 800cf16:	085b      	lsrs	r3, r3, #1
 800cf18:	f003 0301 	and.w	r3, r3, #1
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d00a      	beq.n	800cf36 <HAL_SPI_IRQHandler+0x66>
 800cf20:	69fb      	ldr	r3, [r7, #28]
 800cf22:	09db      	lsrs	r3, r3, #7
 800cf24:	f003 0301 	and.w	r3, r3, #1
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d004      	beq.n	800cf36 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf30:	6878      	ldr	r0, [r7, #4]
 800cf32:	4798      	blx	r3
    return;
 800cf34:	e0c7      	b.n	800d0c6 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	095b      	lsrs	r3, r3, #5
 800cf3a:	f003 0301 	and.w	r3, r3, #1
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d10c      	bne.n	800cf5c <HAL_SPI_IRQHandler+0x8c>
 800cf42:	69bb      	ldr	r3, [r7, #24]
 800cf44:	099b      	lsrs	r3, r3, #6
 800cf46:	f003 0301 	and.w	r3, r3, #1
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d106      	bne.n	800cf5c <HAL_SPI_IRQHandler+0x8c>
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	0a1b      	lsrs	r3, r3, #8
 800cf52:	f003 0301 	and.w	r3, r3, #1
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	f000 80b5 	beq.w	800d0c6 <HAL_SPI_IRQHandler+0x1f6>
 800cf5c:	69fb      	ldr	r3, [r7, #28]
 800cf5e:	095b      	lsrs	r3, r3, #5
 800cf60:	f003 0301 	and.w	r3, r3, #1
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	f000 80ae 	beq.w	800d0c6 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cf6a:	69bb      	ldr	r3, [r7, #24]
 800cf6c:	099b      	lsrs	r3, r3, #6
 800cf6e:	f003 0301 	and.w	r3, r3, #1
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d023      	beq.n	800cfbe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cf7c:	b2db      	uxtb	r3, r3
 800cf7e:	2b03      	cmp	r3, #3
 800cf80:	d011      	beq.n	800cfa6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf86:	f043 0204 	orr.w	r2, r3, #4
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cf8e:	2300      	movs	r3, #0
 800cf90:	617b      	str	r3, [r7, #20]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	617b      	str	r3, [r7, #20]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	689b      	ldr	r3, [r3, #8]
 800cfa0:	617b      	str	r3, [r7, #20]
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	e00b      	b.n	800cfbe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	613b      	str	r3, [r7, #16]
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	68db      	ldr	r3, [r3, #12]
 800cfb0:	613b      	str	r3, [r7, #16]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	689b      	ldr	r3, [r3, #8]
 800cfb8:	613b      	str	r3, [r7, #16]
 800cfba:	693b      	ldr	r3, [r7, #16]
        return;
 800cfbc:	e083      	b.n	800d0c6 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	095b      	lsrs	r3, r3, #5
 800cfc2:	f003 0301 	and.w	r3, r3, #1
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d014      	beq.n	800cff4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cfce:	f043 0201 	orr.w	r2, r3, #1
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	60fb      	str	r3, [r7, #12]
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	60fb      	str	r3, [r7, #12]
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	681b      	ldr	r3, [r3, #0]
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cff0:	601a      	str	r2, [r3, #0]
 800cff2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800cff4:	69bb      	ldr	r3, [r7, #24]
 800cff6:	0a1b      	lsrs	r3, r3, #8
 800cff8:	f003 0301 	and.w	r3, r3, #1
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d00c      	beq.n	800d01a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d004:	f043 0208 	orr.w	r2, r3, #8
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800d00c:	2300      	movs	r3, #0
 800d00e:	60bb      	str	r3, [r7, #8]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	689b      	ldr	r3, [r3, #8]
 800d016:	60bb      	str	r3, [r7, #8]
 800d018:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d050      	beq.n	800d0c4 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	685a      	ldr	r2, [r3, #4]
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d030:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	2201      	movs	r2, #1
 800d036:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800d03a:	69fb      	ldr	r3, [r7, #28]
 800d03c:	f003 0302 	and.w	r3, r3, #2
 800d040:	2b00      	cmp	r3, #0
 800d042:	d104      	bne.n	800d04e <HAL_SPI_IRQHandler+0x17e>
 800d044:	69fb      	ldr	r3, [r7, #28]
 800d046:	f003 0301 	and.w	r3, r3, #1
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d034      	beq.n	800d0b8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	685a      	ldr	r2, [r3, #4]
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f022 0203 	bic.w	r2, r2, #3
 800d05c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d062:	2b00      	cmp	r3, #0
 800d064:	d011      	beq.n	800d08a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d06a:	4a18      	ldr	r2, [pc, #96]	; (800d0cc <HAL_SPI_IRQHandler+0x1fc>)
 800d06c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d072:	4618      	mov	r0, r3
 800d074:	f7fb fa2e 	bl	80084d4 <HAL_DMA_Abort_IT>
 800d078:	4603      	mov	r3, r0
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d005      	beq.n	800d08a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d082:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d016      	beq.n	800d0c0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d096:	4a0d      	ldr	r2, [pc, #52]	; (800d0cc <HAL_SPI_IRQHandler+0x1fc>)
 800d098:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fb fa18 	bl	80084d4 <HAL_DMA_Abort_IT>
 800d0a4:	4603      	mov	r3, r0
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d00a      	beq.n	800d0c0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d0ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800d0b6:	e003      	b.n	800d0c0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800d0b8:	6878      	ldr	r0, [r7, #4]
 800d0ba:	f000 f827 	bl	800d10c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800d0be:	e000      	b.n	800d0c2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800d0c0:	bf00      	nop
    return;
 800d0c2:	bf00      	nop
 800d0c4:	bf00      	nop
  }
}
 800d0c6:	3720      	adds	r7, #32
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}
 800d0cc:	0800d2b1 	.word	0x0800d2b1

0800d0d0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b083      	sub	sp, #12
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800d0d8:	bf00      	nop
 800d0da:	370c      	adds	r7, #12
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e2:	4770      	bx	lr

0800d0e4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d0e4:	b480      	push	{r7}
 800d0e6:	b083      	sub	sp, #12
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800d0ec:	bf00      	nop
 800d0ee:	370c      	adds	r7, #12
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800d100:	bf00      	nop
 800d102:	370c      	adds	r7, #12
 800d104:	46bd      	mov	sp, r7
 800d106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d10a:	4770      	bx	lr

0800d10c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800d114:	bf00      	nop
 800d116:	370c      	adds	r7, #12
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d12e:	f7fa fae3 	bl	80076f8 <HAL_GetTick>
 800d132:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d142:	d02a      	beq.n	800d19a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d144:	68fb      	ldr	r3, [r7, #12]
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	685a      	ldr	r2, [r3, #4]
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	f022 0220 	bic.w	r2, r2, #32
 800d152:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	685a      	ldr	r2, [r3, #4]
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f022 0203 	bic.w	r2, r2, #3
 800d162:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d164:	68ba      	ldr	r2, [r7, #8]
 800d166:	2164      	movs	r1, #100	; 0x64
 800d168:	68f8      	ldr	r0, [r7, #12]
 800d16a:	f000 f98d 	bl	800d488 <SPI_EndRxTransaction>
 800d16e:	4603      	mov	r3, r0
 800d170:	2b00      	cmp	r3, #0
 800d172:	d002      	beq.n	800d17a <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2220      	movs	r2, #32
 800d178:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	2200      	movs	r2, #0
 800d17e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2201      	movs	r2, #1
 800d186:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d003      	beq.n	800d19a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d192:	68f8      	ldr	r0, [r7, #12]
 800d194:	f7ff ffba 	bl	800d10c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d198:	e002      	b.n	800d1a0 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d19a:	68f8      	ldr	r0, [r7, #12]
 800d19c:	f7f9 fd56 	bl	8006c4c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}

0800d1a6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d1a6:	b580      	push	{r7, lr}
 800d1a8:	b084      	sub	sp, #16
 800d1aa:	af00      	add	r7, sp, #0
 800d1ac:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1b2:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d1b4:	f7fa faa0 	bl	80076f8 <HAL_GetTick>
 800d1b8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	681b      	ldr	r3, [r3, #0]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1c8:	d030      	beq.n	800d22c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	685a      	ldr	r2, [r3, #4]
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	f022 0220 	bic.w	r2, r2, #32
 800d1d8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d1da:	68ba      	ldr	r2, [r7, #8]
 800d1dc:	2164      	movs	r1, #100	; 0x64
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f000 f9aa 	bl	800d538 <SPI_EndRxTxTransaction>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d005      	beq.n	800d1f6 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d1ee:	f043 0220 	orr.w	r2, r3, #32
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	685a      	ldr	r2, [r3, #4]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	f022 0203 	bic.w	r2, r2, #3
 800d204:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d21c:	68fb      	ldr	r3, [r7, #12]
 800d21e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d220:	2b00      	cmp	r3, #0
 800d222:	d003      	beq.n	800d22c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d224:	68f8      	ldr	r0, [r7, #12]
 800d226:	f7ff ff71 	bl	800d10c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d22a:	e002      	b.n	800d232 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d22c:	68f8      	ldr	r0, [r7, #12]
 800d22e:	f7ff ff4f 	bl	800d0d0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d232:	3710      	adds	r7, #16
 800d234:	46bd      	mov	sp, r7
 800d236:	bd80      	pop	{r7, pc}

0800d238 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d238:	b580      	push	{r7, lr}
 800d23a:	b084      	sub	sp, #16
 800d23c:	af00      	add	r7, sp, #0
 800d23e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d244:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d246:	68f8      	ldr	r0, [r7, #12]
 800d248:	f7ff ff4c 	bl	800d0e4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d24c:	bf00      	nop
 800d24e:	3710      	adds	r7, #16
 800d250:	46bd      	mov	sp, r7
 800d252:	bd80      	pop	{r7, pc}

0800d254 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d254:	b580      	push	{r7, lr}
 800d256:	b084      	sub	sp, #16
 800d258:	af00      	add	r7, sp, #0
 800d25a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d260:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d262:	68f8      	ldr	r0, [r7, #12]
 800d264:	f7ff ff48 	bl	800d0f8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d268:	bf00      	nop
 800d26a:	3710      	adds	r7, #16
 800d26c:	46bd      	mov	sp, r7
 800d26e:	bd80      	pop	{r7, pc}

0800d270 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d27c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	f022 0203 	bic.w	r2, r2, #3
 800d28c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d292:	f043 0210 	orr.w	r2, r3, #16
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	2201      	movs	r2, #1
 800d29e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d2a2:	68f8      	ldr	r0, [r7, #12]
 800d2a4:	f7ff ff32 	bl	800d10c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d2a8:	bf00      	nop
 800d2aa:	3710      	adds	r7, #16
 800d2ac:	46bd      	mov	sp, r7
 800d2ae:	bd80      	pop	{r7, pc}

0800d2b0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d2b0:	b580      	push	{r7, lr}
 800d2b2:	b084      	sub	sp, #16
 800d2b4:	af00      	add	r7, sp, #0
 800d2b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2bc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	2200      	movs	r2, #0
 800d2ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d2cc:	68f8      	ldr	r0, [r7, #12]
 800d2ce:	f7ff ff1d 	bl	800d10c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d2d2:	bf00      	nop
 800d2d4:	3710      	adds	r7, #16
 800d2d6:	46bd      	mov	sp, r7
 800d2d8:	bd80      	pop	{r7, pc}

0800d2da <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d2da:	b580      	push	{r7, lr}
 800d2dc:	b084      	sub	sp, #16
 800d2de:	af00      	add	r7, sp, #0
 800d2e0:	60f8      	str	r0, [r7, #12]
 800d2e2:	60b9      	str	r1, [r7, #8]
 800d2e4:	603b      	str	r3, [r7, #0]
 800d2e6:	4613      	mov	r3, r2
 800d2e8:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d2ea:	e04c      	b.n	800d386 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2f2:	d048      	beq.n	800d386 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d2f4:	f7fa fa00 	bl	80076f8 <HAL_GetTick>
 800d2f8:	4602      	mov	r2, r0
 800d2fa:	69bb      	ldr	r3, [r7, #24]
 800d2fc:	1ad3      	subs	r3, r2, r3
 800d2fe:	683a      	ldr	r2, [r7, #0]
 800d300:	429a      	cmp	r2, r3
 800d302:	d902      	bls.n	800d30a <SPI_WaitFlagStateUntilTimeout+0x30>
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d13d      	bne.n	800d386 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	685a      	ldr	r2, [r3, #4]
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d318:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d322:	d111      	bne.n	800d348 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	689b      	ldr	r3, [r3, #8]
 800d328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d32c:	d004      	beq.n	800d338 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	689b      	ldr	r3, [r3, #8]
 800d332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d336:	d107      	bne.n	800d348 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	681a      	ldr	r2, [r3, #0]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d346:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d34c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d350:	d10f      	bne.n	800d372 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	681a      	ldr	r2, [r3, #0]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d360:	601a      	str	r2, [r3, #0]
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	681a      	ldr	r2, [r3, #0]
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d370:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2201      	movs	r2, #1
 800d376:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d382:	2303      	movs	r3, #3
 800d384:	e00f      	b.n	800d3a6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	689a      	ldr	r2, [r3, #8]
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	4013      	ands	r3, r2
 800d390:	68ba      	ldr	r2, [r7, #8]
 800d392:	429a      	cmp	r2, r3
 800d394:	bf0c      	ite	eq
 800d396:	2301      	moveq	r3, #1
 800d398:	2300      	movne	r3, #0
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	461a      	mov	r2, r3
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	429a      	cmp	r2, r3
 800d3a2:	d1a3      	bne.n	800d2ec <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d3a4:	2300      	movs	r3, #0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b084      	sub	sp, #16
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	60f8      	str	r0, [r7, #12]
 800d3b6:	60b9      	str	r1, [r7, #8]
 800d3b8:	607a      	str	r2, [r7, #4]
 800d3ba:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800d3bc:	e057      	b.n	800d46e <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d3be:	68bb      	ldr	r3, [r7, #8]
 800d3c0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d3c4:	d106      	bne.n	800d3d4 <SPI_WaitFifoStateUntilTimeout+0x26>
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d103      	bne.n	800d3d4 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	330c      	adds	r3, #12
 800d3d2:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3da:	d048      	beq.n	800d46e <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d3dc:	f7fa f98c 	bl	80076f8 <HAL_GetTick>
 800d3e0:	4602      	mov	r2, r0
 800d3e2:	69bb      	ldr	r3, [r7, #24]
 800d3e4:	1ad3      	subs	r3, r2, r3
 800d3e6:	683a      	ldr	r2, [r7, #0]
 800d3e8:	429a      	cmp	r2, r3
 800d3ea:	d902      	bls.n	800d3f2 <SPI_WaitFifoStateUntilTimeout+0x44>
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d13d      	bne.n	800d46e <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	685a      	ldr	r2, [r3, #4]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d40a:	d111      	bne.n	800d430 <SPI_WaitFifoStateUntilTimeout+0x82>
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d414:	d004      	beq.n	800d420 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	689b      	ldr	r3, [r3, #8]
 800d41a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d41e:	d107      	bne.n	800d430 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	681a      	ldr	r2, [r3, #0]
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d42e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d430:	68fb      	ldr	r3, [r7, #12]
 800d432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d434:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d438:	d10f      	bne.n	800d45a <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d448:	601a      	str	r2, [r3, #0]
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	681a      	ldr	r2, [r3, #0]
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	681b      	ldr	r3, [r3, #0]
 800d454:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d458:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	2201      	movs	r2, #1
 800d45e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	2200      	movs	r2, #0
 800d466:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d46a:	2303      	movs	r3, #3
 800d46c:	e008      	b.n	800d480 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	689a      	ldr	r2, [r3, #8]
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	4013      	ands	r3, r2
 800d478:	687a      	ldr	r2, [r7, #4]
 800d47a:	429a      	cmp	r2, r3
 800d47c:	d19f      	bne.n	800d3be <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800d47e:	2300      	movs	r3, #0
}
 800d480:	4618      	mov	r0, r3
 800d482:	3710      	adds	r7, #16
 800d484:	46bd      	mov	sp, r7
 800d486:	bd80      	pop	{r7, pc}

0800d488 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af02      	add	r7, sp, #8
 800d48e:	60f8      	str	r0, [r7, #12]
 800d490:	60b9      	str	r1, [r7, #8]
 800d492:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	685b      	ldr	r3, [r3, #4]
 800d498:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d49c:	d111      	bne.n	800d4c2 <SPI_EndRxTransaction+0x3a>
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	689b      	ldr	r3, [r3, #8]
 800d4a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4a6:	d004      	beq.n	800d4b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	689b      	ldr	r3, [r3, #8]
 800d4ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d4b0:	d107      	bne.n	800d4c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	681a      	ldr	r2, [r3, #0]
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4c0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	9300      	str	r3, [sp, #0]
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	2200      	movs	r2, #0
 800d4ca:	2180      	movs	r1, #128	; 0x80
 800d4cc:	68f8      	ldr	r0, [r7, #12]
 800d4ce:	f7ff ff04 	bl	800d2da <SPI_WaitFlagStateUntilTimeout>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d007      	beq.n	800d4e8 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4dc:	f043 0220 	orr.w	r2, r3, #32
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d4e4:	2303      	movs	r3, #3
 800d4e6:	e023      	b.n	800d530 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	685b      	ldr	r3, [r3, #4]
 800d4ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d4f0:	d11d      	bne.n	800d52e <SPI_EndRxTransaction+0xa6>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	689b      	ldr	r3, [r3, #8]
 800d4f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d4fa:	d004      	beq.n	800d506 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	689b      	ldr	r3, [r3, #8]
 800d500:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d504:	d113      	bne.n	800d52e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	9300      	str	r3, [sp, #0]
 800d50a:	68bb      	ldr	r3, [r7, #8]
 800d50c:	2200      	movs	r2, #0
 800d50e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f7ff ff4b 	bl	800d3ae <SPI_WaitFifoStateUntilTimeout>
 800d518:	4603      	mov	r3, r0
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d007      	beq.n	800d52e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d522:	f043 0220 	orr.w	r2, r3, #32
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d52a:	2303      	movs	r3, #3
 800d52c:	e000      	b.n	800d530 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d52e:	2300      	movs	r3, #0
}
 800d530:	4618      	mov	r0, r3
 800d532:	3710      	adds	r7, #16
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b086      	sub	sp, #24
 800d53c:	af02      	add	r7, sp, #8
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	60b9      	str	r1, [r7, #8]
 800d542:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	2200      	movs	r2, #0
 800d54c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7ff ff2c 	bl	800d3ae <SPI_WaitFifoStateUntilTimeout>
 800d556:	4603      	mov	r3, r0
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d007      	beq.n	800d56c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d560:	f043 0220 	orr.w	r2, r3, #32
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d568:	2303      	movs	r3, #3
 800d56a:	e027      	b.n	800d5bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	9300      	str	r3, [sp, #0]
 800d570:	68bb      	ldr	r3, [r7, #8]
 800d572:	2200      	movs	r2, #0
 800d574:	2180      	movs	r1, #128	; 0x80
 800d576:	68f8      	ldr	r0, [r7, #12]
 800d578:	f7ff feaf 	bl	800d2da <SPI_WaitFlagStateUntilTimeout>
 800d57c:	4603      	mov	r3, r0
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d007      	beq.n	800d592 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d586:	f043 0220 	orr.w	r2, r3, #32
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d58e:	2303      	movs	r3, #3
 800d590:	e014      	b.n	800d5bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	9300      	str	r3, [sp, #0]
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	2200      	movs	r2, #0
 800d59a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f7ff ff05 	bl	800d3ae <SPI_WaitFifoStateUntilTimeout>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5ae:	f043 0220 	orr.w	r2, r3, #32
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d5b6:	2303      	movs	r3, #3
 800d5b8:	e000      	b.n	800d5bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d5ba:	2300      	movs	r3, #0
}
 800d5bc:	4618      	mov	r0, r3
 800d5be:	3710      	adds	r7, #16
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800d5c4:	b480      	push	{r7}
 800d5c6:	b085      	sub	sp, #20
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d5d0:	e00c      	b.n	800d5ec <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800d5d2:	7bfb      	ldrb	r3, [r7, #15]
 800d5d4:	3301      	adds	r3, #1
 800d5d6:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	68db      	ldr	r3, [r3, #12]
 800d5de:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800d5e0:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800d5e2:	7bfb      	ldrb	r3, [r7, #15]
 800d5e4:	2b04      	cmp	r3, #4
 800d5e6:	d101      	bne.n	800d5ec <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800d5e8:	2303      	movs	r3, #3
 800d5ea:	e007      	b.n	800d5fc <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d1eb      	bne.n	800d5d2 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800d5fa:	2300      	movs	r3, #0
}
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	3714      	adds	r7, #20
 800d600:	46bd      	mov	sp, r7
 800d602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d606:	4770      	bx	lr

0800d608 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	e01d      	b.n	800d656 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d620:	b2db      	uxtb	r3, r3
 800d622:	2b00      	cmp	r3, #0
 800d624:	d106      	bne.n	800d634 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 f815 	bl	800d65e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	2202      	movs	r2, #2
 800d638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	3304      	adds	r3, #4
 800d644:	4619      	mov	r1, r3
 800d646:	4610      	mov	r0, r2
 800d648:	f000 f986 	bl	800d958 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	2201      	movs	r2, #1
 800d650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d654:	2300      	movs	r3, #0
}
 800d656:	4618      	mov	r0, r3
 800d658:	3708      	adds	r7, #8
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d65e:	b480      	push	{r7}
 800d660:	b083      	sub	sp, #12
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d666:	bf00      	nop
 800d668:	370c      	adds	r7, #12
 800d66a:	46bd      	mov	sp, r7
 800d66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d670:	4770      	bx	lr
	...

0800d674 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d674:	b480      	push	{r7}
 800d676:	b085      	sub	sp, #20
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	68da      	ldr	r2, [r3, #12]
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f042 0201 	orr.w	r2, r2, #1
 800d68a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	689a      	ldr	r2, [r3, #8]
 800d692:	4b0c      	ldr	r3, [pc, #48]	; (800d6c4 <HAL_TIM_Base_Start_IT+0x50>)
 800d694:	4013      	ands	r3, r2
 800d696:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	2b06      	cmp	r3, #6
 800d69c:	d00b      	beq.n	800d6b6 <HAL_TIM_Base_Start_IT+0x42>
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d6a4:	d007      	beq.n	800d6b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	681a      	ldr	r2, [r3, #0]
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f042 0201 	orr.w	r2, r2, #1
 800d6b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d6b6:	2300      	movs	r3, #0
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3714      	adds	r7, #20
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c2:	4770      	bx	lr
 800d6c4:	00010007 	.word	0x00010007

0800d6c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b082      	sub	sp, #8
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	691b      	ldr	r3, [r3, #16]
 800d6d6:	f003 0302 	and.w	r3, r3, #2
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d122      	bne.n	800d724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	f003 0302 	and.w	r3, r3, #2
 800d6e8:	2b02      	cmp	r3, #2
 800d6ea:	d11b      	bne.n	800d724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f06f 0202 	mvn.w	r2, #2
 800d6f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	699b      	ldr	r3, [r3, #24]
 800d702:	f003 0303 	and.w	r3, r3, #3
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d70a:	6878      	ldr	r0, [r7, #4]
 800d70c:	f000 f905 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d710:	e005      	b.n	800d71e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d712:	6878      	ldr	r0, [r7, #4]
 800d714:	f000 f8f7 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 f908 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	2200      	movs	r2, #0
 800d722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	691b      	ldr	r3, [r3, #16]
 800d72a:	f003 0304 	and.w	r3, r3, #4
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d122      	bne.n	800d778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	f003 0304 	and.w	r3, r3, #4
 800d73c:	2b04      	cmp	r3, #4
 800d73e:	d11b      	bne.n	800d778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	f06f 0204 	mvn.w	r2, #4
 800d748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2202      	movs	r2, #2
 800d74e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	699b      	ldr	r3, [r3, #24]
 800d756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d003      	beq.n	800d766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 f8db 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d764:	e005      	b.n	800d772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f000 f8cd 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f8de 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	2200      	movs	r2, #0
 800d776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	691b      	ldr	r3, [r3, #16]
 800d77e:	f003 0308 	and.w	r3, r3, #8
 800d782:	2b08      	cmp	r3, #8
 800d784:	d122      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68db      	ldr	r3, [r3, #12]
 800d78c:	f003 0308 	and.w	r3, r3, #8
 800d790:	2b08      	cmp	r3, #8
 800d792:	d11b      	bne.n	800d7cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f06f 0208 	mvn.w	r2, #8
 800d79c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2204      	movs	r2, #4
 800d7a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69db      	ldr	r3, [r3, #28]
 800d7aa:	f003 0303 	and.w	r3, r3, #3
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d003      	beq.n	800d7ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	f000 f8b1 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d7b8:	e005      	b.n	800d7c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f000 f8a3 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d7c0:	6878      	ldr	r0, [r7, #4]
 800d7c2:	f000 f8b4 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	f003 0310 	and.w	r3, r3, #16
 800d7d6:	2b10      	cmp	r3, #16
 800d7d8:	d122      	bne.n	800d820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	f003 0310 	and.w	r3, r3, #16
 800d7e4:	2b10      	cmp	r3, #16
 800d7e6:	d11b      	bne.n	800d820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	f06f 0210 	mvn.w	r2, #16
 800d7f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	2208      	movs	r2, #8
 800d7f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	69db      	ldr	r3, [r3, #28]
 800d7fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d802:	2b00      	cmp	r3, #0
 800d804:	d003      	beq.n	800d80e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d806:	6878      	ldr	r0, [r7, #4]
 800d808:	f000 f887 	bl	800d91a <HAL_TIM_IC_CaptureCallback>
 800d80c:	e005      	b.n	800d81a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f000 f879 	bl	800d906 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d814:	6878      	ldr	r0, [r7, #4]
 800d816:	f000 f88a 	bl	800d92e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2200      	movs	r2, #0
 800d81e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	691b      	ldr	r3, [r3, #16]
 800d826:	f003 0301 	and.w	r3, r3, #1
 800d82a:	2b01      	cmp	r3, #1
 800d82c:	d10e      	bne.n	800d84c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	68db      	ldr	r3, [r3, #12]
 800d834:	f003 0301 	and.w	r3, r3, #1
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d107      	bne.n	800d84c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	f06f 0201 	mvn.w	r2, #1
 800d844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f7f7 fb62 	bl	8004f10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	691b      	ldr	r3, [r3, #16]
 800d852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d856:	2b80      	cmp	r3, #128	; 0x80
 800d858:	d10e      	bne.n	800d878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	68db      	ldr	r3, [r3, #12]
 800d860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d864:	2b80      	cmp	r3, #128	; 0x80
 800d866:	d107      	bne.n	800d878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f000 f91a 	bl	800daac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	691b      	ldr	r3, [r3, #16]
 800d87e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d886:	d10e      	bne.n	800d8a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d892:	2b80      	cmp	r3, #128	; 0x80
 800d894:	d107      	bne.n	800d8a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d89e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f000 f90d 	bl	800dac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	691b      	ldr	r3, [r3, #16]
 800d8ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8b0:	2b40      	cmp	r3, #64	; 0x40
 800d8b2:	d10e      	bne.n	800d8d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68db      	ldr	r3, [r3, #12]
 800d8ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8be:	2b40      	cmp	r3, #64	; 0x40
 800d8c0:	d107      	bne.n	800d8d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d8ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f000 f838 	bl	800d942 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681b      	ldr	r3, [r3, #0]
 800d8d6:	691b      	ldr	r3, [r3, #16]
 800d8d8:	f003 0320 	and.w	r3, r3, #32
 800d8dc:	2b20      	cmp	r3, #32
 800d8de:	d10e      	bne.n	800d8fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	68db      	ldr	r3, [r3, #12]
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b20      	cmp	r3, #32
 800d8ec:	d107      	bne.n	800d8fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	f06f 0220 	mvn.w	r2, #32
 800d8f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 f8cd 	bl	800da98 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d8fe:	bf00      	nop
 800d900:	3708      	adds	r7, #8
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d906:	b480      	push	{r7}
 800d908:	b083      	sub	sp, #12
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d90e:	bf00      	nop
 800d910:	370c      	adds	r7, #12
 800d912:	46bd      	mov	sp, r7
 800d914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d918:	4770      	bx	lr

0800d91a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d91a:	b480      	push	{r7}
 800d91c:	b083      	sub	sp, #12
 800d91e:	af00      	add	r7, sp, #0
 800d920:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d922:	bf00      	nop
 800d924:	370c      	adds	r7, #12
 800d926:	46bd      	mov	sp, r7
 800d928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92c:	4770      	bx	lr

0800d92e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d92e:	b480      	push	{r7}
 800d930:	b083      	sub	sp, #12
 800d932:	af00      	add	r7, sp, #0
 800d934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d936:	bf00      	nop
 800d938:	370c      	adds	r7, #12
 800d93a:	46bd      	mov	sp, r7
 800d93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d940:	4770      	bx	lr

0800d942 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d942:	b480      	push	{r7}
 800d944:	b083      	sub	sp, #12
 800d946:	af00      	add	r7, sp, #0
 800d948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d94a:	bf00      	nop
 800d94c:	370c      	adds	r7, #12
 800d94e:	46bd      	mov	sp, r7
 800d950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d954:	4770      	bx	lr
	...

0800d958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	4a40      	ldr	r2, [pc, #256]	; (800da6c <TIM_Base_SetConfig+0x114>)
 800d96c:	4293      	cmp	r3, r2
 800d96e:	d013      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d976:	d00f      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	4a3d      	ldr	r2, [pc, #244]	; (800da70 <TIM_Base_SetConfig+0x118>)
 800d97c:	4293      	cmp	r3, r2
 800d97e:	d00b      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	4a3c      	ldr	r2, [pc, #240]	; (800da74 <TIM_Base_SetConfig+0x11c>)
 800d984:	4293      	cmp	r3, r2
 800d986:	d007      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	4a3b      	ldr	r2, [pc, #236]	; (800da78 <TIM_Base_SetConfig+0x120>)
 800d98c:	4293      	cmp	r3, r2
 800d98e:	d003      	beq.n	800d998 <TIM_Base_SetConfig+0x40>
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	4a3a      	ldr	r2, [pc, #232]	; (800da7c <TIM_Base_SetConfig+0x124>)
 800d994:	4293      	cmp	r3, r2
 800d996:	d108      	bne.n	800d9aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d99e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d9a0:	683b      	ldr	r3, [r7, #0]
 800d9a2:	685b      	ldr	r3, [r3, #4]
 800d9a4:	68fa      	ldr	r2, [r7, #12]
 800d9a6:	4313      	orrs	r3, r2
 800d9a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	4a2f      	ldr	r2, [pc, #188]	; (800da6c <TIM_Base_SetConfig+0x114>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d02b      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d9b8:	d027      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	4a2c      	ldr	r2, [pc, #176]	; (800da70 <TIM_Base_SetConfig+0x118>)
 800d9be:	4293      	cmp	r3, r2
 800d9c0:	d023      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4a2b      	ldr	r2, [pc, #172]	; (800da74 <TIM_Base_SetConfig+0x11c>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d01f      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4a2a      	ldr	r2, [pc, #168]	; (800da78 <TIM_Base_SetConfig+0x120>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d01b      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	4a29      	ldr	r2, [pc, #164]	; (800da7c <TIM_Base_SetConfig+0x124>)
 800d9d6:	4293      	cmp	r3, r2
 800d9d8:	d017      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	4a28      	ldr	r2, [pc, #160]	; (800da80 <TIM_Base_SetConfig+0x128>)
 800d9de:	4293      	cmp	r3, r2
 800d9e0:	d013      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	4a27      	ldr	r2, [pc, #156]	; (800da84 <TIM_Base_SetConfig+0x12c>)
 800d9e6:	4293      	cmp	r3, r2
 800d9e8:	d00f      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	4a26      	ldr	r2, [pc, #152]	; (800da88 <TIM_Base_SetConfig+0x130>)
 800d9ee:	4293      	cmp	r3, r2
 800d9f0:	d00b      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	4a25      	ldr	r2, [pc, #148]	; (800da8c <TIM_Base_SetConfig+0x134>)
 800d9f6:	4293      	cmp	r3, r2
 800d9f8:	d007      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	4a24      	ldr	r2, [pc, #144]	; (800da90 <TIM_Base_SetConfig+0x138>)
 800d9fe:	4293      	cmp	r3, r2
 800da00:	d003      	beq.n	800da0a <TIM_Base_SetConfig+0xb2>
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	4a23      	ldr	r2, [pc, #140]	; (800da94 <TIM_Base_SetConfig+0x13c>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d108      	bne.n	800da1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	68db      	ldr	r3, [r3, #12]
 800da16:	68fa      	ldr	r2, [r7, #12]
 800da18:	4313      	orrs	r3, r2
 800da1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800da22:	683b      	ldr	r3, [r7, #0]
 800da24:	695b      	ldr	r3, [r3, #20]
 800da26:	4313      	orrs	r3, r2
 800da28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68fa      	ldr	r2, [r7, #12]
 800da2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800da30:	683b      	ldr	r3, [r7, #0]
 800da32:	689a      	ldr	r2, [r3, #8]
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	681a      	ldr	r2, [r3, #0]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	4a0a      	ldr	r2, [pc, #40]	; (800da6c <TIM_Base_SetConfig+0x114>)
 800da44:	4293      	cmp	r3, r2
 800da46:	d003      	beq.n	800da50 <TIM_Base_SetConfig+0xf8>
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	4a0c      	ldr	r2, [pc, #48]	; (800da7c <TIM_Base_SetConfig+0x124>)
 800da4c:	4293      	cmp	r3, r2
 800da4e:	d103      	bne.n	800da58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800da50:	683b      	ldr	r3, [r7, #0]
 800da52:	691a      	ldr	r2, [r3, #16]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2201      	movs	r2, #1
 800da5c:	615a      	str	r2, [r3, #20]
}
 800da5e:	bf00      	nop
 800da60:	3714      	adds	r7, #20
 800da62:	46bd      	mov	sp, r7
 800da64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da68:	4770      	bx	lr
 800da6a:	bf00      	nop
 800da6c:	40010000 	.word	0x40010000
 800da70:	40000400 	.word	0x40000400
 800da74:	40000800 	.word	0x40000800
 800da78:	40000c00 	.word	0x40000c00
 800da7c:	40010400 	.word	0x40010400
 800da80:	40014000 	.word	0x40014000
 800da84:	40014400 	.word	0x40014400
 800da88:	40014800 	.word	0x40014800
 800da8c:	40001800 	.word	0x40001800
 800da90:	40001c00 	.word	0x40001c00
 800da94:	40002000 	.word	0x40002000

0800da98 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800da98:	b480      	push	{r7}
 800da9a:	b083      	sub	sp, #12
 800da9c:	af00      	add	r7, sp, #0
 800da9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800daa0:	bf00      	nop
 800daa2:	370c      	adds	r7, #12
 800daa4:	46bd      	mov	sp, r7
 800daa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daaa:	4770      	bx	lr

0800daac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800daac:	b480      	push	{r7}
 800daae:	b083      	sub	sp, #12
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dab4:	bf00      	nop
 800dab6:	370c      	adds	r7, #12
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b083      	sub	sp, #12
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800dac8:	bf00      	nop
 800daca:	370c      	adds	r7, #12
 800dacc:	46bd      	mov	sp, r7
 800dace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad2:	4770      	bx	lr

0800dad4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d101      	bne.n	800dae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e040      	b.n	800db68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daea:	2b00      	cmp	r3, #0
 800daec:	d106      	bne.n	800dafc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	2200      	movs	r2, #0
 800daf2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f7f7 fd4e 	bl	8005598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2224      	movs	r2, #36	; 0x24
 800db00:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f022 0201 	bic.w	r2, r2, #1
 800db10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fc3a 	bl	800e38c <UART_SetConfig>
 800db18:	4603      	mov	r3, r0
 800db1a:	2b01      	cmp	r3, #1
 800db1c:	d101      	bne.n	800db22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800db1e:	2301      	movs	r3, #1
 800db20:	e022      	b.n	800db68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db26:	2b00      	cmp	r3, #0
 800db28:	d002      	beq.n	800db30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f000 fed8 	bl	800e8e0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	685a      	ldr	r2, [r3, #4]
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800db3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	689a      	ldr	r2, [r3, #8]
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800db4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	681a      	ldr	r2, [r3, #0]
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f042 0201 	orr.w	r2, r2, #1
 800db5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f000 ff5f 	bl	800ea24 <UART_CheckIdleState>
 800db66:	4603      	mov	r3, r0
}
 800db68:	4618      	mov	r0, r3
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b08a      	sub	sp, #40	; 0x28
 800db74:	af02      	add	r7, sp, #8
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	603b      	str	r3, [r7, #0]
 800db7c:	4613      	mov	r3, r2
 800db7e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db84:	2b20      	cmp	r3, #32
 800db86:	d17f      	bne.n	800dc88 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800db88:	68bb      	ldr	r3, [r7, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <HAL_UART_Transmit+0x24>
 800db8e:	88fb      	ldrh	r3, [r7, #6]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d101      	bne.n	800db98 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800db94:	2301      	movs	r3, #1
 800db96:	e078      	b.n	800dc8a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	d101      	bne.n	800dba6 <HAL_UART_Transmit+0x36>
 800dba2:	2302      	movs	r3, #2
 800dba4:	e071      	b.n	800dc8a <HAL_UART_Transmit+0x11a>
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	2221      	movs	r2, #33	; 0x21
 800dbb8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800dbba:	f7f9 fd9d 	bl	80076f8 <HAL_GetTick>
 800dbbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	88fa      	ldrh	r2, [r7, #6]
 800dbc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	88fa      	ldrh	r2, [r7, #6]
 800dbcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	689b      	ldr	r3, [r3, #8]
 800dbd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbd8:	d108      	bne.n	800dbec <HAL_UART_Transmit+0x7c>
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	691b      	ldr	r3, [r3, #16]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d104      	bne.n	800dbec <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800dbe6:	68bb      	ldr	r3, [r7, #8]
 800dbe8:	61bb      	str	r3, [r7, #24]
 800dbea:	e003      	b.n	800dbf4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800dbfc:	e02c      	b.n	800dc58 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	9300      	str	r3, [sp, #0]
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	2200      	movs	r2, #0
 800dc06:	2180      	movs	r1, #128	; 0x80
 800dc08:	68f8      	ldr	r0, [r7, #12]
 800dc0a:	f000 ff3a 	bl	800ea82 <UART_WaitOnFlagUntilTimeout>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d001      	beq.n	800dc18 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800dc14:	2303      	movs	r3, #3
 800dc16:	e038      	b.n	800dc8a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800dc18:	69fb      	ldr	r3, [r7, #28]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d10b      	bne.n	800dc36 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800dc1e:	69bb      	ldr	r3, [r7, #24]
 800dc20:	881b      	ldrh	r3, [r3, #0]
 800dc22:	461a      	mov	r2, r3
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800dc2c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800dc2e:	69bb      	ldr	r3, [r7, #24]
 800dc30:	3302      	adds	r3, #2
 800dc32:	61bb      	str	r3, [r7, #24]
 800dc34:	e007      	b.n	800dc46 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800dc36:	69fb      	ldr	r3, [r7, #28]
 800dc38:	781a      	ldrb	r2, [r3, #0]
 800dc3a:	68fb      	ldr	r3, [r7, #12]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	3301      	adds	r3, #1
 800dc44:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dc4c:	b29b      	uxth	r3, r3
 800dc4e:	3b01      	subs	r3, #1
 800dc50:	b29a      	uxth	r2, r3
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dc5e:	b29b      	uxth	r3, r3
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d1cc      	bne.n	800dbfe <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dc64:	683b      	ldr	r3, [r7, #0]
 800dc66:	9300      	str	r3, [sp, #0]
 800dc68:	697b      	ldr	r3, [r7, #20]
 800dc6a:	2200      	movs	r2, #0
 800dc6c:	2140      	movs	r1, #64	; 0x40
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f000 ff07 	bl	800ea82 <UART_WaitOnFlagUntilTimeout>
 800dc74:	4603      	mov	r3, r0
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d001      	beq.n	800dc7e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800dc7a:	2303      	movs	r3, #3
 800dc7c:	e005      	b.n	800dc8a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2220      	movs	r2, #32
 800dc82:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800dc84:	2300      	movs	r3, #0
 800dc86:	e000      	b.n	800dc8a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800dc88:	2302      	movs	r3, #2
  }
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3720      	adds	r7, #32
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}
	...

0800dc94 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc94:	b480      	push	{r7}
 800dc96:	b085      	sub	sp, #20
 800dc98:	af00      	add	r7, sp, #0
 800dc9a:	60f8      	str	r0, [r7, #12]
 800dc9c:	60b9      	str	r1, [r7, #8]
 800dc9e:	4613      	mov	r3, r2
 800dca0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dca6:	2b20      	cmp	r3, #32
 800dca8:	f040 808a 	bne.w	800ddc0 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d002      	beq.n	800dcb8 <HAL_UART_Receive_IT+0x24>
 800dcb2:	88fb      	ldrh	r3, [r7, #6]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800dcb8:	2301      	movs	r3, #1
 800dcba:	e082      	b.n	800ddc2 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d101      	bne.n	800dcca <HAL_UART_Receive_IT+0x36>
 800dcc6:	2302      	movs	r3, #2
 800dcc8:	e07b      	b.n	800ddc2 <HAL_UART_Receive_IT+0x12e>
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	2201      	movs	r2, #1
 800dcce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	68ba      	ldr	r2, [r7, #8]
 800dcd6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	88fa      	ldrh	r2, [r7, #6]
 800dcdc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	88fa      	ldrh	r2, [r7, #6]
 800dce4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2200      	movs	r2, #0
 800dcec:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	689b      	ldr	r3, [r3, #8]
 800dcf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcf6:	d10e      	bne.n	800dd16 <HAL_UART_Receive_IT+0x82>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	691b      	ldr	r3, [r3, #16]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d105      	bne.n	800dd0c <HAL_UART_Receive_IT+0x78>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f240 12ff 	movw	r2, #511	; 0x1ff
 800dd06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd0a:	e02d      	b.n	800dd68 <HAL_UART_Receive_IT+0xd4>
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	22ff      	movs	r2, #255	; 0xff
 800dd10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd14:	e028      	b.n	800dd68 <HAL_UART_Receive_IT+0xd4>
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	689b      	ldr	r3, [r3, #8]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10d      	bne.n	800dd3a <HAL_UART_Receive_IT+0xa6>
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	691b      	ldr	r3, [r3, #16]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d104      	bne.n	800dd30 <HAL_UART_Receive_IT+0x9c>
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	22ff      	movs	r2, #255	; 0xff
 800dd2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd2e:	e01b      	b.n	800dd68 <HAL_UART_Receive_IT+0xd4>
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	227f      	movs	r2, #127	; 0x7f
 800dd34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd38:	e016      	b.n	800dd68 <HAL_UART_Receive_IT+0xd4>
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	689b      	ldr	r3, [r3, #8]
 800dd3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dd42:	d10d      	bne.n	800dd60 <HAL_UART_Receive_IT+0xcc>
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	691b      	ldr	r3, [r3, #16]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d104      	bne.n	800dd56 <HAL_UART_Receive_IT+0xc2>
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	227f      	movs	r2, #127	; 0x7f
 800dd50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd54:	e008      	b.n	800dd68 <HAL_UART_Receive_IT+0xd4>
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	223f      	movs	r2, #63	; 0x3f
 800dd5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dd5e:	e003      	b.n	800dd68 <HAL_UART_Receive_IT+0xd4>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2200      	movs	r2, #0
 800dd64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dd6e:	68fb      	ldr	r3, [r7, #12]
 800dd70:	2222      	movs	r2, #34	; 0x22
 800dd72:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	689a      	ldr	r2, [r3, #8]
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f042 0201 	orr.w	r2, r2, #1
 800dd82:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd8c:	d107      	bne.n	800dd9e <HAL_UART_Receive_IT+0x10a>
 800dd8e:	68fb      	ldr	r3, [r7, #12]
 800dd90:	691b      	ldr	r3, [r3, #16]
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d103      	bne.n	800dd9e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	4a0d      	ldr	r2, [pc, #52]	; (800ddd0 <HAL_UART_Receive_IT+0x13c>)
 800dd9a:	661a      	str	r2, [r3, #96]	; 0x60
 800dd9c:	e002      	b.n	800dda4 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	4a0c      	ldr	r2, [pc, #48]	; (800ddd4 <HAL_UART_Receive_IT+0x140>)
 800dda2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ddba:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800ddbc:	2300      	movs	r3, #0
 800ddbe:	e000      	b.n	800ddc2 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800ddc0:	2302      	movs	r3, #2
  }
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3714      	adds	r7, #20
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddcc:	4770      	bx	lr
 800ddce:	bf00      	nop
 800ddd0:	0800eddf 	.word	0x0800eddf
 800ddd4:	0800ed39 	.word	0x0800ed39

0800ddd8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ddd8:	b580      	push	{r7, lr}
 800ddda:	b084      	sub	sp, #16
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	60f8      	str	r0, [r7, #12]
 800dde0:	60b9      	str	r1, [r7, #8]
 800dde2:	4613      	mov	r3, r2
 800dde4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddea:	2b20      	cmp	r3, #32
 800ddec:	d16c      	bne.n	800dec8 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d002      	beq.n	800ddfa <HAL_UART_Receive_DMA+0x22>
 800ddf4:	88fb      	ldrh	r3, [r7, #6]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d101      	bne.n	800ddfe <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800ddfa:	2301      	movs	r3, #1
 800ddfc:	e065      	b.n	800deca <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800de04:	2b01      	cmp	r3, #1
 800de06:	d101      	bne.n	800de0c <HAL_UART_Receive_DMA+0x34>
 800de08:	2302      	movs	r3, #2
 800de0a:	e05e      	b.n	800deca <HAL_UART_Receive_DMA+0xf2>
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	2201      	movs	r2, #1
 800de10:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68ba      	ldr	r2, [r7, #8]
 800de18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	88fa      	ldrh	r2, [r7, #6]
 800de1e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	2200      	movs	r2, #0
 800de26:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2222      	movs	r2, #34	; 0x22
 800de2c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de32:	2b00      	cmp	r3, #0
 800de34:	d02a      	beq.n	800de8c <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de3a:	4a26      	ldr	r2, [pc, #152]	; (800ded4 <HAL_UART_Receive_DMA+0xfc>)
 800de3c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de42:	4a25      	ldr	r2, [pc, #148]	; (800ded8 <HAL_UART_Receive_DMA+0x100>)
 800de44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de4a:	4a24      	ldr	r2, [pc, #144]	; (800dedc <HAL_UART_Receive_DMA+0x104>)
 800de4c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de52:	2200      	movs	r2, #0
 800de54:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	3324      	adds	r3, #36	; 0x24
 800de60:	4619      	mov	r1, r3
 800de62:	68fb      	ldr	r3, [r7, #12]
 800de64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800de66:	461a      	mov	r2, r3
 800de68:	88fb      	ldrh	r3, [r7, #6]
 800de6a:	f7fa fa63 	bl	8008334 <HAL_DMA_Start_IT>
 800de6e:	4603      	mov	r3, r0
 800de70:	2b00      	cmp	r3, #0
 800de72:	d00b      	beq.n	800de8c <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2210      	movs	r2, #16
 800de78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	2200      	movs	r2, #0
 800de7e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	2220      	movs	r2, #32
 800de86:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800de88:	2301      	movs	r3, #1
 800de8a:	e01e      	b.n	800deca <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	2200      	movs	r2, #0
 800de90:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	681a      	ldr	r2, [r3, #0]
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dea2:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	689a      	ldr	r2, [r3, #8]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	f042 0201 	orr.w	r2, r2, #1
 800deb2:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	689a      	ldr	r2, [r3, #8]
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dec2:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800dec4:	2300      	movs	r3, #0
 800dec6:	e000      	b.n	800deca <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800dec8:	2302      	movs	r3, #2
  }
}
 800deca:	4618      	mov	r0, r3
 800decc:	3710      	adds	r7, #16
 800dece:	46bd      	mov	sp, r7
 800ded0:	bd80      	pop	{r7, pc}
 800ded2:	bf00      	nop
 800ded4:	0800ebe3 	.word	0x0800ebe3
 800ded8:	0800ec47 	.word	0x0800ec47
 800dedc:	0800ec63 	.word	0x0800ec63

0800dee0 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b085      	sub	sp, #20
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deec:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800def2:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800defa:	2b01      	cmp	r3, #1
 800defc:	d101      	bne.n	800df02 <HAL_UART_DMAPause+0x22>
 800defe:	2302      	movs	r3, #2
 800df00:	e03c      	b.n	800df7c <HAL_UART_DMAPause+0x9c>
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2201      	movs	r2, #1
 800df06:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	689b      	ldr	r3, [r3, #8]
 800df10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df14:	2b80      	cmp	r3, #128	; 0x80
 800df16:	d10a      	bne.n	800df2e <HAL_UART_DMAPause+0x4e>
 800df18:	68fb      	ldr	r3, [r7, #12]
 800df1a:	2b21      	cmp	r3, #33	; 0x21
 800df1c:	d107      	bne.n	800df2e <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	689a      	ldr	r2, [r3, #8]
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800df2c:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	689b      	ldr	r3, [r3, #8]
 800df34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800df38:	2b40      	cmp	r3, #64	; 0x40
 800df3a:	d11a      	bne.n	800df72 <HAL_UART_DMAPause+0x92>
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	2b22      	cmp	r3, #34	; 0x22
 800df40:	d117      	bne.n	800df72 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	681a      	ldr	r2, [r3, #0]
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	681b      	ldr	r3, [r3, #0]
 800df4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df50:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	689a      	ldr	r2, [r3, #8]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	681b      	ldr	r3, [r3, #0]
 800df5c:	f022 0201 	bic.w	r2, r2, #1
 800df60:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	689a      	ldr	r2, [r3, #8]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df70:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	2200      	movs	r2, #0
 800df76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800df7a:	2300      	movs	r3, #0
}
 800df7c:	4618      	mov	r0, r3
 800df7e:	3714      	adds	r7, #20
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800df96:	2b01      	cmp	r3, #1
 800df98:	d101      	bne.n	800df9e <HAL_UART_DMAResume+0x16>
 800df9a:	2302      	movs	r3, #2
 800df9c:	e034      	b.n	800e008 <HAL_UART_DMAResume+0x80>
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dfaa:	2b21      	cmp	r3, #33	; 0x21
 800dfac:	d107      	bne.n	800dfbe <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	689a      	ldr	r2, [r3, #8]
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800dfbc:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dfc2:	2b22      	cmp	r3, #34	; 0x22
 800dfc4:	d11b      	bne.n	800dffe <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	2208      	movs	r2, #8
 800dfcc:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	681a      	ldr	r2, [r3, #0]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dfdc:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	689a      	ldr	r2, [r3, #8]
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	f042 0201 	orr.w	r2, r2, #1
 800dfec:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	689a      	ldr	r2, [r3, #8]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dffc:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e006:	2300      	movs	r3, #0
}
 800e008:	4618      	mov	r0, r3
 800e00a:	370c      	adds	r7, #12
 800e00c:	46bd      	mov	sp, r7
 800e00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e012:	4770      	bx	lr

0800e014 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e020:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e026:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	689b      	ldr	r3, [r3, #8]
 800e02e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e032:	2b80      	cmp	r3, #128	; 0x80
 800e034:	d126      	bne.n	800e084 <HAL_UART_DMAStop+0x70>
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	2b21      	cmp	r3, #33	; 0x21
 800e03a:	d123      	bne.n	800e084 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	689a      	ldr	r2, [r3, #8]
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e04a:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e050:	2b00      	cmp	r3, #0
 800e052:	d014      	beq.n	800e07e <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e058:	4618      	mov	r0, r3
 800e05a:	f7fa f9cb 	bl	80083f4 <HAL_DMA_Abort>
 800e05e:	4603      	mov	r3, r0
 800e060:	2b00      	cmp	r3, #0
 800e062:	d00c      	beq.n	800e07e <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e068:	4618      	mov	r0, r3
 800e06a:	f7fa fbdf 	bl	800882c <HAL_DMA_GetError>
 800e06e:	4603      	mov	r3, r0
 800e070:	2b20      	cmp	r3, #32
 800e072:	d104      	bne.n	800e07e <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	2210      	movs	r2, #16
 800e078:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e07a:	2303      	movs	r3, #3
 800e07c:	e031      	b.n	800e0e2 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800e07e:	6878      	ldr	r0, [r7, #4]
 800e080:	f000 fd7a 	bl	800eb78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	689b      	ldr	r3, [r3, #8]
 800e08a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e08e:	2b40      	cmp	r3, #64	; 0x40
 800e090:	d126      	bne.n	800e0e0 <HAL_UART_DMAStop+0xcc>
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	2b22      	cmp	r3, #34	; 0x22
 800e096:	d123      	bne.n	800e0e0 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	689a      	ldr	r2, [r3, #8]
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e0a6:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800e0a8:	687b      	ldr	r3, [r7, #4]
 800e0aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d014      	beq.n	800e0da <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	f7fa f99d 	bl	80083f4 <HAL_DMA_Abort>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d00c      	beq.n	800e0da <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7fa fbb1 	bl	800882c <HAL_DMA_GetError>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	2b20      	cmp	r3, #32
 800e0ce:	d104      	bne.n	800e0da <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2210      	movs	r2, #16
 800e0d4:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800e0d6:	2303      	movs	r3, #3
 800e0d8:	e003      	b.n	800e0e2 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800e0da:	6878      	ldr	r0, [r7, #4]
 800e0dc:	f000 fd61 	bl	800eba2 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800e0e0:	2300      	movs	r3, #0
}
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	3710      	adds	r7, #16
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
	...

0800e0ec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e0ec:	b580      	push	{r7, lr}
 800e0ee:	b088      	sub	sp, #32
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	69db      	ldr	r3, [r3, #28]
 800e0fa:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	689b      	ldr	r3, [r3, #8]
 800e10a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e10c:	69fa      	ldr	r2, [r7, #28]
 800e10e:	f640 030f 	movw	r3, #2063	; 0x80f
 800e112:	4013      	ands	r3, r2
 800e114:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800e116:	693b      	ldr	r3, [r7, #16]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d113      	bne.n	800e144 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	f003 0320 	and.w	r3, r3, #32
 800e122:	2b00      	cmp	r3, #0
 800e124:	d00e      	beq.n	800e144 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e126:	69bb      	ldr	r3, [r7, #24]
 800e128:	f003 0320 	and.w	r3, r3, #32
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e134:	2b00      	cmp	r3, #0
 800e136:	f000 8100 	beq.w	800e33a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	4798      	blx	r3
      }
      return;
 800e142:	e0fa      	b.n	800e33a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	2b00      	cmp	r3, #0
 800e148:	f000 80d5 	beq.w	800e2f6 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f003 0301 	and.w	r3, r3, #1
 800e152:	2b00      	cmp	r3, #0
 800e154:	d105      	bne.n	800e162 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800e156:	69bb      	ldr	r3, [r7, #24]
 800e158:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	f000 80ca 	beq.w	800e2f6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e162:	69fb      	ldr	r3, [r7, #28]
 800e164:	f003 0301 	and.w	r3, r3, #1
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d00e      	beq.n	800e18a <HAL_UART_IRQHandler+0x9e>
 800e16c:	69bb      	ldr	r3, [r7, #24]
 800e16e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e172:	2b00      	cmp	r3, #0
 800e174:	d009      	beq.n	800e18a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2201      	movs	r2, #1
 800e17c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e182:	f043 0201 	orr.w	r2, r3, #1
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e18a:	69fb      	ldr	r3, [r7, #28]
 800e18c:	f003 0302 	and.w	r3, r3, #2
 800e190:	2b00      	cmp	r3, #0
 800e192:	d00e      	beq.n	800e1b2 <HAL_UART_IRQHandler+0xc6>
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	f003 0301 	and.w	r3, r3, #1
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d009      	beq.n	800e1b2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	2202      	movs	r2, #2
 800e1a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1aa:	f043 0204 	orr.w	r2, r3, #4
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e1b2:	69fb      	ldr	r3, [r7, #28]
 800e1b4:	f003 0304 	and.w	r3, r3, #4
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d00e      	beq.n	800e1da <HAL_UART_IRQHandler+0xee>
 800e1bc:	697b      	ldr	r3, [r7, #20]
 800e1be:	f003 0301 	and.w	r3, r3, #1
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d009      	beq.n	800e1da <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	2204      	movs	r2, #4
 800e1cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e1d2:	f043 0202 	orr.w	r2, r3, #2
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e1da:	69fb      	ldr	r3, [r7, #28]
 800e1dc:	f003 0308 	and.w	r3, r3, #8
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d013      	beq.n	800e20c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e1e4:	69bb      	ldr	r3, [r7, #24]
 800e1e6:	f003 0320 	and.w	r3, r3, #32
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d104      	bne.n	800e1f8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e1ee:	697b      	ldr	r3, [r7, #20]
 800e1f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d009      	beq.n	800e20c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681b      	ldr	r3, [r3, #0]
 800e1fc:	2208      	movs	r2, #8
 800e1fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e204:	f043 0208 	orr.w	r2, r3, #8
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e212:	2b00      	cmp	r3, #0
 800e214:	d00f      	beq.n	800e236 <HAL_UART_IRQHandler+0x14a>
 800e216:	69bb      	ldr	r3, [r7, #24]
 800e218:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d00a      	beq.n	800e236 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e228:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e22e:	f043 0220 	orr.w	r2, r3, #32
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d07f      	beq.n	800e33e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e23e:	69fb      	ldr	r3, [r7, #28]
 800e240:	f003 0320 	and.w	r3, r3, #32
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00c      	beq.n	800e262 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	f003 0320 	and.w	r3, r3, #32
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d007      	beq.n	800e262 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e256:	2b00      	cmp	r3, #0
 800e258:	d003      	beq.n	800e262 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e266:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e272:	2b40      	cmp	r3, #64	; 0x40
 800e274:	d004      	beq.n	800e280 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d031      	beq.n	800e2e4 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 fc8e 	bl	800eba2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	689b      	ldr	r3, [r3, #8]
 800e28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e290:	2b40      	cmp	r3, #64	; 0x40
 800e292:	d123      	bne.n	800e2dc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	689a      	ldr	r2, [r3, #8]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e2a2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d013      	beq.n	800e2d4 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b0:	4a26      	ldr	r2, [pc, #152]	; (800e34c <HAL_UART_IRQHandler+0x260>)
 800e2b2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fa f90b 	bl	80084d4 <HAL_DMA_Abort_IT>
 800e2be:	4603      	mov	r3, r0
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d016      	beq.n	800e2f2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e2c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e2ce:	4610      	mov	r0, r2
 800e2d0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2d2:	e00e      	b.n	800e2f2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 f84f 	bl	800e378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2da:	e00a      	b.n	800e2f2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e2dc:	6878      	ldr	r0, [r7, #4]
 800e2de:	f000 f84b 	bl	800e378 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2e2:	e006      	b.n	800e2f2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e2e4:	6878      	ldr	r0, [r7, #4]
 800e2e6:	f000 f847 	bl	800e378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800e2f0:	e025      	b.n	800e33e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e2f2:	bf00      	nop
    return;
 800e2f4:	e023      	b.n	800e33e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e2f6:	69fb      	ldr	r3, [r7, #28]
 800e2f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00d      	beq.n	800e31c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e300:	69bb      	ldr	r3, [r7, #24]
 800e302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e306:	2b00      	cmp	r3, #0
 800e308:	d008      	beq.n	800e31c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d017      	beq.n	800e342 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	4798      	blx	r3
    }
    return;
 800e31a:	e012      	b.n	800e342 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e31c:	69fb      	ldr	r3, [r7, #28]
 800e31e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00e      	beq.n	800e344 <HAL_UART_IRQHandler+0x258>
 800e326:	69bb      	ldr	r3, [r7, #24]
 800e328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d009      	beq.n	800e344 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f000 fce8 	bl	800ed06 <UART_EndTransmit_IT>
    return;
 800e336:	bf00      	nop
 800e338:	e004      	b.n	800e344 <HAL_UART_IRQHandler+0x258>
      return;
 800e33a:	bf00      	nop
 800e33c:	e002      	b.n	800e344 <HAL_UART_IRQHandler+0x258>
    return;
 800e33e:	bf00      	nop
 800e340:	e000      	b.n	800e344 <HAL_UART_IRQHandler+0x258>
    return;
 800e342:	bf00      	nop
  }

}
 800e344:	3720      	adds	r7, #32
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}
 800e34a:	bf00      	nop
 800e34c:	0800ecdb 	.word	0x0800ecdb

0800e350 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e350:	b480      	push	{r7}
 800e352:	b083      	sub	sp, #12
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e358:	bf00      	nop
 800e35a:	370c      	adds	r7, #12
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e364:	b480      	push	{r7}
 800e366:	b083      	sub	sp, #12
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e36c:	bf00      	nop
 800e36e:	370c      	adds	r7, #12
 800e370:	46bd      	mov	sp, r7
 800e372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e376:	4770      	bx	lr

0800e378 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e378:	b480      	push	{r7}
 800e37a:	b083      	sub	sp, #12
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e380:	bf00      	nop
 800e382:	370c      	adds	r7, #12
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr

0800e38c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b088      	sub	sp, #32
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e394:	2300      	movs	r3, #0
 800e396:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e398:	2300      	movs	r3, #0
 800e39a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	689a      	ldr	r2, [r3, #8]
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	691b      	ldr	r3, [r3, #16]
 800e3a4:	431a      	orrs	r2, r3
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	431a      	orrs	r2, r3
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	69db      	ldr	r3, [r3, #28]
 800e3b0:	4313      	orrs	r3, r2
 800e3b2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	4bb1      	ldr	r3, [pc, #708]	; (800e680 <UART_SetConfig+0x2f4>)
 800e3bc:	4013      	ands	r3, r2
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	6812      	ldr	r2, [r2, #0]
 800e3c2:	6939      	ldr	r1, [r7, #16]
 800e3c4:	430b      	orrs	r3, r1
 800e3c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	685b      	ldr	r3, [r3, #4]
 800e3ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68da      	ldr	r2, [r3, #12]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	430a      	orrs	r2, r1
 800e3dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	699b      	ldr	r3, [r3, #24]
 800e3e2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a1b      	ldr	r3, [r3, #32]
 800e3e8:	693a      	ldr	r2, [r7, #16]
 800e3ea:	4313      	orrs	r3, r2
 800e3ec:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	689b      	ldr	r3, [r3, #8]
 800e3f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	693a      	ldr	r2, [r7, #16]
 800e3fe:	430a      	orrs	r2, r1
 800e400:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	4a9f      	ldr	r2, [pc, #636]	; (800e684 <UART_SetConfig+0x2f8>)
 800e408:	4293      	cmp	r3, r2
 800e40a:	d121      	bne.n	800e450 <UART_SetConfig+0xc4>
 800e40c:	4b9e      	ldr	r3, [pc, #632]	; (800e688 <UART_SetConfig+0x2fc>)
 800e40e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e412:	f003 0303 	and.w	r3, r3, #3
 800e416:	2b03      	cmp	r3, #3
 800e418:	d816      	bhi.n	800e448 <UART_SetConfig+0xbc>
 800e41a:	a201      	add	r2, pc, #4	; (adr r2, 800e420 <UART_SetConfig+0x94>)
 800e41c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e420:	0800e431 	.word	0x0800e431
 800e424:	0800e43d 	.word	0x0800e43d
 800e428:	0800e437 	.word	0x0800e437
 800e42c:	0800e443 	.word	0x0800e443
 800e430:	2301      	movs	r3, #1
 800e432:	77fb      	strb	r3, [r7, #31]
 800e434:	e151      	b.n	800e6da <UART_SetConfig+0x34e>
 800e436:	2302      	movs	r3, #2
 800e438:	77fb      	strb	r3, [r7, #31]
 800e43a:	e14e      	b.n	800e6da <UART_SetConfig+0x34e>
 800e43c:	2304      	movs	r3, #4
 800e43e:	77fb      	strb	r3, [r7, #31]
 800e440:	e14b      	b.n	800e6da <UART_SetConfig+0x34e>
 800e442:	2308      	movs	r3, #8
 800e444:	77fb      	strb	r3, [r7, #31]
 800e446:	e148      	b.n	800e6da <UART_SetConfig+0x34e>
 800e448:	2310      	movs	r3, #16
 800e44a:	77fb      	strb	r3, [r7, #31]
 800e44c:	bf00      	nop
 800e44e:	e144      	b.n	800e6da <UART_SetConfig+0x34e>
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	4a8d      	ldr	r2, [pc, #564]	; (800e68c <UART_SetConfig+0x300>)
 800e456:	4293      	cmp	r3, r2
 800e458:	d134      	bne.n	800e4c4 <UART_SetConfig+0x138>
 800e45a:	4b8b      	ldr	r3, [pc, #556]	; (800e688 <UART_SetConfig+0x2fc>)
 800e45c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e460:	f003 030c 	and.w	r3, r3, #12
 800e464:	2b0c      	cmp	r3, #12
 800e466:	d829      	bhi.n	800e4bc <UART_SetConfig+0x130>
 800e468:	a201      	add	r2, pc, #4	; (adr r2, 800e470 <UART_SetConfig+0xe4>)
 800e46a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e46e:	bf00      	nop
 800e470:	0800e4a5 	.word	0x0800e4a5
 800e474:	0800e4bd 	.word	0x0800e4bd
 800e478:	0800e4bd 	.word	0x0800e4bd
 800e47c:	0800e4bd 	.word	0x0800e4bd
 800e480:	0800e4b1 	.word	0x0800e4b1
 800e484:	0800e4bd 	.word	0x0800e4bd
 800e488:	0800e4bd 	.word	0x0800e4bd
 800e48c:	0800e4bd 	.word	0x0800e4bd
 800e490:	0800e4ab 	.word	0x0800e4ab
 800e494:	0800e4bd 	.word	0x0800e4bd
 800e498:	0800e4bd 	.word	0x0800e4bd
 800e49c:	0800e4bd 	.word	0x0800e4bd
 800e4a0:	0800e4b7 	.word	0x0800e4b7
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	77fb      	strb	r3, [r7, #31]
 800e4a8:	e117      	b.n	800e6da <UART_SetConfig+0x34e>
 800e4aa:	2302      	movs	r3, #2
 800e4ac:	77fb      	strb	r3, [r7, #31]
 800e4ae:	e114      	b.n	800e6da <UART_SetConfig+0x34e>
 800e4b0:	2304      	movs	r3, #4
 800e4b2:	77fb      	strb	r3, [r7, #31]
 800e4b4:	e111      	b.n	800e6da <UART_SetConfig+0x34e>
 800e4b6:	2308      	movs	r3, #8
 800e4b8:	77fb      	strb	r3, [r7, #31]
 800e4ba:	e10e      	b.n	800e6da <UART_SetConfig+0x34e>
 800e4bc:	2310      	movs	r3, #16
 800e4be:	77fb      	strb	r3, [r7, #31]
 800e4c0:	bf00      	nop
 800e4c2:	e10a      	b.n	800e6da <UART_SetConfig+0x34e>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	4a71      	ldr	r2, [pc, #452]	; (800e690 <UART_SetConfig+0x304>)
 800e4ca:	4293      	cmp	r3, r2
 800e4cc:	d120      	bne.n	800e510 <UART_SetConfig+0x184>
 800e4ce:	4b6e      	ldr	r3, [pc, #440]	; (800e688 <UART_SetConfig+0x2fc>)
 800e4d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4d4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e4d8:	2b10      	cmp	r3, #16
 800e4da:	d00f      	beq.n	800e4fc <UART_SetConfig+0x170>
 800e4dc:	2b10      	cmp	r3, #16
 800e4de:	d802      	bhi.n	800e4e6 <UART_SetConfig+0x15a>
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d005      	beq.n	800e4f0 <UART_SetConfig+0x164>
 800e4e4:	e010      	b.n	800e508 <UART_SetConfig+0x17c>
 800e4e6:	2b20      	cmp	r3, #32
 800e4e8:	d005      	beq.n	800e4f6 <UART_SetConfig+0x16a>
 800e4ea:	2b30      	cmp	r3, #48	; 0x30
 800e4ec:	d009      	beq.n	800e502 <UART_SetConfig+0x176>
 800e4ee:	e00b      	b.n	800e508 <UART_SetConfig+0x17c>
 800e4f0:	2300      	movs	r3, #0
 800e4f2:	77fb      	strb	r3, [r7, #31]
 800e4f4:	e0f1      	b.n	800e6da <UART_SetConfig+0x34e>
 800e4f6:	2302      	movs	r3, #2
 800e4f8:	77fb      	strb	r3, [r7, #31]
 800e4fa:	e0ee      	b.n	800e6da <UART_SetConfig+0x34e>
 800e4fc:	2304      	movs	r3, #4
 800e4fe:	77fb      	strb	r3, [r7, #31]
 800e500:	e0eb      	b.n	800e6da <UART_SetConfig+0x34e>
 800e502:	2308      	movs	r3, #8
 800e504:	77fb      	strb	r3, [r7, #31]
 800e506:	e0e8      	b.n	800e6da <UART_SetConfig+0x34e>
 800e508:	2310      	movs	r3, #16
 800e50a:	77fb      	strb	r3, [r7, #31]
 800e50c:	bf00      	nop
 800e50e:	e0e4      	b.n	800e6da <UART_SetConfig+0x34e>
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	4a5f      	ldr	r2, [pc, #380]	; (800e694 <UART_SetConfig+0x308>)
 800e516:	4293      	cmp	r3, r2
 800e518:	d120      	bne.n	800e55c <UART_SetConfig+0x1d0>
 800e51a:	4b5b      	ldr	r3, [pc, #364]	; (800e688 <UART_SetConfig+0x2fc>)
 800e51c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e520:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e524:	2b40      	cmp	r3, #64	; 0x40
 800e526:	d00f      	beq.n	800e548 <UART_SetConfig+0x1bc>
 800e528:	2b40      	cmp	r3, #64	; 0x40
 800e52a:	d802      	bhi.n	800e532 <UART_SetConfig+0x1a6>
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d005      	beq.n	800e53c <UART_SetConfig+0x1b0>
 800e530:	e010      	b.n	800e554 <UART_SetConfig+0x1c8>
 800e532:	2b80      	cmp	r3, #128	; 0x80
 800e534:	d005      	beq.n	800e542 <UART_SetConfig+0x1b6>
 800e536:	2bc0      	cmp	r3, #192	; 0xc0
 800e538:	d009      	beq.n	800e54e <UART_SetConfig+0x1c2>
 800e53a:	e00b      	b.n	800e554 <UART_SetConfig+0x1c8>
 800e53c:	2300      	movs	r3, #0
 800e53e:	77fb      	strb	r3, [r7, #31]
 800e540:	e0cb      	b.n	800e6da <UART_SetConfig+0x34e>
 800e542:	2302      	movs	r3, #2
 800e544:	77fb      	strb	r3, [r7, #31]
 800e546:	e0c8      	b.n	800e6da <UART_SetConfig+0x34e>
 800e548:	2304      	movs	r3, #4
 800e54a:	77fb      	strb	r3, [r7, #31]
 800e54c:	e0c5      	b.n	800e6da <UART_SetConfig+0x34e>
 800e54e:	2308      	movs	r3, #8
 800e550:	77fb      	strb	r3, [r7, #31]
 800e552:	e0c2      	b.n	800e6da <UART_SetConfig+0x34e>
 800e554:	2310      	movs	r3, #16
 800e556:	77fb      	strb	r3, [r7, #31]
 800e558:	bf00      	nop
 800e55a:	e0be      	b.n	800e6da <UART_SetConfig+0x34e>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	4a4d      	ldr	r2, [pc, #308]	; (800e698 <UART_SetConfig+0x30c>)
 800e562:	4293      	cmp	r3, r2
 800e564:	d124      	bne.n	800e5b0 <UART_SetConfig+0x224>
 800e566:	4b48      	ldr	r3, [pc, #288]	; (800e688 <UART_SetConfig+0x2fc>)
 800e568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e56c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e570:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e574:	d012      	beq.n	800e59c <UART_SetConfig+0x210>
 800e576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e57a:	d802      	bhi.n	800e582 <UART_SetConfig+0x1f6>
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d007      	beq.n	800e590 <UART_SetConfig+0x204>
 800e580:	e012      	b.n	800e5a8 <UART_SetConfig+0x21c>
 800e582:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e586:	d006      	beq.n	800e596 <UART_SetConfig+0x20a>
 800e588:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e58c:	d009      	beq.n	800e5a2 <UART_SetConfig+0x216>
 800e58e:	e00b      	b.n	800e5a8 <UART_SetConfig+0x21c>
 800e590:	2300      	movs	r3, #0
 800e592:	77fb      	strb	r3, [r7, #31]
 800e594:	e0a1      	b.n	800e6da <UART_SetConfig+0x34e>
 800e596:	2302      	movs	r3, #2
 800e598:	77fb      	strb	r3, [r7, #31]
 800e59a:	e09e      	b.n	800e6da <UART_SetConfig+0x34e>
 800e59c:	2304      	movs	r3, #4
 800e59e:	77fb      	strb	r3, [r7, #31]
 800e5a0:	e09b      	b.n	800e6da <UART_SetConfig+0x34e>
 800e5a2:	2308      	movs	r3, #8
 800e5a4:	77fb      	strb	r3, [r7, #31]
 800e5a6:	e098      	b.n	800e6da <UART_SetConfig+0x34e>
 800e5a8:	2310      	movs	r3, #16
 800e5aa:	77fb      	strb	r3, [r7, #31]
 800e5ac:	bf00      	nop
 800e5ae:	e094      	b.n	800e6da <UART_SetConfig+0x34e>
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4a39      	ldr	r2, [pc, #228]	; (800e69c <UART_SetConfig+0x310>)
 800e5b6:	4293      	cmp	r3, r2
 800e5b8:	d124      	bne.n	800e604 <UART_SetConfig+0x278>
 800e5ba:	4b33      	ldr	r3, [pc, #204]	; (800e688 <UART_SetConfig+0x2fc>)
 800e5bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e5c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5c8:	d012      	beq.n	800e5f0 <UART_SetConfig+0x264>
 800e5ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e5ce:	d802      	bhi.n	800e5d6 <UART_SetConfig+0x24a>
 800e5d0:	2b00      	cmp	r3, #0
 800e5d2:	d007      	beq.n	800e5e4 <UART_SetConfig+0x258>
 800e5d4:	e012      	b.n	800e5fc <UART_SetConfig+0x270>
 800e5d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e5da:	d006      	beq.n	800e5ea <UART_SetConfig+0x25e>
 800e5dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e5e0:	d009      	beq.n	800e5f6 <UART_SetConfig+0x26a>
 800e5e2:	e00b      	b.n	800e5fc <UART_SetConfig+0x270>
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	77fb      	strb	r3, [r7, #31]
 800e5e8:	e077      	b.n	800e6da <UART_SetConfig+0x34e>
 800e5ea:	2302      	movs	r3, #2
 800e5ec:	77fb      	strb	r3, [r7, #31]
 800e5ee:	e074      	b.n	800e6da <UART_SetConfig+0x34e>
 800e5f0:	2304      	movs	r3, #4
 800e5f2:	77fb      	strb	r3, [r7, #31]
 800e5f4:	e071      	b.n	800e6da <UART_SetConfig+0x34e>
 800e5f6:	2308      	movs	r3, #8
 800e5f8:	77fb      	strb	r3, [r7, #31]
 800e5fa:	e06e      	b.n	800e6da <UART_SetConfig+0x34e>
 800e5fc:	2310      	movs	r3, #16
 800e5fe:	77fb      	strb	r3, [r7, #31]
 800e600:	bf00      	nop
 800e602:	e06a      	b.n	800e6da <UART_SetConfig+0x34e>
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4a25      	ldr	r2, [pc, #148]	; (800e6a0 <UART_SetConfig+0x314>)
 800e60a:	4293      	cmp	r3, r2
 800e60c:	d124      	bne.n	800e658 <UART_SetConfig+0x2cc>
 800e60e:	4b1e      	ldr	r3, [pc, #120]	; (800e688 <UART_SetConfig+0x2fc>)
 800e610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e614:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e618:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e61c:	d012      	beq.n	800e644 <UART_SetConfig+0x2b8>
 800e61e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e622:	d802      	bhi.n	800e62a <UART_SetConfig+0x29e>
 800e624:	2b00      	cmp	r3, #0
 800e626:	d007      	beq.n	800e638 <UART_SetConfig+0x2ac>
 800e628:	e012      	b.n	800e650 <UART_SetConfig+0x2c4>
 800e62a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e62e:	d006      	beq.n	800e63e <UART_SetConfig+0x2b2>
 800e630:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e634:	d009      	beq.n	800e64a <UART_SetConfig+0x2be>
 800e636:	e00b      	b.n	800e650 <UART_SetConfig+0x2c4>
 800e638:	2300      	movs	r3, #0
 800e63a:	77fb      	strb	r3, [r7, #31]
 800e63c:	e04d      	b.n	800e6da <UART_SetConfig+0x34e>
 800e63e:	2302      	movs	r3, #2
 800e640:	77fb      	strb	r3, [r7, #31]
 800e642:	e04a      	b.n	800e6da <UART_SetConfig+0x34e>
 800e644:	2304      	movs	r3, #4
 800e646:	77fb      	strb	r3, [r7, #31]
 800e648:	e047      	b.n	800e6da <UART_SetConfig+0x34e>
 800e64a:	2308      	movs	r3, #8
 800e64c:	77fb      	strb	r3, [r7, #31]
 800e64e:	e044      	b.n	800e6da <UART_SetConfig+0x34e>
 800e650:	2310      	movs	r3, #16
 800e652:	77fb      	strb	r3, [r7, #31]
 800e654:	bf00      	nop
 800e656:	e040      	b.n	800e6da <UART_SetConfig+0x34e>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	4a11      	ldr	r2, [pc, #68]	; (800e6a4 <UART_SetConfig+0x318>)
 800e65e:	4293      	cmp	r3, r2
 800e660:	d139      	bne.n	800e6d6 <UART_SetConfig+0x34a>
 800e662:	4b09      	ldr	r3, [pc, #36]	; (800e688 <UART_SetConfig+0x2fc>)
 800e664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e66c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e670:	d027      	beq.n	800e6c2 <UART_SetConfig+0x336>
 800e672:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e676:	d817      	bhi.n	800e6a8 <UART_SetConfig+0x31c>
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d01c      	beq.n	800e6b6 <UART_SetConfig+0x32a>
 800e67c:	e027      	b.n	800e6ce <UART_SetConfig+0x342>
 800e67e:	bf00      	nop
 800e680:	efff69f3 	.word	0xefff69f3
 800e684:	40011000 	.word	0x40011000
 800e688:	40023800 	.word	0x40023800
 800e68c:	40004400 	.word	0x40004400
 800e690:	40004800 	.word	0x40004800
 800e694:	40004c00 	.word	0x40004c00
 800e698:	40005000 	.word	0x40005000
 800e69c:	40011400 	.word	0x40011400
 800e6a0:	40007800 	.word	0x40007800
 800e6a4:	40007c00 	.word	0x40007c00
 800e6a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6ac:	d006      	beq.n	800e6bc <UART_SetConfig+0x330>
 800e6ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e6b2:	d009      	beq.n	800e6c8 <UART_SetConfig+0x33c>
 800e6b4:	e00b      	b.n	800e6ce <UART_SetConfig+0x342>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	77fb      	strb	r3, [r7, #31]
 800e6ba:	e00e      	b.n	800e6da <UART_SetConfig+0x34e>
 800e6bc:	2302      	movs	r3, #2
 800e6be:	77fb      	strb	r3, [r7, #31]
 800e6c0:	e00b      	b.n	800e6da <UART_SetConfig+0x34e>
 800e6c2:	2304      	movs	r3, #4
 800e6c4:	77fb      	strb	r3, [r7, #31]
 800e6c6:	e008      	b.n	800e6da <UART_SetConfig+0x34e>
 800e6c8:	2308      	movs	r3, #8
 800e6ca:	77fb      	strb	r3, [r7, #31]
 800e6cc:	e005      	b.n	800e6da <UART_SetConfig+0x34e>
 800e6ce:	2310      	movs	r3, #16
 800e6d0:	77fb      	strb	r3, [r7, #31]
 800e6d2:	bf00      	nop
 800e6d4:	e001      	b.n	800e6da <UART_SetConfig+0x34e>
 800e6d6:	2310      	movs	r3, #16
 800e6d8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	69db      	ldr	r3, [r3, #28]
 800e6de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e6e2:	d17f      	bne.n	800e7e4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800e6e4:	7ffb      	ldrb	r3, [r7, #31]
 800e6e6:	2b08      	cmp	r3, #8
 800e6e8:	d85c      	bhi.n	800e7a4 <UART_SetConfig+0x418>
 800e6ea:	a201      	add	r2, pc, #4	; (adr r2, 800e6f0 <UART_SetConfig+0x364>)
 800e6ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6f0:	0800e715 	.word	0x0800e715
 800e6f4:	0800e735 	.word	0x0800e735
 800e6f8:	0800e755 	.word	0x0800e755
 800e6fc:	0800e7a5 	.word	0x0800e7a5
 800e700:	0800e76d 	.word	0x0800e76d
 800e704:	0800e7a5 	.word	0x0800e7a5
 800e708:	0800e7a5 	.word	0x0800e7a5
 800e70c:	0800e7a5 	.word	0x0800e7a5
 800e710:	0800e78d 	.word	0x0800e78d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e714:	f7fc f99c 	bl	800aa50 <HAL_RCC_GetPCLK1Freq>
 800e718:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	005a      	lsls	r2, r3, #1
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	685b      	ldr	r3, [r3, #4]
 800e722:	085b      	lsrs	r3, r3, #1
 800e724:	441a      	add	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e72e:	b29b      	uxth	r3, r3
 800e730:	61bb      	str	r3, [r7, #24]
        break;
 800e732:	e03a      	b.n	800e7aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e734:	f7fc f9a0 	bl	800aa78 <HAL_RCC_GetPCLK2Freq>
 800e738:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	005a      	lsls	r2, r3, #1
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	085b      	lsrs	r3, r3, #1
 800e744:	441a      	add	r2, r3
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	685b      	ldr	r3, [r3, #4]
 800e74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e74e:	b29b      	uxth	r3, r3
 800e750:	61bb      	str	r3, [r7, #24]
        break;
 800e752:	e02a      	b.n	800e7aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	685b      	ldr	r3, [r3, #4]
 800e758:	085a      	lsrs	r2, r3, #1
 800e75a:	4b5f      	ldr	r3, [pc, #380]	; (800e8d8 <UART_SetConfig+0x54c>)
 800e75c:	4413      	add	r3, r2
 800e75e:	687a      	ldr	r2, [r7, #4]
 800e760:	6852      	ldr	r2, [r2, #4]
 800e762:	fbb3 f3f2 	udiv	r3, r3, r2
 800e766:	b29b      	uxth	r3, r3
 800e768:	61bb      	str	r3, [r7, #24]
        break;
 800e76a:	e01e      	b.n	800e7aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e76c:	f7fc f88c 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800e770:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	005a      	lsls	r2, r3, #1
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	685b      	ldr	r3, [r3, #4]
 800e77a:	085b      	lsrs	r3, r3, #1
 800e77c:	441a      	add	r2, r3
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	685b      	ldr	r3, [r3, #4]
 800e782:	fbb2 f3f3 	udiv	r3, r2, r3
 800e786:	b29b      	uxth	r3, r3
 800e788:	61bb      	str	r3, [r7, #24]
        break;
 800e78a:	e00e      	b.n	800e7aa <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	085b      	lsrs	r3, r3, #1
 800e792:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	685b      	ldr	r3, [r3, #4]
 800e79a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e79e:	b29b      	uxth	r3, r3
 800e7a0:	61bb      	str	r3, [r7, #24]
        break;
 800e7a2:	e002      	b.n	800e7aa <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	75fb      	strb	r3, [r7, #23]
        break;
 800e7a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	2b0f      	cmp	r3, #15
 800e7ae:	d916      	bls.n	800e7de <UART_SetConfig+0x452>
 800e7b0:	69bb      	ldr	r3, [r7, #24]
 800e7b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e7b6:	d212      	bcs.n	800e7de <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	b29b      	uxth	r3, r3
 800e7bc:	f023 030f 	bic.w	r3, r3, #15
 800e7c0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e7c2:	69bb      	ldr	r3, [r7, #24]
 800e7c4:	085b      	lsrs	r3, r3, #1
 800e7c6:	b29b      	uxth	r3, r3
 800e7c8:	f003 0307 	and.w	r3, r3, #7
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	897b      	ldrh	r3, [r7, #10]
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	897a      	ldrh	r2, [r7, #10]
 800e7da:	60da      	str	r2, [r3, #12]
 800e7dc:	e070      	b.n	800e8c0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	75fb      	strb	r3, [r7, #23]
 800e7e2:	e06d      	b.n	800e8c0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800e7e4:	7ffb      	ldrb	r3, [r7, #31]
 800e7e6:	2b08      	cmp	r3, #8
 800e7e8:	d859      	bhi.n	800e89e <UART_SetConfig+0x512>
 800e7ea:	a201      	add	r2, pc, #4	; (adr r2, 800e7f0 <UART_SetConfig+0x464>)
 800e7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f0:	0800e815 	.word	0x0800e815
 800e7f4:	0800e833 	.word	0x0800e833
 800e7f8:	0800e851 	.word	0x0800e851
 800e7fc:	0800e89f 	.word	0x0800e89f
 800e800:	0800e869 	.word	0x0800e869
 800e804:	0800e89f 	.word	0x0800e89f
 800e808:	0800e89f 	.word	0x0800e89f
 800e80c:	0800e89f 	.word	0x0800e89f
 800e810:	0800e887 	.word	0x0800e887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e814:	f7fc f91c 	bl	800aa50 <HAL_RCC_GetPCLK1Freq>
 800e818:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	685b      	ldr	r3, [r3, #4]
 800e81e:	085a      	lsrs	r2, r3, #1
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	441a      	add	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	fbb2 f3f3 	udiv	r3, r2, r3
 800e82c:	b29b      	uxth	r3, r3
 800e82e:	61bb      	str	r3, [r7, #24]
        break;
 800e830:	e038      	b.n	800e8a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e832:	f7fc f921 	bl	800aa78 <HAL_RCC_GetPCLK2Freq>
 800e836:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	685b      	ldr	r3, [r3, #4]
 800e83c:	085a      	lsrs	r2, r3, #1
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	441a      	add	r2, r3
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	fbb2 f3f3 	udiv	r3, r2, r3
 800e84a:	b29b      	uxth	r3, r3
 800e84c:	61bb      	str	r3, [r7, #24]
        break;
 800e84e:	e029      	b.n	800e8a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	685b      	ldr	r3, [r3, #4]
 800e854:	085a      	lsrs	r2, r3, #1
 800e856:	4b21      	ldr	r3, [pc, #132]	; (800e8dc <UART_SetConfig+0x550>)
 800e858:	4413      	add	r3, r2
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	6852      	ldr	r2, [r2, #4]
 800e85e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e862:	b29b      	uxth	r3, r3
 800e864:	61bb      	str	r3, [r7, #24]
        break;
 800e866:	e01d      	b.n	800e8a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e868:	f7fc f80e 	bl	800a888 <HAL_RCC_GetSysClockFreq>
 800e86c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	685b      	ldr	r3, [r3, #4]
 800e872:	085a      	lsrs	r2, r3, #1
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	441a      	add	r2, r3
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	685b      	ldr	r3, [r3, #4]
 800e87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800e880:	b29b      	uxth	r3, r3
 800e882:	61bb      	str	r3, [r7, #24]
        break;
 800e884:	e00e      	b.n	800e8a4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	685b      	ldr	r3, [r3, #4]
 800e88a:	085b      	lsrs	r3, r3, #1
 800e88c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	685b      	ldr	r3, [r3, #4]
 800e894:	fbb2 f3f3 	udiv	r3, r2, r3
 800e898:	b29b      	uxth	r3, r3
 800e89a:	61bb      	str	r3, [r7, #24]
        break;
 800e89c:	e002      	b.n	800e8a4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	75fb      	strb	r3, [r7, #23]
        break;
 800e8a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e8a4:	69bb      	ldr	r3, [r7, #24]
 800e8a6:	2b0f      	cmp	r3, #15
 800e8a8:	d908      	bls.n	800e8bc <UART_SetConfig+0x530>
 800e8aa:	69bb      	ldr	r3, [r7, #24]
 800e8ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e8b0:	d204      	bcs.n	800e8bc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	69ba      	ldr	r2, [r7, #24]
 800e8b8:	60da      	str	r2, [r3, #12]
 800e8ba:	e001      	b.n	800e8c0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e8bc:	2301      	movs	r3, #1
 800e8be:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800e8cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3720      	adds	r7, #32
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	01e84800 	.word	0x01e84800
 800e8dc:	00f42400 	.word	0x00f42400

0800e8e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8ec:	f003 0301 	and.w	r3, r3, #1
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d00a      	beq.n	800e90a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	685b      	ldr	r3, [r3, #4]
 800e8fa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	430a      	orrs	r2, r1
 800e908:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e90e:	f003 0302 	and.w	r3, r3, #2
 800e912:	2b00      	cmp	r3, #0
 800e914:	d00a      	beq.n	800e92c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	430a      	orrs	r2, r1
 800e92a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e930:	f003 0304 	and.w	r3, r3, #4
 800e934:	2b00      	cmp	r3, #0
 800e936:	d00a      	beq.n	800e94e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	685b      	ldr	r3, [r3, #4]
 800e93e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	430a      	orrs	r2, r1
 800e94c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e952:	f003 0308 	and.w	r3, r3, #8
 800e956:	2b00      	cmp	r3, #0
 800e958:	d00a      	beq.n	800e970 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	430a      	orrs	r2, r1
 800e96e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e974:	f003 0310 	and.w	r3, r3, #16
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d00a      	beq.n	800e992 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	689b      	ldr	r3, [r3, #8]
 800e982:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	430a      	orrs	r2, r1
 800e990:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e996:	f003 0320 	and.w	r3, r3, #32
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d00a      	beq.n	800e9b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	430a      	orrs	r2, r1
 800e9b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d01a      	beq.n	800e9f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	430a      	orrs	r2, r1
 800e9d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9de:	d10a      	bne.n	800e9f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	681b      	ldr	r3, [r3, #0]
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d00a      	beq.n	800ea18 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	685b      	ldr	r3, [r3, #4]
 800ea08:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	430a      	orrs	r2, r1
 800ea16:	605a      	str	r2, [r3, #4]
  }
}
 800ea18:	bf00      	nop
 800ea1a:	370c      	adds	r7, #12
 800ea1c:	46bd      	mov	sp, r7
 800ea1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea22:	4770      	bx	lr

0800ea24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b086      	sub	sp, #24
 800ea28:	af02      	add	r7, sp, #8
 800ea2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	2200      	movs	r2, #0
 800ea30:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800ea32:	f7f8 fe61 	bl	80076f8 <HAL_GetTick>
 800ea36:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 0308 	and.w	r3, r3, #8
 800ea42:	2b08      	cmp	r3, #8
 800ea44:	d10e      	bne.n	800ea64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea46:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ea4a:	9300      	str	r3, [sp, #0]
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	2200      	movs	r2, #0
 800ea50:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ea54:	6878      	ldr	r0, [r7, #4]
 800ea56:	f000 f814 	bl	800ea82 <UART_WaitOnFlagUntilTimeout>
 800ea5a:	4603      	mov	r3, r0
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d001      	beq.n	800ea64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea60:	2303      	movs	r3, #3
 800ea62:	e00a      	b.n	800ea7a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2220      	movs	r2, #32
 800ea68:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2220      	movs	r2, #32
 800ea6e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	2200      	movs	r2, #0
 800ea74:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ea78:	2300      	movs	r3, #0
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b084      	sub	sp, #16
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	60f8      	str	r0, [r7, #12]
 800ea8a:	60b9      	str	r1, [r7, #8]
 800ea8c:	603b      	str	r3, [r7, #0]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ea92:	e05d      	b.n	800eb50 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ea94:	69bb      	ldr	r3, [r7, #24]
 800ea96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea9a:	d059      	beq.n	800eb50 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ea9c:	f7f8 fe2c 	bl	80076f8 <HAL_GetTick>
 800eaa0:	4602      	mov	r2, r0
 800eaa2:	683b      	ldr	r3, [r7, #0]
 800eaa4:	1ad3      	subs	r3, r2, r3
 800eaa6:	69ba      	ldr	r2, [r7, #24]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d302      	bcc.n	800eab2 <UART_WaitOnFlagUntilTimeout+0x30>
 800eaac:	69bb      	ldr	r3, [r7, #24]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d11b      	bne.n	800eaea <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eab2:	68fb      	ldr	r3, [r7, #12]
 800eab4:	681b      	ldr	r3, [r3, #0]
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	681b      	ldr	r3, [r3, #0]
 800eabc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eac0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	689a      	ldr	r2, [r3, #8]
 800eac8:	68fb      	ldr	r3, [r7, #12]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	f022 0201 	bic.w	r2, r2, #1
 800ead0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	2220      	movs	r2, #32
 800ead6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2220      	movs	r2, #32
 800eadc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800eae6:	2303      	movs	r3, #3
 800eae8:	e042      	b.n	800eb70 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	f003 0304 	and.w	r3, r3, #4
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d02b      	beq.n	800eb50 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	681b      	ldr	r3, [r3, #0]
 800eafc:	69db      	ldr	r3, [r3, #28]
 800eafe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800eb06:	d123      	bne.n	800eb50 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eb10:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	681a      	ldr	r2, [r3, #0]
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	681b      	ldr	r3, [r3, #0]
 800eb1c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800eb20:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	689a      	ldr	r2, [r3, #8]
 800eb28:	68fb      	ldr	r3, [r7, #12]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f022 0201 	bic.w	r2, r2, #1
 800eb30:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	2220      	movs	r2, #32
 800eb36:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	2220      	movs	r2, #32
 800eb3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2220      	movs	r2, #32
 800eb42:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2200      	movs	r2, #0
 800eb48:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800eb4c:	2303      	movs	r3, #3
 800eb4e:	e00f      	b.n	800eb70 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	69da      	ldr	r2, [r3, #28]
 800eb56:	68bb      	ldr	r3, [r7, #8]
 800eb58:	4013      	ands	r3, r2
 800eb5a:	68ba      	ldr	r2, [r7, #8]
 800eb5c:	429a      	cmp	r2, r3
 800eb5e:	bf0c      	ite	eq
 800eb60:	2301      	moveq	r3, #1
 800eb62:	2300      	movne	r3, #0
 800eb64:	b2db      	uxtb	r3, r3
 800eb66:	461a      	mov	r2, r3
 800eb68:	79fb      	ldrb	r3, [r7, #7]
 800eb6a:	429a      	cmp	r2, r3
 800eb6c:	d092      	beq.n	800ea94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800eb6e:	2300      	movs	r3, #0
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}

0800eb78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	681a      	ldr	r2, [r3, #0]
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800eb8e:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	2220      	movs	r2, #32
 800eb94:	675a      	str	r2, [r3, #116]	; 0x74
}
 800eb96:	bf00      	nop
 800eb98:	370c      	adds	r7, #12
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba0:	4770      	bx	lr

0800eba2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800eba2:	b480      	push	{r7}
 800eba4:	b083      	sub	sp, #12
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	681a      	ldr	r2, [r3, #0]
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ebb8:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	689a      	ldr	r2, [r3, #8]
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	f022 0201 	bic.w	r2, r2, #1
 800ebc8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2220      	movs	r2, #32
 800ebce:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ebd6:	bf00      	nop
 800ebd8:	370c      	adds	r7, #12
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr

0800ebe2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ebe2:	b580      	push	{r7, lr}
 800ebe4:	b084      	sub	sp, #16
 800ebe6:	af00      	add	r7, sp, #0
 800ebe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebee:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	69db      	ldr	r3, [r3, #28]
 800ebf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebf8:	d01e      	beq.n	800ec38 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ec10:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f022 0201 	bic.w	r2, r2, #1
 800ec20:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ec22:	68fb      	ldr	r3, [r7, #12]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	689a      	ldr	r2, [r3, #8]
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ec30:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2220      	movs	r2, #32
 800ec36:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f7f8 fca3 	bl	8007584 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec3e:	bf00      	nop
 800ec40:	3710      	adds	r7, #16
 800ec42:	46bd      	mov	sp, r7
 800ec44:	bd80      	pop	{r7, pc}

0800ec46 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec46:	b580      	push	{r7, lr}
 800ec48:	b084      	sub	sp, #16
 800ec4a:	af00      	add	r7, sp, #0
 800ec4c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec52:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800ec54:	68f8      	ldr	r0, [r7, #12]
 800ec56:	f7ff fb85 	bl	800e364 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ec5a:	bf00      	nop
 800ec5c:	3710      	adds	r7, #16
 800ec5e:	46bd      	mov	sp, r7
 800ec60:	bd80      	pop	{r7, pc}

0800ec62 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ec62:	b580      	push	{r7, lr}
 800ec64:	b086      	sub	sp, #24
 800ec66:	af00      	add	r7, sp, #0
 800ec68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ec6e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec74:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ec76:	697b      	ldr	r3, [r7, #20]
 800ec78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec7a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	689b      	ldr	r3, [r3, #8]
 800ec82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ec86:	2b80      	cmp	r3, #128	; 0x80
 800ec88:	d109      	bne.n	800ec9e <UART_DMAError+0x3c>
 800ec8a:	693b      	ldr	r3, [r7, #16]
 800ec8c:	2b21      	cmp	r3, #33	; 0x21
 800ec8e:	d106      	bne.n	800ec9e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	2200      	movs	r2, #0
 800ec94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800ec98:	6978      	ldr	r0, [r7, #20]
 800ec9a:	f7ff ff6d 	bl	800eb78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ec9e:	697b      	ldr	r3, [r7, #20]
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	689b      	ldr	r3, [r3, #8]
 800eca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eca8:	2b40      	cmp	r3, #64	; 0x40
 800ecaa:	d109      	bne.n	800ecc0 <UART_DMAError+0x5e>
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	2b22      	cmp	r3, #34	; 0x22
 800ecb0:	d106      	bne.n	800ecc0 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ecb2:	697b      	ldr	r3, [r7, #20]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ecba:	6978      	ldr	r0, [r7, #20]
 800ecbc:	f7ff ff71 	bl	800eba2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ecc4:	f043 0210 	orr.w	r2, r3, #16
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eccc:	6978      	ldr	r0, [r7, #20]
 800ecce:	f7ff fb53 	bl	800e378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecd2:	bf00      	nop
 800ecd4:	3718      	adds	r7, #24
 800ecd6:	46bd      	mov	sp, r7
 800ecd8:	bd80      	pop	{r7, pc}

0800ecda <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ecda:	b580      	push	{r7, lr}
 800ecdc:	b084      	sub	sp, #16
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ece6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	2200      	movs	r2, #0
 800ecf4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ecf8:	68f8      	ldr	r0, [r7, #12]
 800ecfa:	f7ff fb3d 	bl	800e378 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ecfe:	bf00      	nop
 800ed00:	3710      	adds	r7, #16
 800ed02:	46bd      	mov	sp, r7
 800ed04:	bd80      	pop	{r7, pc}

0800ed06 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ed06:	b580      	push	{r7, lr}
 800ed08:	b082      	sub	sp, #8
 800ed0a:	af00      	add	r7, sp, #0
 800ed0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	681a      	ldr	r2, [r3, #0]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ed1c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2220      	movs	r2, #32
 800ed22:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2200      	movs	r2, #0
 800ed28:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ed2a:	6878      	ldr	r0, [r7, #4]
 800ed2c:	f7ff fb10 	bl	800e350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ed30:	bf00      	nop
 800ed32:	3708      	adds	r7, #8
 800ed34:	46bd      	mov	sp, r7
 800ed36:	bd80      	pop	{r7, pc}

0800ed38 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ed46:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed4c:	2b22      	cmp	r3, #34	; 0x22
 800ed4e:	d13a      	bne.n	800edc6 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed56:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ed58:	89bb      	ldrh	r3, [r7, #12]
 800ed5a:	b2d9      	uxtb	r1, r3
 800ed5c:	89fb      	ldrh	r3, [r7, #14]
 800ed5e:	b2da      	uxtb	r2, r3
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed64:	400a      	ands	r2, r1
 800ed66:	b2d2      	uxtb	r2, r2
 800ed68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed6e:	1c5a      	adds	r2, r3, #1
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ed7a:	b29b      	uxth	r3, r3
 800ed7c:	3b01      	subs	r3, #1
 800ed7e:	b29a      	uxth	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ed8c:	b29b      	uxth	r3, r3
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d121      	bne.n	800edd6 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800eda0:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	689a      	ldr	r2, [r3, #8]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	f022 0201 	bic.w	r2, r2, #1
 800edb0:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2220      	movs	r2, #32
 800edb6:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	f7f8 fbe0 	bl	8007584 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800edc4:	e007      	b.n	800edd6 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	699a      	ldr	r2, [r3, #24]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	f042 0208 	orr.w	r2, r2, #8
 800edd4:	619a      	str	r2, [r3, #24]
}
 800edd6:	bf00      	nop
 800edd8:	3710      	adds	r7, #16
 800edda:	46bd      	mov	sp, r7
 800eddc:	bd80      	pop	{r7, pc}

0800edde <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800edde:	b580      	push	{r7, lr}
 800ede0:	b084      	sub	sp, #16
 800ede2:	af00      	add	r7, sp, #0
 800ede4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800edec:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edf2:	2b22      	cmp	r3, #34	; 0x22
 800edf4:	d13a      	bne.n	800ee6c <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edfc:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee02:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ee04:	89ba      	ldrh	r2, [r7, #12]
 800ee06:	89fb      	ldrh	r3, [r7, #14]
 800ee08:	4013      	ands	r3, r2
 800ee0a:	b29a      	uxth	r2, r3
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee14:	1c9a      	adds	r2, r3, #2
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ee20:	b29b      	uxth	r3, r3
 800ee22:	3b01      	subs	r3, #1
 800ee24:	b29a      	uxth	r2, r3
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d121      	bne.n	800ee7c <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	681b      	ldr	r3, [r3, #0]
 800ee3c:	681a      	ldr	r2, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ee46:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	689a      	ldr	r2, [r3, #8]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	f022 0201 	bic.w	r2, r2, #1
 800ee56:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2220      	movs	r2, #32
 800ee5c:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	2200      	movs	r2, #0
 800ee62:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7f8 fb8d 	bl	8007584 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ee6a:	e007      	b.n	800ee7c <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	699a      	ldr	r2, [r3, #24]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	681b      	ldr	r3, [r3, #0]
 800ee76:	f042 0208 	orr.w	r2, r2, #8
 800ee7a:	619a      	str	r2, [r3, #24]
}
 800ee7c:	bf00      	nop
 800ee7e:	3710      	adds	r7, #16
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ee84:	b084      	sub	sp, #16
 800ee86:	b480      	push	{r7}
 800ee88:	b085      	sub	sp, #20
 800ee8a:	af00      	add	r7, sp, #0
 800ee8c:	6078      	str	r0, [r7, #4]
 800ee8e:	f107 001c 	add.w	r0, r7, #28
 800ee92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ee96:	2300      	movs	r3, #0
 800ee98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ee9a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ee9c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ee9e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800eea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800eea2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800eea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800eea6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800eea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800eeaa:	431a      	orrs	r2, r3
             Init.ClockDiv
 800eeac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800eeae:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800eeb0:	68fa      	ldr	r2, [r7, #12]
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	685a      	ldr	r2, [r3, #4]
 800eeba:	4b07      	ldr	r3, [pc, #28]	; (800eed8 <SDMMC_Init+0x54>)
 800eebc:	4013      	ands	r3, r2
 800eebe:	68fa      	ldr	r2, [r7, #12]
 800eec0:	431a      	orrs	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800eec6:	2300      	movs	r3, #0
}
 800eec8:	4618      	mov	r0, r3
 800eeca:	3714      	adds	r7, #20
 800eecc:	46bd      	mov	sp, r7
 800eece:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed2:	b004      	add	sp, #16
 800eed4:	4770      	bx	lr
 800eed6:	bf00      	nop
 800eed8:	ffff8100 	.word	0xffff8100

0800eedc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800eeea:	4618      	mov	r0, r3
 800eeec:	370c      	adds	r7, #12
 800eeee:	46bd      	mov	sp, r7
 800eef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef4:	4770      	bx	lr

0800eef6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800eef6:	b480      	push	{r7}
 800eef8:	b083      	sub	sp, #12
 800eefa:	af00      	add	r7, sp, #0
 800eefc:	6078      	str	r0, [r7, #4]
 800eefe:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	681a      	ldr	r2, [r3, #0]
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ef0a:	2300      	movs	r3, #0
}
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	370c      	adds	r7, #12
 800ef10:	46bd      	mov	sp, r7
 800ef12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef16:	4770      	bx	lr

0800ef18 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2203      	movs	r2, #3
 800ef24:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ef26:	2002      	movs	r0, #2
 800ef28:	f7f8 fbf2 	bl	8007710 <HAL_Delay>
  
  return HAL_OK;
 800ef2c:	2300      	movs	r3, #0
}
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}

0800ef36 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ef36:	b480      	push	{r7}
 800ef38:	b083      	sub	sp, #12
 800ef3a:	af00      	add	r7, sp, #0
 800ef3c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f003 0303 	and.w	r3, r3, #3
}
 800ef46:	4618      	mov	r0, r3
 800ef48:	370c      	adds	r7, #12
 800ef4a:	46bd      	mov	sp, r7
 800ef4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef50:	4770      	bx	lr
	...

0800ef54 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ef54:	b480      	push	{r7}
 800ef56:	b085      	sub	sp, #20
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ef62:	683b      	ldr	r3, [r7, #0]
 800ef64:	681a      	ldr	r2, [r3, #0]
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ef6a:	683b      	ldr	r3, [r7, #0]
 800ef6c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ef72:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ef78:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ef7e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	4313      	orrs	r3, r2
 800ef84:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	68da      	ldr	r2, [r3, #12]
 800ef8a:	4b06      	ldr	r3, [pc, #24]	; (800efa4 <SDMMC_SendCommand+0x50>)
 800ef8c:	4013      	ands	r3, r2
 800ef8e:	68fa      	ldr	r2, [r7, #12]
 800ef90:	431a      	orrs	r2, r3
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa2:	4770      	bx	lr
 800efa4:	fffff000 	.word	0xfffff000

0800efa8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800efa8:	b480      	push	{r7}
 800efaa:	b083      	sub	sp, #12
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	691b      	ldr	r3, [r3, #16]
 800efb4:	b2db      	uxtb	r3, r3
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr

0800efc2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800efc2:	b480      	push	{r7}
 800efc4:	b085      	sub	sp, #20
 800efc6:	af00      	add	r7, sp, #0
 800efc8:	6078      	str	r0, [r7, #4]
 800efca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	3314      	adds	r3, #20
 800efd0:	461a      	mov	r2, r3
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	4413      	add	r3, r2
 800efd6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	681b      	ldr	r3, [r3, #0]
}  
 800efdc:	4618      	mov	r0, r3
 800efde:	3714      	adds	r7, #20
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
 800eff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800eff2:	2300      	movs	r3, #0
 800eff4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	681a      	ldr	r2, [r3, #0]
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800effe:	683b      	ldr	r3, [r7, #0]
 800f000:	685a      	ldr	r2, [r3, #4]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f006:	683b      	ldr	r3, [r7, #0]
 800f008:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f00e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800f010:	683b      	ldr	r3, [r7, #0]
 800f012:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800f014:	431a      	orrs	r2, r3
                       Data->DPSM);
 800f016:	683b      	ldr	r3, [r7, #0]
 800f018:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800f01a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	4313      	orrs	r3, r2
 800f020:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f026:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	431a      	orrs	r2, r3
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800f032:	2300      	movs	r3, #0

}
 800f034:	4618      	mov	r0, r3
 800f036:	3714      	adds	r7, #20
 800f038:	46bd      	mov	sp, r7
 800f03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03e:	4770      	bx	lr

0800f040 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b088      	sub	sp, #32
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800f04e:	2310      	movs	r3, #16
 800f050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f052:	2340      	movs	r3, #64	; 0x40
 800f054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f056:	2300      	movs	r3, #0
 800f058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f05e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f060:	f107 0308 	add.w	r3, r7, #8
 800f064:	4619      	mov	r1, r3
 800f066:	6878      	ldr	r0, [r7, #4]
 800f068:	f7ff ff74 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800f06c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f070:	2110      	movs	r1, #16
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fa42 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f078:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f07a:	69fb      	ldr	r3, [r7, #28]
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3720      	adds	r7, #32
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}

0800f084 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b088      	sub	sp, #32
 800f088:	af00      	add	r7, sp, #0
 800f08a:	6078      	str	r0, [r7, #4]
 800f08c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f08e:	683b      	ldr	r3, [r7, #0]
 800f090:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800f092:	2311      	movs	r3, #17
 800f094:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f096:	2340      	movs	r3, #64	; 0x40
 800f098:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f09a:	2300      	movs	r3, #0
 800f09c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f09e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0a4:	f107 0308 	add.w	r3, r7, #8
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7ff ff52 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f0b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0b4:	2111      	movs	r1, #17
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f000 fa20 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f0bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0be:	69fb      	ldr	r3, [r7, #28]
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3720      	adds	r7, #32
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b088      	sub	sp, #32
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
 800f0d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800f0d6:	2312      	movs	r3, #18
 800f0d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0da:	2340      	movs	r3, #64	; 0x40
 800f0dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0e6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0e8:	f107 0308 	add.w	r3, r7, #8
 800f0ec:	4619      	mov	r1, r3
 800f0ee:	6878      	ldr	r0, [r7, #4]
 800f0f0:	f7ff ff30 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f0f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f0f8:	2112      	movs	r1, #18
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 f9fe 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f100:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f102:	69fb      	ldr	r3, [r7, #28]
}
 800f104:	4618      	mov	r0, r3
 800f106:	3720      	adds	r7, #32
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f10c:	b580      	push	{r7, lr}
 800f10e:	b088      	sub	sp, #32
 800f110:	af00      	add	r7, sp, #0
 800f112:	6078      	str	r0, [r7, #4]
 800f114:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800f11a:	2318      	movs	r3, #24
 800f11c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f11e:	2340      	movs	r3, #64	; 0x40
 800f120:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f122:	2300      	movs	r3, #0
 800f124:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f126:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f12a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f12c:	f107 0308 	add.w	r3, r7, #8
 800f130:	4619      	mov	r1, r3
 800f132:	6878      	ldr	r0, [r7, #4]
 800f134:	f7ff ff0e 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800f138:	f241 3288 	movw	r2, #5000	; 0x1388
 800f13c:	2118      	movs	r1, #24
 800f13e:	6878      	ldr	r0, [r7, #4]
 800f140:	f000 f9dc 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f144:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f146:	69fb      	ldr	r3, [r7, #28]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3720      	adds	r7, #32
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b088      	sub	sp, #32
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
 800f158:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800f15e:	2319      	movs	r3, #25
 800f160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f162:	2340      	movs	r3, #64	; 0x40
 800f164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f166:	2300      	movs	r3, #0
 800f168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f16a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f16e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f170:	f107 0308 	add.w	r3, r7, #8
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff feec 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800f17c:	f241 3288 	movw	r2, #5000	; 0x1388
 800f180:	2119      	movs	r1, #25
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 f9ba 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f188:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f18a:	69fb      	ldr	r3, [r7, #28]
}
 800f18c:	4618      	mov	r0, r3
 800f18e:	3720      	adds	r7, #32
 800f190:	46bd      	mov	sp, r7
 800f192:	bd80      	pop	{r7, pc}

0800f194 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b088      	sub	sp, #32
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f19c:	2300      	movs	r3, #0
 800f19e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f1a0:	230c      	movs	r3, #12
 800f1a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1a4:	2340      	movs	r3, #64	; 0x40
 800f1a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1b2:	f107 0308 	add.w	r3, r7, #8
 800f1b6:	4619      	mov	r1, r3
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f7ff fecb 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f1be:	4a05      	ldr	r2, [pc, #20]	; (800f1d4 <SDMMC_CmdStopTransfer+0x40>)
 800f1c0:	210c      	movs	r1, #12
 800f1c2:	6878      	ldr	r0, [r7, #4]
 800f1c4:	f000 f99a 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f1c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1ca:	69fb      	ldr	r3, [r7, #28]
}
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	3720      	adds	r7, #32
 800f1d0:	46bd      	mov	sp, r7
 800f1d2:	bd80      	pop	{r7, pc}
 800f1d4:	05f5e100 	.word	0x05f5e100

0800f1d8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b08a      	sub	sp, #40	; 0x28
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	60f8      	str	r0, [r7, #12]
 800f1e0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f1e8:	2307      	movs	r3, #7
 800f1ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1ec:	2340      	movs	r3, #64	; 0x40
 800f1ee:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1f8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1fa:	f107 0310 	add.w	r3, r7, #16
 800f1fe:	4619      	mov	r1, r3
 800f200:	68f8      	ldr	r0, [r7, #12]
 800f202:	f7ff fea7 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f206:	f241 3288 	movw	r2, #5000	; 0x1388
 800f20a:	2107      	movs	r1, #7
 800f20c:	68f8      	ldr	r0, [r7, #12]
 800f20e:	f000 f975 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f212:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f216:	4618      	mov	r0, r3
 800f218:	3728      	adds	r7, #40	; 0x28
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}

0800f21e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f21e:	b580      	push	{r7, lr}
 800f220:	b088      	sub	sp, #32
 800f222:	af00      	add	r7, sp, #0
 800f224:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f226:	2300      	movs	r3, #0
 800f228:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f22a:	2300      	movs	r3, #0
 800f22c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f22e:	2300      	movs	r3, #0
 800f230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f232:	2300      	movs	r3, #0
 800f234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f236:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f23a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f23c:	f107 0308 	add.w	r3, r7, #8
 800f240:	4619      	mov	r1, r3
 800f242:	6878      	ldr	r0, [r7, #4]
 800f244:	f7ff fe86 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 f92f 	bl	800f4ac <SDMMC_GetCmdError>
 800f24e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f250:	69fb      	ldr	r3, [r7, #28]
}
 800f252:	4618      	mov	r0, r3
 800f254:	3720      	adds	r7, #32
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}

0800f25a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f25a:	b580      	push	{r7, lr}
 800f25c:	b088      	sub	sp, #32
 800f25e:	af00      	add	r7, sp, #0
 800f260:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f262:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f266:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f268:	2308      	movs	r3, #8
 800f26a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f26c:	2340      	movs	r3, #64	; 0x40
 800f26e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f270:	2300      	movs	r3, #0
 800f272:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f274:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f278:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f27a:	f107 0308 	add.w	r3, r7, #8
 800f27e:	4619      	mov	r1, r3
 800f280:	6878      	ldr	r0, [r7, #4]
 800f282:	f7ff fe67 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f286:	6878      	ldr	r0, [r7, #4]
 800f288:	f000 fb18 	bl	800f8bc <SDMMC_GetCmdResp7>
 800f28c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f28e:	69fb      	ldr	r3, [r7, #28]
}
 800f290:	4618      	mov	r0, r3
 800f292:	3720      	adds	r7, #32
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b088      	sub	sp, #32
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	6078      	str	r0, [r7, #4]
 800f2a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f2a2:	683b      	ldr	r3, [r7, #0]
 800f2a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f2a6:	2337      	movs	r3, #55	; 0x37
 800f2a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2aa:	2340      	movs	r3, #64	; 0x40
 800f2ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2b8:	f107 0308 	add.w	r3, r7, #8
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7ff fe48 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f2c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f2c8:	2137      	movs	r1, #55	; 0x37
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f000 f916 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f2d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2d2:	69fb      	ldr	r3, [r7, #28]
}
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	3720      	adds	r7, #32
 800f2d8:	46bd      	mov	sp, r7
 800f2da:	bd80      	pop	{r7, pc}

0800f2dc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f2dc:	b580      	push	{r7, lr}
 800f2de:	b088      	sub	sp, #32
 800f2e0:	af00      	add	r7, sp, #0
 800f2e2:	6078      	str	r0, [r7, #4]
 800f2e4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f2e6:	683a      	ldr	r2, [r7, #0]
 800f2e8:	4b0d      	ldr	r3, [pc, #52]	; (800f320 <SDMMC_CmdAppOperCommand+0x44>)
 800f2ea:	4313      	orrs	r3, r2
 800f2ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f2ee:	2329      	movs	r3, #41	; 0x29
 800f2f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2f2:	2340      	movs	r3, #64	; 0x40
 800f2f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f300:	f107 0308 	add.w	r3, r7, #8
 800f304:	4619      	mov	r1, r3
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f7ff fe24 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f30c:	6878      	ldr	r0, [r7, #4]
 800f30e:	f000 fa27 	bl	800f760 <SDMMC_GetCmdResp3>
 800f312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f314:	69fb      	ldr	r3, [r7, #28]
}
 800f316:	4618      	mov	r0, r3
 800f318:	3720      	adds	r7, #32
 800f31a:	46bd      	mov	sp, r7
 800f31c:	bd80      	pop	{r7, pc}
 800f31e:	bf00      	nop
 800f320:	80100000 	.word	0x80100000

0800f324 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f324:	b580      	push	{r7, lr}
 800f326:	b088      	sub	sp, #32
 800f328:	af00      	add	r7, sp, #0
 800f32a:	6078      	str	r0, [r7, #4]
 800f32c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f332:	2306      	movs	r3, #6
 800f334:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f336:	2340      	movs	r3, #64	; 0x40
 800f338:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f33a:	2300      	movs	r3, #0
 800f33c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f33e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f342:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f344:	f107 0308 	add.w	r3, r7, #8
 800f348:	4619      	mov	r1, r3
 800f34a:	6878      	ldr	r0, [r7, #4]
 800f34c:	f7ff fe02 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f350:	f241 3288 	movw	r2, #5000	; 0x1388
 800f354:	2106      	movs	r1, #6
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f8d0 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f35c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f35e:	69fb      	ldr	r3, [r7, #28]
}
 800f360:	4618      	mov	r0, r3
 800f362:	3720      	adds	r7, #32
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b088      	sub	sp, #32
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f370:	2300      	movs	r3, #0
 800f372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f374:	2333      	movs	r3, #51	; 0x33
 800f376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f378:	2340      	movs	r3, #64	; 0x40
 800f37a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f37c:	2300      	movs	r3, #0
 800f37e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f380:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f384:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f386:	f107 0308 	add.w	r3, r7, #8
 800f38a:	4619      	mov	r1, r3
 800f38c:	6878      	ldr	r0, [r7, #4]
 800f38e:	f7ff fde1 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f392:	f241 3288 	movw	r2, #5000	; 0x1388
 800f396:	2133      	movs	r1, #51	; 0x33
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f000 f8af 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f39e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3a0:	69fb      	ldr	r3, [r7, #28]
}
 800f3a2:	4618      	mov	r0, r3
 800f3a4:	3720      	adds	r7, #32
 800f3a6:	46bd      	mov	sp, r7
 800f3a8:	bd80      	pop	{r7, pc}

0800f3aa <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f3aa:	b580      	push	{r7, lr}
 800f3ac:	b088      	sub	sp, #32
 800f3ae:	af00      	add	r7, sp, #0
 800f3b0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f3b6:	2302      	movs	r3, #2
 800f3b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f3ba:	23c0      	movs	r3, #192	; 0xc0
 800f3bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3be:	2300      	movs	r3, #0
 800f3c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f3c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f3c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f3c8:	f107 0308 	add.w	r3, r7, #8
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f7ff fdc0 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f3d4:	6878      	ldr	r0, [r7, #4]
 800f3d6:	f000 f97d 	bl	800f6d4 <SDMMC_GetCmdResp2>
 800f3da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f3dc:	69fb      	ldr	r3, [r7, #28]
}
 800f3de:	4618      	mov	r0, r3
 800f3e0:	3720      	adds	r7, #32
 800f3e2:	46bd      	mov	sp, r7
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b088      	sub	sp, #32
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f3f4:	2309      	movs	r3, #9
 800f3f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f3f8:	23c0      	movs	r3, #192	; 0xc0
 800f3fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f3fc:	2300      	movs	r3, #0
 800f3fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f400:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f406:	f107 0308 	add.w	r3, r7, #8
 800f40a:	4619      	mov	r1, r3
 800f40c:	6878      	ldr	r0, [r7, #4]
 800f40e:	f7ff fda1 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f412:	6878      	ldr	r0, [r7, #4]
 800f414:	f000 f95e 	bl	800f6d4 <SDMMC_GetCmdResp2>
 800f418:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f41a:	69fb      	ldr	r3, [r7, #28]
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	3720      	adds	r7, #32
 800f420:	46bd      	mov	sp, r7
 800f422:	bd80      	pop	{r7, pc}

0800f424 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b088      	sub	sp, #32
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f42e:	2300      	movs	r3, #0
 800f430:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f432:	2303      	movs	r3, #3
 800f434:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f436:	2340      	movs	r3, #64	; 0x40
 800f438:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f43a:	2300      	movs	r3, #0
 800f43c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f43e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f442:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f444:	f107 0308 	add.w	r3, r7, #8
 800f448:	4619      	mov	r1, r3
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7ff fd82 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f450:	683a      	ldr	r2, [r7, #0]
 800f452:	2103      	movs	r1, #3
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f000 f9bd 	bl	800f7d4 <SDMMC_GetCmdResp6>
 800f45a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f45c:	69fb      	ldr	r3, [r7, #28]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3720      	adds	r7, #32
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}

0800f466 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f466:	b580      	push	{r7, lr}
 800f468:	b088      	sub	sp, #32
 800f46a:	af00      	add	r7, sp, #0
 800f46c:	6078      	str	r0, [r7, #4]
 800f46e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f474:	230d      	movs	r3, #13
 800f476:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f478:	2340      	movs	r3, #64	; 0x40
 800f47a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f47c:	2300      	movs	r3, #0
 800f47e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f480:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f484:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f486:	f107 0308 	add.w	r3, r7, #8
 800f48a:	4619      	mov	r1, r3
 800f48c:	6878      	ldr	r0, [r7, #4]
 800f48e:	f7ff fd61 	bl	800ef54 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f492:	f241 3288 	movw	r2, #5000	; 0x1388
 800f496:	210d      	movs	r1, #13
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f82f 	bl	800f4fc <SDMMC_GetCmdResp1>
 800f49e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f4a0:	69fb      	ldr	r3, [r7, #28]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3720      	adds	r7, #32
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	bd80      	pop	{r7, pc}
	...

0800f4ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f4ac:	b490      	push	{r4, r7}
 800f4ae:	b082      	sub	sp, #8
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f4b4:	4b0f      	ldr	r3, [pc, #60]	; (800f4f4 <SDMMC_GetCmdError+0x48>)
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	4a0f      	ldr	r2, [pc, #60]	; (800f4f8 <SDMMC_GetCmdError+0x4c>)
 800f4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800f4be:	0a5b      	lsrs	r3, r3, #9
 800f4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f4c4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f4c8:	4623      	mov	r3, r4
 800f4ca:	1e5c      	subs	r4, r3, #1
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d102      	bne.n	800f4d6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f4d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f4d4:	e009      	b.n	800f4ea <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f4da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d0f2      	beq.n	800f4c8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	22c5      	movs	r2, #197	; 0xc5
 800f4e6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f4e8:	2300      	movs	r3, #0
}
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	3708      	adds	r7, #8
 800f4ee:	46bd      	mov	sp, r7
 800f4f0:	bc90      	pop	{r4, r7}
 800f4f2:	4770      	bx	lr
 800f4f4:	20000000 	.word	0x20000000
 800f4f8:	10624dd3 	.word	0x10624dd3

0800f4fc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f4fc:	b590      	push	{r4, r7, lr}
 800f4fe:	b087      	sub	sp, #28
 800f500:	af00      	add	r7, sp, #0
 800f502:	60f8      	str	r0, [r7, #12]
 800f504:	460b      	mov	r3, r1
 800f506:	607a      	str	r2, [r7, #4]
 800f508:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f50a:	4b6f      	ldr	r3, [pc, #444]	; (800f6c8 <SDMMC_GetCmdResp1+0x1cc>)
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	4a6f      	ldr	r2, [pc, #444]	; (800f6cc <SDMMC_GetCmdResp1+0x1d0>)
 800f510:	fba2 2303 	umull	r2, r3, r2, r3
 800f514:	0a5b      	lsrs	r3, r3, #9
 800f516:	687a      	ldr	r2, [r7, #4]
 800f518:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f51c:	4623      	mov	r3, r4
 800f51e:	1e5c      	subs	r4, r3, #1
 800f520:	2b00      	cmp	r3, #0
 800f522:	d102      	bne.n	800f52a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f528:	e0c9      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f52e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f536:	2b00      	cmp	r3, #0
 800f538:	d0f0      	beq.n	800f51c <SDMMC_GetCmdResp1+0x20>
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1eb      	bne.n	800f51c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f544:	68fb      	ldr	r3, [r7, #12]
 800f546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f548:	f003 0304 	and.w	r3, r3, #4
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d004      	beq.n	800f55a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2204      	movs	r2, #4
 800f554:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f556:	2304      	movs	r3, #4
 800f558:	e0b1      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f55e:	f003 0301 	and.w	r3, r3, #1
 800f562:	2b00      	cmp	r3, #0
 800f564:	d004      	beq.n	800f570 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	2201      	movs	r2, #1
 800f56a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f56c:	2301      	movs	r3, #1
 800f56e:	e0a6      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	22c5      	movs	r2, #197	; 0xc5
 800f574:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f576:	68f8      	ldr	r0, [r7, #12]
 800f578:	f7ff fd16 	bl	800efa8 <SDMMC_GetCommandResponse>
 800f57c:	4603      	mov	r3, r0
 800f57e:	461a      	mov	r2, r3
 800f580:	7afb      	ldrb	r3, [r7, #11]
 800f582:	4293      	cmp	r3, r2
 800f584:	d001      	beq.n	800f58a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f586:	2301      	movs	r3, #1
 800f588:	e099      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f58a:	2100      	movs	r1, #0
 800f58c:	68f8      	ldr	r0, [r7, #12]
 800f58e:	f7ff fd18 	bl	800efc2 <SDMMC_GetResponse>
 800f592:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f594:	693a      	ldr	r2, [r7, #16]
 800f596:	4b4e      	ldr	r3, [pc, #312]	; (800f6d0 <SDMMC_GetCmdResp1+0x1d4>)
 800f598:	4013      	ands	r3, r2
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d101      	bne.n	800f5a2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f59e:	2300      	movs	r3, #0
 800f5a0:	e08d      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f5a2:	693b      	ldr	r3, [r7, #16]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	da02      	bge.n	800f5ae <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f5a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f5ac:	e087      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f5ae:	693b      	ldr	r3, [r7, #16]
 800f5b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d001      	beq.n	800f5bc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f5b8:	2340      	movs	r3, #64	; 0x40
 800f5ba:	e080      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f5bc:	693b      	ldr	r3, [r7, #16]
 800f5be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d001      	beq.n	800f5ca <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f5c6:	2380      	movs	r3, #128	; 0x80
 800f5c8:	e079      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d002      	beq.n	800f5da <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f5d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f5d8:	e071      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f5da:	693b      	ldr	r3, [r7, #16]
 800f5dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d002      	beq.n	800f5ea <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f5e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f5e8:	e069      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f5f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f5f8:	e061      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f600:	2b00      	cmp	r3, #0
 800f602:	d002      	beq.n	800f60a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f604:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f608:	e059      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f60a:	693b      	ldr	r3, [r7, #16]
 800f60c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f610:	2b00      	cmp	r3, #0
 800f612:	d002      	beq.n	800f61a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f618:	e051      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f61a:	693b      	ldr	r3, [r7, #16]
 800f61c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f620:	2b00      	cmp	r3, #0
 800f622:	d002      	beq.n	800f62a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f624:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f628:	e049      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f630:	2b00      	cmp	r3, #0
 800f632:	d002      	beq.n	800f63a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f634:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f638:	e041      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f63a:	693b      	ldr	r3, [r7, #16]
 800f63c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f640:	2b00      	cmp	r3, #0
 800f642:	d002      	beq.n	800f64a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f644:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f648:	e039      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f64a:	693b      	ldr	r3, [r7, #16]
 800f64c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f650:	2b00      	cmp	r3, #0
 800f652:	d002      	beq.n	800f65a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f654:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f658:	e031      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f660:	2b00      	cmp	r3, #0
 800f662:	d002      	beq.n	800f66a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f664:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f668:	e029      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f66a:	693b      	ldr	r3, [r7, #16]
 800f66c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f670:	2b00      	cmp	r3, #0
 800f672:	d002      	beq.n	800f67a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f674:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f678:	e021      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f67a:	693b      	ldr	r3, [r7, #16]
 800f67c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f680:	2b00      	cmp	r3, #0
 800f682:	d002      	beq.n	800f68a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f688:	e019      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f690:	2b00      	cmp	r3, #0
 800f692:	d002      	beq.n	800f69a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f694:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f698:	e011      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f69a:	693b      	ldr	r3, [r7, #16]
 800f69c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d002      	beq.n	800f6aa <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f6a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f6a8:	e009      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	f003 0308 	and.w	r3, r3, #8
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d002      	beq.n	800f6ba <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f6b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f6b8:	e001      	b.n	800f6be <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f6ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f6be:	4618      	mov	r0, r3
 800f6c0:	371c      	adds	r7, #28
 800f6c2:	46bd      	mov	sp, r7
 800f6c4:	bd90      	pop	{r4, r7, pc}
 800f6c6:	bf00      	nop
 800f6c8:	20000000 	.word	0x20000000
 800f6cc:	10624dd3 	.word	0x10624dd3
 800f6d0:	fdffe008 	.word	0xfdffe008

0800f6d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f6d4:	b490      	push	{r4, r7}
 800f6d6:	b084      	sub	sp, #16
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f6dc:	4b1e      	ldr	r3, [pc, #120]	; (800f758 <SDMMC_GetCmdResp2+0x84>)
 800f6de:	681b      	ldr	r3, [r3, #0]
 800f6e0:	4a1e      	ldr	r2, [pc, #120]	; (800f75c <SDMMC_GetCmdResp2+0x88>)
 800f6e2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6e6:	0a5b      	lsrs	r3, r3, #9
 800f6e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6ec:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f6f0:	4623      	mov	r3, r4
 800f6f2:	1e5c      	subs	r4, r3, #1
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d102      	bne.n	800f6fe <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f6f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f6fc:	e026      	b.n	800f74c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f702:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d0f0      	beq.n	800f6f0 <SDMMC_GetCmdResp2+0x1c>
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1eb      	bne.n	800f6f0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f71c:	f003 0304 	and.w	r3, r3, #4
 800f720:	2b00      	cmp	r3, #0
 800f722:	d004      	beq.n	800f72e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	2204      	movs	r2, #4
 800f728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f72a:	2304      	movs	r3, #4
 800f72c:	e00e      	b.n	800f74c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f732:	f003 0301 	and.w	r3, r3, #1
 800f736:	2b00      	cmp	r3, #0
 800f738:	d004      	beq.n	800f744 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	2201      	movs	r2, #1
 800f73e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f740:	2301      	movs	r3, #1
 800f742:	e003      	b.n	800f74c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	22c5      	movs	r2, #197	; 0xc5
 800f748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f74a:	2300      	movs	r3, #0
}
 800f74c:	4618      	mov	r0, r3
 800f74e:	3710      	adds	r7, #16
 800f750:	46bd      	mov	sp, r7
 800f752:	bc90      	pop	{r4, r7}
 800f754:	4770      	bx	lr
 800f756:	bf00      	nop
 800f758:	20000000 	.word	0x20000000
 800f75c:	10624dd3 	.word	0x10624dd3

0800f760 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f760:	b490      	push	{r4, r7}
 800f762:	b084      	sub	sp, #16
 800f764:	af00      	add	r7, sp, #0
 800f766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f768:	4b18      	ldr	r3, [pc, #96]	; (800f7cc <SDMMC_GetCmdResp3+0x6c>)
 800f76a:	681b      	ldr	r3, [r3, #0]
 800f76c:	4a18      	ldr	r2, [pc, #96]	; (800f7d0 <SDMMC_GetCmdResp3+0x70>)
 800f76e:	fba2 2303 	umull	r2, r3, r2, r3
 800f772:	0a5b      	lsrs	r3, r3, #9
 800f774:	f241 3288 	movw	r2, #5000	; 0x1388
 800f778:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f77c:	4623      	mov	r3, r4
 800f77e:	1e5c      	subs	r4, r3, #1
 800f780:	2b00      	cmp	r3, #0
 800f782:	d102      	bne.n	800f78a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f784:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f788:	e01b      	b.n	800f7c2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f78e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f796:	2b00      	cmp	r3, #0
 800f798:	d0f0      	beq.n	800f77c <SDMMC_GetCmdResp3+0x1c>
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d1eb      	bne.n	800f77c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a8:	f003 0304 	and.w	r3, r3, #4
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d004      	beq.n	800f7ba <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	2204      	movs	r2, #4
 800f7b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f7b6:	2304      	movs	r3, #4
 800f7b8:	e003      	b.n	800f7c2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	22c5      	movs	r2, #197	; 0xc5
 800f7be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f7c0:	2300      	movs	r3, #0
}
 800f7c2:	4618      	mov	r0, r3
 800f7c4:	3710      	adds	r7, #16
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	bc90      	pop	{r4, r7}
 800f7ca:	4770      	bx	lr
 800f7cc:	20000000 	.word	0x20000000
 800f7d0:	10624dd3 	.word	0x10624dd3

0800f7d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f7d4:	b590      	push	{r4, r7, lr}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	460b      	mov	r3, r1
 800f7de:	607a      	str	r2, [r7, #4]
 800f7e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f7e2:	4b34      	ldr	r3, [pc, #208]	; (800f8b4 <SDMMC_GetCmdResp6+0xe0>)
 800f7e4:	681b      	ldr	r3, [r3, #0]
 800f7e6:	4a34      	ldr	r2, [pc, #208]	; (800f8b8 <SDMMC_GetCmdResp6+0xe4>)
 800f7e8:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ec:	0a5b      	lsrs	r3, r3, #9
 800f7ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800f7f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f7f6:	4623      	mov	r3, r4
 800f7f8:	1e5c      	subs	r4, r3, #1
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d102      	bne.n	800f804 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f7fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f802:	e052      	b.n	800f8aa <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f808:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f80a:	697b      	ldr	r3, [r7, #20]
 800f80c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f810:	2b00      	cmp	r3, #0
 800f812:	d0f0      	beq.n	800f7f6 <SDMMC_GetCmdResp6+0x22>
 800f814:	697b      	ldr	r3, [r7, #20]
 800f816:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d1eb      	bne.n	800f7f6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f822:	f003 0304 	and.w	r3, r3, #4
 800f826:	2b00      	cmp	r3, #0
 800f828:	d004      	beq.n	800f834 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f82a:	68fb      	ldr	r3, [r7, #12]
 800f82c:	2204      	movs	r2, #4
 800f82e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f830:	2304      	movs	r3, #4
 800f832:	e03a      	b.n	800f8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f838:	f003 0301 	and.w	r3, r3, #1
 800f83c:	2b00      	cmp	r3, #0
 800f83e:	d004      	beq.n	800f84a <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2201      	movs	r2, #1
 800f844:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f846:	2301      	movs	r3, #1
 800f848:	e02f      	b.n	800f8aa <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	f7ff fbac 	bl	800efa8 <SDMMC_GetCommandResponse>
 800f850:	4603      	mov	r3, r0
 800f852:	461a      	mov	r2, r3
 800f854:	7afb      	ldrb	r3, [r7, #11]
 800f856:	4293      	cmp	r3, r2
 800f858:	d001      	beq.n	800f85e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f85a:	2301      	movs	r3, #1
 800f85c:	e025      	b.n	800f8aa <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	22c5      	movs	r2, #197	; 0xc5
 800f862:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f864:	2100      	movs	r1, #0
 800f866:	68f8      	ldr	r0, [r7, #12]
 800f868:	f7ff fbab 	bl	800efc2 <SDMMC_GetResponse>
 800f86c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f874:	2b00      	cmp	r3, #0
 800f876:	d106      	bne.n	800f886 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	0c1b      	lsrs	r3, r3, #16
 800f87c:	b29a      	uxth	r2, r3
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f882:	2300      	movs	r3, #0
 800f884:	e011      	b.n	800f8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f886:	693b      	ldr	r3, [r7, #16]
 800f888:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d002      	beq.n	800f896 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f894:	e009      	b.n	800f8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f896:	693b      	ldr	r3, [r7, #16]
 800f898:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d002      	beq.n	800f8a6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f8a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f8a4:	e001      	b.n	800f8aa <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f8a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	371c      	adds	r7, #28
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd90      	pop	{r4, r7, pc}
 800f8b2:	bf00      	nop
 800f8b4:	20000000 	.word	0x20000000
 800f8b8:	10624dd3 	.word	0x10624dd3

0800f8bc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f8bc:	b490      	push	{r4, r7}
 800f8be:	b084      	sub	sp, #16
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f8c4:	4b21      	ldr	r3, [pc, #132]	; (800f94c <SDMMC_GetCmdResp7+0x90>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	4a21      	ldr	r2, [pc, #132]	; (800f950 <SDMMC_GetCmdResp7+0x94>)
 800f8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800f8ce:	0a5b      	lsrs	r3, r3, #9
 800f8d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f8d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f8d8:	4623      	mov	r3, r4
 800f8da:	1e5c      	subs	r4, r3, #1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d102      	bne.n	800f8e6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f8e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f8e4:	e02c      	b.n	800f940 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f8ea:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d0f0      	beq.n	800f8d8 <SDMMC_GetCmdResp7+0x1c>
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d1eb      	bne.n	800f8d8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f904:	f003 0304 	and.w	r3, r3, #4
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d004      	beq.n	800f916 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2204      	movs	r2, #4
 800f910:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f912:	2304      	movs	r3, #4
 800f914:	e014      	b.n	800f940 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f91a:	f003 0301 	and.w	r3, r3, #1
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d004      	beq.n	800f92c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2201      	movs	r2, #1
 800f926:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f928:	2301      	movs	r3, #1
 800f92a:	e009      	b.n	800f940 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f934:	2b00      	cmp	r3, #0
 800f936:	d002      	beq.n	800f93e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	2240      	movs	r2, #64	; 0x40
 800f93c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f93e:	2300      	movs	r3, #0
  
}
 800f940:	4618      	mov	r0, r3
 800f942:	3710      	adds	r7, #16
 800f944:	46bd      	mov	sp, r7
 800f946:	bc90      	pop	{r4, r7}
 800f948:	4770      	bx	lr
 800f94a:	bf00      	nop
 800f94c:	20000000 	.word	0x20000000
 800f950:	10624dd3 	.word	0x10624dd3

0800f954 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f954:	b084      	sub	sp, #16
 800f956:	b580      	push	{r7, lr}
 800f958:	b084      	sub	sp, #16
 800f95a:	af00      	add	r7, sp, #0
 800f95c:	6078      	str	r0, [r7, #4]
 800f95e:	f107 001c 	add.w	r0, r7, #28
 800f962:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f968:	2b01      	cmp	r3, #1
 800f96a:	d120      	bne.n	800f9ae <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f970:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	68da      	ldr	r2, [r3, #12]
 800f97c:	4b20      	ldr	r3, [pc, #128]	; (800fa00 <USB_CoreInit+0xac>)
 800f97e:	4013      	ands	r3, r2
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	68db      	ldr	r3, [r3, #12]
 800f988:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f992:	2b01      	cmp	r3, #1
 800f994:	d105      	bne.n	800f9a2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	68db      	ldr	r3, [r3, #12]
 800f99a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f9a2:	6878      	ldr	r0, [r7, #4]
 800f9a4:	f001 fac4 	bl	8010f30 <USB_CoreReset>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]
 800f9ac:	e010      	b.n	800f9d0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f9ba:	6878      	ldr	r0, [r7, #4]
 800f9bc:	f001 fab8 	bl	8010f30 <USB_CoreReset>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d2:	2b01      	cmp	r3, #1
 800f9d4:	d10b      	bne.n	800f9ee <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	689b      	ldr	r3, [r3, #8]
 800f9da:	f043 0206 	orr.w	r2, r3, #6
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	f043 0220 	orr.w	r2, r3, #32
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f9fa:	b004      	add	sp, #16
 800f9fc:	4770      	bx	lr
 800f9fe:	bf00      	nop
 800fa00:	ffbdffbf 	.word	0xffbdffbf

0800fa04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800fa04:	b480      	push	{r7}
 800fa06:	b087      	sub	sp, #28
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	60f8      	str	r0, [r7, #12]
 800fa0c:	60b9      	str	r1, [r7, #8]
 800fa0e:	4613      	mov	r3, r2
 800fa10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800fa12:	79fb      	ldrb	r3, [r7, #7]
 800fa14:	2b02      	cmp	r3, #2
 800fa16:	d165      	bne.n	800fae4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	4a41      	ldr	r2, [pc, #260]	; (800fb20 <USB_SetTurnaroundTime+0x11c>)
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d906      	bls.n	800fa2e <USB_SetTurnaroundTime+0x2a>
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	4a40      	ldr	r2, [pc, #256]	; (800fb24 <USB_SetTurnaroundTime+0x120>)
 800fa24:	4293      	cmp	r3, r2
 800fa26:	d802      	bhi.n	800fa2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800fa28:	230f      	movs	r3, #15
 800fa2a:	617b      	str	r3, [r7, #20]
 800fa2c:	e062      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800fa2e:	68bb      	ldr	r3, [r7, #8]
 800fa30:	4a3c      	ldr	r2, [pc, #240]	; (800fb24 <USB_SetTurnaroundTime+0x120>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d906      	bls.n	800fa44 <USB_SetTurnaroundTime+0x40>
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	4a3b      	ldr	r2, [pc, #236]	; (800fb28 <USB_SetTurnaroundTime+0x124>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d802      	bhi.n	800fa44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800fa3e:	230e      	movs	r3, #14
 800fa40:	617b      	str	r3, [r7, #20]
 800fa42:	e057      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	4a38      	ldr	r2, [pc, #224]	; (800fb28 <USB_SetTurnaroundTime+0x124>)
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d906      	bls.n	800fa5a <USB_SetTurnaroundTime+0x56>
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	4a37      	ldr	r2, [pc, #220]	; (800fb2c <USB_SetTurnaroundTime+0x128>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d802      	bhi.n	800fa5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800fa54:	230d      	movs	r3, #13
 800fa56:	617b      	str	r3, [r7, #20]
 800fa58:	e04c      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	4a33      	ldr	r2, [pc, #204]	; (800fb2c <USB_SetTurnaroundTime+0x128>)
 800fa5e:	4293      	cmp	r3, r2
 800fa60:	d906      	bls.n	800fa70 <USB_SetTurnaroundTime+0x6c>
 800fa62:	68bb      	ldr	r3, [r7, #8]
 800fa64:	4a32      	ldr	r2, [pc, #200]	; (800fb30 <USB_SetTurnaroundTime+0x12c>)
 800fa66:	4293      	cmp	r3, r2
 800fa68:	d802      	bhi.n	800fa70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800fa6a:	230c      	movs	r3, #12
 800fa6c:	617b      	str	r3, [r7, #20]
 800fa6e:	e041      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	4a2f      	ldr	r2, [pc, #188]	; (800fb30 <USB_SetTurnaroundTime+0x12c>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d906      	bls.n	800fa86 <USB_SetTurnaroundTime+0x82>
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	4a2e      	ldr	r2, [pc, #184]	; (800fb34 <USB_SetTurnaroundTime+0x130>)
 800fa7c:	4293      	cmp	r3, r2
 800fa7e:	d802      	bhi.n	800fa86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800fa80:	230b      	movs	r3, #11
 800fa82:	617b      	str	r3, [r7, #20]
 800fa84:	e036      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800fa86:	68bb      	ldr	r3, [r7, #8]
 800fa88:	4a2a      	ldr	r2, [pc, #168]	; (800fb34 <USB_SetTurnaroundTime+0x130>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d906      	bls.n	800fa9c <USB_SetTurnaroundTime+0x98>
 800fa8e:	68bb      	ldr	r3, [r7, #8]
 800fa90:	4a29      	ldr	r2, [pc, #164]	; (800fb38 <USB_SetTurnaroundTime+0x134>)
 800fa92:	4293      	cmp	r3, r2
 800fa94:	d802      	bhi.n	800fa9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800fa96:	230a      	movs	r3, #10
 800fa98:	617b      	str	r3, [r7, #20]
 800fa9a:	e02b      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800fa9c:	68bb      	ldr	r3, [r7, #8]
 800fa9e:	4a26      	ldr	r2, [pc, #152]	; (800fb38 <USB_SetTurnaroundTime+0x134>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d906      	bls.n	800fab2 <USB_SetTurnaroundTime+0xae>
 800faa4:	68bb      	ldr	r3, [r7, #8]
 800faa6:	4a25      	ldr	r2, [pc, #148]	; (800fb3c <USB_SetTurnaroundTime+0x138>)
 800faa8:	4293      	cmp	r3, r2
 800faaa:	d802      	bhi.n	800fab2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800faac:	2309      	movs	r3, #9
 800faae:	617b      	str	r3, [r7, #20]
 800fab0:	e020      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800fab2:	68bb      	ldr	r3, [r7, #8]
 800fab4:	4a21      	ldr	r2, [pc, #132]	; (800fb3c <USB_SetTurnaroundTime+0x138>)
 800fab6:	4293      	cmp	r3, r2
 800fab8:	d906      	bls.n	800fac8 <USB_SetTurnaroundTime+0xc4>
 800faba:	68bb      	ldr	r3, [r7, #8]
 800fabc:	4a20      	ldr	r2, [pc, #128]	; (800fb40 <USB_SetTurnaroundTime+0x13c>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d802      	bhi.n	800fac8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800fac2:	2308      	movs	r3, #8
 800fac4:	617b      	str	r3, [r7, #20]
 800fac6:	e015      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800fac8:	68bb      	ldr	r3, [r7, #8]
 800faca:	4a1d      	ldr	r2, [pc, #116]	; (800fb40 <USB_SetTurnaroundTime+0x13c>)
 800facc:	4293      	cmp	r3, r2
 800face:	d906      	bls.n	800fade <USB_SetTurnaroundTime+0xda>
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	4a1c      	ldr	r2, [pc, #112]	; (800fb44 <USB_SetTurnaroundTime+0x140>)
 800fad4:	4293      	cmp	r3, r2
 800fad6:	d802      	bhi.n	800fade <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800fad8:	2307      	movs	r3, #7
 800fada:	617b      	str	r3, [r7, #20]
 800fadc:	e00a      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800fade:	2306      	movs	r3, #6
 800fae0:	617b      	str	r3, [r7, #20]
 800fae2:	e007      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800fae4:	79fb      	ldrb	r3, [r7, #7]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d102      	bne.n	800faf0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800faea:	2309      	movs	r3, #9
 800faec:	617b      	str	r3, [r7, #20]
 800faee:	e001      	b.n	800faf4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800faf0:	2309      	movs	r3, #9
 800faf2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800faf4:	68fb      	ldr	r3, [r7, #12]
 800faf6:	68db      	ldr	r3, [r3, #12]
 800faf8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	68da      	ldr	r2, [r3, #12]
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	029b      	lsls	r3, r3, #10
 800fb08:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800fb0c:	431a      	orrs	r2, r3
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	371c      	adds	r7, #28
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb1e:	4770      	bx	lr
 800fb20:	00d8acbf 	.word	0x00d8acbf
 800fb24:	00e4e1bf 	.word	0x00e4e1bf
 800fb28:	00f423ff 	.word	0x00f423ff
 800fb2c:	0106737f 	.word	0x0106737f
 800fb30:	011a499f 	.word	0x011a499f
 800fb34:	01312cff 	.word	0x01312cff
 800fb38:	014ca43f 	.word	0x014ca43f
 800fb3c:	016e35ff 	.word	0x016e35ff
 800fb40:	01a6ab1f 	.word	0x01a6ab1f
 800fb44:	01e847ff 	.word	0x01e847ff

0800fb48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b083      	sub	sp, #12
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	f043 0201 	orr.w	r2, r3, #1
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb5c:	2300      	movs	r3, #0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	370c      	adds	r7, #12
 800fb62:	46bd      	mov	sp, r7
 800fb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb68:	4770      	bx	lr

0800fb6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fb6a:	b480      	push	{r7}
 800fb6c:	b083      	sub	sp, #12
 800fb6e:	af00      	add	r7, sp, #0
 800fb70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	f023 0201 	bic.w	r2, r3, #1
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fb7e:	2300      	movs	r3, #0
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	370c      	adds	r7, #12
 800fb84:	46bd      	mov	sp, r7
 800fb86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8a:	4770      	bx	lr

0800fb8c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	460b      	mov	r3, r1
 800fb96:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	68db      	ldr	r3, [r3, #12]
 800fb9c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fba4:	78fb      	ldrb	r3, [r7, #3]
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d106      	bne.n	800fbb8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fbaa:	687b      	ldr	r3, [r7, #4]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	60da      	str	r2, [r3, #12]
 800fbb6:	e00b      	b.n	800fbd0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fbb8:	78fb      	ldrb	r3, [r7, #3]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d106      	bne.n	800fbcc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	68db      	ldr	r3, [r3, #12]
 800fbc2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	60da      	str	r2, [r3, #12]
 800fbca:	e001      	b.n	800fbd0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	e003      	b.n	800fbd8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fbd0:	2032      	movs	r0, #50	; 0x32
 800fbd2:	f7f7 fd9d 	bl	8007710 <HAL_Delay>

  return HAL_OK;
 800fbd6:	2300      	movs	r3, #0
}
 800fbd8:	4618      	mov	r0, r3
 800fbda:	3708      	adds	r7, #8
 800fbdc:	46bd      	mov	sp, r7
 800fbde:	bd80      	pop	{r7, pc}

0800fbe0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fbe0:	b084      	sub	sp, #16
 800fbe2:	b580      	push	{r7, lr}
 800fbe4:	b086      	sub	sp, #24
 800fbe6:	af00      	add	r7, sp, #0
 800fbe8:	6078      	str	r0, [r7, #4]
 800fbea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fbee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fbf2:	2300      	movs	r3, #0
 800fbf4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	613b      	str	r3, [r7, #16]
 800fbfe:	e009      	b.n	800fc14 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fc00:	687a      	ldr	r2, [r7, #4]
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	3340      	adds	r3, #64	; 0x40
 800fc06:	009b      	lsls	r3, r3, #2
 800fc08:	4413      	add	r3, r2
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fc0e:	693b      	ldr	r3, [r7, #16]
 800fc10:	3301      	adds	r3, #1
 800fc12:	613b      	str	r3, [r7, #16]
 800fc14:	693b      	ldr	r3, [r7, #16]
 800fc16:	2b0e      	cmp	r3, #14
 800fc18:	d9f2      	bls.n	800fc00 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fc1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d11c      	bne.n	800fc5a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fc20:	68fb      	ldr	r3, [r7, #12]
 800fc22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc26:	685b      	ldr	r3, [r3, #4]
 800fc28:	68fa      	ldr	r2, [r7, #12]
 800fc2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc2e:	f043 0302 	orr.w	r3, r3, #2
 800fc32:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc38:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	e005      	b.n	800fc66 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fc6c:	461a      	mov	r2, r3
 800fc6e:	2300      	movs	r3, #0
 800fc70:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc78:	4619      	mov	r1, r3
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc80:	461a      	mov	r2, r3
 800fc82:	680b      	ldr	r3, [r1, #0]
 800fc84:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fc86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d10c      	bne.n	800fca6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d104      	bne.n	800fc9c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fc92:	2100      	movs	r1, #0
 800fc94:	6878      	ldr	r0, [r7, #4]
 800fc96:	f000 f959 	bl	800ff4c <USB_SetDevSpeed>
 800fc9a:	e018      	b.n	800fcce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fc9c:	2101      	movs	r1, #1
 800fc9e:	6878      	ldr	r0, [r7, #4]
 800fca0:	f000 f954 	bl	800ff4c <USB_SetDevSpeed>
 800fca4:	e013      	b.n	800fcce <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800fca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fca8:	2b03      	cmp	r3, #3
 800fcaa:	d10c      	bne.n	800fcc6 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fcac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d104      	bne.n	800fcbc <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fcb2:	2100      	movs	r1, #0
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 f949 	bl	800ff4c <USB_SetDevSpeed>
 800fcba:	e008      	b.n	800fcce <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fcbc:	2101      	movs	r1, #1
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 f944 	bl	800ff4c <USB_SetDevSpeed>
 800fcc4:	e003      	b.n	800fcce <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fcc6:	2103      	movs	r1, #3
 800fcc8:	6878      	ldr	r0, [r7, #4]
 800fcca:	f000 f93f 	bl	800ff4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fcce:	2110      	movs	r1, #16
 800fcd0:	6878      	ldr	r0, [r7, #4]
 800fcd2:	f000 f8f3 	bl	800febc <USB_FlushTxFifo>
 800fcd6:	4603      	mov	r3, r0
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d001      	beq.n	800fce0 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800fcdc:	2301      	movs	r3, #1
 800fcde:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f911 	bl	800ff08 <USB_FlushRxFifo>
 800fce6:	4603      	mov	r3, r0
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d001      	beq.n	800fcf0 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800fcec:	2301      	movs	r3, #1
 800fcee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd02:	461a      	mov	r2, r3
 800fd04:	2300      	movs	r3, #0
 800fd06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fd0e:	461a      	mov	r2, r3
 800fd10:	2300      	movs	r3, #0
 800fd12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd14:	2300      	movs	r3, #0
 800fd16:	613b      	str	r3, [r7, #16]
 800fd18:	e043      	b.n	800fda2 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd1a:	693b      	ldr	r3, [r7, #16]
 800fd1c:	015a      	lsls	r2, r3, #5
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	4413      	add	r3, r2
 800fd22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd30:	d118      	bne.n	800fd64 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800fd32:	693b      	ldr	r3, [r7, #16]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d10a      	bne.n	800fd4e <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fd38:	693b      	ldr	r3, [r7, #16]
 800fd3a:	015a      	lsls	r2, r3, #5
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	4413      	add	r3, r2
 800fd40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd44:	461a      	mov	r2, r3
 800fd46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fd4a:	6013      	str	r3, [r2, #0]
 800fd4c:	e013      	b.n	800fd76 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fd4e:	693b      	ldr	r3, [r7, #16]
 800fd50:	015a      	lsls	r2, r3, #5
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	4413      	add	r3, r2
 800fd56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fd60:	6013      	str	r3, [r2, #0]
 800fd62:	e008      	b.n	800fd76 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fd64:	693b      	ldr	r3, [r7, #16]
 800fd66:	015a      	lsls	r2, r3, #5
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	4413      	add	r3, r2
 800fd6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd70:	461a      	mov	r2, r3
 800fd72:	2300      	movs	r3, #0
 800fd74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fd76:	693b      	ldr	r3, [r7, #16]
 800fd78:	015a      	lsls	r2, r3, #5
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd82:	461a      	mov	r2, r3
 800fd84:	2300      	movs	r3, #0
 800fd86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	015a      	lsls	r2, r3, #5
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	4413      	add	r3, r2
 800fd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd94:	461a      	mov	r2, r3
 800fd96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fd9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	3301      	adds	r3, #1
 800fda0:	613b      	str	r3, [r7, #16]
 800fda2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fda4:	693a      	ldr	r2, [r7, #16]
 800fda6:	429a      	cmp	r2, r3
 800fda8:	d3b7      	bcc.n	800fd1a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fdaa:	2300      	movs	r3, #0
 800fdac:	613b      	str	r3, [r7, #16]
 800fdae:	e043      	b.n	800fe38 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	015a      	lsls	r2, r3, #5
 800fdb4:	68fb      	ldr	r3, [r7, #12]
 800fdb6:	4413      	add	r3, r2
 800fdb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdc2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fdc6:	d118      	bne.n	800fdfa <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800fdc8:	693b      	ldr	r3, [r7, #16]
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	d10a      	bne.n	800fde4 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	015a      	lsls	r2, r3, #5
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdda:	461a      	mov	r2, r3
 800fddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fde0:	6013      	str	r3, [r2, #0]
 800fde2:	e013      	b.n	800fe0c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fde4:	693b      	ldr	r3, [r7, #16]
 800fde6:	015a      	lsls	r2, r3, #5
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	4413      	add	r3, r2
 800fdec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf0:	461a      	mov	r2, r3
 800fdf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fdf6:	6013      	str	r3, [r2, #0]
 800fdf8:	e008      	b.n	800fe0c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	015a      	lsls	r2, r3, #5
 800fdfe:	68fb      	ldr	r3, [r7, #12]
 800fe00:	4413      	add	r3, r2
 800fe02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe06:	461a      	mov	r2, r3
 800fe08:	2300      	movs	r3, #0
 800fe0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fe0c:	693b      	ldr	r3, [r7, #16]
 800fe0e:	015a      	lsls	r2, r3, #5
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	4413      	add	r3, r2
 800fe14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe18:	461a      	mov	r2, r3
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fe1e:	693b      	ldr	r3, [r7, #16]
 800fe20:	015a      	lsls	r2, r3, #5
 800fe22:	68fb      	ldr	r3, [r7, #12]
 800fe24:	4413      	add	r3, r2
 800fe26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe2a:	461a      	mov	r2, r3
 800fe2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fe30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	3301      	adds	r3, #1
 800fe36:	613b      	str	r3, [r7, #16]
 800fe38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe3a:	693a      	ldr	r2, [r7, #16]
 800fe3c:	429a      	cmp	r2, r3
 800fe3e:	d3b7      	bcc.n	800fdb0 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe46:	691b      	ldr	r3, [r3, #16]
 800fe48:	68fa      	ldr	r2, [r7, #12]
 800fe4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fe4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fe52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	2200      	movs	r2, #0
 800fe58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fe60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fe62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d105      	bne.n	800fe74 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	699b      	ldr	r3, [r3, #24]
 800fe6c:	f043 0210 	orr.w	r2, r3, #16
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	699a      	ldr	r2, [r3, #24]
 800fe78:	4b0e      	ldr	r3, [pc, #56]	; (800feb4 <USB_DevInit+0x2d4>)
 800fe7a:	4313      	orrs	r3, r2
 800fe7c:	687a      	ldr	r2, [r7, #4]
 800fe7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fe80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d005      	beq.n	800fe92 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	699b      	ldr	r3, [r3, #24]
 800fe8a:	f043 0208 	orr.w	r2, r3, #8
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fe92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fe94:	2b01      	cmp	r3, #1
 800fe96:	d105      	bne.n	800fea4 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	699a      	ldr	r2, [r3, #24]
 800fe9c:	4b06      	ldr	r3, [pc, #24]	; (800feb8 <USB_DevInit+0x2d8>)
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	687a      	ldr	r2, [r7, #4]
 800fea2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fea4:	7dfb      	ldrb	r3, [r7, #23]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3718      	adds	r7, #24
 800feaa:	46bd      	mov	sp, r7
 800feac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800feb0:	b004      	add	sp, #16
 800feb2:	4770      	bx	lr
 800feb4:	803c3800 	.word	0x803c3800
 800feb8:	40000004 	.word	0x40000004

0800febc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800febc:	b480      	push	{r7}
 800febe:	b085      	sub	sp, #20
 800fec0:	af00      	add	r7, sp, #0
 800fec2:	6078      	str	r0, [r7, #4]
 800fec4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fec6:	2300      	movs	r3, #0
 800fec8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800feca:	683b      	ldr	r3, [r7, #0]
 800fecc:	019b      	lsls	r3, r3, #6
 800fece:	f043 0220 	orr.w	r2, r3, #32
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	3301      	adds	r3, #1
 800feda:	60fb      	str	r3, [r7, #12]
 800fedc:	68fb      	ldr	r3, [r7, #12]
 800fede:	4a09      	ldr	r2, [pc, #36]	; (800ff04 <USB_FlushTxFifo+0x48>)
 800fee0:	4293      	cmp	r3, r2
 800fee2:	d901      	bls.n	800fee8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fee4:	2303      	movs	r3, #3
 800fee6:	e006      	b.n	800fef6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	691b      	ldr	r3, [r3, #16]
 800feec:	f003 0320 	and.w	r3, r3, #32
 800fef0:	2b20      	cmp	r3, #32
 800fef2:	d0f0      	beq.n	800fed6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fef4:	2300      	movs	r3, #0
}
 800fef6:	4618      	mov	r0, r3
 800fef8:	3714      	adds	r7, #20
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop
 800ff04:	00030d40 	.word	0x00030d40

0800ff08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b085      	sub	sp, #20
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800ff10:	2300      	movs	r3, #0
 800ff12:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	2210      	movs	r2, #16
 800ff18:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	3301      	adds	r3, #1
 800ff1e:	60fb      	str	r3, [r7, #12]
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	4a09      	ldr	r2, [pc, #36]	; (800ff48 <USB_FlushRxFifo+0x40>)
 800ff24:	4293      	cmp	r3, r2
 800ff26:	d901      	bls.n	800ff2c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800ff28:	2303      	movs	r3, #3
 800ff2a:	e006      	b.n	800ff3a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	691b      	ldr	r3, [r3, #16]
 800ff30:	f003 0310 	and.w	r3, r3, #16
 800ff34:	2b10      	cmp	r3, #16
 800ff36:	d0f0      	beq.n	800ff1a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800ff38:	2300      	movs	r3, #0
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3714      	adds	r7, #20
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	00030d40 	.word	0x00030d40

0800ff4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	460b      	mov	r3, r1
 800ff56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff62:	681a      	ldr	r2, [r3, #0]
 800ff64:	78fb      	ldrb	r3, [r7, #3]
 800ff66:	68f9      	ldr	r1, [r7, #12]
 800ff68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ff70:	2300      	movs	r3, #0
}
 800ff72:	4618      	mov	r0, r3
 800ff74:	3714      	adds	r7, #20
 800ff76:	46bd      	mov	sp, r7
 800ff78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7c:	4770      	bx	lr

0800ff7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ff7e:	b480      	push	{r7}
 800ff80:	b087      	sub	sp, #28
 800ff82:	af00      	add	r7, sp, #0
 800ff84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff90:	689b      	ldr	r3, [r3, #8]
 800ff92:	f003 0306 	and.w	r3, r3, #6
 800ff96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d102      	bne.n	800ffa4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ff9e:	2300      	movs	r3, #0
 800ffa0:	75fb      	strb	r3, [r7, #23]
 800ffa2:	e00a      	b.n	800ffba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ffa4:	68fb      	ldr	r3, [r7, #12]
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d002      	beq.n	800ffb0 <USB_GetDevSpeed+0x32>
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	2b06      	cmp	r3, #6
 800ffae:	d102      	bne.n	800ffb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ffb0:	2302      	movs	r3, #2
 800ffb2:	75fb      	strb	r3, [r7, #23]
 800ffb4:	e001      	b.n	800ffba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ffb6:	230f      	movs	r3, #15
 800ffb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ffba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	371c      	adds	r7, #28
 800ffc0:	46bd      	mov	sp, r7
 800ffc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffc6:	4770      	bx	lr

0800ffc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ffc8:	b480      	push	{r7}
 800ffca:	b085      	sub	sp, #20
 800ffcc:	af00      	add	r7, sp, #0
 800ffce:	6078      	str	r0, [r7, #4]
 800ffd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ffd6:	683b      	ldr	r3, [r7, #0]
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	785b      	ldrb	r3, [r3, #1]
 800ffe0:	2b01      	cmp	r3, #1
 800ffe2:	d139      	bne.n	8010058 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ffe4:	68fb      	ldr	r3, [r7, #12]
 800ffe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffea:	69da      	ldr	r2, [r3, #28]
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	781b      	ldrb	r3, [r3, #0]
 800fff0:	f003 030f 	and.w	r3, r3, #15
 800fff4:	2101      	movs	r1, #1
 800fff6:	fa01 f303 	lsl.w	r3, r1, r3
 800fffa:	b29b      	uxth	r3, r3
 800fffc:	68f9      	ldr	r1, [r7, #12]
 800fffe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010002:	4313      	orrs	r3, r2
 8010004:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010006:	68bb      	ldr	r3, [r7, #8]
 8010008:	015a      	lsls	r2, r3, #5
 801000a:	68fb      	ldr	r3, [r7, #12]
 801000c:	4413      	add	r3, r2
 801000e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010018:	2b00      	cmp	r3, #0
 801001a:	d153      	bne.n	80100c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	015a      	lsls	r2, r3, #5
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	4413      	add	r3, r2
 8010024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010028:	681a      	ldr	r2, [r3, #0]
 801002a:	683b      	ldr	r3, [r7, #0]
 801002c:	689b      	ldr	r3, [r3, #8]
 801002e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010032:	683b      	ldr	r3, [r7, #0]
 8010034:	78db      	ldrb	r3, [r3, #3]
 8010036:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010038:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801003a:	68bb      	ldr	r3, [r7, #8]
 801003c:	059b      	lsls	r3, r3, #22
 801003e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010040:	431a      	orrs	r2, r3
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	0159      	lsls	r1, r3, #5
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	440b      	add	r3, r1
 801004a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801004e:	4619      	mov	r1, r3
 8010050:	4b20      	ldr	r3, [pc, #128]	; (80100d4 <USB_ActivateEndpoint+0x10c>)
 8010052:	4313      	orrs	r3, r2
 8010054:	600b      	str	r3, [r1, #0]
 8010056:	e035      	b.n	80100c4 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801005e:	69da      	ldr	r2, [r3, #28]
 8010060:	683b      	ldr	r3, [r7, #0]
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	f003 030f 	and.w	r3, r3, #15
 8010068:	2101      	movs	r1, #1
 801006a:	fa01 f303 	lsl.w	r3, r1, r3
 801006e:	041b      	lsls	r3, r3, #16
 8010070:	68f9      	ldr	r1, [r7, #12]
 8010072:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010076:	4313      	orrs	r3, r2
 8010078:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	015a      	lsls	r2, r3, #5
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	4413      	add	r3, r2
 8010082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801008c:	2b00      	cmp	r3, #0
 801008e:	d119      	bne.n	80100c4 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	015a      	lsls	r2, r3, #5
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	4413      	add	r3, r2
 8010098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801009c:	681a      	ldr	r2, [r3, #0]
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	689b      	ldr	r3, [r3, #8]
 80100a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80100a6:	683b      	ldr	r3, [r7, #0]
 80100a8:	78db      	ldrb	r3, [r3, #3]
 80100aa:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80100ac:	430b      	orrs	r3, r1
 80100ae:	431a      	orrs	r2, r3
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	0159      	lsls	r1, r3, #5
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	440b      	add	r3, r1
 80100b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100bc:	4619      	mov	r1, r3
 80100be:	4b05      	ldr	r3, [pc, #20]	; (80100d4 <USB_ActivateEndpoint+0x10c>)
 80100c0:	4313      	orrs	r3, r2
 80100c2:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80100c4:	2300      	movs	r3, #0
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3714      	adds	r7, #20
 80100ca:	46bd      	mov	sp, r7
 80100cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100d0:	4770      	bx	lr
 80100d2:	bf00      	nop
 80100d4:	10008000 	.word	0x10008000

080100d8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80100d8:	b480      	push	{r7}
 80100da:	b085      	sub	sp, #20
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80100e6:	683b      	ldr	r3, [r7, #0]
 80100e8:	781b      	ldrb	r3, [r3, #0]
 80100ea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	785b      	ldrb	r3, [r3, #1]
 80100f0:	2b01      	cmp	r3, #1
 80100f2:	d161      	bne.n	80101b8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80100f4:	68bb      	ldr	r3, [r7, #8]
 80100f6:	015a      	lsls	r2, r3, #5
 80100f8:	68fb      	ldr	r3, [r7, #12]
 80100fa:	4413      	add	r3, r2
 80100fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801010a:	d11f      	bne.n	801014c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	015a      	lsls	r2, r3, #5
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	4413      	add	r3, r2
 8010114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	68ba      	ldr	r2, [r7, #8]
 801011c:	0151      	lsls	r1, r2, #5
 801011e:	68fa      	ldr	r2, [r7, #12]
 8010120:	440a      	add	r2, r1
 8010122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010126:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801012a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	015a      	lsls	r2, r3, #5
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	4413      	add	r3, r2
 8010134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	68ba      	ldr	r2, [r7, #8]
 801013c:	0151      	lsls	r1, r2, #5
 801013e:	68fa      	ldr	r2, [r7, #12]
 8010140:	440a      	add	r2, r1
 8010142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010146:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801014a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010152:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	781b      	ldrb	r3, [r3, #0]
 8010158:	f003 030f 	and.w	r3, r3, #15
 801015c:	2101      	movs	r1, #1
 801015e:	fa01 f303 	lsl.w	r3, r1, r3
 8010162:	b29b      	uxth	r3, r3
 8010164:	43db      	mvns	r3, r3
 8010166:	68f9      	ldr	r1, [r7, #12]
 8010168:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801016c:	4013      	ands	r3, r2
 801016e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010176:	69da      	ldr	r2, [r3, #28]
 8010178:	683b      	ldr	r3, [r7, #0]
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	f003 030f 	and.w	r3, r3, #15
 8010180:	2101      	movs	r1, #1
 8010182:	fa01 f303 	lsl.w	r3, r1, r3
 8010186:	b29b      	uxth	r3, r3
 8010188:	43db      	mvns	r3, r3
 801018a:	68f9      	ldr	r1, [r7, #12]
 801018c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010190:	4013      	ands	r3, r2
 8010192:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	015a      	lsls	r2, r3, #5
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	4413      	add	r3, r2
 801019c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	0159      	lsls	r1, r3, #5
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	440b      	add	r3, r1
 80101aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101ae:	4619      	mov	r1, r3
 80101b0:	4b35      	ldr	r3, [pc, #212]	; (8010288 <USB_DeactivateEndpoint+0x1b0>)
 80101b2:	4013      	ands	r3, r2
 80101b4:	600b      	str	r3, [r1, #0]
 80101b6:	e060      	b.n	801027a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	015a      	lsls	r2, r3, #5
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	4413      	add	r3, r2
 80101c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80101ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80101ce:	d11f      	bne.n	8010210 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	015a      	lsls	r2, r3, #5
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	4413      	add	r3, r2
 80101d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	68ba      	ldr	r2, [r7, #8]
 80101e0:	0151      	lsls	r1, r2, #5
 80101e2:	68fa      	ldr	r2, [r7, #12]
 80101e4:	440a      	add	r2, r1
 80101e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80101ea:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80101ee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80101f0:	68bb      	ldr	r3, [r7, #8]
 80101f2:	015a      	lsls	r2, r3, #5
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	4413      	add	r3, r2
 80101f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	68ba      	ldr	r2, [r7, #8]
 8010200:	0151      	lsls	r1, r2, #5
 8010202:	68fa      	ldr	r2, [r7, #12]
 8010204:	440a      	add	r2, r1
 8010206:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801020a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801020e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010216:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010218:	683b      	ldr	r3, [r7, #0]
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	f003 030f 	and.w	r3, r3, #15
 8010220:	2101      	movs	r1, #1
 8010222:	fa01 f303 	lsl.w	r3, r1, r3
 8010226:	041b      	lsls	r3, r3, #16
 8010228:	43db      	mvns	r3, r3
 801022a:	68f9      	ldr	r1, [r7, #12]
 801022c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010230:	4013      	ands	r3, r2
 8010232:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801023a:	69da      	ldr	r2, [r3, #28]
 801023c:	683b      	ldr	r3, [r7, #0]
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	f003 030f 	and.w	r3, r3, #15
 8010244:	2101      	movs	r1, #1
 8010246:	fa01 f303 	lsl.w	r3, r1, r3
 801024a:	041b      	lsls	r3, r3, #16
 801024c:	43db      	mvns	r3, r3
 801024e:	68f9      	ldr	r1, [r7, #12]
 8010250:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010254:	4013      	ands	r3, r2
 8010256:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	015a      	lsls	r2, r3, #5
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	4413      	add	r3, r2
 8010260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010264:	681a      	ldr	r2, [r3, #0]
 8010266:	68bb      	ldr	r3, [r7, #8]
 8010268:	0159      	lsls	r1, r3, #5
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	440b      	add	r3, r1
 801026e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010272:	4619      	mov	r1, r3
 8010274:	4b05      	ldr	r3, [pc, #20]	; (801028c <USB_DeactivateEndpoint+0x1b4>)
 8010276:	4013      	ands	r3, r2
 8010278:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3714      	adds	r7, #20
 8010280:	46bd      	mov	sp, r7
 8010282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010286:	4770      	bx	lr
 8010288:	ec337800 	.word	0xec337800
 801028c:	eff37800 	.word	0xeff37800

08010290 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010290:	b580      	push	{r7, lr}
 8010292:	b08a      	sub	sp, #40	; 0x28
 8010294:	af02      	add	r7, sp, #8
 8010296:	60f8      	str	r0, [r7, #12]
 8010298:	60b9      	str	r1, [r7, #8]
 801029a:	4613      	mov	r3, r2
 801029c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801029e:	68fb      	ldr	r3, [r7, #12]
 80102a0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	781b      	ldrb	r3, [r3, #0]
 80102a6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80102a8:	68bb      	ldr	r3, [r7, #8]
 80102aa:	785b      	ldrb	r3, [r3, #1]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	f040 8163 	bne.w	8010578 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	695b      	ldr	r3, [r3, #20]
 80102b6:	2b00      	cmp	r3, #0
 80102b8:	d132      	bne.n	8010320 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80102ba:	69bb      	ldr	r3, [r7, #24]
 80102bc:	015a      	lsls	r2, r3, #5
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	4413      	add	r3, r2
 80102c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c6:	691a      	ldr	r2, [r3, #16]
 80102c8:	69bb      	ldr	r3, [r7, #24]
 80102ca:	0159      	lsls	r1, r3, #5
 80102cc:	69fb      	ldr	r3, [r7, #28]
 80102ce:	440b      	add	r3, r1
 80102d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102d4:	4619      	mov	r1, r3
 80102d6:	4ba5      	ldr	r3, [pc, #660]	; (801056c <USB_EPStartXfer+0x2dc>)
 80102d8:	4013      	ands	r3, r2
 80102da:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	015a      	lsls	r2, r3, #5
 80102e0:	69fb      	ldr	r3, [r7, #28]
 80102e2:	4413      	add	r3, r2
 80102e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e8:	691b      	ldr	r3, [r3, #16]
 80102ea:	69ba      	ldr	r2, [r7, #24]
 80102ec:	0151      	lsls	r1, r2, #5
 80102ee:	69fa      	ldr	r2, [r7, #28]
 80102f0:	440a      	add	r2, r1
 80102f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80102fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80102fc:	69bb      	ldr	r3, [r7, #24]
 80102fe:	015a      	lsls	r2, r3, #5
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	4413      	add	r3, r2
 8010304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010308:	691a      	ldr	r2, [r3, #16]
 801030a:	69bb      	ldr	r3, [r7, #24]
 801030c:	0159      	lsls	r1, r3, #5
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	440b      	add	r3, r1
 8010312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010316:	4619      	mov	r1, r3
 8010318:	4b95      	ldr	r3, [pc, #596]	; (8010570 <USB_EPStartXfer+0x2e0>)
 801031a:	4013      	ands	r3, r2
 801031c:	610b      	str	r3, [r1, #16]
 801031e:	e074      	b.n	801040a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010320:	69bb      	ldr	r3, [r7, #24]
 8010322:	015a      	lsls	r2, r3, #5
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	4413      	add	r3, r2
 8010328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801032c:	691a      	ldr	r2, [r3, #16]
 801032e:	69bb      	ldr	r3, [r7, #24]
 8010330:	0159      	lsls	r1, r3, #5
 8010332:	69fb      	ldr	r3, [r7, #28]
 8010334:	440b      	add	r3, r1
 8010336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801033a:	4619      	mov	r1, r3
 801033c:	4b8c      	ldr	r3, [pc, #560]	; (8010570 <USB_EPStartXfer+0x2e0>)
 801033e:	4013      	ands	r3, r2
 8010340:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010342:	69bb      	ldr	r3, [r7, #24]
 8010344:	015a      	lsls	r2, r3, #5
 8010346:	69fb      	ldr	r3, [r7, #28]
 8010348:	4413      	add	r3, r2
 801034a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801034e:	691a      	ldr	r2, [r3, #16]
 8010350:	69bb      	ldr	r3, [r7, #24]
 8010352:	0159      	lsls	r1, r3, #5
 8010354:	69fb      	ldr	r3, [r7, #28]
 8010356:	440b      	add	r3, r1
 8010358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801035c:	4619      	mov	r1, r3
 801035e:	4b83      	ldr	r3, [pc, #524]	; (801056c <USB_EPStartXfer+0x2dc>)
 8010360:	4013      	ands	r3, r2
 8010362:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8010364:	69bb      	ldr	r3, [r7, #24]
 8010366:	015a      	lsls	r2, r3, #5
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	4413      	add	r3, r2
 801036c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010370:	691a      	ldr	r2, [r3, #16]
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	6959      	ldr	r1, [r3, #20]
 8010376:	68bb      	ldr	r3, [r7, #8]
 8010378:	689b      	ldr	r3, [r3, #8]
 801037a:	440b      	add	r3, r1
 801037c:	1e59      	subs	r1, r3, #1
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	fbb1 f3f3 	udiv	r3, r1, r3
 8010386:	04d9      	lsls	r1, r3, #19
 8010388:	4b7a      	ldr	r3, [pc, #488]	; (8010574 <USB_EPStartXfer+0x2e4>)
 801038a:	400b      	ands	r3, r1
 801038c:	69b9      	ldr	r1, [r7, #24]
 801038e:	0148      	lsls	r0, r1, #5
 8010390:	69f9      	ldr	r1, [r7, #28]
 8010392:	4401      	add	r1, r0
 8010394:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010398:	4313      	orrs	r3, r2
 801039a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	015a      	lsls	r2, r3, #5
 80103a0:	69fb      	ldr	r3, [r7, #28]
 80103a2:	4413      	add	r3, r2
 80103a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103a8:	691a      	ldr	r2, [r3, #16]
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80103b2:	69b9      	ldr	r1, [r7, #24]
 80103b4:	0148      	lsls	r0, r1, #5
 80103b6:	69f9      	ldr	r1, [r7, #28]
 80103b8:	4401      	add	r1, r0
 80103ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80103be:	4313      	orrs	r3, r2
 80103c0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	78db      	ldrb	r3, [r3, #3]
 80103c6:	2b01      	cmp	r3, #1
 80103c8:	d11f      	bne.n	801040a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80103ca:	69bb      	ldr	r3, [r7, #24]
 80103cc:	015a      	lsls	r2, r3, #5
 80103ce:	69fb      	ldr	r3, [r7, #28]
 80103d0:	4413      	add	r3, r2
 80103d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103d6:	691b      	ldr	r3, [r3, #16]
 80103d8:	69ba      	ldr	r2, [r7, #24]
 80103da:	0151      	lsls	r1, r2, #5
 80103dc:	69fa      	ldr	r2, [r7, #28]
 80103de:	440a      	add	r2, r1
 80103e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103e4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80103e8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80103ea:	69bb      	ldr	r3, [r7, #24]
 80103ec:	015a      	lsls	r2, r3, #5
 80103ee:	69fb      	ldr	r3, [r7, #28]
 80103f0:	4413      	add	r3, r2
 80103f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103f6:	691b      	ldr	r3, [r3, #16]
 80103f8:	69ba      	ldr	r2, [r7, #24]
 80103fa:	0151      	lsls	r1, r2, #5
 80103fc:	69fa      	ldr	r2, [r7, #28]
 80103fe:	440a      	add	r2, r1
 8010400:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010404:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010408:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801040a:	79fb      	ldrb	r3, [r7, #7]
 801040c:	2b01      	cmp	r3, #1
 801040e:	d14b      	bne.n	80104a8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010410:	68bb      	ldr	r3, [r7, #8]
 8010412:	691b      	ldr	r3, [r3, #16]
 8010414:	2b00      	cmp	r3, #0
 8010416:	d009      	beq.n	801042c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	015a      	lsls	r2, r3, #5
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	4413      	add	r3, r2
 8010420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010424:	461a      	mov	r2, r3
 8010426:	68bb      	ldr	r3, [r7, #8]
 8010428:	691b      	ldr	r3, [r3, #16]
 801042a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	78db      	ldrb	r3, [r3, #3]
 8010430:	2b01      	cmp	r3, #1
 8010432:	d128      	bne.n	8010486 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010434:	69fb      	ldr	r3, [r7, #28]
 8010436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801043a:	689b      	ldr	r3, [r3, #8]
 801043c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010440:	2b00      	cmp	r3, #0
 8010442:	d110      	bne.n	8010466 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010444:	69bb      	ldr	r3, [r7, #24]
 8010446:	015a      	lsls	r2, r3, #5
 8010448:	69fb      	ldr	r3, [r7, #28]
 801044a:	4413      	add	r3, r2
 801044c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	69ba      	ldr	r2, [r7, #24]
 8010454:	0151      	lsls	r1, r2, #5
 8010456:	69fa      	ldr	r2, [r7, #28]
 8010458:	440a      	add	r2, r1
 801045a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801045e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010462:	6013      	str	r3, [r2, #0]
 8010464:	e00f      	b.n	8010486 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010466:	69bb      	ldr	r3, [r7, #24]
 8010468:	015a      	lsls	r2, r3, #5
 801046a:	69fb      	ldr	r3, [r7, #28]
 801046c:	4413      	add	r3, r2
 801046e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	69ba      	ldr	r2, [r7, #24]
 8010476:	0151      	lsls	r1, r2, #5
 8010478:	69fa      	ldr	r2, [r7, #28]
 801047a:	440a      	add	r2, r1
 801047c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010484:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010486:	69bb      	ldr	r3, [r7, #24]
 8010488:	015a      	lsls	r2, r3, #5
 801048a:	69fb      	ldr	r3, [r7, #28]
 801048c:	4413      	add	r3, r2
 801048e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	69ba      	ldr	r2, [r7, #24]
 8010496:	0151      	lsls	r1, r2, #5
 8010498:	69fa      	ldr	r2, [r7, #28]
 801049a:	440a      	add	r2, r1
 801049c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104a4:	6013      	str	r3, [r2, #0]
 80104a6:	e133      	b.n	8010710 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80104a8:	69bb      	ldr	r3, [r7, #24]
 80104aa:	015a      	lsls	r2, r3, #5
 80104ac:	69fb      	ldr	r3, [r7, #28]
 80104ae:	4413      	add	r3, r2
 80104b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	69ba      	ldr	r2, [r7, #24]
 80104b8:	0151      	lsls	r1, r2, #5
 80104ba:	69fa      	ldr	r2, [r7, #28]
 80104bc:	440a      	add	r2, r1
 80104be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80104c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80104c6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80104c8:	68bb      	ldr	r3, [r7, #8]
 80104ca:	78db      	ldrb	r3, [r3, #3]
 80104cc:	2b01      	cmp	r3, #1
 80104ce:	d015      	beq.n	80104fc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	695b      	ldr	r3, [r3, #20]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	f000 811b 	beq.w	8010710 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80104da:	69fb      	ldr	r3, [r7, #28]
 80104dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80104e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	781b      	ldrb	r3, [r3, #0]
 80104e6:	f003 030f 	and.w	r3, r3, #15
 80104ea:	2101      	movs	r1, #1
 80104ec:	fa01 f303 	lsl.w	r3, r1, r3
 80104f0:	69f9      	ldr	r1, [r7, #28]
 80104f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80104f6:	4313      	orrs	r3, r2
 80104f8:	634b      	str	r3, [r1, #52]	; 0x34
 80104fa:	e109      	b.n	8010710 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80104fc:	69fb      	ldr	r3, [r7, #28]
 80104fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010502:	689b      	ldr	r3, [r3, #8]
 8010504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010508:	2b00      	cmp	r3, #0
 801050a:	d110      	bne.n	801052e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801050c:	69bb      	ldr	r3, [r7, #24]
 801050e:	015a      	lsls	r2, r3, #5
 8010510:	69fb      	ldr	r3, [r7, #28]
 8010512:	4413      	add	r3, r2
 8010514:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	69ba      	ldr	r2, [r7, #24]
 801051c:	0151      	lsls	r1, r2, #5
 801051e:	69fa      	ldr	r2, [r7, #28]
 8010520:	440a      	add	r2, r1
 8010522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010526:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801052a:	6013      	str	r3, [r2, #0]
 801052c:	e00f      	b.n	801054e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801052e:	69bb      	ldr	r3, [r7, #24]
 8010530:	015a      	lsls	r2, r3, #5
 8010532:	69fb      	ldr	r3, [r7, #28]
 8010534:	4413      	add	r3, r2
 8010536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	69ba      	ldr	r2, [r7, #24]
 801053e:	0151      	lsls	r1, r2, #5
 8010540:	69fa      	ldr	r2, [r7, #28]
 8010542:	440a      	add	r2, r1
 8010544:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801054c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	68d9      	ldr	r1, [r3, #12]
 8010552:	68bb      	ldr	r3, [r7, #8]
 8010554:	781a      	ldrb	r2, [r3, #0]
 8010556:	68bb      	ldr	r3, [r7, #8]
 8010558:	695b      	ldr	r3, [r3, #20]
 801055a:	b298      	uxth	r0, r3
 801055c:	79fb      	ldrb	r3, [r7, #7]
 801055e:	9300      	str	r3, [sp, #0]
 8010560:	4603      	mov	r3, r0
 8010562:	68f8      	ldr	r0, [r7, #12]
 8010564:	f000 fa38 	bl	80109d8 <USB_WritePacket>
 8010568:	e0d2      	b.n	8010710 <USB_EPStartXfer+0x480>
 801056a:	bf00      	nop
 801056c:	e007ffff 	.word	0xe007ffff
 8010570:	fff80000 	.word	0xfff80000
 8010574:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010578:	69bb      	ldr	r3, [r7, #24]
 801057a:	015a      	lsls	r2, r3, #5
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	4413      	add	r3, r2
 8010580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010584:	691a      	ldr	r2, [r3, #16]
 8010586:	69bb      	ldr	r3, [r7, #24]
 8010588:	0159      	lsls	r1, r3, #5
 801058a:	69fb      	ldr	r3, [r7, #28]
 801058c:	440b      	add	r3, r1
 801058e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010592:	4619      	mov	r1, r3
 8010594:	4b61      	ldr	r3, [pc, #388]	; (801071c <USB_EPStartXfer+0x48c>)
 8010596:	4013      	ands	r3, r2
 8010598:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	015a      	lsls	r2, r3, #5
 801059e:	69fb      	ldr	r3, [r7, #28]
 80105a0:	4413      	add	r3, r2
 80105a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105a6:	691a      	ldr	r2, [r3, #16]
 80105a8:	69bb      	ldr	r3, [r7, #24]
 80105aa:	0159      	lsls	r1, r3, #5
 80105ac:	69fb      	ldr	r3, [r7, #28]
 80105ae:	440b      	add	r3, r1
 80105b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105b4:	4619      	mov	r1, r3
 80105b6:	4b5a      	ldr	r3, [pc, #360]	; (8010720 <USB_EPStartXfer+0x490>)
 80105b8:	4013      	ands	r3, r2
 80105ba:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80105bc:	68bb      	ldr	r3, [r7, #8]
 80105be:	695b      	ldr	r3, [r3, #20]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d123      	bne.n	801060c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80105c4:	69bb      	ldr	r3, [r7, #24]
 80105c6:	015a      	lsls	r2, r3, #5
 80105c8:	69fb      	ldr	r3, [r7, #28]
 80105ca:	4413      	add	r3, r2
 80105cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105d0:	691a      	ldr	r2, [r3, #16]
 80105d2:	68bb      	ldr	r3, [r7, #8]
 80105d4:	689b      	ldr	r3, [r3, #8]
 80105d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80105da:	69b9      	ldr	r1, [r7, #24]
 80105dc:	0148      	lsls	r0, r1, #5
 80105de:	69f9      	ldr	r1, [r7, #28]
 80105e0:	4401      	add	r1, r0
 80105e2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80105e6:	4313      	orrs	r3, r2
 80105e8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80105ea:	69bb      	ldr	r3, [r7, #24]
 80105ec:	015a      	lsls	r2, r3, #5
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	4413      	add	r3, r2
 80105f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80105f6:	691b      	ldr	r3, [r3, #16]
 80105f8:	69ba      	ldr	r2, [r7, #24]
 80105fa:	0151      	lsls	r1, r2, #5
 80105fc:	69fa      	ldr	r2, [r7, #28]
 80105fe:	440a      	add	r2, r1
 8010600:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010604:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010608:	6113      	str	r3, [r2, #16]
 801060a:	e033      	b.n	8010674 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801060c:	68bb      	ldr	r3, [r7, #8]
 801060e:	695a      	ldr	r2, [r3, #20]
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	689b      	ldr	r3, [r3, #8]
 8010614:	4413      	add	r3, r2
 8010616:	1e5a      	subs	r2, r3, #1
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	689b      	ldr	r3, [r3, #8]
 801061c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010620:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010622:	69bb      	ldr	r3, [r7, #24]
 8010624:	015a      	lsls	r2, r3, #5
 8010626:	69fb      	ldr	r3, [r7, #28]
 8010628:	4413      	add	r3, r2
 801062a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801062e:	691a      	ldr	r2, [r3, #16]
 8010630:	8afb      	ldrh	r3, [r7, #22]
 8010632:	04d9      	lsls	r1, r3, #19
 8010634:	4b3b      	ldr	r3, [pc, #236]	; (8010724 <USB_EPStartXfer+0x494>)
 8010636:	400b      	ands	r3, r1
 8010638:	69b9      	ldr	r1, [r7, #24]
 801063a:	0148      	lsls	r0, r1, #5
 801063c:	69f9      	ldr	r1, [r7, #28]
 801063e:	4401      	add	r1, r0
 8010640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010644:	4313      	orrs	r3, r2
 8010646:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8010648:	69bb      	ldr	r3, [r7, #24]
 801064a:	015a      	lsls	r2, r3, #5
 801064c:	69fb      	ldr	r3, [r7, #28]
 801064e:	4413      	add	r3, r2
 8010650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010654:	691a      	ldr	r2, [r3, #16]
 8010656:	68bb      	ldr	r3, [r7, #8]
 8010658:	689b      	ldr	r3, [r3, #8]
 801065a:	8af9      	ldrh	r1, [r7, #22]
 801065c:	fb01 f303 	mul.w	r3, r1, r3
 8010660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010664:	69b9      	ldr	r1, [r7, #24]
 8010666:	0148      	lsls	r0, r1, #5
 8010668:	69f9      	ldr	r1, [r7, #28]
 801066a:	4401      	add	r1, r0
 801066c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010670:	4313      	orrs	r3, r2
 8010672:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010674:	79fb      	ldrb	r3, [r7, #7]
 8010676:	2b01      	cmp	r3, #1
 8010678:	d10d      	bne.n	8010696 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801067a:	68bb      	ldr	r3, [r7, #8]
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	2b00      	cmp	r3, #0
 8010680:	d009      	beq.n	8010696 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8010682:	68bb      	ldr	r3, [r7, #8]
 8010684:	68d9      	ldr	r1, [r3, #12]
 8010686:	69bb      	ldr	r3, [r7, #24]
 8010688:	015a      	lsls	r2, r3, #5
 801068a:	69fb      	ldr	r3, [r7, #28]
 801068c:	4413      	add	r3, r2
 801068e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010692:	460a      	mov	r2, r1
 8010694:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010696:	68bb      	ldr	r3, [r7, #8]
 8010698:	78db      	ldrb	r3, [r3, #3]
 801069a:	2b01      	cmp	r3, #1
 801069c:	d128      	bne.n	80106f0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801069e:	69fb      	ldr	r3, [r7, #28]
 80106a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80106a4:	689b      	ldr	r3, [r3, #8]
 80106a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d110      	bne.n	80106d0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80106ae:	69bb      	ldr	r3, [r7, #24]
 80106b0:	015a      	lsls	r2, r3, #5
 80106b2:	69fb      	ldr	r3, [r7, #28]
 80106b4:	4413      	add	r3, r2
 80106b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	69ba      	ldr	r2, [r7, #24]
 80106be:	0151      	lsls	r1, r2, #5
 80106c0:	69fa      	ldr	r2, [r7, #28]
 80106c2:	440a      	add	r2, r1
 80106c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80106cc:	6013      	str	r3, [r2, #0]
 80106ce:	e00f      	b.n	80106f0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80106d0:	69bb      	ldr	r3, [r7, #24]
 80106d2:	015a      	lsls	r2, r3, #5
 80106d4:	69fb      	ldr	r3, [r7, #28]
 80106d6:	4413      	add	r3, r2
 80106d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	69ba      	ldr	r2, [r7, #24]
 80106e0:	0151      	lsls	r1, r2, #5
 80106e2:	69fa      	ldr	r2, [r7, #28]
 80106e4:	440a      	add	r2, r1
 80106e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80106ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80106ee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80106f0:	69bb      	ldr	r3, [r7, #24]
 80106f2:	015a      	lsls	r2, r3, #5
 80106f4:	69fb      	ldr	r3, [r7, #28]
 80106f6:	4413      	add	r3, r2
 80106f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	69ba      	ldr	r2, [r7, #24]
 8010700:	0151      	lsls	r1, r2, #5
 8010702:	69fa      	ldr	r2, [r7, #28]
 8010704:	440a      	add	r2, r1
 8010706:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801070a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801070e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010710:	2300      	movs	r3, #0
}
 8010712:	4618      	mov	r0, r3
 8010714:	3720      	adds	r7, #32
 8010716:	46bd      	mov	sp, r7
 8010718:	bd80      	pop	{r7, pc}
 801071a:	bf00      	nop
 801071c:	fff80000 	.word	0xfff80000
 8010720:	e007ffff 	.word	0xe007ffff
 8010724:	1ff80000 	.word	0x1ff80000

08010728 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010728:	b480      	push	{r7}
 801072a:	b087      	sub	sp, #28
 801072c:	af00      	add	r7, sp, #0
 801072e:	60f8      	str	r0, [r7, #12]
 8010730:	60b9      	str	r1, [r7, #8]
 8010732:	4613      	mov	r3, r2
 8010734:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010736:	68fb      	ldr	r3, [r7, #12]
 8010738:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010740:	68bb      	ldr	r3, [r7, #8]
 8010742:	785b      	ldrb	r3, [r3, #1]
 8010744:	2b01      	cmp	r3, #1
 8010746:	f040 80cd 	bne.w	80108e4 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	695b      	ldr	r3, [r3, #20]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d132      	bne.n	80107b8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010752:	693b      	ldr	r3, [r7, #16]
 8010754:	015a      	lsls	r2, r3, #5
 8010756:	697b      	ldr	r3, [r7, #20]
 8010758:	4413      	add	r3, r2
 801075a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801075e:	691a      	ldr	r2, [r3, #16]
 8010760:	693b      	ldr	r3, [r7, #16]
 8010762:	0159      	lsls	r1, r3, #5
 8010764:	697b      	ldr	r3, [r7, #20]
 8010766:	440b      	add	r3, r1
 8010768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801076c:	4619      	mov	r1, r3
 801076e:	4b98      	ldr	r3, [pc, #608]	; (80109d0 <USB_EP0StartXfer+0x2a8>)
 8010770:	4013      	ands	r3, r2
 8010772:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	015a      	lsls	r2, r3, #5
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	4413      	add	r3, r2
 801077c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010780:	691b      	ldr	r3, [r3, #16]
 8010782:	693a      	ldr	r2, [r7, #16]
 8010784:	0151      	lsls	r1, r2, #5
 8010786:	697a      	ldr	r2, [r7, #20]
 8010788:	440a      	add	r2, r1
 801078a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801078e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010794:	693b      	ldr	r3, [r7, #16]
 8010796:	015a      	lsls	r2, r3, #5
 8010798:	697b      	ldr	r3, [r7, #20]
 801079a:	4413      	add	r3, r2
 801079c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107a0:	691a      	ldr	r2, [r3, #16]
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	0159      	lsls	r1, r3, #5
 80107a6:	697b      	ldr	r3, [r7, #20]
 80107a8:	440b      	add	r3, r1
 80107aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107ae:	4619      	mov	r1, r3
 80107b0:	4b88      	ldr	r3, [pc, #544]	; (80109d4 <USB_EP0StartXfer+0x2ac>)
 80107b2:	4013      	ands	r3, r2
 80107b4:	610b      	str	r3, [r1, #16]
 80107b6:	e04e      	b.n	8010856 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80107b8:	693b      	ldr	r3, [r7, #16]
 80107ba:	015a      	lsls	r2, r3, #5
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	4413      	add	r3, r2
 80107c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107c4:	691a      	ldr	r2, [r3, #16]
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	0159      	lsls	r1, r3, #5
 80107ca:	697b      	ldr	r3, [r7, #20]
 80107cc:	440b      	add	r3, r1
 80107ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107d2:	4619      	mov	r1, r3
 80107d4:	4b7f      	ldr	r3, [pc, #508]	; (80109d4 <USB_EP0StartXfer+0x2ac>)
 80107d6:	4013      	ands	r3, r2
 80107d8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	015a      	lsls	r2, r3, #5
 80107de:	697b      	ldr	r3, [r7, #20]
 80107e0:	4413      	add	r3, r2
 80107e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107e6:	691a      	ldr	r2, [r3, #16]
 80107e8:	693b      	ldr	r3, [r7, #16]
 80107ea:	0159      	lsls	r1, r3, #5
 80107ec:	697b      	ldr	r3, [r7, #20]
 80107ee:	440b      	add	r3, r1
 80107f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80107f4:	4619      	mov	r1, r3
 80107f6:	4b76      	ldr	r3, [pc, #472]	; (80109d0 <USB_EP0StartXfer+0x2a8>)
 80107f8:	4013      	ands	r3, r2
 80107fa:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	695a      	ldr	r2, [r3, #20]
 8010800:	68bb      	ldr	r3, [r7, #8]
 8010802:	689b      	ldr	r3, [r3, #8]
 8010804:	429a      	cmp	r2, r3
 8010806:	d903      	bls.n	8010810 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	689a      	ldr	r2, [r3, #8]
 801080c:	68bb      	ldr	r3, [r7, #8]
 801080e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801081c:	691b      	ldr	r3, [r3, #16]
 801081e:	693a      	ldr	r2, [r7, #16]
 8010820:	0151      	lsls	r1, r2, #5
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	440a      	add	r2, r1
 8010826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801082a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801082e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	015a      	lsls	r2, r3, #5
 8010834:	697b      	ldr	r3, [r7, #20]
 8010836:	4413      	add	r3, r2
 8010838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801083c:	691a      	ldr	r2, [r3, #16]
 801083e:	68bb      	ldr	r3, [r7, #8]
 8010840:	695b      	ldr	r3, [r3, #20]
 8010842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010846:	6939      	ldr	r1, [r7, #16]
 8010848:	0148      	lsls	r0, r1, #5
 801084a:	6979      	ldr	r1, [r7, #20]
 801084c:	4401      	add	r1, r0
 801084e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010852:	4313      	orrs	r3, r2
 8010854:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010856:	79fb      	ldrb	r3, [r7, #7]
 8010858:	2b01      	cmp	r3, #1
 801085a:	d11e      	bne.n	801089a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	691b      	ldr	r3, [r3, #16]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d009      	beq.n	8010878 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010864:	693b      	ldr	r3, [r7, #16]
 8010866:	015a      	lsls	r2, r3, #5
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	4413      	add	r3, r2
 801086c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010870:	461a      	mov	r2, r3
 8010872:	68bb      	ldr	r3, [r7, #8]
 8010874:	691b      	ldr	r3, [r3, #16]
 8010876:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010878:	693b      	ldr	r3, [r7, #16]
 801087a:	015a      	lsls	r2, r3, #5
 801087c:	697b      	ldr	r3, [r7, #20]
 801087e:	4413      	add	r3, r2
 8010880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	693a      	ldr	r2, [r7, #16]
 8010888:	0151      	lsls	r1, r2, #5
 801088a:	697a      	ldr	r2, [r7, #20]
 801088c:	440a      	add	r2, r1
 801088e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010892:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010896:	6013      	str	r3, [r2, #0]
 8010898:	e092      	b.n	80109c0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	015a      	lsls	r2, r3, #5
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	4413      	add	r3, r2
 80108a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80108a6:	681b      	ldr	r3, [r3, #0]
 80108a8:	693a      	ldr	r2, [r7, #16]
 80108aa:	0151      	lsls	r1, r2, #5
 80108ac:	697a      	ldr	r2, [r7, #20]
 80108ae:	440a      	add	r2, r1
 80108b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80108b4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80108b8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80108ba:	68bb      	ldr	r3, [r7, #8]
 80108bc:	695b      	ldr	r3, [r3, #20]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d07e      	beq.n	80109c0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80108c2:	697b      	ldr	r3, [r7, #20]
 80108c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80108c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80108ca:	68bb      	ldr	r3, [r7, #8]
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	f003 030f 	and.w	r3, r3, #15
 80108d2:	2101      	movs	r1, #1
 80108d4:	fa01 f303 	lsl.w	r3, r1, r3
 80108d8:	6979      	ldr	r1, [r7, #20]
 80108da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80108de:	4313      	orrs	r3, r2
 80108e0:	634b      	str	r3, [r1, #52]	; 0x34
 80108e2:	e06d      	b.n	80109c0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80108e4:	693b      	ldr	r3, [r7, #16]
 80108e6:	015a      	lsls	r2, r3, #5
 80108e8:	697b      	ldr	r3, [r7, #20]
 80108ea:	4413      	add	r3, r2
 80108ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108f0:	691a      	ldr	r2, [r3, #16]
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	0159      	lsls	r1, r3, #5
 80108f6:	697b      	ldr	r3, [r7, #20]
 80108f8:	440b      	add	r3, r1
 80108fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80108fe:	4619      	mov	r1, r3
 8010900:	4b34      	ldr	r3, [pc, #208]	; (80109d4 <USB_EP0StartXfer+0x2ac>)
 8010902:	4013      	ands	r3, r2
 8010904:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010906:	693b      	ldr	r3, [r7, #16]
 8010908:	015a      	lsls	r2, r3, #5
 801090a:	697b      	ldr	r3, [r7, #20]
 801090c:	4413      	add	r3, r2
 801090e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010912:	691a      	ldr	r2, [r3, #16]
 8010914:	693b      	ldr	r3, [r7, #16]
 8010916:	0159      	lsls	r1, r3, #5
 8010918:	697b      	ldr	r3, [r7, #20]
 801091a:	440b      	add	r3, r1
 801091c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010920:	4619      	mov	r1, r3
 8010922:	4b2b      	ldr	r3, [pc, #172]	; (80109d0 <USB_EP0StartXfer+0x2a8>)
 8010924:	4013      	ands	r3, r2
 8010926:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8010928:	68bb      	ldr	r3, [r7, #8]
 801092a:	695b      	ldr	r3, [r3, #20]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d003      	beq.n	8010938 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8010930:	68bb      	ldr	r3, [r7, #8]
 8010932:	689a      	ldr	r2, [r3, #8]
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010938:	693b      	ldr	r3, [r7, #16]
 801093a:	015a      	lsls	r2, r3, #5
 801093c:	697b      	ldr	r3, [r7, #20]
 801093e:	4413      	add	r3, r2
 8010940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010944:	691b      	ldr	r3, [r3, #16]
 8010946:	693a      	ldr	r2, [r7, #16]
 8010948:	0151      	lsls	r1, r2, #5
 801094a:	697a      	ldr	r2, [r7, #20]
 801094c:	440a      	add	r2, r1
 801094e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010952:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010956:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8010958:	693b      	ldr	r3, [r7, #16]
 801095a:	015a      	lsls	r2, r3, #5
 801095c:	697b      	ldr	r3, [r7, #20]
 801095e:	4413      	add	r3, r2
 8010960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010964:	691a      	ldr	r2, [r3, #16]
 8010966:	68bb      	ldr	r3, [r7, #8]
 8010968:	689b      	ldr	r3, [r3, #8]
 801096a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801096e:	6939      	ldr	r1, [r7, #16]
 8010970:	0148      	lsls	r0, r1, #5
 8010972:	6979      	ldr	r1, [r7, #20]
 8010974:	4401      	add	r1, r0
 8010976:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801097a:	4313      	orrs	r3, r2
 801097c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801097e:	79fb      	ldrb	r3, [r7, #7]
 8010980:	2b01      	cmp	r3, #1
 8010982:	d10d      	bne.n	80109a0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	68db      	ldr	r3, [r3, #12]
 8010988:	2b00      	cmp	r3, #0
 801098a:	d009      	beq.n	80109a0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	68d9      	ldr	r1, [r3, #12]
 8010990:	693b      	ldr	r3, [r7, #16]
 8010992:	015a      	lsls	r2, r3, #5
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	4413      	add	r3, r2
 8010998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801099c:	460a      	mov	r2, r1
 801099e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80109a0:	693b      	ldr	r3, [r7, #16]
 80109a2:	015a      	lsls	r2, r3, #5
 80109a4:	697b      	ldr	r3, [r7, #20]
 80109a6:	4413      	add	r3, r2
 80109a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	693a      	ldr	r2, [r7, #16]
 80109b0:	0151      	lsls	r1, r2, #5
 80109b2:	697a      	ldr	r2, [r7, #20]
 80109b4:	440a      	add	r2, r1
 80109b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80109be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80109c0:	2300      	movs	r3, #0
}
 80109c2:	4618      	mov	r0, r3
 80109c4:	371c      	adds	r7, #28
 80109c6:	46bd      	mov	sp, r7
 80109c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109cc:	4770      	bx	lr
 80109ce:	bf00      	nop
 80109d0:	e007ffff 	.word	0xe007ffff
 80109d4:	fff80000 	.word	0xfff80000

080109d8 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80109d8:	b480      	push	{r7}
 80109da:	b089      	sub	sp, #36	; 0x24
 80109dc:	af00      	add	r7, sp, #0
 80109de:	60f8      	str	r0, [r7, #12]
 80109e0:	60b9      	str	r1, [r7, #8]
 80109e2:	4611      	mov	r1, r2
 80109e4:	461a      	mov	r2, r3
 80109e6:	460b      	mov	r3, r1
 80109e8:	71fb      	strb	r3, [r7, #7]
 80109ea:	4613      	mov	r3, r2
 80109ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80109f2:	68bb      	ldr	r3, [r7, #8]
 80109f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80109f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d11a      	bne.n	8010a34 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80109fe:	88bb      	ldrh	r3, [r7, #4]
 8010a00:	3303      	adds	r3, #3
 8010a02:	089b      	lsrs	r3, r3, #2
 8010a04:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010a06:	2300      	movs	r3, #0
 8010a08:	61bb      	str	r3, [r7, #24]
 8010a0a:	e00f      	b.n	8010a2c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8010a0c:	79fb      	ldrb	r3, [r7, #7]
 8010a0e:	031a      	lsls	r2, r3, #12
 8010a10:	697b      	ldr	r3, [r7, #20]
 8010a12:	4413      	add	r3, r2
 8010a14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a18:	461a      	mov	r2, r3
 8010a1a:	69fb      	ldr	r3, [r7, #28]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010a20:	69fb      	ldr	r3, [r7, #28]
 8010a22:	3304      	adds	r3, #4
 8010a24:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010a26:	69bb      	ldr	r3, [r7, #24]
 8010a28:	3301      	adds	r3, #1
 8010a2a:	61bb      	str	r3, [r7, #24]
 8010a2c:	69ba      	ldr	r2, [r7, #24]
 8010a2e:	693b      	ldr	r3, [r7, #16]
 8010a30:	429a      	cmp	r2, r3
 8010a32:	d3eb      	bcc.n	8010a0c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8010a34:	2300      	movs	r3, #0
}
 8010a36:	4618      	mov	r0, r3
 8010a38:	3724      	adds	r7, #36	; 0x24
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr

08010a42 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8010a42:	b480      	push	{r7}
 8010a44:	b089      	sub	sp, #36	; 0x24
 8010a46:	af00      	add	r7, sp, #0
 8010a48:	60f8      	str	r0, [r7, #12]
 8010a4a:	60b9      	str	r1, [r7, #8]
 8010a4c:	4613      	mov	r3, r2
 8010a4e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8010a58:	88fb      	ldrh	r3, [r7, #6]
 8010a5a:	3303      	adds	r3, #3
 8010a5c:	089b      	lsrs	r3, r3, #2
 8010a5e:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8010a60:	2300      	movs	r3, #0
 8010a62:	61bb      	str	r3, [r7, #24]
 8010a64:	e00b      	b.n	8010a7e <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8010a66:	697b      	ldr	r3, [r7, #20]
 8010a68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010a6c:	681a      	ldr	r2, [r3, #0]
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	601a      	str	r2, [r3, #0]
    pDest++;
 8010a72:	69fb      	ldr	r3, [r7, #28]
 8010a74:	3304      	adds	r3, #4
 8010a76:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8010a78:	69bb      	ldr	r3, [r7, #24]
 8010a7a:	3301      	adds	r3, #1
 8010a7c:	61bb      	str	r3, [r7, #24]
 8010a7e:	69ba      	ldr	r2, [r7, #24]
 8010a80:	693b      	ldr	r3, [r7, #16]
 8010a82:	429a      	cmp	r2, r3
 8010a84:	d3ef      	bcc.n	8010a66 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8010a86:	69fb      	ldr	r3, [r7, #28]
}
 8010a88:	4618      	mov	r0, r3
 8010a8a:	3724      	adds	r7, #36	; 0x24
 8010a8c:	46bd      	mov	sp, r7
 8010a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a92:	4770      	bx	lr

08010a94 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010a94:	b480      	push	{r7}
 8010a96:	b085      	sub	sp, #20
 8010a98:	af00      	add	r7, sp, #0
 8010a9a:	6078      	str	r0, [r7, #4]
 8010a9c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	781b      	ldrb	r3, [r3, #0]
 8010aa6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	785b      	ldrb	r3, [r3, #1]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d12c      	bne.n	8010b0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010ab0:	68bb      	ldr	r3, [r7, #8]
 8010ab2:	015a      	lsls	r2, r3, #5
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	4413      	add	r3, r2
 8010ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010abc:	681b      	ldr	r3, [r3, #0]
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	db12      	blt.n	8010ae8 <USB_EPSetStall+0x54>
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d00f      	beq.n	8010ae8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010ac8:	68bb      	ldr	r3, [r7, #8]
 8010aca:	015a      	lsls	r2, r3, #5
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	4413      	add	r3, r2
 8010ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	68ba      	ldr	r2, [r7, #8]
 8010ad8:	0151      	lsls	r1, r2, #5
 8010ada:	68fa      	ldr	r2, [r7, #12]
 8010adc:	440a      	add	r2, r1
 8010ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ae2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010ae6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010ae8:	68bb      	ldr	r3, [r7, #8]
 8010aea:	015a      	lsls	r2, r3, #5
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	4413      	add	r3, r2
 8010af0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	68ba      	ldr	r2, [r7, #8]
 8010af8:	0151      	lsls	r1, r2, #5
 8010afa:	68fa      	ldr	r2, [r7, #12]
 8010afc:	440a      	add	r2, r1
 8010afe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010b02:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b06:	6013      	str	r3, [r2, #0]
 8010b08:	e02b      	b.n	8010b62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	015a      	lsls	r2, r3, #5
 8010b0e:	68fb      	ldr	r3, [r7, #12]
 8010b10:	4413      	add	r3, r2
 8010b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	db12      	blt.n	8010b42 <USB_EPSetStall+0xae>
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d00f      	beq.n	8010b42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010b22:	68bb      	ldr	r3, [r7, #8]
 8010b24:	015a      	lsls	r2, r3, #5
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	4413      	add	r3, r2
 8010b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	68ba      	ldr	r2, [r7, #8]
 8010b32:	0151      	lsls	r1, r2, #5
 8010b34:	68fa      	ldr	r2, [r7, #12]
 8010b36:	440a      	add	r2, r1
 8010b38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010b40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	015a      	lsls	r2, r3, #5
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	4413      	add	r3, r2
 8010b4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	68ba      	ldr	r2, [r7, #8]
 8010b52:	0151      	lsls	r1, r2, #5
 8010b54:	68fa      	ldr	r2, [r7, #12]
 8010b56:	440a      	add	r2, r1
 8010b58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010b5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010b60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010b62:	2300      	movs	r3, #0
}
 8010b64:	4618      	mov	r0, r3
 8010b66:	3714      	adds	r7, #20
 8010b68:	46bd      	mov	sp, r7
 8010b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6e:	4770      	bx	lr

08010b70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010b70:	b480      	push	{r7}
 8010b72:	b085      	sub	sp, #20
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
 8010b78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b7e:	683b      	ldr	r3, [r7, #0]
 8010b80:	781b      	ldrb	r3, [r3, #0]
 8010b82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	785b      	ldrb	r3, [r3, #1]
 8010b88:	2b01      	cmp	r3, #1
 8010b8a:	d128      	bne.n	8010bde <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8010b8c:	68bb      	ldr	r3, [r7, #8]
 8010b8e:	015a      	lsls	r2, r3, #5
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	4413      	add	r3, r2
 8010b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	68ba      	ldr	r2, [r7, #8]
 8010b9c:	0151      	lsls	r1, r2, #5
 8010b9e:	68fa      	ldr	r2, [r7, #12]
 8010ba0:	440a      	add	r2, r1
 8010ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010ba6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010baa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	78db      	ldrb	r3, [r3, #3]
 8010bb0:	2b03      	cmp	r3, #3
 8010bb2:	d003      	beq.n	8010bbc <USB_EPClearStall+0x4c>
 8010bb4:	683b      	ldr	r3, [r7, #0]
 8010bb6:	78db      	ldrb	r3, [r3, #3]
 8010bb8:	2b02      	cmp	r3, #2
 8010bba:	d138      	bne.n	8010c2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010bbc:	68bb      	ldr	r3, [r7, #8]
 8010bbe:	015a      	lsls	r2, r3, #5
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	4413      	add	r3, r2
 8010bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010bc8:	681b      	ldr	r3, [r3, #0]
 8010bca:	68ba      	ldr	r2, [r7, #8]
 8010bcc:	0151      	lsls	r1, r2, #5
 8010bce:	68fa      	ldr	r2, [r7, #12]
 8010bd0:	440a      	add	r2, r1
 8010bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010bda:	6013      	str	r3, [r2, #0]
 8010bdc:	e027      	b.n	8010c2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	015a      	lsls	r2, r3, #5
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	4413      	add	r3, r2
 8010be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68ba      	ldr	r2, [r7, #8]
 8010bee:	0151      	lsls	r1, r2, #5
 8010bf0:	68fa      	ldr	r2, [r7, #12]
 8010bf2:	440a      	add	r2, r1
 8010bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010bfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010bfe:	683b      	ldr	r3, [r7, #0]
 8010c00:	78db      	ldrb	r3, [r3, #3]
 8010c02:	2b03      	cmp	r3, #3
 8010c04:	d003      	beq.n	8010c0e <USB_EPClearStall+0x9e>
 8010c06:	683b      	ldr	r3, [r7, #0]
 8010c08:	78db      	ldrb	r3, [r3, #3]
 8010c0a:	2b02      	cmp	r3, #2
 8010c0c:	d10f      	bne.n	8010c2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010c0e:	68bb      	ldr	r3, [r7, #8]
 8010c10:	015a      	lsls	r2, r3, #5
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	4413      	add	r3, r2
 8010c16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c1a:	681b      	ldr	r3, [r3, #0]
 8010c1c:	68ba      	ldr	r2, [r7, #8]
 8010c1e:	0151      	lsls	r1, r2, #5
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	440a      	add	r2, r1
 8010c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010c2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010c2e:	2300      	movs	r3, #0
}
 8010c30:	4618      	mov	r0, r3
 8010c32:	3714      	adds	r7, #20
 8010c34:	46bd      	mov	sp, r7
 8010c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3a:	4770      	bx	lr

08010c3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010c3c:	b480      	push	{r7}
 8010c3e:	b085      	sub	sp, #20
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	460b      	mov	r3, r1
 8010c46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c52:	681b      	ldr	r3, [r3, #0]
 8010c54:	68fa      	ldr	r2, [r7, #12]
 8010c56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c5a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010c5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c66:	681a      	ldr	r2, [r3, #0]
 8010c68:	78fb      	ldrb	r3, [r7, #3]
 8010c6a:	011b      	lsls	r3, r3, #4
 8010c6c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010c70:	68f9      	ldr	r1, [r7, #12]
 8010c72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010c76:	4313      	orrs	r3, r2
 8010c78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010c7a:	2300      	movs	r3, #0
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3714      	adds	r7, #20
 8010c80:	46bd      	mov	sp, r7
 8010c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c86:	4770      	bx	lr

08010c88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010c88:	b580      	push	{r7, lr}
 8010c8a:	b084      	sub	sp, #16
 8010c8c:	af00      	add	r7, sp, #0
 8010c8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010c94:	68fb      	ldr	r3, [r7, #12]
 8010c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c9a:	685b      	ldr	r3, [r3, #4]
 8010c9c:	68fa      	ldr	r2, [r7, #12]
 8010c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ca2:	f023 0302 	bic.w	r3, r3, #2
 8010ca6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010ca8:	2003      	movs	r0, #3
 8010caa:	f7f6 fd31 	bl	8007710 <HAL_Delay>

  return HAL_OK;
 8010cae:	2300      	movs	r3, #0
}
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3710      	adds	r7, #16
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b084      	sub	sp, #16
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cc0:	687b      	ldr	r3, [r7, #4]
 8010cc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	68fa      	ldr	r2, [r7, #12]
 8010cce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010cd2:	f043 0302 	orr.w	r3, r3, #2
 8010cd6:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010cd8:	2003      	movs	r0, #3
 8010cda:	f7f6 fd19 	bl	8007710 <HAL_Delay>

  return HAL_OK;
 8010cde:	2300      	movs	r3, #0
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	3710      	adds	r7, #16
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd80      	pop	{r7, pc}

08010ce8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b085      	sub	sp, #20
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	695b      	ldr	r3, [r3, #20]
 8010cf4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	699b      	ldr	r3, [r3, #24]
 8010cfa:	68fa      	ldr	r2, [r7, #12]
 8010cfc:	4013      	ands	r3, r2
 8010cfe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010d00:	68fb      	ldr	r3, [r7, #12]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3714      	adds	r7, #20
 8010d06:	46bd      	mov	sp, r7
 8010d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d0c:	4770      	bx	lr

08010d0e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d0e:	b480      	push	{r7}
 8010d10:	b085      	sub	sp, #20
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d1a:	68fb      	ldr	r3, [r7, #12]
 8010d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d20:	699b      	ldr	r3, [r3, #24]
 8010d22:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d24:	68fb      	ldr	r3, [r7, #12]
 8010d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d2a:	69db      	ldr	r3, [r3, #28]
 8010d2c:	68ba      	ldr	r2, [r7, #8]
 8010d2e:	4013      	ands	r3, r2
 8010d30:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	0c1b      	lsrs	r3, r3, #16
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3714      	adds	r7, #20
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d40:	4770      	bx	lr

08010d42 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010d42:	b480      	push	{r7}
 8010d44:	b085      	sub	sp, #20
 8010d46:	af00      	add	r7, sp, #0
 8010d48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d54:	699b      	ldr	r3, [r3, #24]
 8010d56:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d5e:	69db      	ldr	r3, [r3, #28]
 8010d60:	68ba      	ldr	r2, [r7, #8]
 8010d62:	4013      	ands	r3, r2
 8010d64:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	b29b      	uxth	r3, r3
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	3714      	adds	r7, #20
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr

08010d76 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010d76:	b480      	push	{r7}
 8010d78:	b085      	sub	sp, #20
 8010d7a:	af00      	add	r7, sp, #0
 8010d7c:	6078      	str	r0, [r7, #4]
 8010d7e:	460b      	mov	r3, r1
 8010d80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010d86:	78fb      	ldrb	r3, [r7, #3]
 8010d88:	015a      	lsls	r2, r3, #5
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	4413      	add	r3, r2
 8010d8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d92:	689b      	ldr	r3, [r3, #8]
 8010d94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d9c:	695b      	ldr	r3, [r3, #20]
 8010d9e:	68ba      	ldr	r2, [r7, #8]
 8010da0:	4013      	ands	r3, r2
 8010da2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010da4:	68bb      	ldr	r3, [r7, #8]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3714      	adds	r7, #20
 8010daa:	46bd      	mov	sp, r7
 8010dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db0:	4770      	bx	lr

08010db2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010db2:	b480      	push	{r7}
 8010db4:	b087      	sub	sp, #28
 8010db6:	af00      	add	r7, sp, #0
 8010db8:	6078      	str	r0, [r7, #4]
 8010dba:	460b      	mov	r3, r1
 8010dbc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dc8:	691b      	ldr	r3, [r3, #16]
 8010dca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010dcc:	697b      	ldr	r3, [r7, #20]
 8010dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010dd4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010dd6:	78fb      	ldrb	r3, [r7, #3]
 8010dd8:	f003 030f 	and.w	r3, r3, #15
 8010ddc:	68fa      	ldr	r2, [r7, #12]
 8010dde:	fa22 f303 	lsr.w	r3, r2, r3
 8010de2:	01db      	lsls	r3, r3, #7
 8010de4:	b2db      	uxtb	r3, r3
 8010de6:	693a      	ldr	r2, [r7, #16]
 8010de8:	4313      	orrs	r3, r2
 8010dea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010dec:	78fb      	ldrb	r3, [r7, #3]
 8010dee:	015a      	lsls	r2, r3, #5
 8010df0:	697b      	ldr	r3, [r7, #20]
 8010df2:	4413      	add	r3, r2
 8010df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010df8:	689b      	ldr	r3, [r3, #8]
 8010dfa:	693a      	ldr	r2, [r7, #16]
 8010dfc:	4013      	ands	r3, r2
 8010dfe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010e00:	68bb      	ldr	r3, [r7, #8]
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	371c      	adds	r7, #28
 8010e06:	46bd      	mov	sp, r7
 8010e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010e0e:	b480      	push	{r7}
 8010e10:	b083      	sub	sp, #12
 8010e12:	af00      	add	r7, sp, #0
 8010e14:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	695b      	ldr	r3, [r3, #20]
 8010e1a:	f003 0301 	and.w	r3, r3, #1
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	370c      	adds	r7, #12
 8010e22:	46bd      	mov	sp, r7
 8010e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e28:	4770      	bx	lr
	...

08010e2c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	b085      	sub	sp, #20
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e3e:	681a      	ldr	r2, [r3, #0]
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010e46:	4619      	mov	r1, r3
 8010e48:	4b09      	ldr	r3, [pc, #36]	; (8010e70 <USB_ActivateSetup+0x44>)
 8010e4a:	4013      	ands	r3, r2
 8010e4c:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	68fa      	ldr	r2, [r7, #12]
 8010e58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010e60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010e62:	2300      	movs	r3, #0
}
 8010e64:	4618      	mov	r0, r3
 8010e66:	3714      	adds	r7, #20
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e6e:	4770      	bx	lr
 8010e70:	fffff800 	.word	0xfffff800

08010e74 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b087      	sub	sp, #28
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	60f8      	str	r0, [r7, #12]
 8010e7c:	460b      	mov	r3, r1
 8010e7e:	607a      	str	r2, [r7, #4]
 8010e80:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	333c      	adds	r3, #60	; 0x3c
 8010e8a:	3304      	adds	r3, #4
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010e90:	693b      	ldr	r3, [r7, #16]
 8010e92:	4a26      	ldr	r2, [pc, #152]	; (8010f2c <USB_EP0_OutStart+0xb8>)
 8010e94:	4293      	cmp	r3, r2
 8010e96:	d90a      	bls.n	8010eae <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e9e:	681b      	ldr	r3, [r3, #0]
 8010ea0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010ea4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010ea8:	d101      	bne.n	8010eae <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010eaa:	2300      	movs	r3, #0
 8010eac:	e037      	b.n	8010f1e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010eae:	697b      	ldr	r3, [r7, #20]
 8010eb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010eb4:	461a      	mov	r2, r3
 8010eb6:	2300      	movs	r3, #0
 8010eb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010eba:	697b      	ldr	r3, [r7, #20]
 8010ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ec0:	691b      	ldr	r3, [r3, #16]
 8010ec2:	697a      	ldr	r2, [r7, #20]
 8010ec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ec8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010ecc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010ece:	697b      	ldr	r3, [r7, #20]
 8010ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ed4:	691b      	ldr	r3, [r3, #16]
 8010ed6:	697a      	ldr	r2, [r7, #20]
 8010ed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010edc:	f043 0318 	orr.w	r3, r3, #24
 8010ee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010ee2:	697b      	ldr	r3, [r7, #20]
 8010ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ee8:	691b      	ldr	r3, [r3, #16]
 8010eea:	697a      	ldr	r2, [r7, #20]
 8010eec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010ef0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010ef4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010ef6:	7afb      	ldrb	r3, [r7, #11]
 8010ef8:	2b01      	cmp	r3, #1
 8010efa:	d10f      	bne.n	8010f1c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010efc:	697b      	ldr	r3, [r7, #20]
 8010efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f02:	461a      	mov	r2, r3
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010f08:	697b      	ldr	r3, [r7, #20]
 8010f0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	697a      	ldr	r2, [r7, #20]
 8010f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010f16:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010f1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010f1c:	2300      	movs	r3, #0
}
 8010f1e:	4618      	mov	r0, r3
 8010f20:	371c      	adds	r7, #28
 8010f22:	46bd      	mov	sp, r7
 8010f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f28:	4770      	bx	lr
 8010f2a:	bf00      	nop
 8010f2c:	4f54300a 	.word	0x4f54300a

08010f30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010f30:	b480      	push	{r7}
 8010f32:	b085      	sub	sp, #20
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010f38:	2300      	movs	r3, #0
 8010f3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	3301      	adds	r3, #1
 8010f40:	60fb      	str	r3, [r7, #12]
 8010f42:	68fb      	ldr	r3, [r7, #12]
 8010f44:	4a13      	ldr	r2, [pc, #76]	; (8010f94 <USB_CoreReset+0x64>)
 8010f46:	4293      	cmp	r3, r2
 8010f48:	d901      	bls.n	8010f4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010f4a:	2303      	movs	r3, #3
 8010f4c:	e01b      	b.n	8010f86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	691b      	ldr	r3, [r3, #16]
 8010f52:	2b00      	cmp	r3, #0
 8010f54:	daf2      	bge.n	8010f3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010f56:	2300      	movs	r3, #0
 8010f58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	691b      	ldr	r3, [r3, #16]
 8010f5e:	f043 0201 	orr.w	r2, r3, #1
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	3301      	adds	r3, #1
 8010f6a:	60fb      	str	r3, [r7, #12]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	4a09      	ldr	r2, [pc, #36]	; (8010f94 <USB_CoreReset+0x64>)
 8010f70:	4293      	cmp	r3, r2
 8010f72:	d901      	bls.n	8010f78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010f74:	2303      	movs	r3, #3
 8010f76:	e006      	b.n	8010f86 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	691b      	ldr	r3, [r3, #16]
 8010f7c:	f003 0301 	and.w	r3, r3, #1
 8010f80:	2b01      	cmp	r3, #1
 8010f82:	d0f0      	beq.n	8010f66 <USB_CoreReset+0x36>

  return HAL_OK;
 8010f84:	2300      	movs	r3, #0
}
 8010f86:	4618      	mov	r0, r3
 8010f88:	3714      	adds	r7, #20
 8010f8a:	46bd      	mov	sp, r7
 8010f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f90:	4770      	bx	lr
 8010f92:	bf00      	nop
 8010f94:	00030d40 	.word	0x00030d40

08010f98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010f9c:	4904      	ldr	r1, [pc, #16]	; (8010fb0 <MX_FATFS_Init+0x18>)
 8010f9e:	4805      	ldr	r0, [pc, #20]	; (8010fb4 <MX_FATFS_Init+0x1c>)
 8010fa0:	f004 fd7a 	bl	8015a98 <FATFS_LinkDriver>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	4b03      	ldr	r3, [pc, #12]	; (8010fb8 <MX_FATFS_Init+0x20>)
 8010faa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8010fac:	bf00      	nop
 8010fae:	bd80      	pop	{r7, pc}
 8010fb0:	2001c620 	.word	0x2001c620
 8010fb4:	0801d788 	.word	0x0801d788
 8010fb8:	2001c61c 	.word	0x2001c61c

08010fbc <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010fbc:	b480      	push	{r7}
 8010fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010fc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	46bd      	mov	sp, r7
 8010fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fca:	4770      	bx	lr

08010fcc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010fcc:	b580      	push	{r7, lr}
 8010fce:	b082      	sub	sp, #8
 8010fd0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010fd6:	f000 f896 	bl	8011106 <BSP_SD_IsDetected>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	2b01      	cmp	r3, #1
 8010fde:	d001      	beq.n	8010fe4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010fe0:	2302      	movs	r3, #2
 8010fe2:	e012      	b.n	801100a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010fe4:	480b      	ldr	r0, [pc, #44]	; (8011014 <BSP_SD_Init+0x48>)
 8010fe6:	f7fa f943 	bl	800b270 <HAL_SD_Init>
 8010fea:	4603      	mov	r3, r0
 8010fec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010fee:	79fb      	ldrb	r3, [r7, #7]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d109      	bne.n	8011008 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010ff4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010ff8:	4806      	ldr	r0, [pc, #24]	; (8011014 <BSP_SD_Init+0x48>)
 8010ffa:	f7fa fefb 	bl	800bdf4 <HAL_SD_ConfigWideBusOperation>
 8010ffe:	4603      	mov	r3, r0
 8011000:	2b00      	cmp	r3, #0
 8011002:	d001      	beq.n	8011008 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8011004:	2301      	movs	r3, #1
 8011006:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8011008:	79fb      	ldrb	r3, [r7, #7]
}
 801100a:	4618      	mov	r0, r3
 801100c:	3708      	adds	r7, #8
 801100e:	46bd      	mov	sp, r7
 8011010:	bd80      	pop	{r7, pc}
 8011012:	bf00      	nop
 8011014:	2000b92c 	.word	0x2000b92c

08011018 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b086      	sub	sp, #24
 801101c:	af00      	add	r7, sp, #0
 801101e:	60f8      	str	r0, [r7, #12]
 8011020:	60b9      	str	r1, [r7, #8]
 8011022:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011024:	2300      	movs	r3, #0
 8011026:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	68f9      	ldr	r1, [r7, #12]
 801102e:	4806      	ldr	r0, [pc, #24]	; (8011048 <BSP_SD_ReadBlocks_DMA+0x30>)
 8011030:	f7fa f9b6 	bl	800b3a0 <HAL_SD_ReadBlocks_DMA>
 8011034:	4603      	mov	r3, r0
 8011036:	2b00      	cmp	r3, #0
 8011038:	d001      	beq.n	801103e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801103a:	2301      	movs	r3, #1
 801103c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801103e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011040:	4618      	mov	r0, r3
 8011042:	3718      	adds	r7, #24
 8011044:	46bd      	mov	sp, r7
 8011046:	bd80      	pop	{r7, pc}
 8011048:	2000b92c 	.word	0x2000b92c

0801104c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 801104c:	b580      	push	{r7, lr}
 801104e:	b086      	sub	sp, #24
 8011050:	af00      	add	r7, sp, #0
 8011052:	60f8      	str	r0, [r7, #12]
 8011054:	60b9      	str	r1, [r7, #8]
 8011056:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8011058:	2300      	movs	r3, #0
 801105a:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 801105c:	687b      	ldr	r3, [r7, #4]
 801105e:	68ba      	ldr	r2, [r7, #8]
 8011060:	68f9      	ldr	r1, [r7, #12]
 8011062:	4806      	ldr	r0, [pc, #24]	; (801107c <BSP_SD_WriteBlocks_DMA+0x30>)
 8011064:	f7fa fa88 	bl	800b578 <HAL_SD_WriteBlocks_DMA>
 8011068:	4603      	mov	r3, r0
 801106a:	2b00      	cmp	r3, #0
 801106c:	d001      	beq.n	8011072 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801106e:	2301      	movs	r3, #1
 8011070:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8011072:	7dfb      	ldrb	r3, [r7, #23]
}
 8011074:	4618      	mov	r0, r3
 8011076:	3718      	adds	r7, #24
 8011078:	46bd      	mov	sp, r7
 801107a:	bd80      	pop	{r7, pc}
 801107c:	2000b92c 	.word	0x2000b92c

08011080 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011084:	4805      	ldr	r0, [pc, #20]	; (801109c <BSP_SD_GetCardState+0x1c>)
 8011086:	f7fa ff31 	bl	800beec <HAL_SD_GetCardState>
 801108a:	4603      	mov	r3, r0
 801108c:	2b04      	cmp	r3, #4
 801108e:	bf14      	ite	ne
 8011090:	2301      	movne	r3, #1
 8011092:	2300      	moveq	r3, #0
 8011094:	b2db      	uxtb	r3, r3
}
 8011096:	4618      	mov	r0, r3
 8011098:	bd80      	pop	{r7, pc}
 801109a:	bf00      	nop
 801109c:	2000b92c 	.word	0x2000b92c

080110a0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80110a0:	b580      	push	{r7, lr}
 80110a2:	b082      	sub	sp, #8
 80110a4:	af00      	add	r7, sp, #0
 80110a6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80110a8:	6879      	ldr	r1, [r7, #4]
 80110aa:	4803      	ldr	r0, [pc, #12]	; (80110b8 <BSP_SD_GetCardInfo+0x18>)
 80110ac:	f7fa fe76 	bl	800bd9c <HAL_SD_GetCardInfo>
}
 80110b0:	bf00      	nop
 80110b2:	3708      	adds	r7, #8
 80110b4:	46bd      	mov	sp, r7
 80110b6:	bd80      	pop	{r7, pc}
 80110b8:	2000b92c 	.word	0x2000b92c

080110bc <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80110bc:	b580      	push	{r7, lr}
 80110be:	b082      	sub	sp, #8
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80110c4:	f000 f818 	bl	80110f8 <BSP_SD_AbortCallback>
}
 80110c8:	bf00      	nop
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}

080110d0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80110d0:	b580      	push	{r7, lr}
 80110d2:	b082      	sub	sp, #8
 80110d4:	af00      	add	r7, sp, #0
 80110d6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80110d8:	f000 f9b4 	bl	8011444 <BSP_SD_WriteCpltCallback>
}
 80110dc:	bf00      	nop
 80110de:	3708      	adds	r7, #8
 80110e0:	46bd      	mov	sp, r7
 80110e2:	bd80      	pop	{r7, pc}

080110e4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80110ec:	f000 f9bc 	bl	8011468 <BSP_SD_ReadCpltCallback>
}
 80110f0:	bf00      	nop
 80110f2:	3708      	adds	r7, #8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}

080110f8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80110f8:	b480      	push	{r7}
 80110fa:	af00      	add	r7, sp, #0

}
 80110fc:	bf00      	nop
 80110fe:	46bd      	mov	sp, r7
 8011100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011104:	4770      	bx	lr

08011106 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8011106:	b580      	push	{r7, lr}
 8011108:	b082      	sub	sp, #8
 801110a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 801110c:	2301      	movs	r3, #1
 801110e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8011110:	f000 f80c 	bl	801112c <BSP_PlatformIsDetected>
 8011114:	4603      	mov	r3, r0
 8011116:	2b00      	cmp	r3, #0
 8011118:	d101      	bne.n	801111e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 801111a:	2300      	movs	r3, #0
 801111c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 801111e:	79fb      	ldrb	r3, [r7, #7]
 8011120:	b2db      	uxtb	r3, r3
}
 8011122:	4618      	mov	r0, r3
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}
	...

0801112c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8011132:	2301      	movs	r3, #1
 8011134:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8011136:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801113a:	4806      	ldr	r0, [pc, #24]	; (8011154 <BSP_PlatformIsDetected+0x28>)
 801113c:	f7f7 fe0a 	bl	8008d54 <HAL_GPIO_ReadPin>
 8011140:	4603      	mov	r3, r0
 8011142:	2b00      	cmp	r3, #0
 8011144:	d001      	beq.n	801114a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8011146:	2300      	movs	r3, #0
 8011148:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 801114a:	79fb      	ldrb	r3, [r7, #7]
}  
 801114c:	4618      	mov	r0, r3
 801114e:	3708      	adds	r7, #8
 8011150:	46bd      	mov	sp, r7
 8011152:	bd80      	pop	{r7, pc}
 8011154:	40020800 	.word	0x40020800

08011158 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b084      	sub	sp, #16
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8011160:	f004 fd84 	bl	8015c6c <osKernelGetTickCount>
 8011164:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8011166:	e006      	b.n	8011176 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011168:	f7ff ff8a 	bl	8011080 <BSP_SD_GetCardState>
 801116c:	4603      	mov	r3, r0
 801116e:	2b00      	cmp	r3, #0
 8011170:	d101      	bne.n	8011176 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8011172:	2300      	movs	r3, #0
 8011174:	e009      	b.n	801118a <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8011176:	f004 fd79 	bl	8015c6c <osKernelGetTickCount>
 801117a:	4602      	mov	r2, r0
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	1ad3      	subs	r3, r2, r3
 8011180:	687a      	ldr	r2, [r7, #4]
 8011182:	429a      	cmp	r2, r3
 8011184:	d8f0      	bhi.n	8011168 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8011186:	f04f 33ff 	mov.w	r3, #4294967295
}
 801118a:	4618      	mov	r0, r3
 801118c:	3710      	adds	r7, #16
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
	...

08011194 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	b082      	sub	sp, #8
 8011198:	af00      	add	r7, sp, #0
 801119a:	4603      	mov	r3, r0
 801119c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801119e:	4b0b      	ldr	r3, [pc, #44]	; (80111cc <SD_CheckStatus+0x38>)
 80111a0:	2201      	movs	r2, #1
 80111a2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80111a4:	f7ff ff6c 	bl	8011080 <BSP_SD_GetCardState>
 80111a8:	4603      	mov	r3, r0
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d107      	bne.n	80111be <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80111ae:	4b07      	ldr	r3, [pc, #28]	; (80111cc <SD_CheckStatus+0x38>)
 80111b0:	781b      	ldrb	r3, [r3, #0]
 80111b2:	b2db      	uxtb	r3, r3
 80111b4:	f023 0301 	bic.w	r3, r3, #1
 80111b8:	b2da      	uxtb	r2, r3
 80111ba:	4b04      	ldr	r3, [pc, #16]	; (80111cc <SD_CheckStatus+0x38>)
 80111bc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80111be:	4b03      	ldr	r3, [pc, #12]	; (80111cc <SD_CheckStatus+0x38>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	b2db      	uxtb	r3, r3
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3708      	adds	r7, #8
 80111c8:	46bd      	mov	sp, r7
 80111ca:	bd80      	pop	{r7, pc}
 80111cc:	20000009 	.word	0x20000009

080111d0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80111d0:	b580      	push	{r7, lr}
 80111d2:	b082      	sub	sp, #8
 80111d4:	af00      	add	r7, sp, #0
 80111d6:	4603      	mov	r3, r0
 80111d8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80111da:	4b1c      	ldr	r3, [pc, #112]	; (801124c <SD_initialize+0x7c>)
 80111dc:	2201      	movs	r2, #1
 80111de:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 80111e0:	f004 fcec 	bl	8015bbc <osKernelGetState>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b02      	cmp	r3, #2
 80111e8:	d129      	bne.n	801123e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80111ea:	f7ff feef 	bl	8010fcc <BSP_SD_Init>
 80111ee:	4603      	mov	r3, r0
 80111f0:	2b00      	cmp	r3, #0
 80111f2:	d107      	bne.n	8011204 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80111f4:	79fb      	ldrb	r3, [r7, #7]
 80111f6:	4618      	mov	r0, r3
 80111f8:	f7ff ffcc 	bl	8011194 <SD_CheckStatus>
 80111fc:	4603      	mov	r3, r0
 80111fe:	461a      	mov	r2, r3
 8011200:	4b12      	ldr	r3, [pc, #72]	; (801124c <SD_initialize+0x7c>)
 8011202:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011204:	4b11      	ldr	r3, [pc, #68]	; (801124c <SD_initialize+0x7c>)
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	b2db      	uxtb	r3, r3
 801120a:	2b01      	cmp	r3, #1
 801120c:	d017      	beq.n	801123e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801120e:	4b10      	ldr	r3, [pc, #64]	; (8011250 <SD_initialize+0x80>)
 8011210:	681b      	ldr	r3, [r3, #0]
 8011212:	2b00      	cmp	r3, #0
 8011214:	d107      	bne.n	8011226 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8011216:	2200      	movs	r2, #0
 8011218:	2102      	movs	r1, #2
 801121a:	200a      	movs	r0, #10
 801121c:	f005 f946 	bl	80164ac <osMessageQueueNew>
 8011220:	4602      	mov	r2, r0
 8011222:	4b0b      	ldr	r3, [pc, #44]	; (8011250 <SD_initialize+0x80>)
 8011224:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8011226:	4b0a      	ldr	r3, [pc, #40]	; (8011250 <SD_initialize+0x80>)
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	2b00      	cmp	r3, #0
 801122c:	d107      	bne.n	801123e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801122e:	4b07      	ldr	r3, [pc, #28]	; (801124c <SD_initialize+0x7c>)
 8011230:	781b      	ldrb	r3, [r3, #0]
 8011232:	b2db      	uxtb	r3, r3
 8011234:	f043 0301 	orr.w	r3, r3, #1
 8011238:	b2da      	uxtb	r2, r3
 801123a:	4b04      	ldr	r3, [pc, #16]	; (801124c <SD_initialize+0x7c>)
 801123c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 801123e:	4b03      	ldr	r3, [pc, #12]	; (801124c <SD_initialize+0x7c>)
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	b2db      	uxtb	r3, r3
}
 8011244:	4618      	mov	r0, r3
 8011246:	3708      	adds	r7, #8
 8011248:	46bd      	mov	sp, r7
 801124a:	bd80      	pop	{r7, pc}
 801124c:	20000009 	.word	0x20000009
 8011250:	20000338 	.word	0x20000338

08011254 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	4603      	mov	r3, r0
 801125c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 801125e:	79fb      	ldrb	r3, [r7, #7]
 8011260:	4618      	mov	r0, r3
 8011262:	f7ff ff97 	bl	8011194 <SD_CheckStatus>
 8011266:	4603      	mov	r3, r0
}
 8011268:	4618      	mov	r0, r3
 801126a:	3708      	adds	r7, #8
 801126c:	46bd      	mov	sp, r7
 801126e:	bd80      	pop	{r7, pc}

08011270 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011270:	b580      	push	{r7, lr}
 8011272:	b088      	sub	sp, #32
 8011274:	af00      	add	r7, sp, #0
 8011276:	60b9      	str	r1, [r7, #8]
 8011278:	607a      	str	r2, [r7, #4]
 801127a:	603b      	str	r3, [r7, #0]
 801127c:	4603      	mov	r3, r0
 801127e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011280:	2301      	movs	r3, #1
 8011282:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011284:	f247 5030 	movw	r0, #30000	; 0x7530
 8011288:	f7ff ff66 	bl	8011158 <SD_CheckStatusWithTimeout>
 801128c:	4603      	mov	r3, r0
 801128e:	2b00      	cmp	r3, #0
 8011290:	da01      	bge.n	8011296 <SD_read+0x26>
  {
    return res;
 8011292:	7ffb      	ldrb	r3, [r7, #31]
 8011294:	e02f      	b.n	80112f6 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011296:	683a      	ldr	r2, [r7, #0]
 8011298:	6879      	ldr	r1, [r7, #4]
 801129a:	68b8      	ldr	r0, [r7, #8]
 801129c:	f7ff febc 	bl	8011018 <BSP_SD_ReadBlocks_DMA>
 80112a0:	4603      	mov	r3, r0
 80112a2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 80112a4:	7fbb      	ldrb	r3, [r7, #30]
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d124      	bne.n	80112f4 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80112aa:	4b15      	ldr	r3, [pc, #84]	; (8011300 <SD_read+0x90>)
 80112ac:	6818      	ldr	r0, [r3, #0]
 80112ae:	f107 0112 	add.w	r1, r7, #18
 80112b2:	f247 5330 	movw	r3, #30000	; 0x7530
 80112b6:	2200      	movs	r2, #0
 80112b8:	f005 f9f2 	bl	80166a0 <osMessageQueueGet>
 80112bc:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 80112be:	69bb      	ldr	r3, [r7, #24]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d117      	bne.n	80112f4 <SD_read+0x84>
 80112c4:	8a7b      	ldrh	r3, [r7, #18]
 80112c6:	2b01      	cmp	r3, #1
 80112c8:	d114      	bne.n	80112f4 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 80112ca:	f004 fccf 	bl	8015c6c <osKernelGetTickCount>
 80112ce:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80112d0:	e007      	b.n	80112e2 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80112d2:	f7ff fed5 	bl	8011080 <BSP_SD_GetCardState>
 80112d6:	4603      	mov	r3, r0
 80112d8:	2b00      	cmp	r3, #0
 80112da:	d102      	bne.n	80112e2 <SD_read+0x72>
              {
                res = RES_OK;
 80112dc:	2300      	movs	r3, #0
 80112de:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 80112e0:	e008      	b.n	80112f4 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 80112e2:	f004 fcc3 	bl	8015c6c <osKernelGetTickCount>
 80112e6:	4602      	mov	r2, r0
 80112e8:	697b      	ldr	r3, [r7, #20]
 80112ea:	1ad3      	subs	r3, r2, r3
 80112ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80112f0:	4293      	cmp	r3, r2
 80112f2:	d9ee      	bls.n	80112d2 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 80112f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80112f6:	4618      	mov	r0, r3
 80112f8:	3720      	adds	r7, #32
 80112fa:	46bd      	mov	sp, r7
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	20000338 	.word	0x20000338

08011304 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011304:	b580      	push	{r7, lr}
 8011306:	b088      	sub	sp, #32
 8011308:	af00      	add	r7, sp, #0
 801130a:	60b9      	str	r1, [r7, #8]
 801130c:	607a      	str	r2, [r7, #4]
 801130e:	603b      	str	r3, [r7, #0]
 8011310:	4603      	mov	r3, r0
 8011312:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011314:	2301      	movs	r3, #1
 8011316:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011318:	f247 5030 	movw	r0, #30000	; 0x7530
 801131c:	f7ff ff1c 	bl	8011158 <SD_CheckStatusWithTimeout>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	da01      	bge.n	801132a <SD_write+0x26>
  {
    return res;
 8011326:	7ffb      	ldrb	r3, [r7, #31]
 8011328:	e02d      	b.n	8011386 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801132a:	683a      	ldr	r2, [r7, #0]
 801132c:	6879      	ldr	r1, [r7, #4]
 801132e:	68b8      	ldr	r0, [r7, #8]
 8011330:	f7ff fe8c 	bl	801104c <BSP_SD_WriteBlocks_DMA>
 8011334:	4603      	mov	r3, r0
 8011336:	2b00      	cmp	r3, #0
 8011338:	d124      	bne.n	8011384 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801133a:	4b15      	ldr	r3, [pc, #84]	; (8011390 <SD_write+0x8c>)
 801133c:	6818      	ldr	r0, [r3, #0]
 801133e:	f107 0112 	add.w	r1, r7, #18
 8011342:	f247 5330 	movw	r3, #30000	; 0x7530
 8011346:	2200      	movs	r2, #0
 8011348:	f005 f9aa 	bl	80166a0 <osMessageQueueGet>
 801134c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 801134e:	69bb      	ldr	r3, [r7, #24]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d117      	bne.n	8011384 <SD_write+0x80>
 8011354:	8a7b      	ldrh	r3, [r7, #18]
 8011356:	2b02      	cmp	r3, #2
 8011358:	d114      	bne.n	8011384 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 801135a:	f004 fc87 	bl	8015c6c <osKernelGetTickCount>
 801135e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8011360:	e007      	b.n	8011372 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011362:	f7ff fe8d 	bl	8011080 <BSP_SD_GetCardState>
 8011366:	4603      	mov	r3, r0
 8011368:	2b00      	cmp	r3, #0
 801136a:	d102      	bne.n	8011372 <SD_write+0x6e>
          {
            res = RES_OK;
 801136c:	2300      	movs	r3, #0
 801136e:	77fb      	strb	r3, [r7, #31]
            break;
 8011370:	e008      	b.n	8011384 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8011372:	f004 fc7b 	bl	8015c6c <osKernelGetTickCount>
 8011376:	4602      	mov	r2, r0
 8011378:	697b      	ldr	r3, [r7, #20]
 801137a:	1ad3      	subs	r3, r2, r3
 801137c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011380:	4293      	cmp	r3, r2
 8011382:	d9ee      	bls.n	8011362 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8011384:	7ffb      	ldrb	r3, [r7, #31]
}
 8011386:	4618      	mov	r0, r3
 8011388:	3720      	adds	r7, #32
 801138a:	46bd      	mov	sp, r7
 801138c:	bd80      	pop	{r7, pc}
 801138e:	bf00      	nop
 8011390:	20000338 	.word	0x20000338

08011394 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011394:	b580      	push	{r7, lr}
 8011396:	b08c      	sub	sp, #48	; 0x30
 8011398:	af00      	add	r7, sp, #0
 801139a:	4603      	mov	r3, r0
 801139c:	603a      	str	r2, [r7, #0]
 801139e:	71fb      	strb	r3, [r7, #7]
 80113a0:	460b      	mov	r3, r1
 80113a2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80113a4:	2301      	movs	r3, #1
 80113a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80113aa:	4b25      	ldr	r3, [pc, #148]	; (8011440 <SD_ioctl+0xac>)
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	f003 0301 	and.w	r3, r3, #1
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d001      	beq.n	80113bc <SD_ioctl+0x28>
 80113b8:	2303      	movs	r3, #3
 80113ba:	e03c      	b.n	8011436 <SD_ioctl+0xa2>

  switch (cmd)
 80113bc:	79bb      	ldrb	r3, [r7, #6]
 80113be:	2b03      	cmp	r3, #3
 80113c0:	d834      	bhi.n	801142c <SD_ioctl+0x98>
 80113c2:	a201      	add	r2, pc, #4	; (adr r2, 80113c8 <SD_ioctl+0x34>)
 80113c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c8:	080113d9 	.word	0x080113d9
 80113cc:	080113e1 	.word	0x080113e1
 80113d0:	080113f9 	.word	0x080113f9
 80113d4:	08011413 	.word	0x08011413
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80113d8:	2300      	movs	r3, #0
 80113da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113de:	e028      	b.n	8011432 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80113e0:	f107 030c 	add.w	r3, r7, #12
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7ff fe5b 	bl	80110a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80113ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80113ec:	683b      	ldr	r3, [r7, #0]
 80113ee:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80113f0:	2300      	movs	r3, #0
 80113f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80113f6:	e01c      	b.n	8011432 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80113f8:	f107 030c 	add.w	r3, r7, #12
 80113fc:	4618      	mov	r0, r3
 80113fe:	f7ff fe4f 	bl	80110a0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011404:	b29a      	uxth	r2, r3
 8011406:	683b      	ldr	r3, [r7, #0]
 8011408:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801140a:	2300      	movs	r3, #0
 801140c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011410:	e00f      	b.n	8011432 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011412:	f107 030c 	add.w	r3, r7, #12
 8011416:	4618      	mov	r0, r3
 8011418:	f7ff fe42 	bl	80110a0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801141e:	0a5a      	lsrs	r2, r3, #9
 8011420:	683b      	ldr	r3, [r7, #0]
 8011422:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011424:	2300      	movs	r3, #0
 8011426:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801142a:	e002      	b.n	8011432 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801142c:	2304      	movs	r3, #4
 801142e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8011432:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011436:	4618      	mov	r0, r3
 8011438:	3730      	adds	r7, #48	; 0x30
 801143a:	46bd      	mov	sp, r7
 801143c:	bd80      	pop	{r7, pc}
 801143e:	bf00      	nop
 8011440:	20000009 	.word	0x20000009

08011444 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8011444:	b580      	push	{r7, lr}
 8011446:	b082      	sub	sp, #8
 8011448:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 801144a:	2302      	movs	r3, #2
 801144c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 801144e:	4b05      	ldr	r3, [pc, #20]	; (8011464 <BSP_SD_WriteCpltCallback+0x20>)
 8011450:	6818      	ldr	r0, [r3, #0]
 8011452:	1db9      	adds	r1, r7, #6
 8011454:	2300      	movs	r3, #0
 8011456:	2200      	movs	r2, #0
 8011458:	f005 f8ae 	bl	80165b8 <osMessageQueuePut>
#endif
}
 801145c:	bf00      	nop
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}
 8011464:	20000338 	.word	0x20000338

08011468 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 801146e:	2301      	movs	r3, #1
 8011470:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 8011472:	4b05      	ldr	r3, [pc, #20]	; (8011488 <BSP_SD_ReadCpltCallback+0x20>)
 8011474:	6818      	ldr	r0, [r3, #0]
 8011476:	1db9      	adds	r1, r7, #6
 8011478:	2300      	movs	r3, #0
 801147a:	2200      	movs	r2, #0
 801147c:	f005 f89c 	bl	80165b8 <osMessageQueuePut>
#endif
}
 8011480:	bf00      	nop
 8011482:	3708      	adds	r7, #8
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}
 8011488:	20000338 	.word	0x20000338

0801148c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b084      	sub	sp, #16
 8011490:	af00      	add	r7, sp, #0
 8011492:	6078      	str	r0, [r7, #4]
 8011494:	460b      	mov	r3, r1
 8011496:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011498:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801149c:	f009 f8ba 	bl	801a614 <malloc>
 80114a0:	4603      	mov	r3, r0
 80114a2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80114a4:	68fb      	ldr	r3, [r7, #12]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d105      	bne.n	80114b6 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	2200      	movs	r2, #0
 80114ae:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80114b2:	2302      	movs	r3, #2
 80114b4:	e066      	b.n	8011584 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	68fa      	ldr	r2, [r7, #12]
 80114ba:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80114be:	687b      	ldr	r3, [r7, #4]
 80114c0:	7c1b      	ldrb	r3, [r3, #16]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	d119      	bne.n	80114fa <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80114c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114ca:	2202      	movs	r2, #2
 80114cc:	2181      	movs	r1, #129	; 0x81
 80114ce:	6878      	ldr	r0, [r7, #4]
 80114d0:	f008 fed3 	bl	801a27a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2201      	movs	r2, #1
 80114d8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80114da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80114de:	2202      	movs	r2, #2
 80114e0:	2101      	movs	r1, #1
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f008 fec9 	bl	801a27a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	2201      	movs	r2, #1
 80114ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	2210      	movs	r2, #16
 80114f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80114f8:	e016      	b.n	8011528 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80114fa:	2340      	movs	r3, #64	; 0x40
 80114fc:	2202      	movs	r2, #2
 80114fe:	2181      	movs	r1, #129	; 0x81
 8011500:	6878      	ldr	r0, [r7, #4]
 8011502:	f008 feba 	bl	801a27a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	2201      	movs	r2, #1
 801150a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801150c:	2340      	movs	r3, #64	; 0x40
 801150e:	2202      	movs	r2, #2
 8011510:	2101      	movs	r1, #1
 8011512:	6878      	ldr	r0, [r7, #4]
 8011514:	f008 feb1 	bl	801a27a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2201      	movs	r2, #1
 801151c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	2210      	movs	r2, #16
 8011524:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011528:	2308      	movs	r3, #8
 801152a:	2203      	movs	r2, #3
 801152c:	2182      	movs	r1, #130	; 0x82
 801152e:	6878      	ldr	r0, [r7, #4]
 8011530:	f008 fea3 	bl	801a27a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2201      	movs	r2, #1
 8011538:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	2200      	movs	r2, #0
 801154a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	2200      	movs	r2, #0
 8011552:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	7c1b      	ldrb	r3, [r3, #16]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d109      	bne.n	8011572 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011564:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011568:	2101      	movs	r1, #1
 801156a:	6878      	ldr	r0, [r7, #4]
 801156c:	f008 ff74 	bl	801a458 <USBD_LL_PrepareReceive>
 8011570:	e007      	b.n	8011582 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011578:	2340      	movs	r3, #64	; 0x40
 801157a:	2101      	movs	r1, #1
 801157c:	6878      	ldr	r0, [r7, #4]
 801157e:	f008 ff6b 	bl	801a458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011582:	2300      	movs	r3, #0
}
 8011584:	4618      	mov	r0, r3
 8011586:	3710      	adds	r7, #16
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b084      	sub	sp, #16
 8011590:	af00      	add	r7, sp, #0
 8011592:	6078      	str	r0, [r7, #4]
 8011594:	460b      	mov	r3, r1
 8011596:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011598:	2300      	movs	r3, #0
 801159a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801159c:	2181      	movs	r1, #129	; 0x81
 801159e:	6878      	ldr	r0, [r7, #4]
 80115a0:	f008 fe91 	bl	801a2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	2200      	movs	r2, #0
 80115a8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80115aa:	2101      	movs	r1, #1
 80115ac:	6878      	ldr	r0, [r7, #4]
 80115ae:	f008 fe8a 	bl	801a2c6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	2200      	movs	r2, #0
 80115b6:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80115ba:	2182      	movs	r1, #130	; 0x82
 80115bc:	6878      	ldr	r0, [r7, #4]
 80115be:	f008 fe82 	bl	801a2c6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	2200      	movs	r2, #0
 80115c6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2200      	movs	r2, #0
 80115ce:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115d8:	2b00      	cmp	r3, #0
 80115da:	d00e      	beq.n	80115fa <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80115ec:	4618      	mov	r0, r3
 80115ee:	f009 f819 	bl	801a624 <free>
    pdev->pClassData = NULL;
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	2200      	movs	r2, #0
 80115f6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80115fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80115fc:	4618      	mov	r0, r3
 80115fe:	3710      	adds	r7, #16
 8011600:	46bd      	mov	sp, r7
 8011602:	bd80      	pop	{r7, pc}

08011604 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b086      	sub	sp, #24
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011614:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011616:	2300      	movs	r3, #0
 8011618:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801161a:	2300      	movs	r3, #0
 801161c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801161e:	2300      	movs	r3, #0
 8011620:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011622:	683b      	ldr	r3, [r7, #0]
 8011624:	781b      	ldrb	r3, [r3, #0]
 8011626:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801162a:	2b00      	cmp	r3, #0
 801162c:	d03a      	beq.n	80116a4 <USBD_CDC_Setup+0xa0>
 801162e:	2b20      	cmp	r3, #32
 8011630:	f040 8097 	bne.w	8011762 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8011634:	683b      	ldr	r3, [r7, #0]
 8011636:	88db      	ldrh	r3, [r3, #6]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d029      	beq.n	8011690 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 801163c:	683b      	ldr	r3, [r7, #0]
 801163e:	781b      	ldrb	r3, [r3, #0]
 8011640:	b25b      	sxtb	r3, r3
 8011642:	2b00      	cmp	r3, #0
 8011644:	da11      	bge.n	801166a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801164c:	689b      	ldr	r3, [r3, #8]
 801164e:	683a      	ldr	r2, [r7, #0]
 8011650:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8011652:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011654:	683a      	ldr	r2, [r7, #0]
 8011656:	88d2      	ldrh	r2, [r2, #6]
 8011658:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 801165a:	6939      	ldr	r1, [r7, #16]
 801165c:	683b      	ldr	r3, [r7, #0]
 801165e:	88db      	ldrh	r3, [r3, #6]
 8011660:	461a      	mov	r2, r3
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f001 fa97 	bl	8012b96 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8011668:	e082      	b.n	8011770 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	785a      	ldrb	r2, [r3, #1]
 801166e:	693b      	ldr	r3, [r7, #16]
 8011670:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	88db      	ldrh	r3, [r3, #6]
 8011678:	b2da      	uxtb	r2, r3
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8011680:	6939      	ldr	r1, [r7, #16]
 8011682:	683b      	ldr	r3, [r7, #0]
 8011684:	88db      	ldrh	r3, [r3, #6]
 8011686:	461a      	mov	r2, r3
 8011688:	6878      	ldr	r0, [r7, #4]
 801168a:	f001 fab0 	bl	8012bee <USBD_CtlPrepareRx>
    break;
 801168e:	e06f      	b.n	8011770 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011696:	689b      	ldr	r3, [r3, #8]
 8011698:	683a      	ldr	r2, [r7, #0]
 801169a:	7850      	ldrb	r0, [r2, #1]
 801169c:	2200      	movs	r2, #0
 801169e:	6839      	ldr	r1, [r7, #0]
 80116a0:	4798      	blx	r3
    break;
 80116a2:	e065      	b.n	8011770 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80116a4:	683b      	ldr	r3, [r7, #0]
 80116a6:	785b      	ldrb	r3, [r3, #1]
 80116a8:	2b0b      	cmp	r3, #11
 80116aa:	d84f      	bhi.n	801174c <USBD_CDC_Setup+0x148>
 80116ac:	a201      	add	r2, pc, #4	; (adr r2, 80116b4 <USBD_CDC_Setup+0xb0>)
 80116ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116b2:	bf00      	nop
 80116b4:	080116e5 	.word	0x080116e5
 80116b8:	0801175b 	.word	0x0801175b
 80116bc:	0801174d 	.word	0x0801174d
 80116c0:	0801174d 	.word	0x0801174d
 80116c4:	0801174d 	.word	0x0801174d
 80116c8:	0801174d 	.word	0x0801174d
 80116cc:	0801174d 	.word	0x0801174d
 80116d0:	0801174d 	.word	0x0801174d
 80116d4:	0801174d 	.word	0x0801174d
 80116d8:	0801174d 	.word	0x0801174d
 80116dc:	0801170d 	.word	0x0801170d
 80116e0:	08011735 	.word	0x08011735
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80116e4:	687b      	ldr	r3, [r7, #4]
 80116e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80116ea:	2b03      	cmp	r3, #3
 80116ec:	d107      	bne.n	80116fe <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80116ee:	f107 030c 	add.w	r3, r7, #12
 80116f2:	2202      	movs	r2, #2
 80116f4:	4619      	mov	r1, r3
 80116f6:	6878      	ldr	r0, [r7, #4]
 80116f8:	f001 fa4d 	bl	8012b96 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80116fc:	e030      	b.n	8011760 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80116fe:	6839      	ldr	r1, [r7, #0]
 8011700:	6878      	ldr	r0, [r7, #4]
 8011702:	f001 f9d7 	bl	8012ab4 <USBD_CtlError>
        ret = USBD_FAIL;
 8011706:	2303      	movs	r3, #3
 8011708:	75fb      	strb	r3, [r7, #23]
      break;
 801170a:	e029      	b.n	8011760 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011712:	2b03      	cmp	r3, #3
 8011714:	d107      	bne.n	8011726 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011716:	f107 030f 	add.w	r3, r7, #15
 801171a:	2201      	movs	r2, #1
 801171c:	4619      	mov	r1, r3
 801171e:	6878      	ldr	r0, [r7, #4]
 8011720:	f001 fa39 	bl	8012b96 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011724:	e01c      	b.n	8011760 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011726:	6839      	ldr	r1, [r7, #0]
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f001 f9c3 	bl	8012ab4 <USBD_CtlError>
        ret = USBD_FAIL;
 801172e:	2303      	movs	r3, #3
 8011730:	75fb      	strb	r3, [r7, #23]
      break;
 8011732:	e015      	b.n	8011760 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801173a:	2b03      	cmp	r3, #3
 801173c:	d00f      	beq.n	801175e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 801173e:	6839      	ldr	r1, [r7, #0]
 8011740:	6878      	ldr	r0, [r7, #4]
 8011742:	f001 f9b7 	bl	8012ab4 <USBD_CtlError>
        ret = USBD_FAIL;
 8011746:	2303      	movs	r3, #3
 8011748:	75fb      	strb	r3, [r7, #23]
      }
      break;
 801174a:	e008      	b.n	801175e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 801174c:	6839      	ldr	r1, [r7, #0]
 801174e:	6878      	ldr	r0, [r7, #4]
 8011750:	f001 f9b0 	bl	8012ab4 <USBD_CtlError>
      ret = USBD_FAIL;
 8011754:	2303      	movs	r3, #3
 8011756:	75fb      	strb	r3, [r7, #23]
      break;
 8011758:	e002      	b.n	8011760 <USBD_CDC_Setup+0x15c>
      break;
 801175a:	bf00      	nop
 801175c:	e008      	b.n	8011770 <USBD_CDC_Setup+0x16c>
      break;
 801175e:	bf00      	nop
    }
    break;
 8011760:	e006      	b.n	8011770 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8011762:	6839      	ldr	r1, [r7, #0]
 8011764:	6878      	ldr	r0, [r7, #4]
 8011766:	f001 f9a5 	bl	8012ab4 <USBD_CtlError>
    ret = USBD_FAIL;
 801176a:	2303      	movs	r3, #3
 801176c:	75fb      	strb	r3, [r7, #23]
    break;
 801176e:	bf00      	nop
  }

  return (uint8_t)ret;
 8011770:	7dfb      	ldrb	r3, [r7, #23]
}
 8011772:	4618      	mov	r0, r3
 8011774:	3718      	adds	r7, #24
 8011776:	46bd      	mov	sp, r7
 8011778:	bd80      	pop	{r7, pc}
 801177a:	bf00      	nop

0801177c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
 8011784:	460b      	mov	r3, r1
 8011786:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8011788:	687b      	ldr	r3, [r7, #4]
 801178a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801178e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011796:	2b00      	cmp	r3, #0
 8011798:	d101      	bne.n	801179e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801179a:	2303      	movs	r3, #3
 801179c:	e049      	b.n	8011832 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80117a4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80117a6:	78fa      	ldrb	r2, [r7, #3]
 80117a8:	6879      	ldr	r1, [r7, #4]
 80117aa:	4613      	mov	r3, r2
 80117ac:	009b      	lsls	r3, r3, #2
 80117ae:	4413      	add	r3, r2
 80117b0:	009b      	lsls	r3, r3, #2
 80117b2:	440b      	add	r3, r1
 80117b4:	3318      	adds	r3, #24
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d029      	beq.n	8011810 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80117bc:	78fa      	ldrb	r2, [r7, #3]
 80117be:	6879      	ldr	r1, [r7, #4]
 80117c0:	4613      	mov	r3, r2
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	4413      	add	r3, r2
 80117c6:	009b      	lsls	r3, r3, #2
 80117c8:	440b      	add	r3, r1
 80117ca:	3318      	adds	r3, #24
 80117cc:	681a      	ldr	r2, [r3, #0]
 80117ce:	78f9      	ldrb	r1, [r7, #3]
 80117d0:	68f8      	ldr	r0, [r7, #12]
 80117d2:	460b      	mov	r3, r1
 80117d4:	00db      	lsls	r3, r3, #3
 80117d6:	1a5b      	subs	r3, r3, r1
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4403      	add	r3, r0
 80117dc:	3344      	adds	r3, #68	; 0x44
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80117e4:	fb03 f301 	mul.w	r3, r3, r1
 80117e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d110      	bne.n	8011810 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80117ee:	78fa      	ldrb	r2, [r7, #3]
 80117f0:	6879      	ldr	r1, [r7, #4]
 80117f2:	4613      	mov	r3, r2
 80117f4:	009b      	lsls	r3, r3, #2
 80117f6:	4413      	add	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	440b      	add	r3, r1
 80117fc:	3318      	adds	r3, #24
 80117fe:	2200      	movs	r2, #0
 8011800:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011802:	78f9      	ldrb	r1, [r7, #3]
 8011804:	2300      	movs	r3, #0
 8011806:	2200      	movs	r2, #0
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f008 fe04 	bl	801a416 <USBD_LL_Transmit>
 801180e:	e00f      	b.n	8011830 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011810:	68bb      	ldr	r3, [r7, #8]
 8011812:	2200      	movs	r2, #0
 8011814:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801181e:	691b      	ldr	r3, [r3, #16]
 8011820:	68ba      	ldr	r2, [r7, #8]
 8011822:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011826:	68ba      	ldr	r2, [r7, #8]
 8011828:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801182c:	78fa      	ldrb	r2, [r7, #3]
 801182e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8011830:	2300      	movs	r3, #0
}
 8011832:	4618      	mov	r0, r3
 8011834:	3710      	adds	r7, #16
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}

0801183a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801183a:	b580      	push	{r7, lr}
 801183c:	b084      	sub	sp, #16
 801183e:	af00      	add	r7, sp, #0
 8011840:	6078      	str	r0, [r7, #4]
 8011842:	460b      	mov	r3, r1
 8011844:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801184c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011854:	2b00      	cmp	r3, #0
 8011856:	d101      	bne.n	801185c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011858:	2303      	movs	r3, #3
 801185a:	e015      	b.n	8011888 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 801185c:	78fb      	ldrb	r3, [r7, #3]
 801185e:	4619      	mov	r1, r3
 8011860:	6878      	ldr	r0, [r7, #4]
 8011862:	f008 fe1a 	bl	801a49a <USBD_LL_GetRxDataSize>
 8011866:	4602      	mov	r2, r0
 8011868:	68fb      	ldr	r3, [r7, #12]
 801186a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011874:	68db      	ldr	r3, [r3, #12]
 8011876:	68fa      	ldr	r2, [r7, #12]
 8011878:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 801187c:	68fa      	ldr	r2, [r7, #12]
 801187e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8011882:	4611      	mov	r1, r2
 8011884:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8011886:	2300      	movs	r3, #0
}
 8011888:	4618      	mov	r0, r3
 801188a:	3710      	adds	r7, #16
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}

08011890 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011890:	b580      	push	{r7, lr}
 8011892:	b084      	sub	sp, #16
 8011894:	af00      	add	r7, sp, #0
 8011896:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801189e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d015      	beq.n	80118d6 <USBD_CDC_EP0_RxReady+0x46>
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80118b0:	2bff      	cmp	r3, #255	; 0xff
 80118b2:	d010      	beq.n	80118d6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80118ba:	689b      	ldr	r3, [r3, #8]
 80118bc:	68fa      	ldr	r2, [r7, #12]
 80118be:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80118c2:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80118c4:	68fa      	ldr	r2, [r7, #12]
 80118c6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80118ca:	b292      	uxth	r2, r2
 80118cc:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	22ff      	movs	r2, #255	; 0xff
 80118d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80118d6:	2300      	movs	r3, #0
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3710      	adds	r7, #16
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80118e0:	b480      	push	{r7}
 80118e2:	b083      	sub	sp, #12
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2243      	movs	r2, #67	; 0x43
 80118ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80118ee:	4b03      	ldr	r3, [pc, #12]	; (80118fc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80118f0:	4618      	mov	r0, r3
 80118f2:	370c      	adds	r7, #12
 80118f4:	46bd      	mov	sp, r7
 80118f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118fa:	4770      	bx	lr
 80118fc:	20000094 	.word	0x20000094

08011900 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011900:	b480      	push	{r7}
 8011902:	b083      	sub	sp, #12
 8011904:	af00      	add	r7, sp, #0
 8011906:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011908:	687b      	ldr	r3, [r7, #4]
 801190a:	2243      	movs	r2, #67	; 0x43
 801190c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801190e:	4b03      	ldr	r3, [pc, #12]	; (801191c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011910:	4618      	mov	r0, r3
 8011912:	370c      	adds	r7, #12
 8011914:	46bd      	mov	sp, r7
 8011916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801191a:	4770      	bx	lr
 801191c:	20000050 	.word	0x20000050

08011920 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011920:	b480      	push	{r7}
 8011922:	b083      	sub	sp, #12
 8011924:	af00      	add	r7, sp, #0
 8011926:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	2243      	movs	r2, #67	; 0x43
 801192c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801192e:	4b03      	ldr	r3, [pc, #12]	; (801193c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8011930:	4618      	mov	r0, r3
 8011932:	370c      	adds	r7, #12
 8011934:	46bd      	mov	sp, r7
 8011936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801193a:	4770      	bx	lr
 801193c:	200000d8 	.word	0x200000d8

08011940 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8011940:	b480      	push	{r7}
 8011942:	b083      	sub	sp, #12
 8011944:	af00      	add	r7, sp, #0
 8011946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	220a      	movs	r2, #10
 801194c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 801194e:	4b03      	ldr	r3, [pc, #12]	; (801195c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8011950:	4618      	mov	r0, r3
 8011952:	370c      	adds	r7, #12
 8011954:	46bd      	mov	sp, r7
 8011956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801195a:	4770      	bx	lr
 801195c:	2000000c 	.word	0x2000000c

08011960 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8011960:	b480      	push	{r7}
 8011962:	b083      	sub	sp, #12
 8011964:	af00      	add	r7, sp, #0
 8011966:	6078      	str	r0, [r7, #4]
 8011968:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801196a:	683b      	ldr	r3, [r7, #0]
 801196c:	2b00      	cmp	r3, #0
 801196e:	d101      	bne.n	8011974 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8011970:	2303      	movs	r3, #3
 8011972:	e004      	b.n	801197e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	683a      	ldr	r2, [r7, #0]
 8011978:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801197c:	2300      	movs	r3, #0
}
 801197e:	4618      	mov	r0, r3
 8011980:	370c      	adds	r7, #12
 8011982:	46bd      	mov	sp, r7
 8011984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011988:	4770      	bx	lr

0801198a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 801198a:	b480      	push	{r7}
 801198c:	b087      	sub	sp, #28
 801198e:	af00      	add	r7, sp, #0
 8011990:	60f8      	str	r0, [r7, #12]
 8011992:	60b9      	str	r1, [r7, #8]
 8011994:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801199c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80119a6:	697b      	ldr	r3, [r7, #20]
 80119a8:	687a      	ldr	r2, [r7, #4]
 80119aa:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80119ae:	2300      	movs	r3, #0
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	371c      	adds	r7, #28
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr

080119bc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80119bc:	b480      	push	{r7}
 80119be:	b085      	sub	sp, #20
 80119c0:	af00      	add	r7, sp, #0
 80119c2:	6078      	str	r0, [r7, #4]
 80119c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119cc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	683a      	ldr	r2, [r7, #0]
 80119d2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	3714      	adds	r7, #20
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr

080119e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d101      	bne.n	8011a02 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80119fe:	2303      	movs	r3, #3
 8011a00:	e016      	b.n	8011a30 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	7c1b      	ldrb	r3, [r3, #16]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d109      	bne.n	8011a1e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011a14:	2101      	movs	r1, #1
 8011a16:	6878      	ldr	r0, [r7, #4]
 8011a18:	f008 fd1e 	bl	801a458 <USBD_LL_PrepareReceive>
 8011a1c:	e007      	b.n	8011a2e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011a24:	2340      	movs	r3, #64	; 0x40
 8011a26:	2101      	movs	r1, #1
 8011a28:	6878      	ldr	r0, [r7, #4]
 8011a2a:	f008 fd15 	bl	801a458 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011a2e:	2300      	movs	r3, #0
}
 8011a30:	4618      	mov	r0, r3
 8011a32:	3710      	adds	r7, #16
 8011a34:	46bd      	mov	sp, r7
 8011a36:	bd80      	pop	{r7, pc}

08011a38 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011a38:	b580      	push	{r7, lr}
 8011a3a:	b086      	sub	sp, #24
 8011a3c:	af00      	add	r7, sp, #0
 8011a3e:	60f8      	str	r0, [r7, #12]
 8011a40:	60b9      	str	r1, [r7, #8]
 8011a42:	4613      	mov	r3, r2
 8011a44:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	2b00      	cmp	r3, #0
 8011a4a:	d101      	bne.n	8011a50 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8011a4c:	2303      	movs	r3, #3
 8011a4e:	e025      	b.n	8011a9c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d003      	beq.n	8011a62 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8011a5a:	68fb      	ldr	r3, [r7, #12]
 8011a5c:	2200      	movs	r2, #0
 8011a5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d003      	beq.n	8011a74 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	2200      	movs	r2, #0
 8011a70:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011a74:	68bb      	ldr	r3, [r7, #8]
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d003      	beq.n	8011a82 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	68ba      	ldr	r2, [r7, #8]
 8011a7e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	2201      	movs	r2, #1
 8011a86:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	79fa      	ldrb	r2, [r7, #7]
 8011a8e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011a90:	68f8      	ldr	r0, [r7, #12]
 8011a92:	f008 fb8b 	bl	801a1ac <USBD_LL_Init>
 8011a96:	4603      	mov	r3, r0
 8011a98:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011a9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3718      	adds	r7, #24
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}

08011aa4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011aa4:	b580      	push	{r7, lr}
 8011aa6:	b084      	sub	sp, #16
 8011aa8:	af00      	add	r7, sp, #0
 8011aaa:	6078      	str	r0, [r7, #4]
 8011aac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011ab2:	683b      	ldr	r3, [r7, #0]
 8011ab4:	2b00      	cmp	r3, #0
 8011ab6:	d101      	bne.n	8011abc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011ab8:	2303      	movs	r3, #3
 8011aba:	e010      	b.n	8011ade <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	683a      	ldr	r2, [r7, #0]
 8011ac0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011acc:	f107 020e 	add.w	r2, r7, #14
 8011ad0:	4610      	mov	r0, r2
 8011ad2:	4798      	blx	r3
 8011ad4:	4602      	mov	r2, r0
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8011adc:	2300      	movs	r3, #0
}
 8011ade:	4618      	mov	r0, r3
 8011ae0:	3710      	adds	r7, #16
 8011ae2:	46bd      	mov	sp, r7
 8011ae4:	bd80      	pop	{r7, pc}

08011ae6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011ae6:	b580      	push	{r7, lr}
 8011ae8:	b082      	sub	sp, #8
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011aee:	6878      	ldr	r0, [r7, #4]
 8011af0:	f008 fba8 	bl	801a244 <USBD_LL_Start>
 8011af4:	4603      	mov	r3, r0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3708      	adds	r7, #8
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}

08011afe <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8011afe:	b480      	push	{r7}
 8011b00:	b083      	sub	sp, #12
 8011b02:	af00      	add	r7, sp, #0
 8011b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011b06:	2300      	movs	r3, #0
}
 8011b08:	4618      	mov	r0, r3
 8011b0a:	370c      	adds	r7, #12
 8011b0c:	46bd      	mov	sp, r7
 8011b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b12:	4770      	bx	lr

08011b14 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b14:	b580      	push	{r7, lr}
 8011b16:	b084      	sub	sp, #16
 8011b18:	af00      	add	r7, sp, #0
 8011b1a:	6078      	str	r0, [r7, #4]
 8011b1c:	460b      	mov	r3, r1
 8011b1e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8011b20:	2303      	movs	r3, #3
 8011b22:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d009      	beq.n	8011b42 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	78fa      	ldrb	r2, [r7, #3]
 8011b38:	4611      	mov	r1, r2
 8011b3a:	6878      	ldr	r0, [r7, #4]
 8011b3c:	4798      	blx	r3
 8011b3e:	4603      	mov	r3, r0
 8011b40:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b44:	4618      	mov	r0, r3
 8011b46:	3710      	adds	r7, #16
 8011b48:	46bd      	mov	sp, r7
 8011b4a:	bd80      	pop	{r7, pc}

08011b4c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	b082      	sub	sp, #8
 8011b50:	af00      	add	r7, sp, #0
 8011b52:	6078      	str	r0, [r7, #4]
 8011b54:	460b      	mov	r3, r1
 8011b56:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d007      	beq.n	8011b72 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011b62:	687b      	ldr	r3, [r7, #4]
 8011b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b68:	685b      	ldr	r3, [r3, #4]
 8011b6a:	78fa      	ldrb	r2, [r7, #3]
 8011b6c:	4611      	mov	r1, r2
 8011b6e:	6878      	ldr	r0, [r7, #4]
 8011b70:	4798      	blx	r3
  }

  return USBD_OK;
 8011b72:	2300      	movs	r3, #0
}
 8011b74:	4618      	mov	r0, r3
 8011b76:	3708      	adds	r7, #8
 8011b78:	46bd      	mov	sp, r7
 8011b7a:	bd80      	pop	{r7, pc}

08011b7c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
 8011b84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011b8c:	6839      	ldr	r1, [r7, #0]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f000 ff56 	bl	8012a40 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	2201      	movs	r2, #1
 8011b98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011ba2:	461a      	mov	r2, r3
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011bb0:	f003 031f 	and.w	r3, r3, #31
 8011bb4:	2b01      	cmp	r3, #1
 8011bb6:	d00e      	beq.n	8011bd6 <USBD_LL_SetupStage+0x5a>
 8011bb8:	2b01      	cmp	r3, #1
 8011bba:	d302      	bcc.n	8011bc2 <USBD_LL_SetupStage+0x46>
 8011bbc:	2b02      	cmp	r3, #2
 8011bbe:	d014      	beq.n	8011bea <USBD_LL_SetupStage+0x6e>
 8011bc0:	e01d      	b.n	8011bfe <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bc8:	4619      	mov	r1, r3
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f000 fa18 	bl	8012000 <USBD_StdDevReq>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8011bd4:	e020      	b.n	8011c18 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011bd6:	687b      	ldr	r3, [r7, #4]
 8011bd8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bdc:	4619      	mov	r1, r3
 8011bde:	6878      	ldr	r0, [r7, #4]
 8011be0:	f000 fa7c 	bl	80120dc <USBD_StdItfReq>
 8011be4:	4603      	mov	r3, r0
 8011be6:	73fb      	strb	r3, [r7, #15]
      break;
 8011be8:	e016      	b.n	8011c18 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f000 fab8 	bl	8012168 <USBD_StdEPReq>
 8011bf8:	4603      	mov	r3, r0
 8011bfa:	73fb      	strb	r3, [r7, #15]
      break;
 8011bfc:	e00c      	b.n	8011c18 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011c04:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f008 fb79 	bl	801a304 <USBD_LL_StallEP>
 8011c12:	4603      	mov	r3, r0
 8011c14:	73fb      	strb	r3, [r7, #15]
      break;
 8011c16:	bf00      	nop
  }

  return ret;
 8011c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	3710      	adds	r7, #16
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	bd80      	pop	{r7, pc}

08011c22 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011c22:	b580      	push	{r7, lr}
 8011c24:	b086      	sub	sp, #24
 8011c26:	af00      	add	r7, sp, #0
 8011c28:	60f8      	str	r0, [r7, #12]
 8011c2a:	460b      	mov	r3, r1
 8011c2c:	607a      	str	r2, [r7, #4]
 8011c2e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011c30:	7afb      	ldrb	r3, [r7, #11]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d137      	bne.n	8011ca6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011c36:	68fb      	ldr	r3, [r7, #12]
 8011c38:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011c3c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011c44:	2b03      	cmp	r3, #3
 8011c46:	d14a      	bne.n	8011cde <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011c48:	693b      	ldr	r3, [r7, #16]
 8011c4a:	689a      	ldr	r2, [r3, #8]
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	68db      	ldr	r3, [r3, #12]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d913      	bls.n	8011c7c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	689a      	ldr	r2, [r3, #8]
 8011c58:	693b      	ldr	r3, [r7, #16]
 8011c5a:	68db      	ldr	r3, [r3, #12]
 8011c5c:	1ad2      	subs	r2, r2, r3
 8011c5e:	693b      	ldr	r3, [r7, #16]
 8011c60:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	68da      	ldr	r2, [r3, #12]
 8011c66:	693b      	ldr	r3, [r7, #16]
 8011c68:	689b      	ldr	r3, [r3, #8]
 8011c6a:	4293      	cmp	r3, r2
 8011c6c:	bf28      	it	cs
 8011c6e:	4613      	movcs	r3, r2
 8011c70:	461a      	mov	r2, r3
 8011c72:	6879      	ldr	r1, [r7, #4]
 8011c74:	68f8      	ldr	r0, [r7, #12]
 8011c76:	f000 ffd7 	bl	8012c28 <USBD_CtlContinueRx>
 8011c7a:	e030      	b.n	8011cde <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c82:	691b      	ldr	r3, [r3, #16]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d00a      	beq.n	8011c9e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011c8e:	2b03      	cmp	r3, #3
 8011c90:	d105      	bne.n	8011c9e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011c92:	68fb      	ldr	r3, [r7, #12]
 8011c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c98:	691b      	ldr	r3, [r3, #16]
 8011c9a:	68f8      	ldr	r0, [r7, #12]
 8011c9c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011c9e:	68f8      	ldr	r0, [r7, #12]
 8011ca0:	f000 ffd3 	bl	8012c4a <USBD_CtlSendStatus>
 8011ca4:	e01b      	b.n	8011cde <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cac:	699b      	ldr	r3, [r3, #24]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d013      	beq.n	8011cda <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011cb8:	2b03      	cmp	r3, #3
 8011cba:	d10e      	bne.n	8011cda <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011cbc:	68fb      	ldr	r3, [r7, #12]
 8011cbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cc2:	699b      	ldr	r3, [r3, #24]
 8011cc4:	7afa      	ldrb	r2, [r7, #11]
 8011cc6:	4611      	mov	r1, r2
 8011cc8:	68f8      	ldr	r0, [r7, #12]
 8011cca:	4798      	blx	r3
 8011ccc:	4603      	mov	r3, r0
 8011cce:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011cd0:	7dfb      	ldrb	r3, [r7, #23]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d003      	beq.n	8011cde <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011cd6:	7dfb      	ldrb	r3, [r7, #23]
 8011cd8:	e002      	b.n	8011ce0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011cda:	2303      	movs	r3, #3
 8011cdc:	e000      	b.n	8011ce0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011cde:	2300      	movs	r3, #0
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3718      	adds	r7, #24
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}

08011ce8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b086      	sub	sp, #24
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	60f8      	str	r0, [r7, #12]
 8011cf0:	460b      	mov	r3, r1
 8011cf2:	607a      	str	r2, [r7, #4]
 8011cf4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011cf6:	7afb      	ldrb	r3, [r7, #11]
 8011cf8:	2b00      	cmp	r3, #0
 8011cfa:	d16a      	bne.n	8011dd2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	3314      	adds	r3, #20
 8011d00:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011d08:	2b02      	cmp	r3, #2
 8011d0a:	d155      	bne.n	8011db8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011d0c:	693b      	ldr	r3, [r7, #16]
 8011d0e:	689a      	ldr	r2, [r3, #8]
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	68db      	ldr	r3, [r3, #12]
 8011d14:	429a      	cmp	r2, r3
 8011d16:	d914      	bls.n	8011d42 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011d18:	693b      	ldr	r3, [r7, #16]
 8011d1a:	689a      	ldr	r2, [r3, #8]
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	68db      	ldr	r3, [r3, #12]
 8011d20:	1ad2      	subs	r2, r2, r3
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	689b      	ldr	r3, [r3, #8]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	6879      	ldr	r1, [r7, #4]
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f000 ff4c 	bl	8012bcc <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d34:	2300      	movs	r3, #0
 8011d36:	2200      	movs	r2, #0
 8011d38:	2100      	movs	r1, #0
 8011d3a:	68f8      	ldr	r0, [r7, #12]
 8011d3c:	f008 fb8c 	bl	801a458 <USBD_LL_PrepareReceive>
 8011d40:	e03a      	b.n	8011db8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011d42:	693b      	ldr	r3, [r7, #16]
 8011d44:	68da      	ldr	r2, [r3, #12]
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	689b      	ldr	r3, [r3, #8]
 8011d4a:	429a      	cmp	r2, r3
 8011d4c:	d11c      	bne.n	8011d88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011d4e:	693b      	ldr	r3, [r7, #16]
 8011d50:	685a      	ldr	r2, [r3, #4]
 8011d52:	693b      	ldr	r3, [r7, #16]
 8011d54:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011d56:	429a      	cmp	r2, r3
 8011d58:	d316      	bcc.n	8011d88 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011d5a:	693b      	ldr	r3, [r7, #16]
 8011d5c:	685a      	ldr	r2, [r3, #4]
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011d64:	429a      	cmp	r2, r3
 8011d66:	d20f      	bcs.n	8011d88 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011d68:	2200      	movs	r2, #0
 8011d6a:	2100      	movs	r1, #0
 8011d6c:	68f8      	ldr	r0, [r7, #12]
 8011d6e:	f000 ff2d 	bl	8012bcc <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2200      	movs	r2, #0
 8011d76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011d7a:	2300      	movs	r3, #0
 8011d7c:	2200      	movs	r2, #0
 8011d7e:	2100      	movs	r1, #0
 8011d80:	68f8      	ldr	r0, [r7, #12]
 8011d82:	f008 fb69 	bl	801a458 <USBD_LL_PrepareReceive>
 8011d86:	e017      	b.n	8011db8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	2b00      	cmp	r3, #0
 8011d92:	d00a      	beq.n	8011daa <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011d9a:	2b03      	cmp	r3, #3
 8011d9c:	d105      	bne.n	8011daa <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	68f8      	ldr	r0, [r7, #12]
 8011da8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011daa:	2180      	movs	r1, #128	; 0x80
 8011dac:	68f8      	ldr	r0, [r7, #12]
 8011dae:	f008 faa9 	bl	801a304 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011db2:	68f8      	ldr	r0, [r7, #12]
 8011db4:	f000 ff5c 	bl	8012c70 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d123      	bne.n	8011e0a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011dc2:	68f8      	ldr	r0, [r7, #12]
 8011dc4:	f7ff fe9b 	bl	8011afe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011dd0:	e01b      	b.n	8011e0a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011dd2:	68fb      	ldr	r3, [r7, #12]
 8011dd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dd8:	695b      	ldr	r3, [r3, #20]
 8011dda:	2b00      	cmp	r3, #0
 8011ddc:	d013      	beq.n	8011e06 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011dde:	68fb      	ldr	r3, [r7, #12]
 8011de0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011de4:	2b03      	cmp	r3, #3
 8011de6:	d10e      	bne.n	8011e06 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011dee:	695b      	ldr	r3, [r3, #20]
 8011df0:	7afa      	ldrb	r2, [r7, #11]
 8011df2:	4611      	mov	r1, r2
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	4798      	blx	r3
 8011df8:	4603      	mov	r3, r0
 8011dfa:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011dfc:	7dfb      	ldrb	r3, [r7, #23]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d003      	beq.n	8011e0a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011e02:	7dfb      	ldrb	r3, [r7, #23]
 8011e04:	e002      	b.n	8011e0c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011e06:	2303      	movs	r3, #3
 8011e08:	e000      	b.n	8011e0c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	3718      	adds	r7, #24
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	2200      	movs	r2, #0
 8011e28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2200      	movs	r2, #0
 8011e30:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	2200      	movs	r2, #0
 8011e36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d009      	beq.n	8011e58 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	687a      	ldr	r2, [r7, #4]
 8011e4e:	6852      	ldr	r2, [r2, #4]
 8011e50:	b2d2      	uxtb	r2, r2
 8011e52:	4611      	mov	r1, r2
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e58:	2340      	movs	r3, #64	; 0x40
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	2100      	movs	r1, #0
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f008 fa0b 	bl	801a27a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	2201      	movs	r2, #1
 8011e68:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2240      	movs	r2, #64	; 0x40
 8011e70:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011e74:	2340      	movs	r3, #64	; 0x40
 8011e76:	2200      	movs	r2, #0
 8011e78:	2180      	movs	r1, #128	; 0x80
 8011e7a:	6878      	ldr	r0, [r7, #4]
 8011e7c:	f008 f9fd 	bl	801a27a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2201      	movs	r2, #1
 8011e84:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	2240      	movs	r2, #64	; 0x40
 8011e8a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011e8c:	2300      	movs	r3, #0
}
 8011e8e:	4618      	mov	r0, r3
 8011e90:	3708      	adds	r7, #8
 8011e92:	46bd      	mov	sp, r7
 8011e94:	bd80      	pop	{r7, pc}

08011e96 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011e96:	b480      	push	{r7}
 8011e98:	b083      	sub	sp, #12
 8011e9a:	af00      	add	r7, sp, #0
 8011e9c:	6078      	str	r0, [r7, #4]
 8011e9e:	460b      	mov	r3, r1
 8011ea0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011ea2:	687b      	ldr	r3, [r7, #4]
 8011ea4:	78fa      	ldrb	r2, [r7, #3]
 8011ea6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011ea8:	2300      	movs	r3, #0
}
 8011eaa:	4618      	mov	r0, r3
 8011eac:	370c      	adds	r7, #12
 8011eae:	46bd      	mov	sp, r7
 8011eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb4:	4770      	bx	lr

08011eb6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011eb6:	b480      	push	{r7}
 8011eb8:	b083      	sub	sp, #12
 8011eba:	af00      	add	r7, sp, #0
 8011ebc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2204      	movs	r2, #4
 8011ece:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011ed2:	2300      	movs	r3, #0
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	370c      	adds	r7, #12
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ede:	4770      	bx	lr

08011ee0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011ee0:	b480      	push	{r7}
 8011ee2:	b083      	sub	sp, #12
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eee:	2b04      	cmp	r3, #4
 8011ef0:	d105      	bne.n	8011efe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011ef2:	687b      	ldr	r3, [r7, #4]
 8011ef4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011ef8:	687b      	ldr	r3, [r7, #4]
 8011efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011efe:	2300      	movs	r3, #0
}
 8011f00:	4618      	mov	r0, r3
 8011f02:	370c      	adds	r7, #12
 8011f04:	46bd      	mov	sp, r7
 8011f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f0a:	4770      	bx	lr

08011f0c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011f0c:	b580      	push	{r7, lr}
 8011f0e:	b082      	sub	sp, #8
 8011f10:	af00      	add	r7, sp, #0
 8011f12:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011f1a:	2b03      	cmp	r3, #3
 8011f1c:	d10b      	bne.n	8011f36 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011f1e:	687b      	ldr	r3, [r7, #4]
 8011f20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f24:	69db      	ldr	r3, [r3, #28]
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d005      	beq.n	8011f36 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011f30:	69db      	ldr	r3, [r3, #28]
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011f36:	2300      	movs	r3, #0
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3708      	adds	r7, #8
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd80      	pop	{r7, pc}

08011f40 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011f40:	b480      	push	{r7}
 8011f42:	b083      	sub	sp, #12
 8011f44:	af00      	add	r7, sp, #0
 8011f46:	6078      	str	r0, [r7, #4]
 8011f48:	460b      	mov	r3, r1
 8011f4a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f4c:	2300      	movs	r3, #0
}
 8011f4e:	4618      	mov	r0, r3
 8011f50:	370c      	adds	r7, #12
 8011f52:	46bd      	mov	sp, r7
 8011f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f58:	4770      	bx	lr

08011f5a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011f5a:	b480      	push	{r7}
 8011f5c:	b083      	sub	sp, #12
 8011f5e:	af00      	add	r7, sp, #0
 8011f60:	6078      	str	r0, [r7, #4]
 8011f62:	460b      	mov	r3, r1
 8011f64:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011f66:	2300      	movs	r3, #0
}
 8011f68:	4618      	mov	r0, r3
 8011f6a:	370c      	adds	r7, #12
 8011f6c:	46bd      	mov	sp, r7
 8011f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f72:	4770      	bx	lr

08011f74 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011f74:	b480      	push	{r7}
 8011f76:	b083      	sub	sp, #12
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011f7c:	2300      	movs	r3, #0
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	370c      	adds	r7, #12
 8011f82:	46bd      	mov	sp, r7
 8011f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f88:	4770      	bx	lr

08011f8a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011f8a:	b580      	push	{r7, lr}
 8011f8c:	b082      	sub	sp, #8
 8011f8e:	af00      	add	r7, sp, #0
 8011f90:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	2201      	movs	r2, #1
 8011f96:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d009      	beq.n	8011fb8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011faa:	685b      	ldr	r3, [r3, #4]
 8011fac:	687a      	ldr	r2, [r7, #4]
 8011fae:	6852      	ldr	r2, [r2, #4]
 8011fb0:	b2d2      	uxtb	r2, r2
 8011fb2:	4611      	mov	r1, r2
 8011fb4:	6878      	ldr	r0, [r7, #4]
 8011fb6:	4798      	blx	r3
  }

  return USBD_OK;
 8011fb8:	2300      	movs	r3, #0
}
 8011fba:	4618      	mov	r0, r3
 8011fbc:	3708      	adds	r7, #8
 8011fbe:	46bd      	mov	sp, r7
 8011fc0:	bd80      	pop	{r7, pc}

08011fc2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011fc2:	b480      	push	{r7}
 8011fc4:	b087      	sub	sp, #28
 8011fc6:	af00      	add	r7, sp, #0
 8011fc8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011fce:	697b      	ldr	r3, [r7, #20]
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011fda:	697b      	ldr	r3, [r7, #20]
 8011fdc:	781b      	ldrb	r3, [r3, #0]
 8011fde:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011fe0:	8a3b      	ldrh	r3, [r7, #16]
 8011fe2:	021b      	lsls	r3, r3, #8
 8011fe4:	b21a      	sxth	r2, r3
 8011fe6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011fea:	4313      	orrs	r3, r2
 8011fec:	b21b      	sxth	r3, r3
 8011fee:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011ff0:	89fb      	ldrh	r3, [r7, #14]
}
 8011ff2:	4618      	mov	r0, r3
 8011ff4:	371c      	adds	r7, #28
 8011ff6:	46bd      	mov	sp, r7
 8011ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ffc:	4770      	bx	lr
	...

08012000 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	6078      	str	r0, [r7, #4]
 8012008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801200e:	683b      	ldr	r3, [r7, #0]
 8012010:	781b      	ldrb	r3, [r3, #0]
 8012012:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012016:	2b20      	cmp	r3, #32
 8012018:	d004      	beq.n	8012024 <USBD_StdDevReq+0x24>
 801201a:	2b40      	cmp	r3, #64	; 0x40
 801201c:	d002      	beq.n	8012024 <USBD_StdDevReq+0x24>
 801201e:	2b00      	cmp	r3, #0
 8012020:	d00a      	beq.n	8012038 <USBD_StdDevReq+0x38>
 8012022:	e050      	b.n	80120c6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012024:	687b      	ldr	r3, [r7, #4]
 8012026:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801202a:	689b      	ldr	r3, [r3, #8]
 801202c:	6839      	ldr	r1, [r7, #0]
 801202e:	6878      	ldr	r0, [r7, #4]
 8012030:	4798      	blx	r3
 8012032:	4603      	mov	r3, r0
 8012034:	73fb      	strb	r3, [r7, #15]
    break;
 8012036:	e04b      	b.n	80120d0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012038:	683b      	ldr	r3, [r7, #0]
 801203a:	785b      	ldrb	r3, [r3, #1]
 801203c:	2b09      	cmp	r3, #9
 801203e:	d83c      	bhi.n	80120ba <USBD_StdDevReq+0xba>
 8012040:	a201      	add	r2, pc, #4	; (adr r2, 8012048 <USBD_StdDevReq+0x48>)
 8012042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012046:	bf00      	nop
 8012048:	0801209d 	.word	0x0801209d
 801204c:	080120b1 	.word	0x080120b1
 8012050:	080120bb 	.word	0x080120bb
 8012054:	080120a7 	.word	0x080120a7
 8012058:	080120bb 	.word	0x080120bb
 801205c:	0801207b 	.word	0x0801207b
 8012060:	08012071 	.word	0x08012071
 8012064:	080120bb 	.word	0x080120bb
 8012068:	08012093 	.word	0x08012093
 801206c:	08012085 	.word	0x08012085
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8012070:	6839      	ldr	r1, [r7, #0]
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f000 f9ce 	bl	8012414 <USBD_GetDescriptor>
      break;
 8012078:	e024      	b.n	80120c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801207a:	6839      	ldr	r1, [r7, #0]
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 fb5d 	bl	801273c <USBD_SetAddress>
      break;
 8012082:	e01f      	b.n	80120c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8012084:	6839      	ldr	r1, [r7, #0]
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f000 fb9a 	bl	80127c0 <USBD_SetConfig>
 801208c:	4603      	mov	r3, r0
 801208e:	73fb      	strb	r3, [r7, #15]
      break;
 8012090:	e018      	b.n	80120c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8012092:	6839      	ldr	r1, [r7, #0]
 8012094:	6878      	ldr	r0, [r7, #4]
 8012096:	f000 fc37 	bl	8012908 <USBD_GetConfig>
      break;
 801209a:	e013      	b.n	80120c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 801209c:	6839      	ldr	r1, [r7, #0]
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 fc66 	bl	8012970 <USBD_GetStatus>
      break;
 80120a4:	e00e      	b.n	80120c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80120a6:	6839      	ldr	r1, [r7, #0]
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f000 fc94 	bl	80129d6 <USBD_SetFeature>
      break;
 80120ae:	e009      	b.n	80120c4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80120b0:	6839      	ldr	r1, [r7, #0]
 80120b2:	6878      	ldr	r0, [r7, #4]
 80120b4:	f000 fca3 	bl	80129fe <USBD_ClrFeature>
      break;
 80120b8:	e004      	b.n	80120c4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f000 fcf9 	bl	8012ab4 <USBD_CtlError>
      break;
 80120c2:	bf00      	nop
    }
    break;
 80120c4:	e004      	b.n	80120d0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80120c6:	6839      	ldr	r1, [r7, #0]
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f000 fcf3 	bl	8012ab4 <USBD_CtlError>
    break;
 80120ce:	bf00      	nop
  }

  return ret;
 80120d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80120d2:	4618      	mov	r0, r3
 80120d4:	3710      	adds	r7, #16
 80120d6:	46bd      	mov	sp, r7
 80120d8:	bd80      	pop	{r7, pc}
 80120da:	bf00      	nop

080120dc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80120dc:	b580      	push	{r7, lr}
 80120de:	b084      	sub	sp, #16
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
 80120e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80120e6:	2300      	movs	r3, #0
 80120e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80120ea:	683b      	ldr	r3, [r7, #0]
 80120ec:	781b      	ldrb	r3, [r3, #0]
 80120ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80120f2:	2b20      	cmp	r3, #32
 80120f4:	d003      	beq.n	80120fe <USBD_StdItfReq+0x22>
 80120f6:	2b40      	cmp	r3, #64	; 0x40
 80120f8:	d001      	beq.n	80120fe <USBD_StdItfReq+0x22>
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d12a      	bne.n	8012154 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012104:	3b01      	subs	r3, #1
 8012106:	2b02      	cmp	r3, #2
 8012108:	d81d      	bhi.n	8012146 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801210a:	683b      	ldr	r3, [r7, #0]
 801210c:	889b      	ldrh	r3, [r3, #4]
 801210e:	b2db      	uxtb	r3, r3
 8012110:	2b01      	cmp	r3, #1
 8012112:	d813      	bhi.n	801213c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801211a:	689b      	ldr	r3, [r3, #8]
 801211c:	6839      	ldr	r1, [r7, #0]
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	4798      	blx	r3
 8012122:	4603      	mov	r3, r0
 8012124:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	88db      	ldrh	r3, [r3, #6]
 801212a:	2b00      	cmp	r3, #0
 801212c:	d110      	bne.n	8012150 <USBD_StdItfReq+0x74>
 801212e:	7bfb      	ldrb	r3, [r7, #15]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d10d      	bne.n	8012150 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8012134:	6878      	ldr	r0, [r7, #4]
 8012136:	f000 fd88 	bl	8012c4a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801213a:	e009      	b.n	8012150 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 801213c:	6839      	ldr	r1, [r7, #0]
 801213e:	6878      	ldr	r0, [r7, #4]
 8012140:	f000 fcb8 	bl	8012ab4 <USBD_CtlError>
      break;
 8012144:	e004      	b.n	8012150 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8012146:	6839      	ldr	r1, [r7, #0]
 8012148:	6878      	ldr	r0, [r7, #4]
 801214a:	f000 fcb3 	bl	8012ab4 <USBD_CtlError>
      break;
 801214e:	e000      	b.n	8012152 <USBD_StdItfReq+0x76>
      break;
 8012150:	bf00      	nop
    }
    break;
 8012152:	e004      	b.n	801215e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8012154:	6839      	ldr	r1, [r7, #0]
 8012156:	6878      	ldr	r0, [r7, #4]
 8012158:	f000 fcac 	bl	8012ab4 <USBD_CtlError>
    break;
 801215c:	bf00      	nop
  }

  return ret;
 801215e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012160:	4618      	mov	r0, r3
 8012162:	3710      	adds	r7, #16
 8012164:	46bd      	mov	sp, r7
 8012166:	bd80      	pop	{r7, pc}

08012168 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012168:	b580      	push	{r7, lr}
 801216a:	b084      	sub	sp, #16
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]
 8012170:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012172:	2300      	movs	r3, #0
 8012174:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	889b      	ldrh	r3, [r3, #4]
 801217a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801217c:	683b      	ldr	r3, [r7, #0]
 801217e:	781b      	ldrb	r3, [r3, #0]
 8012180:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012184:	2b20      	cmp	r3, #32
 8012186:	d004      	beq.n	8012192 <USBD_StdEPReq+0x2a>
 8012188:	2b40      	cmp	r3, #64	; 0x40
 801218a:	d002      	beq.n	8012192 <USBD_StdEPReq+0x2a>
 801218c:	2b00      	cmp	r3, #0
 801218e:	d00a      	beq.n	80121a6 <USBD_StdEPReq+0x3e>
 8012190:	e135      	b.n	80123fe <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012198:	689b      	ldr	r3, [r3, #8]
 801219a:	6839      	ldr	r1, [r7, #0]
 801219c:	6878      	ldr	r0, [r7, #4]
 801219e:	4798      	blx	r3
 80121a0:	4603      	mov	r3, r0
 80121a2:	73fb      	strb	r3, [r7, #15]
    break;
 80121a4:	e130      	b.n	8012408 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80121a6:	683b      	ldr	r3, [r7, #0]
 80121a8:	785b      	ldrb	r3, [r3, #1]
 80121aa:	2b01      	cmp	r3, #1
 80121ac:	d03e      	beq.n	801222c <USBD_StdEPReq+0xc4>
 80121ae:	2b03      	cmp	r3, #3
 80121b0:	d002      	beq.n	80121b8 <USBD_StdEPReq+0x50>
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d077      	beq.n	80122a6 <USBD_StdEPReq+0x13e>
 80121b6:	e11c      	b.n	80123f2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121be:	2b02      	cmp	r3, #2
 80121c0:	d002      	beq.n	80121c8 <USBD_StdEPReq+0x60>
 80121c2:	2b03      	cmp	r3, #3
 80121c4:	d015      	beq.n	80121f2 <USBD_StdEPReq+0x8a>
 80121c6:	e02b      	b.n	8012220 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80121c8:	7bbb      	ldrb	r3, [r7, #14]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d00c      	beq.n	80121e8 <USBD_StdEPReq+0x80>
 80121ce:	7bbb      	ldrb	r3, [r7, #14]
 80121d0:	2b80      	cmp	r3, #128	; 0x80
 80121d2:	d009      	beq.n	80121e8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80121d4:	7bbb      	ldrb	r3, [r7, #14]
 80121d6:	4619      	mov	r1, r3
 80121d8:	6878      	ldr	r0, [r7, #4]
 80121da:	f008 f893 	bl	801a304 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80121de:	2180      	movs	r1, #128	; 0x80
 80121e0:	6878      	ldr	r0, [r7, #4]
 80121e2:	f008 f88f 	bl	801a304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80121e6:	e020      	b.n	801222a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80121e8:	6839      	ldr	r1, [r7, #0]
 80121ea:	6878      	ldr	r0, [r7, #4]
 80121ec:	f000 fc62 	bl	8012ab4 <USBD_CtlError>
        break;
 80121f0:	e01b      	b.n	801222a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	885b      	ldrh	r3, [r3, #2]
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d10e      	bne.n	8012218 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80121fa:	7bbb      	ldrb	r3, [r7, #14]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d00b      	beq.n	8012218 <USBD_StdEPReq+0xb0>
 8012200:	7bbb      	ldrb	r3, [r7, #14]
 8012202:	2b80      	cmp	r3, #128	; 0x80
 8012204:	d008      	beq.n	8012218 <USBD_StdEPReq+0xb0>
 8012206:	683b      	ldr	r3, [r7, #0]
 8012208:	88db      	ldrh	r3, [r3, #6]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d104      	bne.n	8012218 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 801220e:	7bbb      	ldrb	r3, [r7, #14]
 8012210:	4619      	mov	r1, r3
 8012212:	6878      	ldr	r0, [r7, #4]
 8012214:	f008 f876 	bl	801a304 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f000 fd16 	bl	8012c4a <USBD_CtlSendStatus>

        break;
 801221e:	e004      	b.n	801222a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8012220:	6839      	ldr	r1, [r7, #0]
 8012222:	6878      	ldr	r0, [r7, #4]
 8012224:	f000 fc46 	bl	8012ab4 <USBD_CtlError>
        break;
 8012228:	bf00      	nop
      }
      break;
 801222a:	e0e7      	b.n	80123fc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012232:	2b02      	cmp	r3, #2
 8012234:	d002      	beq.n	801223c <USBD_StdEPReq+0xd4>
 8012236:	2b03      	cmp	r3, #3
 8012238:	d015      	beq.n	8012266 <USBD_StdEPReq+0xfe>
 801223a:	e02d      	b.n	8012298 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801223c:	7bbb      	ldrb	r3, [r7, #14]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d00c      	beq.n	801225c <USBD_StdEPReq+0xf4>
 8012242:	7bbb      	ldrb	r3, [r7, #14]
 8012244:	2b80      	cmp	r3, #128	; 0x80
 8012246:	d009      	beq.n	801225c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012248:	7bbb      	ldrb	r3, [r7, #14]
 801224a:	4619      	mov	r1, r3
 801224c:	6878      	ldr	r0, [r7, #4]
 801224e:	f008 f859 	bl	801a304 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012252:	2180      	movs	r1, #128	; 0x80
 8012254:	6878      	ldr	r0, [r7, #4]
 8012256:	f008 f855 	bl	801a304 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801225a:	e023      	b.n	80122a4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 801225c:	6839      	ldr	r1, [r7, #0]
 801225e:	6878      	ldr	r0, [r7, #4]
 8012260:	f000 fc28 	bl	8012ab4 <USBD_CtlError>
        break;
 8012264:	e01e      	b.n	80122a4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	885b      	ldrh	r3, [r3, #2]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d119      	bne.n	80122a2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801226e:	7bbb      	ldrb	r3, [r7, #14]
 8012270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012274:	2b00      	cmp	r3, #0
 8012276:	d004      	beq.n	8012282 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012278:	7bbb      	ldrb	r3, [r7, #14]
 801227a:	4619      	mov	r1, r3
 801227c:	6878      	ldr	r0, [r7, #4]
 801227e:	f008 f860 	bl	801a342 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8012282:	6878      	ldr	r0, [r7, #4]
 8012284:	f000 fce1 	bl	8012c4a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801228e:	689b      	ldr	r3, [r3, #8]
 8012290:	6839      	ldr	r1, [r7, #0]
 8012292:	6878      	ldr	r0, [r7, #4]
 8012294:	4798      	blx	r3
        }
        break;
 8012296:	e004      	b.n	80122a2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8012298:	6839      	ldr	r1, [r7, #0]
 801229a:	6878      	ldr	r0, [r7, #4]
 801229c:	f000 fc0a 	bl	8012ab4 <USBD_CtlError>
        break;
 80122a0:	e000      	b.n	80122a4 <USBD_StdEPReq+0x13c>
        break;
 80122a2:	bf00      	nop
      }
      break;
 80122a4:	e0aa      	b.n	80123fc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80122ac:	2b02      	cmp	r3, #2
 80122ae:	d002      	beq.n	80122b6 <USBD_StdEPReq+0x14e>
 80122b0:	2b03      	cmp	r3, #3
 80122b2:	d032      	beq.n	801231a <USBD_StdEPReq+0x1b2>
 80122b4:	e097      	b.n	80123e6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80122b6:	7bbb      	ldrb	r3, [r7, #14]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	d007      	beq.n	80122cc <USBD_StdEPReq+0x164>
 80122bc:	7bbb      	ldrb	r3, [r7, #14]
 80122be:	2b80      	cmp	r3, #128	; 0x80
 80122c0:	d004      	beq.n	80122cc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80122c2:	6839      	ldr	r1, [r7, #0]
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 fbf5 	bl	8012ab4 <USBD_CtlError>
          break;
 80122ca:	e091      	b.n	80123f0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	da0b      	bge.n	80122ec <USBD_StdEPReq+0x184>
 80122d4:	7bbb      	ldrb	r3, [r7, #14]
 80122d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80122da:	4613      	mov	r3, r2
 80122dc:	009b      	lsls	r3, r3, #2
 80122de:	4413      	add	r3, r2
 80122e0:	009b      	lsls	r3, r3, #2
 80122e2:	3310      	adds	r3, #16
 80122e4:	687a      	ldr	r2, [r7, #4]
 80122e6:	4413      	add	r3, r2
 80122e8:	3304      	adds	r3, #4
 80122ea:	e00b      	b.n	8012304 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80122ec:	7bbb      	ldrb	r3, [r7, #14]
 80122ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80122f2:	4613      	mov	r3, r2
 80122f4:	009b      	lsls	r3, r3, #2
 80122f6:	4413      	add	r3, r2
 80122f8:	009b      	lsls	r3, r3, #2
 80122fa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80122fe:	687a      	ldr	r2, [r7, #4]
 8012300:	4413      	add	r3, r2
 8012302:	3304      	adds	r3, #4
 8012304:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8012306:	68bb      	ldr	r3, [r7, #8]
 8012308:	2200      	movs	r2, #0
 801230a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801230c:	68bb      	ldr	r3, [r7, #8]
 801230e:	2202      	movs	r2, #2
 8012310:	4619      	mov	r1, r3
 8012312:	6878      	ldr	r0, [r7, #4]
 8012314:	f000 fc3f 	bl	8012b96 <USBD_CtlSendData>
        break;
 8012318:	e06a      	b.n	80123f0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 801231a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801231e:	2b00      	cmp	r3, #0
 8012320:	da11      	bge.n	8012346 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012322:	7bbb      	ldrb	r3, [r7, #14]
 8012324:	f003 020f 	and.w	r2, r3, #15
 8012328:	6879      	ldr	r1, [r7, #4]
 801232a:	4613      	mov	r3, r2
 801232c:	009b      	lsls	r3, r3, #2
 801232e:	4413      	add	r3, r2
 8012330:	009b      	lsls	r3, r3, #2
 8012332:	440b      	add	r3, r1
 8012334:	3324      	adds	r3, #36	; 0x24
 8012336:	881b      	ldrh	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d117      	bne.n	801236c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801233c:	6839      	ldr	r1, [r7, #0]
 801233e:	6878      	ldr	r0, [r7, #4]
 8012340:	f000 fbb8 	bl	8012ab4 <USBD_CtlError>
            break;
 8012344:	e054      	b.n	80123f0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012346:	7bbb      	ldrb	r3, [r7, #14]
 8012348:	f003 020f 	and.w	r2, r3, #15
 801234c:	6879      	ldr	r1, [r7, #4]
 801234e:	4613      	mov	r3, r2
 8012350:	009b      	lsls	r3, r3, #2
 8012352:	4413      	add	r3, r2
 8012354:	009b      	lsls	r3, r3, #2
 8012356:	440b      	add	r3, r1
 8012358:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801235c:	881b      	ldrh	r3, [r3, #0]
 801235e:	2b00      	cmp	r3, #0
 8012360:	d104      	bne.n	801236c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8012362:	6839      	ldr	r1, [r7, #0]
 8012364:	6878      	ldr	r0, [r7, #4]
 8012366:	f000 fba5 	bl	8012ab4 <USBD_CtlError>
            break;
 801236a:	e041      	b.n	80123f0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801236c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012370:	2b00      	cmp	r3, #0
 8012372:	da0b      	bge.n	801238c <USBD_StdEPReq+0x224>
 8012374:	7bbb      	ldrb	r3, [r7, #14]
 8012376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801237a:	4613      	mov	r3, r2
 801237c:	009b      	lsls	r3, r3, #2
 801237e:	4413      	add	r3, r2
 8012380:	009b      	lsls	r3, r3, #2
 8012382:	3310      	adds	r3, #16
 8012384:	687a      	ldr	r2, [r7, #4]
 8012386:	4413      	add	r3, r2
 8012388:	3304      	adds	r3, #4
 801238a:	e00b      	b.n	80123a4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 801238c:	7bbb      	ldrb	r3, [r7, #14]
 801238e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012392:	4613      	mov	r3, r2
 8012394:	009b      	lsls	r3, r3, #2
 8012396:	4413      	add	r3, r2
 8012398:	009b      	lsls	r3, r3, #2
 801239a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801239e:	687a      	ldr	r2, [r7, #4]
 80123a0:	4413      	add	r3, r2
 80123a2:	3304      	adds	r3, #4
 80123a4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80123a6:	7bbb      	ldrb	r3, [r7, #14]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	d002      	beq.n	80123b2 <USBD_StdEPReq+0x24a>
 80123ac:	7bbb      	ldrb	r3, [r7, #14]
 80123ae:	2b80      	cmp	r3, #128	; 0x80
 80123b0:	d103      	bne.n	80123ba <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80123b2:	68bb      	ldr	r3, [r7, #8]
 80123b4:	2200      	movs	r2, #0
 80123b6:	601a      	str	r2, [r3, #0]
 80123b8:	e00e      	b.n	80123d8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80123ba:	7bbb      	ldrb	r3, [r7, #14]
 80123bc:	4619      	mov	r1, r3
 80123be:	6878      	ldr	r0, [r7, #4]
 80123c0:	f007 ffde 	bl	801a380 <USBD_LL_IsStallEP>
 80123c4:	4603      	mov	r3, r0
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d003      	beq.n	80123d2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80123ca:	68bb      	ldr	r3, [r7, #8]
 80123cc:	2201      	movs	r2, #1
 80123ce:	601a      	str	r2, [r3, #0]
 80123d0:	e002      	b.n	80123d8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2200      	movs	r2, #0
 80123d6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80123d8:	68bb      	ldr	r3, [r7, #8]
 80123da:	2202      	movs	r2, #2
 80123dc:	4619      	mov	r1, r3
 80123de:	6878      	ldr	r0, [r7, #4]
 80123e0:	f000 fbd9 	bl	8012b96 <USBD_CtlSendData>
          break;
 80123e4:	e004      	b.n	80123f0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80123e6:	6839      	ldr	r1, [r7, #0]
 80123e8:	6878      	ldr	r0, [r7, #4]
 80123ea:	f000 fb63 	bl	8012ab4 <USBD_CtlError>
        break;
 80123ee:	bf00      	nop
      }
      break;
 80123f0:	e004      	b.n	80123fc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80123f2:	6839      	ldr	r1, [r7, #0]
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f000 fb5d 	bl	8012ab4 <USBD_CtlError>
      break;
 80123fa:	bf00      	nop
    }
    break;
 80123fc:	e004      	b.n	8012408 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80123fe:	6839      	ldr	r1, [r7, #0]
 8012400:	6878      	ldr	r0, [r7, #4]
 8012402:	f000 fb57 	bl	8012ab4 <USBD_CtlError>
    break;
 8012406:	bf00      	nop
  }

  return ret;
 8012408:	7bfb      	ldrb	r3, [r7, #15]
}
 801240a:	4618      	mov	r0, r3
 801240c:	3710      	adds	r7, #16
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
	...

08012414 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801241e:	2300      	movs	r3, #0
 8012420:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8012422:	2300      	movs	r3, #0
 8012424:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8012426:	2300      	movs	r3, #0
 8012428:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	885b      	ldrh	r3, [r3, #2]
 801242e:	0a1b      	lsrs	r3, r3, #8
 8012430:	b29b      	uxth	r3, r3
 8012432:	3b01      	subs	r3, #1
 8012434:	2b0e      	cmp	r3, #14
 8012436:	f200 8152 	bhi.w	80126de <USBD_GetDescriptor+0x2ca>
 801243a:	a201      	add	r2, pc, #4	; (adr r2, 8012440 <USBD_GetDescriptor+0x2c>)
 801243c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012440:	080124b1 	.word	0x080124b1
 8012444:	080124c9 	.word	0x080124c9
 8012448:	08012509 	.word	0x08012509
 801244c:	080126df 	.word	0x080126df
 8012450:	080126df 	.word	0x080126df
 8012454:	0801267f 	.word	0x0801267f
 8012458:	080126ab 	.word	0x080126ab
 801245c:	080126df 	.word	0x080126df
 8012460:	080126df 	.word	0x080126df
 8012464:	080126df 	.word	0x080126df
 8012468:	080126df 	.word	0x080126df
 801246c:	080126df 	.word	0x080126df
 8012470:	080126df 	.word	0x080126df
 8012474:	080126df 	.word	0x080126df
 8012478:	0801247d 	.word	0x0801247d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012482:	69db      	ldr	r3, [r3, #28]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d00b      	beq.n	80124a0 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801248e:	69db      	ldr	r3, [r3, #28]
 8012490:	687a      	ldr	r2, [r7, #4]
 8012492:	7c12      	ldrb	r2, [r2, #16]
 8012494:	f107 0108 	add.w	r1, r7, #8
 8012498:	4610      	mov	r0, r2
 801249a:	4798      	blx	r3
 801249c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801249e:	e126      	b.n	80126ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80124a0:	6839      	ldr	r1, [r7, #0]
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 fb06 	bl	8012ab4 <USBD_CtlError>
      err++;
 80124a8:	7afb      	ldrb	r3, [r7, #11]
 80124aa:	3301      	adds	r3, #1
 80124ac:	72fb      	strb	r3, [r7, #11]
    break;
 80124ae:	e11e      	b.n	80126ee <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	687a      	ldr	r2, [r7, #4]
 80124ba:	7c12      	ldrb	r2, [r2, #16]
 80124bc:	f107 0108 	add.w	r1, r7, #8
 80124c0:	4610      	mov	r0, r2
 80124c2:	4798      	blx	r3
 80124c4:	60f8      	str	r0, [r7, #12]
    break;
 80124c6:	e112      	b.n	80126ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	7c1b      	ldrb	r3, [r3, #16]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d10d      	bne.n	80124ec <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80124d8:	f107 0208 	add.w	r2, r7, #8
 80124dc:	4610      	mov	r0, r2
 80124de:	4798      	blx	r3
 80124e0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	3301      	adds	r3, #1
 80124e6:	2202      	movs	r2, #2
 80124e8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80124ea:	e100      	b.n	80126ee <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80124f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124f4:	f107 0208 	add.w	r2, r7, #8
 80124f8:	4610      	mov	r0, r2
 80124fa:	4798      	blx	r3
 80124fc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	3301      	adds	r3, #1
 8012502:	2202      	movs	r2, #2
 8012504:	701a      	strb	r2, [r3, #0]
    break;
 8012506:	e0f2      	b.n	80126ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8012508:	683b      	ldr	r3, [r7, #0]
 801250a:	885b      	ldrh	r3, [r3, #2]
 801250c:	b2db      	uxtb	r3, r3
 801250e:	2b05      	cmp	r3, #5
 8012510:	f200 80ac 	bhi.w	801266c <USBD_GetDescriptor+0x258>
 8012514:	a201      	add	r2, pc, #4	; (adr r2, 801251c <USBD_GetDescriptor+0x108>)
 8012516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801251a:	bf00      	nop
 801251c:	08012535 	.word	0x08012535
 8012520:	08012569 	.word	0x08012569
 8012524:	0801259d 	.word	0x0801259d
 8012528:	080125d1 	.word	0x080125d1
 801252c:	08012605 	.word	0x08012605
 8012530:	08012639 	.word	0x08012639
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801253a:	685b      	ldr	r3, [r3, #4]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d00b      	beq.n	8012558 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012540:	687b      	ldr	r3, [r7, #4]
 8012542:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012546:	685b      	ldr	r3, [r3, #4]
 8012548:	687a      	ldr	r2, [r7, #4]
 801254a:	7c12      	ldrb	r2, [r2, #16]
 801254c:	f107 0108 	add.w	r1, r7, #8
 8012550:	4610      	mov	r0, r2
 8012552:	4798      	blx	r3
 8012554:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012556:	e091      	b.n	801267c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012558:	6839      	ldr	r1, [r7, #0]
 801255a:	6878      	ldr	r0, [r7, #4]
 801255c:	f000 faaa 	bl	8012ab4 <USBD_CtlError>
        err++;
 8012560:	7afb      	ldrb	r3, [r7, #11]
 8012562:	3301      	adds	r3, #1
 8012564:	72fb      	strb	r3, [r7, #11]
      break;
 8012566:	e089      	b.n	801267c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801256e:	689b      	ldr	r3, [r3, #8]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d00b      	beq.n	801258c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801257a:	689b      	ldr	r3, [r3, #8]
 801257c:	687a      	ldr	r2, [r7, #4]
 801257e:	7c12      	ldrb	r2, [r2, #16]
 8012580:	f107 0108 	add.w	r1, r7, #8
 8012584:	4610      	mov	r0, r2
 8012586:	4798      	blx	r3
 8012588:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801258a:	e077      	b.n	801267c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 801258c:	6839      	ldr	r1, [r7, #0]
 801258e:	6878      	ldr	r0, [r7, #4]
 8012590:	f000 fa90 	bl	8012ab4 <USBD_CtlError>
        err++;
 8012594:	7afb      	ldrb	r3, [r7, #11]
 8012596:	3301      	adds	r3, #1
 8012598:	72fb      	strb	r3, [r7, #11]
      break;
 801259a:	e06f      	b.n	801267c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d00b      	beq.n	80125c0 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125ae:	68db      	ldr	r3, [r3, #12]
 80125b0:	687a      	ldr	r2, [r7, #4]
 80125b2:	7c12      	ldrb	r2, [r2, #16]
 80125b4:	f107 0108 	add.w	r1, r7, #8
 80125b8:	4610      	mov	r0, r2
 80125ba:	4798      	blx	r3
 80125bc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125be:	e05d      	b.n	801267c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80125c0:	6839      	ldr	r1, [r7, #0]
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f000 fa76 	bl	8012ab4 <USBD_CtlError>
        err++;
 80125c8:	7afb      	ldrb	r3, [r7, #11]
 80125ca:	3301      	adds	r3, #1
 80125cc:	72fb      	strb	r3, [r7, #11]
      break;
 80125ce:	e055      	b.n	801267c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125d6:	691b      	ldr	r3, [r3, #16]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d00b      	beq.n	80125f4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80125e2:	691b      	ldr	r3, [r3, #16]
 80125e4:	687a      	ldr	r2, [r7, #4]
 80125e6:	7c12      	ldrb	r2, [r2, #16]
 80125e8:	f107 0108 	add.w	r1, r7, #8
 80125ec:	4610      	mov	r0, r2
 80125ee:	4798      	blx	r3
 80125f0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80125f2:	e043      	b.n	801267c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80125f4:	6839      	ldr	r1, [r7, #0]
 80125f6:	6878      	ldr	r0, [r7, #4]
 80125f8:	f000 fa5c 	bl	8012ab4 <USBD_CtlError>
        err++;
 80125fc:	7afb      	ldrb	r3, [r7, #11]
 80125fe:	3301      	adds	r3, #1
 8012600:	72fb      	strb	r3, [r7, #11]
      break;
 8012602:	e03b      	b.n	801267c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801260a:	695b      	ldr	r3, [r3, #20]
 801260c:	2b00      	cmp	r3, #0
 801260e:	d00b      	beq.n	8012628 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012616:	695b      	ldr	r3, [r3, #20]
 8012618:	687a      	ldr	r2, [r7, #4]
 801261a:	7c12      	ldrb	r2, [r2, #16]
 801261c:	f107 0108 	add.w	r1, r7, #8
 8012620:	4610      	mov	r0, r2
 8012622:	4798      	blx	r3
 8012624:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012626:	e029      	b.n	801267c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012628:	6839      	ldr	r1, [r7, #0]
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 fa42 	bl	8012ab4 <USBD_CtlError>
        err++;
 8012630:	7afb      	ldrb	r3, [r7, #11]
 8012632:	3301      	adds	r3, #1
 8012634:	72fb      	strb	r3, [r7, #11]
      break;
 8012636:	e021      	b.n	801267c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801263e:	699b      	ldr	r3, [r3, #24]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d00b      	beq.n	801265c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801264a:	699b      	ldr	r3, [r3, #24]
 801264c:	687a      	ldr	r2, [r7, #4]
 801264e:	7c12      	ldrb	r2, [r2, #16]
 8012650:	f107 0108 	add.w	r1, r7, #8
 8012654:	4610      	mov	r0, r2
 8012656:	4798      	blx	r3
 8012658:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801265a:	e00f      	b.n	801267c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 801265c:	6839      	ldr	r1, [r7, #0]
 801265e:	6878      	ldr	r0, [r7, #4]
 8012660:	f000 fa28 	bl	8012ab4 <USBD_CtlError>
        err++;
 8012664:	7afb      	ldrb	r3, [r7, #11]
 8012666:	3301      	adds	r3, #1
 8012668:	72fb      	strb	r3, [r7, #11]
      break;
 801266a:	e007      	b.n	801267c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801266c:	6839      	ldr	r1, [r7, #0]
 801266e:	6878      	ldr	r0, [r7, #4]
 8012670:	f000 fa20 	bl	8012ab4 <USBD_CtlError>
      err++;
 8012674:	7afb      	ldrb	r3, [r7, #11]
 8012676:	3301      	adds	r3, #1
 8012678:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801267a:	bf00      	nop
    }
    break;
 801267c:	e037      	b.n	80126ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	7c1b      	ldrb	r3, [r3, #16]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d109      	bne.n	801269a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801268c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801268e:	f107 0208 	add.w	r2, r7, #8
 8012692:	4610      	mov	r0, r2
 8012694:	4798      	blx	r3
 8012696:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012698:	e029      	b.n	80126ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 801269a:	6839      	ldr	r1, [r7, #0]
 801269c:	6878      	ldr	r0, [r7, #4]
 801269e:	f000 fa09 	bl	8012ab4 <USBD_CtlError>
      err++;
 80126a2:	7afb      	ldrb	r3, [r7, #11]
 80126a4:	3301      	adds	r3, #1
 80126a6:	72fb      	strb	r3, [r7, #11]
    break;
 80126a8:	e021      	b.n	80126ee <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	7c1b      	ldrb	r3, [r3, #16]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d10d      	bne.n	80126ce <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80126b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126ba:	f107 0208 	add.w	r2, r7, #8
 80126be:	4610      	mov	r0, r2
 80126c0:	4798      	blx	r3
 80126c2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	3301      	adds	r3, #1
 80126c8:	2207      	movs	r2, #7
 80126ca:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80126cc:	e00f      	b.n	80126ee <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 80126ce:	6839      	ldr	r1, [r7, #0]
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 f9ef 	bl	8012ab4 <USBD_CtlError>
      err++;
 80126d6:	7afb      	ldrb	r3, [r7, #11]
 80126d8:	3301      	adds	r3, #1
 80126da:	72fb      	strb	r3, [r7, #11]
    break;
 80126dc:	e007      	b.n	80126ee <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80126de:	6839      	ldr	r1, [r7, #0]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f000 f9e7 	bl	8012ab4 <USBD_CtlError>
    err++;
 80126e6:	7afb      	ldrb	r3, [r7, #11]
 80126e8:	3301      	adds	r3, #1
 80126ea:	72fb      	strb	r3, [r7, #11]
    break;
 80126ec:	bf00      	nop
  }

  if (err != 0U)
 80126ee:	7afb      	ldrb	r3, [r7, #11]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d11e      	bne.n	8012732 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	88db      	ldrh	r3, [r3, #6]
 80126f8:	2b00      	cmp	r3, #0
 80126fa:	d016      	beq.n	801272a <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80126fc:	893b      	ldrh	r3, [r7, #8]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d00e      	beq.n	8012720 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	88da      	ldrh	r2, [r3, #6]
 8012706:	893b      	ldrh	r3, [r7, #8]
 8012708:	4293      	cmp	r3, r2
 801270a:	bf28      	it	cs
 801270c:	4613      	movcs	r3, r2
 801270e:	b29b      	uxth	r3, r3
 8012710:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8012712:	893b      	ldrh	r3, [r7, #8]
 8012714:	461a      	mov	r2, r3
 8012716:	68f9      	ldr	r1, [r7, #12]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fa3c 	bl	8012b96 <USBD_CtlSendData>
 801271e:	e009      	b.n	8012734 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8012720:	6839      	ldr	r1, [r7, #0]
 8012722:	6878      	ldr	r0, [r7, #4]
 8012724:	f000 f9c6 	bl	8012ab4 <USBD_CtlError>
 8012728:	e004      	b.n	8012734 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 fa8d 	bl	8012c4a <USBD_CtlSendStatus>
 8012730:	e000      	b.n	8012734 <USBD_GetDescriptor+0x320>
    return;
 8012732:	bf00      	nop
    }
  }
}
 8012734:	3710      	adds	r7, #16
 8012736:	46bd      	mov	sp, r7
 8012738:	bd80      	pop	{r7, pc}
 801273a:	bf00      	nop

0801273c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801273c:	b580      	push	{r7, lr}
 801273e:	b084      	sub	sp, #16
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
 8012744:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012746:	683b      	ldr	r3, [r7, #0]
 8012748:	889b      	ldrh	r3, [r3, #4]
 801274a:	2b00      	cmp	r3, #0
 801274c:	d130      	bne.n	80127b0 <USBD_SetAddress+0x74>
 801274e:	683b      	ldr	r3, [r7, #0]
 8012750:	88db      	ldrh	r3, [r3, #6]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d12c      	bne.n	80127b0 <USBD_SetAddress+0x74>
 8012756:	683b      	ldr	r3, [r7, #0]
 8012758:	885b      	ldrh	r3, [r3, #2]
 801275a:	2b7f      	cmp	r3, #127	; 0x7f
 801275c:	d828      	bhi.n	80127b0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801275e:	683b      	ldr	r3, [r7, #0]
 8012760:	885b      	ldrh	r3, [r3, #2]
 8012762:	b2db      	uxtb	r3, r3
 8012764:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012768:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012770:	2b03      	cmp	r3, #3
 8012772:	d104      	bne.n	801277e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012774:	6839      	ldr	r1, [r7, #0]
 8012776:	6878      	ldr	r0, [r7, #4]
 8012778:	f000 f99c 	bl	8012ab4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801277c:	e01c      	b.n	80127b8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	7bfa      	ldrb	r2, [r7, #15]
 8012782:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012786:	7bfb      	ldrb	r3, [r7, #15]
 8012788:	4619      	mov	r1, r3
 801278a:	6878      	ldr	r0, [r7, #4]
 801278c:	f007 fe24 	bl	801a3d8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f000 fa5a 	bl	8012c4a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012796:	7bfb      	ldrb	r3, [r7, #15]
 8012798:	2b00      	cmp	r3, #0
 801279a:	d004      	beq.n	80127a6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	2202      	movs	r2, #2
 80127a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127a4:	e008      	b.n	80127b8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80127a6:	687b      	ldr	r3, [r7, #4]
 80127a8:	2201      	movs	r2, #1
 80127aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127ae:	e003      	b.n	80127b8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80127b0:	6839      	ldr	r1, [r7, #0]
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 f97e 	bl	8012ab4 <USBD_CtlError>
  }
}
 80127b8:	bf00      	nop
 80127ba:	3710      	adds	r7, #16
 80127bc:	46bd      	mov	sp, r7
 80127be:	bd80      	pop	{r7, pc}

080127c0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
 80127c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80127ca:	2300      	movs	r3, #0
 80127cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80127ce:	683b      	ldr	r3, [r7, #0]
 80127d0:	885b      	ldrh	r3, [r3, #2]
 80127d2:	b2da      	uxtb	r2, r3
 80127d4:	4b4b      	ldr	r3, [pc, #300]	; (8012904 <USBD_SetConfig+0x144>)
 80127d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80127d8:	4b4a      	ldr	r3, [pc, #296]	; (8012904 <USBD_SetConfig+0x144>)
 80127da:	781b      	ldrb	r3, [r3, #0]
 80127dc:	2b01      	cmp	r3, #1
 80127de:	d905      	bls.n	80127ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80127e0:	6839      	ldr	r1, [r7, #0]
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 f966 	bl	8012ab4 <USBD_CtlError>
    return USBD_FAIL;
 80127e8:	2303      	movs	r3, #3
 80127ea:	e087      	b.n	80128fc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127f2:	2b02      	cmp	r3, #2
 80127f4:	d002      	beq.n	80127fc <USBD_SetConfig+0x3c>
 80127f6:	2b03      	cmp	r3, #3
 80127f8:	d025      	beq.n	8012846 <USBD_SetConfig+0x86>
 80127fa:	e071      	b.n	80128e0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80127fc:	4b41      	ldr	r3, [pc, #260]	; (8012904 <USBD_SetConfig+0x144>)
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	2b00      	cmp	r3, #0
 8012802:	d01c      	beq.n	801283e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8012804:	4b3f      	ldr	r3, [pc, #252]	; (8012904 <USBD_SetConfig+0x144>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	461a      	mov	r2, r3
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 801280e:	4b3d      	ldr	r3, [pc, #244]	; (8012904 <USBD_SetConfig+0x144>)
 8012810:	781b      	ldrb	r3, [r3, #0]
 8012812:	4619      	mov	r1, r3
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7ff f97d 	bl	8011b14 <USBD_SetClassConfig>
 801281a:	4603      	mov	r3, r0
 801281c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 801281e:	7bfb      	ldrb	r3, [r7, #15]
 8012820:	2b00      	cmp	r3, #0
 8012822:	d004      	beq.n	801282e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8012824:	6839      	ldr	r1, [r7, #0]
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 f944 	bl	8012ab4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801282c:	e065      	b.n	80128fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801282e:	6878      	ldr	r0, [r7, #4]
 8012830:	f000 fa0b 	bl	8012c4a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	2203      	movs	r2, #3
 8012838:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801283c:	e05d      	b.n	80128fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801283e:	6878      	ldr	r0, [r7, #4]
 8012840:	f000 fa03 	bl	8012c4a <USBD_CtlSendStatus>
    break;
 8012844:	e059      	b.n	80128fa <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012846:	4b2f      	ldr	r3, [pc, #188]	; (8012904 <USBD_SetConfig+0x144>)
 8012848:	781b      	ldrb	r3, [r3, #0]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d112      	bne.n	8012874 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2202      	movs	r2, #2
 8012852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012856:	4b2b      	ldr	r3, [pc, #172]	; (8012904 <USBD_SetConfig+0x144>)
 8012858:	781b      	ldrb	r3, [r3, #0]
 801285a:	461a      	mov	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012860:	4b28      	ldr	r3, [pc, #160]	; (8012904 <USBD_SetConfig+0x144>)
 8012862:	781b      	ldrb	r3, [r3, #0]
 8012864:	4619      	mov	r1, r3
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	f7ff f970 	bl	8011b4c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801286c:	6878      	ldr	r0, [r7, #4]
 801286e:	f000 f9ec 	bl	8012c4a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012872:	e042      	b.n	80128fa <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012874:	4b23      	ldr	r3, [pc, #140]	; (8012904 <USBD_SetConfig+0x144>)
 8012876:	781b      	ldrb	r3, [r3, #0]
 8012878:	461a      	mov	r2, r3
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	685b      	ldr	r3, [r3, #4]
 801287e:	429a      	cmp	r2, r3
 8012880:	d02a      	beq.n	80128d8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	685b      	ldr	r3, [r3, #4]
 8012886:	b2db      	uxtb	r3, r3
 8012888:	4619      	mov	r1, r3
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f7ff f95e 	bl	8011b4c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012890:	4b1c      	ldr	r3, [pc, #112]	; (8012904 <USBD_SetConfig+0x144>)
 8012892:	781b      	ldrb	r3, [r3, #0]
 8012894:	461a      	mov	r2, r3
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801289a:	4b1a      	ldr	r3, [pc, #104]	; (8012904 <USBD_SetConfig+0x144>)
 801289c:	781b      	ldrb	r3, [r3, #0]
 801289e:	4619      	mov	r1, r3
 80128a0:	6878      	ldr	r0, [r7, #4]
 80128a2:	f7ff f937 	bl	8011b14 <USBD_SetClassConfig>
 80128a6:	4603      	mov	r3, r0
 80128a8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80128aa:	7bfb      	ldrb	r3, [r7, #15]
 80128ac:	2b00      	cmp	r3, #0
 80128ae:	d00f      	beq.n	80128d0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80128b0:	6839      	ldr	r1, [r7, #0]
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f000 f8fe 	bl	8012ab4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	685b      	ldr	r3, [r3, #4]
 80128bc:	b2db      	uxtb	r3, r3
 80128be:	4619      	mov	r1, r3
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f7ff f943 	bl	8011b4c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	2202      	movs	r2, #2
 80128ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80128ce:	e014      	b.n	80128fa <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f000 f9ba 	bl	8012c4a <USBD_CtlSendStatus>
    break;
 80128d6:	e010      	b.n	80128fa <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80128d8:	6878      	ldr	r0, [r7, #4]
 80128da:	f000 f9b6 	bl	8012c4a <USBD_CtlSendStatus>
    break;
 80128de:	e00c      	b.n	80128fa <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80128e0:	6839      	ldr	r1, [r7, #0]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f000 f8e6 	bl	8012ab4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80128e8:	4b06      	ldr	r3, [pc, #24]	; (8012904 <USBD_SetConfig+0x144>)
 80128ea:	781b      	ldrb	r3, [r3, #0]
 80128ec:	4619      	mov	r1, r3
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f7ff f92c 	bl	8011b4c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80128f4:	2303      	movs	r3, #3
 80128f6:	73fb      	strb	r3, [r7, #15]
    break;
 80128f8:	bf00      	nop
  }

  return ret;
 80128fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80128fc:	4618      	mov	r0, r3
 80128fe:	3710      	adds	r7, #16
 8012900:	46bd      	mov	sp, r7
 8012902:	bd80      	pop	{r7, pc}
 8012904:	2000033c 	.word	0x2000033c

08012908 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012908:	b580      	push	{r7, lr}
 801290a:	b082      	sub	sp, #8
 801290c:	af00      	add	r7, sp, #0
 801290e:	6078      	str	r0, [r7, #4]
 8012910:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012912:	683b      	ldr	r3, [r7, #0]
 8012914:	88db      	ldrh	r3, [r3, #6]
 8012916:	2b01      	cmp	r3, #1
 8012918:	d004      	beq.n	8012924 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801291a:	6839      	ldr	r1, [r7, #0]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 f8c9 	bl	8012ab4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8012922:	e021      	b.n	8012968 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801292a:	2b01      	cmp	r3, #1
 801292c:	db17      	blt.n	801295e <USBD_GetConfig+0x56>
 801292e:	2b02      	cmp	r3, #2
 8012930:	dd02      	ble.n	8012938 <USBD_GetConfig+0x30>
 8012932:	2b03      	cmp	r3, #3
 8012934:	d00b      	beq.n	801294e <USBD_GetConfig+0x46>
 8012936:	e012      	b.n	801295e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2200      	movs	r2, #0
 801293c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801293e:	687b      	ldr	r3, [r7, #4]
 8012940:	3308      	adds	r3, #8
 8012942:	2201      	movs	r2, #1
 8012944:	4619      	mov	r1, r3
 8012946:	6878      	ldr	r0, [r7, #4]
 8012948:	f000 f925 	bl	8012b96 <USBD_CtlSendData>
      break;
 801294c:	e00c      	b.n	8012968 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	3304      	adds	r3, #4
 8012952:	2201      	movs	r2, #1
 8012954:	4619      	mov	r1, r3
 8012956:	6878      	ldr	r0, [r7, #4]
 8012958:	f000 f91d 	bl	8012b96 <USBD_CtlSendData>
      break;
 801295c:	e004      	b.n	8012968 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801295e:	6839      	ldr	r1, [r7, #0]
 8012960:	6878      	ldr	r0, [r7, #4]
 8012962:	f000 f8a7 	bl	8012ab4 <USBD_CtlError>
      break;
 8012966:	bf00      	nop
}
 8012968:	bf00      	nop
 801296a:	3708      	adds	r7, #8
 801296c:	46bd      	mov	sp, r7
 801296e:	bd80      	pop	{r7, pc}

08012970 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012970:	b580      	push	{r7, lr}
 8012972:	b082      	sub	sp, #8
 8012974:	af00      	add	r7, sp, #0
 8012976:	6078      	str	r0, [r7, #4]
 8012978:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012980:	3b01      	subs	r3, #1
 8012982:	2b02      	cmp	r3, #2
 8012984:	d81e      	bhi.n	80129c4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	88db      	ldrh	r3, [r3, #6]
 801298a:	2b02      	cmp	r3, #2
 801298c:	d004      	beq.n	8012998 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801298e:	6839      	ldr	r1, [r7, #0]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f000 f88f 	bl	8012ab4 <USBD_CtlError>
      break;
 8012996:	e01a      	b.n	80129ce <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2201      	movs	r2, #1
 801299c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d005      	beq.n	80129b4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	68db      	ldr	r3, [r3, #12]
 80129ac:	f043 0202 	orr.w	r2, r3, #2
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	330c      	adds	r3, #12
 80129b8:	2202      	movs	r2, #2
 80129ba:	4619      	mov	r1, r3
 80129bc:	6878      	ldr	r0, [r7, #4]
 80129be:	f000 f8ea 	bl	8012b96 <USBD_CtlSendData>
    break;
 80129c2:	e004      	b.n	80129ce <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80129c4:	6839      	ldr	r1, [r7, #0]
 80129c6:	6878      	ldr	r0, [r7, #4]
 80129c8:	f000 f874 	bl	8012ab4 <USBD_CtlError>
    break;
 80129cc:	bf00      	nop
  }
}
 80129ce:	bf00      	nop
 80129d0:	3708      	adds	r7, #8
 80129d2:	46bd      	mov	sp, r7
 80129d4:	bd80      	pop	{r7, pc}

080129d6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129d6:	b580      	push	{r7, lr}
 80129d8:	b082      	sub	sp, #8
 80129da:	af00      	add	r7, sp, #0
 80129dc:	6078      	str	r0, [r7, #4]
 80129de:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80129e0:	683b      	ldr	r3, [r7, #0]
 80129e2:	885b      	ldrh	r3, [r3, #2]
 80129e4:	2b01      	cmp	r3, #1
 80129e6:	d106      	bne.n	80129f6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	2201      	movs	r2, #1
 80129ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80129f0:	6878      	ldr	r0, [r7, #4]
 80129f2:	f000 f92a 	bl	8012c4a <USBD_CtlSendStatus>
  }
}
 80129f6:	bf00      	nop
 80129f8:	3708      	adds	r7, #8
 80129fa:	46bd      	mov	sp, r7
 80129fc:	bd80      	pop	{r7, pc}

080129fe <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80129fe:	b580      	push	{r7, lr}
 8012a00:	b082      	sub	sp, #8
 8012a02:	af00      	add	r7, sp, #0
 8012a04:	6078      	str	r0, [r7, #4]
 8012a06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012a0e:	3b01      	subs	r3, #1
 8012a10:	2b02      	cmp	r3, #2
 8012a12:	d80b      	bhi.n	8012a2c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012a14:	683b      	ldr	r3, [r7, #0]
 8012a16:	885b      	ldrh	r3, [r3, #2]
 8012a18:	2b01      	cmp	r3, #1
 8012a1a:	d10c      	bne.n	8012a36 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2200      	movs	r2, #0
 8012a20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012a24:	6878      	ldr	r0, [r7, #4]
 8012a26:	f000 f910 	bl	8012c4a <USBD_CtlSendStatus>
      }
      break;
 8012a2a:	e004      	b.n	8012a36 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8012a2c:	6839      	ldr	r1, [r7, #0]
 8012a2e:	6878      	ldr	r0, [r7, #4]
 8012a30:	f000 f840 	bl	8012ab4 <USBD_CtlError>
      break;
 8012a34:	e000      	b.n	8012a38 <USBD_ClrFeature+0x3a>
      break;
 8012a36:	bf00      	nop
  }
}
 8012a38:	bf00      	nop
 8012a3a:	3708      	adds	r7, #8
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	bd80      	pop	{r7, pc}

08012a40 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012a40:	b580      	push	{r7, lr}
 8012a42:	b084      	sub	sp, #16
 8012a44:	af00      	add	r7, sp, #0
 8012a46:	6078      	str	r0, [r7, #4]
 8012a48:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012a4a:	683b      	ldr	r3, [r7, #0]
 8012a4c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012a4e:	68fb      	ldr	r3, [r7, #12]
 8012a50:	781a      	ldrb	r2, [r3, #0]
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012a56:	68fb      	ldr	r3, [r7, #12]
 8012a58:	3301      	adds	r3, #1
 8012a5a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	781a      	ldrb	r2, [r3, #0]
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012a64:	68fb      	ldr	r3, [r7, #12]
 8012a66:	3301      	adds	r3, #1
 8012a68:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012a6a:	68f8      	ldr	r0, [r7, #12]
 8012a6c:	f7ff faa9 	bl	8011fc2 <SWAPBYTE>
 8012a70:	4603      	mov	r3, r0
 8012a72:	461a      	mov	r2, r3
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	3301      	adds	r3, #1
 8012a82:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012a84:	68f8      	ldr	r0, [r7, #12]
 8012a86:	f7ff fa9c 	bl	8011fc2 <SWAPBYTE>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	3301      	adds	r3, #1
 8012a96:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012a98:	68fb      	ldr	r3, [r7, #12]
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012a9e:	68f8      	ldr	r0, [r7, #12]
 8012aa0:	f7ff fa8f 	bl	8011fc2 <SWAPBYTE>
 8012aa4:	4603      	mov	r3, r0
 8012aa6:	461a      	mov	r2, r3
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	80da      	strh	r2, [r3, #6]
}
 8012aac:	bf00      	nop
 8012aae:	3710      	adds	r7, #16
 8012ab0:	46bd      	mov	sp, r7
 8012ab2:	bd80      	pop	{r7, pc}

08012ab4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012abe:	2180      	movs	r1, #128	; 0x80
 8012ac0:	6878      	ldr	r0, [r7, #4]
 8012ac2:	f007 fc1f 	bl	801a304 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012ac6:	2100      	movs	r1, #0
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	f007 fc1b 	bl	801a304 <USBD_LL_StallEP>
}
 8012ace:	bf00      	nop
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012ad6:	b580      	push	{r7, lr}
 8012ad8:	b086      	sub	sp, #24
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	60f8      	str	r0, [r7, #12]
 8012ade:	60b9      	str	r1, [r7, #8]
 8012ae0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012ae6:	68fb      	ldr	r3, [r7, #12]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d036      	beq.n	8012b5a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012af0:	6938      	ldr	r0, [r7, #16]
 8012af2:	f000 f836 	bl	8012b62 <USBD_GetLen>
 8012af6:	4603      	mov	r3, r0
 8012af8:	3301      	adds	r3, #1
 8012afa:	b29b      	uxth	r3, r3
 8012afc:	005b      	lsls	r3, r3, #1
 8012afe:	b29a      	uxth	r2, r3
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012b04:	7dfb      	ldrb	r3, [r7, #23]
 8012b06:	68ba      	ldr	r2, [r7, #8]
 8012b08:	4413      	add	r3, r2
 8012b0a:	687a      	ldr	r2, [r7, #4]
 8012b0c:	7812      	ldrb	r2, [r2, #0]
 8012b0e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b10:	7dfb      	ldrb	r3, [r7, #23]
 8012b12:	3301      	adds	r3, #1
 8012b14:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012b16:	7dfb      	ldrb	r3, [r7, #23]
 8012b18:	68ba      	ldr	r2, [r7, #8]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	2203      	movs	r2, #3
 8012b1e:	701a      	strb	r2, [r3, #0]
  idx++;
 8012b20:	7dfb      	ldrb	r3, [r7, #23]
 8012b22:	3301      	adds	r3, #1
 8012b24:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8012b26:	e013      	b.n	8012b50 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8012b28:	7dfb      	ldrb	r3, [r7, #23]
 8012b2a:	68ba      	ldr	r2, [r7, #8]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	693a      	ldr	r2, [r7, #16]
 8012b30:	7812      	ldrb	r2, [r2, #0]
 8012b32:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012b34:	693b      	ldr	r3, [r7, #16]
 8012b36:	3301      	adds	r3, #1
 8012b38:	613b      	str	r3, [r7, #16]
    idx++;
 8012b3a:	7dfb      	ldrb	r3, [r7, #23]
 8012b3c:	3301      	adds	r3, #1
 8012b3e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012b40:	7dfb      	ldrb	r3, [r7, #23]
 8012b42:	68ba      	ldr	r2, [r7, #8]
 8012b44:	4413      	add	r3, r2
 8012b46:	2200      	movs	r2, #0
 8012b48:	701a      	strb	r2, [r3, #0]
    idx++;
 8012b4a:	7dfb      	ldrb	r3, [r7, #23]
 8012b4c:	3301      	adds	r3, #1
 8012b4e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012b50:	693b      	ldr	r3, [r7, #16]
 8012b52:	781b      	ldrb	r3, [r3, #0]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d1e7      	bne.n	8012b28 <USBD_GetString+0x52>
 8012b58:	e000      	b.n	8012b5c <USBD_GetString+0x86>
    return;
 8012b5a:	bf00      	nop
  }
}
 8012b5c:	3718      	adds	r7, #24
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	bd80      	pop	{r7, pc}

08012b62 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012b62:	b480      	push	{r7}
 8012b64:	b085      	sub	sp, #20
 8012b66:	af00      	add	r7, sp, #0
 8012b68:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012b6a:	2300      	movs	r3, #0
 8012b6c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012b72:	e005      	b.n	8012b80 <USBD_GetLen+0x1e>
  {
    len++;
 8012b74:	7bfb      	ldrb	r3, [r7, #15]
 8012b76:	3301      	adds	r3, #1
 8012b78:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012b80:	68bb      	ldr	r3, [r7, #8]
 8012b82:	781b      	ldrb	r3, [r3, #0]
 8012b84:	2b00      	cmp	r3, #0
 8012b86:	d1f5      	bne.n	8012b74 <USBD_GetLen+0x12>
  }

  return len;
 8012b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b8a:	4618      	mov	r0, r3
 8012b8c:	3714      	adds	r7, #20
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b94:	4770      	bx	lr

08012b96 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012b96:	b580      	push	{r7, lr}
 8012b98:	b084      	sub	sp, #16
 8012b9a:	af00      	add	r7, sp, #0
 8012b9c:	60f8      	str	r0, [r7, #12]
 8012b9e:	60b9      	str	r1, [r7, #8]
 8012ba0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	2202      	movs	r2, #2
 8012ba6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	687a      	ldr	r2, [r7, #4]
 8012bae:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012bb0:	68fb      	ldr	r3, [r7, #12]
 8012bb2:	687a      	ldr	r2, [r7, #4]
 8012bb4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	68ba      	ldr	r2, [r7, #8]
 8012bba:	2100      	movs	r1, #0
 8012bbc:	68f8      	ldr	r0, [r7, #12]
 8012bbe:	f007 fc2a 	bl	801a416 <USBD_LL_Transmit>

  return USBD_OK;
 8012bc2:	2300      	movs	r3, #0
}
 8012bc4:	4618      	mov	r0, r3
 8012bc6:	3710      	adds	r7, #16
 8012bc8:	46bd      	mov	sp, r7
 8012bca:	bd80      	pop	{r7, pc}

08012bcc <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012bcc:	b580      	push	{r7, lr}
 8012bce:	b084      	sub	sp, #16
 8012bd0:	af00      	add	r7, sp, #0
 8012bd2:	60f8      	str	r0, [r7, #12]
 8012bd4:	60b9      	str	r1, [r7, #8]
 8012bd6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	68ba      	ldr	r2, [r7, #8]
 8012bdc:	2100      	movs	r1, #0
 8012bde:	68f8      	ldr	r0, [r7, #12]
 8012be0:	f007 fc19 	bl	801a416 <USBD_LL_Transmit>

  return USBD_OK;
 8012be4:	2300      	movs	r3, #0
}
 8012be6:	4618      	mov	r0, r3
 8012be8:	3710      	adds	r7, #16
 8012bea:	46bd      	mov	sp, r7
 8012bec:	bd80      	pop	{r7, pc}

08012bee <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012bee:	b580      	push	{r7, lr}
 8012bf0:	b084      	sub	sp, #16
 8012bf2:	af00      	add	r7, sp, #0
 8012bf4:	60f8      	str	r0, [r7, #12]
 8012bf6:	60b9      	str	r1, [r7, #8]
 8012bf8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	2203      	movs	r2, #3
 8012bfe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	687a      	ldr	r2, [r7, #4]
 8012c06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	687a      	ldr	r2, [r7, #4]
 8012c0e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	68ba      	ldr	r2, [r7, #8]
 8012c16:	2100      	movs	r1, #0
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f007 fc1d 	bl	801a458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c1e:	2300      	movs	r3, #0
}
 8012c20:	4618      	mov	r0, r3
 8012c22:	3710      	adds	r7, #16
 8012c24:	46bd      	mov	sp, r7
 8012c26:	bd80      	pop	{r7, pc}

08012c28 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b084      	sub	sp, #16
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60f8      	str	r0, [r7, #12]
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	68ba      	ldr	r2, [r7, #8]
 8012c38:	2100      	movs	r1, #0
 8012c3a:	68f8      	ldr	r0, [r7, #12]
 8012c3c:	f007 fc0c 	bl	801a458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c40:	2300      	movs	r3, #0
}
 8012c42:	4618      	mov	r0, r3
 8012c44:	3710      	adds	r7, #16
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}

08012c4a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012c4a:	b580      	push	{r7, lr}
 8012c4c:	b082      	sub	sp, #8
 8012c4e:	af00      	add	r7, sp, #0
 8012c50:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	2204      	movs	r2, #4
 8012c56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012c5a:	2300      	movs	r3, #0
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	2100      	movs	r1, #0
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f007 fbd8 	bl	801a416 <USBD_LL_Transmit>

  return USBD_OK;
 8012c66:	2300      	movs	r3, #0
}
 8012c68:	4618      	mov	r0, r3
 8012c6a:	3708      	adds	r7, #8
 8012c6c:	46bd      	mov	sp, r7
 8012c6e:	bd80      	pop	{r7, pc}

08012c70 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012c70:	b580      	push	{r7, lr}
 8012c72:	b082      	sub	sp, #8
 8012c74:	af00      	add	r7, sp, #0
 8012c76:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	2205      	movs	r2, #5
 8012c7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012c80:	2300      	movs	r3, #0
 8012c82:	2200      	movs	r2, #0
 8012c84:	2100      	movs	r1, #0
 8012c86:	6878      	ldr	r0, [r7, #4]
 8012c88:	f007 fbe6 	bl	801a458 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012c8c:	2300      	movs	r3, #0
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	3708      	adds	r7, #8
 8012c92:	46bd      	mov	sp, r7
 8012c94:	bd80      	pop	{r7, pc}
	...

08012c98 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	4603      	mov	r3, r0
 8012ca0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012ca2:	79fb      	ldrb	r3, [r7, #7]
 8012ca4:	4a08      	ldr	r2, [pc, #32]	; (8012cc8 <disk_status+0x30>)
 8012ca6:	009b      	lsls	r3, r3, #2
 8012ca8:	4413      	add	r3, r2
 8012caa:	685b      	ldr	r3, [r3, #4]
 8012cac:	685b      	ldr	r3, [r3, #4]
 8012cae:	79fa      	ldrb	r2, [r7, #7]
 8012cb0:	4905      	ldr	r1, [pc, #20]	; (8012cc8 <disk_status+0x30>)
 8012cb2:	440a      	add	r2, r1
 8012cb4:	7a12      	ldrb	r2, [r2, #8]
 8012cb6:	4610      	mov	r0, r2
 8012cb8:	4798      	blx	r3
 8012cba:	4603      	mov	r3, r0
 8012cbc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012cc0:	4618      	mov	r0, r3
 8012cc2:	3710      	adds	r7, #16
 8012cc4:	46bd      	mov	sp, r7
 8012cc6:	bd80      	pop	{r7, pc}
 8012cc8:	20000368 	.word	0x20000368

08012ccc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012cd6:	2300      	movs	r3, #0
 8012cd8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012cda:	79fb      	ldrb	r3, [r7, #7]
 8012cdc:	4a0d      	ldr	r2, [pc, #52]	; (8012d14 <disk_initialize+0x48>)
 8012cde:	5cd3      	ldrb	r3, [r2, r3]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d111      	bne.n	8012d08 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012ce4:	79fb      	ldrb	r3, [r7, #7]
 8012ce6:	4a0b      	ldr	r2, [pc, #44]	; (8012d14 <disk_initialize+0x48>)
 8012ce8:	2101      	movs	r1, #1
 8012cea:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012cec:	79fb      	ldrb	r3, [r7, #7]
 8012cee:	4a09      	ldr	r2, [pc, #36]	; (8012d14 <disk_initialize+0x48>)
 8012cf0:	009b      	lsls	r3, r3, #2
 8012cf2:	4413      	add	r3, r2
 8012cf4:	685b      	ldr	r3, [r3, #4]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	79fa      	ldrb	r2, [r7, #7]
 8012cfa:	4906      	ldr	r1, [pc, #24]	; (8012d14 <disk_initialize+0x48>)
 8012cfc:	440a      	add	r2, r1
 8012cfe:	7a12      	ldrb	r2, [r2, #8]
 8012d00:	4610      	mov	r0, r2
 8012d02:	4798      	blx	r3
 8012d04:	4603      	mov	r3, r0
 8012d06:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d0a:	4618      	mov	r0, r3
 8012d0c:	3710      	adds	r7, #16
 8012d0e:	46bd      	mov	sp, r7
 8012d10:	bd80      	pop	{r7, pc}
 8012d12:	bf00      	nop
 8012d14:	20000368 	.word	0x20000368

08012d18 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012d18:	b590      	push	{r4, r7, lr}
 8012d1a:	b087      	sub	sp, #28
 8012d1c:	af00      	add	r7, sp, #0
 8012d1e:	60b9      	str	r1, [r7, #8]
 8012d20:	607a      	str	r2, [r7, #4]
 8012d22:	603b      	str	r3, [r7, #0]
 8012d24:	4603      	mov	r3, r0
 8012d26:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012d28:	7bfb      	ldrb	r3, [r7, #15]
 8012d2a:	4a0a      	ldr	r2, [pc, #40]	; (8012d54 <disk_read+0x3c>)
 8012d2c:	009b      	lsls	r3, r3, #2
 8012d2e:	4413      	add	r3, r2
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	689c      	ldr	r4, [r3, #8]
 8012d34:	7bfb      	ldrb	r3, [r7, #15]
 8012d36:	4a07      	ldr	r2, [pc, #28]	; (8012d54 <disk_read+0x3c>)
 8012d38:	4413      	add	r3, r2
 8012d3a:	7a18      	ldrb	r0, [r3, #8]
 8012d3c:	683b      	ldr	r3, [r7, #0]
 8012d3e:	687a      	ldr	r2, [r7, #4]
 8012d40:	68b9      	ldr	r1, [r7, #8]
 8012d42:	47a0      	blx	r4
 8012d44:	4603      	mov	r3, r0
 8012d46:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d48:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	371c      	adds	r7, #28
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd90      	pop	{r4, r7, pc}
 8012d52:	bf00      	nop
 8012d54:	20000368 	.word	0x20000368

08012d58 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012d58:	b590      	push	{r4, r7, lr}
 8012d5a:	b087      	sub	sp, #28
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	60b9      	str	r1, [r7, #8]
 8012d60:	607a      	str	r2, [r7, #4]
 8012d62:	603b      	str	r3, [r7, #0]
 8012d64:	4603      	mov	r3, r0
 8012d66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012d68:	7bfb      	ldrb	r3, [r7, #15]
 8012d6a:	4a0a      	ldr	r2, [pc, #40]	; (8012d94 <disk_write+0x3c>)
 8012d6c:	009b      	lsls	r3, r3, #2
 8012d6e:	4413      	add	r3, r2
 8012d70:	685b      	ldr	r3, [r3, #4]
 8012d72:	68dc      	ldr	r4, [r3, #12]
 8012d74:	7bfb      	ldrb	r3, [r7, #15]
 8012d76:	4a07      	ldr	r2, [pc, #28]	; (8012d94 <disk_write+0x3c>)
 8012d78:	4413      	add	r3, r2
 8012d7a:	7a18      	ldrb	r0, [r3, #8]
 8012d7c:	683b      	ldr	r3, [r7, #0]
 8012d7e:	687a      	ldr	r2, [r7, #4]
 8012d80:	68b9      	ldr	r1, [r7, #8]
 8012d82:	47a0      	blx	r4
 8012d84:	4603      	mov	r3, r0
 8012d86:	75fb      	strb	r3, [r7, #23]
  return res;
 8012d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	371c      	adds	r7, #28
 8012d8e:	46bd      	mov	sp, r7
 8012d90:	bd90      	pop	{r4, r7, pc}
 8012d92:	bf00      	nop
 8012d94:	20000368 	.word	0x20000368

08012d98 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b084      	sub	sp, #16
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	4603      	mov	r3, r0
 8012da0:	603a      	str	r2, [r7, #0]
 8012da2:	71fb      	strb	r3, [r7, #7]
 8012da4:	460b      	mov	r3, r1
 8012da6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012da8:	79fb      	ldrb	r3, [r7, #7]
 8012daa:	4a09      	ldr	r2, [pc, #36]	; (8012dd0 <disk_ioctl+0x38>)
 8012dac:	009b      	lsls	r3, r3, #2
 8012dae:	4413      	add	r3, r2
 8012db0:	685b      	ldr	r3, [r3, #4]
 8012db2:	691b      	ldr	r3, [r3, #16]
 8012db4:	79fa      	ldrb	r2, [r7, #7]
 8012db6:	4906      	ldr	r1, [pc, #24]	; (8012dd0 <disk_ioctl+0x38>)
 8012db8:	440a      	add	r2, r1
 8012dba:	7a10      	ldrb	r0, [r2, #8]
 8012dbc:	79b9      	ldrb	r1, [r7, #6]
 8012dbe:	683a      	ldr	r2, [r7, #0]
 8012dc0:	4798      	blx	r3
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	73fb      	strb	r3, [r7, #15]
  return res;
 8012dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dc8:	4618      	mov	r0, r3
 8012dca:	3710      	adds	r7, #16
 8012dcc:	46bd      	mov	sp, r7
 8012dce:	bd80      	pop	{r7, pc}
 8012dd0:	20000368 	.word	0x20000368

08012dd4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012dd4:	b480      	push	{r7}
 8012dd6:	b085      	sub	sp, #20
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012ddc:	687b      	ldr	r3, [r7, #4]
 8012dde:	3301      	adds	r3, #1
 8012de0:	781b      	ldrb	r3, [r3, #0]
 8012de2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012de4:	89fb      	ldrh	r3, [r7, #14]
 8012de6:	021b      	lsls	r3, r3, #8
 8012de8:	b21a      	sxth	r2, r3
 8012dea:	687b      	ldr	r3, [r7, #4]
 8012dec:	781b      	ldrb	r3, [r3, #0]
 8012dee:	b21b      	sxth	r3, r3
 8012df0:	4313      	orrs	r3, r2
 8012df2:	b21b      	sxth	r3, r3
 8012df4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012df6:	89fb      	ldrh	r3, [r7, #14]
}
 8012df8:	4618      	mov	r0, r3
 8012dfa:	3714      	adds	r7, #20
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr

08012e04 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012e04:	b480      	push	{r7}
 8012e06:	b085      	sub	sp, #20
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	3303      	adds	r3, #3
 8012e10:	781b      	ldrb	r3, [r3, #0]
 8012e12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	021b      	lsls	r3, r3, #8
 8012e18:	687a      	ldr	r2, [r7, #4]
 8012e1a:	3202      	adds	r2, #2
 8012e1c:	7812      	ldrb	r2, [r2, #0]
 8012e1e:	4313      	orrs	r3, r2
 8012e20:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	021b      	lsls	r3, r3, #8
 8012e26:	687a      	ldr	r2, [r7, #4]
 8012e28:	3201      	adds	r2, #1
 8012e2a:	7812      	ldrb	r2, [r2, #0]
 8012e2c:	4313      	orrs	r3, r2
 8012e2e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	021b      	lsls	r3, r3, #8
 8012e34:	687a      	ldr	r2, [r7, #4]
 8012e36:	7812      	ldrb	r2, [r2, #0]
 8012e38:	4313      	orrs	r3, r2
 8012e3a:	60fb      	str	r3, [r7, #12]
	return rv;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3714      	adds	r7, #20
 8012e42:	46bd      	mov	sp, r7
 8012e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e48:	4770      	bx	lr

08012e4a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012e4a:	b480      	push	{r7}
 8012e4c:	b083      	sub	sp, #12
 8012e4e:	af00      	add	r7, sp, #0
 8012e50:	6078      	str	r0, [r7, #4]
 8012e52:	460b      	mov	r3, r1
 8012e54:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e56:	687b      	ldr	r3, [r7, #4]
 8012e58:	1c5a      	adds	r2, r3, #1
 8012e5a:	607a      	str	r2, [r7, #4]
 8012e5c:	887a      	ldrh	r2, [r7, #2]
 8012e5e:	b2d2      	uxtb	r2, r2
 8012e60:	701a      	strb	r2, [r3, #0]
 8012e62:	887b      	ldrh	r3, [r7, #2]
 8012e64:	0a1b      	lsrs	r3, r3, #8
 8012e66:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	1c5a      	adds	r2, r3, #1
 8012e6c:	607a      	str	r2, [r7, #4]
 8012e6e:	887a      	ldrh	r2, [r7, #2]
 8012e70:	b2d2      	uxtb	r2, r2
 8012e72:	701a      	strb	r2, [r3, #0]
}
 8012e74:	bf00      	nop
 8012e76:	370c      	adds	r7, #12
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e7e:	4770      	bx	lr

08012e80 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012e80:	b480      	push	{r7}
 8012e82:	b083      	sub	sp, #12
 8012e84:	af00      	add	r7, sp, #0
 8012e86:	6078      	str	r0, [r7, #4]
 8012e88:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	1c5a      	adds	r2, r3, #1
 8012e8e:	607a      	str	r2, [r7, #4]
 8012e90:	683a      	ldr	r2, [r7, #0]
 8012e92:	b2d2      	uxtb	r2, r2
 8012e94:	701a      	strb	r2, [r3, #0]
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	0a1b      	lsrs	r3, r3, #8
 8012e9a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	1c5a      	adds	r2, r3, #1
 8012ea0:	607a      	str	r2, [r7, #4]
 8012ea2:	683a      	ldr	r2, [r7, #0]
 8012ea4:	b2d2      	uxtb	r2, r2
 8012ea6:	701a      	strb	r2, [r3, #0]
 8012ea8:	683b      	ldr	r3, [r7, #0]
 8012eaa:	0a1b      	lsrs	r3, r3, #8
 8012eac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	1c5a      	adds	r2, r3, #1
 8012eb2:	607a      	str	r2, [r7, #4]
 8012eb4:	683a      	ldr	r2, [r7, #0]
 8012eb6:	b2d2      	uxtb	r2, r2
 8012eb8:	701a      	strb	r2, [r3, #0]
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	0a1b      	lsrs	r3, r3, #8
 8012ebe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	1c5a      	adds	r2, r3, #1
 8012ec4:	607a      	str	r2, [r7, #4]
 8012ec6:	683a      	ldr	r2, [r7, #0]
 8012ec8:	b2d2      	uxtb	r2, r2
 8012eca:	701a      	strb	r2, [r3, #0]
}
 8012ecc:	bf00      	nop
 8012ece:	370c      	adds	r7, #12
 8012ed0:	46bd      	mov	sp, r7
 8012ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed6:	4770      	bx	lr

08012ed8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012ed8:	b480      	push	{r7}
 8012eda:	b087      	sub	sp, #28
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	60f8      	str	r0, [r7, #12]
 8012ee0:	60b9      	str	r1, [r7, #8]
 8012ee2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d00d      	beq.n	8012f0e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012ef2:	693a      	ldr	r2, [r7, #16]
 8012ef4:	1c53      	adds	r3, r2, #1
 8012ef6:	613b      	str	r3, [r7, #16]
 8012ef8:	697b      	ldr	r3, [r7, #20]
 8012efa:	1c59      	adds	r1, r3, #1
 8012efc:	6179      	str	r1, [r7, #20]
 8012efe:	7812      	ldrb	r2, [r2, #0]
 8012f00:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	3b01      	subs	r3, #1
 8012f06:	607b      	str	r3, [r7, #4]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d1f1      	bne.n	8012ef2 <mem_cpy+0x1a>
	}
}
 8012f0e:	bf00      	nop
 8012f10:	371c      	adds	r7, #28
 8012f12:	46bd      	mov	sp, r7
 8012f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f18:	4770      	bx	lr

08012f1a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012f1a:	b480      	push	{r7}
 8012f1c:	b087      	sub	sp, #28
 8012f1e:	af00      	add	r7, sp, #0
 8012f20:	60f8      	str	r0, [r7, #12]
 8012f22:	60b9      	str	r1, [r7, #8]
 8012f24:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012f26:	68fb      	ldr	r3, [r7, #12]
 8012f28:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012f2a:	697b      	ldr	r3, [r7, #20]
 8012f2c:	1c5a      	adds	r2, r3, #1
 8012f2e:	617a      	str	r2, [r7, #20]
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	b2d2      	uxtb	r2, r2
 8012f34:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	3b01      	subs	r3, #1
 8012f3a:	607b      	str	r3, [r7, #4]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1f3      	bne.n	8012f2a <mem_set+0x10>
}
 8012f42:	bf00      	nop
 8012f44:	371c      	adds	r7, #28
 8012f46:	46bd      	mov	sp, r7
 8012f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f4c:	4770      	bx	lr

08012f4e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012f4e:	b480      	push	{r7}
 8012f50:	b089      	sub	sp, #36	; 0x24
 8012f52:	af00      	add	r7, sp, #0
 8012f54:	60f8      	str	r0, [r7, #12]
 8012f56:	60b9      	str	r1, [r7, #8]
 8012f58:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012f5a:	68fb      	ldr	r3, [r7, #12]
 8012f5c:	61fb      	str	r3, [r7, #28]
 8012f5e:	68bb      	ldr	r3, [r7, #8]
 8012f60:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012f62:	2300      	movs	r3, #0
 8012f64:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012f66:	69fb      	ldr	r3, [r7, #28]
 8012f68:	1c5a      	adds	r2, r3, #1
 8012f6a:	61fa      	str	r2, [r7, #28]
 8012f6c:	781b      	ldrb	r3, [r3, #0]
 8012f6e:	4619      	mov	r1, r3
 8012f70:	69bb      	ldr	r3, [r7, #24]
 8012f72:	1c5a      	adds	r2, r3, #1
 8012f74:	61ba      	str	r2, [r7, #24]
 8012f76:	781b      	ldrb	r3, [r3, #0]
 8012f78:	1acb      	subs	r3, r1, r3
 8012f7a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012f7c:	687b      	ldr	r3, [r7, #4]
 8012f7e:	3b01      	subs	r3, #1
 8012f80:	607b      	str	r3, [r7, #4]
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d002      	beq.n	8012f8e <mem_cmp+0x40>
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d0eb      	beq.n	8012f66 <mem_cmp+0x18>

	return r;
 8012f8e:	697b      	ldr	r3, [r7, #20]
}
 8012f90:	4618      	mov	r0, r3
 8012f92:	3724      	adds	r7, #36	; 0x24
 8012f94:	46bd      	mov	sp, r7
 8012f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9a:	4770      	bx	lr

08012f9c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012f9c:	b480      	push	{r7}
 8012f9e:	b083      	sub	sp, #12
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
 8012fa4:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012fa6:	e002      	b.n	8012fae <chk_chr+0x12>
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	3301      	adds	r3, #1
 8012fac:	607b      	str	r3, [r7, #4]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	781b      	ldrb	r3, [r3, #0]
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d005      	beq.n	8012fc2 <chk_chr+0x26>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	781b      	ldrb	r3, [r3, #0]
 8012fba:	461a      	mov	r2, r3
 8012fbc:	683b      	ldr	r3, [r7, #0]
 8012fbe:	4293      	cmp	r3, r2
 8012fc0:	d1f2      	bne.n	8012fa8 <chk_chr+0xc>
	return *str;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	781b      	ldrb	r3, [r3, #0]
}
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	370c      	adds	r7, #12
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fd0:	4770      	bx	lr

08012fd2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b082      	sub	sp, #8
 8012fd6:	af00      	add	r7, sp, #0
 8012fd8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012fda:	687b      	ldr	r3, [r7, #4]
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d009      	beq.n	8012ff4 <lock_fs+0x22>
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	68db      	ldr	r3, [r3, #12]
 8012fe4:	4618      	mov	r0, r3
 8012fe6:	f002 fd8d 	bl	8015b04 <ff_req_grant>
 8012fea:	4603      	mov	r3, r0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d001      	beq.n	8012ff4 <lock_fs+0x22>
 8012ff0:	2301      	movs	r3, #1
 8012ff2:	e000      	b.n	8012ff6 <lock_fs+0x24>
 8012ff4:	2300      	movs	r3, #0
}
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	3708      	adds	r7, #8
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}

08012ffe <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8012ffe:	b580      	push	{r7, lr}
 8013000:	b082      	sub	sp, #8
 8013002:	af00      	add	r7, sp, #0
 8013004:	6078      	str	r0, [r7, #4]
 8013006:	460b      	mov	r3, r1
 8013008:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d00d      	beq.n	801302c <unlock_fs+0x2e>
 8013010:	78fb      	ldrb	r3, [r7, #3]
 8013012:	2b0c      	cmp	r3, #12
 8013014:	d00a      	beq.n	801302c <unlock_fs+0x2e>
 8013016:	78fb      	ldrb	r3, [r7, #3]
 8013018:	2b0b      	cmp	r3, #11
 801301a:	d007      	beq.n	801302c <unlock_fs+0x2e>
 801301c:	78fb      	ldrb	r3, [r7, #3]
 801301e:	2b0f      	cmp	r3, #15
 8013020:	d004      	beq.n	801302c <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	68db      	ldr	r3, [r3, #12]
 8013026:	4618      	mov	r0, r3
 8013028:	f002 fd81 	bl	8015b2e <ff_rel_grant>
	}
}
 801302c:	bf00      	nop
 801302e:	3708      	adds	r7, #8
 8013030:	46bd      	mov	sp, r7
 8013032:	bd80      	pop	{r7, pc}

08013034 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013034:	b480      	push	{r7}
 8013036:	b085      	sub	sp, #20
 8013038:	af00      	add	r7, sp, #0
 801303a:	6078      	str	r0, [r7, #4]
 801303c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801303e:	2300      	movs	r3, #0
 8013040:	60bb      	str	r3, [r7, #8]
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	60fb      	str	r3, [r7, #12]
 8013046:	e029      	b.n	801309c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8013048:	4a27      	ldr	r2, [pc, #156]	; (80130e8 <chk_lock+0xb4>)
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	011b      	lsls	r3, r3, #4
 801304e:	4413      	add	r3, r2
 8013050:	681b      	ldr	r3, [r3, #0]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d01d      	beq.n	8013092 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013056:	4a24      	ldr	r2, [pc, #144]	; (80130e8 <chk_lock+0xb4>)
 8013058:	68fb      	ldr	r3, [r7, #12]
 801305a:	011b      	lsls	r3, r3, #4
 801305c:	4413      	add	r3, r2
 801305e:	681a      	ldr	r2, [r3, #0]
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	429a      	cmp	r2, r3
 8013066:	d116      	bne.n	8013096 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8013068:	4a1f      	ldr	r2, [pc, #124]	; (80130e8 <chk_lock+0xb4>)
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	011b      	lsls	r3, r3, #4
 801306e:	4413      	add	r3, r2
 8013070:	3304      	adds	r3, #4
 8013072:	681a      	ldr	r2, [r3, #0]
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013078:	429a      	cmp	r2, r3
 801307a:	d10c      	bne.n	8013096 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801307c:	4a1a      	ldr	r2, [pc, #104]	; (80130e8 <chk_lock+0xb4>)
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	011b      	lsls	r3, r3, #4
 8013082:	4413      	add	r3, r2
 8013084:	3308      	adds	r3, #8
 8013086:	681a      	ldr	r2, [r3, #0]
 8013088:	687b      	ldr	r3, [r7, #4]
 801308a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 801308c:	429a      	cmp	r2, r3
 801308e:	d102      	bne.n	8013096 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8013090:	e007      	b.n	80130a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8013092:	2301      	movs	r3, #1
 8013094:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	3301      	adds	r3, #1
 801309a:	60fb      	str	r3, [r7, #12]
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d9d2      	bls.n	8013048 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	2b02      	cmp	r3, #2
 80130a6:	d109      	bne.n	80130bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80130a8:	68bb      	ldr	r3, [r7, #8]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d102      	bne.n	80130b4 <chk_lock+0x80>
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	2b02      	cmp	r3, #2
 80130b2:	d101      	bne.n	80130b8 <chk_lock+0x84>
 80130b4:	2300      	movs	r3, #0
 80130b6:	e010      	b.n	80130da <chk_lock+0xa6>
 80130b8:	2312      	movs	r3, #18
 80130ba:	e00e      	b.n	80130da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80130bc:	683b      	ldr	r3, [r7, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d108      	bne.n	80130d4 <chk_lock+0xa0>
 80130c2:	4a09      	ldr	r2, [pc, #36]	; (80130e8 <chk_lock+0xb4>)
 80130c4:	68fb      	ldr	r3, [r7, #12]
 80130c6:	011b      	lsls	r3, r3, #4
 80130c8:	4413      	add	r3, r2
 80130ca:	330c      	adds	r3, #12
 80130cc:	881b      	ldrh	r3, [r3, #0]
 80130ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80130d2:	d101      	bne.n	80130d8 <chk_lock+0xa4>
 80130d4:	2310      	movs	r3, #16
 80130d6:	e000      	b.n	80130da <chk_lock+0xa6>
 80130d8:	2300      	movs	r3, #0
}
 80130da:	4618      	mov	r0, r3
 80130dc:	3714      	adds	r7, #20
 80130de:	46bd      	mov	sp, r7
 80130e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e4:	4770      	bx	lr
 80130e6:	bf00      	nop
 80130e8:	20000348 	.word	0x20000348

080130ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80130ec:	b480      	push	{r7}
 80130ee:	b083      	sub	sp, #12
 80130f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80130f2:	2300      	movs	r3, #0
 80130f4:	607b      	str	r3, [r7, #4]
 80130f6:	e002      	b.n	80130fe <enq_lock+0x12>
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	3301      	adds	r3, #1
 80130fc:	607b      	str	r3, [r7, #4]
 80130fe:	687b      	ldr	r3, [r7, #4]
 8013100:	2b01      	cmp	r3, #1
 8013102:	d806      	bhi.n	8013112 <enq_lock+0x26>
 8013104:	4a09      	ldr	r2, [pc, #36]	; (801312c <enq_lock+0x40>)
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	011b      	lsls	r3, r3, #4
 801310a:	4413      	add	r3, r2
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d1f2      	bne.n	80130f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8013112:	687b      	ldr	r3, [r7, #4]
 8013114:	2b02      	cmp	r3, #2
 8013116:	bf14      	ite	ne
 8013118:	2301      	movne	r3, #1
 801311a:	2300      	moveq	r3, #0
 801311c:	b2db      	uxtb	r3, r3
}
 801311e:	4618      	mov	r0, r3
 8013120:	370c      	adds	r7, #12
 8013122:	46bd      	mov	sp, r7
 8013124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013128:	4770      	bx	lr
 801312a:	bf00      	nop
 801312c:	20000348 	.word	0x20000348

08013130 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013130:	b480      	push	{r7}
 8013132:	b085      	sub	sp, #20
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
 8013138:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801313a:	2300      	movs	r3, #0
 801313c:	60fb      	str	r3, [r7, #12]
 801313e:	e01f      	b.n	8013180 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013140:	4a41      	ldr	r2, [pc, #260]	; (8013248 <inc_lock+0x118>)
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	011b      	lsls	r3, r3, #4
 8013146:	4413      	add	r3, r2
 8013148:	681a      	ldr	r2, [r3, #0]
 801314a:	687b      	ldr	r3, [r7, #4]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	429a      	cmp	r2, r3
 8013150:	d113      	bne.n	801317a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013152:	4a3d      	ldr	r2, [pc, #244]	; (8013248 <inc_lock+0x118>)
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	011b      	lsls	r3, r3, #4
 8013158:	4413      	add	r3, r2
 801315a:	3304      	adds	r3, #4
 801315c:	681a      	ldr	r2, [r3, #0]
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013162:	429a      	cmp	r2, r3
 8013164:	d109      	bne.n	801317a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013166:	4a38      	ldr	r2, [pc, #224]	; (8013248 <inc_lock+0x118>)
 8013168:	68fb      	ldr	r3, [r7, #12]
 801316a:	011b      	lsls	r3, r3, #4
 801316c:	4413      	add	r3, r2
 801316e:	3308      	adds	r3, #8
 8013170:	681a      	ldr	r2, [r3, #0]
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013176:	429a      	cmp	r2, r3
 8013178:	d006      	beq.n	8013188 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	3301      	adds	r3, #1
 801317e:	60fb      	str	r3, [r7, #12]
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d9dc      	bls.n	8013140 <inc_lock+0x10>
 8013186:	e000      	b.n	801318a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013188:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2b02      	cmp	r3, #2
 801318e:	d132      	bne.n	80131f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013190:	2300      	movs	r3, #0
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	e002      	b.n	801319c <inc_lock+0x6c>
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	3301      	adds	r3, #1
 801319a:	60fb      	str	r3, [r7, #12]
 801319c:	68fb      	ldr	r3, [r7, #12]
 801319e:	2b01      	cmp	r3, #1
 80131a0:	d806      	bhi.n	80131b0 <inc_lock+0x80>
 80131a2:	4a29      	ldr	r2, [pc, #164]	; (8013248 <inc_lock+0x118>)
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	011b      	lsls	r3, r3, #4
 80131a8:	4413      	add	r3, r2
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d1f2      	bne.n	8013196 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	2b02      	cmp	r3, #2
 80131b4:	d101      	bne.n	80131ba <inc_lock+0x8a>
 80131b6:	2300      	movs	r3, #0
 80131b8:	e040      	b.n	801323c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	4922      	ldr	r1, [pc, #136]	; (8013248 <inc_lock+0x118>)
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	011b      	lsls	r3, r3, #4
 80131c4:	440b      	add	r3, r1
 80131c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	689a      	ldr	r2, [r3, #8]
 80131cc:	491e      	ldr	r1, [pc, #120]	; (8013248 <inc_lock+0x118>)
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	011b      	lsls	r3, r3, #4
 80131d2:	440b      	add	r3, r1
 80131d4:	3304      	adds	r3, #4
 80131d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	695a      	ldr	r2, [r3, #20]
 80131dc:	491a      	ldr	r1, [pc, #104]	; (8013248 <inc_lock+0x118>)
 80131de:	68fb      	ldr	r3, [r7, #12]
 80131e0:	011b      	lsls	r3, r3, #4
 80131e2:	440b      	add	r3, r1
 80131e4:	3308      	adds	r3, #8
 80131e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80131e8:	4a17      	ldr	r2, [pc, #92]	; (8013248 <inc_lock+0x118>)
 80131ea:	68fb      	ldr	r3, [r7, #12]
 80131ec:	011b      	lsls	r3, r3, #4
 80131ee:	4413      	add	r3, r2
 80131f0:	330c      	adds	r3, #12
 80131f2:	2200      	movs	r2, #0
 80131f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d009      	beq.n	8013210 <inc_lock+0xe0>
 80131fc:	4a12      	ldr	r2, [pc, #72]	; (8013248 <inc_lock+0x118>)
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	011b      	lsls	r3, r3, #4
 8013202:	4413      	add	r3, r2
 8013204:	330c      	adds	r3, #12
 8013206:	881b      	ldrh	r3, [r3, #0]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d001      	beq.n	8013210 <inc_lock+0xe0>
 801320c:	2300      	movs	r3, #0
 801320e:	e015      	b.n	801323c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d108      	bne.n	8013228 <inc_lock+0xf8>
 8013216:	4a0c      	ldr	r2, [pc, #48]	; (8013248 <inc_lock+0x118>)
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	011b      	lsls	r3, r3, #4
 801321c:	4413      	add	r3, r2
 801321e:	330c      	adds	r3, #12
 8013220:	881b      	ldrh	r3, [r3, #0]
 8013222:	3301      	adds	r3, #1
 8013224:	b29a      	uxth	r2, r3
 8013226:	e001      	b.n	801322c <inc_lock+0xfc>
 8013228:	f44f 7280 	mov.w	r2, #256	; 0x100
 801322c:	4906      	ldr	r1, [pc, #24]	; (8013248 <inc_lock+0x118>)
 801322e:	68fb      	ldr	r3, [r7, #12]
 8013230:	011b      	lsls	r3, r3, #4
 8013232:	440b      	add	r3, r1
 8013234:	330c      	adds	r3, #12
 8013236:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	3301      	adds	r3, #1
}
 801323c:	4618      	mov	r0, r3
 801323e:	3714      	adds	r7, #20
 8013240:	46bd      	mov	sp, r7
 8013242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013246:	4770      	bx	lr
 8013248:	20000348 	.word	0x20000348

0801324c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801324c:	b480      	push	{r7}
 801324e:	b085      	sub	sp, #20
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013254:	687b      	ldr	r3, [r7, #4]
 8013256:	3b01      	subs	r3, #1
 8013258:	607b      	str	r3, [r7, #4]
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2b01      	cmp	r3, #1
 801325e:	d825      	bhi.n	80132ac <dec_lock+0x60>
		n = Files[i].ctr;
 8013260:	4a17      	ldr	r2, [pc, #92]	; (80132c0 <dec_lock+0x74>)
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	011b      	lsls	r3, r3, #4
 8013266:	4413      	add	r3, r2
 8013268:	330c      	adds	r3, #12
 801326a:	881b      	ldrh	r3, [r3, #0]
 801326c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801326e:	89fb      	ldrh	r3, [r7, #14]
 8013270:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013274:	d101      	bne.n	801327a <dec_lock+0x2e>
 8013276:	2300      	movs	r3, #0
 8013278:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801327a:	89fb      	ldrh	r3, [r7, #14]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d002      	beq.n	8013286 <dec_lock+0x3a>
 8013280:	89fb      	ldrh	r3, [r7, #14]
 8013282:	3b01      	subs	r3, #1
 8013284:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013286:	4a0e      	ldr	r2, [pc, #56]	; (80132c0 <dec_lock+0x74>)
 8013288:	687b      	ldr	r3, [r7, #4]
 801328a:	011b      	lsls	r3, r3, #4
 801328c:	4413      	add	r3, r2
 801328e:	330c      	adds	r3, #12
 8013290:	89fa      	ldrh	r2, [r7, #14]
 8013292:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013294:	89fb      	ldrh	r3, [r7, #14]
 8013296:	2b00      	cmp	r3, #0
 8013298:	d105      	bne.n	80132a6 <dec_lock+0x5a>
 801329a:	4a09      	ldr	r2, [pc, #36]	; (80132c0 <dec_lock+0x74>)
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	011b      	lsls	r3, r3, #4
 80132a0:	4413      	add	r3, r2
 80132a2:	2200      	movs	r2, #0
 80132a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80132a6:	2300      	movs	r3, #0
 80132a8:	737b      	strb	r3, [r7, #13]
 80132aa:	e001      	b.n	80132b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80132ac:	2302      	movs	r3, #2
 80132ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80132b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	3714      	adds	r7, #20
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr
 80132be:	bf00      	nop
 80132c0:	20000348 	.word	0x20000348

080132c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80132c4:	b480      	push	{r7}
 80132c6:	b085      	sub	sp, #20
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80132cc:	2300      	movs	r3, #0
 80132ce:	60fb      	str	r3, [r7, #12]
 80132d0:	e010      	b.n	80132f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80132d2:	4a0d      	ldr	r2, [pc, #52]	; (8013308 <clear_lock+0x44>)
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	011b      	lsls	r3, r3, #4
 80132d8:	4413      	add	r3, r2
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	687a      	ldr	r2, [r7, #4]
 80132de:	429a      	cmp	r2, r3
 80132e0:	d105      	bne.n	80132ee <clear_lock+0x2a>
 80132e2:	4a09      	ldr	r2, [pc, #36]	; (8013308 <clear_lock+0x44>)
 80132e4:	68fb      	ldr	r3, [r7, #12]
 80132e6:	011b      	lsls	r3, r3, #4
 80132e8:	4413      	add	r3, r2
 80132ea:	2200      	movs	r2, #0
 80132ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	3301      	adds	r3, #1
 80132f2:	60fb      	str	r3, [r7, #12]
 80132f4:	68fb      	ldr	r3, [r7, #12]
 80132f6:	2b01      	cmp	r3, #1
 80132f8:	d9eb      	bls.n	80132d2 <clear_lock+0xe>
	}
}
 80132fa:	bf00      	nop
 80132fc:	3714      	adds	r7, #20
 80132fe:	46bd      	mov	sp, r7
 8013300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013304:	4770      	bx	lr
 8013306:	bf00      	nop
 8013308:	20000348 	.word	0x20000348

0801330c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b086      	sub	sp, #24
 8013310:	af00      	add	r7, sp, #0
 8013312:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8013314:	2300      	movs	r3, #0
 8013316:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	78db      	ldrb	r3, [r3, #3]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d034      	beq.n	801338a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013324:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	7858      	ldrb	r0, [r3, #1]
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013330:	2301      	movs	r3, #1
 8013332:	697a      	ldr	r2, [r7, #20]
 8013334:	f7ff fd10 	bl	8012d58 <disk_write>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d002      	beq.n	8013344 <sync_window+0x38>
			res = FR_DISK_ERR;
 801333e:	2301      	movs	r3, #1
 8013340:	73fb      	strb	r3, [r7, #15]
 8013342:	e022      	b.n	801338a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	2200      	movs	r2, #0
 8013348:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801334e:	697a      	ldr	r2, [r7, #20]
 8013350:	1ad2      	subs	r2, r2, r3
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	69db      	ldr	r3, [r3, #28]
 8013356:	429a      	cmp	r2, r3
 8013358:	d217      	bcs.n	801338a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	789b      	ldrb	r3, [r3, #2]
 801335e:	613b      	str	r3, [r7, #16]
 8013360:	e010      	b.n	8013384 <sync_window+0x78>
					wsect += fs->fsize;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	69db      	ldr	r3, [r3, #28]
 8013366:	697a      	ldr	r2, [r7, #20]
 8013368:	4413      	add	r3, r2
 801336a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	7858      	ldrb	r0, [r3, #1]
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013376:	2301      	movs	r3, #1
 8013378:	697a      	ldr	r2, [r7, #20]
 801337a:	f7ff fced 	bl	8012d58 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801337e:	693b      	ldr	r3, [r7, #16]
 8013380:	3b01      	subs	r3, #1
 8013382:	613b      	str	r3, [r7, #16]
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	2b01      	cmp	r3, #1
 8013388:	d8eb      	bhi.n	8013362 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801338a:	7bfb      	ldrb	r3, [r7, #15]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3718      	adds	r7, #24
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}

08013394 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b084      	sub	sp, #16
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801339e:	2300      	movs	r3, #0
 80133a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133a6:	683a      	ldr	r2, [r7, #0]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d01b      	beq.n	80133e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f7ff ffad 	bl	801330c <sync_window>
 80133b2:	4603      	mov	r3, r0
 80133b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80133b6:	7bfb      	ldrb	r3, [r7, #15]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d113      	bne.n	80133e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	7858      	ldrb	r0, [r3, #1]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80133c6:	2301      	movs	r3, #1
 80133c8:	683a      	ldr	r2, [r7, #0]
 80133ca:	f7ff fca5 	bl	8012d18 <disk_read>
 80133ce:	4603      	mov	r3, r0
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d004      	beq.n	80133de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80133d4:	f04f 33ff 	mov.w	r3, #4294967295
 80133d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80133da:	2301      	movs	r3, #1
 80133dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80133e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3710      	adds	r7, #16
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}
	...

080133f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80133f0:	b580      	push	{r7, lr}
 80133f2:	b084      	sub	sp, #16
 80133f4:	af00      	add	r7, sp, #0
 80133f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7ff ff87 	bl	801330c <sync_window>
 80133fe:	4603      	mov	r3, r0
 8013400:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8013402:	7bfb      	ldrb	r3, [r7, #15]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d158      	bne.n	80134ba <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	781b      	ldrb	r3, [r3, #0]
 801340c:	2b03      	cmp	r3, #3
 801340e:	d148      	bne.n	80134a2 <sync_fs+0xb2>
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	791b      	ldrb	r3, [r3, #4]
 8013414:	2b01      	cmp	r3, #1
 8013416:	d144      	bne.n	80134a2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	3334      	adds	r3, #52	; 0x34
 801341c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013420:	2100      	movs	r1, #0
 8013422:	4618      	mov	r0, r3
 8013424:	f7ff fd79 	bl	8012f1a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	3334      	adds	r3, #52	; 0x34
 801342c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013430:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013434:	4618      	mov	r0, r3
 8013436:	f7ff fd08 	bl	8012e4a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	3334      	adds	r3, #52	; 0x34
 801343e:	4921      	ldr	r1, [pc, #132]	; (80134c4 <sync_fs+0xd4>)
 8013440:	4618      	mov	r0, r3
 8013442:	f7ff fd1d 	bl	8012e80 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	3334      	adds	r3, #52	; 0x34
 801344a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801344e:	491e      	ldr	r1, [pc, #120]	; (80134c8 <sync_fs+0xd8>)
 8013450:	4618      	mov	r0, r3
 8013452:	f7ff fd15 	bl	8012e80 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	3334      	adds	r3, #52	; 0x34
 801345a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	695b      	ldr	r3, [r3, #20]
 8013462:	4619      	mov	r1, r3
 8013464:	4610      	mov	r0, r2
 8013466:	f7ff fd0b 	bl	8012e80 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	3334      	adds	r3, #52	; 0x34
 801346e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013472:	687b      	ldr	r3, [r7, #4]
 8013474:	691b      	ldr	r3, [r3, #16]
 8013476:	4619      	mov	r1, r3
 8013478:	4610      	mov	r0, r2
 801347a:	f7ff fd01 	bl	8012e80 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	6a1b      	ldr	r3, [r3, #32]
 8013482:	1c5a      	adds	r2, r3, #1
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	7858      	ldrb	r0, [r3, #1]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013496:	2301      	movs	r3, #1
 8013498:	f7ff fc5e 	bl	8012d58 <disk_write>
			fs->fsi_flag = 0;
 801349c:	687b      	ldr	r3, [r7, #4]
 801349e:	2200      	movs	r2, #0
 80134a0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	785b      	ldrb	r3, [r3, #1]
 80134a6:	2200      	movs	r2, #0
 80134a8:	2100      	movs	r1, #0
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7ff fc74 	bl	8012d98 <disk_ioctl>
 80134b0:	4603      	mov	r3, r0
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d001      	beq.n	80134ba <sync_fs+0xca>
 80134b6:	2301      	movs	r3, #1
 80134b8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80134ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80134bc:	4618      	mov	r0, r3
 80134be:	3710      	adds	r7, #16
 80134c0:	46bd      	mov	sp, r7
 80134c2:	bd80      	pop	{r7, pc}
 80134c4:	41615252 	.word	0x41615252
 80134c8:	61417272 	.word	0x61417272

080134cc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	3b02      	subs	r3, #2
 80134da:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	699b      	ldr	r3, [r3, #24]
 80134e0:	3b02      	subs	r3, #2
 80134e2:	683a      	ldr	r2, [r7, #0]
 80134e4:	429a      	cmp	r2, r3
 80134e6:	d301      	bcc.n	80134ec <clust2sect+0x20>
 80134e8:	2300      	movs	r3, #0
 80134ea:	e008      	b.n	80134fe <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	895b      	ldrh	r3, [r3, #10]
 80134f0:	461a      	mov	r2, r3
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	fb03 f202 	mul.w	r2, r3, r2
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134fc:	4413      	add	r3, r2
}
 80134fe:	4618      	mov	r0, r3
 8013500:	370c      	adds	r7, #12
 8013502:	46bd      	mov	sp, r7
 8013504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013508:	4770      	bx	lr

0801350a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801350a:	b580      	push	{r7, lr}
 801350c:	b086      	sub	sp, #24
 801350e:	af00      	add	r7, sp, #0
 8013510:	6078      	str	r0, [r7, #4]
 8013512:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	2b01      	cmp	r3, #1
 801351e:	d904      	bls.n	801352a <get_fat+0x20>
 8013520:	693b      	ldr	r3, [r7, #16]
 8013522:	699b      	ldr	r3, [r3, #24]
 8013524:	683a      	ldr	r2, [r7, #0]
 8013526:	429a      	cmp	r2, r3
 8013528:	d302      	bcc.n	8013530 <get_fat+0x26>
		val = 1;	/* Internal error */
 801352a:	2301      	movs	r3, #1
 801352c:	617b      	str	r3, [r7, #20]
 801352e:	e08c      	b.n	801364a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013530:	f04f 33ff 	mov.w	r3, #4294967295
 8013534:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013536:	693b      	ldr	r3, [r7, #16]
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	2b02      	cmp	r3, #2
 801353c:	d045      	beq.n	80135ca <get_fat+0xc0>
 801353e:	2b03      	cmp	r3, #3
 8013540:	d05d      	beq.n	80135fe <get_fat+0xf4>
 8013542:	2b01      	cmp	r3, #1
 8013544:	d177      	bne.n	8013636 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	60fb      	str	r3, [r7, #12]
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	085b      	lsrs	r3, r3, #1
 801354e:	68fa      	ldr	r2, [r7, #12]
 8013550:	4413      	add	r3, r2
 8013552:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013554:	693b      	ldr	r3, [r7, #16]
 8013556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	0a5b      	lsrs	r3, r3, #9
 801355c:	4413      	add	r3, r2
 801355e:	4619      	mov	r1, r3
 8013560:	6938      	ldr	r0, [r7, #16]
 8013562:	f7ff ff17 	bl	8013394 <move_window>
 8013566:	4603      	mov	r3, r0
 8013568:	2b00      	cmp	r3, #0
 801356a:	d167      	bne.n	801363c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	1c5a      	adds	r2, r3, #1
 8013570:	60fa      	str	r2, [r7, #12]
 8013572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013576:	693a      	ldr	r2, [r7, #16]
 8013578:	4413      	add	r3, r2
 801357a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801357e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013584:	68fb      	ldr	r3, [r7, #12]
 8013586:	0a5b      	lsrs	r3, r3, #9
 8013588:	4413      	add	r3, r2
 801358a:	4619      	mov	r1, r3
 801358c:	6938      	ldr	r0, [r7, #16]
 801358e:	f7ff ff01 	bl	8013394 <move_window>
 8013592:	4603      	mov	r3, r0
 8013594:	2b00      	cmp	r3, #0
 8013596:	d153      	bne.n	8013640 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801359e:	693a      	ldr	r2, [r7, #16]
 80135a0:	4413      	add	r3, r2
 80135a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80135a6:	021b      	lsls	r3, r3, #8
 80135a8:	461a      	mov	r2, r3
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	4313      	orrs	r3, r2
 80135ae:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	f003 0301 	and.w	r3, r3, #1
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d002      	beq.n	80135c0 <get_fat+0xb6>
 80135ba:	68bb      	ldr	r3, [r7, #8]
 80135bc:	091b      	lsrs	r3, r3, #4
 80135be:	e002      	b.n	80135c6 <get_fat+0xbc>
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80135c6:	617b      	str	r3, [r7, #20]
			break;
 80135c8:	e03f      	b.n	801364a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80135ca:	693b      	ldr	r3, [r7, #16]
 80135cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	0a1b      	lsrs	r3, r3, #8
 80135d2:	4413      	add	r3, r2
 80135d4:	4619      	mov	r1, r3
 80135d6:	6938      	ldr	r0, [r7, #16]
 80135d8:	f7ff fedc 	bl	8013394 <move_window>
 80135dc:	4603      	mov	r3, r0
 80135de:	2b00      	cmp	r3, #0
 80135e0:	d130      	bne.n	8013644 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80135e2:	693b      	ldr	r3, [r7, #16]
 80135e4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	005b      	lsls	r3, r3, #1
 80135ec:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80135f0:	4413      	add	r3, r2
 80135f2:	4618      	mov	r0, r3
 80135f4:	f7ff fbee 	bl	8012dd4 <ld_word>
 80135f8:	4603      	mov	r3, r0
 80135fa:	617b      	str	r3, [r7, #20]
			break;
 80135fc:	e025      	b.n	801364a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80135fe:	693b      	ldr	r3, [r7, #16]
 8013600:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	09db      	lsrs	r3, r3, #7
 8013606:	4413      	add	r3, r2
 8013608:	4619      	mov	r1, r3
 801360a:	6938      	ldr	r0, [r7, #16]
 801360c:	f7ff fec2 	bl	8013394 <move_window>
 8013610:	4603      	mov	r3, r0
 8013612:	2b00      	cmp	r3, #0
 8013614:	d118      	bne.n	8013648 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8013616:	693b      	ldr	r3, [r7, #16]
 8013618:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	009b      	lsls	r3, r3, #2
 8013620:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8013624:	4413      	add	r3, r2
 8013626:	4618      	mov	r0, r3
 8013628:	f7ff fbec 	bl	8012e04 <ld_dword>
 801362c:	4603      	mov	r3, r0
 801362e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013632:	617b      	str	r3, [r7, #20]
			break;
 8013634:	e009      	b.n	801364a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013636:	2301      	movs	r3, #1
 8013638:	617b      	str	r3, [r7, #20]
 801363a:	e006      	b.n	801364a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801363c:	bf00      	nop
 801363e:	e004      	b.n	801364a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013640:	bf00      	nop
 8013642:	e002      	b.n	801364a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013644:	bf00      	nop
 8013646:	e000      	b.n	801364a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013648:	bf00      	nop
		}
	}

	return val;
 801364a:	697b      	ldr	r3, [r7, #20]
}
 801364c:	4618      	mov	r0, r3
 801364e:	3718      	adds	r7, #24
 8013650:	46bd      	mov	sp, r7
 8013652:	bd80      	pop	{r7, pc}

08013654 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013654:	b590      	push	{r4, r7, lr}
 8013656:	b089      	sub	sp, #36	; 0x24
 8013658:	af00      	add	r7, sp, #0
 801365a:	60f8      	str	r0, [r7, #12]
 801365c:	60b9      	str	r1, [r7, #8]
 801365e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013660:	2302      	movs	r3, #2
 8013662:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013664:	68bb      	ldr	r3, [r7, #8]
 8013666:	2b01      	cmp	r3, #1
 8013668:	f240 80d6 	bls.w	8013818 <put_fat+0x1c4>
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	699b      	ldr	r3, [r3, #24]
 8013670:	68ba      	ldr	r2, [r7, #8]
 8013672:	429a      	cmp	r2, r3
 8013674:	f080 80d0 	bcs.w	8013818 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	781b      	ldrb	r3, [r3, #0]
 801367c:	2b02      	cmp	r3, #2
 801367e:	d073      	beq.n	8013768 <put_fat+0x114>
 8013680:	2b03      	cmp	r3, #3
 8013682:	f000 8091 	beq.w	80137a8 <put_fat+0x154>
 8013686:	2b01      	cmp	r3, #1
 8013688:	f040 80c6 	bne.w	8013818 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	61bb      	str	r3, [r7, #24]
 8013690:	69bb      	ldr	r3, [r7, #24]
 8013692:	085b      	lsrs	r3, r3, #1
 8013694:	69ba      	ldr	r2, [r7, #24]
 8013696:	4413      	add	r3, r2
 8013698:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801369e:	69bb      	ldr	r3, [r7, #24]
 80136a0:	0a5b      	lsrs	r3, r3, #9
 80136a2:	4413      	add	r3, r2
 80136a4:	4619      	mov	r1, r3
 80136a6:	68f8      	ldr	r0, [r7, #12]
 80136a8:	f7ff fe74 	bl	8013394 <move_window>
 80136ac:	4603      	mov	r3, r0
 80136ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80136b0:	7ffb      	ldrb	r3, [r7, #31]
 80136b2:	2b00      	cmp	r3, #0
 80136b4:	f040 80a9 	bne.w	801380a <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80136b8:	68fb      	ldr	r3, [r7, #12]
 80136ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	1c59      	adds	r1, r3, #1
 80136c2:	61b9      	str	r1, [r7, #24]
 80136c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80136c8:	4413      	add	r3, r2
 80136ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80136cc:	68bb      	ldr	r3, [r7, #8]
 80136ce:	f003 0301 	and.w	r3, r3, #1
 80136d2:	2b00      	cmp	r3, #0
 80136d4:	d00d      	beq.n	80136f2 <put_fat+0x9e>
 80136d6:	697b      	ldr	r3, [r7, #20]
 80136d8:	781b      	ldrb	r3, [r3, #0]
 80136da:	b25b      	sxtb	r3, r3
 80136dc:	f003 030f 	and.w	r3, r3, #15
 80136e0:	b25a      	sxtb	r2, r3
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	b2db      	uxtb	r3, r3
 80136e6:	011b      	lsls	r3, r3, #4
 80136e8:	b25b      	sxtb	r3, r3
 80136ea:	4313      	orrs	r3, r2
 80136ec:	b25b      	sxtb	r3, r3
 80136ee:	b2db      	uxtb	r3, r3
 80136f0:	e001      	b.n	80136f6 <put_fat+0xa2>
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	b2db      	uxtb	r3, r3
 80136f6:	697a      	ldr	r2, [r7, #20]
 80136f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80136fa:	68fb      	ldr	r3, [r7, #12]
 80136fc:	2201      	movs	r2, #1
 80136fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8013700:	68fb      	ldr	r3, [r7, #12]
 8013702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013704:	69bb      	ldr	r3, [r7, #24]
 8013706:	0a5b      	lsrs	r3, r3, #9
 8013708:	4413      	add	r3, r2
 801370a:	4619      	mov	r1, r3
 801370c:	68f8      	ldr	r0, [r7, #12]
 801370e:	f7ff fe41 	bl	8013394 <move_window>
 8013712:	4603      	mov	r3, r0
 8013714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013716:	7ffb      	ldrb	r3, [r7, #31]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d178      	bne.n	801380e <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 801371c:	68fb      	ldr	r3, [r7, #12]
 801371e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013722:	69bb      	ldr	r3, [r7, #24]
 8013724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013728:	4413      	add	r3, r2
 801372a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 801372c:	68bb      	ldr	r3, [r7, #8]
 801372e:	f003 0301 	and.w	r3, r3, #1
 8013732:	2b00      	cmp	r3, #0
 8013734:	d003      	beq.n	801373e <put_fat+0xea>
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	091b      	lsrs	r3, r3, #4
 801373a:	b2db      	uxtb	r3, r3
 801373c:	e00e      	b.n	801375c <put_fat+0x108>
 801373e:	697b      	ldr	r3, [r7, #20]
 8013740:	781b      	ldrb	r3, [r3, #0]
 8013742:	b25b      	sxtb	r3, r3
 8013744:	f023 030f 	bic.w	r3, r3, #15
 8013748:	b25a      	sxtb	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	0a1b      	lsrs	r3, r3, #8
 801374e:	b25b      	sxtb	r3, r3
 8013750:	f003 030f 	and.w	r3, r3, #15
 8013754:	b25b      	sxtb	r3, r3
 8013756:	4313      	orrs	r3, r2
 8013758:	b25b      	sxtb	r3, r3
 801375a:	b2db      	uxtb	r3, r3
 801375c:	697a      	ldr	r2, [r7, #20]
 801375e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013760:	68fb      	ldr	r3, [r7, #12]
 8013762:	2201      	movs	r2, #1
 8013764:	70da      	strb	r2, [r3, #3]
			break;
 8013766:	e057      	b.n	8013818 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013768:	68fb      	ldr	r3, [r7, #12]
 801376a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801376c:	68bb      	ldr	r3, [r7, #8]
 801376e:	0a1b      	lsrs	r3, r3, #8
 8013770:	4413      	add	r3, r2
 8013772:	4619      	mov	r1, r3
 8013774:	68f8      	ldr	r0, [r7, #12]
 8013776:	f7ff fe0d 	bl	8013394 <move_window>
 801377a:	4603      	mov	r3, r0
 801377c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801377e:	7ffb      	ldrb	r3, [r7, #31]
 8013780:	2b00      	cmp	r3, #0
 8013782:	d146      	bne.n	8013812 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013784:	68fb      	ldr	r3, [r7, #12]
 8013786:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801378a:	68bb      	ldr	r3, [r7, #8]
 801378c:	005b      	lsls	r3, r3, #1
 801378e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013792:	4413      	add	r3, r2
 8013794:	687a      	ldr	r2, [r7, #4]
 8013796:	b292      	uxth	r2, r2
 8013798:	4611      	mov	r1, r2
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff fb55 	bl	8012e4a <st_word>
			fs->wflag = 1;
 80137a0:	68fb      	ldr	r3, [r7, #12]
 80137a2:	2201      	movs	r2, #1
 80137a4:	70da      	strb	r2, [r3, #3]
			break;
 80137a6:	e037      	b.n	8013818 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80137ac:	68bb      	ldr	r3, [r7, #8]
 80137ae:	09db      	lsrs	r3, r3, #7
 80137b0:	4413      	add	r3, r2
 80137b2:	4619      	mov	r1, r3
 80137b4:	68f8      	ldr	r0, [r7, #12]
 80137b6:	f7ff fded 	bl	8013394 <move_window>
 80137ba:	4603      	mov	r3, r0
 80137bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80137be:	7ffb      	ldrb	r3, [r7, #31]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d128      	bne.n	8013816 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80137c4:	687b      	ldr	r3, [r7, #4]
 80137c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137d0:	68bb      	ldr	r3, [r7, #8]
 80137d2:	009b      	lsls	r3, r3, #2
 80137d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80137d8:	4413      	add	r3, r2
 80137da:	4618      	mov	r0, r3
 80137dc:	f7ff fb12 	bl	8012e04 <ld_dword>
 80137e0:	4603      	mov	r3, r0
 80137e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80137e6:	4323      	orrs	r3, r4
 80137e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80137f0:	68bb      	ldr	r3, [r7, #8]
 80137f2:	009b      	lsls	r3, r3, #2
 80137f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80137f8:	4413      	add	r3, r2
 80137fa:	6879      	ldr	r1, [r7, #4]
 80137fc:	4618      	mov	r0, r3
 80137fe:	f7ff fb3f 	bl	8012e80 <st_dword>
			fs->wflag = 1;
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	2201      	movs	r2, #1
 8013806:	70da      	strb	r2, [r3, #3]
			break;
 8013808:	e006      	b.n	8013818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801380a:	bf00      	nop
 801380c:	e004      	b.n	8013818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 801380e:	bf00      	nop
 8013810:	e002      	b.n	8013818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013812:	bf00      	nop
 8013814:	e000      	b.n	8013818 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8013816:	bf00      	nop
		}
	}
	return res;
 8013818:	7ffb      	ldrb	r3, [r7, #31]
}
 801381a:	4618      	mov	r0, r3
 801381c:	3724      	adds	r7, #36	; 0x24
 801381e:	46bd      	mov	sp, r7
 8013820:	bd90      	pop	{r4, r7, pc}

08013822 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8013822:	b580      	push	{r7, lr}
 8013824:	b088      	sub	sp, #32
 8013826:	af00      	add	r7, sp, #0
 8013828:	60f8      	str	r0, [r7, #12]
 801382a:	60b9      	str	r1, [r7, #8]
 801382c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801382e:	2300      	movs	r3, #0
 8013830:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013832:	68fb      	ldr	r3, [r7, #12]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013838:	68bb      	ldr	r3, [r7, #8]
 801383a:	2b01      	cmp	r3, #1
 801383c:	d904      	bls.n	8013848 <remove_chain+0x26>
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	699b      	ldr	r3, [r3, #24]
 8013842:	68ba      	ldr	r2, [r7, #8]
 8013844:	429a      	cmp	r2, r3
 8013846:	d301      	bcc.n	801384c <remove_chain+0x2a>
 8013848:	2302      	movs	r3, #2
 801384a:	e04b      	b.n	80138e4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d00c      	beq.n	801386c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013852:	f04f 32ff 	mov.w	r2, #4294967295
 8013856:	6879      	ldr	r1, [r7, #4]
 8013858:	69b8      	ldr	r0, [r7, #24]
 801385a:	f7ff fefb 	bl	8013654 <put_fat>
 801385e:	4603      	mov	r3, r0
 8013860:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013862:	7ffb      	ldrb	r3, [r7, #31]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d001      	beq.n	801386c <remove_chain+0x4a>
 8013868:	7ffb      	ldrb	r3, [r7, #31]
 801386a:	e03b      	b.n	80138e4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801386c:	68b9      	ldr	r1, [r7, #8]
 801386e:	68f8      	ldr	r0, [r7, #12]
 8013870:	f7ff fe4b 	bl	801350a <get_fat>
 8013874:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013876:	697b      	ldr	r3, [r7, #20]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d031      	beq.n	80138e0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	2b01      	cmp	r3, #1
 8013880:	d101      	bne.n	8013886 <remove_chain+0x64>
 8013882:	2302      	movs	r3, #2
 8013884:	e02e      	b.n	80138e4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013886:	697b      	ldr	r3, [r7, #20]
 8013888:	f1b3 3fff 	cmp.w	r3, #4294967295
 801388c:	d101      	bne.n	8013892 <remove_chain+0x70>
 801388e:	2301      	movs	r3, #1
 8013890:	e028      	b.n	80138e4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013892:	2200      	movs	r2, #0
 8013894:	68b9      	ldr	r1, [r7, #8]
 8013896:	69b8      	ldr	r0, [r7, #24]
 8013898:	f7ff fedc 	bl	8013654 <put_fat>
 801389c:	4603      	mov	r3, r0
 801389e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80138a0:	7ffb      	ldrb	r3, [r7, #31]
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	d001      	beq.n	80138aa <remove_chain+0x88>
 80138a6:	7ffb      	ldrb	r3, [r7, #31]
 80138a8:	e01c      	b.n	80138e4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	695a      	ldr	r2, [r3, #20]
 80138ae:	69bb      	ldr	r3, [r7, #24]
 80138b0:	699b      	ldr	r3, [r3, #24]
 80138b2:	3b02      	subs	r3, #2
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d20b      	bcs.n	80138d0 <remove_chain+0xae>
			fs->free_clst++;
 80138b8:	69bb      	ldr	r3, [r7, #24]
 80138ba:	695b      	ldr	r3, [r3, #20]
 80138bc:	1c5a      	adds	r2, r3, #1
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80138c2:	69bb      	ldr	r3, [r7, #24]
 80138c4:	791b      	ldrb	r3, [r3, #4]
 80138c6:	f043 0301 	orr.w	r3, r3, #1
 80138ca:	b2da      	uxtb	r2, r3
 80138cc:	69bb      	ldr	r3, [r7, #24]
 80138ce:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	699b      	ldr	r3, [r3, #24]
 80138d8:	68ba      	ldr	r2, [r7, #8]
 80138da:	429a      	cmp	r2, r3
 80138dc:	d3c6      	bcc.n	801386c <remove_chain+0x4a>
 80138de:	e000      	b.n	80138e2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80138e0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3720      	adds	r7, #32
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b088      	sub	sp, #32
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80138fc:	683b      	ldr	r3, [r7, #0]
 80138fe:	2b00      	cmp	r3, #0
 8013900:	d10d      	bne.n	801391e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8013902:	693b      	ldr	r3, [r7, #16]
 8013904:	691b      	ldr	r3, [r3, #16]
 8013906:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8013908:	69bb      	ldr	r3, [r7, #24]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d004      	beq.n	8013918 <create_chain+0x2c>
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	699b      	ldr	r3, [r3, #24]
 8013912:	69ba      	ldr	r2, [r7, #24]
 8013914:	429a      	cmp	r2, r3
 8013916:	d31b      	bcc.n	8013950 <create_chain+0x64>
 8013918:	2301      	movs	r3, #1
 801391a:	61bb      	str	r3, [r7, #24]
 801391c:	e018      	b.n	8013950 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801391e:	6839      	ldr	r1, [r7, #0]
 8013920:	6878      	ldr	r0, [r7, #4]
 8013922:	f7ff fdf2 	bl	801350a <get_fat>
 8013926:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	2b01      	cmp	r3, #1
 801392c:	d801      	bhi.n	8013932 <create_chain+0x46>
 801392e:	2301      	movs	r3, #1
 8013930:	e070      	b.n	8013a14 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013932:	68fb      	ldr	r3, [r7, #12]
 8013934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013938:	d101      	bne.n	801393e <create_chain+0x52>
 801393a:	68fb      	ldr	r3, [r7, #12]
 801393c:	e06a      	b.n	8013a14 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	699b      	ldr	r3, [r3, #24]
 8013942:	68fa      	ldr	r2, [r7, #12]
 8013944:	429a      	cmp	r2, r3
 8013946:	d201      	bcs.n	801394c <create_chain+0x60>
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	e063      	b.n	8013a14 <create_chain+0x128>
		scl = clst;
 801394c:	683b      	ldr	r3, [r7, #0]
 801394e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013950:	69bb      	ldr	r3, [r7, #24]
 8013952:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	3301      	adds	r3, #1
 8013958:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	699b      	ldr	r3, [r3, #24]
 801395e:	69fa      	ldr	r2, [r7, #28]
 8013960:	429a      	cmp	r2, r3
 8013962:	d307      	bcc.n	8013974 <create_chain+0x88>
				ncl = 2;
 8013964:	2302      	movs	r3, #2
 8013966:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013968:	69fa      	ldr	r2, [r7, #28]
 801396a:	69bb      	ldr	r3, [r7, #24]
 801396c:	429a      	cmp	r2, r3
 801396e:	d901      	bls.n	8013974 <create_chain+0x88>
 8013970:	2300      	movs	r3, #0
 8013972:	e04f      	b.n	8013a14 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013974:	69f9      	ldr	r1, [r7, #28]
 8013976:	6878      	ldr	r0, [r7, #4]
 8013978:	f7ff fdc7 	bl	801350a <get_fat>
 801397c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801397e:	68fb      	ldr	r3, [r7, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d00e      	beq.n	80139a2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	2b01      	cmp	r3, #1
 8013988:	d003      	beq.n	8013992 <create_chain+0xa6>
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013990:	d101      	bne.n	8013996 <create_chain+0xaa>
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	e03e      	b.n	8013a14 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013996:	69fa      	ldr	r2, [r7, #28]
 8013998:	69bb      	ldr	r3, [r7, #24]
 801399a:	429a      	cmp	r2, r3
 801399c:	d1da      	bne.n	8013954 <create_chain+0x68>
 801399e:	2300      	movs	r3, #0
 80139a0:	e038      	b.n	8013a14 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80139a2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80139a4:	f04f 32ff 	mov.w	r2, #4294967295
 80139a8:	69f9      	ldr	r1, [r7, #28]
 80139aa:	6938      	ldr	r0, [r7, #16]
 80139ac:	f7ff fe52 	bl	8013654 <put_fat>
 80139b0:	4603      	mov	r3, r0
 80139b2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80139b4:	7dfb      	ldrb	r3, [r7, #23]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d109      	bne.n	80139ce <create_chain+0xe2>
 80139ba:	683b      	ldr	r3, [r7, #0]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d006      	beq.n	80139ce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80139c0:	69fa      	ldr	r2, [r7, #28]
 80139c2:	6839      	ldr	r1, [r7, #0]
 80139c4:	6938      	ldr	r0, [r7, #16]
 80139c6:	f7ff fe45 	bl	8013654 <put_fat>
 80139ca:	4603      	mov	r3, r0
 80139cc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80139ce:	7dfb      	ldrb	r3, [r7, #23]
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d116      	bne.n	8013a02 <create_chain+0x116>
		fs->last_clst = ncl;
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	69fa      	ldr	r2, [r7, #28]
 80139d8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80139da:	693b      	ldr	r3, [r7, #16]
 80139dc:	695a      	ldr	r2, [r3, #20]
 80139de:	693b      	ldr	r3, [r7, #16]
 80139e0:	699b      	ldr	r3, [r3, #24]
 80139e2:	3b02      	subs	r3, #2
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d804      	bhi.n	80139f2 <create_chain+0x106>
 80139e8:	693b      	ldr	r3, [r7, #16]
 80139ea:	695b      	ldr	r3, [r3, #20]
 80139ec:	1e5a      	subs	r2, r3, #1
 80139ee:	693b      	ldr	r3, [r7, #16]
 80139f0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80139f2:	693b      	ldr	r3, [r7, #16]
 80139f4:	791b      	ldrb	r3, [r3, #4]
 80139f6:	f043 0301 	orr.w	r3, r3, #1
 80139fa:	b2da      	uxtb	r2, r3
 80139fc:	693b      	ldr	r3, [r7, #16]
 80139fe:	711a      	strb	r2, [r3, #4]
 8013a00:	e007      	b.n	8013a12 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8013a02:	7dfb      	ldrb	r3, [r7, #23]
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d102      	bne.n	8013a0e <create_chain+0x122>
 8013a08:	f04f 33ff 	mov.w	r3, #4294967295
 8013a0c:	e000      	b.n	8013a10 <create_chain+0x124>
 8013a0e:	2301      	movs	r3, #1
 8013a10:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8013a12:	69fb      	ldr	r3, [r7, #28]
}
 8013a14:	4618      	mov	r0, r3
 8013a16:	3720      	adds	r7, #32
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	bd80      	pop	{r7, pc}

08013a1c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8013a1c:	b480      	push	{r7}
 8013a1e:	b087      	sub	sp, #28
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
 8013a24:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013a2c:	687b      	ldr	r3, [r7, #4]
 8013a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a30:	3304      	adds	r3, #4
 8013a32:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	0a5b      	lsrs	r3, r3, #9
 8013a38:	68fa      	ldr	r2, [r7, #12]
 8013a3a:	8952      	ldrh	r2, [r2, #10]
 8013a3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013a40:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a42:	693b      	ldr	r3, [r7, #16]
 8013a44:	1d1a      	adds	r2, r3, #4
 8013a46:	613a      	str	r2, [r7, #16]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013a4c:	68bb      	ldr	r3, [r7, #8]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d101      	bne.n	8013a56 <clmt_clust+0x3a>
 8013a52:	2300      	movs	r3, #0
 8013a54:	e010      	b.n	8013a78 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013a56:	697a      	ldr	r2, [r7, #20]
 8013a58:	68bb      	ldr	r3, [r7, #8]
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d307      	bcc.n	8013a6e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8013a5e:	697a      	ldr	r2, [r7, #20]
 8013a60:	68bb      	ldr	r3, [r7, #8]
 8013a62:	1ad3      	subs	r3, r2, r3
 8013a64:	617b      	str	r3, [r7, #20]
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	3304      	adds	r3, #4
 8013a6a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013a6c:	e7e9      	b.n	8013a42 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8013a6e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013a70:	693b      	ldr	r3, [r7, #16]
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	4413      	add	r3, r2
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	371c      	adds	r7, #28
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a82:	4770      	bx	lr

08013a84 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013a84:	b580      	push	{r7, lr}
 8013a86:	b086      	sub	sp, #24
 8013a88:	af00      	add	r7, sp, #0
 8013a8a:	6078      	str	r0, [r7, #4]
 8013a8c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	681b      	ldr	r3, [r3, #0]
 8013a92:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a9a:	d204      	bcs.n	8013aa6 <dir_sdi+0x22>
 8013a9c:	683b      	ldr	r3, [r7, #0]
 8013a9e:	f003 031f 	and.w	r3, r3, #31
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d001      	beq.n	8013aaa <dir_sdi+0x26>
		return FR_INT_ERR;
 8013aa6:	2302      	movs	r3, #2
 8013aa8:	e063      	b.n	8013b72 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8013aaa:	687b      	ldr	r3, [r7, #4]
 8013aac:	683a      	ldr	r2, [r7, #0]
 8013aae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	689b      	ldr	r3, [r3, #8]
 8013ab4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013ab6:	697b      	ldr	r3, [r7, #20]
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d106      	bne.n	8013aca <dir_sdi+0x46>
 8013abc:	693b      	ldr	r3, [r7, #16]
 8013abe:	781b      	ldrb	r3, [r3, #0]
 8013ac0:	2b02      	cmp	r3, #2
 8013ac2:	d902      	bls.n	8013aca <dir_sdi+0x46>
		clst = fs->dirbase;
 8013ac4:	693b      	ldr	r3, [r7, #16]
 8013ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013ac8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8013aca:	697b      	ldr	r3, [r7, #20]
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d10c      	bne.n	8013aea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8013ad0:	683b      	ldr	r3, [r7, #0]
 8013ad2:	095b      	lsrs	r3, r3, #5
 8013ad4:	693a      	ldr	r2, [r7, #16]
 8013ad6:	8912      	ldrh	r2, [r2, #8]
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d301      	bcc.n	8013ae0 <dir_sdi+0x5c>
 8013adc:	2302      	movs	r3, #2
 8013ade:	e048      	b.n	8013b72 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8013ae0:	693b      	ldr	r3, [r7, #16]
 8013ae2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	61da      	str	r2, [r3, #28]
 8013ae8:	e029      	b.n	8013b3e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	895b      	ldrh	r3, [r3, #10]
 8013aee:	025b      	lsls	r3, r3, #9
 8013af0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013af2:	e019      	b.n	8013b28 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	6979      	ldr	r1, [r7, #20]
 8013af8:	4618      	mov	r0, r3
 8013afa:	f7ff fd06 	bl	801350a <get_fat>
 8013afe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b06:	d101      	bne.n	8013b0c <dir_sdi+0x88>
 8013b08:	2301      	movs	r3, #1
 8013b0a:	e032      	b.n	8013b72 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	2b01      	cmp	r3, #1
 8013b10:	d904      	bls.n	8013b1c <dir_sdi+0x98>
 8013b12:	693b      	ldr	r3, [r7, #16]
 8013b14:	699b      	ldr	r3, [r3, #24]
 8013b16:	697a      	ldr	r2, [r7, #20]
 8013b18:	429a      	cmp	r2, r3
 8013b1a:	d301      	bcc.n	8013b20 <dir_sdi+0x9c>
 8013b1c:	2302      	movs	r3, #2
 8013b1e:	e028      	b.n	8013b72 <dir_sdi+0xee>
			ofs -= csz;
 8013b20:	683a      	ldr	r2, [r7, #0]
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	1ad3      	subs	r3, r2, r3
 8013b26:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8013b28:	683a      	ldr	r2, [r7, #0]
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	429a      	cmp	r2, r3
 8013b2e:	d2e1      	bcs.n	8013af4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013b30:	6979      	ldr	r1, [r7, #20]
 8013b32:	6938      	ldr	r0, [r7, #16]
 8013b34:	f7ff fcca 	bl	80134cc <clust2sect>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013b3e:	687b      	ldr	r3, [r7, #4]
 8013b40:	697a      	ldr	r2, [r7, #20]
 8013b42:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	69db      	ldr	r3, [r3, #28]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d101      	bne.n	8013b50 <dir_sdi+0xcc>
 8013b4c:	2302      	movs	r3, #2
 8013b4e:	e010      	b.n	8013b72 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	69da      	ldr	r2, [r3, #28]
 8013b54:	683b      	ldr	r3, [r7, #0]
 8013b56:	0a5b      	lsrs	r3, r3, #9
 8013b58:	441a      	add	r2, r3
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013b5e:	693b      	ldr	r3, [r7, #16]
 8013b60:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013b64:	683b      	ldr	r3, [r7, #0]
 8013b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013b6a:	441a      	add	r2, r3
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013b70:	2300      	movs	r3, #0
}
 8013b72:	4618      	mov	r0, r3
 8013b74:	3718      	adds	r7, #24
 8013b76:	46bd      	mov	sp, r7
 8013b78:	bd80      	pop	{r7, pc}

08013b7a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013b7a:	b580      	push	{r7, lr}
 8013b7c:	b086      	sub	sp, #24
 8013b7e:	af00      	add	r7, sp, #0
 8013b80:	6078      	str	r0, [r7, #4]
 8013b82:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013b84:	687b      	ldr	r3, [r7, #4]
 8013b86:	681b      	ldr	r3, [r3, #0]
 8013b88:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	695b      	ldr	r3, [r3, #20]
 8013b8e:	3320      	adds	r3, #32
 8013b90:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	69db      	ldr	r3, [r3, #28]
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d003      	beq.n	8013ba2 <dir_next+0x28>
 8013b9a:	68bb      	ldr	r3, [r7, #8]
 8013b9c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013ba0:	d301      	bcc.n	8013ba6 <dir_next+0x2c>
 8013ba2:	2304      	movs	r3, #4
 8013ba4:	e0aa      	b.n	8013cfc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013ba6:	68bb      	ldr	r3, [r7, #8]
 8013ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	f040 8098 	bne.w	8013ce2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	69db      	ldr	r3, [r3, #28]
 8013bb6:	1c5a      	adds	r2, r3, #1
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013bbc:	687b      	ldr	r3, [r7, #4]
 8013bbe:	699b      	ldr	r3, [r3, #24]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d10b      	bne.n	8013bdc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013bc4:	68bb      	ldr	r3, [r7, #8]
 8013bc6:	095b      	lsrs	r3, r3, #5
 8013bc8:	68fa      	ldr	r2, [r7, #12]
 8013bca:	8912      	ldrh	r2, [r2, #8]
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	f0c0 8088 	bcc.w	8013ce2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	61da      	str	r2, [r3, #28]
 8013bd8:	2304      	movs	r3, #4
 8013bda:	e08f      	b.n	8013cfc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	0a5b      	lsrs	r3, r3, #9
 8013be0:	68fa      	ldr	r2, [r7, #12]
 8013be2:	8952      	ldrh	r2, [r2, #10]
 8013be4:	3a01      	subs	r2, #1
 8013be6:	4013      	ands	r3, r2
 8013be8:	2b00      	cmp	r3, #0
 8013bea:	d17a      	bne.n	8013ce2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013bec:	687a      	ldr	r2, [r7, #4]
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	699b      	ldr	r3, [r3, #24]
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	4610      	mov	r0, r2
 8013bf6:	f7ff fc88 	bl	801350a <get_fat>
 8013bfa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013bfc:	697b      	ldr	r3, [r7, #20]
 8013bfe:	2b01      	cmp	r3, #1
 8013c00:	d801      	bhi.n	8013c06 <dir_next+0x8c>
 8013c02:	2302      	movs	r3, #2
 8013c04:	e07a      	b.n	8013cfc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013c06:	697b      	ldr	r3, [r7, #20]
 8013c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c0c:	d101      	bne.n	8013c12 <dir_next+0x98>
 8013c0e:	2301      	movs	r3, #1
 8013c10:	e074      	b.n	8013cfc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	699b      	ldr	r3, [r3, #24]
 8013c16:	697a      	ldr	r2, [r7, #20]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d358      	bcc.n	8013cce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013c1c:	683b      	ldr	r3, [r7, #0]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d104      	bne.n	8013c2c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	2200      	movs	r2, #0
 8013c26:	61da      	str	r2, [r3, #28]
 8013c28:	2304      	movs	r3, #4
 8013c2a:	e067      	b.n	8013cfc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013c2c:	687a      	ldr	r2, [r7, #4]
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	699b      	ldr	r3, [r3, #24]
 8013c32:	4619      	mov	r1, r3
 8013c34:	4610      	mov	r0, r2
 8013c36:	f7ff fe59 	bl	80138ec <create_chain>
 8013c3a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d101      	bne.n	8013c46 <dir_next+0xcc>
 8013c42:	2307      	movs	r3, #7
 8013c44:	e05a      	b.n	8013cfc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	2b01      	cmp	r3, #1
 8013c4a:	d101      	bne.n	8013c50 <dir_next+0xd6>
 8013c4c:	2302      	movs	r3, #2
 8013c4e:	e055      	b.n	8013cfc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013c50:	697b      	ldr	r3, [r7, #20]
 8013c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013c56:	d101      	bne.n	8013c5c <dir_next+0xe2>
 8013c58:	2301      	movs	r3, #1
 8013c5a:	e04f      	b.n	8013cfc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013c5c:	68f8      	ldr	r0, [r7, #12]
 8013c5e:	f7ff fb55 	bl	801330c <sync_window>
 8013c62:	4603      	mov	r3, r0
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	d001      	beq.n	8013c6c <dir_next+0xf2>
 8013c68:	2301      	movs	r3, #1
 8013c6a:	e047      	b.n	8013cfc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	3334      	adds	r3, #52	; 0x34
 8013c70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013c74:	2100      	movs	r1, #0
 8013c76:	4618      	mov	r0, r3
 8013c78:	f7ff f94f 	bl	8012f1a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013c7c:	2300      	movs	r3, #0
 8013c7e:	613b      	str	r3, [r7, #16]
 8013c80:	6979      	ldr	r1, [r7, #20]
 8013c82:	68f8      	ldr	r0, [r7, #12]
 8013c84:	f7ff fc22 	bl	80134cc <clust2sect>
 8013c88:	4602      	mov	r2, r0
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	631a      	str	r2, [r3, #48]	; 0x30
 8013c8e:	e012      	b.n	8013cb6 <dir_next+0x13c>
						fs->wflag = 1;
 8013c90:	68fb      	ldr	r3, [r7, #12]
 8013c92:	2201      	movs	r2, #1
 8013c94:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013c96:	68f8      	ldr	r0, [r7, #12]
 8013c98:	f7ff fb38 	bl	801330c <sync_window>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d001      	beq.n	8013ca6 <dir_next+0x12c>
 8013ca2:	2301      	movs	r3, #1
 8013ca4:	e02a      	b.n	8013cfc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013ca6:	693b      	ldr	r3, [r7, #16]
 8013ca8:	3301      	adds	r3, #1
 8013caa:	613b      	str	r3, [r7, #16]
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013cb0:	1c5a      	adds	r2, r3, #1
 8013cb2:	68fb      	ldr	r3, [r7, #12]
 8013cb4:	631a      	str	r2, [r3, #48]	; 0x30
 8013cb6:	68fb      	ldr	r3, [r7, #12]
 8013cb8:	895b      	ldrh	r3, [r3, #10]
 8013cba:	461a      	mov	r2, r3
 8013cbc:	693b      	ldr	r3, [r7, #16]
 8013cbe:	4293      	cmp	r3, r2
 8013cc0:	d3e6      	bcc.n	8013c90 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013cc2:	68fb      	ldr	r3, [r7, #12]
 8013cc4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013cc6:	693b      	ldr	r3, [r7, #16]
 8013cc8:	1ad2      	subs	r2, r2, r3
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	697a      	ldr	r2, [r7, #20]
 8013cd2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013cd4:	6979      	ldr	r1, [r7, #20]
 8013cd6:	68f8      	ldr	r0, [r7, #12]
 8013cd8:	f7ff fbf8 	bl	80134cc <clust2sect>
 8013cdc:	4602      	mov	r2, r0
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	68ba      	ldr	r2, [r7, #8]
 8013ce6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013cf4:	441a      	add	r2, r3
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013cfa:	2300      	movs	r3, #0
}
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	3718      	adds	r7, #24
 8013d00:	46bd      	mov	sp, r7
 8013d02:	bd80      	pop	{r7, pc}

08013d04 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013d04:	b580      	push	{r7, lr}
 8013d06:	b086      	sub	sp, #24
 8013d08:	af00      	add	r7, sp, #0
 8013d0a:	6078      	str	r0, [r7, #4]
 8013d0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013d14:	2100      	movs	r1, #0
 8013d16:	6878      	ldr	r0, [r7, #4]
 8013d18:	f7ff feb4 	bl	8013a84 <dir_sdi>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013d20:	7dfb      	ldrb	r3, [r7, #23]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d12b      	bne.n	8013d7e <dir_alloc+0x7a>
		n = 0;
 8013d26:	2300      	movs	r3, #0
 8013d28:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013d2a:	687b      	ldr	r3, [r7, #4]
 8013d2c:	69db      	ldr	r3, [r3, #28]
 8013d2e:	4619      	mov	r1, r3
 8013d30:	68f8      	ldr	r0, [r7, #12]
 8013d32:	f7ff fb2f 	bl	8013394 <move_window>
 8013d36:	4603      	mov	r3, r0
 8013d38:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013d3a:	7dfb      	ldrb	r3, [r7, #23]
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d11d      	bne.n	8013d7c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	6a1b      	ldr	r3, [r3, #32]
 8013d44:	781b      	ldrb	r3, [r3, #0]
 8013d46:	2be5      	cmp	r3, #229	; 0xe5
 8013d48:	d004      	beq.n	8013d54 <dir_alloc+0x50>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6a1b      	ldr	r3, [r3, #32]
 8013d4e:	781b      	ldrb	r3, [r3, #0]
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	d107      	bne.n	8013d64 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013d54:	693b      	ldr	r3, [r7, #16]
 8013d56:	3301      	adds	r3, #1
 8013d58:	613b      	str	r3, [r7, #16]
 8013d5a:	693a      	ldr	r2, [r7, #16]
 8013d5c:	683b      	ldr	r3, [r7, #0]
 8013d5e:	429a      	cmp	r2, r3
 8013d60:	d102      	bne.n	8013d68 <dir_alloc+0x64>
 8013d62:	e00c      	b.n	8013d7e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013d64:	2300      	movs	r3, #0
 8013d66:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013d68:	2101      	movs	r1, #1
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f7ff ff05 	bl	8013b7a <dir_next>
 8013d70:	4603      	mov	r3, r0
 8013d72:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013d74:	7dfb      	ldrb	r3, [r7, #23]
 8013d76:	2b00      	cmp	r3, #0
 8013d78:	d0d7      	beq.n	8013d2a <dir_alloc+0x26>
 8013d7a:	e000      	b.n	8013d7e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013d7c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013d7e:	7dfb      	ldrb	r3, [r7, #23]
 8013d80:	2b04      	cmp	r3, #4
 8013d82:	d101      	bne.n	8013d88 <dir_alloc+0x84>
 8013d84:	2307      	movs	r3, #7
 8013d86:	75fb      	strb	r3, [r7, #23]
	return res;
 8013d88:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	3718      	adds	r7, #24
 8013d8e:	46bd      	mov	sp, r7
 8013d90:	bd80      	pop	{r7, pc}

08013d92 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013d92:	b580      	push	{r7, lr}
 8013d94:	b084      	sub	sp, #16
 8013d96:	af00      	add	r7, sp, #0
 8013d98:	6078      	str	r0, [r7, #4]
 8013d9a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013d9c:	683b      	ldr	r3, [r7, #0]
 8013d9e:	331a      	adds	r3, #26
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7ff f817 	bl	8012dd4 <ld_word>
 8013da6:	4603      	mov	r3, r0
 8013da8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	781b      	ldrb	r3, [r3, #0]
 8013dae:	2b03      	cmp	r3, #3
 8013db0:	d109      	bne.n	8013dc6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013db2:	683b      	ldr	r3, [r7, #0]
 8013db4:	3314      	adds	r3, #20
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7ff f80c 	bl	8012dd4 <ld_word>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	041b      	lsls	r3, r3, #16
 8013dc0:	68fa      	ldr	r2, [r7, #12]
 8013dc2:	4313      	orrs	r3, r2
 8013dc4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013dc6:	68fb      	ldr	r3, [r7, #12]
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3710      	adds	r7, #16
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bd80      	pop	{r7, pc}

08013dd0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013dd0:	b580      	push	{r7, lr}
 8013dd2:	b084      	sub	sp, #16
 8013dd4:	af00      	add	r7, sp, #0
 8013dd6:	60f8      	str	r0, [r7, #12]
 8013dd8:	60b9      	str	r1, [r7, #8]
 8013dda:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013ddc:	68bb      	ldr	r3, [r7, #8]
 8013dde:	331a      	adds	r3, #26
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	b292      	uxth	r2, r2
 8013de4:	4611      	mov	r1, r2
 8013de6:	4618      	mov	r0, r3
 8013de8:	f7ff f82f 	bl	8012e4a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	2b03      	cmp	r3, #3
 8013df2:	d109      	bne.n	8013e08 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013df4:	68bb      	ldr	r3, [r7, #8]
 8013df6:	f103 0214 	add.w	r2, r3, #20
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	0c1b      	lsrs	r3, r3, #16
 8013dfe:	b29b      	uxth	r3, r3
 8013e00:	4619      	mov	r1, r3
 8013e02:	4610      	mov	r0, r2
 8013e04:	f7ff f821 	bl	8012e4a <st_word>
	}
}
 8013e08:	bf00      	nop
 8013e0a:	3710      	adds	r7, #16
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	bd80      	pop	{r7, pc}

08013e10 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013e10:	b580      	push	{r7, lr}
 8013e12:	b086      	sub	sp, #24
 8013e14:	af00      	add	r7, sp, #0
 8013e16:	6078      	str	r0, [r7, #4]
 8013e18:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013e1a:	2304      	movs	r3, #4
 8013e1c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013e24:	e03c      	b.n	8013ea0 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	69db      	ldr	r3, [r3, #28]
 8013e2a:	4619      	mov	r1, r3
 8013e2c:	6938      	ldr	r0, [r7, #16]
 8013e2e:	f7ff fab1 	bl	8013394 <move_window>
 8013e32:	4603      	mov	r3, r0
 8013e34:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013e36:	7dfb      	ldrb	r3, [r7, #23]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d136      	bne.n	8013eaa <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6a1b      	ldr	r3, [r3, #32]
 8013e40:	781b      	ldrb	r3, [r3, #0]
 8013e42:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013e44:	7bfb      	ldrb	r3, [r7, #15]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d102      	bne.n	8013e50 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013e4a:	2304      	movs	r3, #4
 8013e4c:	75fb      	strb	r3, [r7, #23]
 8013e4e:	e031      	b.n	8013eb4 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	6a1b      	ldr	r3, [r3, #32]
 8013e54:	330b      	adds	r3, #11
 8013e56:	781b      	ldrb	r3, [r3, #0]
 8013e58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013e5c:	73bb      	strb	r3, [r7, #14]
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	7bba      	ldrb	r2, [r7, #14]
 8013e62:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013e64:	7bfb      	ldrb	r3, [r7, #15]
 8013e66:	2be5      	cmp	r3, #229	; 0xe5
 8013e68:	d011      	beq.n	8013e8e <dir_read+0x7e>
 8013e6a:	7bfb      	ldrb	r3, [r7, #15]
 8013e6c:	2b2e      	cmp	r3, #46	; 0x2e
 8013e6e:	d00e      	beq.n	8013e8e <dir_read+0x7e>
 8013e70:	7bbb      	ldrb	r3, [r7, #14]
 8013e72:	2b0f      	cmp	r3, #15
 8013e74:	d00b      	beq.n	8013e8e <dir_read+0x7e>
 8013e76:	7bbb      	ldrb	r3, [r7, #14]
 8013e78:	f023 0320 	bic.w	r3, r3, #32
 8013e7c:	2b08      	cmp	r3, #8
 8013e7e:	bf0c      	ite	eq
 8013e80:	2301      	moveq	r3, #1
 8013e82:	2300      	movne	r3, #0
 8013e84:	b2db      	uxtb	r3, r3
 8013e86:	461a      	mov	r2, r3
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d00f      	beq.n	8013eae <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013e8e:	2100      	movs	r1, #0
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f7ff fe72 	bl	8013b7a <dir_next>
 8013e96:	4603      	mov	r3, r0
 8013e98:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013e9a:	7dfb      	ldrb	r3, [r7, #23]
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d108      	bne.n	8013eb2 <dir_read+0xa2>
	while (dp->sect) {
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	69db      	ldr	r3, [r3, #28]
 8013ea4:	2b00      	cmp	r3, #0
 8013ea6:	d1be      	bne.n	8013e26 <dir_read+0x16>
 8013ea8:	e004      	b.n	8013eb4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013eaa:	bf00      	nop
 8013eac:	e002      	b.n	8013eb4 <dir_read+0xa4>
				break;
 8013eae:	bf00      	nop
 8013eb0:	e000      	b.n	8013eb4 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013eb2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013eb4:	7dfb      	ldrb	r3, [r7, #23]
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d002      	beq.n	8013ec0 <dir_read+0xb0>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	2200      	movs	r2, #0
 8013ebe:	61da      	str	r2, [r3, #28]
	return res;
 8013ec0:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ec2:	4618      	mov	r0, r3
 8013ec4:	3718      	adds	r7, #24
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}

08013eca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013eca:	b580      	push	{r7, lr}
 8013ecc:	b086      	sub	sp, #24
 8013ece:	af00      	add	r7, sp, #0
 8013ed0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013ed8:	2100      	movs	r1, #0
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f7ff fdd2 	bl	8013a84 <dir_sdi>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013ee4:	7dfb      	ldrb	r3, [r7, #23]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d001      	beq.n	8013eee <dir_find+0x24>
 8013eea:	7dfb      	ldrb	r3, [r7, #23]
 8013eec:	e03e      	b.n	8013f6c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	69db      	ldr	r3, [r3, #28]
 8013ef2:	4619      	mov	r1, r3
 8013ef4:	6938      	ldr	r0, [r7, #16]
 8013ef6:	f7ff fa4d 	bl	8013394 <move_window>
 8013efa:	4603      	mov	r3, r0
 8013efc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013efe:	7dfb      	ldrb	r3, [r7, #23]
 8013f00:	2b00      	cmp	r3, #0
 8013f02:	d12f      	bne.n	8013f64 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	6a1b      	ldr	r3, [r3, #32]
 8013f08:	781b      	ldrb	r3, [r3, #0]
 8013f0a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013f0c:	7bfb      	ldrb	r3, [r7, #15]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d102      	bne.n	8013f18 <dir_find+0x4e>
 8013f12:	2304      	movs	r3, #4
 8013f14:	75fb      	strb	r3, [r7, #23]
 8013f16:	e028      	b.n	8013f6a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	6a1b      	ldr	r3, [r3, #32]
 8013f1c:	330b      	adds	r3, #11
 8013f1e:	781b      	ldrb	r3, [r3, #0]
 8013f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013f24:	b2da      	uxtb	r2, r3
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6a1b      	ldr	r3, [r3, #32]
 8013f2e:	330b      	adds	r3, #11
 8013f30:	781b      	ldrb	r3, [r3, #0]
 8013f32:	f003 0308 	and.w	r3, r3, #8
 8013f36:	2b00      	cmp	r3, #0
 8013f38:	d10a      	bne.n	8013f50 <dir_find+0x86>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	6a18      	ldr	r0, [r3, #32]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	3324      	adds	r3, #36	; 0x24
 8013f42:	220b      	movs	r2, #11
 8013f44:	4619      	mov	r1, r3
 8013f46:	f7ff f802 	bl	8012f4e <mem_cmp>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d00b      	beq.n	8013f68 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013f50:	2100      	movs	r1, #0
 8013f52:	6878      	ldr	r0, [r7, #4]
 8013f54:	f7ff fe11 	bl	8013b7a <dir_next>
 8013f58:	4603      	mov	r3, r0
 8013f5a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013f5c:	7dfb      	ldrb	r3, [r7, #23]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d0c5      	beq.n	8013eee <dir_find+0x24>
 8013f62:	e002      	b.n	8013f6a <dir_find+0xa0>
		if (res != FR_OK) break;
 8013f64:	bf00      	nop
 8013f66:	e000      	b.n	8013f6a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013f68:	bf00      	nop

	return res;
 8013f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3718      	adds	r7, #24
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}

08013f74 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013f74:	b580      	push	{r7, lr}
 8013f76:	b084      	sub	sp, #16
 8013f78:	af00      	add	r7, sp, #0
 8013f7a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681b      	ldr	r3, [r3, #0]
 8013f80:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013f82:	2101      	movs	r1, #1
 8013f84:	6878      	ldr	r0, [r7, #4]
 8013f86:	f7ff febd 	bl	8013d04 <dir_alloc>
 8013f8a:	4603      	mov	r3, r0
 8013f8c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013f8e:	7bfb      	ldrb	r3, [r7, #15]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d11c      	bne.n	8013fce <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	69db      	ldr	r3, [r3, #28]
 8013f98:	4619      	mov	r1, r3
 8013f9a:	68b8      	ldr	r0, [r7, #8]
 8013f9c:	f7ff f9fa 	bl	8013394 <move_window>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013fa4:	7bfb      	ldrb	r3, [r7, #15]
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d111      	bne.n	8013fce <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	6a1b      	ldr	r3, [r3, #32]
 8013fae:	2220      	movs	r2, #32
 8013fb0:	2100      	movs	r1, #0
 8013fb2:	4618      	mov	r0, r3
 8013fb4:	f7fe ffb1 	bl	8012f1a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	6a18      	ldr	r0, [r3, #32]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	3324      	adds	r3, #36	; 0x24
 8013fc0:	220b      	movs	r2, #11
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	f7fe ff88 	bl	8012ed8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013fc8:	68bb      	ldr	r3, [r7, #8]
 8013fca:	2201      	movs	r2, #1
 8013fcc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8013fd0:	4618      	mov	r0, r3
 8013fd2:	3710      	adds	r7, #16
 8013fd4:	46bd      	mov	sp, r7
 8013fd6:	bd80      	pop	{r7, pc}

08013fd8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013fd8:	b580      	push	{r7, lr}
 8013fda:	b086      	sub	sp, #24
 8013fdc:	af00      	add	r7, sp, #0
 8013fde:	6078      	str	r0, [r7, #4]
 8013fe0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013fe2:	683b      	ldr	r3, [r7, #0]
 8013fe4:	2200      	movs	r2, #0
 8013fe6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013fe8:	687b      	ldr	r3, [r7, #4]
 8013fea:	69db      	ldr	r3, [r3, #28]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d04e      	beq.n	801408e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8013ff0:	2300      	movs	r3, #0
 8013ff2:	613b      	str	r3, [r7, #16]
 8013ff4:	693b      	ldr	r3, [r7, #16]
 8013ff6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8013ff8:	e021      	b.n	801403e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6a1a      	ldr	r2, [r3, #32]
 8013ffe:	697b      	ldr	r3, [r7, #20]
 8014000:	1c59      	adds	r1, r3, #1
 8014002:	6179      	str	r1, [r7, #20]
 8014004:	4413      	add	r3, r2
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 801400a:	7bfb      	ldrb	r3, [r7, #15]
 801400c:	2b20      	cmp	r3, #32
 801400e:	d100      	bne.n	8014012 <get_fileinfo+0x3a>
 8014010:	e015      	b.n	801403e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8014012:	7bfb      	ldrb	r3, [r7, #15]
 8014014:	2b05      	cmp	r3, #5
 8014016:	d101      	bne.n	801401c <get_fileinfo+0x44>
 8014018:	23e5      	movs	r3, #229	; 0xe5
 801401a:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 801401c:	697b      	ldr	r3, [r7, #20]
 801401e:	2b09      	cmp	r3, #9
 8014020:	d106      	bne.n	8014030 <get_fileinfo+0x58>
 8014022:	693b      	ldr	r3, [r7, #16]
 8014024:	1c5a      	adds	r2, r3, #1
 8014026:	613a      	str	r2, [r7, #16]
 8014028:	683a      	ldr	r2, [r7, #0]
 801402a:	4413      	add	r3, r2
 801402c:	222e      	movs	r2, #46	; 0x2e
 801402e:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8014030:	693b      	ldr	r3, [r7, #16]
 8014032:	1c5a      	adds	r2, r3, #1
 8014034:	613a      	str	r2, [r7, #16]
 8014036:	683a      	ldr	r2, [r7, #0]
 8014038:	4413      	add	r3, r2
 801403a:	7bfa      	ldrb	r2, [r7, #15]
 801403c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	2b0a      	cmp	r3, #10
 8014042:	d9da      	bls.n	8013ffa <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8014044:	683a      	ldr	r2, [r7, #0]
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	4413      	add	r3, r2
 801404a:	3309      	adds	r3, #9
 801404c:	2200      	movs	r2, #0
 801404e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6a1b      	ldr	r3, [r3, #32]
 8014054:	7ada      	ldrb	r2, [r3, #11]
 8014056:	683b      	ldr	r3, [r7, #0]
 8014058:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	6a1b      	ldr	r3, [r3, #32]
 801405e:	331c      	adds	r3, #28
 8014060:	4618      	mov	r0, r3
 8014062:	f7fe fecf 	bl	8012e04 <ld_dword>
 8014066:	4602      	mov	r2, r0
 8014068:	683b      	ldr	r3, [r7, #0]
 801406a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	6a1b      	ldr	r3, [r3, #32]
 8014070:	3316      	adds	r3, #22
 8014072:	4618      	mov	r0, r3
 8014074:	f7fe fec6 	bl	8012e04 <ld_dword>
 8014078:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801407a:	68bb      	ldr	r3, [r7, #8]
 801407c:	b29a      	uxth	r2, r3
 801407e:	683b      	ldr	r3, [r7, #0]
 8014080:	80da      	strh	r2, [r3, #6]
 8014082:	68bb      	ldr	r3, [r7, #8]
 8014084:	0c1b      	lsrs	r3, r3, #16
 8014086:	b29a      	uxth	r2, r3
 8014088:	683b      	ldr	r3, [r7, #0]
 801408a:	809a      	strh	r2, [r3, #4]
 801408c:	e000      	b.n	8014090 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 801408e:	bf00      	nop
}
 8014090:	3718      	adds	r7, #24
 8014092:	46bd      	mov	sp, r7
 8014094:	bd80      	pop	{r7, pc}
	...

08014098 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8014098:	b480      	push	{r7}
 801409a:	b085      	sub	sp, #20
 801409c:	af00      	add	r7, sp, #0
 801409e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	1c59      	adds	r1, r3, #1
 80140a6:	687a      	ldr	r2, [r7, #4]
 80140a8:	6011      	str	r1, [r2, #0]
 80140aa:	781b      	ldrb	r3, [r3, #0]
 80140ac:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80140ae:	89fb      	ldrh	r3, [r7, #14]
 80140b0:	2b60      	cmp	r3, #96	; 0x60
 80140b2:	d905      	bls.n	80140c0 <get_achar+0x28>
 80140b4:	89fb      	ldrh	r3, [r7, #14]
 80140b6:	2b7a      	cmp	r3, #122	; 0x7a
 80140b8:	d802      	bhi.n	80140c0 <get_achar+0x28>
 80140ba:	89fb      	ldrh	r3, [r7, #14]
 80140bc:	3b20      	subs	r3, #32
 80140be:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80140c0:	89fb      	ldrh	r3, [r7, #14]
 80140c2:	2b7f      	cmp	r3, #127	; 0x7f
 80140c4:	d904      	bls.n	80140d0 <get_achar+0x38>
 80140c6:	89fb      	ldrh	r3, [r7, #14]
 80140c8:	3b80      	subs	r3, #128	; 0x80
 80140ca:	4a05      	ldr	r2, [pc, #20]	; (80140e0 <get_achar+0x48>)
 80140cc:	5cd3      	ldrb	r3, [r2, r3]
 80140ce:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 80140d0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 80140d2:	4618      	mov	r0, r3
 80140d4:	3714      	adds	r7, #20
 80140d6:	46bd      	mov	sp, r7
 80140d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140dc:	4770      	bx	lr
 80140de:	bf00      	nop
 80140e0:	0801d79c 	.word	0x0801d79c

080140e4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b08a      	sub	sp, #40	; 0x28
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
 80140f0:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 80140f2:	e009      	b.n	8014108 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 80140f4:	f107 0308 	add.w	r3, r7, #8
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7ff ffcd 	bl	8014098 <get_achar>
 80140fe:	4603      	mov	r3, r0
 8014100:	2b00      	cmp	r3, #0
 8014102:	d101      	bne.n	8014108 <pattern_matching+0x24>
 8014104:	2300      	movs	r3, #0
 8014106:	e064      	b.n	80141d2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	1e5a      	subs	r2, r3, #1
 801410c:	607a      	str	r2, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d1f0      	bne.n	80140f4 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8014112:	68fb      	ldr	r3, [r7, #12]
 8014114:	781b      	ldrb	r3, [r3, #0]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d104      	bne.n	8014124 <pattern_matching+0x40>
 801411a:	683b      	ldr	r3, [r7, #0]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d001      	beq.n	8014124 <pattern_matching+0x40>
 8014120:	2301      	movs	r3, #1
 8014122:	e056      	b.n	80141d2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	617b      	str	r3, [r7, #20]
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	781b      	ldrb	r3, [r3, #0]
 8014130:	2b3f      	cmp	r3, #63	; 0x3f
 8014132:	d003      	beq.n	801413c <pattern_matching+0x58>
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	781b      	ldrb	r3, [r3, #0]
 8014138:	2b2a      	cmp	r3, #42	; 0x2a
 801413a:	d126      	bne.n	801418a <pattern_matching+0xa6>
				nm = nx = 0;
 801413c:	2300      	movs	r3, #0
 801413e:	61fb      	str	r3, [r7, #28]
 8014140:	69fb      	ldr	r3, [r7, #28]
 8014142:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8014144:	697b      	ldr	r3, [r7, #20]
 8014146:	1c5a      	adds	r2, r3, #1
 8014148:	617a      	str	r2, [r7, #20]
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	2b3f      	cmp	r3, #63	; 0x3f
 801414e:	d103      	bne.n	8014158 <pattern_matching+0x74>
 8014150:	6a3b      	ldr	r3, [r7, #32]
 8014152:	3301      	adds	r3, #1
 8014154:	623b      	str	r3, [r7, #32]
 8014156:	e001      	b.n	801415c <pattern_matching+0x78>
 8014158:	2301      	movs	r3, #1
 801415a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	2b3f      	cmp	r3, #63	; 0x3f
 8014162:	d0ef      	beq.n	8014144 <pattern_matching+0x60>
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	781b      	ldrb	r3, [r3, #0]
 8014168:	2b2a      	cmp	r3, #42	; 0x2a
 801416a:	d0eb      	beq.n	8014144 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 801416c:	6978      	ldr	r0, [r7, #20]
 801416e:	6939      	ldr	r1, [r7, #16]
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	6a3a      	ldr	r2, [r7, #32]
 8014174:	f7ff ffb6 	bl	80140e4 <pattern_matching>
 8014178:	4603      	mov	r3, r0
 801417a:	2b00      	cmp	r3, #0
 801417c:	d001      	beq.n	8014182 <pattern_matching+0x9e>
 801417e:	2301      	movs	r3, #1
 8014180:	e027      	b.n	80141d2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8014182:	693b      	ldr	r3, [r7, #16]
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014188:	e017      	b.n	80141ba <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801418a:	f107 0314 	add.w	r3, r7, #20
 801418e:	4618      	mov	r0, r3
 8014190:	f7ff ff82 	bl	8014098 <get_achar>
 8014194:	4603      	mov	r3, r0
 8014196:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8014198:	f107 0310 	add.w	r3, r7, #16
 801419c:	4618      	mov	r0, r3
 801419e:	f7ff ff7b 	bl	8014098 <get_achar>
 80141a2:	4603      	mov	r3, r0
 80141a4:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 80141a6:	8b7a      	ldrh	r2, [r7, #26]
 80141a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80141aa:	429a      	cmp	r2, r3
 80141ac:	d104      	bne.n	80141b8 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80141ae:	8b7b      	ldrh	r3, [r7, #26]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d1bb      	bne.n	801412c <pattern_matching+0x48>
 80141b4:	2301      	movs	r3, #1
 80141b6:	e00c      	b.n	80141d2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 80141b8:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 80141ba:	f107 0308 	add.w	r3, r7, #8
 80141be:	4618      	mov	r0, r3
 80141c0:	f7ff ff6a 	bl	8014098 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80141c4:	683b      	ldr	r3, [r7, #0]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d002      	beq.n	80141d0 <pattern_matching+0xec>
 80141ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	d1a9      	bne.n	8014124 <pattern_matching+0x40>

	return 0;
 80141d0:	2300      	movs	r3, #0
}
 80141d2:	4618      	mov	r0, r3
 80141d4:	3728      	adds	r7, #40	; 0x28
 80141d6:	46bd      	mov	sp, r7
 80141d8:	bd80      	pop	{r7, pc}
	...

080141dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80141dc:	b580      	push	{r7, lr}
 80141de:	b088      	sub	sp, #32
 80141e0:	af00      	add	r7, sp, #0
 80141e2:	6078      	str	r0, [r7, #4]
 80141e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80141e6:	683b      	ldr	r3, [r7, #0]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	60fb      	str	r3, [r7, #12]
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	3324      	adds	r3, #36	; 0x24
 80141f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80141f2:	220b      	movs	r2, #11
 80141f4:	2120      	movs	r1, #32
 80141f6:	68b8      	ldr	r0, [r7, #8]
 80141f8:	f7fe fe8f 	bl	8012f1a <mem_set>
	si = i = 0; ni = 8;
 80141fc:	2300      	movs	r3, #0
 80141fe:	613b      	str	r3, [r7, #16]
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	617b      	str	r3, [r7, #20]
 8014204:	2308      	movs	r3, #8
 8014206:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8014208:	697b      	ldr	r3, [r7, #20]
 801420a:	1c5a      	adds	r2, r3, #1
 801420c:	617a      	str	r2, [r7, #20]
 801420e:	68fa      	ldr	r2, [r7, #12]
 8014210:	4413      	add	r3, r2
 8014212:	781b      	ldrb	r3, [r3, #0]
 8014214:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8014216:	7ffb      	ldrb	r3, [r7, #31]
 8014218:	2b20      	cmp	r3, #32
 801421a:	d94e      	bls.n	80142ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801421c:	7ffb      	ldrb	r3, [r7, #31]
 801421e:	2b2f      	cmp	r3, #47	; 0x2f
 8014220:	d006      	beq.n	8014230 <create_name+0x54>
 8014222:	7ffb      	ldrb	r3, [r7, #31]
 8014224:	2b5c      	cmp	r3, #92	; 0x5c
 8014226:	d110      	bne.n	801424a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8014228:	e002      	b.n	8014230 <create_name+0x54>
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	3301      	adds	r3, #1
 801422e:	617b      	str	r3, [r7, #20]
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	4413      	add	r3, r2
 8014236:	781b      	ldrb	r3, [r3, #0]
 8014238:	2b2f      	cmp	r3, #47	; 0x2f
 801423a:	d0f6      	beq.n	801422a <create_name+0x4e>
 801423c:	68fa      	ldr	r2, [r7, #12]
 801423e:	697b      	ldr	r3, [r7, #20]
 8014240:	4413      	add	r3, r2
 8014242:	781b      	ldrb	r3, [r3, #0]
 8014244:	2b5c      	cmp	r3, #92	; 0x5c
 8014246:	d0f0      	beq.n	801422a <create_name+0x4e>
			break;
 8014248:	e038      	b.n	80142bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801424a:	7ffb      	ldrb	r3, [r7, #31]
 801424c:	2b2e      	cmp	r3, #46	; 0x2e
 801424e:	d003      	beq.n	8014258 <create_name+0x7c>
 8014250:	693a      	ldr	r2, [r7, #16]
 8014252:	69bb      	ldr	r3, [r7, #24]
 8014254:	429a      	cmp	r2, r3
 8014256:	d30c      	bcc.n	8014272 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014258:	69bb      	ldr	r3, [r7, #24]
 801425a:	2b0b      	cmp	r3, #11
 801425c:	d002      	beq.n	8014264 <create_name+0x88>
 801425e:	7ffb      	ldrb	r3, [r7, #31]
 8014260:	2b2e      	cmp	r3, #46	; 0x2e
 8014262:	d001      	beq.n	8014268 <create_name+0x8c>
 8014264:	2306      	movs	r3, #6
 8014266:	e044      	b.n	80142f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014268:	2308      	movs	r3, #8
 801426a:	613b      	str	r3, [r7, #16]
 801426c:	230b      	movs	r3, #11
 801426e:	61bb      	str	r3, [r7, #24]
			continue;
 8014270:	e022      	b.n	80142b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014272:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014276:	2b00      	cmp	r3, #0
 8014278:	da04      	bge.n	8014284 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801427a:	7ffb      	ldrb	r3, [r7, #31]
 801427c:	3b80      	subs	r3, #128	; 0x80
 801427e:	4a1f      	ldr	r2, [pc, #124]	; (80142fc <create_name+0x120>)
 8014280:	5cd3      	ldrb	r3, [r2, r3]
 8014282:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014284:	7ffb      	ldrb	r3, [r7, #31]
 8014286:	4619      	mov	r1, r3
 8014288:	481d      	ldr	r0, [pc, #116]	; (8014300 <create_name+0x124>)
 801428a:	f7fe fe87 	bl	8012f9c <chk_chr>
 801428e:	4603      	mov	r3, r0
 8014290:	2b00      	cmp	r3, #0
 8014292:	d001      	beq.n	8014298 <create_name+0xbc>
 8014294:	2306      	movs	r3, #6
 8014296:	e02c      	b.n	80142f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014298:	7ffb      	ldrb	r3, [r7, #31]
 801429a:	2b60      	cmp	r3, #96	; 0x60
 801429c:	d905      	bls.n	80142aa <create_name+0xce>
 801429e:	7ffb      	ldrb	r3, [r7, #31]
 80142a0:	2b7a      	cmp	r3, #122	; 0x7a
 80142a2:	d802      	bhi.n	80142aa <create_name+0xce>
 80142a4:	7ffb      	ldrb	r3, [r7, #31]
 80142a6:	3b20      	subs	r3, #32
 80142a8:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80142aa:	693b      	ldr	r3, [r7, #16]
 80142ac:	1c5a      	adds	r2, r3, #1
 80142ae:	613a      	str	r2, [r7, #16]
 80142b0:	68ba      	ldr	r2, [r7, #8]
 80142b2:	4413      	add	r3, r2
 80142b4:	7ffa      	ldrb	r2, [r7, #31]
 80142b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80142b8:	e7a6      	b.n	8014208 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80142ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80142bc:	68fa      	ldr	r2, [r7, #12]
 80142be:	697b      	ldr	r3, [r7, #20]
 80142c0:	441a      	add	r2, r3
 80142c2:	683b      	ldr	r3, [r7, #0]
 80142c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80142c6:	693b      	ldr	r3, [r7, #16]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d101      	bne.n	80142d0 <create_name+0xf4>
 80142cc:	2306      	movs	r3, #6
 80142ce:	e010      	b.n	80142f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80142d0:	68bb      	ldr	r3, [r7, #8]
 80142d2:	781b      	ldrb	r3, [r3, #0]
 80142d4:	2be5      	cmp	r3, #229	; 0xe5
 80142d6:	d102      	bne.n	80142de <create_name+0x102>
 80142d8:	68bb      	ldr	r3, [r7, #8]
 80142da:	2205      	movs	r2, #5
 80142dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80142de:	7ffb      	ldrb	r3, [r7, #31]
 80142e0:	2b20      	cmp	r3, #32
 80142e2:	d801      	bhi.n	80142e8 <create_name+0x10c>
 80142e4:	2204      	movs	r2, #4
 80142e6:	e000      	b.n	80142ea <create_name+0x10e>
 80142e8:	2200      	movs	r2, #0
 80142ea:	68bb      	ldr	r3, [r7, #8]
 80142ec:	330b      	adds	r3, #11
 80142ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80142f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3720      	adds	r7, #32
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}
 80142fa:	bf00      	nop
 80142fc:	0801d79c 	.word	0x0801d79c
 8014300:	0801d55c 	.word	0x0801d55c

08014304 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b086      	sub	sp, #24
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8014312:	693b      	ldr	r3, [r7, #16]
 8014314:	681b      	ldr	r3, [r3, #0]
 8014316:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8014318:	e002      	b.n	8014320 <follow_path+0x1c>
 801431a:	683b      	ldr	r3, [r7, #0]
 801431c:	3301      	adds	r3, #1
 801431e:	603b      	str	r3, [r7, #0]
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	781b      	ldrb	r3, [r3, #0]
 8014324:	2b2f      	cmp	r3, #47	; 0x2f
 8014326:	d0f8      	beq.n	801431a <follow_path+0x16>
 8014328:	683b      	ldr	r3, [r7, #0]
 801432a:	781b      	ldrb	r3, [r3, #0]
 801432c:	2b5c      	cmp	r3, #92	; 0x5c
 801432e:	d0f4      	beq.n	801431a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014330:	693b      	ldr	r3, [r7, #16]
 8014332:	2200      	movs	r2, #0
 8014334:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	781b      	ldrb	r3, [r3, #0]
 801433a:	2b1f      	cmp	r3, #31
 801433c:	d80a      	bhi.n	8014354 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2280      	movs	r2, #128	; 0x80
 8014342:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014346:	2100      	movs	r1, #0
 8014348:	6878      	ldr	r0, [r7, #4]
 801434a:	f7ff fb9b 	bl	8013a84 <dir_sdi>
 801434e:	4603      	mov	r3, r0
 8014350:	75fb      	strb	r3, [r7, #23]
 8014352:	e043      	b.n	80143dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014354:	463b      	mov	r3, r7
 8014356:	4619      	mov	r1, r3
 8014358:	6878      	ldr	r0, [r7, #4]
 801435a:	f7ff ff3f 	bl	80141dc <create_name>
 801435e:	4603      	mov	r3, r0
 8014360:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014362:	7dfb      	ldrb	r3, [r7, #23]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d134      	bne.n	80143d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014368:	6878      	ldr	r0, [r7, #4]
 801436a:	f7ff fdae 	bl	8013eca <dir_find>
 801436e:	4603      	mov	r3, r0
 8014370:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014378:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801437a:	7dfb      	ldrb	r3, [r7, #23]
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00a      	beq.n	8014396 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014380:	7dfb      	ldrb	r3, [r7, #23]
 8014382:	2b04      	cmp	r3, #4
 8014384:	d127      	bne.n	80143d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014386:	7afb      	ldrb	r3, [r7, #11]
 8014388:	f003 0304 	and.w	r3, r3, #4
 801438c:	2b00      	cmp	r3, #0
 801438e:	d122      	bne.n	80143d6 <follow_path+0xd2>
 8014390:	2305      	movs	r3, #5
 8014392:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014394:	e01f      	b.n	80143d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014396:	7afb      	ldrb	r3, [r7, #11]
 8014398:	f003 0304 	and.w	r3, r3, #4
 801439c:	2b00      	cmp	r3, #0
 801439e:	d11c      	bne.n	80143da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	799b      	ldrb	r3, [r3, #6]
 80143a4:	f003 0310 	and.w	r3, r3, #16
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d102      	bne.n	80143b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80143ac:	2305      	movs	r3, #5
 80143ae:	75fb      	strb	r3, [r7, #23]
 80143b0:	e014      	b.n	80143dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80143b8:	687b      	ldr	r3, [r7, #4]
 80143ba:	695b      	ldr	r3, [r3, #20]
 80143bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80143c0:	4413      	add	r3, r2
 80143c2:	4619      	mov	r1, r3
 80143c4:	68f8      	ldr	r0, [r7, #12]
 80143c6:	f7ff fce4 	bl	8013d92 <ld_clust>
 80143ca:	4602      	mov	r2, r0
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80143d0:	e7c0      	b.n	8014354 <follow_path+0x50>
			if (res != FR_OK) break;
 80143d2:	bf00      	nop
 80143d4:	e002      	b.n	80143dc <follow_path+0xd8>
				break;
 80143d6:	bf00      	nop
 80143d8:	e000      	b.n	80143dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80143da:	bf00      	nop
			}
		}
	}

	return res;
 80143dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3718      	adds	r7, #24
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd80      	pop	{r7, pc}

080143e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80143e6:	b480      	push	{r7}
 80143e8:	b087      	sub	sp, #28
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80143ee:	f04f 33ff 	mov.w	r3, #4294967295
 80143f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	681b      	ldr	r3, [r3, #0]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d031      	beq.n	8014460 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	681b      	ldr	r3, [r3, #0]
 8014400:	617b      	str	r3, [r7, #20]
 8014402:	e002      	b.n	801440a <get_ldnumber+0x24>
 8014404:	697b      	ldr	r3, [r7, #20]
 8014406:	3301      	adds	r3, #1
 8014408:	617b      	str	r3, [r7, #20]
 801440a:	697b      	ldr	r3, [r7, #20]
 801440c:	781b      	ldrb	r3, [r3, #0]
 801440e:	2b20      	cmp	r3, #32
 8014410:	d903      	bls.n	801441a <get_ldnumber+0x34>
 8014412:	697b      	ldr	r3, [r7, #20]
 8014414:	781b      	ldrb	r3, [r3, #0]
 8014416:	2b3a      	cmp	r3, #58	; 0x3a
 8014418:	d1f4      	bne.n	8014404 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801441a:	697b      	ldr	r3, [r7, #20]
 801441c:	781b      	ldrb	r3, [r3, #0]
 801441e:	2b3a      	cmp	r3, #58	; 0x3a
 8014420:	d11c      	bne.n	801445c <get_ldnumber+0x76>
			tp = *path;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8014428:	68fb      	ldr	r3, [r7, #12]
 801442a:	1c5a      	adds	r2, r3, #1
 801442c:	60fa      	str	r2, [r7, #12]
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	3b30      	subs	r3, #48	; 0x30
 8014432:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014434:	68bb      	ldr	r3, [r7, #8]
 8014436:	2b09      	cmp	r3, #9
 8014438:	d80e      	bhi.n	8014458 <get_ldnumber+0x72>
 801443a:	68fa      	ldr	r2, [r7, #12]
 801443c:	697b      	ldr	r3, [r7, #20]
 801443e:	429a      	cmp	r2, r3
 8014440:	d10a      	bne.n	8014458 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d107      	bne.n	8014458 <get_ldnumber+0x72>
					vol = (int)i;
 8014448:	68bb      	ldr	r3, [r7, #8]
 801444a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801444c:	697b      	ldr	r3, [r7, #20]
 801444e:	3301      	adds	r3, #1
 8014450:	617b      	str	r3, [r7, #20]
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	697a      	ldr	r2, [r7, #20]
 8014456:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014458:	693b      	ldr	r3, [r7, #16]
 801445a:	e002      	b.n	8014462 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801445c:	2300      	movs	r3, #0
 801445e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014460:	693b      	ldr	r3, [r7, #16]
}
 8014462:	4618      	mov	r0, r3
 8014464:	371c      	adds	r7, #28
 8014466:	46bd      	mov	sp, r7
 8014468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801446c:	4770      	bx	lr
	...

08014470 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014470:	b580      	push	{r7, lr}
 8014472:	b082      	sub	sp, #8
 8014474:	af00      	add	r7, sp, #0
 8014476:	6078      	str	r0, [r7, #4]
 8014478:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	2200      	movs	r2, #0
 801447e:	70da      	strb	r2, [r3, #3]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	f04f 32ff 	mov.w	r2, #4294967295
 8014486:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014488:	6839      	ldr	r1, [r7, #0]
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f7fe ff82 	bl	8013394 <move_window>
 8014490:	4603      	mov	r3, r0
 8014492:	2b00      	cmp	r3, #0
 8014494:	d001      	beq.n	801449a <check_fs+0x2a>
 8014496:	2304      	movs	r3, #4
 8014498:	e038      	b.n	801450c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	3334      	adds	r3, #52	; 0x34
 801449e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80144a2:	4618      	mov	r0, r3
 80144a4:	f7fe fc96 	bl	8012dd4 <ld_word>
 80144a8:	4603      	mov	r3, r0
 80144aa:	461a      	mov	r2, r3
 80144ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80144b0:	429a      	cmp	r2, r3
 80144b2:	d001      	beq.n	80144b8 <check_fs+0x48>
 80144b4:	2303      	movs	r3, #3
 80144b6:	e029      	b.n	801450c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144be:	2be9      	cmp	r3, #233	; 0xe9
 80144c0:	d009      	beq.n	80144d6 <check_fs+0x66>
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80144c8:	2beb      	cmp	r3, #235	; 0xeb
 80144ca:	d11e      	bne.n	801450a <check_fs+0x9a>
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80144d2:	2b90      	cmp	r3, #144	; 0x90
 80144d4:	d119      	bne.n	801450a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	3334      	adds	r3, #52	; 0x34
 80144da:	3336      	adds	r3, #54	; 0x36
 80144dc:	4618      	mov	r0, r3
 80144de:	f7fe fc91 	bl	8012e04 <ld_dword>
 80144e2:	4603      	mov	r3, r0
 80144e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80144e8:	4a0a      	ldr	r2, [pc, #40]	; (8014514 <check_fs+0xa4>)
 80144ea:	4293      	cmp	r3, r2
 80144ec:	d101      	bne.n	80144f2 <check_fs+0x82>
 80144ee:	2300      	movs	r3, #0
 80144f0:	e00c      	b.n	801450c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80144f2:	687b      	ldr	r3, [r7, #4]
 80144f4:	3334      	adds	r3, #52	; 0x34
 80144f6:	3352      	adds	r3, #82	; 0x52
 80144f8:	4618      	mov	r0, r3
 80144fa:	f7fe fc83 	bl	8012e04 <ld_dword>
 80144fe:	4602      	mov	r2, r0
 8014500:	4b05      	ldr	r3, [pc, #20]	; (8014518 <check_fs+0xa8>)
 8014502:	429a      	cmp	r2, r3
 8014504:	d101      	bne.n	801450a <check_fs+0x9a>
 8014506:	2300      	movs	r3, #0
 8014508:	e000      	b.n	801450c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 801450a:	2302      	movs	r3, #2
}
 801450c:	4618      	mov	r0, r3
 801450e:	3708      	adds	r7, #8
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}
 8014514:	00544146 	.word	0x00544146
 8014518:	33544146 	.word	0x33544146

0801451c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801451c:	b580      	push	{r7, lr}
 801451e:	b096      	sub	sp, #88	; 0x58
 8014520:	af00      	add	r7, sp, #0
 8014522:	60f8      	str	r0, [r7, #12]
 8014524:	60b9      	str	r1, [r7, #8]
 8014526:	4613      	mov	r3, r2
 8014528:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801452a:	68bb      	ldr	r3, [r7, #8]
 801452c:	2200      	movs	r2, #0
 801452e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014530:	68f8      	ldr	r0, [r7, #12]
 8014532:	f7ff ff58 	bl	80143e6 <get_ldnumber>
 8014536:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801453a:	2b00      	cmp	r3, #0
 801453c:	da01      	bge.n	8014542 <find_volume+0x26>
 801453e:	230b      	movs	r3, #11
 8014540:	e236      	b.n	80149b0 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014542:	4aac      	ldr	r2, [pc, #688]	; (80147f4 <find_volume+0x2d8>)
 8014544:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014546:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801454a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801454c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801454e:	2b00      	cmp	r3, #0
 8014550:	d101      	bne.n	8014556 <find_volume+0x3a>
 8014552:	230c      	movs	r3, #12
 8014554:	e22c      	b.n	80149b0 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8014556:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014558:	f7fe fd3b 	bl	8012fd2 <lock_fs>
 801455c:	4603      	mov	r3, r0
 801455e:	2b00      	cmp	r3, #0
 8014560:	d101      	bne.n	8014566 <find_volume+0x4a>
 8014562:	230f      	movs	r3, #15
 8014564:	e224      	b.n	80149b0 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8014566:	68bb      	ldr	r3, [r7, #8]
 8014568:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801456a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801456c:	79fb      	ldrb	r3, [r7, #7]
 801456e:	f023 0301 	bic.w	r3, r3, #1
 8014572:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014576:	781b      	ldrb	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d01a      	beq.n	80145b2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457e:	785b      	ldrb	r3, [r3, #1]
 8014580:	4618      	mov	r0, r3
 8014582:	f7fe fb89 	bl	8012c98 <disk_status>
 8014586:	4603      	mov	r3, r0
 8014588:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801458c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014590:	f003 0301 	and.w	r3, r3, #1
 8014594:	2b00      	cmp	r3, #0
 8014596:	d10c      	bne.n	80145b2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014598:	79fb      	ldrb	r3, [r7, #7]
 801459a:	2b00      	cmp	r3, #0
 801459c:	d007      	beq.n	80145ae <find_volume+0x92>
 801459e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145a2:	f003 0304 	and.w	r3, r3, #4
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	d001      	beq.n	80145ae <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 80145aa:	230a      	movs	r3, #10
 80145ac:	e200      	b.n	80149b0 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 80145ae:	2300      	movs	r3, #0
 80145b0:	e1fe      	b.n	80149b0 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80145b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145b4:	2200      	movs	r2, #0
 80145b6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80145b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145ba:	b2da      	uxtb	r2, r3
 80145bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145be:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80145c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c2:	785b      	ldrb	r3, [r3, #1]
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7fe fb81 	bl	8012ccc <disk_initialize>
 80145ca:	4603      	mov	r3, r0
 80145cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80145d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145d4:	f003 0301 	and.w	r3, r3, #1
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d001      	beq.n	80145e0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80145dc:	2303      	movs	r3, #3
 80145de:	e1e7      	b.n	80149b0 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80145e0:	79fb      	ldrb	r3, [r7, #7]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d007      	beq.n	80145f6 <find_volume+0xda>
 80145e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80145ea:	f003 0304 	and.w	r3, r3, #4
 80145ee:	2b00      	cmp	r3, #0
 80145f0:	d001      	beq.n	80145f6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80145f2:	230a      	movs	r3, #10
 80145f4:	e1dc      	b.n	80149b0 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80145f6:	2300      	movs	r3, #0
 80145f8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80145fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80145fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80145fe:	f7ff ff37 	bl	8014470 <check_fs>
 8014602:	4603      	mov	r3, r0
 8014604:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8014608:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801460c:	2b02      	cmp	r3, #2
 801460e:	d14b      	bne.n	80146a8 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014610:	2300      	movs	r3, #0
 8014612:	643b      	str	r3, [r7, #64]	; 0x40
 8014614:	e01f      	b.n	8014656 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8014616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014618:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801461c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801461e:	011b      	lsls	r3, r3, #4
 8014620:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8014624:	4413      	add	r3, r2
 8014626:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8014628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801462a:	3304      	adds	r3, #4
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d006      	beq.n	8014640 <find_volume+0x124>
 8014632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014634:	3308      	adds	r3, #8
 8014636:	4618      	mov	r0, r3
 8014638:	f7fe fbe4 	bl	8012e04 <ld_dword>
 801463c:	4602      	mov	r2, r0
 801463e:	e000      	b.n	8014642 <find_volume+0x126>
 8014640:	2200      	movs	r2, #0
 8014642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014644:	009b      	lsls	r3, r3, #2
 8014646:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801464a:	440b      	add	r3, r1
 801464c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014650:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014652:	3301      	adds	r3, #1
 8014654:	643b      	str	r3, [r7, #64]	; 0x40
 8014656:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014658:	2b03      	cmp	r3, #3
 801465a:	d9dc      	bls.n	8014616 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801465c:	2300      	movs	r3, #0
 801465e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014662:	2b00      	cmp	r3, #0
 8014664:	d002      	beq.n	801466c <find_volume+0x150>
 8014666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014668:	3b01      	subs	r3, #1
 801466a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801466c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014674:	4413      	add	r3, r2
 8014676:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801467a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801467c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801467e:	2b00      	cmp	r3, #0
 8014680:	d005      	beq.n	801468e <find_volume+0x172>
 8014682:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014684:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014686:	f7ff fef3 	bl	8014470 <check_fs>
 801468a:	4603      	mov	r3, r0
 801468c:	e000      	b.n	8014690 <find_volume+0x174>
 801468e:	2303      	movs	r3, #3
 8014690:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014694:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014698:	2b01      	cmp	r3, #1
 801469a:	d905      	bls.n	80146a8 <find_volume+0x18c>
 801469c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801469e:	3301      	adds	r3, #1
 80146a0:	643b      	str	r3, [r7, #64]	; 0x40
 80146a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80146a4:	2b03      	cmp	r3, #3
 80146a6:	d9e1      	bls.n	801466c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80146a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146ac:	2b04      	cmp	r3, #4
 80146ae:	d101      	bne.n	80146b4 <find_volume+0x198>
 80146b0:	2301      	movs	r3, #1
 80146b2:	e17d      	b.n	80149b0 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80146b4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80146b8:	2b01      	cmp	r3, #1
 80146ba:	d901      	bls.n	80146c0 <find_volume+0x1a4>
 80146bc:	230d      	movs	r3, #13
 80146be:	e177      	b.n	80149b0 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80146c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146c2:	3334      	adds	r3, #52	; 0x34
 80146c4:	330b      	adds	r3, #11
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7fe fb84 	bl	8012dd4 <ld_word>
 80146cc:	4603      	mov	r3, r0
 80146ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146d2:	d001      	beq.n	80146d8 <find_volume+0x1bc>
 80146d4:	230d      	movs	r3, #13
 80146d6:	e16b      	b.n	80149b0 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80146d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146da:	3334      	adds	r3, #52	; 0x34
 80146dc:	3316      	adds	r3, #22
 80146de:	4618      	mov	r0, r3
 80146e0:	f7fe fb78 	bl	8012dd4 <ld_word>
 80146e4:	4603      	mov	r3, r0
 80146e6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80146e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d106      	bne.n	80146fc <find_volume+0x1e0>
 80146ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f0:	3334      	adds	r3, #52	; 0x34
 80146f2:	3324      	adds	r3, #36	; 0x24
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7fe fb85 	bl	8012e04 <ld_dword>
 80146fa:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80146fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014700:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8014702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014704:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8014708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 801470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470e:	789b      	ldrb	r3, [r3, #2]
 8014710:	2b01      	cmp	r3, #1
 8014712:	d005      	beq.n	8014720 <find_volume+0x204>
 8014714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014716:	789b      	ldrb	r3, [r3, #2]
 8014718:	2b02      	cmp	r3, #2
 801471a:	d001      	beq.n	8014720 <find_volume+0x204>
 801471c:	230d      	movs	r3, #13
 801471e:	e147      	b.n	80149b0 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8014720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014722:	789b      	ldrb	r3, [r3, #2]
 8014724:	461a      	mov	r2, r3
 8014726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014728:	fb02 f303 	mul.w	r3, r2, r3
 801472c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014730:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014734:	b29a      	uxth	r2, r3
 8014736:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014738:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473c:	895b      	ldrh	r3, [r3, #10]
 801473e:	2b00      	cmp	r3, #0
 8014740:	d008      	beq.n	8014754 <find_volume+0x238>
 8014742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014744:	895b      	ldrh	r3, [r3, #10]
 8014746:	461a      	mov	r2, r3
 8014748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801474a:	895b      	ldrh	r3, [r3, #10]
 801474c:	3b01      	subs	r3, #1
 801474e:	4013      	ands	r3, r2
 8014750:	2b00      	cmp	r3, #0
 8014752:	d001      	beq.n	8014758 <find_volume+0x23c>
 8014754:	230d      	movs	r3, #13
 8014756:	e12b      	b.n	80149b0 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801475a:	3334      	adds	r3, #52	; 0x34
 801475c:	3311      	adds	r3, #17
 801475e:	4618      	mov	r0, r3
 8014760:	f7fe fb38 	bl	8012dd4 <ld_word>
 8014764:	4603      	mov	r3, r0
 8014766:	461a      	mov	r2, r3
 8014768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801476c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476e:	891b      	ldrh	r3, [r3, #8]
 8014770:	f003 030f 	and.w	r3, r3, #15
 8014774:	b29b      	uxth	r3, r3
 8014776:	2b00      	cmp	r3, #0
 8014778:	d001      	beq.n	801477e <find_volume+0x262>
 801477a:	230d      	movs	r3, #13
 801477c:	e118      	b.n	80149b0 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014780:	3334      	adds	r3, #52	; 0x34
 8014782:	3313      	adds	r3, #19
 8014784:	4618      	mov	r0, r3
 8014786:	f7fe fb25 	bl	8012dd4 <ld_word>
 801478a:	4603      	mov	r3, r0
 801478c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801478e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014790:	2b00      	cmp	r3, #0
 8014792:	d106      	bne.n	80147a2 <find_volume+0x286>
 8014794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014796:	3334      	adds	r3, #52	; 0x34
 8014798:	3320      	adds	r3, #32
 801479a:	4618      	mov	r0, r3
 801479c:	f7fe fb32 	bl	8012e04 <ld_dword>
 80147a0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80147a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147a4:	3334      	adds	r3, #52	; 0x34
 80147a6:	330e      	adds	r3, #14
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7fe fb13 	bl	8012dd4 <ld_word>
 80147ae:	4603      	mov	r3, r0
 80147b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80147b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d101      	bne.n	80147bc <find_volume+0x2a0>
 80147b8:	230d      	movs	r3, #13
 80147ba:	e0f9      	b.n	80149b0 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80147bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80147be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80147c0:	4413      	add	r3, r2
 80147c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147c4:	8912      	ldrh	r2, [r2, #8]
 80147c6:	0912      	lsrs	r2, r2, #4
 80147c8:	b292      	uxth	r2, r2
 80147ca:	4413      	add	r3, r2
 80147cc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80147ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d201      	bcs.n	80147da <find_volume+0x2be>
 80147d6:	230d      	movs	r3, #13
 80147d8:	e0ea      	b.n	80149b0 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80147da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80147dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147de:	1ad3      	subs	r3, r2, r3
 80147e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80147e2:	8952      	ldrh	r2, [r2, #10]
 80147e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80147e8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80147ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d103      	bne.n	80147f8 <find_volume+0x2dc>
 80147f0:	230d      	movs	r3, #13
 80147f2:	e0dd      	b.n	80149b0 <find_volume+0x494>
 80147f4:	20000340 	.word	0x20000340
		fmt = FS_FAT32;
 80147f8:	2303      	movs	r3, #3
 80147fa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80147fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014800:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014804:	4293      	cmp	r3, r2
 8014806:	d802      	bhi.n	801480e <find_volume+0x2f2>
 8014808:	2302      	movs	r3, #2
 801480a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014810:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014814:	4293      	cmp	r3, r2
 8014816:	d802      	bhi.n	801481e <find_volume+0x302>
 8014818:	2301      	movs	r3, #1
 801481a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014820:	1c9a      	adds	r2, r3, #2
 8014822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014824:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8014826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014828:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801482a:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801482c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801482e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014830:	441a      	add	r2, r3
 8014832:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014834:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014836:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801483a:	441a      	add	r2, r3
 801483c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801483e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014840:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014844:	2b03      	cmp	r3, #3
 8014846:	d11e      	bne.n	8014886 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484a:	3334      	adds	r3, #52	; 0x34
 801484c:	332a      	adds	r3, #42	; 0x2a
 801484e:	4618      	mov	r0, r3
 8014850:	f7fe fac0 	bl	8012dd4 <ld_word>
 8014854:	4603      	mov	r3, r0
 8014856:	2b00      	cmp	r3, #0
 8014858:	d001      	beq.n	801485e <find_volume+0x342>
 801485a:	230d      	movs	r3, #13
 801485c:	e0a8      	b.n	80149b0 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014860:	891b      	ldrh	r3, [r3, #8]
 8014862:	2b00      	cmp	r3, #0
 8014864:	d001      	beq.n	801486a <find_volume+0x34e>
 8014866:	230d      	movs	r3, #13
 8014868:	e0a2      	b.n	80149b0 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801486a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801486c:	3334      	adds	r3, #52	; 0x34
 801486e:	332c      	adds	r3, #44	; 0x2c
 8014870:	4618      	mov	r0, r3
 8014872:	f7fe fac7 	bl	8012e04 <ld_dword>
 8014876:	4602      	mov	r2, r0
 8014878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801487c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801487e:	699b      	ldr	r3, [r3, #24]
 8014880:	009b      	lsls	r3, r3, #2
 8014882:	647b      	str	r3, [r7, #68]	; 0x44
 8014884:	e01f      	b.n	80148c6 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014888:	891b      	ldrh	r3, [r3, #8]
 801488a:	2b00      	cmp	r3, #0
 801488c:	d101      	bne.n	8014892 <find_volume+0x376>
 801488e:	230d      	movs	r3, #13
 8014890:	e08e      	b.n	80149b0 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014898:	441a      	add	r2, r3
 801489a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801489c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801489e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148a2:	2b02      	cmp	r3, #2
 80148a4:	d103      	bne.n	80148ae <find_volume+0x392>
 80148a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148a8:	699b      	ldr	r3, [r3, #24]
 80148aa:	005b      	lsls	r3, r3, #1
 80148ac:	e00a      	b.n	80148c4 <find_volume+0x3a8>
 80148ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148b0:	699a      	ldr	r2, [r3, #24]
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	085a      	lsrs	r2, r3, #1
 80148ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148bc:	699b      	ldr	r3, [r3, #24]
 80148be:	f003 0301 	and.w	r3, r3, #1
 80148c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80148c4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80148c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148c8:	69da      	ldr	r2, [r3, #28]
 80148ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80148cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80148d0:	0a5b      	lsrs	r3, r3, #9
 80148d2:	429a      	cmp	r2, r3
 80148d4:	d201      	bcs.n	80148da <find_volume+0x3be>
 80148d6:	230d      	movs	r3, #13
 80148d8:	e06a      	b.n	80149b0 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80148da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148dc:	f04f 32ff 	mov.w	r2, #4294967295
 80148e0:	615a      	str	r2, [r3, #20]
 80148e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e4:	695a      	ldr	r2, [r3, #20]
 80148e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148e8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80148ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148ec:	2280      	movs	r2, #128	; 0x80
 80148ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80148f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80148f4:	2b03      	cmp	r3, #3
 80148f6:	d149      	bne.n	801498c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80148f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80148fa:	3334      	adds	r3, #52	; 0x34
 80148fc:	3330      	adds	r3, #48	; 0x30
 80148fe:	4618      	mov	r0, r3
 8014900:	f7fe fa68 	bl	8012dd4 <ld_word>
 8014904:	4603      	mov	r3, r0
 8014906:	2b01      	cmp	r3, #1
 8014908:	d140      	bne.n	801498c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 801490a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801490c:	3301      	adds	r3, #1
 801490e:	4619      	mov	r1, r3
 8014910:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014912:	f7fe fd3f 	bl	8013394 <move_window>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d137      	bne.n	801498c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 801491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801491e:	2200      	movs	r2, #0
 8014920:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8014922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014924:	3334      	adds	r3, #52	; 0x34
 8014926:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801492a:	4618      	mov	r0, r3
 801492c:	f7fe fa52 	bl	8012dd4 <ld_word>
 8014930:	4603      	mov	r3, r0
 8014932:	461a      	mov	r2, r3
 8014934:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014938:	429a      	cmp	r2, r3
 801493a:	d127      	bne.n	801498c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801493e:	3334      	adds	r3, #52	; 0x34
 8014940:	4618      	mov	r0, r3
 8014942:	f7fe fa5f 	bl	8012e04 <ld_dword>
 8014946:	4602      	mov	r2, r0
 8014948:	4b1b      	ldr	r3, [pc, #108]	; (80149b8 <find_volume+0x49c>)
 801494a:	429a      	cmp	r2, r3
 801494c:	d11e      	bne.n	801498c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801494e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014950:	3334      	adds	r3, #52	; 0x34
 8014952:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014956:	4618      	mov	r0, r3
 8014958:	f7fe fa54 	bl	8012e04 <ld_dword>
 801495c:	4602      	mov	r2, r0
 801495e:	4b17      	ldr	r3, [pc, #92]	; (80149bc <find_volume+0x4a0>)
 8014960:	429a      	cmp	r2, r3
 8014962:	d113      	bne.n	801498c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014966:	3334      	adds	r3, #52	; 0x34
 8014968:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801496c:	4618      	mov	r0, r3
 801496e:	f7fe fa49 	bl	8012e04 <ld_dword>
 8014972:	4602      	mov	r2, r0
 8014974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014976:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801497a:	3334      	adds	r3, #52	; 0x34
 801497c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014980:	4618      	mov	r0, r3
 8014982:	f7fe fa3f 	bl	8012e04 <ld_dword>
 8014986:	4602      	mov	r2, r0
 8014988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801498a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801498c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801498e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014992:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014994:	4b0a      	ldr	r3, [pc, #40]	; (80149c0 <find_volume+0x4a4>)
 8014996:	881b      	ldrh	r3, [r3, #0]
 8014998:	3301      	adds	r3, #1
 801499a:	b29a      	uxth	r2, r3
 801499c:	4b08      	ldr	r3, [pc, #32]	; (80149c0 <find_volume+0x4a4>)
 801499e:	801a      	strh	r2, [r3, #0]
 80149a0:	4b07      	ldr	r3, [pc, #28]	; (80149c0 <find_volume+0x4a4>)
 80149a2:	881a      	ldrh	r2, [r3, #0]
 80149a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149a6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80149a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80149aa:	f7fe fc8b 	bl	80132c4 <clear_lock>
#endif
	return FR_OK;
 80149ae:	2300      	movs	r3, #0
}
 80149b0:	4618      	mov	r0, r3
 80149b2:	3758      	adds	r7, #88	; 0x58
 80149b4:	46bd      	mov	sp, r7
 80149b6:	bd80      	pop	{r7, pc}
 80149b8:	41615252 	.word	0x41615252
 80149bc:	61417272 	.word	0x61417272
 80149c0:	20000344 	.word	0x20000344

080149c4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80149c4:	b580      	push	{r7, lr}
 80149c6:	b084      	sub	sp, #16
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
 80149cc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80149ce:	2309      	movs	r3, #9
 80149d0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80149d2:	687b      	ldr	r3, [r7, #4]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d02e      	beq.n	8014a36 <validate+0x72>
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	681b      	ldr	r3, [r3, #0]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d02a      	beq.n	8014a36 <validate+0x72>
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	781b      	ldrb	r3, [r3, #0]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d025      	beq.n	8014a36 <validate+0x72>
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	889a      	ldrh	r2, [r3, #4]
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	88db      	ldrh	r3, [r3, #6]
 80149f4:	429a      	cmp	r2, r3
 80149f6:	d11e      	bne.n	8014a36 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	4618      	mov	r0, r3
 80149fe:	f7fe fae8 	bl	8012fd2 <lock_fs>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d014      	beq.n	8014a32 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	681b      	ldr	r3, [r3, #0]
 8014a0c:	785b      	ldrb	r3, [r3, #1]
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f7fe f942 	bl	8012c98 <disk_status>
 8014a14:	4603      	mov	r3, r0
 8014a16:	f003 0301 	and.w	r3, r3, #1
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d102      	bne.n	8014a24 <validate+0x60>
				res = FR_OK;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	73fb      	strb	r3, [r7, #15]
 8014a22:	e008      	b.n	8014a36 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8014a24:	687b      	ldr	r3, [r7, #4]
 8014a26:	681b      	ldr	r3, [r3, #0]
 8014a28:	2100      	movs	r1, #0
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fe fae7 	bl	8012ffe <unlock_fs>
 8014a30:	e001      	b.n	8014a36 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014a32:	230f      	movs	r3, #15
 8014a34:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014a36:	7bfb      	ldrb	r3, [r7, #15]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d102      	bne.n	8014a42 <validate+0x7e>
 8014a3c:	687b      	ldr	r3, [r7, #4]
 8014a3e:	681b      	ldr	r3, [r3, #0]
 8014a40:	e000      	b.n	8014a44 <validate+0x80>
 8014a42:	2300      	movs	r3, #0
 8014a44:	683a      	ldr	r2, [r7, #0]
 8014a46:	6013      	str	r3, [r2, #0]
	return res;
 8014a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8014a4a:	4618      	mov	r0, r3
 8014a4c:	3710      	adds	r7, #16
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	bd80      	pop	{r7, pc}
	...

08014a54 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014a54:	b580      	push	{r7, lr}
 8014a56:	b088      	sub	sp, #32
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	60f8      	str	r0, [r7, #12]
 8014a5c:	60b9      	str	r1, [r7, #8]
 8014a5e:	4613      	mov	r3, r2
 8014a60:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014a62:	68bb      	ldr	r3, [r7, #8]
 8014a64:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014a66:	f107 0310 	add.w	r3, r7, #16
 8014a6a:	4618      	mov	r0, r3
 8014a6c:	f7ff fcbb 	bl	80143e6 <get_ldnumber>
 8014a70:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014a72:	69fb      	ldr	r3, [r7, #28]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	da01      	bge.n	8014a7c <f_mount+0x28>
 8014a78:	230b      	movs	r3, #11
 8014a7a:	e048      	b.n	8014b0e <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8014a7c:	4a26      	ldr	r2, [pc, #152]	; (8014b18 <f_mount+0xc4>)
 8014a7e:	69fb      	ldr	r3, [r7, #28]
 8014a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014a84:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014a86:	69bb      	ldr	r3, [r7, #24]
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d00f      	beq.n	8014aac <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8014a8c:	69b8      	ldr	r0, [r7, #24]
 8014a8e:	f7fe fc19 	bl	80132c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014a92:	69bb      	ldr	r3, [r7, #24]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	4618      	mov	r0, r3
 8014a98:	f001 f828 	bl	8015aec <ff_del_syncobj>
 8014a9c:	4603      	mov	r3, r0
 8014a9e:	2b00      	cmp	r3, #0
 8014aa0:	d101      	bne.n	8014aa6 <f_mount+0x52>
 8014aa2:	2302      	movs	r3, #2
 8014aa4:	e033      	b.n	8014b0e <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014aa6:	69bb      	ldr	r3, [r7, #24]
 8014aa8:	2200      	movs	r2, #0
 8014aaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	2b00      	cmp	r3, #0
 8014ab0:	d00f      	beq.n	8014ad2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014ab8:	69fb      	ldr	r3, [r7, #28]
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	68fb      	ldr	r3, [r7, #12]
 8014abe:	330c      	adds	r3, #12
 8014ac0:	4619      	mov	r1, r3
 8014ac2:	4610      	mov	r0, r2
 8014ac4:	f000 fff7 	bl	8015ab6 <ff_cre_syncobj>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d101      	bne.n	8014ad2 <f_mount+0x7e>
 8014ace:	2302      	movs	r3, #2
 8014ad0:	e01d      	b.n	8014b0e <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8014ad2:	68fa      	ldr	r2, [r7, #12]
 8014ad4:	4910      	ldr	r1, [pc, #64]	; (8014b18 <f_mount+0xc4>)
 8014ad6:	69fb      	ldr	r3, [r7, #28]
 8014ad8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8014adc:	68fb      	ldr	r3, [r7, #12]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d002      	beq.n	8014ae8 <f_mount+0x94>
 8014ae2:	79fb      	ldrb	r3, [r7, #7]
 8014ae4:	2b01      	cmp	r3, #1
 8014ae6:	d001      	beq.n	8014aec <f_mount+0x98>
 8014ae8:	2300      	movs	r3, #0
 8014aea:	e010      	b.n	8014b0e <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8014aec:	f107 010c 	add.w	r1, r7, #12
 8014af0:	f107 0308 	add.w	r3, r7, #8
 8014af4:	2200      	movs	r2, #0
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7ff fd10 	bl	801451c <find_volume>
 8014afc:	4603      	mov	r3, r0
 8014afe:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	7dfa      	ldrb	r2, [r7, #23]
 8014b04:	4611      	mov	r1, r2
 8014b06:	4618      	mov	r0, r3
 8014b08:	f7fe fa79 	bl	8012ffe <unlock_fs>
 8014b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3720      	adds	r7, #32
 8014b12:	46bd      	mov	sp, r7
 8014b14:	bd80      	pop	{r7, pc}
 8014b16:	bf00      	nop
 8014b18:	20000340 	.word	0x20000340

08014b1c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014b1c:	b580      	push	{r7, lr}
 8014b1e:	b09a      	sub	sp, #104	; 0x68
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	60f8      	str	r0, [r7, #12]
 8014b24:	60b9      	str	r1, [r7, #8]
 8014b26:	4613      	mov	r3, r2
 8014b28:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014b2a:	68fb      	ldr	r3, [r7, #12]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d101      	bne.n	8014b34 <f_open+0x18>
 8014b30:	2309      	movs	r3, #9
 8014b32:	e1b4      	b.n	8014e9e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014b34:	79fb      	ldrb	r3, [r7, #7]
 8014b36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014b3a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014b3c:	79fa      	ldrb	r2, [r7, #7]
 8014b3e:	f107 0114 	add.w	r1, r7, #20
 8014b42:	f107 0308 	add.w	r3, r7, #8
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7ff fce8 	bl	801451c <find_volume>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014b52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	f040 8191 	bne.w	8014e7e <f_open+0x362>
		dj.obj.fs = fs;
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014b60:	68ba      	ldr	r2, [r7, #8]
 8014b62:	f107 0318 	add.w	r3, r7, #24
 8014b66:	4611      	mov	r1, r2
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7ff fbcb 	bl	8014304 <follow_path>
 8014b6e:	4603      	mov	r3, r0
 8014b70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014b74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b78:	2b00      	cmp	r3, #0
 8014b7a:	d11a      	bne.n	8014bb2 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014b7c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014b80:	b25b      	sxtb	r3, r3
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	da03      	bge.n	8014b8e <f_open+0x72>
				res = FR_INVALID_NAME;
 8014b86:	2306      	movs	r3, #6
 8014b88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014b8c:	e011      	b.n	8014bb2 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014b8e:	79fb      	ldrb	r3, [r7, #7]
 8014b90:	f023 0301 	bic.w	r3, r3, #1
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	bf14      	ite	ne
 8014b98:	2301      	movne	r3, #1
 8014b9a:	2300      	moveq	r3, #0
 8014b9c:	b2db      	uxtb	r3, r3
 8014b9e:	461a      	mov	r2, r3
 8014ba0:	f107 0318 	add.w	r3, r7, #24
 8014ba4:	4611      	mov	r1, r2
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7fe fa44 	bl	8013034 <chk_lock>
 8014bac:	4603      	mov	r3, r0
 8014bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014bb2:	79fb      	ldrb	r3, [r7, #7]
 8014bb4:	f003 031c 	and.w	r3, r3, #28
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d07f      	beq.n	8014cbc <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014bbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014bc0:	2b00      	cmp	r3, #0
 8014bc2:	d017      	beq.n	8014bf4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014bc4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014bc8:	2b04      	cmp	r3, #4
 8014bca:	d10e      	bne.n	8014bea <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014bcc:	f7fe fa8e 	bl	80130ec <enq_lock>
 8014bd0:	4603      	mov	r3, r0
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d006      	beq.n	8014be4 <f_open+0xc8>
 8014bd6:	f107 0318 	add.w	r3, r7, #24
 8014bda:	4618      	mov	r0, r3
 8014bdc:	f7ff f9ca 	bl	8013f74 <dir_register>
 8014be0:	4603      	mov	r3, r0
 8014be2:	e000      	b.n	8014be6 <f_open+0xca>
 8014be4:	2312      	movs	r3, #18
 8014be6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014bea:	79fb      	ldrb	r3, [r7, #7]
 8014bec:	f043 0308 	orr.w	r3, r3, #8
 8014bf0:	71fb      	strb	r3, [r7, #7]
 8014bf2:	e010      	b.n	8014c16 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014bf4:	7fbb      	ldrb	r3, [r7, #30]
 8014bf6:	f003 0311 	and.w	r3, r3, #17
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d003      	beq.n	8014c06 <f_open+0xea>
					res = FR_DENIED;
 8014bfe:	2307      	movs	r3, #7
 8014c00:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014c04:	e007      	b.n	8014c16 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014c06:	79fb      	ldrb	r3, [r7, #7]
 8014c08:	f003 0304 	and.w	r3, r3, #4
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d002      	beq.n	8014c16 <f_open+0xfa>
 8014c10:	2308      	movs	r3, #8
 8014c12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014c16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d168      	bne.n	8014cf0 <f_open+0x1d4>
 8014c1e:	79fb      	ldrb	r3, [r7, #7]
 8014c20:	f003 0308 	and.w	r3, r3, #8
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d063      	beq.n	8014cf0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014c28:	f7fc f9c8 	bl	8010fbc <get_fattime>
 8014c2c:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c30:	330e      	adds	r3, #14
 8014c32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7fe f923 	bl	8012e80 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c3c:	3316      	adds	r3, #22
 8014c3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014c40:	4618      	mov	r0, r3
 8014c42:	f7fe f91d 	bl	8012e80 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c48:	330b      	adds	r3, #11
 8014c4a:	2220      	movs	r2, #32
 8014c4c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c52:	4611      	mov	r1, r2
 8014c54:	4618      	mov	r0, r3
 8014c56:	f7ff f89c 	bl	8013d92 <ld_clust>
 8014c5a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014c5c:	697b      	ldr	r3, [r7, #20]
 8014c5e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014c60:	2200      	movs	r2, #0
 8014c62:	4618      	mov	r0, r3
 8014c64:	f7ff f8b4 	bl	8013dd0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014c68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c6a:	331c      	adds	r3, #28
 8014c6c:	2100      	movs	r1, #0
 8014c6e:	4618      	mov	r0, r3
 8014c70:	f7fe f906 	bl	8012e80 <st_dword>
					fs->wflag = 1;
 8014c74:	697b      	ldr	r3, [r7, #20]
 8014c76:	2201      	movs	r2, #1
 8014c78:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014c7c:	2b00      	cmp	r3, #0
 8014c7e:	d037      	beq.n	8014cf0 <f_open+0x1d4>
						dw = fs->winsect;
 8014c80:	697b      	ldr	r3, [r7, #20]
 8014c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c84:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014c86:	f107 0318 	add.w	r3, r7, #24
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f7fe fdc7 	bl	8013822 <remove_chain>
 8014c94:	4603      	mov	r3, r0
 8014c96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014c9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d126      	bne.n	8014cf0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014ca2:	697b      	ldr	r3, [r7, #20]
 8014ca4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014ca6:	4618      	mov	r0, r3
 8014ca8:	f7fe fb74 	bl	8013394 <move_window>
 8014cac:	4603      	mov	r3, r0
 8014cae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014cb2:	697b      	ldr	r3, [r7, #20]
 8014cb4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014cb6:	3a01      	subs	r2, #1
 8014cb8:	611a      	str	r2, [r3, #16]
 8014cba:	e019      	b.n	8014cf0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014cbc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d115      	bne.n	8014cf0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014cc4:	7fbb      	ldrb	r3, [r7, #30]
 8014cc6:	f003 0310 	and.w	r3, r3, #16
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d003      	beq.n	8014cd6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014cce:	2304      	movs	r3, #4
 8014cd0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014cd4:	e00c      	b.n	8014cf0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014cd6:	79fb      	ldrb	r3, [r7, #7]
 8014cd8:	f003 0302 	and.w	r3, r3, #2
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d007      	beq.n	8014cf0 <f_open+0x1d4>
 8014ce0:	7fbb      	ldrb	r3, [r7, #30]
 8014ce2:	f003 0301 	and.w	r3, r3, #1
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d002      	beq.n	8014cf0 <f_open+0x1d4>
						res = FR_DENIED;
 8014cea:	2307      	movs	r3, #7
 8014cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014cf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	d128      	bne.n	8014d4a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014cf8:	79fb      	ldrb	r3, [r7, #7]
 8014cfa:	f003 0308 	and.w	r3, r3, #8
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d003      	beq.n	8014d0a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014d02:	79fb      	ldrb	r3, [r7, #7]
 8014d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d08:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014d0e:	68fb      	ldr	r3, [r7, #12]
 8014d10:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014d18:	79fb      	ldrb	r3, [r7, #7]
 8014d1a:	f023 0301 	bic.w	r3, r3, #1
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	bf14      	ite	ne
 8014d22:	2301      	movne	r3, #1
 8014d24:	2300      	moveq	r3, #0
 8014d26:	b2db      	uxtb	r3, r3
 8014d28:	461a      	mov	r2, r3
 8014d2a:	f107 0318 	add.w	r3, r7, #24
 8014d2e:	4611      	mov	r1, r2
 8014d30:	4618      	mov	r0, r3
 8014d32:	f7fe f9fd 	bl	8013130 <inc_lock>
 8014d36:	4602      	mov	r2, r0
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014d3c:	68fb      	ldr	r3, [r7, #12]
 8014d3e:	691b      	ldr	r3, [r3, #16]
 8014d40:	2b00      	cmp	r3, #0
 8014d42:	d102      	bne.n	8014d4a <f_open+0x22e>
 8014d44:	2302      	movs	r3, #2
 8014d46:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014d4a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	f040 8095 	bne.w	8014e7e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014d58:	4611      	mov	r1, r2
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	f7ff f819 	bl	8013d92 <ld_clust>
 8014d60:	4602      	mov	r2, r0
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014d68:	331c      	adds	r3, #28
 8014d6a:	4618      	mov	r0, r3
 8014d6c:	f7fe f84a 	bl	8012e04 <ld_dword>
 8014d70:	4602      	mov	r2, r0
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	2200      	movs	r2, #0
 8014d7a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014d7c:	697a      	ldr	r2, [r7, #20]
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014d82:	697b      	ldr	r3, [r7, #20]
 8014d84:	88da      	ldrh	r2, [r3, #6]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	79fa      	ldrb	r2, [r7, #7]
 8014d8e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014d90:	68fb      	ldr	r3, [r7, #12]
 8014d92:	2200      	movs	r2, #0
 8014d94:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2200      	movs	r2, #0
 8014d9a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	2200      	movs	r2, #0
 8014da0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014da2:	68fb      	ldr	r3, [r7, #12]
 8014da4:	3330      	adds	r3, #48	; 0x30
 8014da6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014daa:	2100      	movs	r1, #0
 8014dac:	4618      	mov	r0, r3
 8014dae:	f7fe f8b4 	bl	8012f1a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014db2:	79fb      	ldrb	r3, [r7, #7]
 8014db4:	f003 0320 	and.w	r3, r3, #32
 8014db8:	2b00      	cmp	r3, #0
 8014dba:	d060      	beq.n	8014e7e <f_open+0x362>
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	68db      	ldr	r3, [r3, #12]
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d05c      	beq.n	8014e7e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	68da      	ldr	r2, [r3, #12]
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014dcc:	697b      	ldr	r3, [r7, #20]
 8014dce:	895b      	ldrh	r3, [r3, #10]
 8014dd0:	025b      	lsls	r3, r3, #9
 8014dd2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014dd4:	68fb      	ldr	r3, [r7, #12]
 8014dd6:	689b      	ldr	r3, [r3, #8]
 8014dd8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014dda:	68fb      	ldr	r3, [r7, #12]
 8014ddc:	68db      	ldr	r3, [r3, #12]
 8014dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014de0:	e016      	b.n	8014e10 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014de2:	68fb      	ldr	r3, [r7, #12]
 8014de4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014de6:	4618      	mov	r0, r3
 8014de8:	f7fe fb8f 	bl	801350a <get_fat>
 8014dec:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8014dee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014df0:	2b01      	cmp	r3, #1
 8014df2:	d802      	bhi.n	8014dfa <f_open+0x2de>
 8014df4:	2302      	movs	r3, #2
 8014df6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e00:	d102      	bne.n	8014e08 <f_open+0x2ec>
 8014e02:	2301      	movs	r3, #1
 8014e04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e0c:	1ad3      	subs	r3, r2, r3
 8014e0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014e10:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d103      	bne.n	8014e20 <f_open+0x304>
 8014e18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014e1c:	429a      	cmp	r2, r3
 8014e1e:	d8e0      	bhi.n	8014de2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014e20:	68fb      	ldr	r3, [r7, #12]
 8014e22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014e24:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014e26:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e2a:	2b00      	cmp	r3, #0
 8014e2c:	d127      	bne.n	8014e7e <f_open+0x362>
 8014e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e34:	2b00      	cmp	r3, #0
 8014e36:	d022      	beq.n	8014e7e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014e3c:	4618      	mov	r0, r3
 8014e3e:	f7fe fb45 	bl	80134cc <clust2sect>
 8014e42:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e46:	2b00      	cmp	r3, #0
 8014e48:	d103      	bne.n	8014e52 <f_open+0x336>
						res = FR_INT_ERR;
 8014e4a:	2302      	movs	r3, #2
 8014e4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014e50:	e015      	b.n	8014e7e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014e54:	0a5a      	lsrs	r2, r3, #9
 8014e56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014e58:	441a      	add	r2, r3
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014e5e:	697b      	ldr	r3, [r7, #20]
 8014e60:	7858      	ldrb	r0, [r3, #1]
 8014e62:	68fb      	ldr	r3, [r7, #12]
 8014e64:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	6a1a      	ldr	r2, [r3, #32]
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	f7fd ff53 	bl	8012d18 <disk_read>
 8014e72:	4603      	mov	r3, r0
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	d002      	beq.n	8014e7e <f_open+0x362>
 8014e78:	2301      	movs	r3, #1
 8014e7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014e7e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d002      	beq.n	8014e8c <f_open+0x370>
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	2200      	movs	r2, #0
 8014e8a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014e8c:	697b      	ldr	r3, [r7, #20]
 8014e8e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8014e92:	4611      	mov	r1, r2
 8014e94:	4618      	mov	r0, r3
 8014e96:	f7fe f8b2 	bl	8012ffe <unlock_fs>
 8014e9a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014e9e:	4618      	mov	r0, r3
 8014ea0:	3768      	adds	r7, #104	; 0x68
 8014ea2:	46bd      	mov	sp, r7
 8014ea4:	bd80      	pop	{r7, pc}

08014ea6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014ea6:	b580      	push	{r7, lr}
 8014ea8:	b08c      	sub	sp, #48	; 0x30
 8014eaa:	af00      	add	r7, sp, #0
 8014eac:	60f8      	str	r0, [r7, #12]
 8014eae:	60b9      	str	r1, [r7, #8]
 8014eb0:	607a      	str	r2, [r7, #4]
 8014eb2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014eb4:	68bb      	ldr	r3, [r7, #8]
 8014eb6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	2200      	movs	r2, #0
 8014ebc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	f107 0210 	add.w	r2, r7, #16
 8014ec4:	4611      	mov	r1, r2
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f7ff fd7c 	bl	80149c4 <validate>
 8014ecc:	4603      	mov	r3, r0
 8014ece:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014ed2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d107      	bne.n	8014eea <f_write+0x44>
 8014eda:	68fb      	ldr	r3, [r7, #12]
 8014edc:	7d5b      	ldrb	r3, [r3, #21]
 8014ede:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014ee2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	d009      	beq.n	8014efe <f_write+0x58>
 8014eea:	693b      	ldr	r3, [r7, #16]
 8014eec:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014ef0:	4611      	mov	r1, r2
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7fe f883 	bl	8012ffe <unlock_fs>
 8014ef8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014efc:	e173      	b.n	80151e6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	7d1b      	ldrb	r3, [r3, #20]
 8014f02:	f003 0302 	and.w	r3, r3, #2
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d106      	bne.n	8014f18 <f_write+0x72>
 8014f0a:	693b      	ldr	r3, [r7, #16]
 8014f0c:	2107      	movs	r1, #7
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f7fe f875 	bl	8012ffe <unlock_fs>
 8014f14:	2307      	movs	r3, #7
 8014f16:	e166      	b.n	80151e6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014f18:	68fb      	ldr	r3, [r7, #12]
 8014f1a:	699a      	ldr	r2, [r3, #24]
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	441a      	add	r2, r3
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	699b      	ldr	r3, [r3, #24]
 8014f24:	429a      	cmp	r2, r3
 8014f26:	f080 814b 	bcs.w	80151c0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014f2a:	68fb      	ldr	r3, [r7, #12]
 8014f2c:	699b      	ldr	r3, [r3, #24]
 8014f2e:	43db      	mvns	r3, r3
 8014f30:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014f32:	e145      	b.n	80151c0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	699b      	ldr	r3, [r3, #24]
 8014f38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	f040 8101 	bne.w	8015144 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014f42:	68fb      	ldr	r3, [r7, #12]
 8014f44:	699b      	ldr	r3, [r3, #24]
 8014f46:	0a5b      	lsrs	r3, r3, #9
 8014f48:	693a      	ldr	r2, [r7, #16]
 8014f4a:	8952      	ldrh	r2, [r2, #10]
 8014f4c:	3a01      	subs	r2, #1
 8014f4e:	4013      	ands	r3, r2
 8014f50:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014f52:	69bb      	ldr	r3, [r7, #24]
 8014f54:	2b00      	cmp	r3, #0
 8014f56:	d14d      	bne.n	8014ff4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	699b      	ldr	r3, [r3, #24]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d10c      	bne.n	8014f7a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014f60:	68fb      	ldr	r3, [r7, #12]
 8014f62:	689b      	ldr	r3, [r3, #8]
 8014f64:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d11a      	bne.n	8014fa2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014f6c:	68fb      	ldr	r3, [r7, #12]
 8014f6e:	2100      	movs	r1, #0
 8014f70:	4618      	mov	r0, r3
 8014f72:	f7fe fcbb 	bl	80138ec <create_chain>
 8014f76:	62b8      	str	r0, [r7, #40]	; 0x28
 8014f78:	e013      	b.n	8014fa2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d007      	beq.n	8014f92 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014f82:	68fb      	ldr	r3, [r7, #12]
 8014f84:	699b      	ldr	r3, [r3, #24]
 8014f86:	4619      	mov	r1, r3
 8014f88:	68f8      	ldr	r0, [r7, #12]
 8014f8a:	f7fe fd47 	bl	8013a1c <clmt_clust>
 8014f8e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014f90:	e007      	b.n	8014fa2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014f92:	68fa      	ldr	r2, [r7, #12]
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	69db      	ldr	r3, [r3, #28]
 8014f98:	4619      	mov	r1, r3
 8014f9a:	4610      	mov	r0, r2
 8014f9c:	f7fe fca6 	bl	80138ec <create_chain>
 8014fa0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	f000 8110 	beq.w	80151ca <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fac:	2b01      	cmp	r3, #1
 8014fae:	d109      	bne.n	8014fc4 <f_write+0x11e>
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	2202      	movs	r2, #2
 8014fb4:	755a      	strb	r2, [r3, #21]
 8014fb6:	693b      	ldr	r3, [r7, #16]
 8014fb8:	2102      	movs	r1, #2
 8014fba:	4618      	mov	r0, r3
 8014fbc:	f7fe f81f 	bl	8012ffe <unlock_fs>
 8014fc0:	2302      	movs	r3, #2
 8014fc2:	e110      	b.n	80151e6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fca:	d109      	bne.n	8014fe0 <f_write+0x13a>
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	2201      	movs	r2, #1
 8014fd0:	755a      	strb	r2, [r3, #21]
 8014fd2:	693b      	ldr	r3, [r7, #16]
 8014fd4:	2101      	movs	r1, #1
 8014fd6:	4618      	mov	r0, r3
 8014fd8:	f7fe f811 	bl	8012ffe <unlock_fs>
 8014fdc:	2301      	movs	r3, #1
 8014fde:	e102      	b.n	80151e6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014fe0:	68fb      	ldr	r3, [r7, #12]
 8014fe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014fe4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	689b      	ldr	r3, [r3, #8]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d102      	bne.n	8014ff4 <f_write+0x14e>
 8014fee:	68fb      	ldr	r3, [r7, #12]
 8014ff0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ff2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014ff4:	68fb      	ldr	r3, [r7, #12]
 8014ff6:	7d1b      	ldrb	r3, [r3, #20]
 8014ff8:	b25b      	sxtb	r3, r3
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	da1d      	bge.n	801503a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ffe:	693b      	ldr	r3, [r7, #16]
 8015000:	7858      	ldrb	r0, [r3, #1]
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015008:	68fb      	ldr	r3, [r7, #12]
 801500a:	6a1a      	ldr	r2, [r3, #32]
 801500c:	2301      	movs	r3, #1
 801500e:	f7fd fea3 	bl	8012d58 <disk_write>
 8015012:	4603      	mov	r3, r0
 8015014:	2b00      	cmp	r3, #0
 8015016:	d009      	beq.n	801502c <f_write+0x186>
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	2201      	movs	r2, #1
 801501c:	755a      	strb	r2, [r3, #21]
 801501e:	693b      	ldr	r3, [r7, #16]
 8015020:	2101      	movs	r1, #1
 8015022:	4618      	mov	r0, r3
 8015024:	f7fd ffeb 	bl	8012ffe <unlock_fs>
 8015028:	2301      	movs	r3, #1
 801502a:	e0dc      	b.n	80151e6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 801502c:	68fb      	ldr	r3, [r7, #12]
 801502e:	7d1b      	ldrb	r3, [r3, #20]
 8015030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015034:	b2da      	uxtb	r2, r3
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801503a:	693a      	ldr	r2, [r7, #16]
 801503c:	68fb      	ldr	r3, [r7, #12]
 801503e:	69db      	ldr	r3, [r3, #28]
 8015040:	4619      	mov	r1, r3
 8015042:	4610      	mov	r0, r2
 8015044:	f7fe fa42 	bl	80134cc <clust2sect>
 8015048:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	2b00      	cmp	r3, #0
 801504e:	d109      	bne.n	8015064 <f_write+0x1be>
 8015050:	68fb      	ldr	r3, [r7, #12]
 8015052:	2202      	movs	r2, #2
 8015054:	755a      	strb	r2, [r3, #21]
 8015056:	693b      	ldr	r3, [r7, #16]
 8015058:	2102      	movs	r1, #2
 801505a:	4618      	mov	r0, r3
 801505c:	f7fd ffcf 	bl	8012ffe <unlock_fs>
 8015060:	2302      	movs	r3, #2
 8015062:	e0c0      	b.n	80151e6 <f_write+0x340>
			sect += csect;
 8015064:	697a      	ldr	r2, [r7, #20]
 8015066:	69bb      	ldr	r3, [r7, #24]
 8015068:	4413      	add	r3, r2
 801506a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	0a5b      	lsrs	r3, r3, #9
 8015070:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8015072:	6a3b      	ldr	r3, [r7, #32]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d041      	beq.n	80150fc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8015078:	69ba      	ldr	r2, [r7, #24]
 801507a:	6a3b      	ldr	r3, [r7, #32]
 801507c:	4413      	add	r3, r2
 801507e:	693a      	ldr	r2, [r7, #16]
 8015080:	8952      	ldrh	r2, [r2, #10]
 8015082:	4293      	cmp	r3, r2
 8015084:	d905      	bls.n	8015092 <f_write+0x1ec>
					cc = fs->csize - csect;
 8015086:	693b      	ldr	r3, [r7, #16]
 8015088:	895b      	ldrh	r3, [r3, #10]
 801508a:	461a      	mov	r2, r3
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	1ad3      	subs	r3, r2, r3
 8015090:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015092:	693b      	ldr	r3, [r7, #16]
 8015094:	7858      	ldrb	r0, [r3, #1]
 8015096:	6a3b      	ldr	r3, [r7, #32]
 8015098:	697a      	ldr	r2, [r7, #20]
 801509a:	69f9      	ldr	r1, [r7, #28]
 801509c:	f7fd fe5c 	bl	8012d58 <disk_write>
 80150a0:	4603      	mov	r3, r0
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d009      	beq.n	80150ba <f_write+0x214>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	2201      	movs	r2, #1
 80150aa:	755a      	strb	r2, [r3, #21]
 80150ac:	693b      	ldr	r3, [r7, #16]
 80150ae:	2101      	movs	r1, #1
 80150b0:	4618      	mov	r0, r3
 80150b2:	f7fd ffa4 	bl	8012ffe <unlock_fs>
 80150b6:	2301      	movs	r3, #1
 80150b8:	e095      	b.n	80151e6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80150ba:	68fb      	ldr	r3, [r7, #12]
 80150bc:	6a1a      	ldr	r2, [r3, #32]
 80150be:	697b      	ldr	r3, [r7, #20]
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	6a3a      	ldr	r2, [r7, #32]
 80150c4:	429a      	cmp	r2, r3
 80150c6:	d915      	bls.n	80150f4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	6a1a      	ldr	r2, [r3, #32]
 80150d2:	697b      	ldr	r3, [r7, #20]
 80150d4:	1ad3      	subs	r3, r2, r3
 80150d6:	025b      	lsls	r3, r3, #9
 80150d8:	69fa      	ldr	r2, [r7, #28]
 80150da:	4413      	add	r3, r2
 80150dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80150e0:	4619      	mov	r1, r3
 80150e2:	f7fd fef9 	bl	8012ed8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80150e6:	68fb      	ldr	r3, [r7, #12]
 80150e8:	7d1b      	ldrb	r3, [r3, #20]
 80150ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80150ee:	b2da      	uxtb	r2, r3
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80150f4:	6a3b      	ldr	r3, [r7, #32]
 80150f6:	025b      	lsls	r3, r3, #9
 80150f8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80150fa:	e044      	b.n	8015186 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80150fc:	68fb      	ldr	r3, [r7, #12]
 80150fe:	6a1b      	ldr	r3, [r3, #32]
 8015100:	697a      	ldr	r2, [r7, #20]
 8015102:	429a      	cmp	r2, r3
 8015104:	d01b      	beq.n	801513e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	699a      	ldr	r2, [r3, #24]
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801510e:	429a      	cmp	r2, r3
 8015110:	d215      	bcs.n	801513e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	7858      	ldrb	r0, [r3, #1]
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801511c:	2301      	movs	r3, #1
 801511e:	697a      	ldr	r2, [r7, #20]
 8015120:	f7fd fdfa 	bl	8012d18 <disk_read>
 8015124:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8015126:	2b00      	cmp	r3, #0
 8015128:	d009      	beq.n	801513e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 801512a:	68fb      	ldr	r3, [r7, #12]
 801512c:	2201      	movs	r2, #1
 801512e:	755a      	strb	r2, [r3, #21]
 8015130:	693b      	ldr	r3, [r7, #16]
 8015132:	2101      	movs	r1, #1
 8015134:	4618      	mov	r0, r3
 8015136:	f7fd ff62 	bl	8012ffe <unlock_fs>
 801513a:	2301      	movs	r3, #1
 801513c:	e053      	b.n	80151e6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	697a      	ldr	r2, [r7, #20]
 8015142:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	699b      	ldr	r3, [r3, #24]
 8015148:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801514c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015150:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	429a      	cmp	r2, r3
 8015158:	d901      	bls.n	801515e <f_write+0x2b8>
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	699b      	ldr	r3, [r3, #24]
 8015168:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801516c:	4413      	add	r3, r2
 801516e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015170:	69f9      	ldr	r1, [r7, #28]
 8015172:	4618      	mov	r0, r3
 8015174:	f7fd feb0 	bl	8012ed8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	7d1b      	ldrb	r3, [r3, #20]
 801517c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015180:	b2da      	uxtb	r2, r3
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015186:	69fa      	ldr	r2, [r7, #28]
 8015188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801518a:	4413      	add	r3, r2
 801518c:	61fb      	str	r3, [r7, #28]
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	699a      	ldr	r2, [r3, #24]
 8015192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015194:	441a      	add	r2, r3
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	619a      	str	r2, [r3, #24]
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	68da      	ldr	r2, [r3, #12]
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	699b      	ldr	r3, [r3, #24]
 80151a2:	429a      	cmp	r2, r3
 80151a4:	bf38      	it	cc
 80151a6:	461a      	movcc	r2, r3
 80151a8:	68fb      	ldr	r3, [r7, #12]
 80151aa:	60da      	str	r2, [r3, #12]
 80151ac:	683b      	ldr	r3, [r7, #0]
 80151ae:	681a      	ldr	r2, [r3, #0]
 80151b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151b2:	441a      	add	r2, r3
 80151b4:	683b      	ldr	r3, [r7, #0]
 80151b6:	601a      	str	r2, [r3, #0]
 80151b8:	687a      	ldr	r2, [r7, #4]
 80151ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151bc:	1ad3      	subs	r3, r2, r3
 80151be:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f47f aeb6 	bne.w	8014f34 <f_write+0x8e>
 80151c8:	e000      	b.n	80151cc <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80151ca:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80151cc:	68fb      	ldr	r3, [r7, #12]
 80151ce:	7d1b      	ldrb	r3, [r3, #20]
 80151d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80151d4:	b2da      	uxtb	r2, r3
 80151d6:	68fb      	ldr	r3, [r7, #12]
 80151d8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	2100      	movs	r1, #0
 80151de:	4618      	mov	r0, r3
 80151e0:	f7fd ff0d 	bl	8012ffe <unlock_fs>
 80151e4:	2300      	movs	r3, #0
}
 80151e6:	4618      	mov	r0, r3
 80151e8:	3730      	adds	r7, #48	; 0x30
 80151ea:	46bd      	mov	sp, r7
 80151ec:	bd80      	pop	{r7, pc}

080151ee <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80151ee:	b580      	push	{r7, lr}
 80151f0:	b086      	sub	sp, #24
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	f107 0208 	add.w	r2, r7, #8
 80151fc:	4611      	mov	r1, r2
 80151fe:	4618      	mov	r0, r3
 8015200:	f7ff fbe0 	bl	80149c4 <validate>
 8015204:	4603      	mov	r3, r0
 8015206:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8015208:	7dfb      	ldrb	r3, [r7, #23]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d16d      	bne.n	80152ea <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801520e:	687b      	ldr	r3, [r7, #4]
 8015210:	7d1b      	ldrb	r3, [r3, #20]
 8015212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015216:	2b00      	cmp	r3, #0
 8015218:	d067      	beq.n	80152ea <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	7d1b      	ldrb	r3, [r3, #20]
 801521e:	b25b      	sxtb	r3, r3
 8015220:	2b00      	cmp	r3, #0
 8015222:	da1a      	bge.n	801525a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	7858      	ldrb	r0, [r3, #1]
 8015228:	687b      	ldr	r3, [r7, #4]
 801522a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	6a1a      	ldr	r2, [r3, #32]
 8015232:	2301      	movs	r3, #1
 8015234:	f7fd fd90 	bl	8012d58 <disk_write>
 8015238:	4603      	mov	r3, r0
 801523a:	2b00      	cmp	r3, #0
 801523c:	d006      	beq.n	801524c <f_sync+0x5e>
 801523e:	68bb      	ldr	r3, [r7, #8]
 8015240:	2101      	movs	r1, #1
 8015242:	4618      	mov	r0, r3
 8015244:	f7fd fedb 	bl	8012ffe <unlock_fs>
 8015248:	2301      	movs	r3, #1
 801524a:	e055      	b.n	80152f8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	7d1b      	ldrb	r3, [r3, #20]
 8015250:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015254:	b2da      	uxtb	r2, r3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801525a:	f7fb feaf 	bl	8010fbc <get_fattime>
 801525e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015260:	68ba      	ldr	r2, [r7, #8]
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015266:	4619      	mov	r1, r3
 8015268:	4610      	mov	r0, r2
 801526a:	f7fe f893 	bl	8013394 <move_window>
 801526e:	4603      	mov	r3, r0
 8015270:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015272:	7dfb      	ldrb	r3, [r7, #23]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d138      	bne.n	80152ea <f_sync+0xfc>
					dir = fp->dir_ptr;
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801527c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801527e:	68fb      	ldr	r3, [r7, #12]
 8015280:	330b      	adds	r3, #11
 8015282:	781a      	ldrb	r2, [r3, #0]
 8015284:	68fb      	ldr	r3, [r7, #12]
 8015286:	330b      	adds	r3, #11
 8015288:	f042 0220 	orr.w	r2, r2, #32
 801528c:	b2d2      	uxtb	r2, r2
 801528e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	6818      	ldr	r0, [r3, #0]
 8015294:	687b      	ldr	r3, [r7, #4]
 8015296:	689b      	ldr	r3, [r3, #8]
 8015298:	461a      	mov	r2, r3
 801529a:	68f9      	ldr	r1, [r7, #12]
 801529c:	f7fe fd98 	bl	8013dd0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	f103 021c 	add.w	r2, r3, #28
 80152a6:	687b      	ldr	r3, [r7, #4]
 80152a8:	68db      	ldr	r3, [r3, #12]
 80152aa:	4619      	mov	r1, r3
 80152ac:	4610      	mov	r0, r2
 80152ae:	f7fd fde7 	bl	8012e80 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	3316      	adds	r3, #22
 80152b6:	6939      	ldr	r1, [r7, #16]
 80152b8:	4618      	mov	r0, r3
 80152ba:	f7fd fde1 	bl	8012e80 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80152be:	68fb      	ldr	r3, [r7, #12]
 80152c0:	3312      	adds	r3, #18
 80152c2:	2100      	movs	r1, #0
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7fd fdc0 	bl	8012e4a <st_word>
					fs->wflag = 1;
 80152ca:	68bb      	ldr	r3, [r7, #8]
 80152cc:	2201      	movs	r2, #1
 80152ce:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80152d0:	68bb      	ldr	r3, [r7, #8]
 80152d2:	4618      	mov	r0, r3
 80152d4:	f7fe f88c 	bl	80133f0 <sync_fs>
 80152d8:	4603      	mov	r3, r0
 80152da:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	7d1b      	ldrb	r3, [r3, #20]
 80152e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80152e4:	b2da      	uxtb	r2, r3
 80152e6:	687b      	ldr	r3, [r7, #4]
 80152e8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80152ea:	68bb      	ldr	r3, [r7, #8]
 80152ec:	7dfa      	ldrb	r2, [r7, #23]
 80152ee:	4611      	mov	r1, r2
 80152f0:	4618      	mov	r0, r3
 80152f2:	f7fd fe84 	bl	8012ffe <unlock_fs>
 80152f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	3718      	adds	r7, #24
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}

08015300 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b090      	sub	sp, #64	; 0x40
 8015304:	af00      	add	r7, sp, #0
 8015306:	6078      	str	r0, [r7, #4]
 8015308:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f107 0208 	add.w	r2, r7, #8
 8015310:	4611      	mov	r1, r2
 8015312:	4618      	mov	r0, r3
 8015314:	f7ff fb56 	bl	80149c4 <validate>
 8015318:	4603      	mov	r3, r0
 801531a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 801531e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015322:	2b00      	cmp	r3, #0
 8015324:	d103      	bne.n	801532e <f_lseek+0x2e>
 8015326:	687b      	ldr	r3, [r7, #4]
 8015328:	7d5b      	ldrb	r3, [r3, #21]
 801532a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 801532e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015332:	2b00      	cmp	r3, #0
 8015334:	d009      	beq.n	801534a <f_lseek+0x4a>
 8015336:	68bb      	ldr	r3, [r7, #8]
 8015338:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801533c:	4611      	mov	r1, r2
 801533e:	4618      	mov	r0, r3
 8015340:	f7fd fe5d 	bl	8012ffe <unlock_fs>
 8015344:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015348:	e229      	b.n	801579e <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801534e:	2b00      	cmp	r3, #0
 8015350:	f000 80ea 	beq.w	8015528 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015354:	683b      	ldr	r3, [r7, #0]
 8015356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801535a:	d164      	bne.n	8015426 <f_lseek+0x126>
			tbl = fp->cltbl;
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015360:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015364:	1d1a      	adds	r2, r3, #4
 8015366:	627a      	str	r2, [r7, #36]	; 0x24
 8015368:	681b      	ldr	r3, [r3, #0]
 801536a:	617b      	str	r3, [r7, #20]
 801536c:	2302      	movs	r3, #2
 801536e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	689b      	ldr	r3, [r3, #8]
 8015374:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015378:	2b00      	cmp	r3, #0
 801537a:	d044      	beq.n	8015406 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801537e:	613b      	str	r3, [r7, #16]
 8015380:	2300      	movs	r3, #0
 8015382:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015386:	3302      	adds	r3, #2
 8015388:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801538c:	60fb      	str	r3, [r7, #12]
 801538e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015390:	3301      	adds	r3, #1
 8015392:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015398:	4618      	mov	r0, r3
 801539a:	f7fe f8b6 	bl	801350a <get_fat>
 801539e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 80153a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153a2:	2b01      	cmp	r3, #1
 80153a4:	d809      	bhi.n	80153ba <f_lseek+0xba>
 80153a6:	687b      	ldr	r3, [r7, #4]
 80153a8:	2202      	movs	r2, #2
 80153aa:	755a      	strb	r2, [r3, #21]
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	2102      	movs	r1, #2
 80153b0:	4618      	mov	r0, r3
 80153b2:	f7fd fe24 	bl	8012ffe <unlock_fs>
 80153b6:	2302      	movs	r3, #2
 80153b8:	e1f1      	b.n	801579e <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80153ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153c0:	d109      	bne.n	80153d6 <f_lseek+0xd6>
 80153c2:	687b      	ldr	r3, [r7, #4]
 80153c4:	2201      	movs	r2, #1
 80153c6:	755a      	strb	r2, [r3, #21]
 80153c8:	68bb      	ldr	r3, [r7, #8]
 80153ca:	2101      	movs	r1, #1
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7fd fe16 	bl	8012ffe <unlock_fs>
 80153d2:	2301      	movs	r3, #1
 80153d4:	e1e3      	b.n	801579e <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	3301      	adds	r3, #1
 80153da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80153dc:	429a      	cmp	r2, r3
 80153de:	d0d4      	beq.n	801538a <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80153e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	429a      	cmp	r2, r3
 80153e6:	d809      	bhi.n	80153fc <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80153e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153ea:	1d1a      	adds	r2, r3, #4
 80153ec:	627a      	str	r2, [r7, #36]	; 0x24
 80153ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153f0:	601a      	str	r2, [r3, #0]
 80153f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80153f4:	1d1a      	adds	r2, r3, #4
 80153f6:	627a      	str	r2, [r7, #36]	; 0x24
 80153f8:	693a      	ldr	r2, [r7, #16]
 80153fa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80153fc:	68bb      	ldr	r3, [r7, #8]
 80153fe:	699b      	ldr	r3, [r3, #24]
 8015400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015402:	429a      	cmp	r2, r3
 8015404:	d3ba      	bcc.n	801537c <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801540a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801540c:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 801540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015410:	697b      	ldr	r3, [r7, #20]
 8015412:	429a      	cmp	r2, r3
 8015414:	d803      	bhi.n	801541e <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 8015416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015418:	2200      	movs	r2, #0
 801541a:	601a      	str	r2, [r3, #0]
 801541c:	e1b6      	b.n	801578c <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 801541e:	2311      	movs	r3, #17
 8015420:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8015424:	e1b2      	b.n	801578c <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	68db      	ldr	r3, [r3, #12]
 801542a:	683a      	ldr	r2, [r7, #0]
 801542c:	429a      	cmp	r2, r3
 801542e:	d902      	bls.n	8015436 <f_lseek+0x136>
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	68db      	ldr	r3, [r3, #12]
 8015434:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	683a      	ldr	r2, [r7, #0]
 801543a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801543c:	683b      	ldr	r3, [r7, #0]
 801543e:	2b00      	cmp	r3, #0
 8015440:	f000 81a4 	beq.w	801578c <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	3b01      	subs	r3, #1
 8015448:	4619      	mov	r1, r3
 801544a:	6878      	ldr	r0, [r7, #4]
 801544c:	f7fe fae6 	bl	8013a1c <clmt_clust>
 8015450:	4602      	mov	r2, r0
 8015452:	687b      	ldr	r3, [r7, #4]
 8015454:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015456:	68ba      	ldr	r2, [r7, #8]
 8015458:	687b      	ldr	r3, [r7, #4]
 801545a:	69db      	ldr	r3, [r3, #28]
 801545c:	4619      	mov	r1, r3
 801545e:	4610      	mov	r0, r2
 8015460:	f7fe f834 	bl	80134cc <clust2sect>
 8015464:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	2b00      	cmp	r3, #0
 801546a:	d109      	bne.n	8015480 <f_lseek+0x180>
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	2202      	movs	r2, #2
 8015470:	755a      	strb	r2, [r3, #21]
 8015472:	68bb      	ldr	r3, [r7, #8]
 8015474:	2102      	movs	r1, #2
 8015476:	4618      	mov	r0, r3
 8015478:	f7fd fdc1 	bl	8012ffe <unlock_fs>
 801547c:	2302      	movs	r3, #2
 801547e:	e18e      	b.n	801579e <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015480:	683b      	ldr	r3, [r7, #0]
 8015482:	3b01      	subs	r3, #1
 8015484:	0a5b      	lsrs	r3, r3, #9
 8015486:	68ba      	ldr	r2, [r7, #8]
 8015488:	8952      	ldrh	r2, [r2, #10]
 801548a:	3a01      	subs	r2, #1
 801548c:	4013      	ands	r3, r2
 801548e:	69ba      	ldr	r2, [r7, #24]
 8015490:	4413      	add	r3, r2
 8015492:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015494:	687b      	ldr	r3, [r7, #4]
 8015496:	699b      	ldr	r3, [r3, #24]
 8015498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801549c:	2b00      	cmp	r3, #0
 801549e:	f000 8175 	beq.w	801578c <f_lseek+0x48c>
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	6a1b      	ldr	r3, [r3, #32]
 80154a6:	69ba      	ldr	r2, [r7, #24]
 80154a8:	429a      	cmp	r2, r3
 80154aa:	f000 816f 	beq.w	801578c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80154ae:	687b      	ldr	r3, [r7, #4]
 80154b0:	7d1b      	ldrb	r3, [r3, #20]
 80154b2:	b25b      	sxtb	r3, r3
 80154b4:	2b00      	cmp	r3, #0
 80154b6:	da1d      	bge.n	80154f4 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80154b8:	68bb      	ldr	r3, [r7, #8]
 80154ba:	7858      	ldrb	r0, [r3, #1]
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	6a1a      	ldr	r2, [r3, #32]
 80154c6:	2301      	movs	r3, #1
 80154c8:	f7fd fc46 	bl	8012d58 <disk_write>
 80154cc:	4603      	mov	r3, r0
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d009      	beq.n	80154e6 <f_lseek+0x1e6>
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	2201      	movs	r2, #1
 80154d6:	755a      	strb	r2, [r3, #21]
 80154d8:	68bb      	ldr	r3, [r7, #8]
 80154da:	2101      	movs	r1, #1
 80154dc:	4618      	mov	r0, r3
 80154de:	f7fd fd8e 	bl	8012ffe <unlock_fs>
 80154e2:	2301      	movs	r3, #1
 80154e4:	e15b      	b.n	801579e <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	7d1b      	ldrb	r3, [r3, #20]
 80154ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80154ee:	b2da      	uxtb	r2, r3
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80154f4:	68bb      	ldr	r3, [r7, #8]
 80154f6:	7858      	ldrb	r0, [r3, #1]
 80154f8:	687b      	ldr	r3, [r7, #4]
 80154fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80154fe:	2301      	movs	r3, #1
 8015500:	69ba      	ldr	r2, [r7, #24]
 8015502:	f7fd fc09 	bl	8012d18 <disk_read>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d009      	beq.n	8015520 <f_lseek+0x220>
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	2201      	movs	r2, #1
 8015510:	755a      	strb	r2, [r3, #21]
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	2101      	movs	r1, #1
 8015516:	4618      	mov	r0, r3
 8015518:	f7fd fd71 	bl	8012ffe <unlock_fs>
 801551c:	2301      	movs	r3, #1
 801551e:	e13e      	b.n	801579e <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	69ba      	ldr	r2, [r7, #24]
 8015524:	621a      	str	r2, [r3, #32]
 8015526:	e131      	b.n	801578c <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	68db      	ldr	r3, [r3, #12]
 801552c:	683a      	ldr	r2, [r7, #0]
 801552e:	429a      	cmp	r2, r3
 8015530:	d908      	bls.n	8015544 <f_lseek+0x244>
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	7d1b      	ldrb	r3, [r3, #20]
 8015536:	f003 0302 	and.w	r3, r3, #2
 801553a:	2b00      	cmp	r3, #0
 801553c:	d102      	bne.n	8015544 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	68db      	ldr	r3, [r3, #12]
 8015542:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	699b      	ldr	r3, [r3, #24]
 8015548:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801554a:	2300      	movs	r3, #0
 801554c:	637b      	str	r3, [r7, #52]	; 0x34
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015552:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	2b00      	cmp	r3, #0
 8015558:	f000 80c0 	beq.w	80156dc <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	895b      	ldrh	r3, [r3, #10]
 8015560:	025b      	lsls	r3, r3, #9
 8015562:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015564:	6a3b      	ldr	r3, [r7, #32]
 8015566:	2b00      	cmp	r3, #0
 8015568:	d01b      	beq.n	80155a2 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	1e5a      	subs	r2, r3, #1
 801556e:	69fb      	ldr	r3, [r7, #28]
 8015570:	fbb2 f2f3 	udiv	r2, r2, r3
 8015574:	6a3b      	ldr	r3, [r7, #32]
 8015576:	1e59      	subs	r1, r3, #1
 8015578:	69fb      	ldr	r3, [r7, #28]
 801557a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801557e:	429a      	cmp	r2, r3
 8015580:	d30f      	bcc.n	80155a2 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015582:	6a3b      	ldr	r3, [r7, #32]
 8015584:	1e5a      	subs	r2, r3, #1
 8015586:	69fb      	ldr	r3, [r7, #28]
 8015588:	425b      	negs	r3, r3
 801558a:	401a      	ands	r2, r3
 801558c:	687b      	ldr	r3, [r7, #4]
 801558e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015590:	687b      	ldr	r3, [r7, #4]
 8015592:	699b      	ldr	r3, [r3, #24]
 8015594:	683a      	ldr	r2, [r7, #0]
 8015596:	1ad3      	subs	r3, r2, r3
 8015598:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801559a:	687b      	ldr	r3, [r7, #4]
 801559c:	69db      	ldr	r3, [r3, #28]
 801559e:	63bb      	str	r3, [r7, #56]	; 0x38
 80155a0:	e02c      	b.n	80155fc <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	689b      	ldr	r3, [r3, #8]
 80155a6:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80155a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d123      	bne.n	80155f6 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2100      	movs	r1, #0
 80155b2:	4618      	mov	r0, r3
 80155b4:	f7fe f99a 	bl	80138ec <create_chain>
 80155b8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 80155ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155bc:	2b01      	cmp	r3, #1
 80155be:	d109      	bne.n	80155d4 <f_lseek+0x2d4>
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	2202      	movs	r2, #2
 80155c4:	755a      	strb	r2, [r3, #21]
 80155c6:	68bb      	ldr	r3, [r7, #8]
 80155c8:	2102      	movs	r1, #2
 80155ca:	4618      	mov	r0, r3
 80155cc:	f7fd fd17 	bl	8012ffe <unlock_fs>
 80155d0:	2302      	movs	r3, #2
 80155d2:	e0e4      	b.n	801579e <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80155d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155da:	d109      	bne.n	80155f0 <f_lseek+0x2f0>
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	2201      	movs	r2, #1
 80155e0:	755a      	strb	r2, [r3, #21]
 80155e2:	68bb      	ldr	r3, [r7, #8]
 80155e4:	2101      	movs	r1, #1
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7fd fd09 	bl	8012ffe <unlock_fs>
 80155ec:	2301      	movs	r3, #1
 80155ee:	e0d6      	b.n	801579e <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80155f4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80155fa:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80155fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d06c      	beq.n	80156dc <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 8015602:	e044      	b.n	801568e <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 8015604:	683a      	ldr	r2, [r7, #0]
 8015606:	69fb      	ldr	r3, [r7, #28]
 8015608:	1ad3      	subs	r3, r2, r3
 801560a:	603b      	str	r3, [r7, #0]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	699a      	ldr	r2, [r3, #24]
 8015610:	69fb      	ldr	r3, [r7, #28]
 8015612:	441a      	add	r2, r3
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	7d1b      	ldrb	r3, [r3, #20]
 801561c:	f003 0302 	and.w	r3, r3, #2
 8015620:	2b00      	cmp	r3, #0
 8015622:	d00b      	beq.n	801563c <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015628:	4618      	mov	r0, r3
 801562a:	f7fe f95f 	bl	80138ec <create_chain>
 801562e:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015632:	2b00      	cmp	r3, #0
 8015634:	d108      	bne.n	8015648 <f_lseek+0x348>
							ofs = 0; break;
 8015636:	2300      	movs	r3, #0
 8015638:	603b      	str	r3, [r7, #0]
 801563a:	e02c      	b.n	8015696 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015640:	4618      	mov	r0, r3
 8015642:	f7fd ff62 	bl	801350a <get_fat>
 8015646:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801564a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801564e:	d109      	bne.n	8015664 <f_lseek+0x364>
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	2201      	movs	r2, #1
 8015654:	755a      	strb	r2, [r3, #21]
 8015656:	68bb      	ldr	r3, [r7, #8]
 8015658:	2101      	movs	r1, #1
 801565a:	4618      	mov	r0, r3
 801565c:	f7fd fccf 	bl	8012ffe <unlock_fs>
 8015660:	2301      	movs	r3, #1
 8015662:	e09c      	b.n	801579e <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015666:	2b01      	cmp	r3, #1
 8015668:	d904      	bls.n	8015674 <f_lseek+0x374>
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	699b      	ldr	r3, [r3, #24]
 801566e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015670:	429a      	cmp	r2, r3
 8015672:	d309      	bcc.n	8015688 <f_lseek+0x388>
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2202      	movs	r2, #2
 8015678:	755a      	strb	r2, [r3, #21]
 801567a:	68bb      	ldr	r3, [r7, #8]
 801567c:	2102      	movs	r1, #2
 801567e:	4618      	mov	r0, r3
 8015680:	f7fd fcbd 	bl	8012ffe <unlock_fs>
 8015684:	2302      	movs	r3, #2
 8015686:	e08a      	b.n	801579e <f_lseek+0x49e>
					fp->clust = clst;
 8015688:	687b      	ldr	r3, [r7, #4]
 801568a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801568c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801568e:	683a      	ldr	r2, [r7, #0]
 8015690:	69fb      	ldr	r3, [r7, #28]
 8015692:	429a      	cmp	r2, r3
 8015694:	d8b6      	bhi.n	8015604 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	699a      	ldr	r2, [r3, #24]
 801569a:	683b      	ldr	r3, [r7, #0]
 801569c:	441a      	add	r2, r3
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80156a2:	683b      	ldr	r3, [r7, #0]
 80156a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d017      	beq.n	80156dc <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80156b0:	4618      	mov	r0, r3
 80156b2:	f7fd ff0b 	bl	80134cc <clust2sect>
 80156b6:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 80156b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d109      	bne.n	80156d2 <f_lseek+0x3d2>
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2202      	movs	r2, #2
 80156c2:	755a      	strb	r2, [r3, #21]
 80156c4:	68bb      	ldr	r3, [r7, #8]
 80156c6:	2102      	movs	r1, #2
 80156c8:	4618      	mov	r0, r3
 80156ca:	f7fd fc98 	bl	8012ffe <unlock_fs>
 80156ce:	2302      	movs	r3, #2
 80156d0:	e065      	b.n	801579e <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80156d2:	683b      	ldr	r3, [r7, #0]
 80156d4:	0a5b      	lsrs	r3, r3, #9
 80156d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80156d8:	4413      	add	r3, r2
 80156da:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	699a      	ldr	r2, [r3, #24]
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	68db      	ldr	r3, [r3, #12]
 80156e4:	429a      	cmp	r2, r3
 80156e6:	d90a      	bls.n	80156fe <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80156e8:	687b      	ldr	r3, [r7, #4]
 80156ea:	699a      	ldr	r2, [r3, #24]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	7d1b      	ldrb	r3, [r3, #20]
 80156f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80156f8:	b2da      	uxtb	r2, r3
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	699b      	ldr	r3, [r3, #24]
 8015702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015706:	2b00      	cmp	r3, #0
 8015708:	d040      	beq.n	801578c <f_lseek+0x48c>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6a1b      	ldr	r3, [r3, #32]
 801570e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015710:	429a      	cmp	r2, r3
 8015712:	d03b      	beq.n	801578c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	7d1b      	ldrb	r3, [r3, #20]
 8015718:	b25b      	sxtb	r3, r3
 801571a:	2b00      	cmp	r3, #0
 801571c:	da1d      	bge.n	801575a <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801571e:	68bb      	ldr	r3, [r7, #8]
 8015720:	7858      	ldrb	r0, [r3, #1]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	6a1a      	ldr	r2, [r3, #32]
 801572c:	2301      	movs	r3, #1
 801572e:	f7fd fb13 	bl	8012d58 <disk_write>
 8015732:	4603      	mov	r3, r0
 8015734:	2b00      	cmp	r3, #0
 8015736:	d009      	beq.n	801574c <f_lseek+0x44c>
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	2201      	movs	r2, #1
 801573c:	755a      	strb	r2, [r3, #21]
 801573e:	68bb      	ldr	r3, [r7, #8]
 8015740:	2101      	movs	r1, #1
 8015742:	4618      	mov	r0, r3
 8015744:	f7fd fc5b 	bl	8012ffe <unlock_fs>
 8015748:	2301      	movs	r3, #1
 801574a:	e028      	b.n	801579e <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801574c:	687b      	ldr	r3, [r7, #4]
 801574e:	7d1b      	ldrb	r3, [r3, #20]
 8015750:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015754:	b2da      	uxtb	r2, r3
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801575a:	68bb      	ldr	r3, [r7, #8]
 801575c:	7858      	ldrb	r0, [r3, #1]
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015764:	2301      	movs	r3, #1
 8015766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015768:	f7fd fad6 	bl	8012d18 <disk_read>
 801576c:	4603      	mov	r3, r0
 801576e:	2b00      	cmp	r3, #0
 8015770:	d009      	beq.n	8015786 <f_lseek+0x486>
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	2201      	movs	r2, #1
 8015776:	755a      	strb	r2, [r3, #21]
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	2101      	movs	r1, #1
 801577c:	4618      	mov	r0, r3
 801577e:	f7fd fc3e 	bl	8012ffe <unlock_fs>
 8015782:	2301      	movs	r3, #1
 8015784:	e00b      	b.n	801579e <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801578a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015792:	4611      	mov	r1, r2
 8015794:	4618      	mov	r0, r3
 8015796:	f7fd fc32 	bl	8012ffe <unlock_fs>
 801579a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801579e:	4618      	mov	r0, r3
 80157a0:	3740      	adds	r7, #64	; 0x40
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}

080157a6 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80157a6:	b580      	push	{r7, lr}
 80157a8:	b086      	sub	sp, #24
 80157aa:	af00      	add	r7, sp, #0
 80157ac:	6078      	str	r0, [r7, #4]
 80157ae:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	d101      	bne.n	80157ba <f_opendir+0x14>
 80157b6:	2309      	movs	r3, #9
 80157b8:	e06a      	b.n	8015890 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 80157ba:	687b      	ldr	r3, [r7, #4]
 80157bc:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 80157be:	f107 010c 	add.w	r1, r7, #12
 80157c2:	463b      	mov	r3, r7
 80157c4:	2200      	movs	r2, #0
 80157c6:	4618      	mov	r0, r3
 80157c8:	f7fe fea8 	bl	801451c <find_volume>
 80157cc:	4603      	mov	r3, r0
 80157ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80157d0:	7dfb      	ldrb	r3, [r7, #23]
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d14f      	bne.n	8015876 <f_opendir+0xd0>
		obj->fs = fs;
 80157d6:	68fa      	ldr	r2, [r7, #12]
 80157d8:	693b      	ldr	r3, [r7, #16]
 80157da:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	4619      	mov	r1, r3
 80157e0:	6878      	ldr	r0, [r7, #4]
 80157e2:	f7fe fd8f 	bl	8014304 <follow_path>
 80157e6:	4603      	mov	r3, r0
 80157e8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80157ea:	7dfb      	ldrb	r3, [r7, #23]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d13d      	bne.n	801586c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80157f6:	b25b      	sxtb	r3, r3
 80157f8:	2b00      	cmp	r3, #0
 80157fa:	db12      	blt.n	8015822 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80157fc:	693b      	ldr	r3, [r7, #16]
 80157fe:	799b      	ldrb	r3, [r3, #6]
 8015800:	f003 0310 	and.w	r3, r3, #16
 8015804:	2b00      	cmp	r3, #0
 8015806:	d00a      	beq.n	801581e <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8015808:	68fa      	ldr	r2, [r7, #12]
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	6a1b      	ldr	r3, [r3, #32]
 801580e:	4619      	mov	r1, r3
 8015810:	4610      	mov	r0, r2
 8015812:	f7fe fabe 	bl	8013d92 <ld_clust>
 8015816:	4602      	mov	r2, r0
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	609a      	str	r2, [r3, #8]
 801581c:	e001      	b.n	8015822 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 801581e:	2305      	movs	r3, #5
 8015820:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8015822:	7dfb      	ldrb	r3, [r7, #23]
 8015824:	2b00      	cmp	r3, #0
 8015826:	d121      	bne.n	801586c <f_opendir+0xc6>
				obj->id = fs->id;
 8015828:	68fb      	ldr	r3, [r7, #12]
 801582a:	88da      	ldrh	r2, [r3, #6]
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015830:	2100      	movs	r1, #0
 8015832:	6878      	ldr	r0, [r7, #4]
 8015834:	f7fe f926 	bl	8013a84 <dir_sdi>
 8015838:	4603      	mov	r3, r0
 801583a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801583c:	7dfb      	ldrb	r3, [r7, #23]
 801583e:	2b00      	cmp	r3, #0
 8015840:	d114      	bne.n	801586c <f_opendir+0xc6>
					if (obj->sclust) {
 8015842:	693b      	ldr	r3, [r7, #16]
 8015844:	689b      	ldr	r3, [r3, #8]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d00d      	beq.n	8015866 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801584a:	2100      	movs	r1, #0
 801584c:	6878      	ldr	r0, [r7, #4]
 801584e:	f7fd fc6f 	bl	8013130 <inc_lock>
 8015852:	4602      	mov	r2, r0
 8015854:	693b      	ldr	r3, [r7, #16]
 8015856:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015858:	693b      	ldr	r3, [r7, #16]
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d105      	bne.n	801586c <f_opendir+0xc6>
 8015860:	2312      	movs	r3, #18
 8015862:	75fb      	strb	r3, [r7, #23]
 8015864:	e002      	b.n	801586c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015866:	693b      	ldr	r3, [r7, #16]
 8015868:	2200      	movs	r2, #0
 801586a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801586c:	7dfb      	ldrb	r3, [r7, #23]
 801586e:	2b04      	cmp	r3, #4
 8015870:	d101      	bne.n	8015876 <f_opendir+0xd0>
 8015872:	2305      	movs	r3, #5
 8015874:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015876:	7dfb      	ldrb	r3, [r7, #23]
 8015878:	2b00      	cmp	r3, #0
 801587a:	d002      	beq.n	8015882 <f_opendir+0xdc>
 801587c:	693b      	ldr	r3, [r7, #16]
 801587e:	2200      	movs	r2, #0
 8015880:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	7dfa      	ldrb	r2, [r7, #23]
 8015886:	4611      	mov	r1, r2
 8015888:	4618      	mov	r0, r3
 801588a:	f7fd fbb8 	bl	8012ffe <unlock_fs>
 801588e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015890:	4618      	mov	r0, r3
 8015892:	3718      	adds	r7, #24
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015898:	b580      	push	{r7, lr}
 801589a:	b084      	sub	sp, #16
 801589c:	af00      	add	r7, sp, #0
 801589e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80158a0:	687b      	ldr	r3, [r7, #4]
 80158a2:	f107 0208 	add.w	r2, r7, #8
 80158a6:	4611      	mov	r1, r2
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7ff f88b 	bl	80149c4 <validate>
 80158ae:	4603      	mov	r3, r0
 80158b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80158b2:	7bfb      	ldrb	r3, [r7, #15]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d115      	bne.n	80158e4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	691b      	ldr	r3, [r3, #16]
 80158bc:	2b00      	cmp	r3, #0
 80158be:	d006      	beq.n	80158ce <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	691b      	ldr	r3, [r3, #16]
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7fd fcc1 	bl	801324c <dec_lock>
 80158ca:	4603      	mov	r3, r0
 80158cc:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 80158ce:	7bfb      	ldrb	r3, [r7, #15]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d102      	bne.n	80158da <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80158d4:	687b      	ldr	r3, [r7, #4]
 80158d6:	2200      	movs	r2, #0
 80158d8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80158da:	68bb      	ldr	r3, [r7, #8]
 80158dc:	2100      	movs	r1, #0
 80158de:	4618      	mov	r0, r3
 80158e0:	f7fd fb8d 	bl	8012ffe <unlock_fs>
#endif
	}
	return res;
 80158e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80158e6:	4618      	mov	r0, r3
 80158e8:	3710      	adds	r7, #16
 80158ea:	46bd      	mov	sp, r7
 80158ec:	bd80      	pop	{r7, pc}

080158ee <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80158ee:	b580      	push	{r7, lr}
 80158f0:	b084      	sub	sp, #16
 80158f2:	af00      	add	r7, sp, #0
 80158f4:	6078      	str	r0, [r7, #4]
 80158f6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	f107 0208 	add.w	r2, r7, #8
 80158fe:	4611      	mov	r1, r2
 8015900:	4618      	mov	r0, r3
 8015902:	f7ff f85f 	bl	80149c4 <validate>
 8015906:	4603      	mov	r3, r0
 8015908:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801590a:	7bfb      	ldrb	r3, [r7, #15]
 801590c:	2b00      	cmp	r3, #0
 801590e:	d126      	bne.n	801595e <f_readdir+0x70>
		if (!fno) {
 8015910:	683b      	ldr	r3, [r7, #0]
 8015912:	2b00      	cmp	r3, #0
 8015914:	d106      	bne.n	8015924 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8015916:	2100      	movs	r1, #0
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f7fe f8b3 	bl	8013a84 <dir_sdi>
 801591e:	4603      	mov	r3, r0
 8015920:	73fb      	strb	r3, [r7, #15]
 8015922:	e01c      	b.n	801595e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8015924:	2100      	movs	r1, #0
 8015926:	6878      	ldr	r0, [r7, #4]
 8015928:	f7fe fa72 	bl	8013e10 <dir_read>
 801592c:	4603      	mov	r3, r0
 801592e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015930:	7bfb      	ldrb	r3, [r7, #15]
 8015932:	2b04      	cmp	r3, #4
 8015934:	d101      	bne.n	801593a <f_readdir+0x4c>
 8015936:	2300      	movs	r3, #0
 8015938:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801593a:	7bfb      	ldrb	r3, [r7, #15]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d10e      	bne.n	801595e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015940:	6839      	ldr	r1, [r7, #0]
 8015942:	6878      	ldr	r0, [r7, #4]
 8015944:	f7fe fb48 	bl	8013fd8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015948:	2100      	movs	r1, #0
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f7fe f915 	bl	8013b7a <dir_next>
 8015950:	4603      	mov	r3, r0
 8015952:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015954:	7bfb      	ldrb	r3, [r7, #15]
 8015956:	2b04      	cmp	r3, #4
 8015958:	d101      	bne.n	801595e <f_readdir+0x70>
 801595a:	2300      	movs	r3, #0
 801595c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801595e:	68bb      	ldr	r3, [r7, #8]
 8015960:	7bfa      	ldrb	r2, [r7, #15]
 8015962:	4611      	mov	r1, r2
 8015964:	4618      	mov	r0, r3
 8015966:	f7fd fb4a 	bl	8012ffe <unlock_fs>
 801596a:	7bfb      	ldrb	r3, [r7, #15]
}
 801596c:	4618      	mov	r0, r3
 801596e:	3710      	adds	r7, #16
 8015970:	46bd      	mov	sp, r7
 8015972:	bd80      	pop	{r7, pc}

08015974 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8015974:	b580      	push	{r7, lr}
 8015976:	b084      	sub	sp, #16
 8015978:	af00      	add	r7, sp, #0
 801597a:	6078      	str	r0, [r7, #4]
 801597c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801597e:	6839      	ldr	r1, [r7, #0]
 8015980:	6878      	ldr	r0, [r7, #4]
 8015982:	f7ff ffb4 	bl	80158ee <f_readdir>
 8015986:	4603      	mov	r3, r0
 8015988:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801598a:	7bfb      	ldrb	r3, [r7, #15]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d114      	bne.n	80159ba <f_findnext+0x46>
 8015990:	683b      	ldr	r3, [r7, #0]
 8015992:	2b00      	cmp	r3, #0
 8015994:	d011      	beq.n	80159ba <f_findnext+0x46>
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	7a5b      	ldrb	r3, [r3, #9]
 801599a:	2b00      	cmp	r3, #0
 801599c:	d00d      	beq.n	80159ba <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	f103 0109 	add.w	r1, r3, #9
 80159a8:	2300      	movs	r3, #0
 80159aa:	2200      	movs	r2, #0
 80159ac:	f7fe fb9a 	bl	80140e4 <pattern_matching>
 80159b0:	4603      	mov	r3, r0
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d100      	bne.n	80159b8 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 80159b6:	e7e2      	b.n	801597e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 80159b8:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 80159ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80159bc:	4618      	mov	r0, r3
 80159be:	3710      	adds	r7, #16
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd80      	pop	{r7, pc}

080159c4 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 80159c4:	b580      	push	{r7, lr}
 80159c6:	b086      	sub	sp, #24
 80159c8:	af00      	add	r7, sp, #0
 80159ca:	60f8      	str	r0, [r7, #12]
 80159cc:	60b9      	str	r1, [r7, #8]
 80159ce:	607a      	str	r2, [r7, #4]
 80159d0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80159d2:	68fb      	ldr	r3, [r7, #12]
 80159d4:	683a      	ldr	r2, [r7, #0]
 80159d6:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80159d8:	6879      	ldr	r1, [r7, #4]
 80159da:	68f8      	ldr	r0, [r7, #12]
 80159dc:	f7ff fee3 	bl	80157a6 <f_opendir>
 80159e0:	4603      	mov	r3, r0
 80159e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80159e4:	7dfb      	ldrb	r3, [r7, #23]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d105      	bne.n	80159f6 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 80159ea:	68b9      	ldr	r1, [r7, #8]
 80159ec:	68f8      	ldr	r0, [r7, #12]
 80159ee:	f7ff ffc1 	bl	8015974 <f_findnext>
 80159f2:	4603      	mov	r3, r0
 80159f4:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80159f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80159f8:	4618      	mov	r0, r3
 80159fa:	3718      	adds	r7, #24
 80159fc:	46bd      	mov	sp, r7
 80159fe:	bd80      	pop	{r7, pc}

08015a00 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8015a00:	b480      	push	{r7}
 8015a02:	b087      	sub	sp, #28
 8015a04:	af00      	add	r7, sp, #0
 8015a06:	60f8      	str	r0, [r7, #12]
 8015a08:	60b9      	str	r1, [r7, #8]
 8015a0a:	4613      	mov	r3, r2
 8015a0c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8015a0e:	2301      	movs	r3, #1
 8015a10:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8015a12:	2300      	movs	r3, #0
 8015a14:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8015a16:	4b1f      	ldr	r3, [pc, #124]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a18:	7a5b      	ldrb	r3, [r3, #9]
 8015a1a:	b2db      	uxtb	r3, r3
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d131      	bne.n	8015a84 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8015a20:	4b1c      	ldr	r3, [pc, #112]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a22:	7a5b      	ldrb	r3, [r3, #9]
 8015a24:	b2db      	uxtb	r3, r3
 8015a26:	461a      	mov	r2, r3
 8015a28:	4b1a      	ldr	r3, [pc, #104]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a2a:	2100      	movs	r1, #0
 8015a2c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8015a2e:	4b19      	ldr	r3, [pc, #100]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a30:	7a5b      	ldrb	r3, [r3, #9]
 8015a32:	b2db      	uxtb	r3, r3
 8015a34:	4a17      	ldr	r2, [pc, #92]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a36:	009b      	lsls	r3, r3, #2
 8015a38:	4413      	add	r3, r2
 8015a3a:	68fa      	ldr	r2, [r7, #12]
 8015a3c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8015a3e:	4b15      	ldr	r3, [pc, #84]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a40:	7a5b      	ldrb	r3, [r3, #9]
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	461a      	mov	r2, r3
 8015a46:	4b13      	ldr	r3, [pc, #76]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a48:	4413      	add	r3, r2
 8015a4a:	79fa      	ldrb	r2, [r7, #7]
 8015a4c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8015a4e:	4b11      	ldr	r3, [pc, #68]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a50:	7a5b      	ldrb	r3, [r3, #9]
 8015a52:	b2db      	uxtb	r3, r3
 8015a54:	1c5a      	adds	r2, r3, #1
 8015a56:	b2d1      	uxtb	r1, r2
 8015a58:	4a0e      	ldr	r2, [pc, #56]	; (8015a94 <FATFS_LinkDriverEx+0x94>)
 8015a5a:	7251      	strb	r1, [r2, #9]
 8015a5c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8015a5e:	7dbb      	ldrb	r3, [r7, #22]
 8015a60:	3330      	adds	r3, #48	; 0x30
 8015a62:	b2da      	uxtb	r2, r3
 8015a64:	68bb      	ldr	r3, [r7, #8]
 8015a66:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	3301      	adds	r3, #1
 8015a6c:	223a      	movs	r2, #58	; 0x3a
 8015a6e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015a70:	68bb      	ldr	r3, [r7, #8]
 8015a72:	3302      	adds	r3, #2
 8015a74:	222f      	movs	r2, #47	; 0x2f
 8015a76:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	3303      	adds	r3, #3
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015a80:	2300      	movs	r3, #0
 8015a82:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a86:	4618      	mov	r0, r3
 8015a88:	371c      	adds	r7, #28
 8015a8a:	46bd      	mov	sp, r7
 8015a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a90:	4770      	bx	lr
 8015a92:	bf00      	nop
 8015a94:	20000368 	.word	0x20000368

08015a98 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015a98:	b580      	push	{r7, lr}
 8015a9a:	b082      	sub	sp, #8
 8015a9c:	af00      	add	r7, sp, #0
 8015a9e:	6078      	str	r0, [r7, #4]
 8015aa0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015aa2:	2200      	movs	r2, #0
 8015aa4:	6839      	ldr	r1, [r7, #0]
 8015aa6:	6878      	ldr	r0, [r7, #4]
 8015aa8:	f7ff ffaa 	bl	8015a00 <FATFS_LinkDriverEx>
 8015aac:	4603      	mov	r3, r0
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3708      	adds	r7, #8
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}

08015ab6 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015ab6:	b580      	push	{r7, lr}
 8015ab8:	b084      	sub	sp, #16
 8015aba:	af00      	add	r7, sp, #0
 8015abc:	4603      	mov	r3, r0
 8015abe:	6039      	str	r1, [r7, #0]
 8015ac0:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	2101      	movs	r1, #1
 8015ac6:	2001      	movs	r0, #1
 8015ac8:	f000 fb5e 	bl	8016188 <osSemaphoreNew>
 8015acc:	4602      	mov	r2, r0
 8015ace:	683b      	ldr	r3, [r7, #0]
 8015ad0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8015ad2:	683b      	ldr	r3, [r7, #0]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	bf14      	ite	ne
 8015ada:	2301      	movne	r3, #1
 8015adc:	2300      	moveq	r3, #0
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	60fb      	str	r3, [r7, #12]

    return ret;
 8015ae2:	68fb      	ldr	r3, [r7, #12]
}
 8015ae4:	4618      	mov	r0, r3
 8015ae6:	3710      	adds	r7, #16
 8015ae8:	46bd      	mov	sp, r7
 8015aea:	bd80      	pop	{r7, pc}

08015aec <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8015aec:	b580      	push	{r7, lr}
 8015aee:	b082      	sub	sp, #8
 8015af0:	af00      	add	r7, sp, #0
 8015af2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8015af4:	6878      	ldr	r0, [r7, #4]
 8015af6:	f000 fca3 	bl	8016440 <osSemaphoreDelete>
#endif
    return 1;
 8015afa:	2301      	movs	r3, #1
}
 8015afc:	4618      	mov	r0, r3
 8015afe:	3708      	adds	r7, #8
 8015b00:	46bd      	mov	sp, r7
 8015b02:	bd80      	pop	{r7, pc}

08015b04 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8015b04:	b580      	push	{r7, lr}
 8015b06:	b084      	sub	sp, #16
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8015b10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8015b14:	6878      	ldr	r0, [r7, #4]
 8015b16:	f000 fbd5 	bl	80162c4 <osSemaphoreAcquire>
 8015b1a:	4603      	mov	r3, r0
 8015b1c:	2b00      	cmp	r3, #0
 8015b1e:	d101      	bne.n	8015b24 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8015b20:	2301      	movs	r3, #1
 8015b22:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8015b24:	68fb      	ldr	r3, [r7, #12]
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3710      	adds	r7, #16
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}

08015b2e <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8015b2e:	b580      	push	{r7, lr}
 8015b30:	b082      	sub	sp, #8
 8015b32:	af00      	add	r7, sp, #0
 8015b34:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015b36:	6878      	ldr	r0, [r7, #4]
 8015b38:	f000 fc2a 	bl	8016390 <osSemaphoreRelease>
#endif
}
 8015b3c:	bf00      	nop
 8015b3e:	3708      	adds	r7, #8
 8015b40:	46bd      	mov	sp, r7
 8015b42:	bd80      	pop	{r7, pc}

08015b44 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015b44:	b480      	push	{r7}
 8015b46:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8015b48:	bf00      	nop
 8015b4a:	46bd      	mov	sp, r7
 8015b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b50:	4770      	bx	lr
	...

08015b54 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015b54:	b480      	push	{r7}
 8015b56:	b085      	sub	sp, #20
 8015b58:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b5a:	f3ef 8305 	mrs	r3, IPSR
 8015b5e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015b60:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d10f      	bne.n	8015b86 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b66:	f3ef 8310 	mrs	r3, PRIMASK
 8015b6a:	607b      	str	r3, [r7, #4]
  return(result);
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d105      	bne.n	8015b7e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015b72:	f3ef 8311 	mrs	r3, BASEPRI
 8015b76:	603b      	str	r3, [r7, #0]
  return(result);
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d007      	beq.n	8015b8e <osKernelInitialize+0x3a>
 8015b7e:	4b0e      	ldr	r3, [pc, #56]	; (8015bb8 <osKernelInitialize+0x64>)
 8015b80:	681b      	ldr	r3, [r3, #0]
 8015b82:	2b02      	cmp	r3, #2
 8015b84:	d103      	bne.n	8015b8e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8015b86:	f06f 0305 	mvn.w	r3, #5
 8015b8a:	60fb      	str	r3, [r7, #12]
 8015b8c:	e00c      	b.n	8015ba8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015b8e:	4b0a      	ldr	r3, [pc, #40]	; (8015bb8 <osKernelInitialize+0x64>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d105      	bne.n	8015ba2 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015b96:	4b08      	ldr	r3, [pc, #32]	; (8015bb8 <osKernelInitialize+0x64>)
 8015b98:	2201      	movs	r2, #1
 8015b9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	60fb      	str	r3, [r7, #12]
 8015ba0:	e002      	b.n	8015ba8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8015ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8015ba6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015ba8:	68fb      	ldr	r3, [r7, #12]
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3714      	adds	r7, #20
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bb4:	4770      	bx	lr
 8015bb6:	bf00      	nop
 8015bb8:	20000374 	.word	0x20000374

08015bbc <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8015bbc:	b580      	push	{r7, lr}
 8015bbe:	b082      	sub	sp, #8
 8015bc0:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8015bc2:	f002 fe7b 	bl	80188bc <xTaskGetSchedulerState>
 8015bc6:	4603      	mov	r3, r0
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d004      	beq.n	8015bd6 <osKernelGetState+0x1a>
 8015bcc:	2b02      	cmp	r3, #2
 8015bce:	d105      	bne.n	8015bdc <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8015bd0:	2302      	movs	r3, #2
 8015bd2:	607b      	str	r3, [r7, #4]
      break;
 8015bd4:	e00c      	b.n	8015bf0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8015bd6:	2303      	movs	r3, #3
 8015bd8:	607b      	str	r3, [r7, #4]
      break;
 8015bda:	e009      	b.n	8015bf0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8015bdc:	4b07      	ldr	r3, [pc, #28]	; (8015bfc <osKernelGetState+0x40>)
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	2b01      	cmp	r3, #1
 8015be2:	d102      	bne.n	8015bea <osKernelGetState+0x2e>
        state = osKernelReady;
 8015be4:	2301      	movs	r3, #1
 8015be6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015be8:	e001      	b.n	8015bee <osKernelGetState+0x32>
        state = osKernelInactive;
 8015bea:	2300      	movs	r3, #0
 8015bec:	607b      	str	r3, [r7, #4]
      break;
 8015bee:	bf00      	nop
  }

  return (state);
 8015bf0:	687b      	ldr	r3, [r7, #4]
}
 8015bf2:	4618      	mov	r0, r3
 8015bf4:	3708      	adds	r7, #8
 8015bf6:	46bd      	mov	sp, r7
 8015bf8:	bd80      	pop	{r7, pc}
 8015bfa:	bf00      	nop
 8015bfc:	20000374 	.word	0x20000374

08015c00 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015c00:	b580      	push	{r7, lr}
 8015c02:	b084      	sub	sp, #16
 8015c04:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c06:	f3ef 8305 	mrs	r3, IPSR
 8015c0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8015c0c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d10f      	bne.n	8015c32 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c12:	f3ef 8310 	mrs	r3, PRIMASK
 8015c16:	607b      	str	r3, [r7, #4]
  return(result);
 8015c18:	687b      	ldr	r3, [r7, #4]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d105      	bne.n	8015c2a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015c1e:	f3ef 8311 	mrs	r3, BASEPRI
 8015c22:	603b      	str	r3, [r7, #0]
  return(result);
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d007      	beq.n	8015c3a <osKernelStart+0x3a>
 8015c2a:	4b0f      	ldr	r3, [pc, #60]	; (8015c68 <osKernelStart+0x68>)
 8015c2c:	681b      	ldr	r3, [r3, #0]
 8015c2e:	2b02      	cmp	r3, #2
 8015c30:	d103      	bne.n	8015c3a <osKernelStart+0x3a>
    stat = osErrorISR;
 8015c32:	f06f 0305 	mvn.w	r3, #5
 8015c36:	60fb      	str	r3, [r7, #12]
 8015c38:	e010      	b.n	8015c5c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015c3a:	4b0b      	ldr	r3, [pc, #44]	; (8015c68 <osKernelStart+0x68>)
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	2b01      	cmp	r3, #1
 8015c40:	d109      	bne.n	8015c56 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015c42:	f7ff ff7f 	bl	8015b44 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015c46:	4b08      	ldr	r3, [pc, #32]	; (8015c68 <osKernelStart+0x68>)
 8015c48:	2202      	movs	r2, #2
 8015c4a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015c4c:	f002 f9c8 	bl	8017fe0 <vTaskStartScheduler>
      stat = osOK;
 8015c50:	2300      	movs	r3, #0
 8015c52:	60fb      	str	r3, [r7, #12]
 8015c54:	e002      	b.n	8015c5c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8015c56:	f04f 33ff 	mov.w	r3, #4294967295
 8015c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015c5c:	68fb      	ldr	r3, [r7, #12]
}
 8015c5e:	4618      	mov	r0, r3
 8015c60:	3710      	adds	r7, #16
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	bf00      	nop
 8015c68:	20000374 	.word	0x20000374

08015c6c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015c6c:	b580      	push	{r7, lr}
 8015c6e:	b084      	sub	sp, #16
 8015c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015c72:	f3ef 8305 	mrs	r3, IPSR
 8015c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8015c78:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d10f      	bne.n	8015c9e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8015c82:	607b      	str	r3, [r7, #4]
  return(result);
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d105      	bne.n	8015c96 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015c8a:	f3ef 8311 	mrs	r3, BASEPRI
 8015c8e:	603b      	str	r3, [r7, #0]
  return(result);
 8015c90:	683b      	ldr	r3, [r7, #0]
 8015c92:	2b00      	cmp	r3, #0
 8015c94:	d007      	beq.n	8015ca6 <osKernelGetTickCount+0x3a>
 8015c96:	4b08      	ldr	r3, [pc, #32]	; (8015cb8 <osKernelGetTickCount+0x4c>)
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2b02      	cmp	r3, #2
 8015c9c:	d103      	bne.n	8015ca6 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8015c9e:	f002 fac3 	bl	8018228 <xTaskGetTickCountFromISR>
 8015ca2:	60f8      	str	r0, [r7, #12]
 8015ca4:	e002      	b.n	8015cac <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8015ca6:	f002 faaf 	bl	8018208 <xTaskGetTickCount>
 8015caa:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8015cac:	68fb      	ldr	r3, [r7, #12]
}
 8015cae:	4618      	mov	r0, r3
 8015cb0:	3710      	adds	r7, #16
 8015cb2:	46bd      	mov	sp, r7
 8015cb4:	bd80      	pop	{r7, pc}
 8015cb6:	bf00      	nop
 8015cb8:	20000374 	.word	0x20000374

08015cbc <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8015cbc:	b480      	push	{r7}
 8015cbe:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8015cc0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8015cc4:	4618      	mov	r0, r3
 8015cc6:	46bd      	mov	sp, r7
 8015cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ccc:	4770      	bx	lr
	...

08015cd0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015cd0:	b580      	push	{r7, lr}
 8015cd2:	b090      	sub	sp, #64	; 0x40
 8015cd4:	af04      	add	r7, sp, #16
 8015cd6:	60f8      	str	r0, [r7, #12]
 8015cd8:	60b9      	str	r1, [r7, #8]
 8015cda:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015cdc:	2300      	movs	r3, #0
 8015cde:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ce0:	f3ef 8305 	mrs	r3, IPSR
 8015ce4:	61fb      	str	r3, [r7, #28]
  return(result);
 8015ce6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	f040 808f 	bne.w	8015e0c <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015cee:	f3ef 8310 	mrs	r3, PRIMASK
 8015cf2:	61bb      	str	r3, [r7, #24]
  return(result);
 8015cf4:	69bb      	ldr	r3, [r7, #24]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d105      	bne.n	8015d06 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015cfa:	f3ef 8311 	mrs	r3, BASEPRI
 8015cfe:	617b      	str	r3, [r7, #20]
  return(result);
 8015d00:	697b      	ldr	r3, [r7, #20]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d003      	beq.n	8015d0e <osThreadNew+0x3e>
 8015d06:	4b44      	ldr	r3, [pc, #272]	; (8015e18 <osThreadNew+0x148>)
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	2b02      	cmp	r3, #2
 8015d0c:	d07e      	beq.n	8015e0c <osThreadNew+0x13c>
 8015d0e:	68fb      	ldr	r3, [r7, #12]
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d07b      	beq.n	8015e0c <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8015d14:	2380      	movs	r3, #128	; 0x80
 8015d16:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8015d18:	2318      	movs	r3, #24
 8015d1a:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8015d20:	f04f 33ff 	mov.w	r3, #4294967295
 8015d24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d045      	beq.n	8015db8 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	681b      	ldr	r3, [r3, #0]
 8015d30:	2b00      	cmp	r3, #0
 8015d32:	d002      	beq.n	8015d3a <osThreadNew+0x6a>
        name = attr->name;
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	699b      	ldr	r3, [r3, #24]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d002      	beq.n	8015d48 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	699b      	ldr	r3, [r3, #24]
 8015d46:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d008      	beq.n	8015d60 <osThreadNew+0x90>
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d50:	2b38      	cmp	r3, #56	; 0x38
 8015d52:	d805      	bhi.n	8015d60 <osThreadNew+0x90>
 8015d54:	687b      	ldr	r3, [r7, #4]
 8015d56:	685b      	ldr	r3, [r3, #4]
 8015d58:	f003 0301 	and.w	r3, r3, #1
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d001      	beq.n	8015d64 <osThreadNew+0x94>
        return (NULL);
 8015d60:	2300      	movs	r3, #0
 8015d62:	e054      	b.n	8015e0e <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	695b      	ldr	r3, [r3, #20]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d003      	beq.n	8015d74 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	695b      	ldr	r3, [r3, #20]
 8015d70:	089b      	lsrs	r3, r3, #2
 8015d72:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	689b      	ldr	r3, [r3, #8]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d00e      	beq.n	8015d9a <osThreadNew+0xca>
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	68db      	ldr	r3, [r3, #12]
 8015d80:	2b5b      	cmp	r3, #91	; 0x5b
 8015d82:	d90a      	bls.n	8015d9a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015d88:	2b00      	cmp	r3, #0
 8015d8a:	d006      	beq.n	8015d9a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	695b      	ldr	r3, [r3, #20]
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d002      	beq.n	8015d9a <osThreadNew+0xca>
        mem = 1;
 8015d94:	2301      	movs	r3, #1
 8015d96:	623b      	str	r3, [r7, #32]
 8015d98:	e010      	b.n	8015dbc <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	689b      	ldr	r3, [r3, #8]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d10c      	bne.n	8015dbc <osThreadNew+0xec>
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	68db      	ldr	r3, [r3, #12]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d108      	bne.n	8015dbc <osThreadNew+0xec>
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	691b      	ldr	r3, [r3, #16]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d104      	bne.n	8015dbc <osThreadNew+0xec>
          mem = 0;
 8015db2:	2300      	movs	r3, #0
 8015db4:	623b      	str	r3, [r7, #32]
 8015db6:	e001      	b.n	8015dbc <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8015db8:	2300      	movs	r3, #0
 8015dba:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8015dbc:	6a3b      	ldr	r3, [r7, #32]
 8015dbe:	2b01      	cmp	r3, #1
 8015dc0:	d110      	bne.n	8015de4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8015dc6:	687a      	ldr	r2, [r7, #4]
 8015dc8:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015dca:	9202      	str	r2, [sp, #8]
 8015dcc:	9301      	str	r3, [sp, #4]
 8015dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd0:	9300      	str	r3, [sp, #0]
 8015dd2:	68bb      	ldr	r3, [r7, #8]
 8015dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015dd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015dd8:	68f8      	ldr	r0, [r7, #12]
 8015dda:	f001 fea5 	bl	8017b28 <xTaskCreateStatic>
 8015dde:	4603      	mov	r3, r0
 8015de0:	613b      	str	r3, [r7, #16]
 8015de2:	e013      	b.n	8015e0c <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8015de4:	6a3b      	ldr	r3, [r7, #32]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d110      	bne.n	8015e0c <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015dea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015dec:	b29a      	uxth	r2, r3
 8015dee:	f107 0310 	add.w	r3, r7, #16
 8015df2:	9301      	str	r3, [sp, #4]
 8015df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df6:	9300      	str	r3, [sp, #0]
 8015df8:	68bb      	ldr	r3, [r7, #8]
 8015dfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015dfc:	68f8      	ldr	r0, [r7, #12]
 8015dfe:	f001 fef3 	bl	8017be8 <xTaskCreate>
 8015e02:	4603      	mov	r3, r0
 8015e04:	2b01      	cmp	r3, #1
 8015e06:	d001      	beq.n	8015e0c <osThreadNew+0x13c>
          hTask = NULL;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015e0c:	693b      	ldr	r3, [r7, #16]
}
 8015e0e:	4618      	mov	r0, r3
 8015e10:	3730      	adds	r7, #48	; 0x30
 8015e12:	46bd      	mov	sp, r7
 8015e14:	bd80      	pop	{r7, pc}
 8015e16:	bf00      	nop
 8015e18:	20000374 	.word	0x20000374

08015e1c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8015e1c:	b580      	push	{r7, lr}
 8015e1e:	b086      	sub	sp, #24
 8015e20:	af00      	add	r7, sp, #0
 8015e22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e24:	f3ef 8305 	mrs	r3, IPSR
 8015e28:	613b      	str	r3, [r7, #16]
  return(result);
 8015e2a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e2c:	2b00      	cmp	r3, #0
 8015e2e:	d10f      	bne.n	8015e50 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e30:	f3ef 8310 	mrs	r3, PRIMASK
 8015e34:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d105      	bne.n	8015e48 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015e3c:	f3ef 8311 	mrs	r3, BASEPRI
 8015e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8015e42:	68bb      	ldr	r3, [r7, #8]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d007      	beq.n	8015e58 <osDelay+0x3c>
 8015e48:	4b0a      	ldr	r3, [pc, #40]	; (8015e74 <osDelay+0x58>)
 8015e4a:	681b      	ldr	r3, [r3, #0]
 8015e4c:	2b02      	cmp	r3, #2
 8015e4e:	d103      	bne.n	8015e58 <osDelay+0x3c>
    stat = osErrorISR;
 8015e50:	f06f 0305 	mvn.w	r3, #5
 8015e54:	617b      	str	r3, [r7, #20]
 8015e56:	e007      	b.n	8015e68 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8015e58:	2300      	movs	r3, #0
 8015e5a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d002      	beq.n	8015e68 <osDelay+0x4c>
      vTaskDelay(ticks);
 8015e62:	6878      	ldr	r0, [r7, #4]
 8015e64:	f002 f886 	bl	8017f74 <vTaskDelay>
    }
  }

  return (stat);
 8015e68:	697b      	ldr	r3, [r7, #20]
}
 8015e6a:	4618      	mov	r0, r3
 8015e6c:	3718      	adds	r7, #24
 8015e6e:	46bd      	mov	sp, r7
 8015e70:	bd80      	pop	{r7, pc}
 8015e72:	bf00      	nop
 8015e74:	20000374 	.word	0x20000374

08015e78 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b088      	sub	sp, #32
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015e80:	f3ef 8305 	mrs	r3, IPSR
 8015e84:	617b      	str	r3, [r7, #20]
  return(result);
 8015e86:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8015e88:	2b00      	cmp	r3, #0
 8015e8a:	d10f      	bne.n	8015eac <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8015e90:	613b      	str	r3, [r7, #16]
  return(result);
 8015e92:	693b      	ldr	r3, [r7, #16]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d105      	bne.n	8015ea4 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015e98:	f3ef 8311 	mrs	r3, BASEPRI
 8015e9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d007      	beq.n	8015eb4 <osDelayUntil+0x3c>
 8015ea4:	4b13      	ldr	r3, [pc, #76]	; (8015ef4 <osDelayUntil+0x7c>)
 8015ea6:	681b      	ldr	r3, [r3, #0]
 8015ea8:	2b02      	cmp	r3, #2
 8015eaa:	d103      	bne.n	8015eb4 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8015eac:	f06f 0305 	mvn.w	r3, #5
 8015eb0:	61fb      	str	r3, [r7, #28]
 8015eb2:	e019      	b.n	8015ee8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8015eb8:	f002 f9a6 	bl	8018208 <xTaskGetTickCount>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8015ec0:	68bb      	ldr	r3, [r7, #8]
 8015ec2:	687a      	ldr	r2, [r7, #4]
 8015ec4:	1ad3      	subs	r3, r2, r3
 8015ec6:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8015ec8:	69bb      	ldr	r3, [r7, #24]
 8015eca:	2b00      	cmp	r3, #0
 8015ecc:	d009      	beq.n	8015ee2 <osDelayUntil+0x6a>
 8015ece:	69bb      	ldr	r3, [r7, #24]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	db06      	blt.n	8015ee2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8015ed4:	f107 0308 	add.w	r3, r7, #8
 8015ed8:	69b9      	ldr	r1, [r7, #24]
 8015eda:	4618      	mov	r0, r3
 8015edc:	f001 ffca 	bl	8017e74 <vTaskDelayUntil>
 8015ee0:	e002      	b.n	8015ee8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8015ee2:	f06f 0303 	mvn.w	r3, #3
 8015ee6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8015ee8:	69fb      	ldr	r3, [r7, #28]
}
 8015eea:	4618      	mov	r0, r3
 8015eec:	3720      	adds	r7, #32
 8015eee:	46bd      	mov	sp, r7
 8015ef0:	bd80      	pop	{r7, pc}
 8015ef2:	bf00      	nop
 8015ef4:	20000374 	.word	0x20000374

08015ef8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b08a      	sub	sp, #40	; 0x28
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015f00:	2300      	movs	r3, #0
 8015f02:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f04:	f3ef 8305 	mrs	r3, IPSR
 8015f08:	613b      	str	r3, [r7, #16]
  return(result);
 8015f0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	f040 8085 	bne.w	801601c <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f12:	f3ef 8310 	mrs	r3, PRIMASK
 8015f16:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d105      	bne.n	8015f2a <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015f1e:	f3ef 8311 	mrs	r3, BASEPRI
 8015f22:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f24:	68bb      	ldr	r3, [r7, #8]
 8015f26:	2b00      	cmp	r3, #0
 8015f28:	d003      	beq.n	8015f32 <osMutexNew+0x3a>
 8015f2a:	4b3f      	ldr	r3, [pc, #252]	; (8016028 <osMutexNew+0x130>)
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	2b02      	cmp	r3, #2
 8015f30:	d074      	beq.n	801601c <osMutexNew+0x124>
    if (attr != NULL) {
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	d003      	beq.n	8015f40 <osMutexNew+0x48>
      type = attr->attr_bits;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	685b      	ldr	r3, [r3, #4]
 8015f3c:	623b      	str	r3, [r7, #32]
 8015f3e:	e001      	b.n	8015f44 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8015f40:	2300      	movs	r3, #0
 8015f42:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015f44:	6a3b      	ldr	r3, [r7, #32]
 8015f46:	f003 0301 	and.w	r3, r3, #1
 8015f4a:	2b00      	cmp	r3, #0
 8015f4c:	d002      	beq.n	8015f54 <osMutexNew+0x5c>
      rmtx = 1U;
 8015f4e:	2301      	movs	r3, #1
 8015f50:	61fb      	str	r3, [r7, #28]
 8015f52:	e001      	b.n	8015f58 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8015f54:	2300      	movs	r3, #0
 8015f56:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015f58:	6a3b      	ldr	r3, [r7, #32]
 8015f5a:	f003 0308 	and.w	r3, r3, #8
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d15c      	bne.n	801601c <osMutexNew+0x124>
      mem = -1;
 8015f62:	f04f 33ff 	mov.w	r3, #4294967295
 8015f66:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	2b00      	cmp	r3, #0
 8015f6c:	d015      	beq.n	8015f9a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015f6e:	687b      	ldr	r3, [r7, #4]
 8015f70:	689b      	ldr	r3, [r3, #8]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d006      	beq.n	8015f84 <osMutexNew+0x8c>
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	68db      	ldr	r3, [r3, #12]
 8015f7a:	2b4f      	cmp	r3, #79	; 0x4f
 8015f7c:	d902      	bls.n	8015f84 <osMutexNew+0x8c>
          mem = 1;
 8015f7e:	2301      	movs	r3, #1
 8015f80:	61bb      	str	r3, [r7, #24]
 8015f82:	e00c      	b.n	8015f9e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	689b      	ldr	r3, [r3, #8]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d108      	bne.n	8015f9e <osMutexNew+0xa6>
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	68db      	ldr	r3, [r3, #12]
 8015f90:	2b00      	cmp	r3, #0
 8015f92:	d104      	bne.n	8015f9e <osMutexNew+0xa6>
            mem = 0;
 8015f94:	2300      	movs	r3, #0
 8015f96:	61bb      	str	r3, [r7, #24]
 8015f98:	e001      	b.n	8015f9e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8015f9e:	69bb      	ldr	r3, [r7, #24]
 8015fa0:	2b01      	cmp	r3, #1
 8015fa2:	d112      	bne.n	8015fca <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8015fa4:	69fb      	ldr	r3, [r7, #28]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d007      	beq.n	8015fba <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	689b      	ldr	r3, [r3, #8]
 8015fae:	4619      	mov	r1, r3
 8015fb0:	2004      	movs	r0, #4
 8015fb2:	f000 fe4c 	bl	8016c4e <xQueueCreateMutexStatic>
 8015fb6:	6278      	str	r0, [r7, #36]	; 0x24
 8015fb8:	e016      	b.n	8015fe8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	689b      	ldr	r3, [r3, #8]
 8015fbe:	4619      	mov	r1, r3
 8015fc0:	2001      	movs	r0, #1
 8015fc2:	f000 fe44 	bl	8016c4e <xQueueCreateMutexStatic>
 8015fc6:	6278      	str	r0, [r7, #36]	; 0x24
 8015fc8:	e00e      	b.n	8015fe8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8015fca:	69bb      	ldr	r3, [r7, #24]
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d10b      	bne.n	8015fe8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8015fd0:	69fb      	ldr	r3, [r7, #28]
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d004      	beq.n	8015fe0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8015fd6:	2004      	movs	r0, #4
 8015fd8:	f000 fe21 	bl	8016c1e <xQueueCreateMutex>
 8015fdc:	6278      	str	r0, [r7, #36]	; 0x24
 8015fde:	e003      	b.n	8015fe8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8015fe0:	2001      	movs	r0, #1
 8015fe2:	f000 fe1c 	bl	8016c1e <xQueueCreateMutex>
 8015fe6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d00c      	beq.n	8016008 <osMutexNew+0x110>
        if (attr != NULL) {
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d003      	beq.n	8015ffc <osMutexNew+0x104>
          name = attr->name;
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	617b      	str	r3, [r7, #20]
 8015ffa:	e001      	b.n	8016000 <osMutexNew+0x108>
        } else {
          name = NULL;
 8015ffc:	2300      	movs	r3, #0
 8015ffe:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8016000:	6979      	ldr	r1, [r7, #20]
 8016002:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016004:	f001 fd0a 	bl	8017a1c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8016008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801600a:	2b00      	cmp	r3, #0
 801600c:	d006      	beq.n	801601c <osMutexNew+0x124>
 801600e:	69fb      	ldr	r3, [r7, #28]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d003      	beq.n	801601c <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8016014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016016:	f043 0301 	orr.w	r3, r3, #1
 801601a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 801601c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801601e:	4618      	mov	r0, r3
 8016020:	3728      	adds	r7, #40	; 0x28
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	20000374 	.word	0x20000374

0801602c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 801602c:	b580      	push	{r7, lr}
 801602e:	b088      	sub	sp, #32
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
 8016034:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	f023 0301 	bic.w	r3, r3, #1
 801603c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f003 0301 	and.w	r3, r3, #1
 8016044:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8016046:	2300      	movs	r3, #0
 8016048:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801604a:	f3ef 8305 	mrs	r3, IPSR
 801604e:	613b      	str	r3, [r7, #16]
  return(result);
 8016050:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8016052:	2b00      	cmp	r3, #0
 8016054:	d10f      	bne.n	8016076 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016056:	f3ef 8310 	mrs	r3, PRIMASK
 801605a:	60fb      	str	r3, [r7, #12]
  return(result);
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d105      	bne.n	801606e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016062:	f3ef 8311 	mrs	r3, BASEPRI
 8016066:	60bb      	str	r3, [r7, #8]
  return(result);
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d007      	beq.n	801607e <osMutexAcquire+0x52>
 801606e:	4b1d      	ldr	r3, [pc, #116]	; (80160e4 <osMutexAcquire+0xb8>)
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2b02      	cmp	r3, #2
 8016074:	d103      	bne.n	801607e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8016076:	f06f 0305 	mvn.w	r3, #5
 801607a:	61fb      	str	r3, [r7, #28]
 801607c:	e02c      	b.n	80160d8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 801607e:	69bb      	ldr	r3, [r7, #24]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d103      	bne.n	801608c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8016084:	f06f 0303 	mvn.w	r3, #3
 8016088:	61fb      	str	r3, [r7, #28]
 801608a:	e025      	b.n	80160d8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 801608c:	697b      	ldr	r3, [r7, #20]
 801608e:	2b00      	cmp	r3, #0
 8016090:	d011      	beq.n	80160b6 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8016092:	6839      	ldr	r1, [r7, #0]
 8016094:	69b8      	ldr	r0, [r7, #24]
 8016096:	f000 fe2a 	bl	8016cee <xQueueTakeMutexRecursive>
 801609a:	4603      	mov	r3, r0
 801609c:	2b01      	cmp	r3, #1
 801609e:	d01b      	beq.n	80160d8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80160a0:	683b      	ldr	r3, [r7, #0]
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	d003      	beq.n	80160ae <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80160a6:	f06f 0301 	mvn.w	r3, #1
 80160aa:	61fb      	str	r3, [r7, #28]
 80160ac:	e014      	b.n	80160d8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80160ae:	f06f 0302 	mvn.w	r3, #2
 80160b2:	61fb      	str	r3, [r7, #28]
 80160b4:	e010      	b.n	80160d8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80160b6:	6839      	ldr	r1, [r7, #0]
 80160b8:	69b8      	ldr	r0, [r7, #24]
 80160ba:	f001 f9cf 	bl	801745c <xQueueSemaphoreTake>
 80160be:	4603      	mov	r3, r0
 80160c0:	2b01      	cmp	r3, #1
 80160c2:	d009      	beq.n	80160d8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80160c4:	683b      	ldr	r3, [r7, #0]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d003      	beq.n	80160d2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80160ca:	f06f 0301 	mvn.w	r3, #1
 80160ce:	61fb      	str	r3, [r7, #28]
 80160d0:	e002      	b.n	80160d8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80160d2:	f06f 0302 	mvn.w	r3, #2
 80160d6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80160d8:	69fb      	ldr	r3, [r7, #28]
}
 80160da:	4618      	mov	r0, r3
 80160dc:	3720      	adds	r7, #32
 80160de:	46bd      	mov	sp, r7
 80160e0:	bd80      	pop	{r7, pc}
 80160e2:	bf00      	nop
 80160e4:	20000374 	.word	0x20000374

080160e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80160e8:	b580      	push	{r7, lr}
 80160ea:	b088      	sub	sp, #32
 80160ec:	af00      	add	r7, sp, #0
 80160ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	f023 0301 	bic.w	r3, r3, #1
 80160f6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	f003 0301 	and.w	r3, r3, #1
 80160fe:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8016100:	2300      	movs	r3, #0
 8016102:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016104:	f3ef 8305 	mrs	r3, IPSR
 8016108:	613b      	str	r3, [r7, #16]
  return(result);
 801610a:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 801610c:	2b00      	cmp	r3, #0
 801610e:	d10f      	bne.n	8016130 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016110:	f3ef 8310 	mrs	r3, PRIMASK
 8016114:	60fb      	str	r3, [r7, #12]
  return(result);
 8016116:	68fb      	ldr	r3, [r7, #12]
 8016118:	2b00      	cmp	r3, #0
 801611a:	d105      	bne.n	8016128 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801611c:	f3ef 8311 	mrs	r3, BASEPRI
 8016120:	60bb      	str	r3, [r7, #8]
  return(result);
 8016122:	68bb      	ldr	r3, [r7, #8]
 8016124:	2b00      	cmp	r3, #0
 8016126:	d007      	beq.n	8016138 <osMutexRelease+0x50>
 8016128:	4b16      	ldr	r3, [pc, #88]	; (8016184 <osMutexRelease+0x9c>)
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	2b02      	cmp	r3, #2
 801612e:	d103      	bne.n	8016138 <osMutexRelease+0x50>
    stat = osErrorISR;
 8016130:	f06f 0305 	mvn.w	r3, #5
 8016134:	61fb      	str	r3, [r7, #28]
 8016136:	e01f      	b.n	8016178 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8016138:	69bb      	ldr	r3, [r7, #24]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d103      	bne.n	8016146 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801613e:	f06f 0303 	mvn.w	r3, #3
 8016142:	61fb      	str	r3, [r7, #28]
 8016144:	e018      	b.n	8016178 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8016146:	697b      	ldr	r3, [r7, #20]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d009      	beq.n	8016160 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801614c:	69b8      	ldr	r0, [r7, #24]
 801614e:	f000 fd99 	bl	8016c84 <xQueueGiveMutexRecursive>
 8016152:	4603      	mov	r3, r0
 8016154:	2b01      	cmp	r3, #1
 8016156:	d00f      	beq.n	8016178 <osMutexRelease+0x90>
        stat = osErrorResource;
 8016158:	f06f 0302 	mvn.w	r3, #2
 801615c:	61fb      	str	r3, [r7, #28]
 801615e:	e00b      	b.n	8016178 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8016160:	2300      	movs	r3, #0
 8016162:	2200      	movs	r2, #0
 8016164:	2100      	movs	r1, #0
 8016166:	69b8      	ldr	r0, [r7, #24]
 8016168:	f000 fe66 	bl	8016e38 <xQueueGenericSend>
 801616c:	4603      	mov	r3, r0
 801616e:	2b01      	cmp	r3, #1
 8016170:	d002      	beq.n	8016178 <osMutexRelease+0x90>
        stat = osErrorResource;
 8016172:	f06f 0302 	mvn.w	r3, #2
 8016176:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8016178:	69fb      	ldr	r3, [r7, #28]
}
 801617a:	4618      	mov	r0, r3
 801617c:	3720      	adds	r7, #32
 801617e:	46bd      	mov	sp, r7
 8016180:	bd80      	pop	{r7, pc}
 8016182:	bf00      	nop
 8016184:	20000374 	.word	0x20000374

08016188 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8016188:	b580      	push	{r7, lr}
 801618a:	b08c      	sub	sp, #48	; 0x30
 801618c:	af02      	add	r7, sp, #8
 801618e:	60f8      	str	r0, [r7, #12]
 8016190:	60b9      	str	r1, [r7, #8]
 8016192:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8016194:	2300      	movs	r3, #0
 8016196:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016198:	f3ef 8305 	mrs	r3, IPSR
 801619c:	61bb      	str	r3, [r7, #24]
  return(result);
 801619e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	f040 8087 	bne.w	80162b4 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161a6:	f3ef 8310 	mrs	r3, PRIMASK
 80161aa:	617b      	str	r3, [r7, #20]
  return(result);
 80161ac:	697b      	ldr	r3, [r7, #20]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d105      	bne.n	80161be <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80161b2:	f3ef 8311 	mrs	r3, BASEPRI
 80161b6:	613b      	str	r3, [r7, #16]
  return(result);
 80161b8:	693b      	ldr	r3, [r7, #16]
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d003      	beq.n	80161c6 <osSemaphoreNew+0x3e>
 80161be:	4b40      	ldr	r3, [pc, #256]	; (80162c0 <osSemaphoreNew+0x138>)
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	2b02      	cmp	r3, #2
 80161c4:	d076      	beq.n	80162b4 <osSemaphoreNew+0x12c>
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d073      	beq.n	80162b4 <osSemaphoreNew+0x12c>
 80161cc:	68ba      	ldr	r2, [r7, #8]
 80161ce:	68fb      	ldr	r3, [r7, #12]
 80161d0:	429a      	cmp	r2, r3
 80161d2:	d86f      	bhi.n	80162b4 <osSemaphoreNew+0x12c>
    mem = -1;
 80161d4:	f04f 33ff 	mov.w	r3, #4294967295
 80161d8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d015      	beq.n	801620c <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80161e0:	687b      	ldr	r3, [r7, #4]
 80161e2:	689b      	ldr	r3, [r3, #8]
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d006      	beq.n	80161f6 <osSemaphoreNew+0x6e>
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	68db      	ldr	r3, [r3, #12]
 80161ec:	2b4f      	cmp	r3, #79	; 0x4f
 80161ee:	d902      	bls.n	80161f6 <osSemaphoreNew+0x6e>
        mem = 1;
 80161f0:	2301      	movs	r3, #1
 80161f2:	623b      	str	r3, [r7, #32]
 80161f4:	e00c      	b.n	8016210 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	689b      	ldr	r3, [r3, #8]
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d108      	bne.n	8016210 <osSemaphoreNew+0x88>
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	68db      	ldr	r3, [r3, #12]
 8016202:	2b00      	cmp	r3, #0
 8016204:	d104      	bne.n	8016210 <osSemaphoreNew+0x88>
          mem = 0;
 8016206:	2300      	movs	r3, #0
 8016208:	623b      	str	r3, [r7, #32]
 801620a:	e001      	b.n	8016210 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 801620c:	2300      	movs	r3, #0
 801620e:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8016210:	6a3b      	ldr	r3, [r7, #32]
 8016212:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016216:	d04d      	beq.n	80162b4 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	2b01      	cmp	r3, #1
 801621c:	d129      	bne.n	8016272 <osSemaphoreNew+0xea>
        if (mem == 1) {
 801621e:	6a3b      	ldr	r3, [r7, #32]
 8016220:	2b01      	cmp	r3, #1
 8016222:	d10b      	bne.n	801623c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8016224:	687b      	ldr	r3, [r7, #4]
 8016226:	689a      	ldr	r2, [r3, #8]
 8016228:	2303      	movs	r3, #3
 801622a:	9300      	str	r3, [sp, #0]
 801622c:	4613      	mov	r3, r2
 801622e:	2200      	movs	r2, #0
 8016230:	2100      	movs	r1, #0
 8016232:	2001      	movs	r0, #1
 8016234:	f000 fbf8 	bl	8016a28 <xQueueGenericCreateStatic>
 8016238:	6278      	str	r0, [r7, #36]	; 0x24
 801623a:	e005      	b.n	8016248 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801623c:	2203      	movs	r2, #3
 801623e:	2100      	movs	r1, #0
 8016240:	2001      	movs	r0, #1
 8016242:	f000 fc6e 	bl	8016b22 <xQueueGenericCreate>
 8016246:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8016248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624a:	2b00      	cmp	r3, #0
 801624c:	d022      	beq.n	8016294 <osSemaphoreNew+0x10c>
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	2b00      	cmp	r3, #0
 8016252:	d01f      	beq.n	8016294 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016254:	2300      	movs	r3, #0
 8016256:	2200      	movs	r2, #0
 8016258:	2100      	movs	r1, #0
 801625a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801625c:	f000 fdec 	bl	8016e38 <xQueueGenericSend>
 8016260:	4603      	mov	r3, r0
 8016262:	2b01      	cmp	r3, #1
 8016264:	d016      	beq.n	8016294 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8016266:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016268:	f001 fa8b 	bl	8017782 <vQueueDelete>
            hSemaphore = NULL;
 801626c:	2300      	movs	r3, #0
 801626e:	627b      	str	r3, [r7, #36]	; 0x24
 8016270:	e010      	b.n	8016294 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8016272:	6a3b      	ldr	r3, [r7, #32]
 8016274:	2b01      	cmp	r3, #1
 8016276:	d108      	bne.n	801628a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	689b      	ldr	r3, [r3, #8]
 801627c:	461a      	mov	r2, r3
 801627e:	68b9      	ldr	r1, [r7, #8]
 8016280:	68f8      	ldr	r0, [r7, #12]
 8016282:	f000 fd6b 	bl	8016d5c <xQueueCreateCountingSemaphoreStatic>
 8016286:	6278      	str	r0, [r7, #36]	; 0x24
 8016288:	e004      	b.n	8016294 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801628a:	68b9      	ldr	r1, [r7, #8]
 801628c:	68f8      	ldr	r0, [r7, #12]
 801628e:	f000 fd9e 	bl	8016dce <xQueueCreateCountingSemaphore>
 8016292:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8016294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016296:	2b00      	cmp	r3, #0
 8016298:	d00c      	beq.n	80162b4 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	2b00      	cmp	r3, #0
 801629e:	d003      	beq.n	80162a8 <osSemaphoreNew+0x120>
          name = attr->name;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	681b      	ldr	r3, [r3, #0]
 80162a4:	61fb      	str	r3, [r7, #28]
 80162a6:	e001      	b.n	80162ac <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 80162a8:	2300      	movs	r3, #0
 80162aa:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80162ac:	69f9      	ldr	r1, [r7, #28]
 80162ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80162b0:	f001 fbb4 	bl	8017a1c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80162b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80162b6:	4618      	mov	r0, r3
 80162b8:	3728      	adds	r7, #40	; 0x28
 80162ba:	46bd      	mov	sp, r7
 80162bc:	bd80      	pop	{r7, pc}
 80162be:	bf00      	nop
 80162c0:	20000374 	.word	0x20000374

080162c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80162c4:	b580      	push	{r7, lr}
 80162c6:	b088      	sub	sp, #32
 80162c8:	af00      	add	r7, sp, #0
 80162ca:	6078      	str	r0, [r7, #4]
 80162cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80162d2:	2300      	movs	r3, #0
 80162d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80162d6:	69bb      	ldr	r3, [r7, #24]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d103      	bne.n	80162e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80162dc:	f06f 0303 	mvn.w	r3, #3
 80162e0:	61fb      	str	r3, [r7, #28]
 80162e2:	e04b      	b.n	801637c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80162e4:	f3ef 8305 	mrs	r3, IPSR
 80162e8:	617b      	str	r3, [r7, #20]
  return(result);
 80162ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d10f      	bne.n	8016310 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80162f0:	f3ef 8310 	mrs	r3, PRIMASK
 80162f4:	613b      	str	r3, [r7, #16]
  return(result);
 80162f6:	693b      	ldr	r3, [r7, #16]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d105      	bne.n	8016308 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80162fc:	f3ef 8311 	mrs	r3, BASEPRI
 8016300:	60fb      	str	r3, [r7, #12]
  return(result);
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	2b00      	cmp	r3, #0
 8016306:	d026      	beq.n	8016356 <osSemaphoreAcquire+0x92>
 8016308:	4b1f      	ldr	r3, [pc, #124]	; (8016388 <osSemaphoreAcquire+0xc4>)
 801630a:	681b      	ldr	r3, [r3, #0]
 801630c:	2b02      	cmp	r3, #2
 801630e:	d122      	bne.n	8016356 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8016310:	683b      	ldr	r3, [r7, #0]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d003      	beq.n	801631e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8016316:	f06f 0303 	mvn.w	r3, #3
 801631a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801631c:	e02d      	b.n	801637a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 801631e:	2300      	movs	r3, #0
 8016320:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8016322:	f107 0308 	add.w	r3, r7, #8
 8016326:	461a      	mov	r2, r3
 8016328:	2100      	movs	r1, #0
 801632a:	69b8      	ldr	r0, [r7, #24]
 801632c:	f001 f9a6 	bl	801767c <xQueueReceiveFromISR>
 8016330:	4603      	mov	r3, r0
 8016332:	2b01      	cmp	r3, #1
 8016334:	d003      	beq.n	801633e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8016336:	f06f 0302 	mvn.w	r3, #2
 801633a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801633c:	e01d      	b.n	801637a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801633e:	68bb      	ldr	r3, [r7, #8]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d01a      	beq.n	801637a <osSemaphoreAcquire+0xb6>
 8016344:	4b11      	ldr	r3, [pc, #68]	; (801638c <osSemaphoreAcquire+0xc8>)
 8016346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801634a:	601a      	str	r2, [r3, #0]
 801634c:	f3bf 8f4f 	dsb	sy
 8016350:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8016354:	e011      	b.n	801637a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8016356:	6839      	ldr	r1, [r7, #0]
 8016358:	69b8      	ldr	r0, [r7, #24]
 801635a:	f001 f87f 	bl	801745c <xQueueSemaphoreTake>
 801635e:	4603      	mov	r3, r0
 8016360:	2b01      	cmp	r3, #1
 8016362:	d00b      	beq.n	801637c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8016364:	683b      	ldr	r3, [r7, #0]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d003      	beq.n	8016372 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801636a:	f06f 0301 	mvn.w	r3, #1
 801636e:	61fb      	str	r3, [r7, #28]
 8016370:	e004      	b.n	801637c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8016372:	f06f 0302 	mvn.w	r3, #2
 8016376:	61fb      	str	r3, [r7, #28]
 8016378:	e000      	b.n	801637c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801637a:	bf00      	nop
      }
    }
  }

  return (stat);
 801637c:	69fb      	ldr	r3, [r7, #28]
}
 801637e:	4618      	mov	r0, r3
 8016380:	3720      	adds	r7, #32
 8016382:	46bd      	mov	sp, r7
 8016384:	bd80      	pop	{r7, pc}
 8016386:	bf00      	nop
 8016388:	20000374 	.word	0x20000374
 801638c:	e000ed04 	.word	0xe000ed04

08016390 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8016390:	b580      	push	{r7, lr}
 8016392:	b088      	sub	sp, #32
 8016394:	af00      	add	r7, sp, #0
 8016396:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801639c:	2300      	movs	r3, #0
 801639e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80163a0:	69bb      	ldr	r3, [r7, #24]
 80163a2:	2b00      	cmp	r3, #0
 80163a4:	d103      	bne.n	80163ae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80163a6:	f06f 0303 	mvn.w	r3, #3
 80163aa:	61fb      	str	r3, [r7, #28]
 80163ac:	e03e      	b.n	801642c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80163ae:	f3ef 8305 	mrs	r3, IPSR
 80163b2:	617b      	str	r3, [r7, #20]
  return(result);
 80163b4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80163b6:	2b00      	cmp	r3, #0
 80163b8:	d10f      	bne.n	80163da <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80163ba:	f3ef 8310 	mrs	r3, PRIMASK
 80163be:	613b      	str	r3, [r7, #16]
  return(result);
 80163c0:	693b      	ldr	r3, [r7, #16]
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d105      	bne.n	80163d2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80163c6:	f3ef 8311 	mrs	r3, BASEPRI
 80163ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	d01e      	beq.n	8016410 <osSemaphoreRelease+0x80>
 80163d2:	4b19      	ldr	r3, [pc, #100]	; (8016438 <osSemaphoreRelease+0xa8>)
 80163d4:	681b      	ldr	r3, [r3, #0]
 80163d6:	2b02      	cmp	r3, #2
 80163d8:	d11a      	bne.n	8016410 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80163da:	2300      	movs	r3, #0
 80163dc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80163de:	f107 0308 	add.w	r3, r7, #8
 80163e2:	4619      	mov	r1, r3
 80163e4:	69b8      	ldr	r0, [r7, #24]
 80163e6:	f000 fec5 	bl	8017174 <xQueueGiveFromISR>
 80163ea:	4603      	mov	r3, r0
 80163ec:	2b01      	cmp	r3, #1
 80163ee:	d003      	beq.n	80163f8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80163f0:	f06f 0302 	mvn.w	r3, #2
 80163f4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80163f6:	e018      	b.n	801642a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80163f8:	68bb      	ldr	r3, [r7, #8]
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d015      	beq.n	801642a <osSemaphoreRelease+0x9a>
 80163fe:	4b0f      	ldr	r3, [pc, #60]	; (801643c <osSemaphoreRelease+0xac>)
 8016400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016404:	601a      	str	r2, [r3, #0]
 8016406:	f3bf 8f4f 	dsb	sy
 801640a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801640e:	e00c      	b.n	801642a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016410:	2300      	movs	r3, #0
 8016412:	2200      	movs	r2, #0
 8016414:	2100      	movs	r1, #0
 8016416:	69b8      	ldr	r0, [r7, #24]
 8016418:	f000 fd0e 	bl	8016e38 <xQueueGenericSend>
 801641c:	4603      	mov	r3, r0
 801641e:	2b01      	cmp	r3, #1
 8016420:	d004      	beq.n	801642c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8016422:	f06f 0302 	mvn.w	r3, #2
 8016426:	61fb      	str	r3, [r7, #28]
 8016428:	e000      	b.n	801642c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801642a:	bf00      	nop
    }
  }

  return (stat);
 801642c:	69fb      	ldr	r3, [r7, #28]
}
 801642e:	4618      	mov	r0, r3
 8016430:	3720      	adds	r7, #32
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	20000374 	.word	0x20000374
 801643c:	e000ed04 	.word	0xe000ed04

08016440 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016440:	b580      	push	{r7, lr}
 8016442:	b088      	sub	sp, #32
 8016444:	af00      	add	r7, sp, #0
 8016446:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016448:	687b      	ldr	r3, [r7, #4]
 801644a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801644c:	f3ef 8305 	mrs	r3, IPSR
 8016450:	617b      	str	r3, [r7, #20]
  return(result);
 8016452:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016454:	2b00      	cmp	r3, #0
 8016456:	d10f      	bne.n	8016478 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016458:	f3ef 8310 	mrs	r3, PRIMASK
 801645c:	613b      	str	r3, [r7, #16]
  return(result);
 801645e:	693b      	ldr	r3, [r7, #16]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d105      	bne.n	8016470 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016464:	f3ef 8311 	mrs	r3, BASEPRI
 8016468:	60fb      	str	r3, [r7, #12]
  return(result);
 801646a:	68fb      	ldr	r3, [r7, #12]
 801646c:	2b00      	cmp	r3, #0
 801646e:	d007      	beq.n	8016480 <osSemaphoreDelete+0x40>
 8016470:	4b0d      	ldr	r3, [pc, #52]	; (80164a8 <osSemaphoreDelete+0x68>)
 8016472:	681b      	ldr	r3, [r3, #0]
 8016474:	2b02      	cmp	r3, #2
 8016476:	d103      	bne.n	8016480 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8016478:	f06f 0305 	mvn.w	r3, #5
 801647c:	61fb      	str	r3, [r7, #28]
 801647e:	e00e      	b.n	801649e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8016480:	69bb      	ldr	r3, [r7, #24]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d103      	bne.n	801648e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8016486:	f06f 0303 	mvn.w	r3, #3
 801648a:	61fb      	str	r3, [r7, #28]
 801648c:	e007      	b.n	801649e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801648e:	69b8      	ldr	r0, [r7, #24]
 8016490:	f001 faec 	bl	8017a6c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8016494:	2300      	movs	r3, #0
 8016496:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8016498:	69b8      	ldr	r0, [r7, #24]
 801649a:	f001 f972 	bl	8017782 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801649e:	69fb      	ldr	r3, [r7, #28]
}
 80164a0:	4618      	mov	r0, r3
 80164a2:	3720      	adds	r7, #32
 80164a4:	46bd      	mov	sp, r7
 80164a6:	bd80      	pop	{r7, pc}
 80164a8:	20000374 	.word	0x20000374

080164ac <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80164ac:	b580      	push	{r7, lr}
 80164ae:	b08c      	sub	sp, #48	; 0x30
 80164b0:	af02      	add	r7, sp, #8
 80164b2:	60f8      	str	r0, [r7, #12]
 80164b4:	60b9      	str	r1, [r7, #8]
 80164b6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80164b8:	2300      	movs	r3, #0
 80164ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80164bc:	f3ef 8305 	mrs	r3, IPSR
 80164c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80164c2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d170      	bne.n	80165aa <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164c8:	f3ef 8310 	mrs	r3, PRIMASK
 80164cc:	617b      	str	r3, [r7, #20]
  return(result);
 80164ce:	697b      	ldr	r3, [r7, #20]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d105      	bne.n	80164e0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80164d4:	f3ef 8311 	mrs	r3, BASEPRI
 80164d8:	613b      	str	r3, [r7, #16]
  return(result);
 80164da:	693b      	ldr	r3, [r7, #16]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d003      	beq.n	80164e8 <osMessageQueueNew+0x3c>
 80164e0:	4b34      	ldr	r3, [pc, #208]	; (80165b4 <osMessageQueueNew+0x108>)
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	2b02      	cmp	r3, #2
 80164e6:	d060      	beq.n	80165aa <osMessageQueueNew+0xfe>
 80164e8:	68fb      	ldr	r3, [r7, #12]
 80164ea:	2b00      	cmp	r3, #0
 80164ec:	d05d      	beq.n	80165aa <osMessageQueueNew+0xfe>
 80164ee:	68bb      	ldr	r3, [r7, #8]
 80164f0:	2b00      	cmp	r3, #0
 80164f2:	d05a      	beq.n	80165aa <osMessageQueueNew+0xfe>
    mem = -1;
 80164f4:	f04f 33ff 	mov.w	r3, #4294967295
 80164f8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80164fa:	687b      	ldr	r3, [r7, #4]
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d029      	beq.n	8016554 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	689b      	ldr	r3, [r3, #8]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d012      	beq.n	801652e <osMessageQueueNew+0x82>
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	68db      	ldr	r3, [r3, #12]
 801650c:	2b4f      	cmp	r3, #79	; 0x4f
 801650e:	d90e      	bls.n	801652e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016510:	687b      	ldr	r3, [r7, #4]
 8016512:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8016514:	2b00      	cmp	r3, #0
 8016516:	d00a      	beq.n	801652e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	695a      	ldr	r2, [r3, #20]
 801651c:	68fb      	ldr	r3, [r7, #12]
 801651e:	68b9      	ldr	r1, [r7, #8]
 8016520:	fb01 f303 	mul.w	r3, r1, r3
 8016524:	429a      	cmp	r2, r3
 8016526:	d302      	bcc.n	801652e <osMessageQueueNew+0x82>
        mem = 1;
 8016528:	2301      	movs	r3, #1
 801652a:	623b      	str	r3, [r7, #32]
 801652c:	e014      	b.n	8016558 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801652e:	687b      	ldr	r3, [r7, #4]
 8016530:	689b      	ldr	r3, [r3, #8]
 8016532:	2b00      	cmp	r3, #0
 8016534:	d110      	bne.n	8016558 <osMessageQueueNew+0xac>
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	68db      	ldr	r3, [r3, #12]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d10c      	bne.n	8016558 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016542:	2b00      	cmp	r3, #0
 8016544:	d108      	bne.n	8016558 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016546:	687b      	ldr	r3, [r7, #4]
 8016548:	695b      	ldr	r3, [r3, #20]
 801654a:	2b00      	cmp	r3, #0
 801654c:	d104      	bne.n	8016558 <osMessageQueueNew+0xac>
          mem = 0;
 801654e:	2300      	movs	r3, #0
 8016550:	623b      	str	r3, [r7, #32]
 8016552:	e001      	b.n	8016558 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8016554:	2300      	movs	r3, #0
 8016556:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8016558:	6a3b      	ldr	r3, [r7, #32]
 801655a:	2b01      	cmp	r3, #1
 801655c:	d10c      	bne.n	8016578 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	691a      	ldr	r2, [r3, #16]
 8016562:	687b      	ldr	r3, [r7, #4]
 8016564:	6899      	ldr	r1, [r3, #8]
 8016566:	2300      	movs	r3, #0
 8016568:	9300      	str	r3, [sp, #0]
 801656a:	460b      	mov	r3, r1
 801656c:	68b9      	ldr	r1, [r7, #8]
 801656e:	68f8      	ldr	r0, [r7, #12]
 8016570:	f000 fa5a 	bl	8016a28 <xQueueGenericCreateStatic>
 8016574:	6278      	str	r0, [r7, #36]	; 0x24
 8016576:	e008      	b.n	801658a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8016578:	6a3b      	ldr	r3, [r7, #32]
 801657a:	2b00      	cmp	r3, #0
 801657c:	d105      	bne.n	801658a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801657e:	2200      	movs	r2, #0
 8016580:	68b9      	ldr	r1, [r7, #8]
 8016582:	68f8      	ldr	r0, [r7, #12]
 8016584:	f000 facd 	bl	8016b22 <xQueueGenericCreate>
 8016588:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801658a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801658c:	2b00      	cmp	r3, #0
 801658e:	d00c      	beq.n	80165aa <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8016590:	687b      	ldr	r3, [r7, #4]
 8016592:	2b00      	cmp	r3, #0
 8016594:	d003      	beq.n	801659e <osMessageQueueNew+0xf2>
        name = attr->name;
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	61fb      	str	r3, [r7, #28]
 801659c:	e001      	b.n	80165a2 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801659e:	2300      	movs	r3, #0
 80165a0:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80165a2:	69f9      	ldr	r1, [r7, #28]
 80165a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165a6:	f001 fa39 	bl	8017a1c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80165aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80165ac:	4618      	mov	r0, r3
 80165ae:	3728      	adds	r7, #40	; 0x28
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd80      	pop	{r7, pc}
 80165b4:	20000374 	.word	0x20000374

080165b8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b08a      	sub	sp, #40	; 0x28
 80165bc:	af00      	add	r7, sp, #0
 80165be:	60f8      	str	r0, [r7, #12]
 80165c0:	60b9      	str	r1, [r7, #8]
 80165c2:	603b      	str	r3, [r7, #0]
 80165c4:	4613      	mov	r3, r2
 80165c6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80165c8:	68fb      	ldr	r3, [r7, #12]
 80165ca:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80165cc:	2300      	movs	r3, #0
 80165ce:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80165d0:	f3ef 8305 	mrs	r3, IPSR
 80165d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80165d6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d10f      	bne.n	80165fc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80165dc:	f3ef 8310 	mrs	r3, PRIMASK
 80165e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80165e2:	69bb      	ldr	r3, [r7, #24]
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d105      	bne.n	80165f4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80165e8:	f3ef 8311 	mrs	r3, BASEPRI
 80165ec:	617b      	str	r3, [r7, #20]
  return(result);
 80165ee:	697b      	ldr	r3, [r7, #20]
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d02c      	beq.n	801664e <osMessageQueuePut+0x96>
 80165f4:	4b28      	ldr	r3, [pc, #160]	; (8016698 <osMessageQueuePut+0xe0>)
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2b02      	cmp	r3, #2
 80165fa:	d128      	bne.n	801664e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80165fc:	6a3b      	ldr	r3, [r7, #32]
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d005      	beq.n	801660e <osMessageQueuePut+0x56>
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	2b00      	cmp	r3, #0
 8016606:	d002      	beq.n	801660e <osMessageQueuePut+0x56>
 8016608:	683b      	ldr	r3, [r7, #0]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d003      	beq.n	8016616 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 801660e:	f06f 0303 	mvn.w	r3, #3
 8016612:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016614:	e039      	b.n	801668a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8016616:	2300      	movs	r3, #0
 8016618:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801661a:	f107 0210 	add.w	r2, r7, #16
 801661e:	2300      	movs	r3, #0
 8016620:	68b9      	ldr	r1, [r7, #8]
 8016622:	6a38      	ldr	r0, [r7, #32]
 8016624:	f000 fd0a 	bl	801703c <xQueueGenericSendFromISR>
 8016628:	4603      	mov	r3, r0
 801662a:	2b01      	cmp	r3, #1
 801662c:	d003      	beq.n	8016636 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 801662e:	f06f 0302 	mvn.w	r3, #2
 8016632:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016634:	e029      	b.n	801668a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8016636:	693b      	ldr	r3, [r7, #16]
 8016638:	2b00      	cmp	r3, #0
 801663a:	d026      	beq.n	801668a <osMessageQueuePut+0xd2>
 801663c:	4b17      	ldr	r3, [pc, #92]	; (801669c <osMessageQueuePut+0xe4>)
 801663e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016642:	601a      	str	r2, [r3, #0]
 8016644:	f3bf 8f4f 	dsb	sy
 8016648:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801664c:	e01d      	b.n	801668a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801664e:	6a3b      	ldr	r3, [r7, #32]
 8016650:	2b00      	cmp	r3, #0
 8016652:	d002      	beq.n	801665a <osMessageQueuePut+0xa2>
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d103      	bne.n	8016662 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801665a:	f06f 0303 	mvn.w	r3, #3
 801665e:	627b      	str	r3, [r7, #36]	; 0x24
 8016660:	e014      	b.n	801668c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016662:	2300      	movs	r3, #0
 8016664:	683a      	ldr	r2, [r7, #0]
 8016666:	68b9      	ldr	r1, [r7, #8]
 8016668:	6a38      	ldr	r0, [r7, #32]
 801666a:	f000 fbe5 	bl	8016e38 <xQueueGenericSend>
 801666e:	4603      	mov	r3, r0
 8016670:	2b01      	cmp	r3, #1
 8016672:	d00b      	beq.n	801668c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8016674:	683b      	ldr	r3, [r7, #0]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d003      	beq.n	8016682 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801667a:	f06f 0301 	mvn.w	r3, #1
 801667e:	627b      	str	r3, [r7, #36]	; 0x24
 8016680:	e004      	b.n	801668c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8016682:	f06f 0302 	mvn.w	r3, #2
 8016686:	627b      	str	r3, [r7, #36]	; 0x24
 8016688:	e000      	b.n	801668c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801668a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801668e:	4618      	mov	r0, r3
 8016690:	3728      	adds	r7, #40	; 0x28
 8016692:	46bd      	mov	sp, r7
 8016694:	bd80      	pop	{r7, pc}
 8016696:	bf00      	nop
 8016698:	20000374 	.word	0x20000374
 801669c:	e000ed04 	.word	0xe000ed04

080166a0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80166a0:	b580      	push	{r7, lr}
 80166a2:	b08a      	sub	sp, #40	; 0x28
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	60f8      	str	r0, [r7, #12]
 80166a8:	60b9      	str	r1, [r7, #8]
 80166aa:	607a      	str	r2, [r7, #4]
 80166ac:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80166b2:	2300      	movs	r3, #0
 80166b4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80166b6:	f3ef 8305 	mrs	r3, IPSR
 80166ba:	61fb      	str	r3, [r7, #28]
  return(result);
 80166bc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80166be:	2b00      	cmp	r3, #0
 80166c0:	d10f      	bne.n	80166e2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80166c2:	f3ef 8310 	mrs	r3, PRIMASK
 80166c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80166c8:	69bb      	ldr	r3, [r7, #24]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d105      	bne.n	80166da <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80166ce:	f3ef 8311 	mrs	r3, BASEPRI
 80166d2:	617b      	str	r3, [r7, #20]
  return(result);
 80166d4:	697b      	ldr	r3, [r7, #20]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d02c      	beq.n	8016734 <osMessageQueueGet+0x94>
 80166da:	4b28      	ldr	r3, [pc, #160]	; (801677c <osMessageQueueGet+0xdc>)
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	2b02      	cmp	r3, #2
 80166e0:	d128      	bne.n	8016734 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80166e2:	6a3b      	ldr	r3, [r7, #32]
 80166e4:	2b00      	cmp	r3, #0
 80166e6:	d005      	beq.n	80166f4 <osMessageQueueGet+0x54>
 80166e8:	68bb      	ldr	r3, [r7, #8]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d002      	beq.n	80166f4 <osMessageQueueGet+0x54>
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d003      	beq.n	80166fc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80166f4:	f06f 0303 	mvn.w	r3, #3
 80166f8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80166fa:	e038      	b.n	801676e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80166fc:	2300      	movs	r3, #0
 80166fe:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8016700:	f107 0310 	add.w	r3, r7, #16
 8016704:	461a      	mov	r2, r3
 8016706:	68b9      	ldr	r1, [r7, #8]
 8016708:	6a38      	ldr	r0, [r7, #32]
 801670a:	f000 ffb7 	bl	801767c <xQueueReceiveFromISR>
 801670e:	4603      	mov	r3, r0
 8016710:	2b01      	cmp	r3, #1
 8016712:	d003      	beq.n	801671c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8016714:	f06f 0302 	mvn.w	r3, #2
 8016718:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801671a:	e028      	b.n	801676e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 801671c:	693b      	ldr	r3, [r7, #16]
 801671e:	2b00      	cmp	r3, #0
 8016720:	d025      	beq.n	801676e <osMessageQueueGet+0xce>
 8016722:	4b17      	ldr	r3, [pc, #92]	; (8016780 <osMessageQueueGet+0xe0>)
 8016724:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016728:	601a      	str	r2, [r3, #0]
 801672a:	f3bf 8f4f 	dsb	sy
 801672e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016732:	e01c      	b.n	801676e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016734:	6a3b      	ldr	r3, [r7, #32]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d002      	beq.n	8016740 <osMessageQueueGet+0xa0>
 801673a:	68bb      	ldr	r3, [r7, #8]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d103      	bne.n	8016748 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8016740:	f06f 0303 	mvn.w	r3, #3
 8016744:	627b      	str	r3, [r7, #36]	; 0x24
 8016746:	e013      	b.n	8016770 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016748:	683a      	ldr	r2, [r7, #0]
 801674a:	68b9      	ldr	r1, [r7, #8]
 801674c:	6a38      	ldr	r0, [r7, #32]
 801674e:	f000 fda3 	bl	8017298 <xQueueReceive>
 8016752:	4603      	mov	r3, r0
 8016754:	2b01      	cmp	r3, #1
 8016756:	d00b      	beq.n	8016770 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8016758:	683b      	ldr	r3, [r7, #0]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d003      	beq.n	8016766 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801675e:	f06f 0301 	mvn.w	r3, #1
 8016762:	627b      	str	r3, [r7, #36]	; 0x24
 8016764:	e004      	b.n	8016770 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8016766:	f06f 0302 	mvn.w	r3, #2
 801676a:	627b      	str	r3, [r7, #36]	; 0x24
 801676c:	e000      	b.n	8016770 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801676e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8016770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016772:	4618      	mov	r0, r3
 8016774:	3728      	adds	r7, #40	; 0x28
 8016776:	46bd      	mov	sp, r7
 8016778:	bd80      	pop	{r7, pc}
 801677a:	bf00      	nop
 801677c:	20000374 	.word	0x20000374
 8016780:	e000ed04 	.word	0xe000ed04

08016784 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016784:	b480      	push	{r7}
 8016786:	b085      	sub	sp, #20
 8016788:	af00      	add	r7, sp, #0
 801678a:	60f8      	str	r0, [r7, #12]
 801678c:	60b9      	str	r1, [r7, #8]
 801678e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	4a07      	ldr	r2, [pc, #28]	; (80167b0 <vApplicationGetIdleTaskMemory+0x2c>)
 8016794:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016796:	68bb      	ldr	r3, [r7, #8]
 8016798:	4a06      	ldr	r2, [pc, #24]	; (80167b4 <vApplicationGetIdleTaskMemory+0x30>)
 801679a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2280      	movs	r2, #128	; 0x80
 80167a0:	601a      	str	r2, [r3, #0]
}
 80167a2:	bf00      	nop
 80167a4:	3714      	adds	r7, #20
 80167a6:	46bd      	mov	sp, r7
 80167a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ac:	4770      	bx	lr
 80167ae:	bf00      	nop
 80167b0:	20000378 	.word	0x20000378
 80167b4:	200003d4 	.word	0x200003d4

080167b8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80167b8:	b480      	push	{r7}
 80167ba:	b085      	sub	sp, #20
 80167bc:	af00      	add	r7, sp, #0
 80167be:	60f8      	str	r0, [r7, #12]
 80167c0:	60b9      	str	r1, [r7, #8]
 80167c2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	4a07      	ldr	r2, [pc, #28]	; (80167e4 <vApplicationGetTimerTaskMemory+0x2c>)
 80167c8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80167ca:	68bb      	ldr	r3, [r7, #8]
 80167cc:	4a06      	ldr	r2, [pc, #24]	; (80167e8 <vApplicationGetTimerTaskMemory+0x30>)
 80167ce:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80167d6:	601a      	str	r2, [r3, #0]
}
 80167d8:	bf00      	nop
 80167da:	3714      	adds	r7, #20
 80167dc:	46bd      	mov	sp, r7
 80167de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167e2:	4770      	bx	lr
 80167e4:	200005d4 	.word	0x200005d4
 80167e8:	20000630 	.word	0x20000630

080167ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80167ec:	b480      	push	{r7}
 80167ee:	b083      	sub	sp, #12
 80167f0:	af00      	add	r7, sp, #0
 80167f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80167f4:	687b      	ldr	r3, [r7, #4]
 80167f6:	f103 0208 	add.w	r2, r3, #8
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80167fe:	687b      	ldr	r3, [r7, #4]
 8016800:	f04f 32ff 	mov.w	r2, #4294967295
 8016804:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	f103 0208 	add.w	r2, r3, #8
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	f103 0208 	add.w	r2, r3, #8
 8016816:	687b      	ldr	r3, [r7, #4]
 8016818:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801681a:	687b      	ldr	r3, [r7, #4]
 801681c:	2200      	movs	r2, #0
 801681e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8016820:	bf00      	nop
 8016822:	370c      	adds	r7, #12
 8016824:	46bd      	mov	sp, r7
 8016826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801682a:	4770      	bx	lr

0801682c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801682c:	b480      	push	{r7}
 801682e:	b083      	sub	sp, #12
 8016830:	af00      	add	r7, sp, #0
 8016832:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016834:	687b      	ldr	r3, [r7, #4]
 8016836:	2200      	movs	r2, #0
 8016838:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801683a:	bf00      	nop
 801683c:	370c      	adds	r7, #12
 801683e:	46bd      	mov	sp, r7
 8016840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016844:	4770      	bx	lr

08016846 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016846:	b480      	push	{r7}
 8016848:	b085      	sub	sp, #20
 801684a:	af00      	add	r7, sp, #0
 801684c:	6078      	str	r0, [r7, #4]
 801684e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	685b      	ldr	r3, [r3, #4]
 8016854:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016856:	683b      	ldr	r3, [r7, #0]
 8016858:	68fa      	ldr	r2, [r7, #12]
 801685a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	689a      	ldr	r2, [r3, #8]
 8016860:	683b      	ldr	r3, [r7, #0]
 8016862:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	689b      	ldr	r3, [r3, #8]
 8016868:	683a      	ldr	r2, [r7, #0]
 801686a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	683a      	ldr	r2, [r7, #0]
 8016870:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016872:	683b      	ldr	r3, [r7, #0]
 8016874:	687a      	ldr	r2, [r7, #4]
 8016876:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	1c5a      	adds	r2, r3, #1
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	601a      	str	r2, [r3, #0]
}
 8016882:	bf00      	nop
 8016884:	3714      	adds	r7, #20
 8016886:	46bd      	mov	sp, r7
 8016888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801688c:	4770      	bx	lr

0801688e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801688e:	b480      	push	{r7}
 8016890:	b085      	sub	sp, #20
 8016892:	af00      	add	r7, sp, #0
 8016894:	6078      	str	r0, [r7, #4]
 8016896:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016898:	683b      	ldr	r3, [r7, #0]
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80168a4:	d103      	bne.n	80168ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	691b      	ldr	r3, [r3, #16]
 80168aa:	60fb      	str	r3, [r7, #12]
 80168ac:	e00c      	b.n	80168c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	3308      	adds	r3, #8
 80168b2:	60fb      	str	r3, [r7, #12]
 80168b4:	e002      	b.n	80168bc <vListInsert+0x2e>
 80168b6:	68fb      	ldr	r3, [r7, #12]
 80168b8:	685b      	ldr	r3, [r3, #4]
 80168ba:	60fb      	str	r3, [r7, #12]
 80168bc:	68fb      	ldr	r3, [r7, #12]
 80168be:	685b      	ldr	r3, [r3, #4]
 80168c0:	681b      	ldr	r3, [r3, #0]
 80168c2:	68ba      	ldr	r2, [r7, #8]
 80168c4:	429a      	cmp	r2, r3
 80168c6:	d2f6      	bcs.n	80168b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	685a      	ldr	r2, [r3, #4]
 80168cc:	683b      	ldr	r3, [r7, #0]
 80168ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80168d0:	683b      	ldr	r3, [r7, #0]
 80168d2:	685b      	ldr	r3, [r3, #4]
 80168d4:	683a      	ldr	r2, [r7, #0]
 80168d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80168d8:	683b      	ldr	r3, [r7, #0]
 80168da:	68fa      	ldr	r2, [r7, #12]
 80168dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80168de:	68fb      	ldr	r3, [r7, #12]
 80168e0:	683a      	ldr	r2, [r7, #0]
 80168e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80168e4:	683b      	ldr	r3, [r7, #0]
 80168e6:	687a      	ldr	r2, [r7, #4]
 80168e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	1c5a      	adds	r2, r3, #1
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	601a      	str	r2, [r3, #0]
}
 80168f4:	bf00      	nop
 80168f6:	3714      	adds	r7, #20
 80168f8:	46bd      	mov	sp, r7
 80168fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168fe:	4770      	bx	lr

08016900 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8016900:	b480      	push	{r7}
 8016902:	b085      	sub	sp, #20
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	691b      	ldr	r3, [r3, #16]
 801690c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	687a      	ldr	r2, [r7, #4]
 8016914:	6892      	ldr	r2, [r2, #8]
 8016916:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	689b      	ldr	r3, [r3, #8]
 801691c:	687a      	ldr	r2, [r7, #4]
 801691e:	6852      	ldr	r2, [r2, #4]
 8016920:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	685b      	ldr	r3, [r3, #4]
 8016926:	687a      	ldr	r2, [r7, #4]
 8016928:	429a      	cmp	r2, r3
 801692a:	d103      	bne.n	8016934 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	689a      	ldr	r2, [r3, #8]
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	2200      	movs	r2, #0
 8016938:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	1e5a      	subs	r2, r3, #1
 8016940:	68fb      	ldr	r3, [r7, #12]
 8016942:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
}
 8016948:	4618      	mov	r0, r3
 801694a:	3714      	adds	r7, #20
 801694c:	46bd      	mov	sp, r7
 801694e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016952:	4770      	bx	lr

08016954 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016954:	b580      	push	{r7, lr}
 8016956:	b084      	sub	sp, #16
 8016958:	af00      	add	r7, sp, #0
 801695a:	6078      	str	r0, [r7, #4]
 801695c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	2b00      	cmp	r3, #0
 8016966:	d10b      	bne.n	8016980 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016968:	f04f 0350 	mov.w	r3, #80	; 0x50
 801696c:	b672      	cpsid	i
 801696e:	f383 8811 	msr	BASEPRI, r3
 8016972:	f3bf 8f6f 	isb	sy
 8016976:	f3bf 8f4f 	dsb	sy
 801697a:	b662      	cpsie	i
 801697c:	60bb      	str	r3, [r7, #8]
 801697e:	e7fe      	b.n	801697e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8016980:	f002 fdda 	bl	8019538 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016984:	68fb      	ldr	r3, [r7, #12]
 8016986:	681a      	ldr	r2, [r3, #0]
 8016988:	68fb      	ldr	r3, [r7, #12]
 801698a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801698c:	68f9      	ldr	r1, [r7, #12]
 801698e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016990:	fb01 f303 	mul.w	r3, r1, r3
 8016994:	441a      	add	r2, r3
 8016996:	68fb      	ldr	r3, [r7, #12]
 8016998:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801699a:	68fb      	ldr	r3, [r7, #12]
 801699c:	2200      	movs	r2, #0
 801699e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80169a0:	68fb      	ldr	r3, [r7, #12]
 80169a2:	681a      	ldr	r2, [r3, #0]
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	681a      	ldr	r2, [r3, #0]
 80169ac:	68fb      	ldr	r3, [r7, #12]
 80169ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80169b0:	3b01      	subs	r3, #1
 80169b2:	68f9      	ldr	r1, [r7, #12]
 80169b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80169b6:	fb01 f303 	mul.w	r3, r1, r3
 80169ba:	441a      	add	r2, r3
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80169c0:	68fb      	ldr	r3, [r7, #12]
 80169c2:	22ff      	movs	r2, #255	; 0xff
 80169c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80169c8:	68fb      	ldr	r3, [r7, #12]
 80169ca:	22ff      	movs	r2, #255	; 0xff
 80169cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80169d0:	683b      	ldr	r3, [r7, #0]
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d114      	bne.n	8016a00 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80169d6:	68fb      	ldr	r3, [r7, #12]
 80169d8:	691b      	ldr	r3, [r3, #16]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d01a      	beq.n	8016a14 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80169de:	68fb      	ldr	r3, [r7, #12]
 80169e0:	3310      	adds	r3, #16
 80169e2:	4618      	mov	r0, r3
 80169e4:	f001 fd9c 	bl	8018520 <xTaskRemoveFromEventList>
 80169e8:	4603      	mov	r3, r0
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d012      	beq.n	8016a14 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80169ee:	4b0d      	ldr	r3, [pc, #52]	; (8016a24 <xQueueGenericReset+0xd0>)
 80169f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80169f4:	601a      	str	r2, [r3, #0]
 80169f6:	f3bf 8f4f 	dsb	sy
 80169fa:	f3bf 8f6f 	isb	sy
 80169fe:	e009      	b.n	8016a14 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	3310      	adds	r3, #16
 8016a04:	4618      	mov	r0, r3
 8016a06:	f7ff fef1 	bl	80167ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	3324      	adds	r3, #36	; 0x24
 8016a0e:	4618      	mov	r0, r3
 8016a10:	f7ff feec 	bl	80167ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8016a14:	f002 fdc2 	bl	801959c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8016a18:	2301      	movs	r3, #1
}
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}
 8016a22:	bf00      	nop
 8016a24:	e000ed04 	.word	0xe000ed04

08016a28 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8016a28:	b580      	push	{r7, lr}
 8016a2a:	b08e      	sub	sp, #56	; 0x38
 8016a2c:	af02      	add	r7, sp, #8
 8016a2e:	60f8      	str	r0, [r7, #12]
 8016a30:	60b9      	str	r1, [r7, #8]
 8016a32:	607a      	str	r2, [r7, #4]
 8016a34:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	2b00      	cmp	r3, #0
 8016a3a:	d10b      	bne.n	8016a54 <xQueueGenericCreateStatic+0x2c>
 8016a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a40:	b672      	cpsid	i
 8016a42:	f383 8811 	msr	BASEPRI, r3
 8016a46:	f3bf 8f6f 	isb	sy
 8016a4a:	f3bf 8f4f 	dsb	sy
 8016a4e:	b662      	cpsie	i
 8016a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8016a52:	e7fe      	b.n	8016a52 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016a54:	683b      	ldr	r3, [r7, #0]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d10b      	bne.n	8016a72 <xQueueGenericCreateStatic+0x4a>
 8016a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a5e:	b672      	cpsid	i
 8016a60:	f383 8811 	msr	BASEPRI, r3
 8016a64:	f3bf 8f6f 	isb	sy
 8016a68:	f3bf 8f4f 	dsb	sy
 8016a6c:	b662      	cpsie	i
 8016a6e:	627b      	str	r3, [r7, #36]	; 0x24
 8016a70:	e7fe      	b.n	8016a70 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016a72:	687b      	ldr	r3, [r7, #4]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d002      	beq.n	8016a7e <xQueueGenericCreateStatic+0x56>
 8016a78:	68bb      	ldr	r3, [r7, #8]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d001      	beq.n	8016a82 <xQueueGenericCreateStatic+0x5a>
 8016a7e:	2301      	movs	r3, #1
 8016a80:	e000      	b.n	8016a84 <xQueueGenericCreateStatic+0x5c>
 8016a82:	2300      	movs	r3, #0
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d10b      	bne.n	8016aa0 <xQueueGenericCreateStatic+0x78>
 8016a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a8c:	b672      	cpsid	i
 8016a8e:	f383 8811 	msr	BASEPRI, r3
 8016a92:	f3bf 8f6f 	isb	sy
 8016a96:	f3bf 8f4f 	dsb	sy
 8016a9a:	b662      	cpsie	i
 8016a9c:	623b      	str	r3, [r7, #32]
 8016a9e:	e7fe      	b.n	8016a9e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d102      	bne.n	8016aac <xQueueGenericCreateStatic+0x84>
 8016aa6:	68bb      	ldr	r3, [r7, #8]
 8016aa8:	2b00      	cmp	r3, #0
 8016aaa:	d101      	bne.n	8016ab0 <xQueueGenericCreateStatic+0x88>
 8016aac:	2301      	movs	r3, #1
 8016aae:	e000      	b.n	8016ab2 <xQueueGenericCreateStatic+0x8a>
 8016ab0:	2300      	movs	r3, #0
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	d10b      	bne.n	8016ace <xQueueGenericCreateStatic+0xa6>
 8016ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016aba:	b672      	cpsid	i
 8016abc:	f383 8811 	msr	BASEPRI, r3
 8016ac0:	f3bf 8f6f 	isb	sy
 8016ac4:	f3bf 8f4f 	dsb	sy
 8016ac8:	b662      	cpsie	i
 8016aca:	61fb      	str	r3, [r7, #28]
 8016acc:	e7fe      	b.n	8016acc <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8016ace:	2350      	movs	r3, #80	; 0x50
 8016ad0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8016ad2:	697b      	ldr	r3, [r7, #20]
 8016ad4:	2b50      	cmp	r3, #80	; 0x50
 8016ad6:	d00b      	beq.n	8016af0 <xQueueGenericCreateStatic+0xc8>
 8016ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016adc:	b672      	cpsid	i
 8016ade:	f383 8811 	msr	BASEPRI, r3
 8016ae2:	f3bf 8f6f 	isb	sy
 8016ae6:	f3bf 8f4f 	dsb	sy
 8016aea:	b662      	cpsie	i
 8016aec:	61bb      	str	r3, [r7, #24]
 8016aee:	e7fe      	b.n	8016aee <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8016af0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8016af2:	683b      	ldr	r3, [r7, #0]
 8016af4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8016af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	d00d      	beq.n	8016b18 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8016afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016afe:	2201      	movs	r2, #1
 8016b00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b04:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8016b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b0a:	9300      	str	r3, [sp, #0]
 8016b0c:	4613      	mov	r3, r2
 8016b0e:	687a      	ldr	r2, [r7, #4]
 8016b10:	68b9      	ldr	r1, [r7, #8]
 8016b12:	68f8      	ldr	r0, [r7, #12]
 8016b14:	f000 f846 	bl	8016ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8016b1a:	4618      	mov	r0, r3
 8016b1c:	3730      	adds	r7, #48	; 0x30
 8016b1e:	46bd      	mov	sp, r7
 8016b20:	bd80      	pop	{r7, pc}

08016b22 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8016b22:	b580      	push	{r7, lr}
 8016b24:	b08a      	sub	sp, #40	; 0x28
 8016b26:	af02      	add	r7, sp, #8
 8016b28:	60f8      	str	r0, [r7, #12]
 8016b2a:	60b9      	str	r1, [r7, #8]
 8016b2c:	4613      	mov	r3, r2
 8016b2e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	2b00      	cmp	r3, #0
 8016b34:	d10b      	bne.n	8016b4e <xQueueGenericCreate+0x2c>
 8016b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b3a:	b672      	cpsid	i
 8016b3c:	f383 8811 	msr	BASEPRI, r3
 8016b40:	f3bf 8f6f 	isb	sy
 8016b44:	f3bf 8f4f 	dsb	sy
 8016b48:	b662      	cpsie	i
 8016b4a:	613b      	str	r3, [r7, #16]
 8016b4c:	e7fe      	b.n	8016b4c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016b4e:	68bb      	ldr	r3, [r7, #8]
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d102      	bne.n	8016b5a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016b54:	2300      	movs	r3, #0
 8016b56:	61fb      	str	r3, [r7, #28]
 8016b58:	e004      	b.n	8016b64 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016b5a:	68fb      	ldr	r3, [r7, #12]
 8016b5c:	68ba      	ldr	r2, [r7, #8]
 8016b5e:	fb02 f303 	mul.w	r3, r2, r3
 8016b62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016b64:	69fb      	ldr	r3, [r7, #28]
 8016b66:	3350      	adds	r3, #80	; 0x50
 8016b68:	4618      	mov	r0, r3
 8016b6a:	f002 fe07 	bl	801977c <pvPortMalloc>
 8016b6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016b70:	69bb      	ldr	r3, [r7, #24]
 8016b72:	2b00      	cmp	r3, #0
 8016b74:	d011      	beq.n	8016b9a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016b76:	69bb      	ldr	r3, [r7, #24]
 8016b78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016b7a:	697b      	ldr	r3, [r7, #20]
 8016b7c:	3350      	adds	r3, #80	; 0x50
 8016b7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016b80:	69bb      	ldr	r3, [r7, #24]
 8016b82:	2200      	movs	r2, #0
 8016b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016b88:	79fa      	ldrb	r2, [r7, #7]
 8016b8a:	69bb      	ldr	r3, [r7, #24]
 8016b8c:	9300      	str	r3, [sp, #0]
 8016b8e:	4613      	mov	r3, r2
 8016b90:	697a      	ldr	r2, [r7, #20]
 8016b92:	68b9      	ldr	r1, [r7, #8]
 8016b94:	68f8      	ldr	r0, [r7, #12]
 8016b96:	f000 f805 	bl	8016ba4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016b9a:	69bb      	ldr	r3, [r7, #24]
	}
 8016b9c:	4618      	mov	r0, r3
 8016b9e:	3720      	adds	r7, #32
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	bd80      	pop	{r7, pc}

08016ba4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016ba4:	b580      	push	{r7, lr}
 8016ba6:	b084      	sub	sp, #16
 8016ba8:	af00      	add	r7, sp, #0
 8016baa:	60f8      	str	r0, [r7, #12]
 8016bac:	60b9      	str	r1, [r7, #8]
 8016bae:	607a      	str	r2, [r7, #4]
 8016bb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016bb2:	68bb      	ldr	r3, [r7, #8]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d103      	bne.n	8016bc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016bb8:	69bb      	ldr	r3, [r7, #24]
 8016bba:	69ba      	ldr	r2, [r7, #24]
 8016bbc:	601a      	str	r2, [r3, #0]
 8016bbe:	e002      	b.n	8016bc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016bc0:	69bb      	ldr	r3, [r7, #24]
 8016bc2:	687a      	ldr	r2, [r7, #4]
 8016bc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016bc6:	69bb      	ldr	r3, [r7, #24]
 8016bc8:	68fa      	ldr	r2, [r7, #12]
 8016bca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016bcc:	69bb      	ldr	r3, [r7, #24]
 8016bce:	68ba      	ldr	r2, [r7, #8]
 8016bd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016bd2:	2101      	movs	r1, #1
 8016bd4:	69b8      	ldr	r0, [r7, #24]
 8016bd6:	f7ff febd 	bl	8016954 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016bda:	69bb      	ldr	r3, [r7, #24]
 8016bdc:	78fa      	ldrb	r2, [r7, #3]
 8016bde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016be2:	bf00      	nop
 8016be4:	3710      	adds	r7, #16
 8016be6:	46bd      	mov	sp, r7
 8016be8:	bd80      	pop	{r7, pc}

08016bea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016bea:	b580      	push	{r7, lr}
 8016bec:	b082      	sub	sp, #8
 8016bee:	af00      	add	r7, sp, #0
 8016bf0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d00e      	beq.n	8016c16 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016bfe:	687b      	ldr	r3, [r7, #4]
 8016c00:	2200      	movs	r2, #0
 8016c02:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	2200      	movs	r2, #0
 8016c08:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	2200      	movs	r2, #0
 8016c0e:	2100      	movs	r1, #0
 8016c10:	6878      	ldr	r0, [r7, #4]
 8016c12:	f000 f911 	bl	8016e38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016c16:	bf00      	nop
 8016c18:	3708      	adds	r7, #8
 8016c1a:	46bd      	mov	sp, r7
 8016c1c:	bd80      	pop	{r7, pc}

08016c1e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016c1e:	b580      	push	{r7, lr}
 8016c20:	b086      	sub	sp, #24
 8016c22:	af00      	add	r7, sp, #0
 8016c24:	4603      	mov	r3, r0
 8016c26:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016c28:	2301      	movs	r3, #1
 8016c2a:	617b      	str	r3, [r7, #20]
 8016c2c:	2300      	movs	r3, #0
 8016c2e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016c30:	79fb      	ldrb	r3, [r7, #7]
 8016c32:	461a      	mov	r2, r3
 8016c34:	6939      	ldr	r1, [r7, #16]
 8016c36:	6978      	ldr	r0, [r7, #20]
 8016c38:	f7ff ff73 	bl	8016b22 <xQueueGenericCreate>
 8016c3c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016c3e:	68f8      	ldr	r0, [r7, #12]
 8016c40:	f7ff ffd3 	bl	8016bea <prvInitialiseMutex>

		return xNewQueue;
 8016c44:	68fb      	ldr	r3, [r7, #12]
	}
 8016c46:	4618      	mov	r0, r3
 8016c48:	3718      	adds	r7, #24
 8016c4a:	46bd      	mov	sp, r7
 8016c4c:	bd80      	pop	{r7, pc}

08016c4e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016c4e:	b580      	push	{r7, lr}
 8016c50:	b088      	sub	sp, #32
 8016c52:	af02      	add	r7, sp, #8
 8016c54:	4603      	mov	r3, r0
 8016c56:	6039      	str	r1, [r7, #0]
 8016c58:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016c5a:	2301      	movs	r3, #1
 8016c5c:	617b      	str	r3, [r7, #20]
 8016c5e:	2300      	movs	r3, #0
 8016c60:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016c62:	79fb      	ldrb	r3, [r7, #7]
 8016c64:	9300      	str	r3, [sp, #0]
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	2200      	movs	r2, #0
 8016c6a:	6939      	ldr	r1, [r7, #16]
 8016c6c:	6978      	ldr	r0, [r7, #20]
 8016c6e:	f7ff fedb 	bl	8016a28 <xQueueGenericCreateStatic>
 8016c72:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016c74:	68f8      	ldr	r0, [r7, #12]
 8016c76:	f7ff ffb8 	bl	8016bea <prvInitialiseMutex>

		return xNewQueue;
 8016c7a:	68fb      	ldr	r3, [r7, #12]
	}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	3718      	adds	r7, #24
 8016c80:	46bd      	mov	sp, r7
 8016c82:	bd80      	pop	{r7, pc}

08016c84 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016c84:	b590      	push	{r4, r7, lr}
 8016c86:	b087      	sub	sp, #28
 8016c88:	af00      	add	r7, sp, #0
 8016c8a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016c8c:	687b      	ldr	r3, [r7, #4]
 8016c8e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016c90:	693b      	ldr	r3, [r7, #16]
 8016c92:	2b00      	cmp	r3, #0
 8016c94:	d10b      	bne.n	8016cae <xQueueGiveMutexRecursive+0x2a>
 8016c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c9a:	b672      	cpsid	i
 8016c9c:	f383 8811 	msr	BASEPRI, r3
 8016ca0:	f3bf 8f6f 	isb	sy
 8016ca4:	f3bf 8f4f 	dsb	sy
 8016ca8:	b662      	cpsie	i
 8016caa:	60fb      	str	r3, [r7, #12]
 8016cac:	e7fe      	b.n	8016cac <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016cae:	693b      	ldr	r3, [r7, #16]
 8016cb0:	689c      	ldr	r4, [r3, #8]
 8016cb2:	f001 fdf3 	bl	801889c <xTaskGetCurrentTaskHandle>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	429c      	cmp	r4, r3
 8016cba:	d111      	bne.n	8016ce0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016cbc:	693b      	ldr	r3, [r7, #16]
 8016cbe:	68db      	ldr	r3, [r3, #12]
 8016cc0:	1e5a      	subs	r2, r3, #1
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016cc6:	693b      	ldr	r3, [r7, #16]
 8016cc8:	68db      	ldr	r3, [r3, #12]
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	d105      	bne.n	8016cda <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016cce:	2300      	movs	r3, #0
 8016cd0:	2200      	movs	r2, #0
 8016cd2:	2100      	movs	r1, #0
 8016cd4:	6938      	ldr	r0, [r7, #16]
 8016cd6:	f000 f8af 	bl	8016e38 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016cda:	2301      	movs	r3, #1
 8016cdc:	617b      	str	r3, [r7, #20]
 8016cde:	e001      	b.n	8016ce4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016ce0:	2300      	movs	r3, #0
 8016ce2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016ce4:	697b      	ldr	r3, [r7, #20]
	}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	371c      	adds	r7, #28
 8016cea:	46bd      	mov	sp, r7
 8016cec:	bd90      	pop	{r4, r7, pc}

08016cee <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016cee:	b590      	push	{r4, r7, lr}
 8016cf0:	b087      	sub	sp, #28
 8016cf2:	af00      	add	r7, sp, #0
 8016cf4:	6078      	str	r0, [r7, #4]
 8016cf6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d10b      	bne.n	8016d1a <xQueueTakeMutexRecursive+0x2c>
 8016d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d06:	b672      	cpsid	i
 8016d08:	f383 8811 	msr	BASEPRI, r3
 8016d0c:	f3bf 8f6f 	isb	sy
 8016d10:	f3bf 8f4f 	dsb	sy
 8016d14:	b662      	cpsie	i
 8016d16:	60fb      	str	r3, [r7, #12]
 8016d18:	e7fe      	b.n	8016d18 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016d1a:	693b      	ldr	r3, [r7, #16]
 8016d1c:	689c      	ldr	r4, [r3, #8]
 8016d1e:	f001 fdbd 	bl	801889c <xTaskGetCurrentTaskHandle>
 8016d22:	4603      	mov	r3, r0
 8016d24:	429c      	cmp	r4, r3
 8016d26:	d107      	bne.n	8016d38 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016d28:	693b      	ldr	r3, [r7, #16]
 8016d2a:	68db      	ldr	r3, [r3, #12]
 8016d2c:	1c5a      	adds	r2, r3, #1
 8016d2e:	693b      	ldr	r3, [r7, #16]
 8016d30:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016d32:	2301      	movs	r3, #1
 8016d34:	617b      	str	r3, [r7, #20]
 8016d36:	e00c      	b.n	8016d52 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016d38:	6839      	ldr	r1, [r7, #0]
 8016d3a:	6938      	ldr	r0, [r7, #16]
 8016d3c:	f000 fb8e 	bl	801745c <xQueueSemaphoreTake>
 8016d40:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016d42:	697b      	ldr	r3, [r7, #20]
 8016d44:	2b00      	cmp	r3, #0
 8016d46:	d004      	beq.n	8016d52 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016d48:	693b      	ldr	r3, [r7, #16]
 8016d4a:	68db      	ldr	r3, [r3, #12]
 8016d4c:	1c5a      	adds	r2, r3, #1
 8016d4e:	693b      	ldr	r3, [r7, #16]
 8016d50:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016d52:	697b      	ldr	r3, [r7, #20]
	}
 8016d54:	4618      	mov	r0, r3
 8016d56:	371c      	adds	r7, #28
 8016d58:	46bd      	mov	sp, r7
 8016d5a:	bd90      	pop	{r4, r7, pc}

08016d5c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016d5c:	b580      	push	{r7, lr}
 8016d5e:	b08a      	sub	sp, #40	; 0x28
 8016d60:	af02      	add	r7, sp, #8
 8016d62:	60f8      	str	r0, [r7, #12]
 8016d64:	60b9      	str	r1, [r7, #8]
 8016d66:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016d68:	68fb      	ldr	r3, [r7, #12]
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d10b      	bne.n	8016d86 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8016d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d72:	b672      	cpsid	i
 8016d74:	f383 8811 	msr	BASEPRI, r3
 8016d78:	f3bf 8f6f 	isb	sy
 8016d7c:	f3bf 8f4f 	dsb	sy
 8016d80:	b662      	cpsie	i
 8016d82:	61bb      	str	r3, [r7, #24]
 8016d84:	e7fe      	b.n	8016d84 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016d86:	68ba      	ldr	r2, [r7, #8]
 8016d88:	68fb      	ldr	r3, [r7, #12]
 8016d8a:	429a      	cmp	r2, r3
 8016d8c:	d90b      	bls.n	8016da6 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8016d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d92:	b672      	cpsid	i
 8016d94:	f383 8811 	msr	BASEPRI, r3
 8016d98:	f3bf 8f6f 	isb	sy
 8016d9c:	f3bf 8f4f 	dsb	sy
 8016da0:	b662      	cpsie	i
 8016da2:	617b      	str	r3, [r7, #20]
 8016da4:	e7fe      	b.n	8016da4 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016da6:	2302      	movs	r3, #2
 8016da8:	9300      	str	r3, [sp, #0]
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	2200      	movs	r2, #0
 8016dae:	2100      	movs	r1, #0
 8016db0:	68f8      	ldr	r0, [r7, #12]
 8016db2:	f7ff fe39 	bl	8016a28 <xQueueGenericCreateStatic>
 8016db6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016db8:	69fb      	ldr	r3, [r7, #28]
 8016dba:	2b00      	cmp	r3, #0
 8016dbc:	d002      	beq.n	8016dc4 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016dbe:	69fb      	ldr	r3, [r7, #28]
 8016dc0:	68ba      	ldr	r2, [r7, #8]
 8016dc2:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016dc4:	69fb      	ldr	r3, [r7, #28]
	}
 8016dc6:	4618      	mov	r0, r3
 8016dc8:	3720      	adds	r7, #32
 8016dca:	46bd      	mov	sp, r7
 8016dcc:	bd80      	pop	{r7, pc}

08016dce <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016dce:	b580      	push	{r7, lr}
 8016dd0:	b086      	sub	sp, #24
 8016dd2:	af00      	add	r7, sp, #0
 8016dd4:	6078      	str	r0, [r7, #4]
 8016dd6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	2b00      	cmp	r3, #0
 8016ddc:	d10b      	bne.n	8016df6 <xQueueCreateCountingSemaphore+0x28>
 8016dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016de2:	b672      	cpsid	i
 8016de4:	f383 8811 	msr	BASEPRI, r3
 8016de8:	f3bf 8f6f 	isb	sy
 8016dec:	f3bf 8f4f 	dsb	sy
 8016df0:	b662      	cpsie	i
 8016df2:	613b      	str	r3, [r7, #16]
 8016df4:	e7fe      	b.n	8016df4 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016df6:	683a      	ldr	r2, [r7, #0]
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	429a      	cmp	r2, r3
 8016dfc:	d90b      	bls.n	8016e16 <xQueueCreateCountingSemaphore+0x48>
 8016dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e02:	b672      	cpsid	i
 8016e04:	f383 8811 	msr	BASEPRI, r3
 8016e08:	f3bf 8f6f 	isb	sy
 8016e0c:	f3bf 8f4f 	dsb	sy
 8016e10:	b662      	cpsie	i
 8016e12:	60fb      	str	r3, [r7, #12]
 8016e14:	e7fe      	b.n	8016e14 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016e16:	2202      	movs	r2, #2
 8016e18:	2100      	movs	r1, #0
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f7ff fe81 	bl	8016b22 <xQueueGenericCreate>
 8016e20:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016e22:	697b      	ldr	r3, [r7, #20]
 8016e24:	2b00      	cmp	r3, #0
 8016e26:	d002      	beq.n	8016e2e <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016e28:	697b      	ldr	r3, [r7, #20]
 8016e2a:	683a      	ldr	r2, [r7, #0]
 8016e2c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016e2e:	697b      	ldr	r3, [r7, #20]
	}
 8016e30:	4618      	mov	r0, r3
 8016e32:	3718      	adds	r7, #24
 8016e34:	46bd      	mov	sp, r7
 8016e36:	bd80      	pop	{r7, pc}

08016e38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016e38:	b580      	push	{r7, lr}
 8016e3a:	b08e      	sub	sp, #56	; 0x38
 8016e3c:	af00      	add	r7, sp, #0
 8016e3e:	60f8      	str	r0, [r7, #12]
 8016e40:	60b9      	str	r1, [r7, #8]
 8016e42:	607a      	str	r2, [r7, #4]
 8016e44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016e46:	2300      	movs	r3, #0
 8016e48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016e4a:	68fb      	ldr	r3, [r7, #12]
 8016e4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e50:	2b00      	cmp	r3, #0
 8016e52:	d10b      	bne.n	8016e6c <xQueueGenericSend+0x34>
 8016e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e58:	b672      	cpsid	i
 8016e5a:	f383 8811 	msr	BASEPRI, r3
 8016e5e:	f3bf 8f6f 	isb	sy
 8016e62:	f3bf 8f4f 	dsb	sy
 8016e66:	b662      	cpsie	i
 8016e68:	62bb      	str	r3, [r7, #40]	; 0x28
 8016e6a:	e7fe      	b.n	8016e6a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d103      	bne.n	8016e7a <xQueueGenericSend+0x42>
 8016e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e76:	2b00      	cmp	r3, #0
 8016e78:	d101      	bne.n	8016e7e <xQueueGenericSend+0x46>
 8016e7a:	2301      	movs	r3, #1
 8016e7c:	e000      	b.n	8016e80 <xQueueGenericSend+0x48>
 8016e7e:	2300      	movs	r3, #0
 8016e80:	2b00      	cmp	r3, #0
 8016e82:	d10b      	bne.n	8016e9c <xQueueGenericSend+0x64>
 8016e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016e88:	b672      	cpsid	i
 8016e8a:	f383 8811 	msr	BASEPRI, r3
 8016e8e:	f3bf 8f6f 	isb	sy
 8016e92:	f3bf 8f4f 	dsb	sy
 8016e96:	b662      	cpsie	i
 8016e98:	627b      	str	r3, [r7, #36]	; 0x24
 8016e9a:	e7fe      	b.n	8016e9a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016e9c:	683b      	ldr	r3, [r7, #0]
 8016e9e:	2b02      	cmp	r3, #2
 8016ea0:	d103      	bne.n	8016eaa <xQueueGenericSend+0x72>
 8016ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016ea6:	2b01      	cmp	r3, #1
 8016ea8:	d101      	bne.n	8016eae <xQueueGenericSend+0x76>
 8016eaa:	2301      	movs	r3, #1
 8016eac:	e000      	b.n	8016eb0 <xQueueGenericSend+0x78>
 8016eae:	2300      	movs	r3, #0
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d10b      	bne.n	8016ecc <xQueueGenericSend+0x94>
 8016eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eb8:	b672      	cpsid	i
 8016eba:	f383 8811 	msr	BASEPRI, r3
 8016ebe:	f3bf 8f6f 	isb	sy
 8016ec2:	f3bf 8f4f 	dsb	sy
 8016ec6:	b662      	cpsie	i
 8016ec8:	623b      	str	r3, [r7, #32]
 8016eca:	e7fe      	b.n	8016eca <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016ecc:	f001 fcf6 	bl	80188bc <xTaskGetSchedulerState>
 8016ed0:	4603      	mov	r3, r0
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d102      	bne.n	8016edc <xQueueGenericSend+0xa4>
 8016ed6:	687b      	ldr	r3, [r7, #4]
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d101      	bne.n	8016ee0 <xQueueGenericSend+0xa8>
 8016edc:	2301      	movs	r3, #1
 8016ede:	e000      	b.n	8016ee2 <xQueueGenericSend+0xaa>
 8016ee0:	2300      	movs	r3, #0
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d10b      	bne.n	8016efe <xQueueGenericSend+0xc6>
 8016ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016eea:	b672      	cpsid	i
 8016eec:	f383 8811 	msr	BASEPRI, r3
 8016ef0:	f3bf 8f6f 	isb	sy
 8016ef4:	f3bf 8f4f 	dsb	sy
 8016ef8:	b662      	cpsie	i
 8016efa:	61fb      	str	r3, [r7, #28]
 8016efc:	e7fe      	b.n	8016efc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016efe:	f002 fb1b 	bl	8019538 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f0a:	429a      	cmp	r2, r3
 8016f0c:	d302      	bcc.n	8016f14 <xQueueGenericSend+0xdc>
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	2b02      	cmp	r3, #2
 8016f12:	d129      	bne.n	8016f68 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016f14:	683a      	ldr	r2, [r7, #0]
 8016f16:	68b9      	ldr	r1, [r7, #8]
 8016f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016f1a:	f000 fc6e 	bl	80177fa <prvCopyDataToQueue>
 8016f1e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d010      	beq.n	8016f4a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f2a:	3324      	adds	r3, #36	; 0x24
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f001 faf7 	bl	8018520 <xTaskRemoveFromEventList>
 8016f32:	4603      	mov	r3, r0
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d013      	beq.n	8016f60 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016f38:	4b3f      	ldr	r3, [pc, #252]	; (8017038 <xQueueGenericSend+0x200>)
 8016f3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f3e:	601a      	str	r2, [r3, #0]
 8016f40:	f3bf 8f4f 	dsb	sy
 8016f44:	f3bf 8f6f 	isb	sy
 8016f48:	e00a      	b.n	8016f60 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d007      	beq.n	8016f60 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016f50:	4b39      	ldr	r3, [pc, #228]	; (8017038 <xQueueGenericSend+0x200>)
 8016f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016f56:	601a      	str	r2, [r3, #0]
 8016f58:	f3bf 8f4f 	dsb	sy
 8016f5c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016f60:	f002 fb1c 	bl	801959c <vPortExitCritical>
				return pdPASS;
 8016f64:	2301      	movs	r3, #1
 8016f66:	e063      	b.n	8017030 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d103      	bne.n	8016f76 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016f6e:	f002 fb15 	bl	801959c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016f72:	2300      	movs	r3, #0
 8016f74:	e05c      	b.n	8017030 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016f76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016f78:	2b00      	cmp	r3, #0
 8016f7a:	d106      	bne.n	8016f8a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016f7c:	f107 0314 	add.w	r3, r7, #20
 8016f80:	4618      	mov	r0, r3
 8016f82:	f001 fb31 	bl	80185e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016f86:	2301      	movs	r3, #1
 8016f88:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016f8a:	f002 fb07 	bl	801959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016f8e:	f001 f88f 	bl	80180b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016f92:	f002 fad1 	bl	8019538 <vPortEnterCritical>
 8016f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016f9c:	b25b      	sxtb	r3, r3
 8016f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fa2:	d103      	bne.n	8016fac <xQueueGenericSend+0x174>
 8016fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fa6:	2200      	movs	r2, #0
 8016fa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016fb2:	b25b      	sxtb	r3, r3
 8016fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fb8:	d103      	bne.n	8016fc2 <xQueueGenericSend+0x18a>
 8016fba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016fc2:	f002 faeb 	bl	801959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016fc6:	1d3a      	adds	r2, r7, #4
 8016fc8:	f107 0314 	add.w	r3, r7, #20
 8016fcc:	4611      	mov	r1, r2
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f001 fb20 	bl	8018614 <xTaskCheckForTimeOut>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d124      	bne.n	8017024 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fdc:	f000 fd05 	bl	80179ea <prvIsQueueFull>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d018      	beq.n	8017018 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fe8:	3310      	adds	r3, #16
 8016fea:	687a      	ldr	r2, [r7, #4]
 8016fec:	4611      	mov	r1, r2
 8016fee:	4618      	mov	r0, r3
 8016ff0:	f001 fa44 	bl	801847c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ff6:	f000 fc90 	bl	801791a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016ffa:	f001 f867 	bl	80180cc <xTaskResumeAll>
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	f47f af7c 	bne.w	8016efe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8017006:	4b0c      	ldr	r3, [pc, #48]	; (8017038 <xQueueGenericSend+0x200>)
 8017008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801700c:	601a      	str	r2, [r3, #0]
 801700e:	f3bf 8f4f 	dsb	sy
 8017012:	f3bf 8f6f 	isb	sy
 8017016:	e772      	b.n	8016efe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8017018:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801701a:	f000 fc7e 	bl	801791a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801701e:	f001 f855 	bl	80180cc <xTaskResumeAll>
 8017022:	e76c      	b.n	8016efe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8017024:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017026:	f000 fc78 	bl	801791a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801702a:	f001 f84f 	bl	80180cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801702e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8017030:	4618      	mov	r0, r3
 8017032:	3738      	adds	r7, #56	; 0x38
 8017034:	46bd      	mov	sp, r7
 8017036:	bd80      	pop	{r7, pc}
 8017038:	e000ed04 	.word	0xe000ed04

0801703c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b08e      	sub	sp, #56	; 0x38
 8017040:	af00      	add	r7, sp, #0
 8017042:	60f8      	str	r0, [r7, #12]
 8017044:	60b9      	str	r1, [r7, #8]
 8017046:	607a      	str	r2, [r7, #4]
 8017048:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801704a:	68fb      	ldr	r3, [r7, #12]
 801704c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801704e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017050:	2b00      	cmp	r3, #0
 8017052:	d10b      	bne.n	801706c <xQueueGenericSendFromISR+0x30>
 8017054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017058:	b672      	cpsid	i
 801705a:	f383 8811 	msr	BASEPRI, r3
 801705e:	f3bf 8f6f 	isb	sy
 8017062:	f3bf 8f4f 	dsb	sy
 8017066:	b662      	cpsie	i
 8017068:	627b      	str	r3, [r7, #36]	; 0x24
 801706a:	e7fe      	b.n	801706a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801706c:	68bb      	ldr	r3, [r7, #8]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d103      	bne.n	801707a <xQueueGenericSendFromISR+0x3e>
 8017072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017076:	2b00      	cmp	r3, #0
 8017078:	d101      	bne.n	801707e <xQueueGenericSendFromISR+0x42>
 801707a:	2301      	movs	r3, #1
 801707c:	e000      	b.n	8017080 <xQueueGenericSendFromISR+0x44>
 801707e:	2300      	movs	r3, #0
 8017080:	2b00      	cmp	r3, #0
 8017082:	d10b      	bne.n	801709c <xQueueGenericSendFromISR+0x60>
 8017084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017088:	b672      	cpsid	i
 801708a:	f383 8811 	msr	BASEPRI, r3
 801708e:	f3bf 8f6f 	isb	sy
 8017092:	f3bf 8f4f 	dsb	sy
 8017096:	b662      	cpsie	i
 8017098:	623b      	str	r3, [r7, #32]
 801709a:	e7fe      	b.n	801709a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	2b02      	cmp	r3, #2
 80170a0:	d103      	bne.n	80170aa <xQueueGenericSendFromISR+0x6e>
 80170a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170a6:	2b01      	cmp	r3, #1
 80170a8:	d101      	bne.n	80170ae <xQueueGenericSendFromISR+0x72>
 80170aa:	2301      	movs	r3, #1
 80170ac:	e000      	b.n	80170b0 <xQueueGenericSendFromISR+0x74>
 80170ae:	2300      	movs	r3, #0
 80170b0:	2b00      	cmp	r3, #0
 80170b2:	d10b      	bne.n	80170cc <xQueueGenericSendFromISR+0x90>
 80170b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170b8:	b672      	cpsid	i
 80170ba:	f383 8811 	msr	BASEPRI, r3
 80170be:	f3bf 8f6f 	isb	sy
 80170c2:	f3bf 8f4f 	dsb	sy
 80170c6:	b662      	cpsie	i
 80170c8:	61fb      	str	r3, [r7, #28]
 80170ca:	e7fe      	b.n	80170ca <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80170cc:	f002 fb14 	bl	80196f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80170d0:	f3ef 8211 	mrs	r2, BASEPRI
 80170d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170d8:	b672      	cpsid	i
 80170da:	f383 8811 	msr	BASEPRI, r3
 80170de:	f3bf 8f6f 	isb	sy
 80170e2:	f3bf 8f4f 	dsb	sy
 80170e6:	b662      	cpsie	i
 80170e8:	61ba      	str	r2, [r7, #24]
 80170ea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80170ec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80170ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80170f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80170f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170f8:	429a      	cmp	r2, r3
 80170fa:	d302      	bcc.n	8017102 <xQueueGenericSendFromISR+0xc6>
 80170fc:	683b      	ldr	r3, [r7, #0]
 80170fe:	2b02      	cmp	r3, #2
 8017100:	d12c      	bne.n	801715c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801710c:	683a      	ldr	r2, [r7, #0]
 801710e:	68b9      	ldr	r1, [r7, #8]
 8017110:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017112:	f000 fb72 	bl	80177fa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017116:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801711a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801711e:	d112      	bne.n	8017146 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017124:	2b00      	cmp	r3, #0
 8017126:	d016      	beq.n	8017156 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801712a:	3324      	adds	r3, #36	; 0x24
 801712c:	4618      	mov	r0, r3
 801712e:	f001 f9f7 	bl	8018520 <xTaskRemoveFromEventList>
 8017132:	4603      	mov	r3, r0
 8017134:	2b00      	cmp	r3, #0
 8017136:	d00e      	beq.n	8017156 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017138:	687b      	ldr	r3, [r7, #4]
 801713a:	2b00      	cmp	r3, #0
 801713c:	d00b      	beq.n	8017156 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2201      	movs	r2, #1
 8017142:	601a      	str	r2, [r3, #0]
 8017144:	e007      	b.n	8017156 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017146:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801714a:	3301      	adds	r3, #1
 801714c:	b2db      	uxtb	r3, r3
 801714e:	b25a      	sxtb	r2, r3
 8017150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017152:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017156:	2301      	movs	r3, #1
 8017158:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801715a:	e001      	b.n	8017160 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801715c:	2300      	movs	r3, #0
 801715e:	637b      	str	r3, [r7, #52]	; 0x34
 8017160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017162:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017164:	693b      	ldr	r3, [r7, #16]
 8017166:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801716c:	4618      	mov	r0, r3
 801716e:	3738      	adds	r7, #56	; 0x38
 8017170:	46bd      	mov	sp, r7
 8017172:	bd80      	pop	{r7, pc}

08017174 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017174:	b580      	push	{r7, lr}
 8017176:	b08e      	sub	sp, #56	; 0x38
 8017178:	af00      	add	r7, sp, #0
 801717a:	6078      	str	r0, [r7, #4]
 801717c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017184:	2b00      	cmp	r3, #0
 8017186:	d10b      	bne.n	80171a0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8017188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801718c:	b672      	cpsid	i
 801718e:	f383 8811 	msr	BASEPRI, r3
 8017192:	f3bf 8f6f 	isb	sy
 8017196:	f3bf 8f4f 	dsb	sy
 801719a:	b662      	cpsie	i
 801719c:	623b      	str	r3, [r7, #32]
 801719e:	e7fe      	b.n	801719e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80171a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d00b      	beq.n	80171c0 <xQueueGiveFromISR+0x4c>
 80171a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171ac:	b672      	cpsid	i
 80171ae:	f383 8811 	msr	BASEPRI, r3
 80171b2:	f3bf 8f6f 	isb	sy
 80171b6:	f3bf 8f4f 	dsb	sy
 80171ba:	b662      	cpsie	i
 80171bc:	61fb      	str	r3, [r7, #28]
 80171be:	e7fe      	b.n	80171be <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80171c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	d103      	bne.n	80171d0 <xQueueGiveFromISR+0x5c>
 80171c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ca:	689b      	ldr	r3, [r3, #8]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d101      	bne.n	80171d4 <xQueueGiveFromISR+0x60>
 80171d0:	2301      	movs	r3, #1
 80171d2:	e000      	b.n	80171d6 <xQueueGiveFromISR+0x62>
 80171d4:	2300      	movs	r3, #0
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d10b      	bne.n	80171f2 <xQueueGiveFromISR+0x7e>
 80171da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171de:	b672      	cpsid	i
 80171e0:	f383 8811 	msr	BASEPRI, r3
 80171e4:	f3bf 8f6f 	isb	sy
 80171e8:	f3bf 8f4f 	dsb	sy
 80171ec:	b662      	cpsie	i
 80171ee:	61bb      	str	r3, [r7, #24]
 80171f0:	e7fe      	b.n	80171f0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80171f2:	f002 fa81 	bl	80196f8 <vPortValidateInterruptPriority>
	__asm volatile
 80171f6:	f3ef 8211 	mrs	r2, BASEPRI
 80171fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171fe:	b672      	cpsid	i
 8017200:	f383 8811 	msr	BASEPRI, r3
 8017204:	f3bf 8f6f 	isb	sy
 8017208:	f3bf 8f4f 	dsb	sy
 801720c:	b662      	cpsie	i
 801720e:	617a      	str	r2, [r7, #20]
 8017210:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8017212:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8017214:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801721a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 801721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801721e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8017220:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017222:	429a      	cmp	r2, r3
 8017224:	d22b      	bcs.n	801727e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8017226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017232:	1c5a      	adds	r2, r3, #1
 8017234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017236:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801723c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017240:	d112      	bne.n	8017268 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017246:	2b00      	cmp	r3, #0
 8017248:	d016      	beq.n	8017278 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801724a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801724c:	3324      	adds	r3, #36	; 0x24
 801724e:	4618      	mov	r0, r3
 8017250:	f001 f966 	bl	8018520 <xTaskRemoveFromEventList>
 8017254:	4603      	mov	r3, r0
 8017256:	2b00      	cmp	r3, #0
 8017258:	d00e      	beq.n	8017278 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	2b00      	cmp	r3, #0
 801725e:	d00b      	beq.n	8017278 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	2201      	movs	r2, #1
 8017264:	601a      	str	r2, [r3, #0]
 8017266:	e007      	b.n	8017278 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801726c:	3301      	adds	r3, #1
 801726e:	b2db      	uxtb	r3, r3
 8017270:	b25a      	sxtb	r2, r3
 8017272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017278:	2301      	movs	r3, #1
 801727a:	637b      	str	r3, [r7, #52]	; 0x34
 801727c:	e001      	b.n	8017282 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801727e:	2300      	movs	r3, #0
 8017280:	637b      	str	r3, [r7, #52]	; 0x34
 8017282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017284:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801728c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801728e:	4618      	mov	r0, r3
 8017290:	3738      	adds	r7, #56	; 0x38
 8017292:	46bd      	mov	sp, r7
 8017294:	bd80      	pop	{r7, pc}
	...

08017298 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b08c      	sub	sp, #48	; 0x30
 801729c:	af00      	add	r7, sp, #0
 801729e:	60f8      	str	r0, [r7, #12]
 80172a0:	60b9      	str	r1, [r7, #8]
 80172a2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80172a4:	2300      	movs	r3, #0
 80172a6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80172ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ae:	2b00      	cmp	r3, #0
 80172b0:	d10b      	bne.n	80172ca <xQueueReceive+0x32>
	__asm volatile
 80172b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172b6:	b672      	cpsid	i
 80172b8:	f383 8811 	msr	BASEPRI, r3
 80172bc:	f3bf 8f6f 	isb	sy
 80172c0:	f3bf 8f4f 	dsb	sy
 80172c4:	b662      	cpsie	i
 80172c6:	623b      	str	r3, [r7, #32]
 80172c8:	e7fe      	b.n	80172c8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80172ca:	68bb      	ldr	r3, [r7, #8]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d103      	bne.n	80172d8 <xQueueReceive+0x40>
 80172d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d101      	bne.n	80172dc <xQueueReceive+0x44>
 80172d8:	2301      	movs	r3, #1
 80172da:	e000      	b.n	80172de <xQueueReceive+0x46>
 80172dc:	2300      	movs	r3, #0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d10b      	bne.n	80172fa <xQueueReceive+0x62>
 80172e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80172e6:	b672      	cpsid	i
 80172e8:	f383 8811 	msr	BASEPRI, r3
 80172ec:	f3bf 8f6f 	isb	sy
 80172f0:	f3bf 8f4f 	dsb	sy
 80172f4:	b662      	cpsie	i
 80172f6:	61fb      	str	r3, [r7, #28]
 80172f8:	e7fe      	b.n	80172f8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80172fa:	f001 fadf 	bl	80188bc <xTaskGetSchedulerState>
 80172fe:	4603      	mov	r3, r0
 8017300:	2b00      	cmp	r3, #0
 8017302:	d102      	bne.n	801730a <xQueueReceive+0x72>
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	2b00      	cmp	r3, #0
 8017308:	d101      	bne.n	801730e <xQueueReceive+0x76>
 801730a:	2301      	movs	r3, #1
 801730c:	e000      	b.n	8017310 <xQueueReceive+0x78>
 801730e:	2300      	movs	r3, #0
 8017310:	2b00      	cmp	r3, #0
 8017312:	d10b      	bne.n	801732c <xQueueReceive+0x94>
 8017314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017318:	b672      	cpsid	i
 801731a:	f383 8811 	msr	BASEPRI, r3
 801731e:	f3bf 8f6f 	isb	sy
 8017322:	f3bf 8f4f 	dsb	sy
 8017326:	b662      	cpsie	i
 8017328:	61bb      	str	r3, [r7, #24]
 801732a:	e7fe      	b.n	801732a <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801732c:	f002 f904 	bl	8019538 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017334:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017338:	2b00      	cmp	r3, #0
 801733a:	d01f      	beq.n	801737c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801733c:	68b9      	ldr	r1, [r7, #8]
 801733e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017340:	f000 fac5 	bl	80178ce <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017346:	1e5a      	subs	r2, r3, #1
 8017348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801734c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801734e:	691b      	ldr	r3, [r3, #16]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d00f      	beq.n	8017374 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017356:	3310      	adds	r3, #16
 8017358:	4618      	mov	r0, r3
 801735a:	f001 f8e1 	bl	8018520 <xTaskRemoveFromEventList>
 801735e:	4603      	mov	r3, r0
 8017360:	2b00      	cmp	r3, #0
 8017362:	d007      	beq.n	8017374 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017364:	4b3c      	ldr	r3, [pc, #240]	; (8017458 <xQueueReceive+0x1c0>)
 8017366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801736a:	601a      	str	r2, [r3, #0]
 801736c:	f3bf 8f4f 	dsb	sy
 8017370:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017374:	f002 f912 	bl	801959c <vPortExitCritical>
				return pdPASS;
 8017378:	2301      	movs	r3, #1
 801737a:	e069      	b.n	8017450 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d103      	bne.n	801738a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017382:	f002 f90b 	bl	801959c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017386:	2300      	movs	r3, #0
 8017388:	e062      	b.n	8017450 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801738a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801738c:	2b00      	cmp	r3, #0
 801738e:	d106      	bne.n	801739e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017390:	f107 0310 	add.w	r3, r7, #16
 8017394:	4618      	mov	r0, r3
 8017396:	f001 f927 	bl	80185e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801739a:	2301      	movs	r3, #1
 801739c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801739e:	f002 f8fd 	bl	801959c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80173a2:	f000 fe85 	bl	80180b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80173a6:	f002 f8c7 	bl	8019538 <vPortEnterCritical>
 80173aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80173b0:	b25b      	sxtb	r3, r3
 80173b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173b6:	d103      	bne.n	80173c0 <xQueueReceive+0x128>
 80173b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173ba:	2200      	movs	r2, #0
 80173bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80173c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80173c6:	b25b      	sxtb	r3, r3
 80173c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80173cc:	d103      	bne.n	80173d6 <xQueueReceive+0x13e>
 80173ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173d0:	2200      	movs	r2, #0
 80173d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80173d6:	f002 f8e1 	bl	801959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80173da:	1d3a      	adds	r2, r7, #4
 80173dc:	f107 0310 	add.w	r3, r7, #16
 80173e0:	4611      	mov	r1, r2
 80173e2:	4618      	mov	r0, r3
 80173e4:	f001 f916 	bl	8018614 <xTaskCheckForTimeOut>
 80173e8:	4603      	mov	r3, r0
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d123      	bne.n	8017436 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80173ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80173f0:	f000 fae5 	bl	80179be <prvIsQueueEmpty>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d017      	beq.n	801742a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80173fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173fc:	3324      	adds	r3, #36	; 0x24
 80173fe:	687a      	ldr	r2, [r7, #4]
 8017400:	4611      	mov	r1, r2
 8017402:	4618      	mov	r0, r3
 8017404:	f001 f83a 	bl	801847c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801740a:	f000 fa86 	bl	801791a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801740e:	f000 fe5d 	bl	80180cc <xTaskResumeAll>
 8017412:	4603      	mov	r3, r0
 8017414:	2b00      	cmp	r3, #0
 8017416:	d189      	bne.n	801732c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8017418:	4b0f      	ldr	r3, [pc, #60]	; (8017458 <xQueueReceive+0x1c0>)
 801741a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801741e:	601a      	str	r2, [r3, #0]
 8017420:	f3bf 8f4f 	dsb	sy
 8017424:	f3bf 8f6f 	isb	sy
 8017428:	e780      	b.n	801732c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801742a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801742c:	f000 fa75 	bl	801791a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017430:	f000 fe4c 	bl	80180cc <xTaskResumeAll>
 8017434:	e77a      	b.n	801732c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017438:	f000 fa6f 	bl	801791a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801743c:	f000 fe46 	bl	80180cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017442:	f000 fabc 	bl	80179be <prvIsQueueEmpty>
 8017446:	4603      	mov	r3, r0
 8017448:	2b00      	cmp	r3, #0
 801744a:	f43f af6f 	beq.w	801732c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801744e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017450:	4618      	mov	r0, r3
 8017452:	3730      	adds	r7, #48	; 0x30
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}
 8017458:	e000ed04 	.word	0xe000ed04

0801745c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b08e      	sub	sp, #56	; 0x38
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
 8017464:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017466:	2300      	movs	r3, #0
 8017468:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801746e:	2300      	movs	r3, #0
 8017470:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017474:	2b00      	cmp	r3, #0
 8017476:	d10b      	bne.n	8017490 <xQueueSemaphoreTake+0x34>
 8017478:	f04f 0350 	mov.w	r3, #80	; 0x50
 801747c:	b672      	cpsid	i
 801747e:	f383 8811 	msr	BASEPRI, r3
 8017482:	f3bf 8f6f 	isb	sy
 8017486:	f3bf 8f4f 	dsb	sy
 801748a:	b662      	cpsie	i
 801748c:	623b      	str	r3, [r7, #32]
 801748e:	e7fe      	b.n	801748e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017494:	2b00      	cmp	r3, #0
 8017496:	d00b      	beq.n	80174b0 <xQueueSemaphoreTake+0x54>
 8017498:	f04f 0350 	mov.w	r3, #80	; 0x50
 801749c:	b672      	cpsid	i
 801749e:	f383 8811 	msr	BASEPRI, r3
 80174a2:	f3bf 8f6f 	isb	sy
 80174a6:	f3bf 8f4f 	dsb	sy
 80174aa:	b662      	cpsie	i
 80174ac:	61fb      	str	r3, [r7, #28]
 80174ae:	e7fe      	b.n	80174ae <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80174b0:	f001 fa04 	bl	80188bc <xTaskGetSchedulerState>
 80174b4:	4603      	mov	r3, r0
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d102      	bne.n	80174c0 <xQueueSemaphoreTake+0x64>
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d101      	bne.n	80174c4 <xQueueSemaphoreTake+0x68>
 80174c0:	2301      	movs	r3, #1
 80174c2:	e000      	b.n	80174c6 <xQueueSemaphoreTake+0x6a>
 80174c4:	2300      	movs	r3, #0
 80174c6:	2b00      	cmp	r3, #0
 80174c8:	d10b      	bne.n	80174e2 <xQueueSemaphoreTake+0x86>
 80174ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80174ce:	b672      	cpsid	i
 80174d0:	f383 8811 	msr	BASEPRI, r3
 80174d4:	f3bf 8f6f 	isb	sy
 80174d8:	f3bf 8f4f 	dsb	sy
 80174dc:	b662      	cpsie	i
 80174de:	61bb      	str	r3, [r7, #24]
 80174e0:	e7fe      	b.n	80174e0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80174e2:	f002 f829 	bl	8019538 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80174e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80174ea:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80174ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d024      	beq.n	801753c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80174f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174f4:	1e5a      	subs	r2, r3, #1
 80174f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174f8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80174fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d104      	bne.n	801750c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8017502:	f001 fb55 	bl	8018bb0 <pvTaskIncrementMutexHeldCount>
 8017506:	4602      	mov	r2, r0
 8017508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801750c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801750e:	691b      	ldr	r3, [r3, #16]
 8017510:	2b00      	cmp	r3, #0
 8017512:	d00f      	beq.n	8017534 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017516:	3310      	adds	r3, #16
 8017518:	4618      	mov	r0, r3
 801751a:	f001 f801 	bl	8018520 <xTaskRemoveFromEventList>
 801751e:	4603      	mov	r3, r0
 8017520:	2b00      	cmp	r3, #0
 8017522:	d007      	beq.n	8017534 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017524:	4b54      	ldr	r3, [pc, #336]	; (8017678 <xQueueSemaphoreTake+0x21c>)
 8017526:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801752a:	601a      	str	r2, [r3, #0]
 801752c:	f3bf 8f4f 	dsb	sy
 8017530:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017534:	f002 f832 	bl	801959c <vPortExitCritical>
				return pdPASS;
 8017538:	2301      	movs	r3, #1
 801753a:	e098      	b.n	801766e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801753c:	683b      	ldr	r3, [r7, #0]
 801753e:	2b00      	cmp	r3, #0
 8017540:	d112      	bne.n	8017568 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017544:	2b00      	cmp	r3, #0
 8017546:	d00b      	beq.n	8017560 <xQueueSemaphoreTake+0x104>
 8017548:	f04f 0350 	mov.w	r3, #80	; 0x50
 801754c:	b672      	cpsid	i
 801754e:	f383 8811 	msr	BASEPRI, r3
 8017552:	f3bf 8f6f 	isb	sy
 8017556:	f3bf 8f4f 	dsb	sy
 801755a:	b662      	cpsie	i
 801755c:	617b      	str	r3, [r7, #20]
 801755e:	e7fe      	b.n	801755e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017560:	f002 f81c 	bl	801959c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017564:	2300      	movs	r3, #0
 8017566:	e082      	b.n	801766e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801756a:	2b00      	cmp	r3, #0
 801756c:	d106      	bne.n	801757c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801756e:	f107 030c 	add.w	r3, r7, #12
 8017572:	4618      	mov	r0, r3
 8017574:	f001 f838 	bl	80185e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017578:	2301      	movs	r3, #1
 801757a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801757c:	f002 f80e 	bl	801959c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017580:	f000 fd96 	bl	80180b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017584:	f001 ffd8 	bl	8019538 <vPortEnterCritical>
 8017588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801758a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801758e:	b25b      	sxtb	r3, r3
 8017590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017594:	d103      	bne.n	801759e <xQueueSemaphoreTake+0x142>
 8017596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017598:	2200      	movs	r2, #0
 801759a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801759e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80175a4:	b25b      	sxtb	r3, r3
 80175a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175aa:	d103      	bne.n	80175b4 <xQueueSemaphoreTake+0x158>
 80175ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175ae:	2200      	movs	r2, #0
 80175b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80175b4:	f001 fff2 	bl	801959c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80175b8:	463a      	mov	r2, r7
 80175ba:	f107 030c 	add.w	r3, r7, #12
 80175be:	4611      	mov	r1, r2
 80175c0:	4618      	mov	r0, r3
 80175c2:	f001 f827 	bl	8018614 <xTaskCheckForTimeOut>
 80175c6:	4603      	mov	r3, r0
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d132      	bne.n	8017632 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80175cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80175ce:	f000 f9f6 	bl	80179be <prvIsQueueEmpty>
 80175d2:	4603      	mov	r3, r0
 80175d4:	2b00      	cmp	r3, #0
 80175d6:	d026      	beq.n	8017626 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80175d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	2b00      	cmp	r3, #0
 80175de:	d109      	bne.n	80175f4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80175e0:	f001 ffaa 	bl	8019538 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80175e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e6:	689b      	ldr	r3, [r3, #8]
 80175e8:	4618      	mov	r0, r3
 80175ea:	f001 f985 	bl	80188f8 <xTaskPriorityInherit>
 80175ee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80175f0:	f001 ffd4 	bl	801959c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80175f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f6:	3324      	adds	r3, #36	; 0x24
 80175f8:	683a      	ldr	r2, [r7, #0]
 80175fa:	4611      	mov	r1, r2
 80175fc:	4618      	mov	r0, r3
 80175fe:	f000 ff3d 	bl	801847c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8017602:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017604:	f000 f989 	bl	801791a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8017608:	f000 fd60 	bl	80180cc <xTaskResumeAll>
 801760c:	4603      	mov	r3, r0
 801760e:	2b00      	cmp	r3, #0
 8017610:	f47f af67 	bne.w	80174e2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8017614:	4b18      	ldr	r3, [pc, #96]	; (8017678 <xQueueSemaphoreTake+0x21c>)
 8017616:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801761a:	601a      	str	r2, [r3, #0]
 801761c:	f3bf 8f4f 	dsb	sy
 8017620:	f3bf 8f6f 	isb	sy
 8017624:	e75d      	b.n	80174e2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8017626:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017628:	f000 f977 	bl	801791a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801762c:	f000 fd4e 	bl	80180cc <xTaskResumeAll>
 8017630:	e757      	b.n	80174e2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017634:	f000 f971 	bl	801791a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017638:	f000 fd48 	bl	80180cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801763c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801763e:	f000 f9be 	bl	80179be <prvIsQueueEmpty>
 8017642:	4603      	mov	r3, r0
 8017644:	2b00      	cmp	r3, #0
 8017646:	f43f af4c 	beq.w	80174e2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801764c:	2b00      	cmp	r3, #0
 801764e:	d00d      	beq.n	801766c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8017650:	f001 ff72 	bl	8019538 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017654:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017656:	f000 f8b8 	bl	80177ca <prvGetDisinheritPriorityAfterTimeout>
 801765a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801765c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801765e:	689b      	ldr	r3, [r3, #8]
 8017660:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017662:	4618      	mov	r0, r3
 8017664:	f001 fa20 	bl	8018aa8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017668:	f001 ff98 	bl	801959c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801766c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801766e:	4618      	mov	r0, r3
 8017670:	3738      	adds	r7, #56	; 0x38
 8017672:	46bd      	mov	sp, r7
 8017674:	bd80      	pop	{r7, pc}
 8017676:	bf00      	nop
 8017678:	e000ed04 	.word	0xe000ed04

0801767c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801767c:	b580      	push	{r7, lr}
 801767e:	b08e      	sub	sp, #56	; 0x38
 8017680:	af00      	add	r7, sp, #0
 8017682:	60f8      	str	r0, [r7, #12]
 8017684:	60b9      	str	r1, [r7, #8]
 8017686:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801768c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801768e:	2b00      	cmp	r3, #0
 8017690:	d10b      	bne.n	80176aa <xQueueReceiveFromISR+0x2e>
 8017692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017696:	b672      	cpsid	i
 8017698:	f383 8811 	msr	BASEPRI, r3
 801769c:	f3bf 8f6f 	isb	sy
 80176a0:	f3bf 8f4f 	dsb	sy
 80176a4:	b662      	cpsie	i
 80176a6:	623b      	str	r3, [r7, #32]
 80176a8:	e7fe      	b.n	80176a8 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80176aa:	68bb      	ldr	r3, [r7, #8]
 80176ac:	2b00      	cmp	r3, #0
 80176ae:	d103      	bne.n	80176b8 <xQueueReceiveFromISR+0x3c>
 80176b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80176b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d101      	bne.n	80176bc <xQueueReceiveFromISR+0x40>
 80176b8:	2301      	movs	r3, #1
 80176ba:	e000      	b.n	80176be <xQueueReceiveFromISR+0x42>
 80176bc:	2300      	movs	r3, #0
 80176be:	2b00      	cmp	r3, #0
 80176c0:	d10b      	bne.n	80176da <xQueueReceiveFromISR+0x5e>
 80176c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176c6:	b672      	cpsid	i
 80176c8:	f383 8811 	msr	BASEPRI, r3
 80176cc:	f3bf 8f6f 	isb	sy
 80176d0:	f3bf 8f4f 	dsb	sy
 80176d4:	b662      	cpsie	i
 80176d6:	61fb      	str	r3, [r7, #28]
 80176d8:	e7fe      	b.n	80176d8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80176da:	f002 f80d 	bl	80196f8 <vPortValidateInterruptPriority>
	__asm volatile
 80176de:	f3ef 8211 	mrs	r2, BASEPRI
 80176e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80176e6:	b672      	cpsid	i
 80176e8:	f383 8811 	msr	BASEPRI, r3
 80176ec:	f3bf 8f6f 	isb	sy
 80176f0:	f3bf 8f4f 	dsb	sy
 80176f4:	b662      	cpsie	i
 80176f6:	61ba      	str	r2, [r7, #24]
 80176f8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80176fa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80176fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80176fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017702:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017706:	2b00      	cmp	r3, #0
 8017708:	d02f      	beq.n	801776a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801770a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801770c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017710:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8017714:	68b9      	ldr	r1, [r7, #8]
 8017716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017718:	f000 f8d9 	bl	80178ce <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801771c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801771e:	1e5a      	subs	r2, r3, #1
 8017720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017722:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8017724:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801772c:	d112      	bne.n	8017754 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801772e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017730:	691b      	ldr	r3, [r3, #16]
 8017732:	2b00      	cmp	r3, #0
 8017734:	d016      	beq.n	8017764 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017738:	3310      	adds	r3, #16
 801773a:	4618      	mov	r0, r3
 801773c:	f000 fef0 	bl	8018520 <xTaskRemoveFromEventList>
 8017740:	4603      	mov	r3, r0
 8017742:	2b00      	cmp	r3, #0
 8017744:	d00e      	beq.n	8017764 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d00b      	beq.n	8017764 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	2201      	movs	r2, #1
 8017750:	601a      	str	r2, [r3, #0]
 8017752:	e007      	b.n	8017764 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017754:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017758:	3301      	adds	r3, #1
 801775a:	b2db      	uxtb	r3, r3
 801775c:	b25a      	sxtb	r2, r3
 801775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017760:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017764:	2301      	movs	r3, #1
 8017766:	637b      	str	r3, [r7, #52]	; 0x34
 8017768:	e001      	b.n	801776e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 801776a:	2300      	movs	r3, #0
 801776c:	637b      	str	r3, [r7, #52]	; 0x34
 801776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017770:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017772:	693b      	ldr	r3, [r7, #16]
 8017774:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801777a:	4618      	mov	r0, r3
 801777c:	3738      	adds	r7, #56	; 0x38
 801777e:	46bd      	mov	sp, r7
 8017780:	bd80      	pop	{r7, pc}

08017782 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017782:	b580      	push	{r7, lr}
 8017784:	b084      	sub	sp, #16
 8017786:	af00      	add	r7, sp, #0
 8017788:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	2b00      	cmp	r3, #0
 8017792:	d10b      	bne.n	80177ac <vQueueDelete+0x2a>
	__asm volatile
 8017794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017798:	b672      	cpsid	i
 801779a:	f383 8811 	msr	BASEPRI, r3
 801779e:	f3bf 8f6f 	isb	sy
 80177a2:	f3bf 8f4f 	dsb	sy
 80177a6:	b662      	cpsie	i
 80177a8:	60bb      	str	r3, [r7, #8]
 80177aa:	e7fe      	b.n	80177aa <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80177ac:	68f8      	ldr	r0, [r7, #12]
 80177ae:	f000 f95d 	bl	8017a6c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80177b2:	68fb      	ldr	r3, [r7, #12]
 80177b4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d102      	bne.n	80177c2 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80177bc:	68f8      	ldr	r0, [r7, #12]
 80177be:	f002 f8a5 	bl	801990c <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80177c2:	bf00      	nop
 80177c4:	3710      	adds	r7, #16
 80177c6:	46bd      	mov	sp, r7
 80177c8:	bd80      	pop	{r7, pc}

080177ca <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80177ca:	b480      	push	{r7}
 80177cc:	b085      	sub	sp, #20
 80177ce:	af00      	add	r7, sp, #0
 80177d0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80177d6:	2b00      	cmp	r3, #0
 80177d8:	d006      	beq.n	80177e8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80177de:	681b      	ldr	r3, [r3, #0]
 80177e0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80177e4:	60fb      	str	r3, [r7, #12]
 80177e6:	e001      	b.n	80177ec <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80177e8:	2300      	movs	r3, #0
 80177ea:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80177ec:	68fb      	ldr	r3, [r7, #12]
	}
 80177ee:	4618      	mov	r0, r3
 80177f0:	3714      	adds	r7, #20
 80177f2:	46bd      	mov	sp, r7
 80177f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f8:	4770      	bx	lr

080177fa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80177fa:	b580      	push	{r7, lr}
 80177fc:	b086      	sub	sp, #24
 80177fe:	af00      	add	r7, sp, #0
 8017800:	60f8      	str	r0, [r7, #12]
 8017802:	60b9      	str	r1, [r7, #8]
 8017804:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8017806:	2300      	movs	r3, #0
 8017808:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801780a:	68fb      	ldr	r3, [r7, #12]
 801780c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801780e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017814:	2b00      	cmp	r3, #0
 8017816:	d10d      	bne.n	8017834 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	681b      	ldr	r3, [r3, #0]
 801781c:	2b00      	cmp	r3, #0
 801781e:	d14d      	bne.n	80178bc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8017820:	68fb      	ldr	r3, [r7, #12]
 8017822:	689b      	ldr	r3, [r3, #8]
 8017824:	4618      	mov	r0, r3
 8017826:	f001 f8cf 	bl	80189c8 <xTaskPriorityDisinherit>
 801782a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	2200      	movs	r2, #0
 8017830:	609a      	str	r2, [r3, #8]
 8017832:	e043      	b.n	80178bc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	2b00      	cmp	r3, #0
 8017838:	d119      	bne.n	801786e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	6858      	ldr	r0, [r3, #4]
 801783e:	68fb      	ldr	r3, [r7, #12]
 8017840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017842:	461a      	mov	r2, r3
 8017844:	68b9      	ldr	r1, [r7, #8]
 8017846:	f002 fef5 	bl	801a634 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	685a      	ldr	r2, [r3, #4]
 801784e:	68fb      	ldr	r3, [r7, #12]
 8017850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017852:	441a      	add	r2, r3
 8017854:	68fb      	ldr	r3, [r7, #12]
 8017856:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	685a      	ldr	r2, [r3, #4]
 801785c:	68fb      	ldr	r3, [r7, #12]
 801785e:	689b      	ldr	r3, [r3, #8]
 8017860:	429a      	cmp	r2, r3
 8017862:	d32b      	bcc.n	80178bc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017864:	68fb      	ldr	r3, [r7, #12]
 8017866:	681a      	ldr	r2, [r3, #0]
 8017868:	68fb      	ldr	r3, [r7, #12]
 801786a:	605a      	str	r2, [r3, #4]
 801786c:	e026      	b.n	80178bc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801786e:	68fb      	ldr	r3, [r7, #12]
 8017870:	68d8      	ldr	r0, [r3, #12]
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017876:	461a      	mov	r2, r3
 8017878:	68b9      	ldr	r1, [r7, #8]
 801787a:	f002 fedb 	bl	801a634 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	68da      	ldr	r2, [r3, #12]
 8017882:	68fb      	ldr	r3, [r7, #12]
 8017884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017886:	425b      	negs	r3, r3
 8017888:	441a      	add	r2, r3
 801788a:	68fb      	ldr	r3, [r7, #12]
 801788c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801788e:	68fb      	ldr	r3, [r7, #12]
 8017890:	68da      	ldr	r2, [r3, #12]
 8017892:	68fb      	ldr	r3, [r7, #12]
 8017894:	681b      	ldr	r3, [r3, #0]
 8017896:	429a      	cmp	r2, r3
 8017898:	d207      	bcs.n	80178aa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801789a:	68fb      	ldr	r3, [r7, #12]
 801789c:	689a      	ldr	r2, [r3, #8]
 801789e:	68fb      	ldr	r3, [r7, #12]
 80178a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178a2:	425b      	negs	r3, r3
 80178a4:	441a      	add	r2, r3
 80178a6:	68fb      	ldr	r3, [r7, #12]
 80178a8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80178aa:	687b      	ldr	r3, [r7, #4]
 80178ac:	2b02      	cmp	r3, #2
 80178ae:	d105      	bne.n	80178bc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	d002      	beq.n	80178bc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80178b6:	693b      	ldr	r3, [r7, #16]
 80178b8:	3b01      	subs	r3, #1
 80178ba:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80178bc:	693b      	ldr	r3, [r7, #16]
 80178be:	1c5a      	adds	r2, r3, #1
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80178c4:	697b      	ldr	r3, [r7, #20]
}
 80178c6:	4618      	mov	r0, r3
 80178c8:	3718      	adds	r7, #24
 80178ca:	46bd      	mov	sp, r7
 80178cc:	bd80      	pop	{r7, pc}

080178ce <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80178ce:	b580      	push	{r7, lr}
 80178d0:	b082      	sub	sp, #8
 80178d2:	af00      	add	r7, sp, #0
 80178d4:	6078      	str	r0, [r7, #4]
 80178d6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80178d8:	687b      	ldr	r3, [r7, #4]
 80178da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d018      	beq.n	8017912 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	68da      	ldr	r2, [r3, #12]
 80178e4:	687b      	ldr	r3, [r7, #4]
 80178e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80178e8:	441a      	add	r2, r3
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80178ee:	687b      	ldr	r3, [r7, #4]
 80178f0:	68da      	ldr	r2, [r3, #12]
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	689b      	ldr	r3, [r3, #8]
 80178f6:	429a      	cmp	r2, r3
 80178f8:	d303      	bcc.n	8017902 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681a      	ldr	r2, [r3, #0]
 80178fe:	687b      	ldr	r3, [r7, #4]
 8017900:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	68d9      	ldr	r1, [r3, #12]
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801790a:	461a      	mov	r2, r3
 801790c:	6838      	ldr	r0, [r7, #0]
 801790e:	f002 fe91 	bl	801a634 <memcpy>
	}
}
 8017912:	bf00      	nop
 8017914:	3708      	adds	r7, #8
 8017916:	46bd      	mov	sp, r7
 8017918:	bd80      	pop	{r7, pc}

0801791a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801791a:	b580      	push	{r7, lr}
 801791c:	b084      	sub	sp, #16
 801791e:	af00      	add	r7, sp, #0
 8017920:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8017922:	f001 fe09 	bl	8019538 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8017926:	687b      	ldr	r3, [r7, #4]
 8017928:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801792c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801792e:	e011      	b.n	8017954 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017934:	2b00      	cmp	r3, #0
 8017936:	d012      	beq.n	801795e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	3324      	adds	r3, #36	; 0x24
 801793c:	4618      	mov	r0, r3
 801793e:	f000 fdef 	bl	8018520 <xTaskRemoveFromEventList>
 8017942:	4603      	mov	r3, r0
 8017944:	2b00      	cmp	r3, #0
 8017946:	d001      	beq.n	801794c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017948:	f000 fec8 	bl	80186dc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801794c:	7bfb      	ldrb	r3, [r7, #15]
 801794e:	3b01      	subs	r3, #1
 8017950:	b2db      	uxtb	r3, r3
 8017952:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017954:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017958:	2b00      	cmp	r3, #0
 801795a:	dce9      	bgt.n	8017930 <prvUnlockQueue+0x16>
 801795c:	e000      	b.n	8017960 <prvUnlockQueue+0x46>
					break;
 801795e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	22ff      	movs	r2, #255	; 0xff
 8017964:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017968:	f001 fe18 	bl	801959c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801796c:	f001 fde4 	bl	8019538 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017976:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017978:	e011      	b.n	801799e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801797a:	687b      	ldr	r3, [r7, #4]
 801797c:	691b      	ldr	r3, [r3, #16]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d012      	beq.n	80179a8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	3310      	adds	r3, #16
 8017986:	4618      	mov	r0, r3
 8017988:	f000 fdca 	bl	8018520 <xTaskRemoveFromEventList>
 801798c:	4603      	mov	r3, r0
 801798e:	2b00      	cmp	r3, #0
 8017990:	d001      	beq.n	8017996 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017992:	f000 fea3 	bl	80186dc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017996:	7bbb      	ldrb	r3, [r7, #14]
 8017998:	3b01      	subs	r3, #1
 801799a:	b2db      	uxtb	r3, r3
 801799c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801799e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80179a2:	2b00      	cmp	r3, #0
 80179a4:	dce9      	bgt.n	801797a <prvUnlockQueue+0x60>
 80179a6:	e000      	b.n	80179aa <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80179a8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80179aa:	687b      	ldr	r3, [r7, #4]
 80179ac:	22ff      	movs	r2, #255	; 0xff
 80179ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80179b2:	f001 fdf3 	bl	801959c <vPortExitCritical>
}
 80179b6:	bf00      	nop
 80179b8:	3710      	adds	r7, #16
 80179ba:	46bd      	mov	sp, r7
 80179bc:	bd80      	pop	{r7, pc}

080179be <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80179be:	b580      	push	{r7, lr}
 80179c0:	b084      	sub	sp, #16
 80179c2:	af00      	add	r7, sp, #0
 80179c4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80179c6:	f001 fdb7 	bl	8019538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d102      	bne.n	80179d8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80179d2:	2301      	movs	r3, #1
 80179d4:	60fb      	str	r3, [r7, #12]
 80179d6:	e001      	b.n	80179dc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80179d8:	2300      	movs	r3, #0
 80179da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80179dc:	f001 fdde 	bl	801959c <vPortExitCritical>

	return xReturn;
 80179e0:	68fb      	ldr	r3, [r7, #12]
}
 80179e2:	4618      	mov	r0, r3
 80179e4:	3710      	adds	r7, #16
 80179e6:	46bd      	mov	sp, r7
 80179e8:	bd80      	pop	{r7, pc}

080179ea <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80179ea:	b580      	push	{r7, lr}
 80179ec:	b084      	sub	sp, #16
 80179ee:	af00      	add	r7, sp, #0
 80179f0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80179f2:	f001 fda1 	bl	8019538 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80179fe:	429a      	cmp	r2, r3
 8017a00:	d102      	bne.n	8017a08 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8017a02:	2301      	movs	r3, #1
 8017a04:	60fb      	str	r3, [r7, #12]
 8017a06:	e001      	b.n	8017a0c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8017a08:	2300      	movs	r3, #0
 8017a0a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8017a0c:	f001 fdc6 	bl	801959c <vPortExitCritical>

	return xReturn;
 8017a10:	68fb      	ldr	r3, [r7, #12]
}
 8017a12:	4618      	mov	r0, r3
 8017a14:	3710      	adds	r7, #16
 8017a16:	46bd      	mov	sp, r7
 8017a18:	bd80      	pop	{r7, pc}
	...

08017a1c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8017a1c:	b480      	push	{r7}
 8017a1e:	b085      	sub	sp, #20
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a26:	2300      	movs	r3, #0
 8017a28:	60fb      	str	r3, [r7, #12]
 8017a2a:	e014      	b.n	8017a56 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8017a2c:	4a0e      	ldr	r2, [pc, #56]	; (8017a68 <vQueueAddToRegistry+0x4c>)
 8017a2e:	68fb      	ldr	r3, [r7, #12]
 8017a30:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	d10b      	bne.n	8017a50 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017a38:	490b      	ldr	r1, [pc, #44]	; (8017a68 <vQueueAddToRegistry+0x4c>)
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	683a      	ldr	r2, [r7, #0]
 8017a3e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017a42:	4a09      	ldr	r2, [pc, #36]	; (8017a68 <vQueueAddToRegistry+0x4c>)
 8017a44:	68fb      	ldr	r3, [r7, #12]
 8017a46:	00db      	lsls	r3, r3, #3
 8017a48:	4413      	add	r3, r2
 8017a4a:	687a      	ldr	r2, [r7, #4]
 8017a4c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8017a4e:	e005      	b.n	8017a5c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a50:	68fb      	ldr	r3, [r7, #12]
 8017a52:	3301      	adds	r3, #1
 8017a54:	60fb      	str	r3, [r7, #12]
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	2b07      	cmp	r3, #7
 8017a5a:	d9e7      	bls.n	8017a2c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8017a5c:	bf00      	nop
 8017a5e:	3714      	adds	r7, #20
 8017a60:	46bd      	mov	sp, r7
 8017a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a66:	4770      	bx	lr
 8017a68:	2001ca88 	.word	0x2001ca88

08017a6c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8017a6c:	b480      	push	{r7}
 8017a6e:	b085      	sub	sp, #20
 8017a70:	af00      	add	r7, sp, #0
 8017a72:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017a74:	2300      	movs	r3, #0
 8017a76:	60fb      	str	r3, [r7, #12]
 8017a78:	e016      	b.n	8017aa8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8017a7a:	4a10      	ldr	r2, [pc, #64]	; (8017abc <vQueueUnregisterQueue+0x50>)
 8017a7c:	68fb      	ldr	r3, [r7, #12]
 8017a7e:	00db      	lsls	r3, r3, #3
 8017a80:	4413      	add	r3, r2
 8017a82:	685b      	ldr	r3, [r3, #4]
 8017a84:	687a      	ldr	r2, [r7, #4]
 8017a86:	429a      	cmp	r2, r3
 8017a88:	d10b      	bne.n	8017aa2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8017a8a:	4a0c      	ldr	r2, [pc, #48]	; (8017abc <vQueueUnregisterQueue+0x50>)
 8017a8c:	68fb      	ldr	r3, [r7, #12]
 8017a8e:	2100      	movs	r1, #0
 8017a90:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017a94:	4a09      	ldr	r2, [pc, #36]	; (8017abc <vQueueUnregisterQueue+0x50>)
 8017a96:	68fb      	ldr	r3, [r7, #12]
 8017a98:	00db      	lsls	r3, r3, #3
 8017a9a:	4413      	add	r3, r2
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	605a      	str	r2, [r3, #4]
				break;
 8017aa0:	e005      	b.n	8017aae <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	3301      	adds	r3, #1
 8017aa6:	60fb      	str	r3, [r7, #12]
 8017aa8:	68fb      	ldr	r3, [r7, #12]
 8017aaa:	2b07      	cmp	r3, #7
 8017aac:	d9e5      	bls.n	8017a7a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8017aae:	bf00      	nop
 8017ab0:	3714      	adds	r7, #20
 8017ab2:	46bd      	mov	sp, r7
 8017ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ab8:	4770      	bx	lr
 8017aba:	bf00      	nop
 8017abc:	2001ca88 	.word	0x2001ca88

08017ac0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017ac0:	b580      	push	{r7, lr}
 8017ac2:	b086      	sub	sp, #24
 8017ac4:	af00      	add	r7, sp, #0
 8017ac6:	60f8      	str	r0, [r7, #12]
 8017ac8:	60b9      	str	r1, [r7, #8]
 8017aca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8017acc:	68fb      	ldr	r3, [r7, #12]
 8017ace:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8017ad0:	f001 fd32 	bl	8019538 <vPortEnterCritical>
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017ada:	b25b      	sxtb	r3, r3
 8017adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ae0:	d103      	bne.n	8017aea <vQueueWaitForMessageRestricted+0x2a>
 8017ae2:	697b      	ldr	r3, [r7, #20]
 8017ae4:	2200      	movs	r2, #0
 8017ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017aea:	697b      	ldr	r3, [r7, #20]
 8017aec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017af0:	b25b      	sxtb	r3, r3
 8017af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017af6:	d103      	bne.n	8017b00 <vQueueWaitForMessageRestricted+0x40>
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	2200      	movs	r2, #0
 8017afc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017b00:	f001 fd4c 	bl	801959c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8017b04:	697b      	ldr	r3, [r7, #20]
 8017b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d106      	bne.n	8017b1a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8017b0c:	697b      	ldr	r3, [r7, #20]
 8017b0e:	3324      	adds	r3, #36	; 0x24
 8017b10:	687a      	ldr	r2, [r7, #4]
 8017b12:	68b9      	ldr	r1, [r7, #8]
 8017b14:	4618      	mov	r0, r3
 8017b16:	f000 fcd7 	bl	80184c8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8017b1a:	6978      	ldr	r0, [r7, #20]
 8017b1c:	f7ff fefd 	bl	801791a <prvUnlockQueue>
	}
 8017b20:	bf00      	nop
 8017b22:	3718      	adds	r7, #24
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b08e      	sub	sp, #56	; 0x38
 8017b2c:	af04      	add	r7, sp, #16
 8017b2e:	60f8      	str	r0, [r7, #12]
 8017b30:	60b9      	str	r1, [r7, #8]
 8017b32:	607a      	str	r2, [r7, #4]
 8017b34:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b38:	2b00      	cmp	r3, #0
 8017b3a:	d10b      	bne.n	8017b54 <xTaskCreateStatic+0x2c>
 8017b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b40:	b672      	cpsid	i
 8017b42:	f383 8811 	msr	BASEPRI, r3
 8017b46:	f3bf 8f6f 	isb	sy
 8017b4a:	f3bf 8f4f 	dsb	sy
 8017b4e:	b662      	cpsie	i
 8017b50:	623b      	str	r3, [r7, #32]
 8017b52:	e7fe      	b.n	8017b52 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8017b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d10b      	bne.n	8017b72 <xTaskCreateStatic+0x4a>
 8017b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b5e:	b672      	cpsid	i
 8017b60:	f383 8811 	msr	BASEPRI, r3
 8017b64:	f3bf 8f6f 	isb	sy
 8017b68:	f3bf 8f4f 	dsb	sy
 8017b6c:	b662      	cpsie	i
 8017b6e:	61fb      	str	r3, [r7, #28]
 8017b70:	e7fe      	b.n	8017b70 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017b72:	235c      	movs	r3, #92	; 0x5c
 8017b74:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017b76:	693b      	ldr	r3, [r7, #16]
 8017b78:	2b5c      	cmp	r3, #92	; 0x5c
 8017b7a:	d00b      	beq.n	8017b94 <xTaskCreateStatic+0x6c>
 8017b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b80:	b672      	cpsid	i
 8017b82:	f383 8811 	msr	BASEPRI, r3
 8017b86:	f3bf 8f6f 	isb	sy
 8017b8a:	f3bf 8f4f 	dsb	sy
 8017b8e:	b662      	cpsie	i
 8017b90:	61bb      	str	r3, [r7, #24]
 8017b92:	e7fe      	b.n	8017b92 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017b94:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b98:	2b00      	cmp	r3, #0
 8017b9a:	d01e      	beq.n	8017bda <xTaskCreateStatic+0xb2>
 8017b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d01b      	beq.n	8017bda <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ba4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017baa:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bae:	2202      	movs	r2, #2
 8017bb0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017bb4:	2300      	movs	r3, #0
 8017bb6:	9303      	str	r3, [sp, #12]
 8017bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bba:	9302      	str	r3, [sp, #8]
 8017bbc:	f107 0314 	add.w	r3, r7, #20
 8017bc0:	9301      	str	r3, [sp, #4]
 8017bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bc4:	9300      	str	r3, [sp, #0]
 8017bc6:	683b      	ldr	r3, [r7, #0]
 8017bc8:	687a      	ldr	r2, [r7, #4]
 8017bca:	68b9      	ldr	r1, [r7, #8]
 8017bcc:	68f8      	ldr	r0, [r7, #12]
 8017bce:	f000 f850 	bl	8017c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017bd2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017bd4:	f000 f8de 	bl	8017d94 <prvAddNewTaskToReadyList>
 8017bd8:	e001      	b.n	8017bde <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017bda:	2300      	movs	r3, #0
 8017bdc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017bde:	697b      	ldr	r3, [r7, #20]
	}
 8017be0:	4618      	mov	r0, r3
 8017be2:	3728      	adds	r7, #40	; 0x28
 8017be4:	46bd      	mov	sp, r7
 8017be6:	bd80      	pop	{r7, pc}

08017be8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017be8:	b580      	push	{r7, lr}
 8017bea:	b08c      	sub	sp, #48	; 0x30
 8017bec:	af04      	add	r7, sp, #16
 8017bee:	60f8      	str	r0, [r7, #12]
 8017bf0:	60b9      	str	r1, [r7, #8]
 8017bf2:	603b      	str	r3, [r7, #0]
 8017bf4:	4613      	mov	r3, r2
 8017bf6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017bf8:	88fb      	ldrh	r3, [r7, #6]
 8017bfa:	009b      	lsls	r3, r3, #2
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	f001 fdbd 	bl	801977c <pvPortMalloc>
 8017c02:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017c04:	697b      	ldr	r3, [r7, #20]
 8017c06:	2b00      	cmp	r3, #0
 8017c08:	d00e      	beq.n	8017c28 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017c0a:	205c      	movs	r0, #92	; 0x5c
 8017c0c:	f001 fdb6 	bl	801977c <pvPortMalloc>
 8017c10:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017c12:	69fb      	ldr	r3, [r7, #28]
 8017c14:	2b00      	cmp	r3, #0
 8017c16:	d003      	beq.n	8017c20 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017c18:	69fb      	ldr	r3, [r7, #28]
 8017c1a:	697a      	ldr	r2, [r7, #20]
 8017c1c:	631a      	str	r2, [r3, #48]	; 0x30
 8017c1e:	e005      	b.n	8017c2c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017c20:	6978      	ldr	r0, [r7, #20]
 8017c22:	f001 fe73 	bl	801990c <vPortFree>
 8017c26:	e001      	b.n	8017c2c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017c28:	2300      	movs	r3, #0
 8017c2a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017c2c:	69fb      	ldr	r3, [r7, #28]
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d017      	beq.n	8017c62 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017c32:	69fb      	ldr	r3, [r7, #28]
 8017c34:	2200      	movs	r2, #0
 8017c36:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017c3a:	88fa      	ldrh	r2, [r7, #6]
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	9303      	str	r3, [sp, #12]
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	9302      	str	r3, [sp, #8]
 8017c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c46:	9301      	str	r3, [sp, #4]
 8017c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c4a:	9300      	str	r3, [sp, #0]
 8017c4c:	683b      	ldr	r3, [r7, #0]
 8017c4e:	68b9      	ldr	r1, [r7, #8]
 8017c50:	68f8      	ldr	r0, [r7, #12]
 8017c52:	f000 f80e 	bl	8017c72 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017c56:	69f8      	ldr	r0, [r7, #28]
 8017c58:	f000 f89c 	bl	8017d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017c5c:	2301      	movs	r3, #1
 8017c5e:	61bb      	str	r3, [r7, #24]
 8017c60:	e002      	b.n	8017c68 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017c62:	f04f 33ff 	mov.w	r3, #4294967295
 8017c66:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017c68:	69bb      	ldr	r3, [r7, #24]
	}
 8017c6a:	4618      	mov	r0, r3
 8017c6c:	3720      	adds	r7, #32
 8017c6e:	46bd      	mov	sp, r7
 8017c70:	bd80      	pop	{r7, pc}

08017c72 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017c72:	b580      	push	{r7, lr}
 8017c74:	b088      	sub	sp, #32
 8017c76:	af00      	add	r7, sp, #0
 8017c78:	60f8      	str	r0, [r7, #12]
 8017c7a:	60b9      	str	r1, [r7, #8]
 8017c7c:	607a      	str	r2, [r7, #4]
 8017c7e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c82:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	009b      	lsls	r3, r3, #2
 8017c88:	461a      	mov	r2, r3
 8017c8a:	21a5      	movs	r1, #165	; 0xa5
 8017c8c:	f002 fcdd 	bl	801a64a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017c94:	6879      	ldr	r1, [r7, #4]
 8017c96:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017c9a:	440b      	add	r3, r1
 8017c9c:	009b      	lsls	r3, r3, #2
 8017c9e:	4413      	add	r3, r2
 8017ca0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017ca2:	69bb      	ldr	r3, [r7, #24]
 8017ca4:	f023 0307 	bic.w	r3, r3, #7
 8017ca8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017caa:	69bb      	ldr	r3, [r7, #24]
 8017cac:	f003 0307 	and.w	r3, r3, #7
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d00b      	beq.n	8017ccc <prvInitialiseNewTask+0x5a>
 8017cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017cb8:	b672      	cpsid	i
 8017cba:	f383 8811 	msr	BASEPRI, r3
 8017cbe:	f3bf 8f6f 	isb	sy
 8017cc2:	f3bf 8f4f 	dsb	sy
 8017cc6:	b662      	cpsie	i
 8017cc8:	617b      	str	r3, [r7, #20]
 8017cca:	e7fe      	b.n	8017cca <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017ccc:	68bb      	ldr	r3, [r7, #8]
 8017cce:	2b00      	cmp	r3, #0
 8017cd0:	d01f      	beq.n	8017d12 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cd2:	2300      	movs	r3, #0
 8017cd4:	61fb      	str	r3, [r7, #28]
 8017cd6:	e012      	b.n	8017cfe <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017cd8:	68ba      	ldr	r2, [r7, #8]
 8017cda:	69fb      	ldr	r3, [r7, #28]
 8017cdc:	4413      	add	r3, r2
 8017cde:	7819      	ldrb	r1, [r3, #0]
 8017ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017ce2:	69fb      	ldr	r3, [r7, #28]
 8017ce4:	4413      	add	r3, r2
 8017ce6:	3334      	adds	r3, #52	; 0x34
 8017ce8:	460a      	mov	r2, r1
 8017cea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017cec:	68ba      	ldr	r2, [r7, #8]
 8017cee:	69fb      	ldr	r3, [r7, #28]
 8017cf0:	4413      	add	r3, r2
 8017cf2:	781b      	ldrb	r3, [r3, #0]
 8017cf4:	2b00      	cmp	r3, #0
 8017cf6:	d006      	beq.n	8017d06 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017cf8:	69fb      	ldr	r3, [r7, #28]
 8017cfa:	3301      	adds	r3, #1
 8017cfc:	61fb      	str	r3, [r7, #28]
 8017cfe:	69fb      	ldr	r3, [r7, #28]
 8017d00:	2b0f      	cmp	r3, #15
 8017d02:	d9e9      	bls.n	8017cd8 <prvInitialiseNewTask+0x66>
 8017d04:	e000      	b.n	8017d08 <prvInitialiseNewTask+0x96>
			{
				break;
 8017d06:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d0a:	2200      	movs	r2, #0
 8017d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017d10:	e003      	b.n	8017d1a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d14:	2200      	movs	r2, #0
 8017d16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d1c:	2b37      	cmp	r3, #55	; 0x37
 8017d1e:	d901      	bls.n	8017d24 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017d20:	2337      	movs	r3, #55	; 0x37
 8017d22:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d28:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d2e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d32:	2200      	movs	r2, #0
 8017d34:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d38:	3304      	adds	r3, #4
 8017d3a:	4618      	mov	r0, r3
 8017d3c:	f7fe fd76 	bl	801682c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d42:	3318      	adds	r3, #24
 8017d44:	4618      	mov	r0, r3
 8017d46:	f7fe fd71 	bl	801682c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d52:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d5e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d62:	2200      	movs	r2, #0
 8017d64:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d68:	2200      	movs	r2, #0
 8017d6a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017d6e:	683a      	ldr	r2, [r7, #0]
 8017d70:	68f9      	ldr	r1, [r7, #12]
 8017d72:	69b8      	ldr	r0, [r7, #24]
 8017d74:	f001 fad8 	bl	8019328 <pxPortInitialiseStack>
 8017d78:	4602      	mov	r2, r0
 8017d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017d7c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d80:	2b00      	cmp	r3, #0
 8017d82:	d002      	beq.n	8017d8a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017d8a:	bf00      	nop
 8017d8c:	3720      	adds	r7, #32
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
	...

08017d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017d94:	b580      	push	{r7, lr}
 8017d96:	b082      	sub	sp, #8
 8017d98:	af00      	add	r7, sp, #0
 8017d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017d9c:	f001 fbcc 	bl	8019538 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017da0:	4b2d      	ldr	r3, [pc, #180]	; (8017e58 <prvAddNewTaskToReadyList+0xc4>)
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	3301      	adds	r3, #1
 8017da6:	4a2c      	ldr	r2, [pc, #176]	; (8017e58 <prvAddNewTaskToReadyList+0xc4>)
 8017da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017daa:	4b2c      	ldr	r3, [pc, #176]	; (8017e5c <prvAddNewTaskToReadyList+0xc8>)
 8017dac:	681b      	ldr	r3, [r3, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d109      	bne.n	8017dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017db2:	4a2a      	ldr	r2, [pc, #168]	; (8017e5c <prvAddNewTaskToReadyList+0xc8>)
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017db8:	4b27      	ldr	r3, [pc, #156]	; (8017e58 <prvAddNewTaskToReadyList+0xc4>)
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	2b01      	cmp	r3, #1
 8017dbe:	d110      	bne.n	8017de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017dc0:	f000 fcb0 	bl	8018724 <prvInitialiseTaskLists>
 8017dc4:	e00d      	b.n	8017de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017dc6:	4b26      	ldr	r3, [pc, #152]	; (8017e60 <prvAddNewTaskToReadyList+0xcc>)
 8017dc8:	681b      	ldr	r3, [r3, #0]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d109      	bne.n	8017de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017dce:	4b23      	ldr	r3, [pc, #140]	; (8017e5c <prvAddNewTaskToReadyList+0xc8>)
 8017dd0:	681b      	ldr	r3, [r3, #0]
 8017dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017dd8:	429a      	cmp	r2, r3
 8017dda:	d802      	bhi.n	8017de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017ddc:	4a1f      	ldr	r2, [pc, #124]	; (8017e5c <prvAddNewTaskToReadyList+0xc8>)
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017de2:	4b20      	ldr	r3, [pc, #128]	; (8017e64 <prvAddNewTaskToReadyList+0xd0>)
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	3301      	adds	r3, #1
 8017de8:	4a1e      	ldr	r2, [pc, #120]	; (8017e64 <prvAddNewTaskToReadyList+0xd0>)
 8017dea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017dec:	4b1d      	ldr	r3, [pc, #116]	; (8017e64 <prvAddNewTaskToReadyList+0xd0>)
 8017dee:	681a      	ldr	r2, [r3, #0]
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017df8:	4b1b      	ldr	r3, [pc, #108]	; (8017e68 <prvAddNewTaskToReadyList+0xd4>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	429a      	cmp	r2, r3
 8017dfe:	d903      	bls.n	8017e08 <prvAddNewTaskToReadyList+0x74>
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e04:	4a18      	ldr	r2, [pc, #96]	; (8017e68 <prvAddNewTaskToReadyList+0xd4>)
 8017e06:	6013      	str	r3, [r2, #0]
 8017e08:	687b      	ldr	r3, [r7, #4]
 8017e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e0c:	4613      	mov	r3, r2
 8017e0e:	009b      	lsls	r3, r3, #2
 8017e10:	4413      	add	r3, r2
 8017e12:	009b      	lsls	r3, r3, #2
 8017e14:	4a15      	ldr	r2, [pc, #84]	; (8017e6c <prvAddNewTaskToReadyList+0xd8>)
 8017e16:	441a      	add	r2, r3
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	3304      	adds	r3, #4
 8017e1c:	4619      	mov	r1, r3
 8017e1e:	4610      	mov	r0, r2
 8017e20:	f7fe fd11 	bl	8016846 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017e24:	f001 fbba 	bl	801959c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017e28:	4b0d      	ldr	r3, [pc, #52]	; (8017e60 <prvAddNewTaskToReadyList+0xcc>)
 8017e2a:	681b      	ldr	r3, [r3, #0]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d00e      	beq.n	8017e4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017e30:	4b0a      	ldr	r3, [pc, #40]	; (8017e5c <prvAddNewTaskToReadyList+0xc8>)
 8017e32:	681b      	ldr	r3, [r3, #0]
 8017e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017e3a:	429a      	cmp	r2, r3
 8017e3c:	d207      	bcs.n	8017e4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017e3e:	4b0c      	ldr	r3, [pc, #48]	; (8017e70 <prvAddNewTaskToReadyList+0xdc>)
 8017e40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e44:	601a      	str	r2, [r3, #0]
 8017e46:	f3bf 8f4f 	dsb	sy
 8017e4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017e4e:	bf00      	nop
 8017e50:	3708      	adds	r7, #8
 8017e52:	46bd      	mov	sp, r7
 8017e54:	bd80      	pop	{r7, pc}
 8017e56:	bf00      	nop
 8017e58:	20000f04 	.word	0x20000f04
 8017e5c:	20000a30 	.word	0x20000a30
 8017e60:	20000f10 	.word	0x20000f10
 8017e64:	20000f20 	.word	0x20000f20
 8017e68:	20000f0c 	.word	0x20000f0c
 8017e6c:	20000a34 	.word	0x20000a34
 8017e70:	e000ed04 	.word	0xe000ed04

08017e74 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8017e74:	b580      	push	{r7, lr}
 8017e76:	b08a      	sub	sp, #40	; 0x28
 8017e78:	af00      	add	r7, sp, #0
 8017e7a:	6078      	str	r0, [r7, #4]
 8017e7c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8017e7e:	2300      	movs	r3, #0
 8017e80:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d10b      	bne.n	8017ea0 <vTaskDelayUntil+0x2c>
 8017e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e8c:	b672      	cpsid	i
 8017e8e:	f383 8811 	msr	BASEPRI, r3
 8017e92:	f3bf 8f6f 	isb	sy
 8017e96:	f3bf 8f4f 	dsb	sy
 8017e9a:	b662      	cpsie	i
 8017e9c:	617b      	str	r3, [r7, #20]
 8017e9e:	e7fe      	b.n	8017e9e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8017ea0:	683b      	ldr	r3, [r7, #0]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	d10b      	bne.n	8017ebe <vTaskDelayUntil+0x4a>
 8017ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eaa:	b672      	cpsid	i
 8017eac:	f383 8811 	msr	BASEPRI, r3
 8017eb0:	f3bf 8f6f 	isb	sy
 8017eb4:	f3bf 8f4f 	dsb	sy
 8017eb8:	b662      	cpsie	i
 8017eba:	613b      	str	r3, [r7, #16]
 8017ebc:	e7fe      	b.n	8017ebc <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8017ebe:	4b2a      	ldr	r3, [pc, #168]	; (8017f68 <vTaskDelayUntil+0xf4>)
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d00b      	beq.n	8017ede <vTaskDelayUntil+0x6a>
 8017ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017eca:	b672      	cpsid	i
 8017ecc:	f383 8811 	msr	BASEPRI, r3
 8017ed0:	f3bf 8f6f 	isb	sy
 8017ed4:	f3bf 8f4f 	dsb	sy
 8017ed8:	b662      	cpsie	i
 8017eda:	60fb      	str	r3, [r7, #12]
 8017edc:	e7fe      	b.n	8017edc <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8017ede:	f000 f8e7 	bl	80180b0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8017ee2:	4b22      	ldr	r3, [pc, #136]	; (8017f6c <vTaskDelayUntil+0xf8>)
 8017ee4:	681b      	ldr	r3, [r3, #0]
 8017ee6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	681b      	ldr	r3, [r3, #0]
 8017eec:	683a      	ldr	r2, [r7, #0]
 8017eee:	4413      	add	r3, r2
 8017ef0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	681b      	ldr	r3, [r3, #0]
 8017ef6:	6a3a      	ldr	r2, [r7, #32]
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d20b      	bcs.n	8017f14 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	681b      	ldr	r3, [r3, #0]
 8017f00:	69fa      	ldr	r2, [r7, #28]
 8017f02:	429a      	cmp	r2, r3
 8017f04:	d211      	bcs.n	8017f2a <vTaskDelayUntil+0xb6>
 8017f06:	69fa      	ldr	r2, [r7, #28]
 8017f08:	6a3b      	ldr	r3, [r7, #32]
 8017f0a:	429a      	cmp	r2, r3
 8017f0c:	d90d      	bls.n	8017f2a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8017f0e:	2301      	movs	r3, #1
 8017f10:	627b      	str	r3, [r7, #36]	; 0x24
 8017f12:	e00a      	b.n	8017f2a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8017f14:	687b      	ldr	r3, [r7, #4]
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	69fa      	ldr	r2, [r7, #28]
 8017f1a:	429a      	cmp	r2, r3
 8017f1c:	d303      	bcc.n	8017f26 <vTaskDelayUntil+0xb2>
 8017f1e:	69fa      	ldr	r2, [r7, #28]
 8017f20:	6a3b      	ldr	r3, [r7, #32]
 8017f22:	429a      	cmp	r2, r3
 8017f24:	d901      	bls.n	8017f2a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8017f26:	2301      	movs	r3, #1
 8017f28:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	69fa      	ldr	r2, [r7, #28]
 8017f2e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8017f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f32:	2b00      	cmp	r3, #0
 8017f34:	d006      	beq.n	8017f44 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8017f36:	69fa      	ldr	r2, [r7, #28]
 8017f38:	6a3b      	ldr	r3, [r7, #32]
 8017f3a:	1ad3      	subs	r3, r2, r3
 8017f3c:	2100      	movs	r1, #0
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f000 fe4a 	bl	8018bd8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8017f44:	f000 f8c2 	bl	80180cc <xTaskResumeAll>
 8017f48:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017f4a:	69bb      	ldr	r3, [r7, #24]
 8017f4c:	2b00      	cmp	r3, #0
 8017f4e:	d107      	bne.n	8017f60 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8017f50:	4b07      	ldr	r3, [pc, #28]	; (8017f70 <vTaskDelayUntil+0xfc>)
 8017f52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017f56:	601a      	str	r2, [r3, #0]
 8017f58:	f3bf 8f4f 	dsb	sy
 8017f5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017f60:	bf00      	nop
 8017f62:	3728      	adds	r7, #40	; 0x28
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}
 8017f68:	20000f2c 	.word	0x20000f2c
 8017f6c:	20000f08 	.word	0x20000f08
 8017f70:	e000ed04 	.word	0xe000ed04

08017f74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017f74:	b580      	push	{r7, lr}
 8017f76:	b084      	sub	sp, #16
 8017f78:	af00      	add	r7, sp, #0
 8017f7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017f7c:	2300      	movs	r3, #0
 8017f7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017f80:	687b      	ldr	r3, [r7, #4]
 8017f82:	2b00      	cmp	r3, #0
 8017f84:	d018      	beq.n	8017fb8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017f86:	4b14      	ldr	r3, [pc, #80]	; (8017fd8 <vTaskDelay+0x64>)
 8017f88:	681b      	ldr	r3, [r3, #0]
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d00b      	beq.n	8017fa6 <vTaskDelay+0x32>
 8017f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f92:	b672      	cpsid	i
 8017f94:	f383 8811 	msr	BASEPRI, r3
 8017f98:	f3bf 8f6f 	isb	sy
 8017f9c:	f3bf 8f4f 	dsb	sy
 8017fa0:	b662      	cpsie	i
 8017fa2:	60bb      	str	r3, [r7, #8]
 8017fa4:	e7fe      	b.n	8017fa4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8017fa6:	f000 f883 	bl	80180b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017faa:	2100      	movs	r1, #0
 8017fac:	6878      	ldr	r0, [r7, #4]
 8017fae:	f000 fe13 	bl	8018bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017fb2:	f000 f88b 	bl	80180cc <xTaskResumeAll>
 8017fb6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017fb8:	68fb      	ldr	r3, [r7, #12]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d107      	bne.n	8017fce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8017fbe:	4b07      	ldr	r3, [pc, #28]	; (8017fdc <vTaskDelay+0x68>)
 8017fc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017fc4:	601a      	str	r2, [r3, #0]
 8017fc6:	f3bf 8f4f 	dsb	sy
 8017fca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017fce:	bf00      	nop
 8017fd0:	3710      	adds	r7, #16
 8017fd2:	46bd      	mov	sp, r7
 8017fd4:	bd80      	pop	{r7, pc}
 8017fd6:	bf00      	nop
 8017fd8:	20000f2c 	.word	0x20000f2c
 8017fdc:	e000ed04 	.word	0xe000ed04

08017fe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017fe0:	b580      	push	{r7, lr}
 8017fe2:	b08a      	sub	sp, #40	; 0x28
 8017fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017fea:	2300      	movs	r3, #0
 8017fec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017fee:	463a      	mov	r2, r7
 8017ff0:	1d39      	adds	r1, r7, #4
 8017ff2:	f107 0308 	add.w	r3, r7, #8
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fe fbc4 	bl	8016784 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017ffc:	6839      	ldr	r1, [r7, #0]
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	68ba      	ldr	r2, [r7, #8]
 8018002:	9202      	str	r2, [sp, #8]
 8018004:	9301      	str	r3, [sp, #4]
 8018006:	2300      	movs	r3, #0
 8018008:	9300      	str	r3, [sp, #0]
 801800a:	2300      	movs	r3, #0
 801800c:	460a      	mov	r2, r1
 801800e:	4922      	ldr	r1, [pc, #136]	; (8018098 <vTaskStartScheduler+0xb8>)
 8018010:	4822      	ldr	r0, [pc, #136]	; (801809c <vTaskStartScheduler+0xbc>)
 8018012:	f7ff fd89 	bl	8017b28 <xTaskCreateStatic>
 8018016:	4602      	mov	r2, r0
 8018018:	4b21      	ldr	r3, [pc, #132]	; (80180a0 <vTaskStartScheduler+0xc0>)
 801801a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801801c:	4b20      	ldr	r3, [pc, #128]	; (80180a0 <vTaskStartScheduler+0xc0>)
 801801e:	681b      	ldr	r3, [r3, #0]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d002      	beq.n	801802a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8018024:	2301      	movs	r3, #1
 8018026:	617b      	str	r3, [r7, #20]
 8018028:	e001      	b.n	801802e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801802a:	2300      	movs	r3, #0
 801802c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	2b01      	cmp	r3, #1
 8018032:	d102      	bne.n	801803a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8018034:	f000 fe24 	bl	8018c80 <xTimerCreateTimerTask>
 8018038:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801803a:	697b      	ldr	r3, [r7, #20]
 801803c:	2b01      	cmp	r3, #1
 801803e:	d117      	bne.n	8018070 <vTaskStartScheduler+0x90>
 8018040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018044:	b672      	cpsid	i
 8018046:	f383 8811 	msr	BASEPRI, r3
 801804a:	f3bf 8f6f 	isb	sy
 801804e:	f3bf 8f4f 	dsb	sy
 8018052:	b662      	cpsie	i
 8018054:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8018056:	4b13      	ldr	r3, [pc, #76]	; (80180a4 <vTaskStartScheduler+0xc4>)
 8018058:	f04f 32ff 	mov.w	r2, #4294967295
 801805c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801805e:	4b12      	ldr	r3, [pc, #72]	; (80180a8 <vTaskStartScheduler+0xc8>)
 8018060:	2201      	movs	r2, #1
 8018062:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8018064:	4b11      	ldr	r3, [pc, #68]	; (80180ac <vTaskStartScheduler+0xcc>)
 8018066:	2200      	movs	r2, #0
 8018068:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801806a:	f001 f9e9 	bl	8019440 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801806e:	e00f      	b.n	8018090 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8018070:	697b      	ldr	r3, [r7, #20]
 8018072:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018076:	d10b      	bne.n	8018090 <vTaskStartScheduler+0xb0>
 8018078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801807c:	b672      	cpsid	i
 801807e:	f383 8811 	msr	BASEPRI, r3
 8018082:	f3bf 8f6f 	isb	sy
 8018086:	f3bf 8f4f 	dsb	sy
 801808a:	b662      	cpsie	i
 801808c:	60fb      	str	r3, [r7, #12]
 801808e:	e7fe      	b.n	801808e <vTaskStartScheduler+0xae>
}
 8018090:	bf00      	nop
 8018092:	3718      	adds	r7, #24
 8018094:	46bd      	mov	sp, r7
 8018096:	bd80      	pop	{r7, pc}
 8018098:	0801d5a0 	.word	0x0801d5a0
 801809c:	080186f5 	.word	0x080186f5
 80180a0:	20000f28 	.word	0x20000f28
 80180a4:	20000f24 	.word	0x20000f24
 80180a8:	20000f10 	.word	0x20000f10
 80180ac:	20000f08 	.word	0x20000f08

080180b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80180b0:	b480      	push	{r7}
 80180b2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80180b4:	4b04      	ldr	r3, [pc, #16]	; (80180c8 <vTaskSuspendAll+0x18>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	3301      	adds	r3, #1
 80180ba:	4a03      	ldr	r2, [pc, #12]	; (80180c8 <vTaskSuspendAll+0x18>)
 80180bc:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80180be:	bf00      	nop
 80180c0:	46bd      	mov	sp, r7
 80180c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180c6:	4770      	bx	lr
 80180c8:	20000f2c 	.word	0x20000f2c

080180cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b084      	sub	sp, #16
 80180d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80180d2:	2300      	movs	r3, #0
 80180d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80180d6:	2300      	movs	r3, #0
 80180d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80180da:	4b42      	ldr	r3, [pc, #264]	; (80181e4 <xTaskResumeAll+0x118>)
 80180dc:	681b      	ldr	r3, [r3, #0]
 80180de:	2b00      	cmp	r3, #0
 80180e0:	d10b      	bne.n	80180fa <xTaskResumeAll+0x2e>
 80180e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80180e6:	b672      	cpsid	i
 80180e8:	f383 8811 	msr	BASEPRI, r3
 80180ec:	f3bf 8f6f 	isb	sy
 80180f0:	f3bf 8f4f 	dsb	sy
 80180f4:	b662      	cpsie	i
 80180f6:	603b      	str	r3, [r7, #0]
 80180f8:	e7fe      	b.n	80180f8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80180fa:	f001 fa1d 	bl	8019538 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80180fe:	4b39      	ldr	r3, [pc, #228]	; (80181e4 <xTaskResumeAll+0x118>)
 8018100:	681b      	ldr	r3, [r3, #0]
 8018102:	3b01      	subs	r3, #1
 8018104:	4a37      	ldr	r2, [pc, #220]	; (80181e4 <xTaskResumeAll+0x118>)
 8018106:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018108:	4b36      	ldr	r3, [pc, #216]	; (80181e4 <xTaskResumeAll+0x118>)
 801810a:	681b      	ldr	r3, [r3, #0]
 801810c:	2b00      	cmp	r3, #0
 801810e:	d162      	bne.n	80181d6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8018110:	4b35      	ldr	r3, [pc, #212]	; (80181e8 <xTaskResumeAll+0x11c>)
 8018112:	681b      	ldr	r3, [r3, #0]
 8018114:	2b00      	cmp	r3, #0
 8018116:	d05e      	beq.n	80181d6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018118:	e02f      	b.n	801817a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801811a:	4b34      	ldr	r3, [pc, #208]	; (80181ec <xTaskResumeAll+0x120>)
 801811c:	68db      	ldr	r3, [r3, #12]
 801811e:	68db      	ldr	r3, [r3, #12]
 8018120:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	3318      	adds	r3, #24
 8018126:	4618      	mov	r0, r3
 8018128:	f7fe fbea 	bl	8016900 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801812c:	68fb      	ldr	r3, [r7, #12]
 801812e:	3304      	adds	r3, #4
 8018130:	4618      	mov	r0, r3
 8018132:	f7fe fbe5 	bl	8016900 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801813a:	4b2d      	ldr	r3, [pc, #180]	; (80181f0 <xTaskResumeAll+0x124>)
 801813c:	681b      	ldr	r3, [r3, #0]
 801813e:	429a      	cmp	r2, r3
 8018140:	d903      	bls.n	801814a <xTaskResumeAll+0x7e>
 8018142:	68fb      	ldr	r3, [r7, #12]
 8018144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018146:	4a2a      	ldr	r2, [pc, #168]	; (80181f0 <xTaskResumeAll+0x124>)
 8018148:	6013      	str	r3, [r2, #0]
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801814e:	4613      	mov	r3, r2
 8018150:	009b      	lsls	r3, r3, #2
 8018152:	4413      	add	r3, r2
 8018154:	009b      	lsls	r3, r3, #2
 8018156:	4a27      	ldr	r2, [pc, #156]	; (80181f4 <xTaskResumeAll+0x128>)
 8018158:	441a      	add	r2, r3
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	3304      	adds	r3, #4
 801815e:	4619      	mov	r1, r3
 8018160:	4610      	mov	r0, r2
 8018162:	f7fe fb70 	bl	8016846 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018166:	68fb      	ldr	r3, [r7, #12]
 8018168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801816a:	4b23      	ldr	r3, [pc, #140]	; (80181f8 <xTaskResumeAll+0x12c>)
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018170:	429a      	cmp	r2, r3
 8018172:	d302      	bcc.n	801817a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8018174:	4b21      	ldr	r3, [pc, #132]	; (80181fc <xTaskResumeAll+0x130>)
 8018176:	2201      	movs	r2, #1
 8018178:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801817a:	4b1c      	ldr	r3, [pc, #112]	; (80181ec <xTaskResumeAll+0x120>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d1cb      	bne.n	801811a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018182:	68fb      	ldr	r3, [r7, #12]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d001      	beq.n	801818c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018188:	f000 fb68 	bl	801885c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801818c:	4b1c      	ldr	r3, [pc, #112]	; (8018200 <xTaskResumeAll+0x134>)
 801818e:	681b      	ldr	r3, [r3, #0]
 8018190:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d010      	beq.n	80181ba <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018198:	f000 f858 	bl	801824c <xTaskIncrementTick>
 801819c:	4603      	mov	r3, r0
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d002      	beq.n	80181a8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80181a2:	4b16      	ldr	r3, [pc, #88]	; (80181fc <xTaskResumeAll+0x130>)
 80181a4:	2201      	movs	r2, #1
 80181a6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80181a8:	687b      	ldr	r3, [r7, #4]
 80181aa:	3b01      	subs	r3, #1
 80181ac:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80181ae:	687b      	ldr	r3, [r7, #4]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d1f1      	bne.n	8018198 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80181b4:	4b12      	ldr	r3, [pc, #72]	; (8018200 <xTaskResumeAll+0x134>)
 80181b6:	2200      	movs	r2, #0
 80181b8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80181ba:	4b10      	ldr	r3, [pc, #64]	; (80181fc <xTaskResumeAll+0x130>)
 80181bc:	681b      	ldr	r3, [r3, #0]
 80181be:	2b00      	cmp	r3, #0
 80181c0:	d009      	beq.n	80181d6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80181c2:	2301      	movs	r3, #1
 80181c4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80181c6:	4b0f      	ldr	r3, [pc, #60]	; (8018204 <xTaskResumeAll+0x138>)
 80181c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80181cc:	601a      	str	r2, [r3, #0]
 80181ce:	f3bf 8f4f 	dsb	sy
 80181d2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80181d6:	f001 f9e1 	bl	801959c <vPortExitCritical>

	return xAlreadyYielded;
 80181da:	68bb      	ldr	r3, [r7, #8]
}
 80181dc:	4618      	mov	r0, r3
 80181de:	3710      	adds	r7, #16
 80181e0:	46bd      	mov	sp, r7
 80181e2:	bd80      	pop	{r7, pc}
 80181e4:	20000f2c 	.word	0x20000f2c
 80181e8:	20000f04 	.word	0x20000f04
 80181ec:	20000ec4 	.word	0x20000ec4
 80181f0:	20000f0c 	.word	0x20000f0c
 80181f4:	20000a34 	.word	0x20000a34
 80181f8:	20000a30 	.word	0x20000a30
 80181fc:	20000f18 	.word	0x20000f18
 8018200:	20000f14 	.word	0x20000f14
 8018204:	e000ed04 	.word	0xe000ed04

08018208 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8018208:	b480      	push	{r7}
 801820a:	b083      	sub	sp, #12
 801820c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801820e:	4b05      	ldr	r3, [pc, #20]	; (8018224 <xTaskGetTickCount+0x1c>)
 8018210:	681b      	ldr	r3, [r3, #0]
 8018212:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8018214:	687b      	ldr	r3, [r7, #4]
}
 8018216:	4618      	mov	r0, r3
 8018218:	370c      	adds	r7, #12
 801821a:	46bd      	mov	sp, r7
 801821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018220:	4770      	bx	lr
 8018222:	bf00      	nop
 8018224:	20000f08 	.word	0x20000f08

08018228 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8018228:	b580      	push	{r7, lr}
 801822a:	b082      	sub	sp, #8
 801822c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801822e:	f001 fa63 	bl	80196f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8018232:	2300      	movs	r3, #0
 8018234:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018236:	4b04      	ldr	r3, [pc, #16]	; (8018248 <xTaskGetTickCountFromISR+0x20>)
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801823c:	683b      	ldr	r3, [r7, #0]
}
 801823e:	4618      	mov	r0, r3
 8018240:	3708      	adds	r7, #8
 8018242:	46bd      	mov	sp, r7
 8018244:	bd80      	pop	{r7, pc}
 8018246:	bf00      	nop
 8018248:	20000f08 	.word	0x20000f08

0801824c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801824c:	b580      	push	{r7, lr}
 801824e:	b086      	sub	sp, #24
 8018250:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018252:	2300      	movs	r3, #0
 8018254:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018256:	4b4f      	ldr	r3, [pc, #316]	; (8018394 <xTaskIncrementTick+0x148>)
 8018258:	681b      	ldr	r3, [r3, #0]
 801825a:	2b00      	cmp	r3, #0
 801825c:	f040 808a 	bne.w	8018374 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018260:	4b4d      	ldr	r3, [pc, #308]	; (8018398 <xTaskIncrementTick+0x14c>)
 8018262:	681b      	ldr	r3, [r3, #0]
 8018264:	3301      	adds	r3, #1
 8018266:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018268:	4a4b      	ldr	r2, [pc, #300]	; (8018398 <xTaskIncrementTick+0x14c>)
 801826a:	693b      	ldr	r3, [r7, #16]
 801826c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801826e:	693b      	ldr	r3, [r7, #16]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d121      	bne.n	80182b8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8018274:	4b49      	ldr	r3, [pc, #292]	; (801839c <xTaskIncrementTick+0x150>)
 8018276:	681b      	ldr	r3, [r3, #0]
 8018278:	681b      	ldr	r3, [r3, #0]
 801827a:	2b00      	cmp	r3, #0
 801827c:	d00b      	beq.n	8018296 <xTaskIncrementTick+0x4a>
 801827e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018282:	b672      	cpsid	i
 8018284:	f383 8811 	msr	BASEPRI, r3
 8018288:	f3bf 8f6f 	isb	sy
 801828c:	f3bf 8f4f 	dsb	sy
 8018290:	b662      	cpsie	i
 8018292:	603b      	str	r3, [r7, #0]
 8018294:	e7fe      	b.n	8018294 <xTaskIncrementTick+0x48>
 8018296:	4b41      	ldr	r3, [pc, #260]	; (801839c <xTaskIncrementTick+0x150>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	60fb      	str	r3, [r7, #12]
 801829c:	4b40      	ldr	r3, [pc, #256]	; (80183a0 <xTaskIncrementTick+0x154>)
 801829e:	681b      	ldr	r3, [r3, #0]
 80182a0:	4a3e      	ldr	r2, [pc, #248]	; (801839c <xTaskIncrementTick+0x150>)
 80182a2:	6013      	str	r3, [r2, #0]
 80182a4:	4a3e      	ldr	r2, [pc, #248]	; (80183a0 <xTaskIncrementTick+0x154>)
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	6013      	str	r3, [r2, #0]
 80182aa:	4b3e      	ldr	r3, [pc, #248]	; (80183a4 <xTaskIncrementTick+0x158>)
 80182ac:	681b      	ldr	r3, [r3, #0]
 80182ae:	3301      	adds	r3, #1
 80182b0:	4a3c      	ldr	r2, [pc, #240]	; (80183a4 <xTaskIncrementTick+0x158>)
 80182b2:	6013      	str	r3, [r2, #0]
 80182b4:	f000 fad2 	bl	801885c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80182b8:	4b3b      	ldr	r3, [pc, #236]	; (80183a8 <xTaskIncrementTick+0x15c>)
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	693a      	ldr	r2, [r7, #16]
 80182be:	429a      	cmp	r2, r3
 80182c0:	d349      	bcc.n	8018356 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80182c2:	4b36      	ldr	r3, [pc, #216]	; (801839c <xTaskIncrementTick+0x150>)
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	681b      	ldr	r3, [r3, #0]
 80182c8:	2b00      	cmp	r3, #0
 80182ca:	d104      	bne.n	80182d6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80182cc:	4b36      	ldr	r3, [pc, #216]	; (80183a8 <xTaskIncrementTick+0x15c>)
 80182ce:	f04f 32ff 	mov.w	r2, #4294967295
 80182d2:	601a      	str	r2, [r3, #0]
					break;
 80182d4:	e03f      	b.n	8018356 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182d6:	4b31      	ldr	r3, [pc, #196]	; (801839c <xTaskIncrementTick+0x150>)
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	68db      	ldr	r3, [r3, #12]
 80182dc:	68db      	ldr	r3, [r3, #12]
 80182de:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80182e0:	68bb      	ldr	r3, [r7, #8]
 80182e2:	685b      	ldr	r3, [r3, #4]
 80182e4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80182e6:	693a      	ldr	r2, [r7, #16]
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	429a      	cmp	r2, r3
 80182ec:	d203      	bcs.n	80182f6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80182ee:	4a2e      	ldr	r2, [pc, #184]	; (80183a8 <xTaskIncrementTick+0x15c>)
 80182f0:	687b      	ldr	r3, [r7, #4]
 80182f2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80182f4:	e02f      	b.n	8018356 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	3304      	adds	r3, #4
 80182fa:	4618      	mov	r0, r3
 80182fc:	f7fe fb00 	bl	8016900 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018300:	68bb      	ldr	r3, [r7, #8]
 8018302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018304:	2b00      	cmp	r3, #0
 8018306:	d004      	beq.n	8018312 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	3318      	adds	r3, #24
 801830c:	4618      	mov	r0, r3
 801830e:	f7fe faf7 	bl	8016900 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018316:	4b25      	ldr	r3, [pc, #148]	; (80183ac <xTaskIncrementTick+0x160>)
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	429a      	cmp	r2, r3
 801831c:	d903      	bls.n	8018326 <xTaskIncrementTick+0xda>
 801831e:	68bb      	ldr	r3, [r7, #8]
 8018320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018322:	4a22      	ldr	r2, [pc, #136]	; (80183ac <xTaskIncrementTick+0x160>)
 8018324:	6013      	str	r3, [r2, #0]
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801832a:	4613      	mov	r3, r2
 801832c:	009b      	lsls	r3, r3, #2
 801832e:	4413      	add	r3, r2
 8018330:	009b      	lsls	r3, r3, #2
 8018332:	4a1f      	ldr	r2, [pc, #124]	; (80183b0 <xTaskIncrementTick+0x164>)
 8018334:	441a      	add	r2, r3
 8018336:	68bb      	ldr	r3, [r7, #8]
 8018338:	3304      	adds	r3, #4
 801833a:	4619      	mov	r1, r3
 801833c:	4610      	mov	r0, r2
 801833e:	f7fe fa82 	bl	8016846 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018342:	68bb      	ldr	r3, [r7, #8]
 8018344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018346:	4b1b      	ldr	r3, [pc, #108]	; (80183b4 <xTaskIncrementTick+0x168>)
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801834c:	429a      	cmp	r2, r3
 801834e:	d3b8      	bcc.n	80182c2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8018350:	2301      	movs	r3, #1
 8018352:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018354:	e7b5      	b.n	80182c2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018356:	4b17      	ldr	r3, [pc, #92]	; (80183b4 <xTaskIncrementTick+0x168>)
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801835c:	4914      	ldr	r1, [pc, #80]	; (80183b0 <xTaskIncrementTick+0x164>)
 801835e:	4613      	mov	r3, r2
 8018360:	009b      	lsls	r3, r3, #2
 8018362:	4413      	add	r3, r2
 8018364:	009b      	lsls	r3, r3, #2
 8018366:	440b      	add	r3, r1
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	2b01      	cmp	r3, #1
 801836c:	d907      	bls.n	801837e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801836e:	2301      	movs	r3, #1
 8018370:	617b      	str	r3, [r7, #20]
 8018372:	e004      	b.n	801837e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018374:	4b10      	ldr	r3, [pc, #64]	; (80183b8 <xTaskIncrementTick+0x16c>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	3301      	adds	r3, #1
 801837a:	4a0f      	ldr	r2, [pc, #60]	; (80183b8 <xTaskIncrementTick+0x16c>)
 801837c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801837e:	4b0f      	ldr	r3, [pc, #60]	; (80183bc <xTaskIncrementTick+0x170>)
 8018380:	681b      	ldr	r3, [r3, #0]
 8018382:	2b00      	cmp	r3, #0
 8018384:	d001      	beq.n	801838a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8018386:	2301      	movs	r3, #1
 8018388:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801838a:	697b      	ldr	r3, [r7, #20]
}
 801838c:	4618      	mov	r0, r3
 801838e:	3718      	adds	r7, #24
 8018390:	46bd      	mov	sp, r7
 8018392:	bd80      	pop	{r7, pc}
 8018394:	20000f2c 	.word	0x20000f2c
 8018398:	20000f08 	.word	0x20000f08
 801839c:	20000ebc 	.word	0x20000ebc
 80183a0:	20000ec0 	.word	0x20000ec0
 80183a4:	20000f1c 	.word	0x20000f1c
 80183a8:	20000f24 	.word	0x20000f24
 80183ac:	20000f0c 	.word	0x20000f0c
 80183b0:	20000a34 	.word	0x20000a34
 80183b4:	20000a30 	.word	0x20000a30
 80183b8:	20000f14 	.word	0x20000f14
 80183bc:	20000f18 	.word	0x20000f18

080183c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80183c0:	b480      	push	{r7}
 80183c2:	b085      	sub	sp, #20
 80183c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80183c6:	4b28      	ldr	r3, [pc, #160]	; (8018468 <vTaskSwitchContext+0xa8>)
 80183c8:	681b      	ldr	r3, [r3, #0]
 80183ca:	2b00      	cmp	r3, #0
 80183cc:	d003      	beq.n	80183d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80183ce:	4b27      	ldr	r3, [pc, #156]	; (801846c <vTaskSwitchContext+0xac>)
 80183d0:	2201      	movs	r2, #1
 80183d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80183d4:	e042      	b.n	801845c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80183d6:	4b25      	ldr	r3, [pc, #148]	; (801846c <vTaskSwitchContext+0xac>)
 80183d8:	2200      	movs	r2, #0
 80183da:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183dc:	4b24      	ldr	r3, [pc, #144]	; (8018470 <vTaskSwitchContext+0xb0>)
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	60fb      	str	r3, [r7, #12]
 80183e2:	e011      	b.n	8018408 <vTaskSwitchContext+0x48>
 80183e4:	68fb      	ldr	r3, [r7, #12]
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	d10b      	bne.n	8018402 <vTaskSwitchContext+0x42>
 80183ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183ee:	b672      	cpsid	i
 80183f0:	f383 8811 	msr	BASEPRI, r3
 80183f4:	f3bf 8f6f 	isb	sy
 80183f8:	f3bf 8f4f 	dsb	sy
 80183fc:	b662      	cpsie	i
 80183fe:	607b      	str	r3, [r7, #4]
 8018400:	e7fe      	b.n	8018400 <vTaskSwitchContext+0x40>
 8018402:	68fb      	ldr	r3, [r7, #12]
 8018404:	3b01      	subs	r3, #1
 8018406:	60fb      	str	r3, [r7, #12]
 8018408:	491a      	ldr	r1, [pc, #104]	; (8018474 <vTaskSwitchContext+0xb4>)
 801840a:	68fa      	ldr	r2, [r7, #12]
 801840c:	4613      	mov	r3, r2
 801840e:	009b      	lsls	r3, r3, #2
 8018410:	4413      	add	r3, r2
 8018412:	009b      	lsls	r3, r3, #2
 8018414:	440b      	add	r3, r1
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	2b00      	cmp	r3, #0
 801841a:	d0e3      	beq.n	80183e4 <vTaskSwitchContext+0x24>
 801841c:	68fa      	ldr	r2, [r7, #12]
 801841e:	4613      	mov	r3, r2
 8018420:	009b      	lsls	r3, r3, #2
 8018422:	4413      	add	r3, r2
 8018424:	009b      	lsls	r3, r3, #2
 8018426:	4a13      	ldr	r2, [pc, #76]	; (8018474 <vTaskSwitchContext+0xb4>)
 8018428:	4413      	add	r3, r2
 801842a:	60bb      	str	r3, [r7, #8]
 801842c:	68bb      	ldr	r3, [r7, #8]
 801842e:	685b      	ldr	r3, [r3, #4]
 8018430:	685a      	ldr	r2, [r3, #4]
 8018432:	68bb      	ldr	r3, [r7, #8]
 8018434:	605a      	str	r2, [r3, #4]
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	685a      	ldr	r2, [r3, #4]
 801843a:	68bb      	ldr	r3, [r7, #8]
 801843c:	3308      	adds	r3, #8
 801843e:	429a      	cmp	r2, r3
 8018440:	d104      	bne.n	801844c <vTaskSwitchContext+0x8c>
 8018442:	68bb      	ldr	r3, [r7, #8]
 8018444:	685b      	ldr	r3, [r3, #4]
 8018446:	685a      	ldr	r2, [r3, #4]
 8018448:	68bb      	ldr	r3, [r7, #8]
 801844a:	605a      	str	r2, [r3, #4]
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	685b      	ldr	r3, [r3, #4]
 8018450:	68db      	ldr	r3, [r3, #12]
 8018452:	4a09      	ldr	r2, [pc, #36]	; (8018478 <vTaskSwitchContext+0xb8>)
 8018454:	6013      	str	r3, [r2, #0]
 8018456:	4a06      	ldr	r2, [pc, #24]	; (8018470 <vTaskSwitchContext+0xb0>)
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	6013      	str	r3, [r2, #0]
}
 801845c:	bf00      	nop
 801845e:	3714      	adds	r7, #20
 8018460:	46bd      	mov	sp, r7
 8018462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018466:	4770      	bx	lr
 8018468:	20000f2c 	.word	0x20000f2c
 801846c:	20000f18 	.word	0x20000f18
 8018470:	20000f0c 	.word	0x20000f0c
 8018474:	20000a34 	.word	0x20000a34
 8018478:	20000a30 	.word	0x20000a30

0801847c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b084      	sub	sp, #16
 8018480:	af00      	add	r7, sp, #0
 8018482:	6078      	str	r0, [r7, #4]
 8018484:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d10b      	bne.n	80184a4 <vTaskPlaceOnEventList+0x28>
 801848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018490:	b672      	cpsid	i
 8018492:	f383 8811 	msr	BASEPRI, r3
 8018496:	f3bf 8f6f 	isb	sy
 801849a:	f3bf 8f4f 	dsb	sy
 801849e:	b662      	cpsie	i
 80184a0:	60fb      	str	r3, [r7, #12]
 80184a2:	e7fe      	b.n	80184a2 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184a4:	4b07      	ldr	r3, [pc, #28]	; (80184c4 <vTaskPlaceOnEventList+0x48>)
 80184a6:	681b      	ldr	r3, [r3, #0]
 80184a8:	3318      	adds	r3, #24
 80184aa:	4619      	mov	r1, r3
 80184ac:	6878      	ldr	r0, [r7, #4]
 80184ae:	f7fe f9ee 	bl	801688e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80184b2:	2101      	movs	r1, #1
 80184b4:	6838      	ldr	r0, [r7, #0]
 80184b6:	f000 fb8f 	bl	8018bd8 <prvAddCurrentTaskToDelayedList>
}
 80184ba:	bf00      	nop
 80184bc:	3710      	adds	r7, #16
 80184be:	46bd      	mov	sp, r7
 80184c0:	bd80      	pop	{r7, pc}
 80184c2:	bf00      	nop
 80184c4:	20000a30 	.word	0x20000a30

080184c8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80184c8:	b580      	push	{r7, lr}
 80184ca:	b086      	sub	sp, #24
 80184cc:	af00      	add	r7, sp, #0
 80184ce:	60f8      	str	r0, [r7, #12]
 80184d0:	60b9      	str	r1, [r7, #8]
 80184d2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80184d4:	68fb      	ldr	r3, [r7, #12]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d10b      	bne.n	80184f2 <vTaskPlaceOnEventListRestricted+0x2a>
 80184da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184de:	b672      	cpsid	i
 80184e0:	f383 8811 	msr	BASEPRI, r3
 80184e4:	f3bf 8f6f 	isb	sy
 80184e8:	f3bf 8f4f 	dsb	sy
 80184ec:	b662      	cpsie	i
 80184ee:	617b      	str	r3, [r7, #20]
 80184f0:	e7fe      	b.n	80184f0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80184f2:	4b0a      	ldr	r3, [pc, #40]	; (801851c <vTaskPlaceOnEventListRestricted+0x54>)
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	3318      	adds	r3, #24
 80184f8:	4619      	mov	r1, r3
 80184fa:	68f8      	ldr	r0, [r7, #12]
 80184fc:	f7fe f9a3 	bl	8016846 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8018500:	687b      	ldr	r3, [r7, #4]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d002      	beq.n	801850c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8018506:	f04f 33ff 	mov.w	r3, #4294967295
 801850a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801850c:	6879      	ldr	r1, [r7, #4]
 801850e:	68b8      	ldr	r0, [r7, #8]
 8018510:	f000 fb62 	bl	8018bd8 <prvAddCurrentTaskToDelayedList>
	}
 8018514:	bf00      	nop
 8018516:	3718      	adds	r7, #24
 8018518:	46bd      	mov	sp, r7
 801851a:	bd80      	pop	{r7, pc}
 801851c:	20000a30 	.word	0x20000a30

08018520 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8018520:	b580      	push	{r7, lr}
 8018522:	b086      	sub	sp, #24
 8018524:	af00      	add	r7, sp, #0
 8018526:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018528:	687b      	ldr	r3, [r7, #4]
 801852a:	68db      	ldr	r3, [r3, #12]
 801852c:	68db      	ldr	r3, [r3, #12]
 801852e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018530:	693b      	ldr	r3, [r7, #16]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d10b      	bne.n	801854e <xTaskRemoveFromEventList+0x2e>
 8018536:	f04f 0350 	mov.w	r3, #80	; 0x50
 801853a:	b672      	cpsid	i
 801853c:	f383 8811 	msr	BASEPRI, r3
 8018540:	f3bf 8f6f 	isb	sy
 8018544:	f3bf 8f4f 	dsb	sy
 8018548:	b662      	cpsie	i
 801854a:	60fb      	str	r3, [r7, #12]
 801854c:	e7fe      	b.n	801854c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801854e:	693b      	ldr	r3, [r7, #16]
 8018550:	3318      	adds	r3, #24
 8018552:	4618      	mov	r0, r3
 8018554:	f7fe f9d4 	bl	8016900 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018558:	4b1d      	ldr	r3, [pc, #116]	; (80185d0 <xTaskRemoveFromEventList+0xb0>)
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	2b00      	cmp	r3, #0
 801855e:	d11d      	bne.n	801859c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018560:	693b      	ldr	r3, [r7, #16]
 8018562:	3304      	adds	r3, #4
 8018564:	4618      	mov	r0, r3
 8018566:	f7fe f9cb 	bl	8016900 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801856a:	693b      	ldr	r3, [r7, #16]
 801856c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801856e:	4b19      	ldr	r3, [pc, #100]	; (80185d4 <xTaskRemoveFromEventList+0xb4>)
 8018570:	681b      	ldr	r3, [r3, #0]
 8018572:	429a      	cmp	r2, r3
 8018574:	d903      	bls.n	801857e <xTaskRemoveFromEventList+0x5e>
 8018576:	693b      	ldr	r3, [r7, #16]
 8018578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801857a:	4a16      	ldr	r2, [pc, #88]	; (80185d4 <xTaskRemoveFromEventList+0xb4>)
 801857c:	6013      	str	r3, [r2, #0]
 801857e:	693b      	ldr	r3, [r7, #16]
 8018580:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018582:	4613      	mov	r3, r2
 8018584:	009b      	lsls	r3, r3, #2
 8018586:	4413      	add	r3, r2
 8018588:	009b      	lsls	r3, r3, #2
 801858a:	4a13      	ldr	r2, [pc, #76]	; (80185d8 <xTaskRemoveFromEventList+0xb8>)
 801858c:	441a      	add	r2, r3
 801858e:	693b      	ldr	r3, [r7, #16]
 8018590:	3304      	adds	r3, #4
 8018592:	4619      	mov	r1, r3
 8018594:	4610      	mov	r0, r2
 8018596:	f7fe f956 	bl	8016846 <vListInsertEnd>
 801859a:	e005      	b.n	80185a8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801859c:	693b      	ldr	r3, [r7, #16]
 801859e:	3318      	adds	r3, #24
 80185a0:	4619      	mov	r1, r3
 80185a2:	480e      	ldr	r0, [pc, #56]	; (80185dc <xTaskRemoveFromEventList+0xbc>)
 80185a4:	f7fe f94f 	bl	8016846 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80185a8:	693b      	ldr	r3, [r7, #16]
 80185aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80185ac:	4b0c      	ldr	r3, [pc, #48]	; (80185e0 <xTaskRemoveFromEventList+0xc0>)
 80185ae:	681b      	ldr	r3, [r3, #0]
 80185b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d905      	bls.n	80185c2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80185b6:	2301      	movs	r3, #1
 80185b8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80185ba:	4b0a      	ldr	r3, [pc, #40]	; (80185e4 <xTaskRemoveFromEventList+0xc4>)
 80185bc:	2201      	movs	r2, #1
 80185be:	601a      	str	r2, [r3, #0]
 80185c0:	e001      	b.n	80185c6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80185c2:	2300      	movs	r3, #0
 80185c4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80185c6:	697b      	ldr	r3, [r7, #20]
}
 80185c8:	4618      	mov	r0, r3
 80185ca:	3718      	adds	r7, #24
 80185cc:	46bd      	mov	sp, r7
 80185ce:	bd80      	pop	{r7, pc}
 80185d0:	20000f2c 	.word	0x20000f2c
 80185d4:	20000f0c 	.word	0x20000f0c
 80185d8:	20000a34 	.word	0x20000a34
 80185dc:	20000ec4 	.word	0x20000ec4
 80185e0:	20000a30 	.word	0x20000a30
 80185e4:	20000f18 	.word	0x20000f18

080185e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80185e8:	b480      	push	{r7}
 80185ea:	b083      	sub	sp, #12
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80185f0:	4b06      	ldr	r3, [pc, #24]	; (801860c <vTaskInternalSetTimeOutState+0x24>)
 80185f2:	681a      	ldr	r2, [r3, #0]
 80185f4:	687b      	ldr	r3, [r7, #4]
 80185f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80185f8:	4b05      	ldr	r3, [pc, #20]	; (8018610 <vTaskInternalSetTimeOutState+0x28>)
 80185fa:	681a      	ldr	r2, [r3, #0]
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	605a      	str	r2, [r3, #4]
}
 8018600:	bf00      	nop
 8018602:	370c      	adds	r7, #12
 8018604:	46bd      	mov	sp, r7
 8018606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801860a:	4770      	bx	lr
 801860c:	20000f1c 	.word	0x20000f1c
 8018610:	20000f08 	.word	0x20000f08

08018614 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8018614:	b580      	push	{r7, lr}
 8018616:	b088      	sub	sp, #32
 8018618:	af00      	add	r7, sp, #0
 801861a:	6078      	str	r0, [r7, #4]
 801861c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801861e:	687b      	ldr	r3, [r7, #4]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d10b      	bne.n	801863c <xTaskCheckForTimeOut+0x28>
 8018624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018628:	b672      	cpsid	i
 801862a:	f383 8811 	msr	BASEPRI, r3
 801862e:	f3bf 8f6f 	isb	sy
 8018632:	f3bf 8f4f 	dsb	sy
 8018636:	b662      	cpsie	i
 8018638:	613b      	str	r3, [r7, #16]
 801863a:	e7fe      	b.n	801863a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801863c:	683b      	ldr	r3, [r7, #0]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d10b      	bne.n	801865a <xTaskCheckForTimeOut+0x46>
 8018642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018646:	b672      	cpsid	i
 8018648:	f383 8811 	msr	BASEPRI, r3
 801864c:	f3bf 8f6f 	isb	sy
 8018650:	f3bf 8f4f 	dsb	sy
 8018654:	b662      	cpsie	i
 8018656:	60fb      	str	r3, [r7, #12]
 8018658:	e7fe      	b.n	8018658 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801865a:	f000 ff6d 	bl	8019538 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801865e:	4b1d      	ldr	r3, [pc, #116]	; (80186d4 <xTaskCheckForTimeOut+0xc0>)
 8018660:	681b      	ldr	r3, [r3, #0]
 8018662:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	685b      	ldr	r3, [r3, #4]
 8018668:	69ba      	ldr	r2, [r7, #24]
 801866a:	1ad3      	subs	r3, r2, r3
 801866c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801866e:	683b      	ldr	r3, [r7, #0]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018676:	d102      	bne.n	801867e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018678:	2300      	movs	r3, #0
 801867a:	61fb      	str	r3, [r7, #28]
 801867c:	e023      	b.n	80186c6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801867e:	687b      	ldr	r3, [r7, #4]
 8018680:	681a      	ldr	r2, [r3, #0]
 8018682:	4b15      	ldr	r3, [pc, #84]	; (80186d8 <xTaskCheckForTimeOut+0xc4>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	429a      	cmp	r2, r3
 8018688:	d007      	beq.n	801869a <xTaskCheckForTimeOut+0x86>
 801868a:	687b      	ldr	r3, [r7, #4]
 801868c:	685b      	ldr	r3, [r3, #4]
 801868e:	69ba      	ldr	r2, [r7, #24]
 8018690:	429a      	cmp	r2, r3
 8018692:	d302      	bcc.n	801869a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018694:	2301      	movs	r3, #1
 8018696:	61fb      	str	r3, [r7, #28]
 8018698:	e015      	b.n	80186c6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801869a:	683b      	ldr	r3, [r7, #0]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	697a      	ldr	r2, [r7, #20]
 80186a0:	429a      	cmp	r2, r3
 80186a2:	d20b      	bcs.n	80186bc <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80186a4:	683b      	ldr	r3, [r7, #0]
 80186a6:	681a      	ldr	r2, [r3, #0]
 80186a8:	697b      	ldr	r3, [r7, #20]
 80186aa:	1ad2      	subs	r2, r2, r3
 80186ac:	683b      	ldr	r3, [r7, #0]
 80186ae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f7ff ff99 	bl	80185e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80186b6:	2300      	movs	r3, #0
 80186b8:	61fb      	str	r3, [r7, #28]
 80186ba:	e004      	b.n	80186c6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80186bc:	683b      	ldr	r3, [r7, #0]
 80186be:	2200      	movs	r2, #0
 80186c0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80186c2:	2301      	movs	r3, #1
 80186c4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80186c6:	f000 ff69 	bl	801959c <vPortExitCritical>

	return xReturn;
 80186ca:	69fb      	ldr	r3, [r7, #28]
}
 80186cc:	4618      	mov	r0, r3
 80186ce:	3720      	adds	r7, #32
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	20000f08 	.word	0x20000f08
 80186d8:	20000f1c 	.word	0x20000f1c

080186dc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80186dc:	b480      	push	{r7}
 80186de:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80186e0:	4b03      	ldr	r3, [pc, #12]	; (80186f0 <vTaskMissedYield+0x14>)
 80186e2:	2201      	movs	r2, #1
 80186e4:	601a      	str	r2, [r3, #0]
}
 80186e6:	bf00      	nop
 80186e8:	46bd      	mov	sp, r7
 80186ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186ee:	4770      	bx	lr
 80186f0:	20000f18 	.word	0x20000f18

080186f4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80186f4:	b580      	push	{r7, lr}
 80186f6:	b082      	sub	sp, #8
 80186f8:	af00      	add	r7, sp, #0
 80186fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80186fc:	f000 f852 	bl	80187a4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018700:	4b06      	ldr	r3, [pc, #24]	; (801871c <prvIdleTask+0x28>)
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	2b01      	cmp	r3, #1
 8018706:	d9f9      	bls.n	80186fc <prvIdleTask+0x8>
			{
				taskYIELD();
 8018708:	4b05      	ldr	r3, [pc, #20]	; (8018720 <prvIdleTask+0x2c>)
 801870a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801870e:	601a      	str	r2, [r3, #0]
 8018710:	f3bf 8f4f 	dsb	sy
 8018714:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018718:	e7f0      	b.n	80186fc <prvIdleTask+0x8>
 801871a:	bf00      	nop
 801871c:	20000a34 	.word	0x20000a34
 8018720:	e000ed04 	.word	0xe000ed04

08018724 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018724:	b580      	push	{r7, lr}
 8018726:	b082      	sub	sp, #8
 8018728:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801872a:	2300      	movs	r3, #0
 801872c:	607b      	str	r3, [r7, #4]
 801872e:	e00c      	b.n	801874a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018730:	687a      	ldr	r2, [r7, #4]
 8018732:	4613      	mov	r3, r2
 8018734:	009b      	lsls	r3, r3, #2
 8018736:	4413      	add	r3, r2
 8018738:	009b      	lsls	r3, r3, #2
 801873a:	4a12      	ldr	r2, [pc, #72]	; (8018784 <prvInitialiseTaskLists+0x60>)
 801873c:	4413      	add	r3, r2
 801873e:	4618      	mov	r0, r3
 8018740:	f7fe f854 	bl	80167ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018744:	687b      	ldr	r3, [r7, #4]
 8018746:	3301      	adds	r3, #1
 8018748:	607b      	str	r3, [r7, #4]
 801874a:	687b      	ldr	r3, [r7, #4]
 801874c:	2b37      	cmp	r3, #55	; 0x37
 801874e:	d9ef      	bls.n	8018730 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018750:	480d      	ldr	r0, [pc, #52]	; (8018788 <prvInitialiseTaskLists+0x64>)
 8018752:	f7fe f84b 	bl	80167ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018756:	480d      	ldr	r0, [pc, #52]	; (801878c <prvInitialiseTaskLists+0x68>)
 8018758:	f7fe f848 	bl	80167ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801875c:	480c      	ldr	r0, [pc, #48]	; (8018790 <prvInitialiseTaskLists+0x6c>)
 801875e:	f7fe f845 	bl	80167ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018762:	480c      	ldr	r0, [pc, #48]	; (8018794 <prvInitialiseTaskLists+0x70>)
 8018764:	f7fe f842 	bl	80167ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018768:	480b      	ldr	r0, [pc, #44]	; (8018798 <prvInitialiseTaskLists+0x74>)
 801876a:	f7fe f83f 	bl	80167ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801876e:	4b0b      	ldr	r3, [pc, #44]	; (801879c <prvInitialiseTaskLists+0x78>)
 8018770:	4a05      	ldr	r2, [pc, #20]	; (8018788 <prvInitialiseTaskLists+0x64>)
 8018772:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018774:	4b0a      	ldr	r3, [pc, #40]	; (80187a0 <prvInitialiseTaskLists+0x7c>)
 8018776:	4a05      	ldr	r2, [pc, #20]	; (801878c <prvInitialiseTaskLists+0x68>)
 8018778:	601a      	str	r2, [r3, #0]
}
 801877a:	bf00      	nop
 801877c:	3708      	adds	r7, #8
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}
 8018782:	bf00      	nop
 8018784:	20000a34 	.word	0x20000a34
 8018788:	20000e94 	.word	0x20000e94
 801878c:	20000ea8 	.word	0x20000ea8
 8018790:	20000ec4 	.word	0x20000ec4
 8018794:	20000ed8 	.word	0x20000ed8
 8018798:	20000ef0 	.word	0x20000ef0
 801879c:	20000ebc 	.word	0x20000ebc
 80187a0:	20000ec0 	.word	0x20000ec0

080187a4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b082      	sub	sp, #8
 80187a8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187aa:	e019      	b.n	80187e0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80187ac:	f000 fec4 	bl	8019538 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80187b0:	4b0f      	ldr	r3, [pc, #60]	; (80187f0 <prvCheckTasksWaitingTermination+0x4c>)
 80187b2:	68db      	ldr	r3, [r3, #12]
 80187b4:	68db      	ldr	r3, [r3, #12]
 80187b6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	3304      	adds	r3, #4
 80187bc:	4618      	mov	r0, r3
 80187be:	f7fe f89f 	bl	8016900 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80187c2:	4b0c      	ldr	r3, [pc, #48]	; (80187f4 <prvCheckTasksWaitingTermination+0x50>)
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	3b01      	subs	r3, #1
 80187c8:	4a0a      	ldr	r2, [pc, #40]	; (80187f4 <prvCheckTasksWaitingTermination+0x50>)
 80187ca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80187cc:	4b0a      	ldr	r3, [pc, #40]	; (80187f8 <prvCheckTasksWaitingTermination+0x54>)
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	3b01      	subs	r3, #1
 80187d2:	4a09      	ldr	r2, [pc, #36]	; (80187f8 <prvCheckTasksWaitingTermination+0x54>)
 80187d4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80187d6:	f000 fee1 	bl	801959c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80187da:	6878      	ldr	r0, [r7, #4]
 80187dc:	f000 f80e 	bl	80187fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80187e0:	4b05      	ldr	r3, [pc, #20]	; (80187f8 <prvCheckTasksWaitingTermination+0x54>)
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d1e1      	bne.n	80187ac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80187e8:	bf00      	nop
 80187ea:	3708      	adds	r7, #8
 80187ec:	46bd      	mov	sp, r7
 80187ee:	bd80      	pop	{r7, pc}
 80187f0:	20000ed8 	.word	0x20000ed8
 80187f4:	20000f04 	.word	0x20000f04
 80187f8:	20000eec 	.word	0x20000eec

080187fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b084      	sub	sp, #16
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801880a:	2b00      	cmp	r3, #0
 801880c:	d108      	bne.n	8018820 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801880e:	687b      	ldr	r3, [r7, #4]
 8018810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018812:	4618      	mov	r0, r3
 8018814:	f001 f87a 	bl	801990c <vPortFree>
				vPortFree( pxTCB );
 8018818:	6878      	ldr	r0, [r7, #4]
 801881a:	f001 f877 	bl	801990c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801881e:	e019      	b.n	8018854 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8018820:	687b      	ldr	r3, [r7, #4]
 8018822:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018826:	2b01      	cmp	r3, #1
 8018828:	d103      	bne.n	8018832 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801882a:	6878      	ldr	r0, [r7, #4]
 801882c:	f001 f86e 	bl	801990c <vPortFree>
	}
 8018830:	e010      	b.n	8018854 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018838:	2b02      	cmp	r3, #2
 801883a:	d00b      	beq.n	8018854 <prvDeleteTCB+0x58>
 801883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018840:	b672      	cpsid	i
 8018842:	f383 8811 	msr	BASEPRI, r3
 8018846:	f3bf 8f6f 	isb	sy
 801884a:	f3bf 8f4f 	dsb	sy
 801884e:	b662      	cpsie	i
 8018850:	60fb      	str	r3, [r7, #12]
 8018852:	e7fe      	b.n	8018852 <prvDeleteTCB+0x56>
	}
 8018854:	bf00      	nop
 8018856:	3710      	adds	r7, #16
 8018858:	46bd      	mov	sp, r7
 801885a:	bd80      	pop	{r7, pc}

0801885c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801885c:	b480      	push	{r7}
 801885e:	b083      	sub	sp, #12
 8018860:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018862:	4b0c      	ldr	r3, [pc, #48]	; (8018894 <prvResetNextTaskUnblockTime+0x38>)
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	2b00      	cmp	r3, #0
 801886a:	d104      	bne.n	8018876 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801886c:	4b0a      	ldr	r3, [pc, #40]	; (8018898 <prvResetNextTaskUnblockTime+0x3c>)
 801886e:	f04f 32ff 	mov.w	r2, #4294967295
 8018872:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018874:	e008      	b.n	8018888 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018876:	4b07      	ldr	r3, [pc, #28]	; (8018894 <prvResetNextTaskUnblockTime+0x38>)
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	68db      	ldr	r3, [r3, #12]
 801887c:	68db      	ldr	r3, [r3, #12]
 801887e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018880:	687b      	ldr	r3, [r7, #4]
 8018882:	685b      	ldr	r3, [r3, #4]
 8018884:	4a04      	ldr	r2, [pc, #16]	; (8018898 <prvResetNextTaskUnblockTime+0x3c>)
 8018886:	6013      	str	r3, [r2, #0]
}
 8018888:	bf00      	nop
 801888a:	370c      	adds	r7, #12
 801888c:	46bd      	mov	sp, r7
 801888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018892:	4770      	bx	lr
 8018894:	20000ebc 	.word	0x20000ebc
 8018898:	20000f24 	.word	0x20000f24

0801889c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801889c:	b480      	push	{r7}
 801889e:	b083      	sub	sp, #12
 80188a0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80188a2:	4b05      	ldr	r3, [pc, #20]	; (80188b8 <xTaskGetCurrentTaskHandle+0x1c>)
 80188a4:	681b      	ldr	r3, [r3, #0]
 80188a6:	607b      	str	r3, [r7, #4]

		return xReturn;
 80188a8:	687b      	ldr	r3, [r7, #4]
	}
 80188aa:	4618      	mov	r0, r3
 80188ac:	370c      	adds	r7, #12
 80188ae:	46bd      	mov	sp, r7
 80188b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188b4:	4770      	bx	lr
 80188b6:	bf00      	nop
 80188b8:	20000a30 	.word	0x20000a30

080188bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80188bc:	b480      	push	{r7}
 80188be:	b083      	sub	sp, #12
 80188c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80188c2:	4b0b      	ldr	r3, [pc, #44]	; (80188f0 <xTaskGetSchedulerState+0x34>)
 80188c4:	681b      	ldr	r3, [r3, #0]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d102      	bne.n	80188d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80188ca:	2301      	movs	r3, #1
 80188cc:	607b      	str	r3, [r7, #4]
 80188ce:	e008      	b.n	80188e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80188d0:	4b08      	ldr	r3, [pc, #32]	; (80188f4 <xTaskGetSchedulerState+0x38>)
 80188d2:	681b      	ldr	r3, [r3, #0]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d102      	bne.n	80188de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80188d8:	2302      	movs	r3, #2
 80188da:	607b      	str	r3, [r7, #4]
 80188dc:	e001      	b.n	80188e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80188de:	2300      	movs	r3, #0
 80188e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80188e2:	687b      	ldr	r3, [r7, #4]
	}
 80188e4:	4618      	mov	r0, r3
 80188e6:	370c      	adds	r7, #12
 80188e8:	46bd      	mov	sp, r7
 80188ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188ee:	4770      	bx	lr
 80188f0:	20000f10 	.word	0x20000f10
 80188f4:	20000f2c 	.word	0x20000f2c

080188f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80188f8:	b580      	push	{r7, lr}
 80188fa:	b084      	sub	sp, #16
 80188fc:	af00      	add	r7, sp, #0
 80188fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8018904:	2300      	movs	r3, #0
 8018906:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8018908:	687b      	ldr	r3, [r7, #4]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d051      	beq.n	80189b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018912:	4b2a      	ldr	r3, [pc, #168]	; (80189bc <xTaskPriorityInherit+0xc4>)
 8018914:	681b      	ldr	r3, [r3, #0]
 8018916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018918:	429a      	cmp	r2, r3
 801891a:	d241      	bcs.n	80189a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	699b      	ldr	r3, [r3, #24]
 8018920:	2b00      	cmp	r3, #0
 8018922:	db06      	blt.n	8018932 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018924:	4b25      	ldr	r3, [pc, #148]	; (80189bc <xTaskPriorityInherit+0xc4>)
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801892a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801892e:	68bb      	ldr	r3, [r7, #8]
 8018930:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	6959      	ldr	r1, [r3, #20]
 8018936:	68bb      	ldr	r3, [r7, #8]
 8018938:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801893a:	4613      	mov	r3, r2
 801893c:	009b      	lsls	r3, r3, #2
 801893e:	4413      	add	r3, r2
 8018940:	009b      	lsls	r3, r3, #2
 8018942:	4a1f      	ldr	r2, [pc, #124]	; (80189c0 <xTaskPriorityInherit+0xc8>)
 8018944:	4413      	add	r3, r2
 8018946:	4299      	cmp	r1, r3
 8018948:	d122      	bne.n	8018990 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801894a:	68bb      	ldr	r3, [r7, #8]
 801894c:	3304      	adds	r3, #4
 801894e:	4618      	mov	r0, r3
 8018950:	f7fd ffd6 	bl	8016900 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018954:	4b19      	ldr	r3, [pc, #100]	; (80189bc <xTaskPriorityInherit+0xc4>)
 8018956:	681b      	ldr	r3, [r3, #0]
 8018958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801895e:	68bb      	ldr	r3, [r7, #8]
 8018960:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018962:	4b18      	ldr	r3, [pc, #96]	; (80189c4 <xTaskPriorityInherit+0xcc>)
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	429a      	cmp	r2, r3
 8018968:	d903      	bls.n	8018972 <xTaskPriorityInherit+0x7a>
 801896a:	68bb      	ldr	r3, [r7, #8]
 801896c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801896e:	4a15      	ldr	r2, [pc, #84]	; (80189c4 <xTaskPriorityInherit+0xcc>)
 8018970:	6013      	str	r3, [r2, #0]
 8018972:	68bb      	ldr	r3, [r7, #8]
 8018974:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018976:	4613      	mov	r3, r2
 8018978:	009b      	lsls	r3, r3, #2
 801897a:	4413      	add	r3, r2
 801897c:	009b      	lsls	r3, r3, #2
 801897e:	4a10      	ldr	r2, [pc, #64]	; (80189c0 <xTaskPriorityInherit+0xc8>)
 8018980:	441a      	add	r2, r3
 8018982:	68bb      	ldr	r3, [r7, #8]
 8018984:	3304      	adds	r3, #4
 8018986:	4619      	mov	r1, r3
 8018988:	4610      	mov	r0, r2
 801898a:	f7fd ff5c 	bl	8016846 <vListInsertEnd>
 801898e:	e004      	b.n	801899a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018990:	4b0a      	ldr	r3, [pc, #40]	; (80189bc <xTaskPriorityInherit+0xc4>)
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018996:	68bb      	ldr	r3, [r7, #8]
 8018998:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801899a:	2301      	movs	r3, #1
 801899c:	60fb      	str	r3, [r7, #12]
 801899e:	e008      	b.n	80189b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80189a4:	4b05      	ldr	r3, [pc, #20]	; (80189bc <xTaskPriorityInherit+0xc4>)
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189aa:	429a      	cmp	r2, r3
 80189ac:	d201      	bcs.n	80189b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80189ae:	2301      	movs	r3, #1
 80189b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80189b2:	68fb      	ldr	r3, [r7, #12]
	}
 80189b4:	4618      	mov	r0, r3
 80189b6:	3710      	adds	r7, #16
 80189b8:	46bd      	mov	sp, r7
 80189ba:	bd80      	pop	{r7, pc}
 80189bc:	20000a30 	.word	0x20000a30
 80189c0:	20000a34 	.word	0x20000a34
 80189c4:	20000f0c 	.word	0x20000f0c

080189c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80189c8:	b580      	push	{r7, lr}
 80189ca:	b086      	sub	sp, #24
 80189cc:	af00      	add	r7, sp, #0
 80189ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80189d4:	2300      	movs	r3, #0
 80189d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80189d8:	687b      	ldr	r3, [r7, #4]
 80189da:	2b00      	cmp	r3, #0
 80189dc:	d058      	beq.n	8018a90 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80189de:	4b2f      	ldr	r3, [pc, #188]	; (8018a9c <xTaskPriorityDisinherit+0xd4>)
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	693a      	ldr	r2, [r7, #16]
 80189e4:	429a      	cmp	r2, r3
 80189e6:	d00b      	beq.n	8018a00 <xTaskPriorityDisinherit+0x38>
 80189e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189ec:	b672      	cpsid	i
 80189ee:	f383 8811 	msr	BASEPRI, r3
 80189f2:	f3bf 8f6f 	isb	sy
 80189f6:	f3bf 8f4f 	dsb	sy
 80189fa:	b662      	cpsie	i
 80189fc:	60fb      	str	r3, [r7, #12]
 80189fe:	e7fe      	b.n	80189fe <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a04:	2b00      	cmp	r3, #0
 8018a06:	d10b      	bne.n	8018a20 <xTaskPriorityDisinherit+0x58>
 8018a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a0c:	b672      	cpsid	i
 8018a0e:	f383 8811 	msr	BASEPRI, r3
 8018a12:	f3bf 8f6f 	isb	sy
 8018a16:	f3bf 8f4f 	dsb	sy
 8018a1a:	b662      	cpsie	i
 8018a1c:	60bb      	str	r3, [r7, #8]
 8018a1e:	e7fe      	b.n	8018a1e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8018a20:	693b      	ldr	r3, [r7, #16]
 8018a22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a24:	1e5a      	subs	r2, r3, #1
 8018a26:	693b      	ldr	r3, [r7, #16]
 8018a28:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8018a2a:	693b      	ldr	r3, [r7, #16]
 8018a2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a2e:	693b      	ldr	r3, [r7, #16]
 8018a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018a32:	429a      	cmp	r2, r3
 8018a34:	d02c      	beq.n	8018a90 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018a36:	693b      	ldr	r3, [r7, #16]
 8018a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d128      	bne.n	8018a90 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a3e:	693b      	ldr	r3, [r7, #16]
 8018a40:	3304      	adds	r3, #4
 8018a42:	4618      	mov	r0, r3
 8018a44:	f7fd ff5c 	bl	8016900 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018a48:	693b      	ldr	r3, [r7, #16]
 8018a4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018a4c:	693b      	ldr	r3, [r7, #16]
 8018a4e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a50:	693b      	ldr	r3, [r7, #16]
 8018a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a54:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018a58:	693b      	ldr	r3, [r7, #16]
 8018a5a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8018a5c:	693b      	ldr	r3, [r7, #16]
 8018a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a60:	4b0f      	ldr	r3, [pc, #60]	; (8018aa0 <xTaskPriorityDisinherit+0xd8>)
 8018a62:	681b      	ldr	r3, [r3, #0]
 8018a64:	429a      	cmp	r2, r3
 8018a66:	d903      	bls.n	8018a70 <xTaskPriorityDisinherit+0xa8>
 8018a68:	693b      	ldr	r3, [r7, #16]
 8018a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a6c:	4a0c      	ldr	r2, [pc, #48]	; (8018aa0 <xTaskPriorityDisinherit+0xd8>)
 8018a6e:	6013      	str	r3, [r2, #0]
 8018a70:	693b      	ldr	r3, [r7, #16]
 8018a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a74:	4613      	mov	r3, r2
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	4413      	add	r3, r2
 8018a7a:	009b      	lsls	r3, r3, #2
 8018a7c:	4a09      	ldr	r2, [pc, #36]	; (8018aa4 <xTaskPriorityDisinherit+0xdc>)
 8018a7e:	441a      	add	r2, r3
 8018a80:	693b      	ldr	r3, [r7, #16]
 8018a82:	3304      	adds	r3, #4
 8018a84:	4619      	mov	r1, r3
 8018a86:	4610      	mov	r0, r2
 8018a88:	f7fd fedd 	bl	8016846 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8018a8c:	2301      	movs	r3, #1
 8018a8e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018a90:	697b      	ldr	r3, [r7, #20]
	}
 8018a92:	4618      	mov	r0, r3
 8018a94:	3718      	adds	r7, #24
 8018a96:	46bd      	mov	sp, r7
 8018a98:	bd80      	pop	{r7, pc}
 8018a9a:	bf00      	nop
 8018a9c:	20000a30 	.word	0x20000a30
 8018aa0:	20000f0c 	.word	0x20000f0c
 8018aa4:	20000a34 	.word	0x20000a34

08018aa8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b088      	sub	sp, #32
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018ab6:	2301      	movs	r3, #1
 8018ab8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8018aba:	687b      	ldr	r3, [r7, #4]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d06c      	beq.n	8018b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018ac0:	69bb      	ldr	r3, [r7, #24]
 8018ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ac4:	2b00      	cmp	r3, #0
 8018ac6:	d10b      	bne.n	8018ae0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8018ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018acc:	b672      	cpsid	i
 8018ace:	f383 8811 	msr	BASEPRI, r3
 8018ad2:	f3bf 8f6f 	isb	sy
 8018ad6:	f3bf 8f4f 	dsb	sy
 8018ada:	b662      	cpsie	i
 8018adc:	60fb      	str	r3, [r7, #12]
 8018ade:	e7fe      	b.n	8018ade <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8018ae0:	69bb      	ldr	r3, [r7, #24]
 8018ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018ae4:	683a      	ldr	r2, [r7, #0]
 8018ae6:	429a      	cmp	r2, r3
 8018ae8:	d902      	bls.n	8018af0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8018aea:	683b      	ldr	r3, [r7, #0]
 8018aec:	61fb      	str	r3, [r7, #28]
 8018aee:	e002      	b.n	8018af6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8018af0:	69bb      	ldr	r3, [r7, #24]
 8018af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018af4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8018af6:	69bb      	ldr	r3, [r7, #24]
 8018af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018afa:	69fa      	ldr	r2, [r7, #28]
 8018afc:	429a      	cmp	r2, r3
 8018afe:	d04c      	beq.n	8018b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8018b00:	69bb      	ldr	r3, [r7, #24]
 8018b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018b04:	697a      	ldr	r2, [r7, #20]
 8018b06:	429a      	cmp	r2, r3
 8018b08:	d147      	bne.n	8018b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8018b0a:	4b26      	ldr	r3, [pc, #152]	; (8018ba4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8018b0c:	681b      	ldr	r3, [r3, #0]
 8018b0e:	69ba      	ldr	r2, [r7, #24]
 8018b10:	429a      	cmp	r2, r3
 8018b12:	d10b      	bne.n	8018b2c <vTaskPriorityDisinheritAfterTimeout+0x84>
 8018b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018b18:	b672      	cpsid	i
 8018b1a:	f383 8811 	msr	BASEPRI, r3
 8018b1e:	f3bf 8f6f 	isb	sy
 8018b22:	f3bf 8f4f 	dsb	sy
 8018b26:	b662      	cpsie	i
 8018b28:	60bb      	str	r3, [r7, #8]
 8018b2a:	e7fe      	b.n	8018b2a <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8018b2c:	69bb      	ldr	r3, [r7, #24]
 8018b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b30:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018b32:	69bb      	ldr	r3, [r7, #24]
 8018b34:	69fa      	ldr	r2, [r7, #28]
 8018b36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018b38:	69bb      	ldr	r3, [r7, #24]
 8018b3a:	699b      	ldr	r3, [r3, #24]
 8018b3c:	2b00      	cmp	r3, #0
 8018b3e:	db04      	blt.n	8018b4a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018b40:	69fb      	ldr	r3, [r7, #28]
 8018b42:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018b46:	69bb      	ldr	r3, [r7, #24]
 8018b48:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018b4a:	69bb      	ldr	r3, [r7, #24]
 8018b4c:	6959      	ldr	r1, [r3, #20]
 8018b4e:	693a      	ldr	r2, [r7, #16]
 8018b50:	4613      	mov	r3, r2
 8018b52:	009b      	lsls	r3, r3, #2
 8018b54:	4413      	add	r3, r2
 8018b56:	009b      	lsls	r3, r3, #2
 8018b58:	4a13      	ldr	r2, [pc, #76]	; (8018ba8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018b5a:	4413      	add	r3, r2
 8018b5c:	4299      	cmp	r1, r3
 8018b5e:	d11c      	bne.n	8018b9a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018b60:	69bb      	ldr	r3, [r7, #24]
 8018b62:	3304      	adds	r3, #4
 8018b64:	4618      	mov	r0, r3
 8018b66:	f7fd fecb 	bl	8016900 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018b6a:	69bb      	ldr	r3, [r7, #24]
 8018b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b6e:	4b0f      	ldr	r3, [pc, #60]	; (8018bac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	429a      	cmp	r2, r3
 8018b74:	d903      	bls.n	8018b7e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018b76:	69bb      	ldr	r3, [r7, #24]
 8018b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b7a:	4a0c      	ldr	r2, [pc, #48]	; (8018bac <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018b7c:	6013      	str	r3, [r2, #0]
 8018b7e:	69bb      	ldr	r3, [r7, #24]
 8018b80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018b82:	4613      	mov	r3, r2
 8018b84:	009b      	lsls	r3, r3, #2
 8018b86:	4413      	add	r3, r2
 8018b88:	009b      	lsls	r3, r3, #2
 8018b8a:	4a07      	ldr	r2, [pc, #28]	; (8018ba8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018b8c:	441a      	add	r2, r3
 8018b8e:	69bb      	ldr	r3, [r7, #24]
 8018b90:	3304      	adds	r3, #4
 8018b92:	4619      	mov	r1, r3
 8018b94:	4610      	mov	r0, r2
 8018b96:	f7fd fe56 	bl	8016846 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018b9a:	bf00      	nop
 8018b9c:	3720      	adds	r7, #32
 8018b9e:	46bd      	mov	sp, r7
 8018ba0:	bd80      	pop	{r7, pc}
 8018ba2:	bf00      	nop
 8018ba4:	20000a30 	.word	0x20000a30
 8018ba8:	20000a34 	.word	0x20000a34
 8018bac:	20000f0c 	.word	0x20000f0c

08018bb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018bb0:	b480      	push	{r7}
 8018bb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018bb4:	4b07      	ldr	r3, [pc, #28]	; (8018bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d004      	beq.n	8018bc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018bbc:	4b05      	ldr	r3, [pc, #20]	; (8018bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018bc2:	3201      	adds	r2, #1
 8018bc4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018bc6:	4b03      	ldr	r3, [pc, #12]	; (8018bd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018bc8:	681b      	ldr	r3, [r3, #0]
	}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	46bd      	mov	sp, r7
 8018bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bd2:	4770      	bx	lr
 8018bd4:	20000a30 	.word	0x20000a30

08018bd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018bd8:	b580      	push	{r7, lr}
 8018bda:	b084      	sub	sp, #16
 8018bdc:	af00      	add	r7, sp, #0
 8018bde:	6078      	str	r0, [r7, #4]
 8018be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018be2:	4b21      	ldr	r3, [pc, #132]	; (8018c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8018be4:	681b      	ldr	r3, [r3, #0]
 8018be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018be8:	4b20      	ldr	r3, [pc, #128]	; (8018c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	3304      	adds	r3, #4
 8018bee:	4618      	mov	r0, r3
 8018bf0:	f7fd fe86 	bl	8016900 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018bfa:	d10a      	bne.n	8018c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8018bfc:	683b      	ldr	r3, [r7, #0]
 8018bfe:	2b00      	cmp	r3, #0
 8018c00:	d007      	beq.n	8018c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c02:	4b1a      	ldr	r3, [pc, #104]	; (8018c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018c04:	681b      	ldr	r3, [r3, #0]
 8018c06:	3304      	adds	r3, #4
 8018c08:	4619      	mov	r1, r3
 8018c0a:	4819      	ldr	r0, [pc, #100]	; (8018c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8018c0c:	f7fd fe1b 	bl	8016846 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018c10:	e026      	b.n	8018c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018c12:	68fa      	ldr	r2, [r7, #12]
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	4413      	add	r3, r2
 8018c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018c1a:	4b14      	ldr	r3, [pc, #80]	; (8018c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018c1c:	681b      	ldr	r3, [r3, #0]
 8018c1e:	68ba      	ldr	r2, [r7, #8]
 8018c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018c22:	68ba      	ldr	r2, [r7, #8]
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	429a      	cmp	r2, r3
 8018c28:	d209      	bcs.n	8018c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c2a:	4b12      	ldr	r3, [pc, #72]	; (8018c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018c2c:	681a      	ldr	r2, [r3, #0]
 8018c2e:	4b0f      	ldr	r3, [pc, #60]	; (8018c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018c30:	681b      	ldr	r3, [r3, #0]
 8018c32:	3304      	adds	r3, #4
 8018c34:	4619      	mov	r1, r3
 8018c36:	4610      	mov	r0, r2
 8018c38:	f7fd fe29 	bl	801688e <vListInsert>
}
 8018c3c:	e010      	b.n	8018c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018c3e:	4b0e      	ldr	r3, [pc, #56]	; (8018c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018c40:	681a      	ldr	r2, [r3, #0]
 8018c42:	4b0a      	ldr	r3, [pc, #40]	; (8018c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8018c44:	681b      	ldr	r3, [r3, #0]
 8018c46:	3304      	adds	r3, #4
 8018c48:	4619      	mov	r1, r3
 8018c4a:	4610      	mov	r0, r2
 8018c4c:	f7fd fe1f 	bl	801688e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018c50:	4b0a      	ldr	r3, [pc, #40]	; (8018c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	68ba      	ldr	r2, [r7, #8]
 8018c56:	429a      	cmp	r2, r3
 8018c58:	d202      	bcs.n	8018c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018c5a:	4a08      	ldr	r2, [pc, #32]	; (8018c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018c5c:	68bb      	ldr	r3, [r7, #8]
 8018c5e:	6013      	str	r3, [r2, #0]
}
 8018c60:	bf00      	nop
 8018c62:	3710      	adds	r7, #16
 8018c64:	46bd      	mov	sp, r7
 8018c66:	bd80      	pop	{r7, pc}
 8018c68:	20000f08 	.word	0x20000f08
 8018c6c:	20000a30 	.word	0x20000a30
 8018c70:	20000ef0 	.word	0x20000ef0
 8018c74:	20000ec0 	.word	0x20000ec0
 8018c78:	20000ebc 	.word	0x20000ebc
 8018c7c:	20000f24 	.word	0x20000f24

08018c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b08a      	sub	sp, #40	; 0x28
 8018c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018c86:	2300      	movs	r3, #0
 8018c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018c8a:	f000 fb0d 	bl	80192a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018c8e:	4b1d      	ldr	r3, [pc, #116]	; (8018d04 <xTimerCreateTimerTask+0x84>)
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d021      	beq.n	8018cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018c96:	2300      	movs	r3, #0
 8018c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018c9e:	1d3a      	adds	r2, r7, #4
 8018ca0:	f107 0108 	add.w	r1, r7, #8
 8018ca4:	f107 030c 	add.w	r3, r7, #12
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f7fd fd85 	bl	80167b8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018cae:	6879      	ldr	r1, [r7, #4]
 8018cb0:	68bb      	ldr	r3, [r7, #8]
 8018cb2:	68fa      	ldr	r2, [r7, #12]
 8018cb4:	9202      	str	r2, [sp, #8]
 8018cb6:	9301      	str	r3, [sp, #4]
 8018cb8:	2302      	movs	r3, #2
 8018cba:	9300      	str	r3, [sp, #0]
 8018cbc:	2300      	movs	r3, #0
 8018cbe:	460a      	mov	r2, r1
 8018cc0:	4911      	ldr	r1, [pc, #68]	; (8018d08 <xTimerCreateTimerTask+0x88>)
 8018cc2:	4812      	ldr	r0, [pc, #72]	; (8018d0c <xTimerCreateTimerTask+0x8c>)
 8018cc4:	f7fe ff30 	bl	8017b28 <xTaskCreateStatic>
 8018cc8:	4602      	mov	r2, r0
 8018cca:	4b11      	ldr	r3, [pc, #68]	; (8018d10 <xTimerCreateTimerTask+0x90>)
 8018ccc:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018cce:	4b10      	ldr	r3, [pc, #64]	; (8018d10 <xTimerCreateTimerTask+0x90>)
 8018cd0:	681b      	ldr	r3, [r3, #0]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d001      	beq.n	8018cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018cd6:	2301      	movs	r3, #1
 8018cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018cda:	697b      	ldr	r3, [r7, #20]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d10b      	bne.n	8018cf8 <xTimerCreateTimerTask+0x78>
 8018ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ce4:	b672      	cpsid	i
 8018ce6:	f383 8811 	msr	BASEPRI, r3
 8018cea:	f3bf 8f6f 	isb	sy
 8018cee:	f3bf 8f4f 	dsb	sy
 8018cf2:	b662      	cpsie	i
 8018cf4:	613b      	str	r3, [r7, #16]
 8018cf6:	e7fe      	b.n	8018cf6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8018cf8:	697b      	ldr	r3, [r7, #20]
}
 8018cfa:	4618      	mov	r0, r3
 8018cfc:	3718      	adds	r7, #24
 8018cfe:	46bd      	mov	sp, r7
 8018d00:	bd80      	pop	{r7, pc}
 8018d02:	bf00      	nop
 8018d04:	20000f60 	.word	0x20000f60
 8018d08:	0801d5a8 	.word	0x0801d5a8
 8018d0c:	08018e4d 	.word	0x08018e4d
 8018d10:	20000f64 	.word	0x20000f64

08018d14 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b08a      	sub	sp, #40	; 0x28
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	60f8      	str	r0, [r7, #12]
 8018d1c:	60b9      	str	r1, [r7, #8]
 8018d1e:	607a      	str	r2, [r7, #4]
 8018d20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018d22:	2300      	movs	r3, #0
 8018d24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d10b      	bne.n	8018d44 <xTimerGenericCommand+0x30>
 8018d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d30:	b672      	cpsid	i
 8018d32:	f383 8811 	msr	BASEPRI, r3
 8018d36:	f3bf 8f6f 	isb	sy
 8018d3a:	f3bf 8f4f 	dsb	sy
 8018d3e:	b662      	cpsie	i
 8018d40:	623b      	str	r3, [r7, #32]
 8018d42:	e7fe      	b.n	8018d42 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018d44:	4b19      	ldr	r3, [pc, #100]	; (8018dac <xTimerGenericCommand+0x98>)
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d02a      	beq.n	8018da2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018d4c:	68bb      	ldr	r3, [r7, #8]
 8018d4e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018d58:	68bb      	ldr	r3, [r7, #8]
 8018d5a:	2b05      	cmp	r3, #5
 8018d5c:	dc18      	bgt.n	8018d90 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018d5e:	f7ff fdad 	bl	80188bc <xTaskGetSchedulerState>
 8018d62:	4603      	mov	r3, r0
 8018d64:	2b02      	cmp	r3, #2
 8018d66:	d109      	bne.n	8018d7c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018d68:	4b10      	ldr	r3, [pc, #64]	; (8018dac <xTimerGenericCommand+0x98>)
 8018d6a:	6818      	ldr	r0, [r3, #0]
 8018d6c:	f107 0110 	add.w	r1, r7, #16
 8018d70:	2300      	movs	r3, #0
 8018d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018d74:	f7fe f860 	bl	8016e38 <xQueueGenericSend>
 8018d78:	6278      	str	r0, [r7, #36]	; 0x24
 8018d7a:	e012      	b.n	8018da2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018d7c:	4b0b      	ldr	r3, [pc, #44]	; (8018dac <xTimerGenericCommand+0x98>)
 8018d7e:	6818      	ldr	r0, [r3, #0]
 8018d80:	f107 0110 	add.w	r1, r7, #16
 8018d84:	2300      	movs	r3, #0
 8018d86:	2200      	movs	r2, #0
 8018d88:	f7fe f856 	bl	8016e38 <xQueueGenericSend>
 8018d8c:	6278      	str	r0, [r7, #36]	; 0x24
 8018d8e:	e008      	b.n	8018da2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018d90:	4b06      	ldr	r3, [pc, #24]	; (8018dac <xTimerGenericCommand+0x98>)
 8018d92:	6818      	ldr	r0, [r3, #0]
 8018d94:	f107 0110 	add.w	r1, r7, #16
 8018d98:	2300      	movs	r3, #0
 8018d9a:	683a      	ldr	r2, [r7, #0]
 8018d9c:	f7fe f94e 	bl	801703c <xQueueGenericSendFromISR>
 8018da0:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018da4:	4618      	mov	r0, r3
 8018da6:	3728      	adds	r7, #40	; 0x28
 8018da8:	46bd      	mov	sp, r7
 8018daa:	bd80      	pop	{r7, pc}
 8018dac:	20000f60 	.word	0x20000f60

08018db0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018db0:	b580      	push	{r7, lr}
 8018db2:	b088      	sub	sp, #32
 8018db4:	af02      	add	r7, sp, #8
 8018db6:	6078      	str	r0, [r7, #4]
 8018db8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018dba:	4b23      	ldr	r3, [pc, #140]	; (8018e48 <prvProcessExpiredTimer+0x98>)
 8018dbc:	681b      	ldr	r3, [r3, #0]
 8018dbe:	68db      	ldr	r3, [r3, #12]
 8018dc0:	68db      	ldr	r3, [r3, #12]
 8018dc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018dc4:	697b      	ldr	r3, [r7, #20]
 8018dc6:	3304      	adds	r3, #4
 8018dc8:	4618      	mov	r0, r3
 8018dca:	f7fd fd99 	bl	8016900 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018dce:	697b      	ldr	r3, [r7, #20]
 8018dd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018dd4:	f003 0304 	and.w	r3, r3, #4
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d023      	beq.n	8018e24 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018ddc:	697b      	ldr	r3, [r7, #20]
 8018dde:	699a      	ldr	r2, [r3, #24]
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	18d1      	adds	r1, r2, r3
 8018de4:	687b      	ldr	r3, [r7, #4]
 8018de6:	683a      	ldr	r2, [r7, #0]
 8018de8:	6978      	ldr	r0, [r7, #20]
 8018dea:	f000 f8d3 	bl	8018f94 <prvInsertTimerInActiveList>
 8018dee:	4603      	mov	r3, r0
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d020      	beq.n	8018e36 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018df4:	2300      	movs	r3, #0
 8018df6:	9300      	str	r3, [sp, #0]
 8018df8:	2300      	movs	r3, #0
 8018dfa:	687a      	ldr	r2, [r7, #4]
 8018dfc:	2100      	movs	r1, #0
 8018dfe:	6978      	ldr	r0, [r7, #20]
 8018e00:	f7ff ff88 	bl	8018d14 <xTimerGenericCommand>
 8018e04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018e06:	693b      	ldr	r3, [r7, #16]
 8018e08:	2b00      	cmp	r3, #0
 8018e0a:	d114      	bne.n	8018e36 <prvProcessExpiredTimer+0x86>
 8018e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e10:	b672      	cpsid	i
 8018e12:	f383 8811 	msr	BASEPRI, r3
 8018e16:	f3bf 8f6f 	isb	sy
 8018e1a:	f3bf 8f4f 	dsb	sy
 8018e1e:	b662      	cpsie	i
 8018e20:	60fb      	str	r3, [r7, #12]
 8018e22:	e7fe      	b.n	8018e22 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018e24:	697b      	ldr	r3, [r7, #20]
 8018e26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018e2a:	f023 0301 	bic.w	r3, r3, #1
 8018e2e:	b2da      	uxtb	r2, r3
 8018e30:	697b      	ldr	r3, [r7, #20]
 8018e32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018e36:	697b      	ldr	r3, [r7, #20]
 8018e38:	6a1b      	ldr	r3, [r3, #32]
 8018e3a:	6978      	ldr	r0, [r7, #20]
 8018e3c:	4798      	blx	r3
}
 8018e3e:	bf00      	nop
 8018e40:	3718      	adds	r7, #24
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
 8018e46:	bf00      	nop
 8018e48:	20000f58 	.word	0x20000f58

08018e4c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e54:	f107 0308 	add.w	r3, r7, #8
 8018e58:	4618      	mov	r0, r3
 8018e5a:	f000 f857 	bl	8018f0c <prvGetNextExpireTime>
 8018e5e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018e60:	68bb      	ldr	r3, [r7, #8]
 8018e62:	4619      	mov	r1, r3
 8018e64:	68f8      	ldr	r0, [r7, #12]
 8018e66:	f000 f803 	bl	8018e70 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018e6a:	f000 f8d5 	bl	8019018 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018e6e:	e7f1      	b.n	8018e54 <prvTimerTask+0x8>

08018e70 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018e70:	b580      	push	{r7, lr}
 8018e72:	b084      	sub	sp, #16
 8018e74:	af00      	add	r7, sp, #0
 8018e76:	6078      	str	r0, [r7, #4]
 8018e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018e7a:	f7ff f919 	bl	80180b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018e7e:	f107 0308 	add.w	r3, r7, #8
 8018e82:	4618      	mov	r0, r3
 8018e84:	f000 f866 	bl	8018f54 <prvSampleTimeNow>
 8018e88:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018e8a:	68bb      	ldr	r3, [r7, #8]
 8018e8c:	2b00      	cmp	r3, #0
 8018e8e:	d130      	bne.n	8018ef2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	2b00      	cmp	r3, #0
 8018e94:	d10a      	bne.n	8018eac <prvProcessTimerOrBlockTask+0x3c>
 8018e96:	687a      	ldr	r2, [r7, #4]
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d806      	bhi.n	8018eac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018e9e:	f7ff f915 	bl	80180cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018ea2:	68f9      	ldr	r1, [r7, #12]
 8018ea4:	6878      	ldr	r0, [r7, #4]
 8018ea6:	f7ff ff83 	bl	8018db0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018eaa:	e024      	b.n	8018ef6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018eac:	683b      	ldr	r3, [r7, #0]
 8018eae:	2b00      	cmp	r3, #0
 8018eb0:	d008      	beq.n	8018ec4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018eb2:	4b13      	ldr	r3, [pc, #76]	; (8018f00 <prvProcessTimerOrBlockTask+0x90>)
 8018eb4:	681b      	ldr	r3, [r3, #0]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	2b00      	cmp	r3, #0
 8018eba:	d101      	bne.n	8018ec0 <prvProcessTimerOrBlockTask+0x50>
 8018ebc:	2301      	movs	r3, #1
 8018ebe:	e000      	b.n	8018ec2 <prvProcessTimerOrBlockTask+0x52>
 8018ec0:	2300      	movs	r3, #0
 8018ec2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018ec4:	4b0f      	ldr	r3, [pc, #60]	; (8018f04 <prvProcessTimerOrBlockTask+0x94>)
 8018ec6:	6818      	ldr	r0, [r3, #0]
 8018ec8:	687a      	ldr	r2, [r7, #4]
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	1ad3      	subs	r3, r2, r3
 8018ece:	683a      	ldr	r2, [r7, #0]
 8018ed0:	4619      	mov	r1, r3
 8018ed2:	f7fe fdf5 	bl	8017ac0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018ed6:	f7ff f8f9 	bl	80180cc <xTaskResumeAll>
 8018eda:	4603      	mov	r3, r0
 8018edc:	2b00      	cmp	r3, #0
 8018ede:	d10a      	bne.n	8018ef6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018ee0:	4b09      	ldr	r3, [pc, #36]	; (8018f08 <prvProcessTimerOrBlockTask+0x98>)
 8018ee2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018ee6:	601a      	str	r2, [r3, #0]
 8018ee8:	f3bf 8f4f 	dsb	sy
 8018eec:	f3bf 8f6f 	isb	sy
}
 8018ef0:	e001      	b.n	8018ef6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018ef2:	f7ff f8eb 	bl	80180cc <xTaskResumeAll>
}
 8018ef6:	bf00      	nop
 8018ef8:	3710      	adds	r7, #16
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}
 8018efe:	bf00      	nop
 8018f00:	20000f5c 	.word	0x20000f5c
 8018f04:	20000f60 	.word	0x20000f60
 8018f08:	e000ed04 	.word	0xe000ed04

08018f0c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018f0c:	b480      	push	{r7}
 8018f0e:	b085      	sub	sp, #20
 8018f10:	af00      	add	r7, sp, #0
 8018f12:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018f14:	4b0e      	ldr	r3, [pc, #56]	; (8018f50 <prvGetNextExpireTime+0x44>)
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d101      	bne.n	8018f22 <prvGetNextExpireTime+0x16>
 8018f1e:	2201      	movs	r2, #1
 8018f20:	e000      	b.n	8018f24 <prvGetNextExpireTime+0x18>
 8018f22:	2200      	movs	r2, #0
 8018f24:	687b      	ldr	r3, [r7, #4]
 8018f26:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d105      	bne.n	8018f3c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018f30:	4b07      	ldr	r3, [pc, #28]	; (8018f50 <prvGetNextExpireTime+0x44>)
 8018f32:	681b      	ldr	r3, [r3, #0]
 8018f34:	68db      	ldr	r3, [r3, #12]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	60fb      	str	r3, [r7, #12]
 8018f3a:	e001      	b.n	8018f40 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018f40:	68fb      	ldr	r3, [r7, #12]
}
 8018f42:	4618      	mov	r0, r3
 8018f44:	3714      	adds	r7, #20
 8018f46:	46bd      	mov	sp, r7
 8018f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f4c:	4770      	bx	lr
 8018f4e:	bf00      	nop
 8018f50:	20000f58 	.word	0x20000f58

08018f54 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018f54:	b580      	push	{r7, lr}
 8018f56:	b084      	sub	sp, #16
 8018f58:	af00      	add	r7, sp, #0
 8018f5a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018f5c:	f7ff f954 	bl	8018208 <xTaskGetTickCount>
 8018f60:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018f62:	4b0b      	ldr	r3, [pc, #44]	; (8018f90 <prvSampleTimeNow+0x3c>)
 8018f64:	681b      	ldr	r3, [r3, #0]
 8018f66:	68fa      	ldr	r2, [r7, #12]
 8018f68:	429a      	cmp	r2, r3
 8018f6a:	d205      	bcs.n	8018f78 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018f6c:	f000 f936 	bl	80191dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	2201      	movs	r2, #1
 8018f74:	601a      	str	r2, [r3, #0]
 8018f76:	e002      	b.n	8018f7e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	2200      	movs	r2, #0
 8018f7c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018f7e:	4a04      	ldr	r2, [pc, #16]	; (8018f90 <prvSampleTimeNow+0x3c>)
 8018f80:	68fb      	ldr	r3, [r7, #12]
 8018f82:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018f84:	68fb      	ldr	r3, [r7, #12]
}
 8018f86:	4618      	mov	r0, r3
 8018f88:	3710      	adds	r7, #16
 8018f8a:	46bd      	mov	sp, r7
 8018f8c:	bd80      	pop	{r7, pc}
 8018f8e:	bf00      	nop
 8018f90:	20000f68 	.word	0x20000f68

08018f94 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018f94:	b580      	push	{r7, lr}
 8018f96:	b086      	sub	sp, #24
 8018f98:	af00      	add	r7, sp, #0
 8018f9a:	60f8      	str	r0, [r7, #12]
 8018f9c:	60b9      	str	r1, [r7, #8]
 8018f9e:	607a      	str	r2, [r7, #4]
 8018fa0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018fa2:	2300      	movs	r3, #0
 8018fa4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	68ba      	ldr	r2, [r7, #8]
 8018faa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	68fa      	ldr	r2, [r7, #12]
 8018fb0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018fb2:	68ba      	ldr	r2, [r7, #8]
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	429a      	cmp	r2, r3
 8018fb8:	d812      	bhi.n	8018fe0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018fba:	687a      	ldr	r2, [r7, #4]
 8018fbc:	683b      	ldr	r3, [r7, #0]
 8018fbe:	1ad2      	subs	r2, r2, r3
 8018fc0:	68fb      	ldr	r3, [r7, #12]
 8018fc2:	699b      	ldr	r3, [r3, #24]
 8018fc4:	429a      	cmp	r2, r3
 8018fc6:	d302      	bcc.n	8018fce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018fc8:	2301      	movs	r3, #1
 8018fca:	617b      	str	r3, [r7, #20]
 8018fcc:	e01b      	b.n	8019006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018fce:	4b10      	ldr	r3, [pc, #64]	; (8019010 <prvInsertTimerInActiveList+0x7c>)
 8018fd0:	681a      	ldr	r2, [r3, #0]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	3304      	adds	r3, #4
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	4610      	mov	r0, r2
 8018fda:	f7fd fc58 	bl	801688e <vListInsert>
 8018fde:	e012      	b.n	8019006 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018fe0:	687a      	ldr	r2, [r7, #4]
 8018fe2:	683b      	ldr	r3, [r7, #0]
 8018fe4:	429a      	cmp	r2, r3
 8018fe6:	d206      	bcs.n	8018ff6 <prvInsertTimerInActiveList+0x62>
 8018fe8:	68ba      	ldr	r2, [r7, #8]
 8018fea:	683b      	ldr	r3, [r7, #0]
 8018fec:	429a      	cmp	r2, r3
 8018fee:	d302      	bcc.n	8018ff6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	617b      	str	r3, [r7, #20]
 8018ff4:	e007      	b.n	8019006 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018ff6:	4b07      	ldr	r3, [pc, #28]	; (8019014 <prvInsertTimerInActiveList+0x80>)
 8018ff8:	681a      	ldr	r2, [r3, #0]
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	3304      	adds	r3, #4
 8018ffe:	4619      	mov	r1, r3
 8019000:	4610      	mov	r0, r2
 8019002:	f7fd fc44 	bl	801688e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8019006:	697b      	ldr	r3, [r7, #20]
}
 8019008:	4618      	mov	r0, r3
 801900a:	3718      	adds	r7, #24
 801900c:	46bd      	mov	sp, r7
 801900e:	bd80      	pop	{r7, pc}
 8019010:	20000f5c 	.word	0x20000f5c
 8019014:	20000f58 	.word	0x20000f58

08019018 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b08e      	sub	sp, #56	; 0x38
 801901c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801901e:	e0cc      	b.n	80191ba <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	2b00      	cmp	r3, #0
 8019024:	da19      	bge.n	801905a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8019026:	1d3b      	adds	r3, r7, #4
 8019028:	3304      	adds	r3, #4
 801902a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801902c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801902e:	2b00      	cmp	r3, #0
 8019030:	d10b      	bne.n	801904a <prvProcessReceivedCommands+0x32>
 8019032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019036:	b672      	cpsid	i
 8019038:	f383 8811 	msr	BASEPRI, r3
 801903c:	f3bf 8f6f 	isb	sy
 8019040:	f3bf 8f4f 	dsb	sy
 8019044:	b662      	cpsie	i
 8019046:	61fb      	str	r3, [r7, #28]
 8019048:	e7fe      	b.n	8019048 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801904a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801904c:	681b      	ldr	r3, [r3, #0]
 801904e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019050:	6850      	ldr	r0, [r2, #4]
 8019052:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019054:	6892      	ldr	r2, [r2, #8]
 8019056:	4611      	mov	r1, r2
 8019058:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	2b00      	cmp	r3, #0
 801905e:	f2c0 80ab 	blt.w	80191b8 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8019062:	68fb      	ldr	r3, [r7, #12]
 8019064:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8019066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019068:	695b      	ldr	r3, [r3, #20]
 801906a:	2b00      	cmp	r3, #0
 801906c:	d004      	beq.n	8019078 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801906e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019070:	3304      	adds	r3, #4
 8019072:	4618      	mov	r0, r3
 8019074:	f7fd fc44 	bl	8016900 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8019078:	463b      	mov	r3, r7
 801907a:	4618      	mov	r0, r3
 801907c:	f7ff ff6a 	bl	8018f54 <prvSampleTimeNow>
 8019080:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	2b09      	cmp	r3, #9
 8019086:	f200 8098 	bhi.w	80191ba <prvProcessReceivedCommands+0x1a2>
 801908a:	a201      	add	r2, pc, #4	; (adr r2, 8019090 <prvProcessReceivedCommands+0x78>)
 801908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019090:	080190b9 	.word	0x080190b9
 8019094:	080190b9 	.word	0x080190b9
 8019098:	080190b9 	.word	0x080190b9
 801909c:	0801912f 	.word	0x0801912f
 80190a0:	08019143 	.word	0x08019143
 80190a4:	0801918f 	.word	0x0801918f
 80190a8:	080190b9 	.word	0x080190b9
 80190ac:	080190b9 	.word	0x080190b9
 80190b0:	0801912f 	.word	0x0801912f
 80190b4:	08019143 	.word	0x08019143
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80190b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190be:	f043 0301 	orr.w	r3, r3, #1
 80190c2:	b2da      	uxtb	r2, r3
 80190c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190c6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80190ca:	68ba      	ldr	r2, [r7, #8]
 80190cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ce:	699b      	ldr	r3, [r3, #24]
 80190d0:	18d1      	adds	r1, r2, r3
 80190d2:	68bb      	ldr	r3, [r7, #8]
 80190d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80190d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190d8:	f7ff ff5c 	bl	8018f94 <prvInsertTimerInActiveList>
 80190dc:	4603      	mov	r3, r0
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d06b      	beq.n	80191ba <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190e4:	6a1b      	ldr	r3, [r3, #32]
 80190e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80190e8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80190ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190f0:	f003 0304 	and.w	r3, r3, #4
 80190f4:	2b00      	cmp	r3, #0
 80190f6:	d060      	beq.n	80191ba <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80190f8:	68ba      	ldr	r2, [r7, #8]
 80190fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80190fc:	699b      	ldr	r3, [r3, #24]
 80190fe:	441a      	add	r2, r3
 8019100:	2300      	movs	r3, #0
 8019102:	9300      	str	r3, [sp, #0]
 8019104:	2300      	movs	r3, #0
 8019106:	2100      	movs	r1, #0
 8019108:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801910a:	f7ff fe03 	bl	8018d14 <xTimerGenericCommand>
 801910e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8019110:	6a3b      	ldr	r3, [r7, #32]
 8019112:	2b00      	cmp	r3, #0
 8019114:	d151      	bne.n	80191ba <prvProcessReceivedCommands+0x1a2>
 8019116:	f04f 0350 	mov.w	r3, #80	; 0x50
 801911a:	b672      	cpsid	i
 801911c:	f383 8811 	msr	BASEPRI, r3
 8019120:	f3bf 8f6f 	isb	sy
 8019124:	f3bf 8f4f 	dsb	sy
 8019128:	b662      	cpsie	i
 801912a:	61bb      	str	r3, [r7, #24]
 801912c:	e7fe      	b.n	801912c <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801912e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019130:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019134:	f023 0301 	bic.w	r3, r3, #1
 8019138:	b2da      	uxtb	r2, r3
 801913a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801913c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019140:	e03b      	b.n	80191ba <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019144:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019148:	f043 0301 	orr.w	r3, r3, #1
 801914c:	b2da      	uxtb	r2, r3
 801914e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019150:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019154:	68ba      	ldr	r2, [r7, #8]
 8019156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019158:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801915a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801915c:	699b      	ldr	r3, [r3, #24]
 801915e:	2b00      	cmp	r3, #0
 8019160:	d10b      	bne.n	801917a <prvProcessReceivedCommands+0x162>
 8019162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019166:	b672      	cpsid	i
 8019168:	f383 8811 	msr	BASEPRI, r3
 801916c:	f3bf 8f6f 	isb	sy
 8019170:	f3bf 8f4f 	dsb	sy
 8019174:	b662      	cpsie	i
 8019176:	617b      	str	r3, [r7, #20]
 8019178:	e7fe      	b.n	8019178 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801917a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801917c:	699a      	ldr	r2, [r3, #24]
 801917e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019180:	18d1      	adds	r1, r2, r3
 8019182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019186:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019188:	f7ff ff04 	bl	8018f94 <prvInsertTimerInActiveList>
					break;
 801918c:	e015      	b.n	80191ba <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019194:	f003 0302 	and.w	r3, r3, #2
 8019198:	2b00      	cmp	r3, #0
 801919a:	d103      	bne.n	80191a4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801919c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801919e:	f000 fbb5 	bl	801990c <vPortFree>
 80191a2:	e00a      	b.n	80191ba <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80191a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80191aa:	f023 0301 	bic.w	r3, r3, #1
 80191ae:	b2da      	uxtb	r2, r3
 80191b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80191b6:	e000      	b.n	80191ba <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80191b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80191ba:	4b07      	ldr	r3, [pc, #28]	; (80191d8 <prvProcessReceivedCommands+0x1c0>)
 80191bc:	681b      	ldr	r3, [r3, #0]
 80191be:	1d39      	adds	r1, r7, #4
 80191c0:	2200      	movs	r2, #0
 80191c2:	4618      	mov	r0, r3
 80191c4:	f7fe f868 	bl	8017298 <xQueueReceive>
 80191c8:	4603      	mov	r3, r0
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	f47f af28 	bne.w	8019020 <prvProcessReceivedCommands+0x8>
	}
}
 80191d0:	bf00      	nop
 80191d2:	3730      	adds	r7, #48	; 0x30
 80191d4:	46bd      	mov	sp, r7
 80191d6:	bd80      	pop	{r7, pc}
 80191d8:	20000f60 	.word	0x20000f60

080191dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80191dc:	b580      	push	{r7, lr}
 80191de:	b088      	sub	sp, #32
 80191e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80191e2:	e049      	b.n	8019278 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80191e4:	4b2e      	ldr	r3, [pc, #184]	; (80192a0 <prvSwitchTimerLists+0xc4>)
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	68db      	ldr	r3, [r3, #12]
 80191ea:	681b      	ldr	r3, [r3, #0]
 80191ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80191ee:	4b2c      	ldr	r3, [pc, #176]	; (80192a0 <prvSwitchTimerLists+0xc4>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	68db      	ldr	r3, [r3, #12]
 80191f4:	68db      	ldr	r3, [r3, #12]
 80191f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80191f8:	68fb      	ldr	r3, [r7, #12]
 80191fa:	3304      	adds	r3, #4
 80191fc:	4618      	mov	r0, r3
 80191fe:	f7fd fb7f 	bl	8016900 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8019202:	68fb      	ldr	r3, [r7, #12]
 8019204:	6a1b      	ldr	r3, [r3, #32]
 8019206:	68f8      	ldr	r0, [r7, #12]
 8019208:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019210:	f003 0304 	and.w	r3, r3, #4
 8019214:	2b00      	cmp	r3, #0
 8019216:	d02f      	beq.n	8019278 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8019218:	68fb      	ldr	r3, [r7, #12]
 801921a:	699b      	ldr	r3, [r3, #24]
 801921c:	693a      	ldr	r2, [r7, #16]
 801921e:	4413      	add	r3, r2
 8019220:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8019222:	68ba      	ldr	r2, [r7, #8]
 8019224:	693b      	ldr	r3, [r7, #16]
 8019226:	429a      	cmp	r2, r3
 8019228:	d90e      	bls.n	8019248 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	68ba      	ldr	r2, [r7, #8]
 801922e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019230:	68fb      	ldr	r3, [r7, #12]
 8019232:	68fa      	ldr	r2, [r7, #12]
 8019234:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019236:	4b1a      	ldr	r3, [pc, #104]	; (80192a0 <prvSwitchTimerLists+0xc4>)
 8019238:	681a      	ldr	r2, [r3, #0]
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	3304      	adds	r3, #4
 801923e:	4619      	mov	r1, r3
 8019240:	4610      	mov	r0, r2
 8019242:	f7fd fb24 	bl	801688e <vListInsert>
 8019246:	e017      	b.n	8019278 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019248:	2300      	movs	r3, #0
 801924a:	9300      	str	r3, [sp, #0]
 801924c:	2300      	movs	r3, #0
 801924e:	693a      	ldr	r2, [r7, #16]
 8019250:	2100      	movs	r1, #0
 8019252:	68f8      	ldr	r0, [r7, #12]
 8019254:	f7ff fd5e 	bl	8018d14 <xTimerGenericCommand>
 8019258:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801925a:	687b      	ldr	r3, [r7, #4]
 801925c:	2b00      	cmp	r3, #0
 801925e:	d10b      	bne.n	8019278 <prvSwitchTimerLists+0x9c>
 8019260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019264:	b672      	cpsid	i
 8019266:	f383 8811 	msr	BASEPRI, r3
 801926a:	f3bf 8f6f 	isb	sy
 801926e:	f3bf 8f4f 	dsb	sy
 8019272:	b662      	cpsie	i
 8019274:	603b      	str	r3, [r7, #0]
 8019276:	e7fe      	b.n	8019276 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019278:	4b09      	ldr	r3, [pc, #36]	; (80192a0 <prvSwitchTimerLists+0xc4>)
 801927a:	681b      	ldr	r3, [r3, #0]
 801927c:	681b      	ldr	r3, [r3, #0]
 801927e:	2b00      	cmp	r3, #0
 8019280:	d1b0      	bne.n	80191e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019282:	4b07      	ldr	r3, [pc, #28]	; (80192a0 <prvSwitchTimerLists+0xc4>)
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019288:	4b06      	ldr	r3, [pc, #24]	; (80192a4 <prvSwitchTimerLists+0xc8>)
 801928a:	681b      	ldr	r3, [r3, #0]
 801928c:	4a04      	ldr	r2, [pc, #16]	; (80192a0 <prvSwitchTimerLists+0xc4>)
 801928e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019290:	4a04      	ldr	r2, [pc, #16]	; (80192a4 <prvSwitchTimerLists+0xc8>)
 8019292:	697b      	ldr	r3, [r7, #20]
 8019294:	6013      	str	r3, [r2, #0]
}
 8019296:	bf00      	nop
 8019298:	3718      	adds	r7, #24
 801929a:	46bd      	mov	sp, r7
 801929c:	bd80      	pop	{r7, pc}
 801929e:	bf00      	nop
 80192a0:	20000f58 	.word	0x20000f58
 80192a4:	20000f5c 	.word	0x20000f5c

080192a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80192a8:	b580      	push	{r7, lr}
 80192aa:	b082      	sub	sp, #8
 80192ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80192ae:	f000 f943 	bl	8019538 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80192b2:	4b15      	ldr	r3, [pc, #84]	; (8019308 <prvCheckForValidListAndQueue+0x60>)
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	2b00      	cmp	r3, #0
 80192b8:	d120      	bne.n	80192fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80192ba:	4814      	ldr	r0, [pc, #80]	; (801930c <prvCheckForValidListAndQueue+0x64>)
 80192bc:	f7fd fa96 	bl	80167ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80192c0:	4813      	ldr	r0, [pc, #76]	; (8019310 <prvCheckForValidListAndQueue+0x68>)
 80192c2:	f7fd fa93 	bl	80167ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80192c6:	4b13      	ldr	r3, [pc, #76]	; (8019314 <prvCheckForValidListAndQueue+0x6c>)
 80192c8:	4a10      	ldr	r2, [pc, #64]	; (801930c <prvCheckForValidListAndQueue+0x64>)
 80192ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80192cc:	4b12      	ldr	r3, [pc, #72]	; (8019318 <prvCheckForValidListAndQueue+0x70>)
 80192ce:	4a10      	ldr	r2, [pc, #64]	; (8019310 <prvCheckForValidListAndQueue+0x68>)
 80192d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80192d2:	2300      	movs	r3, #0
 80192d4:	9300      	str	r3, [sp, #0]
 80192d6:	4b11      	ldr	r3, [pc, #68]	; (801931c <prvCheckForValidListAndQueue+0x74>)
 80192d8:	4a11      	ldr	r2, [pc, #68]	; (8019320 <prvCheckForValidListAndQueue+0x78>)
 80192da:	2110      	movs	r1, #16
 80192dc:	200a      	movs	r0, #10
 80192de:	f7fd fba3 	bl	8016a28 <xQueueGenericCreateStatic>
 80192e2:	4602      	mov	r2, r0
 80192e4:	4b08      	ldr	r3, [pc, #32]	; (8019308 <prvCheckForValidListAndQueue+0x60>)
 80192e6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80192e8:	4b07      	ldr	r3, [pc, #28]	; (8019308 <prvCheckForValidListAndQueue+0x60>)
 80192ea:	681b      	ldr	r3, [r3, #0]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d005      	beq.n	80192fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80192f0:	4b05      	ldr	r3, [pc, #20]	; (8019308 <prvCheckForValidListAndQueue+0x60>)
 80192f2:	681b      	ldr	r3, [r3, #0]
 80192f4:	490b      	ldr	r1, [pc, #44]	; (8019324 <prvCheckForValidListAndQueue+0x7c>)
 80192f6:	4618      	mov	r0, r3
 80192f8:	f7fe fb90 	bl	8017a1c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80192fc:	f000 f94e 	bl	801959c <vPortExitCritical>
}
 8019300:	bf00      	nop
 8019302:	46bd      	mov	sp, r7
 8019304:	bd80      	pop	{r7, pc}
 8019306:	bf00      	nop
 8019308:	20000f60 	.word	0x20000f60
 801930c:	20000f30 	.word	0x20000f30
 8019310:	20000f44 	.word	0x20000f44
 8019314:	20000f58 	.word	0x20000f58
 8019318:	20000f5c 	.word	0x20000f5c
 801931c:	2000100c 	.word	0x2000100c
 8019320:	20000f6c 	.word	0x20000f6c
 8019324:	0801d5b0 	.word	0x0801d5b0

08019328 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8019328:	b480      	push	{r7}
 801932a:	b085      	sub	sp, #20
 801932c:	af00      	add	r7, sp, #0
 801932e:	60f8      	str	r0, [r7, #12]
 8019330:	60b9      	str	r1, [r7, #8]
 8019332:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019334:	68fb      	ldr	r3, [r7, #12]
 8019336:	3b04      	subs	r3, #4
 8019338:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801933a:	68fb      	ldr	r3, [r7, #12]
 801933c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019340:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	3b04      	subs	r3, #4
 8019346:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019348:	68bb      	ldr	r3, [r7, #8]
 801934a:	f023 0201 	bic.w	r2, r3, #1
 801934e:	68fb      	ldr	r3, [r7, #12]
 8019350:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019352:	68fb      	ldr	r3, [r7, #12]
 8019354:	3b04      	subs	r3, #4
 8019356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019358:	4a0c      	ldr	r2, [pc, #48]	; (801938c <pxPortInitialiseStack+0x64>)
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801935e:	68fb      	ldr	r3, [r7, #12]
 8019360:	3b14      	subs	r3, #20
 8019362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019364:	687a      	ldr	r2, [r7, #4]
 8019366:	68fb      	ldr	r3, [r7, #12]
 8019368:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	3b04      	subs	r3, #4
 801936e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019370:	68fb      	ldr	r3, [r7, #12]
 8019372:	f06f 0202 	mvn.w	r2, #2
 8019376:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019378:	68fb      	ldr	r3, [r7, #12]
 801937a:	3b20      	subs	r3, #32
 801937c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801937e:	68fb      	ldr	r3, [r7, #12]
}
 8019380:	4618      	mov	r0, r3
 8019382:	3714      	adds	r7, #20
 8019384:	46bd      	mov	sp, r7
 8019386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801938a:	4770      	bx	lr
 801938c:	08019391 	.word	0x08019391

08019390 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019390:	b480      	push	{r7}
 8019392:	b085      	sub	sp, #20
 8019394:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019396:	2300      	movs	r3, #0
 8019398:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801939a:	4b13      	ldr	r3, [pc, #76]	; (80193e8 <prvTaskExitError+0x58>)
 801939c:	681b      	ldr	r3, [r3, #0]
 801939e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193a2:	d00b      	beq.n	80193bc <prvTaskExitError+0x2c>
 80193a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193a8:	b672      	cpsid	i
 80193aa:	f383 8811 	msr	BASEPRI, r3
 80193ae:	f3bf 8f6f 	isb	sy
 80193b2:	f3bf 8f4f 	dsb	sy
 80193b6:	b662      	cpsie	i
 80193b8:	60fb      	str	r3, [r7, #12]
 80193ba:	e7fe      	b.n	80193ba <prvTaskExitError+0x2a>
 80193bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80193c0:	b672      	cpsid	i
 80193c2:	f383 8811 	msr	BASEPRI, r3
 80193c6:	f3bf 8f6f 	isb	sy
 80193ca:	f3bf 8f4f 	dsb	sy
 80193ce:	b662      	cpsie	i
 80193d0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80193d2:	bf00      	nop
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d0fc      	beq.n	80193d4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80193da:	bf00      	nop
 80193dc:	3714      	adds	r7, #20
 80193de:	46bd      	mov	sp, r7
 80193e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193e4:	4770      	bx	lr
 80193e6:	bf00      	nop
 80193e8:	2000011c 	.word	0x2000011c
 80193ec:	00000000 	.word	0x00000000

080193f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80193f0:	4b07      	ldr	r3, [pc, #28]	; (8019410 <pxCurrentTCBConst2>)
 80193f2:	6819      	ldr	r1, [r3, #0]
 80193f4:	6808      	ldr	r0, [r1, #0]
 80193f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80193fa:	f380 8809 	msr	PSP, r0
 80193fe:	f3bf 8f6f 	isb	sy
 8019402:	f04f 0000 	mov.w	r0, #0
 8019406:	f380 8811 	msr	BASEPRI, r0
 801940a:	4770      	bx	lr
 801940c:	f3af 8000 	nop.w

08019410 <pxCurrentTCBConst2>:
 8019410:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8019414:	bf00      	nop
 8019416:	bf00      	nop

08019418 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8019418:	4808      	ldr	r0, [pc, #32]	; (801943c <prvPortStartFirstTask+0x24>)
 801941a:	6800      	ldr	r0, [r0, #0]
 801941c:	6800      	ldr	r0, [r0, #0]
 801941e:	f380 8808 	msr	MSP, r0
 8019422:	f04f 0000 	mov.w	r0, #0
 8019426:	f380 8814 	msr	CONTROL, r0
 801942a:	b662      	cpsie	i
 801942c:	b661      	cpsie	f
 801942e:	f3bf 8f4f 	dsb	sy
 8019432:	f3bf 8f6f 	isb	sy
 8019436:	df00      	svc	0
 8019438:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801943a:	bf00      	nop
 801943c:	e000ed08 	.word	0xe000ed08

08019440 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019440:	b580      	push	{r7, lr}
 8019442:	b084      	sub	sp, #16
 8019444:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019446:	4b36      	ldr	r3, [pc, #216]	; (8019520 <xPortStartScheduler+0xe0>)
 8019448:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801944a:	68fb      	ldr	r3, [r7, #12]
 801944c:	781b      	ldrb	r3, [r3, #0]
 801944e:	b2db      	uxtb	r3, r3
 8019450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019452:	68fb      	ldr	r3, [r7, #12]
 8019454:	22ff      	movs	r2, #255	; 0xff
 8019456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019458:	68fb      	ldr	r3, [r7, #12]
 801945a:	781b      	ldrb	r3, [r3, #0]
 801945c:	b2db      	uxtb	r3, r3
 801945e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019460:	78fb      	ldrb	r3, [r7, #3]
 8019462:	b2db      	uxtb	r3, r3
 8019464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019468:	b2da      	uxtb	r2, r3
 801946a:	4b2e      	ldr	r3, [pc, #184]	; (8019524 <xPortStartScheduler+0xe4>)
 801946c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801946e:	4b2e      	ldr	r3, [pc, #184]	; (8019528 <xPortStartScheduler+0xe8>)
 8019470:	2207      	movs	r2, #7
 8019472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019474:	e009      	b.n	801948a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8019476:	4b2c      	ldr	r3, [pc, #176]	; (8019528 <xPortStartScheduler+0xe8>)
 8019478:	681b      	ldr	r3, [r3, #0]
 801947a:	3b01      	subs	r3, #1
 801947c:	4a2a      	ldr	r2, [pc, #168]	; (8019528 <xPortStartScheduler+0xe8>)
 801947e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019480:	78fb      	ldrb	r3, [r7, #3]
 8019482:	b2db      	uxtb	r3, r3
 8019484:	005b      	lsls	r3, r3, #1
 8019486:	b2db      	uxtb	r3, r3
 8019488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801948a:	78fb      	ldrb	r3, [r7, #3]
 801948c:	b2db      	uxtb	r3, r3
 801948e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019492:	2b80      	cmp	r3, #128	; 0x80
 8019494:	d0ef      	beq.n	8019476 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019496:	4b24      	ldr	r3, [pc, #144]	; (8019528 <xPortStartScheduler+0xe8>)
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	f1c3 0307 	rsb	r3, r3, #7
 801949e:	2b04      	cmp	r3, #4
 80194a0:	d00b      	beq.n	80194ba <xPortStartScheduler+0x7a>
 80194a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80194a6:	b672      	cpsid	i
 80194a8:	f383 8811 	msr	BASEPRI, r3
 80194ac:	f3bf 8f6f 	isb	sy
 80194b0:	f3bf 8f4f 	dsb	sy
 80194b4:	b662      	cpsie	i
 80194b6:	60bb      	str	r3, [r7, #8]
 80194b8:	e7fe      	b.n	80194b8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80194ba:	4b1b      	ldr	r3, [pc, #108]	; (8019528 <xPortStartScheduler+0xe8>)
 80194bc:	681b      	ldr	r3, [r3, #0]
 80194be:	021b      	lsls	r3, r3, #8
 80194c0:	4a19      	ldr	r2, [pc, #100]	; (8019528 <xPortStartScheduler+0xe8>)
 80194c2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80194c4:	4b18      	ldr	r3, [pc, #96]	; (8019528 <xPortStartScheduler+0xe8>)
 80194c6:	681b      	ldr	r3, [r3, #0]
 80194c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80194cc:	4a16      	ldr	r2, [pc, #88]	; (8019528 <xPortStartScheduler+0xe8>)
 80194ce:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	b2da      	uxtb	r2, r3
 80194d4:	68fb      	ldr	r3, [r7, #12]
 80194d6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80194d8:	4b14      	ldr	r3, [pc, #80]	; (801952c <xPortStartScheduler+0xec>)
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	4a13      	ldr	r2, [pc, #76]	; (801952c <xPortStartScheduler+0xec>)
 80194de:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80194e2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80194e4:	4b11      	ldr	r3, [pc, #68]	; (801952c <xPortStartScheduler+0xec>)
 80194e6:	681b      	ldr	r3, [r3, #0]
 80194e8:	4a10      	ldr	r2, [pc, #64]	; (801952c <xPortStartScheduler+0xec>)
 80194ea:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80194ee:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80194f0:	f000 f8d4 	bl	801969c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80194f4:	4b0e      	ldr	r3, [pc, #56]	; (8019530 <xPortStartScheduler+0xf0>)
 80194f6:	2200      	movs	r2, #0
 80194f8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80194fa:	f000 f8f3 	bl	80196e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80194fe:	4b0d      	ldr	r3, [pc, #52]	; (8019534 <xPortStartScheduler+0xf4>)
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	4a0c      	ldr	r2, [pc, #48]	; (8019534 <xPortStartScheduler+0xf4>)
 8019504:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8019508:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801950a:	f7ff ff85 	bl	8019418 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801950e:	f7fe ff57 	bl	80183c0 <vTaskSwitchContext>
	prvTaskExitError();
 8019512:	f7ff ff3d 	bl	8019390 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8019516:	2300      	movs	r3, #0
}
 8019518:	4618      	mov	r0, r3
 801951a:	3710      	adds	r7, #16
 801951c:	46bd      	mov	sp, r7
 801951e:	bd80      	pop	{r7, pc}
 8019520:	e000e400 	.word	0xe000e400
 8019524:	2000105c 	.word	0x2000105c
 8019528:	20001060 	.word	0x20001060
 801952c:	e000ed20 	.word	0xe000ed20
 8019530:	2000011c 	.word	0x2000011c
 8019534:	e000ef34 	.word	0xe000ef34

08019538 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019538:	b480      	push	{r7}
 801953a:	b083      	sub	sp, #12
 801953c:	af00      	add	r7, sp, #0
 801953e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019542:	b672      	cpsid	i
 8019544:	f383 8811 	msr	BASEPRI, r3
 8019548:	f3bf 8f6f 	isb	sy
 801954c:	f3bf 8f4f 	dsb	sy
 8019550:	b662      	cpsie	i
 8019552:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019554:	4b0f      	ldr	r3, [pc, #60]	; (8019594 <vPortEnterCritical+0x5c>)
 8019556:	681b      	ldr	r3, [r3, #0]
 8019558:	3301      	adds	r3, #1
 801955a:	4a0e      	ldr	r2, [pc, #56]	; (8019594 <vPortEnterCritical+0x5c>)
 801955c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801955e:	4b0d      	ldr	r3, [pc, #52]	; (8019594 <vPortEnterCritical+0x5c>)
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	2b01      	cmp	r3, #1
 8019564:	d110      	bne.n	8019588 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019566:	4b0c      	ldr	r3, [pc, #48]	; (8019598 <vPortEnterCritical+0x60>)
 8019568:	681b      	ldr	r3, [r3, #0]
 801956a:	b2db      	uxtb	r3, r3
 801956c:	2b00      	cmp	r3, #0
 801956e:	d00b      	beq.n	8019588 <vPortEnterCritical+0x50>
 8019570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019574:	b672      	cpsid	i
 8019576:	f383 8811 	msr	BASEPRI, r3
 801957a:	f3bf 8f6f 	isb	sy
 801957e:	f3bf 8f4f 	dsb	sy
 8019582:	b662      	cpsie	i
 8019584:	603b      	str	r3, [r7, #0]
 8019586:	e7fe      	b.n	8019586 <vPortEnterCritical+0x4e>
	}
}
 8019588:	bf00      	nop
 801958a:	370c      	adds	r7, #12
 801958c:	46bd      	mov	sp, r7
 801958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019592:	4770      	bx	lr
 8019594:	2000011c 	.word	0x2000011c
 8019598:	e000ed04 	.word	0xe000ed04

0801959c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801959c:	b480      	push	{r7}
 801959e:	b083      	sub	sp, #12
 80195a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80195a2:	4b12      	ldr	r3, [pc, #72]	; (80195ec <vPortExitCritical+0x50>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d10b      	bne.n	80195c2 <vPortExitCritical+0x26>
 80195aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195ae:	b672      	cpsid	i
 80195b0:	f383 8811 	msr	BASEPRI, r3
 80195b4:	f3bf 8f6f 	isb	sy
 80195b8:	f3bf 8f4f 	dsb	sy
 80195bc:	b662      	cpsie	i
 80195be:	607b      	str	r3, [r7, #4]
 80195c0:	e7fe      	b.n	80195c0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80195c2:	4b0a      	ldr	r3, [pc, #40]	; (80195ec <vPortExitCritical+0x50>)
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	3b01      	subs	r3, #1
 80195c8:	4a08      	ldr	r2, [pc, #32]	; (80195ec <vPortExitCritical+0x50>)
 80195ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80195cc:	4b07      	ldr	r3, [pc, #28]	; (80195ec <vPortExitCritical+0x50>)
 80195ce:	681b      	ldr	r3, [r3, #0]
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d104      	bne.n	80195de <vPortExitCritical+0x42>
 80195d4:	2300      	movs	r3, #0
 80195d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80195d8:	683b      	ldr	r3, [r7, #0]
 80195da:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80195de:	bf00      	nop
 80195e0:	370c      	adds	r7, #12
 80195e2:	46bd      	mov	sp, r7
 80195e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195e8:	4770      	bx	lr
 80195ea:	bf00      	nop
 80195ec:	2000011c 	.word	0x2000011c

080195f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80195f0:	f3ef 8009 	mrs	r0, PSP
 80195f4:	f3bf 8f6f 	isb	sy
 80195f8:	4b15      	ldr	r3, [pc, #84]	; (8019650 <pxCurrentTCBConst>)
 80195fa:	681a      	ldr	r2, [r3, #0]
 80195fc:	f01e 0f10 	tst.w	lr, #16
 8019600:	bf08      	it	eq
 8019602:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019606:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801960a:	6010      	str	r0, [r2, #0]
 801960c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019610:	f04f 0050 	mov.w	r0, #80	; 0x50
 8019614:	b672      	cpsid	i
 8019616:	f380 8811 	msr	BASEPRI, r0
 801961a:	f3bf 8f4f 	dsb	sy
 801961e:	f3bf 8f6f 	isb	sy
 8019622:	b662      	cpsie	i
 8019624:	f7fe fecc 	bl	80183c0 <vTaskSwitchContext>
 8019628:	f04f 0000 	mov.w	r0, #0
 801962c:	f380 8811 	msr	BASEPRI, r0
 8019630:	bc09      	pop	{r0, r3}
 8019632:	6819      	ldr	r1, [r3, #0]
 8019634:	6808      	ldr	r0, [r1, #0]
 8019636:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801963a:	f01e 0f10 	tst.w	lr, #16
 801963e:	bf08      	it	eq
 8019640:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019644:	f380 8809 	msr	PSP, r0
 8019648:	f3bf 8f6f 	isb	sy
 801964c:	4770      	bx	lr
 801964e:	bf00      	nop

08019650 <pxCurrentTCBConst>:
 8019650:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019654:	bf00      	nop
 8019656:	bf00      	nop

08019658 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b082      	sub	sp, #8
 801965c:	af00      	add	r7, sp, #0
	__asm volatile
 801965e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019662:	b672      	cpsid	i
 8019664:	f383 8811 	msr	BASEPRI, r3
 8019668:	f3bf 8f6f 	isb	sy
 801966c:	f3bf 8f4f 	dsb	sy
 8019670:	b662      	cpsie	i
 8019672:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019674:	f7fe fdea 	bl	801824c <xTaskIncrementTick>
 8019678:	4603      	mov	r3, r0
 801967a:	2b00      	cmp	r3, #0
 801967c:	d003      	beq.n	8019686 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801967e:	4b06      	ldr	r3, [pc, #24]	; (8019698 <SysTick_Handler+0x40>)
 8019680:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019684:	601a      	str	r2, [r3, #0]
 8019686:	2300      	movs	r3, #0
 8019688:	603b      	str	r3, [r7, #0]
	__asm volatile
 801968a:	683b      	ldr	r3, [r7, #0]
 801968c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8019690:	bf00      	nop
 8019692:	3708      	adds	r7, #8
 8019694:	46bd      	mov	sp, r7
 8019696:	bd80      	pop	{r7, pc}
 8019698:	e000ed04 	.word	0xe000ed04

0801969c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801969c:	b480      	push	{r7}
 801969e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80196a0:	4b0b      	ldr	r3, [pc, #44]	; (80196d0 <vPortSetupTimerInterrupt+0x34>)
 80196a2:	2200      	movs	r2, #0
 80196a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80196a6:	4b0b      	ldr	r3, [pc, #44]	; (80196d4 <vPortSetupTimerInterrupt+0x38>)
 80196a8:	2200      	movs	r2, #0
 80196aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80196ac:	4b0a      	ldr	r3, [pc, #40]	; (80196d8 <vPortSetupTimerInterrupt+0x3c>)
 80196ae:	681b      	ldr	r3, [r3, #0]
 80196b0:	4a0a      	ldr	r2, [pc, #40]	; (80196dc <vPortSetupTimerInterrupt+0x40>)
 80196b2:	fba2 2303 	umull	r2, r3, r2, r3
 80196b6:	099b      	lsrs	r3, r3, #6
 80196b8:	4a09      	ldr	r2, [pc, #36]	; (80196e0 <vPortSetupTimerInterrupt+0x44>)
 80196ba:	3b01      	subs	r3, #1
 80196bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80196be:	4b04      	ldr	r3, [pc, #16]	; (80196d0 <vPortSetupTimerInterrupt+0x34>)
 80196c0:	2207      	movs	r2, #7
 80196c2:	601a      	str	r2, [r3, #0]
}
 80196c4:	bf00      	nop
 80196c6:	46bd      	mov	sp, r7
 80196c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196cc:	4770      	bx	lr
 80196ce:	bf00      	nop
 80196d0:	e000e010 	.word	0xe000e010
 80196d4:	e000e018 	.word	0xe000e018
 80196d8:	20000000 	.word	0x20000000
 80196dc:	10624dd3 	.word	0x10624dd3
 80196e0:	e000e014 	.word	0xe000e014

080196e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80196e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80196f4 <vPortEnableVFP+0x10>
 80196e8:	6801      	ldr	r1, [r0, #0]
 80196ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80196ee:	6001      	str	r1, [r0, #0]
 80196f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80196f2:	bf00      	nop
 80196f4:	e000ed88 	.word	0xe000ed88

080196f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80196f8:	b480      	push	{r7}
 80196fa:	b085      	sub	sp, #20
 80196fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80196fe:	f3ef 8305 	mrs	r3, IPSR
 8019702:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8019704:	68fb      	ldr	r3, [r7, #12]
 8019706:	2b0f      	cmp	r3, #15
 8019708:	d915      	bls.n	8019736 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801970a:	4a18      	ldr	r2, [pc, #96]	; (801976c <vPortValidateInterruptPriority+0x74>)
 801970c:	68fb      	ldr	r3, [r7, #12]
 801970e:	4413      	add	r3, r2
 8019710:	781b      	ldrb	r3, [r3, #0]
 8019712:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8019714:	4b16      	ldr	r3, [pc, #88]	; (8019770 <vPortValidateInterruptPriority+0x78>)
 8019716:	781b      	ldrb	r3, [r3, #0]
 8019718:	7afa      	ldrb	r2, [r7, #11]
 801971a:	429a      	cmp	r2, r3
 801971c:	d20b      	bcs.n	8019736 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019722:	b672      	cpsid	i
 8019724:	f383 8811 	msr	BASEPRI, r3
 8019728:	f3bf 8f6f 	isb	sy
 801972c:	f3bf 8f4f 	dsb	sy
 8019730:	b662      	cpsie	i
 8019732:	607b      	str	r3, [r7, #4]
 8019734:	e7fe      	b.n	8019734 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019736:	4b0f      	ldr	r3, [pc, #60]	; (8019774 <vPortValidateInterruptPriority+0x7c>)
 8019738:	681b      	ldr	r3, [r3, #0]
 801973a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801973e:	4b0e      	ldr	r3, [pc, #56]	; (8019778 <vPortValidateInterruptPriority+0x80>)
 8019740:	681b      	ldr	r3, [r3, #0]
 8019742:	429a      	cmp	r2, r3
 8019744:	d90b      	bls.n	801975e <vPortValidateInterruptPriority+0x66>
 8019746:	f04f 0350 	mov.w	r3, #80	; 0x50
 801974a:	b672      	cpsid	i
 801974c:	f383 8811 	msr	BASEPRI, r3
 8019750:	f3bf 8f6f 	isb	sy
 8019754:	f3bf 8f4f 	dsb	sy
 8019758:	b662      	cpsie	i
 801975a:	603b      	str	r3, [r7, #0]
 801975c:	e7fe      	b.n	801975c <vPortValidateInterruptPriority+0x64>
	}
 801975e:	bf00      	nop
 8019760:	3714      	adds	r7, #20
 8019762:	46bd      	mov	sp, r7
 8019764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019768:	4770      	bx	lr
 801976a:	bf00      	nop
 801976c:	e000e3f0 	.word	0xe000e3f0
 8019770:	2000105c 	.word	0x2000105c
 8019774:	e000ed0c 	.word	0xe000ed0c
 8019778:	20001060 	.word	0x20001060

0801977c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801977c:	b580      	push	{r7, lr}
 801977e:	b08a      	sub	sp, #40	; 0x28
 8019780:	af00      	add	r7, sp, #0
 8019782:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019784:	2300      	movs	r3, #0
 8019786:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019788:	f7fe fc92 	bl	80180b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801978c:	4b5a      	ldr	r3, [pc, #360]	; (80198f8 <pvPortMalloc+0x17c>)
 801978e:	681b      	ldr	r3, [r3, #0]
 8019790:	2b00      	cmp	r3, #0
 8019792:	d101      	bne.n	8019798 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019794:	f000 f916 	bl	80199c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019798:	4b58      	ldr	r3, [pc, #352]	; (80198fc <pvPortMalloc+0x180>)
 801979a:	681a      	ldr	r2, [r3, #0]
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	4013      	ands	r3, r2
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	f040 8090 	bne.w	80198c6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	2b00      	cmp	r3, #0
 80197aa:	d01e      	beq.n	80197ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80197ac:	2208      	movs	r2, #8
 80197ae:	687b      	ldr	r3, [r7, #4]
 80197b0:	4413      	add	r3, r2
 80197b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	f003 0307 	and.w	r3, r3, #7
 80197ba:	2b00      	cmp	r3, #0
 80197bc:	d015      	beq.n	80197ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	f023 0307 	bic.w	r3, r3, #7
 80197c4:	3308      	adds	r3, #8
 80197c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	f003 0307 	and.w	r3, r3, #7
 80197ce:	2b00      	cmp	r3, #0
 80197d0:	d00b      	beq.n	80197ea <pvPortMalloc+0x6e>
 80197d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197d6:	b672      	cpsid	i
 80197d8:	f383 8811 	msr	BASEPRI, r3
 80197dc:	f3bf 8f6f 	isb	sy
 80197e0:	f3bf 8f4f 	dsb	sy
 80197e4:	b662      	cpsie	i
 80197e6:	617b      	str	r3, [r7, #20]
 80197e8:	e7fe      	b.n	80197e8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80197ea:	687b      	ldr	r3, [r7, #4]
 80197ec:	2b00      	cmp	r3, #0
 80197ee:	d06a      	beq.n	80198c6 <pvPortMalloc+0x14a>
 80197f0:	4b43      	ldr	r3, [pc, #268]	; (8019900 <pvPortMalloc+0x184>)
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	687a      	ldr	r2, [r7, #4]
 80197f6:	429a      	cmp	r2, r3
 80197f8:	d865      	bhi.n	80198c6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80197fa:	4b42      	ldr	r3, [pc, #264]	; (8019904 <pvPortMalloc+0x188>)
 80197fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80197fe:	4b41      	ldr	r3, [pc, #260]	; (8019904 <pvPortMalloc+0x188>)
 8019800:	681b      	ldr	r3, [r3, #0]
 8019802:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019804:	e004      	b.n	8019810 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8019806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019808:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801980a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801980c:	681b      	ldr	r3, [r3, #0]
 801980e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8019810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019812:	685b      	ldr	r3, [r3, #4]
 8019814:	687a      	ldr	r2, [r7, #4]
 8019816:	429a      	cmp	r2, r3
 8019818:	d903      	bls.n	8019822 <pvPortMalloc+0xa6>
 801981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801981c:	681b      	ldr	r3, [r3, #0]
 801981e:	2b00      	cmp	r3, #0
 8019820:	d1f1      	bne.n	8019806 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8019822:	4b35      	ldr	r3, [pc, #212]	; (80198f8 <pvPortMalloc+0x17c>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019828:	429a      	cmp	r2, r3
 801982a:	d04c      	beq.n	80198c6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801982c:	6a3b      	ldr	r3, [r7, #32]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	2208      	movs	r2, #8
 8019832:	4413      	add	r3, r2
 8019834:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019838:	681a      	ldr	r2, [r3, #0]
 801983a:	6a3b      	ldr	r3, [r7, #32]
 801983c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801983e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019840:	685a      	ldr	r2, [r3, #4]
 8019842:	687b      	ldr	r3, [r7, #4]
 8019844:	1ad2      	subs	r2, r2, r3
 8019846:	2308      	movs	r3, #8
 8019848:	005b      	lsls	r3, r3, #1
 801984a:	429a      	cmp	r2, r3
 801984c:	d920      	bls.n	8019890 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801984e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	4413      	add	r3, r2
 8019854:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019856:	69bb      	ldr	r3, [r7, #24]
 8019858:	f003 0307 	and.w	r3, r3, #7
 801985c:	2b00      	cmp	r3, #0
 801985e:	d00b      	beq.n	8019878 <pvPortMalloc+0xfc>
 8019860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019864:	b672      	cpsid	i
 8019866:	f383 8811 	msr	BASEPRI, r3
 801986a:	f3bf 8f6f 	isb	sy
 801986e:	f3bf 8f4f 	dsb	sy
 8019872:	b662      	cpsie	i
 8019874:	613b      	str	r3, [r7, #16]
 8019876:	e7fe      	b.n	8019876 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801987a:	685a      	ldr	r2, [r3, #4]
 801987c:	687b      	ldr	r3, [r7, #4]
 801987e:	1ad2      	subs	r2, r2, r3
 8019880:	69bb      	ldr	r3, [r7, #24]
 8019882:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019886:	687a      	ldr	r2, [r7, #4]
 8019888:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801988a:	69b8      	ldr	r0, [r7, #24]
 801988c:	f000 f8fc 	bl	8019a88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019890:	4b1b      	ldr	r3, [pc, #108]	; (8019900 <pvPortMalloc+0x184>)
 8019892:	681a      	ldr	r2, [r3, #0]
 8019894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019896:	685b      	ldr	r3, [r3, #4]
 8019898:	1ad3      	subs	r3, r2, r3
 801989a:	4a19      	ldr	r2, [pc, #100]	; (8019900 <pvPortMalloc+0x184>)
 801989c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801989e:	4b18      	ldr	r3, [pc, #96]	; (8019900 <pvPortMalloc+0x184>)
 80198a0:	681a      	ldr	r2, [r3, #0]
 80198a2:	4b19      	ldr	r3, [pc, #100]	; (8019908 <pvPortMalloc+0x18c>)
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	429a      	cmp	r2, r3
 80198a8:	d203      	bcs.n	80198b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80198aa:	4b15      	ldr	r3, [pc, #84]	; (8019900 <pvPortMalloc+0x184>)
 80198ac:	681b      	ldr	r3, [r3, #0]
 80198ae:	4a16      	ldr	r2, [pc, #88]	; (8019908 <pvPortMalloc+0x18c>)
 80198b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80198b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198b4:	685a      	ldr	r2, [r3, #4]
 80198b6:	4b11      	ldr	r3, [pc, #68]	; (80198fc <pvPortMalloc+0x180>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	431a      	orrs	r2, r3
 80198bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80198c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80198c2:	2200      	movs	r2, #0
 80198c4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80198c6:	f7fe fc01 	bl	80180cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80198ca:	69fb      	ldr	r3, [r7, #28]
 80198cc:	f003 0307 	and.w	r3, r3, #7
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d00b      	beq.n	80198ec <pvPortMalloc+0x170>
 80198d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80198d8:	b672      	cpsid	i
 80198da:	f383 8811 	msr	BASEPRI, r3
 80198de:	f3bf 8f6f 	isb	sy
 80198e2:	f3bf 8f4f 	dsb	sy
 80198e6:	b662      	cpsie	i
 80198e8:	60fb      	str	r3, [r7, #12]
 80198ea:	e7fe      	b.n	80198ea <pvPortMalloc+0x16e>
	return pvReturn;
 80198ec:	69fb      	ldr	r3, [r7, #28]
}
 80198ee:	4618      	mov	r0, r3
 80198f0:	3728      	adds	r7, #40	; 0x28
 80198f2:	46bd      	mov	sp, r7
 80198f4:	bd80      	pop	{r7, pc}
 80198f6:	bf00      	nop
 80198f8:	2000886c 	.word	0x2000886c
 80198fc:	20008878 	.word	0x20008878
 8019900:	20008870 	.word	0x20008870
 8019904:	20008864 	.word	0x20008864
 8019908:	20008874 	.word	0x20008874

0801990c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801990c:	b580      	push	{r7, lr}
 801990e:	b086      	sub	sp, #24
 8019910:	af00      	add	r7, sp, #0
 8019912:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	2b00      	cmp	r3, #0
 801991c:	d04a      	beq.n	80199b4 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801991e:	2308      	movs	r3, #8
 8019920:	425b      	negs	r3, r3
 8019922:	697a      	ldr	r2, [r7, #20]
 8019924:	4413      	add	r3, r2
 8019926:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8019928:	697b      	ldr	r3, [r7, #20]
 801992a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801992c:	693b      	ldr	r3, [r7, #16]
 801992e:	685a      	ldr	r2, [r3, #4]
 8019930:	4b22      	ldr	r3, [pc, #136]	; (80199bc <vPortFree+0xb0>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	4013      	ands	r3, r2
 8019936:	2b00      	cmp	r3, #0
 8019938:	d10b      	bne.n	8019952 <vPortFree+0x46>
 801993a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801993e:	b672      	cpsid	i
 8019940:	f383 8811 	msr	BASEPRI, r3
 8019944:	f3bf 8f6f 	isb	sy
 8019948:	f3bf 8f4f 	dsb	sy
 801994c:	b662      	cpsie	i
 801994e:	60fb      	str	r3, [r7, #12]
 8019950:	e7fe      	b.n	8019950 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d00b      	beq.n	8019972 <vPortFree+0x66>
 801995a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801995e:	b672      	cpsid	i
 8019960:	f383 8811 	msr	BASEPRI, r3
 8019964:	f3bf 8f6f 	isb	sy
 8019968:	f3bf 8f4f 	dsb	sy
 801996c:	b662      	cpsie	i
 801996e:	60bb      	str	r3, [r7, #8]
 8019970:	e7fe      	b.n	8019970 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019972:	693b      	ldr	r3, [r7, #16]
 8019974:	685a      	ldr	r2, [r3, #4]
 8019976:	4b11      	ldr	r3, [pc, #68]	; (80199bc <vPortFree+0xb0>)
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	4013      	ands	r3, r2
 801997c:	2b00      	cmp	r3, #0
 801997e:	d019      	beq.n	80199b4 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019980:	693b      	ldr	r3, [r7, #16]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d115      	bne.n	80199b4 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019988:	693b      	ldr	r3, [r7, #16]
 801998a:	685a      	ldr	r2, [r3, #4]
 801998c:	4b0b      	ldr	r3, [pc, #44]	; (80199bc <vPortFree+0xb0>)
 801998e:	681b      	ldr	r3, [r3, #0]
 8019990:	43db      	mvns	r3, r3
 8019992:	401a      	ands	r2, r3
 8019994:	693b      	ldr	r3, [r7, #16]
 8019996:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019998:	f7fe fb8a 	bl	80180b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801999c:	693b      	ldr	r3, [r7, #16]
 801999e:	685a      	ldr	r2, [r3, #4]
 80199a0:	4b07      	ldr	r3, [pc, #28]	; (80199c0 <vPortFree+0xb4>)
 80199a2:	681b      	ldr	r3, [r3, #0]
 80199a4:	4413      	add	r3, r2
 80199a6:	4a06      	ldr	r2, [pc, #24]	; (80199c0 <vPortFree+0xb4>)
 80199a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80199aa:	6938      	ldr	r0, [r7, #16]
 80199ac:	f000 f86c 	bl	8019a88 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80199b0:	f7fe fb8c 	bl	80180cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80199b4:	bf00      	nop
 80199b6:	3718      	adds	r7, #24
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}
 80199bc:	20008878 	.word	0x20008878
 80199c0:	20008870 	.word	0x20008870

080199c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80199c4:	b480      	push	{r7}
 80199c6:	b085      	sub	sp, #20
 80199c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80199ca:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 80199ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80199d0:	4b27      	ldr	r3, [pc, #156]	; (8019a70 <prvHeapInit+0xac>)
 80199d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80199d4:	68fb      	ldr	r3, [r7, #12]
 80199d6:	f003 0307 	and.w	r3, r3, #7
 80199da:	2b00      	cmp	r3, #0
 80199dc:	d00c      	beq.n	80199f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	3307      	adds	r3, #7
 80199e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80199e4:	68fb      	ldr	r3, [r7, #12]
 80199e6:	f023 0307 	bic.w	r3, r3, #7
 80199ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80199ec:	68ba      	ldr	r2, [r7, #8]
 80199ee:	68fb      	ldr	r3, [r7, #12]
 80199f0:	1ad3      	subs	r3, r2, r3
 80199f2:	4a1f      	ldr	r2, [pc, #124]	; (8019a70 <prvHeapInit+0xac>)
 80199f4:	4413      	add	r3, r2
 80199f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80199fc:	4a1d      	ldr	r2, [pc, #116]	; (8019a74 <prvHeapInit+0xb0>)
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8019a02:	4b1c      	ldr	r3, [pc, #112]	; (8019a74 <prvHeapInit+0xb0>)
 8019a04:	2200      	movs	r2, #0
 8019a06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	68ba      	ldr	r2, [r7, #8]
 8019a0c:	4413      	add	r3, r2
 8019a0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8019a10:	2208      	movs	r2, #8
 8019a12:	68fb      	ldr	r3, [r7, #12]
 8019a14:	1a9b      	subs	r3, r3, r2
 8019a16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8019a18:	68fb      	ldr	r3, [r7, #12]
 8019a1a:	f023 0307 	bic.w	r3, r3, #7
 8019a1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8019a20:	68fb      	ldr	r3, [r7, #12]
 8019a22:	4a15      	ldr	r2, [pc, #84]	; (8019a78 <prvHeapInit+0xb4>)
 8019a24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8019a26:	4b14      	ldr	r3, [pc, #80]	; (8019a78 <prvHeapInit+0xb4>)
 8019a28:	681b      	ldr	r3, [r3, #0]
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8019a2e:	4b12      	ldr	r3, [pc, #72]	; (8019a78 <prvHeapInit+0xb4>)
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	2200      	movs	r2, #0
 8019a34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019a36:	687b      	ldr	r3, [r7, #4]
 8019a38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8019a3a:	683b      	ldr	r3, [r7, #0]
 8019a3c:	68fa      	ldr	r2, [r7, #12]
 8019a3e:	1ad2      	subs	r2, r2, r3
 8019a40:	683b      	ldr	r3, [r7, #0]
 8019a42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019a44:	4b0c      	ldr	r3, [pc, #48]	; (8019a78 <prvHeapInit+0xb4>)
 8019a46:	681a      	ldr	r2, [r3, #0]
 8019a48:	683b      	ldr	r3, [r7, #0]
 8019a4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a4c:	683b      	ldr	r3, [r7, #0]
 8019a4e:	685b      	ldr	r3, [r3, #4]
 8019a50:	4a0a      	ldr	r2, [pc, #40]	; (8019a7c <prvHeapInit+0xb8>)
 8019a52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019a54:	683b      	ldr	r3, [r7, #0]
 8019a56:	685b      	ldr	r3, [r3, #4]
 8019a58:	4a09      	ldr	r2, [pc, #36]	; (8019a80 <prvHeapInit+0xbc>)
 8019a5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8019a5c:	4b09      	ldr	r3, [pc, #36]	; (8019a84 <prvHeapInit+0xc0>)
 8019a5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019a62:	601a      	str	r2, [r3, #0]
}
 8019a64:	bf00      	nop
 8019a66:	3714      	adds	r7, #20
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a6e:	4770      	bx	lr
 8019a70:	20001064 	.word	0x20001064
 8019a74:	20008864 	.word	0x20008864
 8019a78:	2000886c 	.word	0x2000886c
 8019a7c:	20008874 	.word	0x20008874
 8019a80:	20008870 	.word	0x20008870
 8019a84:	20008878 	.word	0x20008878

08019a88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019a88:	b480      	push	{r7}
 8019a8a:	b085      	sub	sp, #20
 8019a8c:	af00      	add	r7, sp, #0
 8019a8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019a90:	4b28      	ldr	r3, [pc, #160]	; (8019b34 <prvInsertBlockIntoFreeList+0xac>)
 8019a92:	60fb      	str	r3, [r7, #12]
 8019a94:	e002      	b.n	8019a9c <prvInsertBlockIntoFreeList+0x14>
 8019a96:	68fb      	ldr	r3, [r7, #12]
 8019a98:	681b      	ldr	r3, [r3, #0]
 8019a9a:	60fb      	str	r3, [r7, #12]
 8019a9c:	68fb      	ldr	r3, [r7, #12]
 8019a9e:	681b      	ldr	r3, [r3, #0]
 8019aa0:	687a      	ldr	r2, [r7, #4]
 8019aa2:	429a      	cmp	r2, r3
 8019aa4:	d8f7      	bhi.n	8019a96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019aa6:	68fb      	ldr	r3, [r7, #12]
 8019aa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8019aaa:	68fb      	ldr	r3, [r7, #12]
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	68ba      	ldr	r2, [r7, #8]
 8019ab0:	4413      	add	r3, r2
 8019ab2:	687a      	ldr	r2, [r7, #4]
 8019ab4:	429a      	cmp	r2, r3
 8019ab6:	d108      	bne.n	8019aca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019ab8:	68fb      	ldr	r3, [r7, #12]
 8019aba:	685a      	ldr	r2, [r3, #4]
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	685b      	ldr	r3, [r3, #4]
 8019ac0:	441a      	add	r2, r3
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019ac6:	68fb      	ldr	r3, [r7, #12]
 8019ac8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	685b      	ldr	r3, [r3, #4]
 8019ad2:	68ba      	ldr	r2, [r7, #8]
 8019ad4:	441a      	add	r2, r3
 8019ad6:	68fb      	ldr	r3, [r7, #12]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	429a      	cmp	r2, r3
 8019adc:	d118      	bne.n	8019b10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	4b15      	ldr	r3, [pc, #84]	; (8019b38 <prvInsertBlockIntoFreeList+0xb0>)
 8019ae4:	681b      	ldr	r3, [r3, #0]
 8019ae6:	429a      	cmp	r2, r3
 8019ae8:	d00d      	beq.n	8019b06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8019aea:	687b      	ldr	r3, [r7, #4]
 8019aec:	685a      	ldr	r2, [r3, #4]
 8019aee:	68fb      	ldr	r3, [r7, #12]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	685b      	ldr	r3, [r3, #4]
 8019af4:	441a      	add	r2, r3
 8019af6:	687b      	ldr	r3, [r7, #4]
 8019af8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8019afa:	68fb      	ldr	r3, [r7, #12]
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	681a      	ldr	r2, [r3, #0]
 8019b00:	687b      	ldr	r3, [r7, #4]
 8019b02:	601a      	str	r2, [r3, #0]
 8019b04:	e008      	b.n	8019b18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8019b06:	4b0c      	ldr	r3, [pc, #48]	; (8019b38 <prvInsertBlockIntoFreeList+0xb0>)
 8019b08:	681a      	ldr	r2, [r3, #0]
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	601a      	str	r2, [r3, #0]
 8019b0e:	e003      	b.n	8019b18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8019b10:	68fb      	ldr	r3, [r7, #12]
 8019b12:	681a      	ldr	r2, [r3, #0]
 8019b14:	687b      	ldr	r3, [r7, #4]
 8019b16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8019b18:	68fa      	ldr	r2, [r7, #12]
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	429a      	cmp	r2, r3
 8019b1e:	d002      	beq.n	8019b26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8019b20:	68fb      	ldr	r3, [r7, #12]
 8019b22:	687a      	ldr	r2, [r7, #4]
 8019b24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019b26:	bf00      	nop
 8019b28:	3714      	adds	r7, #20
 8019b2a:	46bd      	mov	sp, r7
 8019b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b30:	4770      	bx	lr
 8019b32:	bf00      	nop
 8019b34:	20008864 	.word	0x20008864
 8019b38:	2000886c 	.word	0x2000886c

08019b3c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019b3c:	b580      	push	{r7, lr}
 8019b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019b40:	2200      	movs	r2, #0
 8019b42:	4912      	ldr	r1, [pc, #72]	; (8019b8c <MX_USB_DEVICE_Init+0x50>)
 8019b44:	4812      	ldr	r0, [pc, #72]	; (8019b90 <MX_USB_DEVICE_Init+0x54>)
 8019b46:	f7f7 ff77 	bl	8011a38 <USBD_Init>
 8019b4a:	4603      	mov	r3, r0
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d001      	beq.n	8019b54 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019b50:	f7eb f9f0 	bl	8004f34 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019b54:	490f      	ldr	r1, [pc, #60]	; (8019b94 <MX_USB_DEVICE_Init+0x58>)
 8019b56:	480e      	ldr	r0, [pc, #56]	; (8019b90 <MX_USB_DEVICE_Init+0x54>)
 8019b58:	f7f7 ffa4 	bl	8011aa4 <USBD_RegisterClass>
 8019b5c:	4603      	mov	r3, r0
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d001      	beq.n	8019b66 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019b62:	f7eb f9e7 	bl	8004f34 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019b66:	490c      	ldr	r1, [pc, #48]	; (8019b98 <MX_USB_DEVICE_Init+0x5c>)
 8019b68:	4809      	ldr	r0, [pc, #36]	; (8019b90 <MX_USB_DEVICE_Init+0x54>)
 8019b6a:	f7f7 fef9 	bl	8011960 <USBD_CDC_RegisterInterface>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	2b00      	cmp	r3, #0
 8019b72:	d001      	beq.n	8019b78 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019b74:	f7eb f9de 	bl	8004f34 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019b78:	4805      	ldr	r0, [pc, #20]	; (8019b90 <MX_USB_DEVICE_Init+0x54>)
 8019b7a:	f7f7 ffb4 	bl	8011ae6 <USBD_Start>
 8019b7e:	4603      	mov	r3, r0
 8019b80:	2b00      	cmp	r3, #0
 8019b82:	d001      	beq.n	8019b88 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019b84:	f7eb f9d6 	bl	8004f34 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019b88:	bf00      	nop
 8019b8a:	bd80      	pop	{r7, pc}
 8019b8c:	20000134 	.word	0x20000134
 8019b90:	2001cac8 	.word	0x2001cac8
 8019b94:	20000018 	.word	0x20000018
 8019b98:	20000120 	.word	0x20000120

08019b9c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019ba0:	2200      	movs	r2, #0
 8019ba2:	4905      	ldr	r1, [pc, #20]	; (8019bb8 <CDC_Init_FS+0x1c>)
 8019ba4:	4805      	ldr	r0, [pc, #20]	; (8019bbc <CDC_Init_FS+0x20>)
 8019ba6:	f7f7 fef0 	bl	801198a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019baa:	4905      	ldr	r1, [pc, #20]	; (8019bc0 <CDC_Init_FS+0x24>)
 8019bac:	4803      	ldr	r0, [pc, #12]	; (8019bbc <CDC_Init_FS+0x20>)
 8019bae:	f7f7 ff05 	bl	80119bc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019bb2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019bb4:	4618      	mov	r0, r3
 8019bb6:	bd80      	pop	{r7, pc}
 8019bb8:	2001d598 	.word	0x2001d598
 8019bbc:	2001cac8 	.word	0x2001cac8
 8019bc0:	2001cd98 	.word	0x2001cd98

08019bc4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019bc4:	b480      	push	{r7}
 8019bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019bc8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019bca:	4618      	mov	r0, r3
 8019bcc:	46bd      	mov	sp, r7
 8019bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bd2:	4770      	bx	lr

08019bd4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	b083      	sub	sp, #12
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	4603      	mov	r3, r0
 8019bdc:	6039      	str	r1, [r7, #0]
 8019bde:	71fb      	strb	r3, [r7, #7]
 8019be0:	4613      	mov	r3, r2
 8019be2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019be4:	79fb      	ldrb	r3, [r7, #7]
 8019be6:	2b23      	cmp	r3, #35	; 0x23
 8019be8:	d84a      	bhi.n	8019c80 <CDC_Control_FS+0xac>
 8019bea:	a201      	add	r2, pc, #4	; (adr r2, 8019bf0 <CDC_Control_FS+0x1c>)
 8019bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bf0:	08019c81 	.word	0x08019c81
 8019bf4:	08019c81 	.word	0x08019c81
 8019bf8:	08019c81 	.word	0x08019c81
 8019bfc:	08019c81 	.word	0x08019c81
 8019c00:	08019c81 	.word	0x08019c81
 8019c04:	08019c81 	.word	0x08019c81
 8019c08:	08019c81 	.word	0x08019c81
 8019c0c:	08019c81 	.word	0x08019c81
 8019c10:	08019c81 	.word	0x08019c81
 8019c14:	08019c81 	.word	0x08019c81
 8019c18:	08019c81 	.word	0x08019c81
 8019c1c:	08019c81 	.word	0x08019c81
 8019c20:	08019c81 	.word	0x08019c81
 8019c24:	08019c81 	.word	0x08019c81
 8019c28:	08019c81 	.word	0x08019c81
 8019c2c:	08019c81 	.word	0x08019c81
 8019c30:	08019c81 	.word	0x08019c81
 8019c34:	08019c81 	.word	0x08019c81
 8019c38:	08019c81 	.word	0x08019c81
 8019c3c:	08019c81 	.word	0x08019c81
 8019c40:	08019c81 	.word	0x08019c81
 8019c44:	08019c81 	.word	0x08019c81
 8019c48:	08019c81 	.word	0x08019c81
 8019c4c:	08019c81 	.word	0x08019c81
 8019c50:	08019c81 	.word	0x08019c81
 8019c54:	08019c81 	.word	0x08019c81
 8019c58:	08019c81 	.word	0x08019c81
 8019c5c:	08019c81 	.word	0x08019c81
 8019c60:	08019c81 	.word	0x08019c81
 8019c64:	08019c81 	.word	0x08019c81
 8019c68:	08019c81 	.word	0x08019c81
 8019c6c:	08019c81 	.word	0x08019c81
 8019c70:	08019c81 	.word	0x08019c81
 8019c74:	08019c81 	.word	0x08019c81
 8019c78:	08019c81 	.word	0x08019c81
 8019c7c:	08019c81 	.word	0x08019c81
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019c80:	bf00      	nop
  }

  return (USBD_OK);
 8019c82:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019c84:	4618      	mov	r0, r3
 8019c86:	370c      	adds	r7, #12
 8019c88:	46bd      	mov	sp, r7
 8019c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c8e:	4770      	bx	lr

08019c90 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b082      	sub	sp, #8
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
 8019c98:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019c9a:	6879      	ldr	r1, [r7, #4]
 8019c9c:	4805      	ldr	r0, [pc, #20]	; (8019cb4 <CDC_Receive_FS+0x24>)
 8019c9e:	f7f7 fe8d 	bl	80119bc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019ca2:	4804      	ldr	r0, [pc, #16]	; (8019cb4 <CDC_Receive_FS+0x24>)
 8019ca4:	f7f7 fe9e 	bl	80119e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019ca8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019caa:	4618      	mov	r0, r3
 8019cac:	3708      	adds	r7, #8
 8019cae:	46bd      	mov	sp, r7
 8019cb0:	bd80      	pop	{r7, pc}
 8019cb2:	bf00      	nop
 8019cb4:	2001cac8 	.word	0x2001cac8

08019cb8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019cb8:	b480      	push	{r7}
 8019cba:	b087      	sub	sp, #28
 8019cbc:	af00      	add	r7, sp, #0
 8019cbe:	60f8      	str	r0, [r7, #12]
 8019cc0:	60b9      	str	r1, [r7, #8]
 8019cc2:	4613      	mov	r3, r2
 8019cc4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019cca:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019cce:	4618      	mov	r0, r3
 8019cd0:	371c      	adds	r7, #28
 8019cd2:	46bd      	mov	sp, r7
 8019cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cd8:	4770      	bx	lr
	...

08019cdc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019cdc:	b480      	push	{r7}
 8019cde:	b083      	sub	sp, #12
 8019ce0:	af00      	add	r7, sp, #0
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	6039      	str	r1, [r7, #0]
 8019ce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019ce8:	683b      	ldr	r3, [r7, #0]
 8019cea:	2212      	movs	r2, #18
 8019cec:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019cee:	4b03      	ldr	r3, [pc, #12]	; (8019cfc <USBD_FS_DeviceDescriptor+0x20>)
}
 8019cf0:	4618      	mov	r0, r3
 8019cf2:	370c      	adds	r7, #12
 8019cf4:	46bd      	mov	sp, r7
 8019cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019cfa:	4770      	bx	lr
 8019cfc:	20000154 	.word	0x20000154

08019d00 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d00:	b480      	push	{r7}
 8019d02:	b083      	sub	sp, #12
 8019d04:	af00      	add	r7, sp, #0
 8019d06:	4603      	mov	r3, r0
 8019d08:	6039      	str	r1, [r7, #0]
 8019d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019d0c:	683b      	ldr	r3, [r7, #0]
 8019d0e:	2204      	movs	r2, #4
 8019d10:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019d12:	4b03      	ldr	r3, [pc, #12]	; (8019d20 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019d14:	4618      	mov	r0, r3
 8019d16:	370c      	adds	r7, #12
 8019d18:	46bd      	mov	sp, r7
 8019d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d1e:	4770      	bx	lr
 8019d20:	20000174 	.word	0x20000174

08019d24 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d24:	b580      	push	{r7, lr}
 8019d26:	b082      	sub	sp, #8
 8019d28:	af00      	add	r7, sp, #0
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	6039      	str	r1, [r7, #0]
 8019d2e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019d30:	79fb      	ldrb	r3, [r7, #7]
 8019d32:	2b00      	cmp	r3, #0
 8019d34:	d105      	bne.n	8019d42 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019d36:	683a      	ldr	r2, [r7, #0]
 8019d38:	4907      	ldr	r1, [pc, #28]	; (8019d58 <USBD_FS_ProductStrDescriptor+0x34>)
 8019d3a:	4808      	ldr	r0, [pc, #32]	; (8019d5c <USBD_FS_ProductStrDescriptor+0x38>)
 8019d3c:	f7f8 fecb 	bl	8012ad6 <USBD_GetString>
 8019d40:	e004      	b.n	8019d4c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019d42:	683a      	ldr	r2, [r7, #0]
 8019d44:	4904      	ldr	r1, [pc, #16]	; (8019d58 <USBD_FS_ProductStrDescriptor+0x34>)
 8019d46:	4805      	ldr	r0, [pc, #20]	; (8019d5c <USBD_FS_ProductStrDescriptor+0x38>)
 8019d48:	f7f8 fec5 	bl	8012ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019d4c:	4b02      	ldr	r3, [pc, #8]	; (8019d58 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019d4e:	4618      	mov	r0, r3
 8019d50:	3708      	adds	r7, #8
 8019d52:	46bd      	mov	sp, r7
 8019d54:	bd80      	pop	{r7, pc}
 8019d56:	bf00      	nop
 8019d58:	2001dd98 	.word	0x2001dd98
 8019d5c:	0801d5b8 	.word	0x0801d5b8

08019d60 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d60:	b580      	push	{r7, lr}
 8019d62:	b082      	sub	sp, #8
 8019d64:	af00      	add	r7, sp, #0
 8019d66:	4603      	mov	r3, r0
 8019d68:	6039      	str	r1, [r7, #0]
 8019d6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019d6c:	683a      	ldr	r2, [r7, #0]
 8019d6e:	4904      	ldr	r1, [pc, #16]	; (8019d80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019d70:	4804      	ldr	r0, [pc, #16]	; (8019d84 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019d72:	f7f8 feb0 	bl	8012ad6 <USBD_GetString>
  return USBD_StrDesc;
 8019d76:	4b02      	ldr	r3, [pc, #8]	; (8019d80 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019d78:	4618      	mov	r0, r3
 8019d7a:	3708      	adds	r7, #8
 8019d7c:	46bd      	mov	sp, r7
 8019d7e:	bd80      	pop	{r7, pc}
 8019d80:	2001dd98 	.word	0x2001dd98
 8019d84:	0801d5d0 	.word	0x0801d5d0

08019d88 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d88:	b580      	push	{r7, lr}
 8019d8a:	b082      	sub	sp, #8
 8019d8c:	af00      	add	r7, sp, #0
 8019d8e:	4603      	mov	r3, r0
 8019d90:	6039      	str	r1, [r7, #0]
 8019d92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019d94:	683b      	ldr	r3, [r7, #0]
 8019d96:	221a      	movs	r2, #26
 8019d98:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019d9a:	f000 f855 	bl	8019e48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019d9e:	4b02      	ldr	r3, [pc, #8]	; (8019da8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019da0:	4618      	mov	r0, r3
 8019da2:	3708      	adds	r7, #8
 8019da4:	46bd      	mov	sp, r7
 8019da6:	bd80      	pop	{r7, pc}
 8019da8:	20000178 	.word	0x20000178

08019dac <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019dac:	b580      	push	{r7, lr}
 8019dae:	b082      	sub	sp, #8
 8019db0:	af00      	add	r7, sp, #0
 8019db2:	4603      	mov	r3, r0
 8019db4:	6039      	str	r1, [r7, #0]
 8019db6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019db8:	79fb      	ldrb	r3, [r7, #7]
 8019dba:	2b00      	cmp	r3, #0
 8019dbc:	d105      	bne.n	8019dca <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019dbe:	683a      	ldr	r2, [r7, #0]
 8019dc0:	4907      	ldr	r1, [pc, #28]	; (8019de0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019dc2:	4808      	ldr	r0, [pc, #32]	; (8019de4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019dc4:	f7f8 fe87 	bl	8012ad6 <USBD_GetString>
 8019dc8:	e004      	b.n	8019dd4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019dca:	683a      	ldr	r2, [r7, #0]
 8019dcc:	4904      	ldr	r1, [pc, #16]	; (8019de0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019dce:	4805      	ldr	r0, [pc, #20]	; (8019de4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019dd0:	f7f8 fe81 	bl	8012ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019dd4:	4b02      	ldr	r3, [pc, #8]	; (8019de0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019dd6:	4618      	mov	r0, r3
 8019dd8:	3708      	adds	r7, #8
 8019dda:	46bd      	mov	sp, r7
 8019ddc:	bd80      	pop	{r7, pc}
 8019dde:	bf00      	nop
 8019de0:	2001dd98 	.word	0x2001dd98
 8019de4:	0801d5e4 	.word	0x0801d5e4

08019de8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019de8:	b580      	push	{r7, lr}
 8019dea:	b082      	sub	sp, #8
 8019dec:	af00      	add	r7, sp, #0
 8019dee:	4603      	mov	r3, r0
 8019df0:	6039      	str	r1, [r7, #0]
 8019df2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019df4:	79fb      	ldrb	r3, [r7, #7]
 8019df6:	2b00      	cmp	r3, #0
 8019df8:	d105      	bne.n	8019e06 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019dfa:	683a      	ldr	r2, [r7, #0]
 8019dfc:	4907      	ldr	r1, [pc, #28]	; (8019e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019dfe:	4808      	ldr	r0, [pc, #32]	; (8019e20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019e00:	f7f8 fe69 	bl	8012ad6 <USBD_GetString>
 8019e04:	e004      	b.n	8019e10 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019e06:	683a      	ldr	r2, [r7, #0]
 8019e08:	4904      	ldr	r1, [pc, #16]	; (8019e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019e0a:	4805      	ldr	r0, [pc, #20]	; (8019e20 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019e0c:	f7f8 fe63 	bl	8012ad6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019e10:	4b02      	ldr	r3, [pc, #8]	; (8019e1c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019e12:	4618      	mov	r0, r3
 8019e14:	3708      	adds	r7, #8
 8019e16:	46bd      	mov	sp, r7
 8019e18:	bd80      	pop	{r7, pc}
 8019e1a:	bf00      	nop
 8019e1c:	2001dd98 	.word	0x2001dd98
 8019e20:	0801d5f0 	.word	0x0801d5f0

08019e24 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019e24:	b480      	push	{r7}
 8019e26:	b083      	sub	sp, #12
 8019e28:	af00      	add	r7, sp, #0
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	6039      	str	r1, [r7, #0]
 8019e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8019e30:	683b      	ldr	r3, [r7, #0]
 8019e32:	220c      	movs	r2, #12
 8019e34:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8019e36:	4b03      	ldr	r3, [pc, #12]	; (8019e44 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8019e38:	4618      	mov	r0, r3
 8019e3a:	370c      	adds	r7, #12
 8019e3c:	46bd      	mov	sp, r7
 8019e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e42:	4770      	bx	lr
 8019e44:	20000168 	.word	0x20000168

08019e48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019e48:	b580      	push	{r7, lr}
 8019e4a:	b084      	sub	sp, #16
 8019e4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019e4e:	4b0f      	ldr	r3, [pc, #60]	; (8019e8c <Get_SerialNum+0x44>)
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019e54:	4b0e      	ldr	r3, [pc, #56]	; (8019e90 <Get_SerialNum+0x48>)
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019e5a:	4b0e      	ldr	r3, [pc, #56]	; (8019e94 <Get_SerialNum+0x4c>)
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019e60:	68fa      	ldr	r2, [r7, #12]
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	4413      	add	r3, r2
 8019e66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d009      	beq.n	8019e82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019e6e:	2208      	movs	r2, #8
 8019e70:	4909      	ldr	r1, [pc, #36]	; (8019e98 <Get_SerialNum+0x50>)
 8019e72:	68f8      	ldr	r0, [r7, #12]
 8019e74:	f000 f814 	bl	8019ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019e78:	2204      	movs	r2, #4
 8019e7a:	4908      	ldr	r1, [pc, #32]	; (8019e9c <Get_SerialNum+0x54>)
 8019e7c:	68b8      	ldr	r0, [r7, #8]
 8019e7e:	f000 f80f 	bl	8019ea0 <IntToUnicode>
  }
}
 8019e82:	bf00      	nop
 8019e84:	3710      	adds	r7, #16
 8019e86:	46bd      	mov	sp, r7
 8019e88:	bd80      	pop	{r7, pc}
 8019e8a:	bf00      	nop
 8019e8c:	1ff0f420 	.word	0x1ff0f420
 8019e90:	1ff0f424 	.word	0x1ff0f424
 8019e94:	1ff0f428 	.word	0x1ff0f428
 8019e98:	2000017a 	.word	0x2000017a
 8019e9c:	2000018a 	.word	0x2000018a

08019ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019ea0:	b480      	push	{r7}
 8019ea2:	b087      	sub	sp, #28
 8019ea4:	af00      	add	r7, sp, #0
 8019ea6:	60f8      	str	r0, [r7, #12]
 8019ea8:	60b9      	str	r1, [r7, #8]
 8019eaa:	4613      	mov	r3, r2
 8019eac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019eae:	2300      	movs	r3, #0
 8019eb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019eb2:	2300      	movs	r3, #0
 8019eb4:	75fb      	strb	r3, [r7, #23]
 8019eb6:	e027      	b.n	8019f08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019eb8:	68fb      	ldr	r3, [r7, #12]
 8019eba:	0f1b      	lsrs	r3, r3, #28
 8019ebc:	2b09      	cmp	r3, #9
 8019ebe:	d80b      	bhi.n	8019ed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	0f1b      	lsrs	r3, r3, #28
 8019ec4:	b2da      	uxtb	r2, r3
 8019ec6:	7dfb      	ldrb	r3, [r7, #23]
 8019ec8:	005b      	lsls	r3, r3, #1
 8019eca:	4619      	mov	r1, r3
 8019ecc:	68bb      	ldr	r3, [r7, #8]
 8019ece:	440b      	add	r3, r1
 8019ed0:	3230      	adds	r2, #48	; 0x30
 8019ed2:	b2d2      	uxtb	r2, r2
 8019ed4:	701a      	strb	r2, [r3, #0]
 8019ed6:	e00a      	b.n	8019eee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019ed8:	68fb      	ldr	r3, [r7, #12]
 8019eda:	0f1b      	lsrs	r3, r3, #28
 8019edc:	b2da      	uxtb	r2, r3
 8019ede:	7dfb      	ldrb	r3, [r7, #23]
 8019ee0:	005b      	lsls	r3, r3, #1
 8019ee2:	4619      	mov	r1, r3
 8019ee4:	68bb      	ldr	r3, [r7, #8]
 8019ee6:	440b      	add	r3, r1
 8019ee8:	3237      	adds	r2, #55	; 0x37
 8019eea:	b2d2      	uxtb	r2, r2
 8019eec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019eee:	68fb      	ldr	r3, [r7, #12]
 8019ef0:	011b      	lsls	r3, r3, #4
 8019ef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019ef4:	7dfb      	ldrb	r3, [r7, #23]
 8019ef6:	005b      	lsls	r3, r3, #1
 8019ef8:	3301      	adds	r3, #1
 8019efa:	68ba      	ldr	r2, [r7, #8]
 8019efc:	4413      	add	r3, r2
 8019efe:	2200      	movs	r2, #0
 8019f00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019f02:	7dfb      	ldrb	r3, [r7, #23]
 8019f04:	3301      	adds	r3, #1
 8019f06:	75fb      	strb	r3, [r7, #23]
 8019f08:	7dfa      	ldrb	r2, [r7, #23]
 8019f0a:	79fb      	ldrb	r3, [r7, #7]
 8019f0c:	429a      	cmp	r2, r3
 8019f0e:	d3d3      	bcc.n	8019eb8 <IntToUnicode+0x18>
  }
}
 8019f10:	bf00      	nop
 8019f12:	371c      	adds	r7, #28
 8019f14:	46bd      	mov	sp, r7
 8019f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f1a:	4770      	bx	lr

08019f1c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b08a      	sub	sp, #40	; 0x28
 8019f20:	af00      	add	r7, sp, #0
 8019f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019f24:	f107 0314 	add.w	r3, r7, #20
 8019f28:	2200      	movs	r2, #0
 8019f2a:	601a      	str	r2, [r3, #0]
 8019f2c:	605a      	str	r2, [r3, #4]
 8019f2e:	609a      	str	r2, [r3, #8]
 8019f30:	60da      	str	r2, [r3, #12]
 8019f32:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019f34:	687b      	ldr	r3, [r7, #4]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019f3c:	d13c      	bne.n	8019fb8 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019f3e:	4b20      	ldr	r3, [pc, #128]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f42:	4a1f      	ldr	r2, [pc, #124]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f44:	f043 0301 	orr.w	r3, r3, #1
 8019f48:	6313      	str	r3, [r2, #48]	; 0x30
 8019f4a:	4b1d      	ldr	r3, [pc, #116]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019f4e:	f003 0301 	and.w	r3, r3, #1
 8019f52:	613b      	str	r3, [r7, #16]
 8019f54:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019f56:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019f5c:	2302      	movs	r3, #2
 8019f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019f60:	2300      	movs	r3, #0
 8019f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019f64:	2303      	movs	r3, #3
 8019f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019f68:	230a      	movs	r3, #10
 8019f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019f6c:	f107 0314 	add.w	r3, r7, #20
 8019f70:	4619      	mov	r1, r3
 8019f72:	4814      	ldr	r0, [pc, #80]	; (8019fc4 <HAL_PCD_MspInit+0xa8>)
 8019f74:	f7ee fd44 	bl	8008a00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019f78:	4b11      	ldr	r3, [pc, #68]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f7c:	4a10      	ldr	r2, [pc, #64]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019f82:	6353      	str	r3, [r2, #52]	; 0x34
 8019f84:	4b0e      	ldr	r3, [pc, #56]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019f8c:	60fb      	str	r3, [r7, #12]
 8019f8e:	68fb      	ldr	r3, [r7, #12]
 8019f90:	4b0b      	ldr	r3, [pc, #44]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f94:	4a0a      	ldr	r2, [pc, #40]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019f9a:	6453      	str	r3, [r2, #68]	; 0x44
 8019f9c:	4b08      	ldr	r3, [pc, #32]	; (8019fc0 <HAL_PCD_MspInit+0xa4>)
 8019f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019fa4:	60bb      	str	r3, [r7, #8]
 8019fa6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019fa8:	2200      	movs	r2, #0
 8019faa:	2105      	movs	r1, #5
 8019fac:	2043      	movs	r0, #67	; 0x43
 8019fae:	f7ee f8e9 	bl	8008184 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019fb2:	2043      	movs	r0, #67	; 0x43
 8019fb4:	f7ee f902 	bl	80081bc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019fb8:	bf00      	nop
 8019fba:	3728      	adds	r7, #40	; 0x28
 8019fbc:	46bd      	mov	sp, r7
 8019fbe:	bd80      	pop	{r7, pc}
 8019fc0:	40023800 	.word	0x40023800
 8019fc4:	40020000 	.word	0x40020000

08019fc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019fc8:	b580      	push	{r7, lr}
 8019fca:	b082      	sub	sp, #8
 8019fcc:	af00      	add	r7, sp, #0
 8019fce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8019fd6:	687b      	ldr	r3, [r7, #4]
 8019fd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019fdc:	4619      	mov	r1, r3
 8019fde:	4610      	mov	r0, r2
 8019fe0:	f7f7 fdcc 	bl	8011b7c <USBD_LL_SetupStage>
}
 8019fe4:	bf00      	nop
 8019fe6:	3708      	adds	r7, #8
 8019fe8:	46bd      	mov	sp, r7
 8019fea:	bd80      	pop	{r7, pc}

08019fec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019fec:	b580      	push	{r7, lr}
 8019fee:	b082      	sub	sp, #8
 8019ff0:	af00      	add	r7, sp, #0
 8019ff2:	6078      	str	r0, [r7, #4]
 8019ff4:	460b      	mov	r3, r1
 8019ff6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8019ffe:	78fa      	ldrb	r2, [r7, #3]
 801a000:	6879      	ldr	r1, [r7, #4]
 801a002:	4613      	mov	r3, r2
 801a004:	00db      	lsls	r3, r3, #3
 801a006:	1a9b      	subs	r3, r3, r2
 801a008:	009b      	lsls	r3, r3, #2
 801a00a:	440b      	add	r3, r1
 801a00c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a010:	681a      	ldr	r2, [r3, #0]
 801a012:	78fb      	ldrb	r3, [r7, #3]
 801a014:	4619      	mov	r1, r3
 801a016:	f7f7 fe04 	bl	8011c22 <USBD_LL_DataOutStage>
}
 801a01a:	bf00      	nop
 801a01c:	3708      	adds	r7, #8
 801a01e:	46bd      	mov	sp, r7
 801a020:	bd80      	pop	{r7, pc}

0801a022 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a022:	b580      	push	{r7, lr}
 801a024:	b082      	sub	sp, #8
 801a026:	af00      	add	r7, sp, #0
 801a028:	6078      	str	r0, [r7, #4]
 801a02a:	460b      	mov	r3, r1
 801a02c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 801a034:	78fa      	ldrb	r2, [r7, #3]
 801a036:	6879      	ldr	r1, [r7, #4]
 801a038:	4613      	mov	r3, r2
 801a03a:	00db      	lsls	r3, r3, #3
 801a03c:	1a9b      	subs	r3, r3, r2
 801a03e:	009b      	lsls	r3, r3, #2
 801a040:	440b      	add	r3, r1
 801a042:	3348      	adds	r3, #72	; 0x48
 801a044:	681a      	ldr	r2, [r3, #0]
 801a046:	78fb      	ldrb	r3, [r7, #3]
 801a048:	4619      	mov	r1, r3
 801a04a:	f7f7 fe4d 	bl	8011ce8 <USBD_LL_DataInStage>
}
 801a04e:	bf00      	nop
 801a050:	3708      	adds	r7, #8
 801a052:	46bd      	mov	sp, r7
 801a054:	bd80      	pop	{r7, pc}

0801a056 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a056:	b580      	push	{r7, lr}
 801a058:	b082      	sub	sp, #8
 801a05a:	af00      	add	r7, sp, #0
 801a05c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a064:	4618      	mov	r0, r3
 801a066:	f7f7 ff51 	bl	8011f0c <USBD_LL_SOF>
}
 801a06a:	bf00      	nop
 801a06c:	3708      	adds	r7, #8
 801a06e:	46bd      	mov	sp, r7
 801a070:	bd80      	pop	{r7, pc}

0801a072 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801a072:	b580      	push	{r7, lr}
 801a074:	b084      	sub	sp, #16
 801a076:	af00      	add	r7, sp, #0
 801a078:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a07a:	2301      	movs	r3, #1
 801a07c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a07e:	687b      	ldr	r3, [r7, #4]
 801a080:	68db      	ldr	r3, [r3, #12]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d102      	bne.n	801a08c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a086:	2300      	movs	r3, #0
 801a088:	73fb      	strb	r3, [r7, #15]
 801a08a:	e008      	b.n	801a09e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	68db      	ldr	r3, [r3, #12]
 801a090:	2b02      	cmp	r3, #2
 801a092:	d102      	bne.n	801a09a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a094:	2301      	movs	r3, #1
 801a096:	73fb      	strb	r3, [r7, #15]
 801a098:	e001      	b.n	801a09e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a09a:	f7ea ff4b 	bl	8004f34 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a0a4:	7bfa      	ldrb	r2, [r7, #15]
 801a0a6:	4611      	mov	r1, r2
 801a0a8:	4618      	mov	r0, r3
 801a0aa:	f7f7 fef4 	bl	8011e96 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a0ae:	687b      	ldr	r3, [r7, #4]
 801a0b0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a0b4:	4618      	mov	r0, r3
 801a0b6:	f7f7 fead 	bl	8011e14 <USBD_LL_Reset>
}
 801a0ba:	bf00      	nop
 801a0bc:	3710      	adds	r7, #16
 801a0be:	46bd      	mov	sp, r7
 801a0c0:	bd80      	pop	{r7, pc}
	...

0801a0c4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a0c4:	b580      	push	{r7, lr}
 801a0c6:	b082      	sub	sp, #8
 801a0c8:	af00      	add	r7, sp, #0
 801a0ca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a0d2:	4618      	mov	r0, r3
 801a0d4:	f7f7 feef 	bl	8011eb6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a0e0:	681b      	ldr	r3, [r3, #0]
 801a0e2:	687a      	ldr	r2, [r7, #4]
 801a0e4:	6812      	ldr	r2, [r2, #0]
 801a0e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a0ea:	f043 0301 	orr.w	r3, r3, #1
 801a0ee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a0f0:	687b      	ldr	r3, [r7, #4]
 801a0f2:	6a1b      	ldr	r3, [r3, #32]
 801a0f4:	2b00      	cmp	r3, #0
 801a0f6:	d005      	beq.n	801a104 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a0f8:	4b04      	ldr	r3, [pc, #16]	; (801a10c <HAL_PCD_SuspendCallback+0x48>)
 801a0fa:	691b      	ldr	r3, [r3, #16]
 801a0fc:	4a03      	ldr	r2, [pc, #12]	; (801a10c <HAL_PCD_SuspendCallback+0x48>)
 801a0fe:	f043 0306 	orr.w	r3, r3, #6
 801a102:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a104:	bf00      	nop
 801a106:	3708      	adds	r7, #8
 801a108:	46bd      	mov	sp, r7
 801a10a:	bd80      	pop	{r7, pc}
 801a10c:	e000ed00 	.word	0xe000ed00

0801a110 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a110:	b580      	push	{r7, lr}
 801a112:	b082      	sub	sp, #8
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a11e:	4618      	mov	r0, r3
 801a120:	f7f7 fede 	bl	8011ee0 <USBD_LL_Resume>
}
 801a124:	bf00      	nop
 801a126:	3708      	adds	r7, #8
 801a128:	46bd      	mov	sp, r7
 801a12a:	bd80      	pop	{r7, pc}

0801a12c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
 801a134:	460b      	mov	r3, r1
 801a136:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a13e:	78fa      	ldrb	r2, [r7, #3]
 801a140:	4611      	mov	r1, r2
 801a142:	4618      	mov	r0, r3
 801a144:	f7f7 ff09 	bl	8011f5a <USBD_LL_IsoOUTIncomplete>
}
 801a148:	bf00      	nop
 801a14a:	3708      	adds	r7, #8
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}

0801a150 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b082      	sub	sp, #8
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
 801a158:	460b      	mov	r3, r1
 801a15a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a15c:	687b      	ldr	r3, [r7, #4]
 801a15e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a162:	78fa      	ldrb	r2, [r7, #3]
 801a164:	4611      	mov	r1, r2
 801a166:	4618      	mov	r0, r3
 801a168:	f7f7 feea 	bl	8011f40 <USBD_LL_IsoINIncomplete>
}
 801a16c:	bf00      	nop
 801a16e:	3708      	adds	r7, #8
 801a170:	46bd      	mov	sp, r7
 801a172:	bd80      	pop	{r7, pc}

0801a174 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b082      	sub	sp, #8
 801a178:	af00      	add	r7, sp, #0
 801a17a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a17c:	687b      	ldr	r3, [r7, #4]
 801a17e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a182:	4618      	mov	r0, r3
 801a184:	f7f7 fef6 	bl	8011f74 <USBD_LL_DevConnected>
}
 801a188:	bf00      	nop
 801a18a:	3708      	adds	r7, #8
 801a18c:	46bd      	mov	sp, r7
 801a18e:	bd80      	pop	{r7, pc}

0801a190 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a190:	b580      	push	{r7, lr}
 801a192:	b082      	sub	sp, #8
 801a194:	af00      	add	r7, sp, #0
 801a196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a19e:	4618      	mov	r0, r3
 801a1a0:	f7f7 fef3 	bl	8011f8a <USBD_LL_DevDisconnected>
}
 801a1a4:	bf00      	nop
 801a1a6:	3708      	adds	r7, #8
 801a1a8:	46bd      	mov	sp, r7
 801a1aa:	bd80      	pop	{r7, pc}

0801a1ac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a1ac:	b580      	push	{r7, lr}
 801a1ae:	b082      	sub	sp, #8
 801a1b0:	af00      	add	r7, sp, #0
 801a1b2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	781b      	ldrb	r3, [r3, #0]
 801a1b8:	2b00      	cmp	r3, #0
 801a1ba:	d13c      	bne.n	801a236 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a1bc:	4a20      	ldr	r2, [pc, #128]	; (801a240 <USBD_LL_Init+0x94>)
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	4a1e      	ldr	r2, [pc, #120]	; (801a240 <USBD_LL_Init+0x94>)
 801a1c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a1cc:	4b1c      	ldr	r3, [pc, #112]	; (801a240 <USBD_LL_Init+0x94>)
 801a1ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a1d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801a1d4:	4b1a      	ldr	r3, [pc, #104]	; (801a240 <USBD_LL_Init+0x94>)
 801a1d6:	2206      	movs	r2, #6
 801a1d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a1da:	4b19      	ldr	r3, [pc, #100]	; (801a240 <USBD_LL_Init+0x94>)
 801a1dc:	2202      	movs	r2, #2
 801a1de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a1e0:	4b17      	ldr	r3, [pc, #92]	; (801a240 <USBD_LL_Init+0x94>)
 801a1e2:	2200      	movs	r2, #0
 801a1e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a1e6:	4b16      	ldr	r3, [pc, #88]	; (801a240 <USBD_LL_Init+0x94>)
 801a1e8:	2202      	movs	r2, #2
 801a1ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a1ec:	4b14      	ldr	r3, [pc, #80]	; (801a240 <USBD_LL_Init+0x94>)
 801a1ee:	2200      	movs	r2, #0
 801a1f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a1f2:	4b13      	ldr	r3, [pc, #76]	; (801a240 <USBD_LL_Init+0x94>)
 801a1f4:	2200      	movs	r2, #0
 801a1f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a1f8:	4b11      	ldr	r3, [pc, #68]	; (801a240 <USBD_LL_Init+0x94>)
 801a1fa:	2200      	movs	r2, #0
 801a1fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a1fe:	4b10      	ldr	r3, [pc, #64]	; (801a240 <USBD_LL_Init+0x94>)
 801a200:	2200      	movs	r2, #0
 801a202:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a204:	4b0e      	ldr	r3, [pc, #56]	; (801a240 <USBD_LL_Init+0x94>)
 801a206:	2200      	movs	r2, #0
 801a208:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a20a:	480d      	ldr	r0, [pc, #52]	; (801a240 <USBD_LL_Init+0x94>)
 801a20c:	f7ee fded 	bl	8008dea <HAL_PCD_Init>
 801a210:	4603      	mov	r3, r0
 801a212:	2b00      	cmp	r3, #0
 801a214:	d001      	beq.n	801a21a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801a216:	f7ea fe8d 	bl	8004f34 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a21a:	2180      	movs	r1, #128	; 0x80
 801a21c:	4808      	ldr	r0, [pc, #32]	; (801a240 <USBD_LL_Init+0x94>)
 801a21e:	f7ef ff6e 	bl	800a0fe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a222:	2240      	movs	r2, #64	; 0x40
 801a224:	2100      	movs	r1, #0
 801a226:	4806      	ldr	r0, [pc, #24]	; (801a240 <USBD_LL_Init+0x94>)
 801a228:	f7ef ff22 	bl	800a070 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a22c:	2280      	movs	r2, #128	; 0x80
 801a22e:	2101      	movs	r1, #1
 801a230:	4803      	ldr	r0, [pc, #12]	; (801a240 <USBD_LL_Init+0x94>)
 801a232:	f7ef ff1d 	bl	800a070 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a236:	2300      	movs	r3, #0
}
 801a238:	4618      	mov	r0, r3
 801a23a:	3708      	adds	r7, #8
 801a23c:	46bd      	mov	sp, r7
 801a23e:	bd80      	pop	{r7, pc}
 801a240:	2001df98 	.word	0x2001df98

0801a244 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a244:	b580      	push	{r7, lr}
 801a246:	b084      	sub	sp, #16
 801a248:	af00      	add	r7, sp, #0
 801a24a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a24c:	2300      	movs	r3, #0
 801a24e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a250:	2300      	movs	r3, #0
 801a252:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a25a:	4618      	mov	r0, r3
 801a25c:	f7ee fee9 	bl	8009032 <HAL_PCD_Start>
 801a260:	4603      	mov	r3, r0
 801a262:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801a264:	7bfb      	ldrb	r3, [r7, #15]
 801a266:	4618      	mov	r0, r3
 801a268:	f000 f97e 	bl	801a568 <USBD_Get_USB_Status>
 801a26c:	4603      	mov	r3, r0
 801a26e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a270:	7bbb      	ldrb	r3, [r7, #14]
}
 801a272:	4618      	mov	r0, r3
 801a274:	3710      	adds	r7, #16
 801a276:	46bd      	mov	sp, r7
 801a278:	bd80      	pop	{r7, pc}

0801a27a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a27a:	b580      	push	{r7, lr}
 801a27c:	b084      	sub	sp, #16
 801a27e:	af00      	add	r7, sp, #0
 801a280:	6078      	str	r0, [r7, #4]
 801a282:	4608      	mov	r0, r1
 801a284:	4611      	mov	r1, r2
 801a286:	461a      	mov	r2, r3
 801a288:	4603      	mov	r3, r0
 801a28a:	70fb      	strb	r3, [r7, #3]
 801a28c:	460b      	mov	r3, r1
 801a28e:	70bb      	strb	r3, [r7, #2]
 801a290:	4613      	mov	r3, r2
 801a292:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a294:	2300      	movs	r3, #0
 801a296:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a298:	2300      	movs	r3, #0
 801a29a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a29c:	687b      	ldr	r3, [r7, #4]
 801a29e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a2a2:	78bb      	ldrb	r3, [r7, #2]
 801a2a4:	883a      	ldrh	r2, [r7, #0]
 801a2a6:	78f9      	ldrb	r1, [r7, #3]
 801a2a8:	f7ef fae9 	bl	800987e <HAL_PCD_EP_Open>
 801a2ac:	4603      	mov	r3, r0
 801a2ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a2b0:	7bfb      	ldrb	r3, [r7, #15]
 801a2b2:	4618      	mov	r0, r3
 801a2b4:	f000 f958 	bl	801a568 <USBD_Get_USB_Status>
 801a2b8:	4603      	mov	r3, r0
 801a2ba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a2bc:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2be:	4618      	mov	r0, r3
 801a2c0:	3710      	adds	r7, #16
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}

0801a2c6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a2c6:	b580      	push	{r7, lr}
 801a2c8:	b084      	sub	sp, #16
 801a2ca:	af00      	add	r7, sp, #0
 801a2cc:	6078      	str	r0, [r7, #4]
 801a2ce:	460b      	mov	r3, r1
 801a2d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a2d2:	2300      	movs	r3, #0
 801a2d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a2d6:	2300      	movs	r3, #0
 801a2d8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a2e0:	78fa      	ldrb	r2, [r7, #3]
 801a2e2:	4611      	mov	r1, r2
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	f7ef fb32 	bl	800994e <HAL_PCD_EP_Close>
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801a2ee:	7bfb      	ldrb	r3, [r7, #15]
 801a2f0:	4618      	mov	r0, r3
 801a2f2:	f000 f939 	bl	801a568 <USBD_Get_USB_Status>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801a2fa:	7bbb      	ldrb	r3, [r7, #14]
}
 801a2fc:	4618      	mov	r0, r3
 801a2fe:	3710      	adds	r7, #16
 801a300:	46bd      	mov	sp, r7
 801a302:	bd80      	pop	{r7, pc}

0801a304 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a304:	b580      	push	{r7, lr}
 801a306:	b084      	sub	sp, #16
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
 801a30c:	460b      	mov	r3, r1
 801a30e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a310:	2300      	movs	r3, #0
 801a312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a314:	2300      	movs	r3, #0
 801a316:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a318:	687b      	ldr	r3, [r7, #4]
 801a31a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a31e:	78fa      	ldrb	r2, [r7, #3]
 801a320:	4611      	mov	r1, r2
 801a322:	4618      	mov	r0, r3
 801a324:	f7ef fc0a 	bl	8009b3c <HAL_PCD_EP_SetStall>
 801a328:	4603      	mov	r3, r0
 801a32a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a32c:	7bfb      	ldrb	r3, [r7, #15]
 801a32e:	4618      	mov	r0, r3
 801a330:	f000 f91a 	bl	801a568 <USBD_Get_USB_Status>
 801a334:	4603      	mov	r3, r0
 801a336:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a338:	7bbb      	ldrb	r3, [r7, #14]
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	3710      	adds	r7, #16
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}

0801a342 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a342:	b580      	push	{r7, lr}
 801a344:	b084      	sub	sp, #16
 801a346:	af00      	add	r7, sp, #0
 801a348:	6078      	str	r0, [r7, #4]
 801a34a:	460b      	mov	r3, r1
 801a34c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a34e:	2300      	movs	r3, #0
 801a350:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a352:	2300      	movs	r3, #0
 801a354:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a356:	687b      	ldr	r3, [r7, #4]
 801a358:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a35c:	78fa      	ldrb	r2, [r7, #3]
 801a35e:	4611      	mov	r1, r2
 801a360:	4618      	mov	r0, r3
 801a362:	f7ef fc4f 	bl	8009c04 <HAL_PCD_EP_ClrStall>
 801a366:	4603      	mov	r3, r0
 801a368:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801a36a:	7bfb      	ldrb	r3, [r7, #15]
 801a36c:	4618      	mov	r0, r3
 801a36e:	f000 f8fb 	bl	801a568 <USBD_Get_USB_Status>
 801a372:	4603      	mov	r3, r0
 801a374:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801a376:	7bbb      	ldrb	r3, [r7, #14]
}
 801a378:	4618      	mov	r0, r3
 801a37a:	3710      	adds	r7, #16
 801a37c:	46bd      	mov	sp, r7
 801a37e:	bd80      	pop	{r7, pc}

0801a380 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a380:	b480      	push	{r7}
 801a382:	b085      	sub	sp, #20
 801a384:	af00      	add	r7, sp, #0
 801a386:	6078      	str	r0, [r7, #4]
 801a388:	460b      	mov	r3, r1
 801a38a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a38c:	687b      	ldr	r3, [r7, #4]
 801a38e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a392:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801a394:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a398:	2b00      	cmp	r3, #0
 801a39a:	da0b      	bge.n	801a3b4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801a39c:	78fb      	ldrb	r3, [r7, #3]
 801a39e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a3a2:	68f9      	ldr	r1, [r7, #12]
 801a3a4:	4613      	mov	r3, r2
 801a3a6:	00db      	lsls	r3, r3, #3
 801a3a8:	1a9b      	subs	r3, r3, r2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	440b      	add	r3, r1
 801a3ae:	333e      	adds	r3, #62	; 0x3e
 801a3b0:	781b      	ldrb	r3, [r3, #0]
 801a3b2:	e00b      	b.n	801a3cc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801a3b4:	78fb      	ldrb	r3, [r7, #3]
 801a3b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a3ba:	68f9      	ldr	r1, [r7, #12]
 801a3bc:	4613      	mov	r3, r2
 801a3be:	00db      	lsls	r3, r3, #3
 801a3c0:	1a9b      	subs	r3, r3, r2
 801a3c2:	009b      	lsls	r3, r3, #2
 801a3c4:	440b      	add	r3, r1
 801a3c6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a3ca:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	3714      	adds	r7, #20
 801a3d0:	46bd      	mov	sp, r7
 801a3d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3d6:	4770      	bx	lr

0801a3d8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a3d8:	b580      	push	{r7, lr}
 801a3da:	b084      	sub	sp, #16
 801a3dc:	af00      	add	r7, sp, #0
 801a3de:	6078      	str	r0, [r7, #4]
 801a3e0:	460b      	mov	r3, r1
 801a3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a3e8:	2300      	movs	r3, #0
 801a3ea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a3f2:	78fa      	ldrb	r2, [r7, #3]
 801a3f4:	4611      	mov	r1, r2
 801a3f6:	4618      	mov	r0, r3
 801a3f8:	f7ef fa1c 	bl	8009834 <HAL_PCD_SetAddress>
 801a3fc:	4603      	mov	r3, r0
 801a3fe:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a400:	7bfb      	ldrb	r3, [r7, #15]
 801a402:	4618      	mov	r0, r3
 801a404:	f000 f8b0 	bl	801a568 <USBD_Get_USB_Status>
 801a408:	4603      	mov	r3, r0
 801a40a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a40c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a40e:	4618      	mov	r0, r3
 801a410:	3710      	adds	r7, #16
 801a412:	46bd      	mov	sp, r7
 801a414:	bd80      	pop	{r7, pc}

0801a416 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a416:	b580      	push	{r7, lr}
 801a418:	b086      	sub	sp, #24
 801a41a:	af00      	add	r7, sp, #0
 801a41c:	60f8      	str	r0, [r7, #12]
 801a41e:	607a      	str	r2, [r7, #4]
 801a420:	603b      	str	r3, [r7, #0]
 801a422:	460b      	mov	r3, r1
 801a424:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a426:	2300      	movs	r3, #0
 801a428:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a42a:	2300      	movs	r3, #0
 801a42c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a434:	7af9      	ldrb	r1, [r7, #11]
 801a436:	683b      	ldr	r3, [r7, #0]
 801a438:	687a      	ldr	r2, [r7, #4]
 801a43a:	f7ef fb35 	bl	8009aa8 <HAL_PCD_EP_Transmit>
 801a43e:	4603      	mov	r3, r0
 801a440:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801a442:	7dfb      	ldrb	r3, [r7, #23]
 801a444:	4618      	mov	r0, r3
 801a446:	f000 f88f 	bl	801a568 <USBD_Get_USB_Status>
 801a44a:	4603      	mov	r3, r0
 801a44c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801a44e:	7dbb      	ldrb	r3, [r7, #22]
}
 801a450:	4618      	mov	r0, r3
 801a452:	3718      	adds	r7, #24
 801a454:	46bd      	mov	sp, r7
 801a456:	bd80      	pop	{r7, pc}

0801a458 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a458:	b580      	push	{r7, lr}
 801a45a:	b086      	sub	sp, #24
 801a45c:	af00      	add	r7, sp, #0
 801a45e:	60f8      	str	r0, [r7, #12]
 801a460:	607a      	str	r2, [r7, #4]
 801a462:	603b      	str	r3, [r7, #0]
 801a464:	460b      	mov	r3, r1
 801a466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a468:	2300      	movs	r3, #0
 801a46a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a46c:	2300      	movs	r3, #0
 801a46e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a476:	7af9      	ldrb	r1, [r7, #11]
 801a478:	683b      	ldr	r3, [r7, #0]
 801a47a:	687a      	ldr	r2, [r7, #4]
 801a47c:	f7ef fab1 	bl	80099e2 <HAL_PCD_EP_Receive>
 801a480:	4603      	mov	r3, r0
 801a482:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a484:	7dfb      	ldrb	r3, [r7, #23]
 801a486:	4618      	mov	r0, r3
 801a488:	f000 f86e 	bl	801a568 <USBD_Get_USB_Status>
 801a48c:	4603      	mov	r3, r0
 801a48e:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801a490:	7dbb      	ldrb	r3, [r7, #22]
}
 801a492:	4618      	mov	r0, r3
 801a494:	3718      	adds	r7, #24
 801a496:	46bd      	mov	sp, r7
 801a498:	bd80      	pop	{r7, pc}

0801a49a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a49a:	b580      	push	{r7, lr}
 801a49c:	b082      	sub	sp, #8
 801a49e:	af00      	add	r7, sp, #0
 801a4a0:	6078      	str	r0, [r7, #4]
 801a4a2:	460b      	mov	r3, r1
 801a4a4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a4ac:	78fa      	ldrb	r2, [r7, #3]
 801a4ae:	4611      	mov	r1, r2
 801a4b0:	4618      	mov	r0, r3
 801a4b2:	f7ef fae1 	bl	8009a78 <HAL_PCD_EP_GetRxCount>
 801a4b6:	4603      	mov	r3, r0
}
 801a4b8:	4618      	mov	r0, r3
 801a4ba:	3708      	adds	r7, #8
 801a4bc:	46bd      	mov	sp, r7
 801a4be:	bd80      	pop	{r7, pc}

0801a4c0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a4c0:	b580      	push	{r7, lr}
 801a4c2:	b082      	sub	sp, #8
 801a4c4:	af00      	add	r7, sp, #0
 801a4c6:	6078      	str	r0, [r7, #4]
 801a4c8:	460b      	mov	r3, r1
 801a4ca:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801a4cc:	78fb      	ldrb	r3, [r7, #3]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d002      	beq.n	801a4d8 <HAL_PCDEx_LPM_Callback+0x18>
 801a4d2:	2b01      	cmp	r3, #1
 801a4d4:	d01f      	beq.n	801a516 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 801a4d6:	e03b      	b.n	801a550 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	6a1b      	ldr	r3, [r3, #32]
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d007      	beq.n	801a4f0 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a4e0:	f000 f83c 	bl	801a55c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a4e4:	4b1c      	ldr	r3, [pc, #112]	; (801a558 <HAL_PCDEx_LPM_Callback+0x98>)
 801a4e6:	691b      	ldr	r3, [r3, #16]
 801a4e8:	4a1b      	ldr	r2, [pc, #108]	; (801a558 <HAL_PCDEx_LPM_Callback+0x98>)
 801a4ea:	f023 0306 	bic.w	r3, r3, #6
 801a4ee:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a4f0:	687b      	ldr	r3, [r7, #4]
 801a4f2:	681b      	ldr	r3, [r3, #0]
 801a4f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	687a      	ldr	r2, [r7, #4]
 801a4fc:	6812      	ldr	r2, [r2, #0]
 801a4fe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a502:	f023 0301 	bic.w	r3, r3, #1
 801a506:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a50e:	4618      	mov	r0, r3
 801a510:	f7f7 fce6 	bl	8011ee0 <USBD_LL_Resume>
    break;
 801a514:	e01c      	b.n	801a550 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	687a      	ldr	r2, [r7, #4]
 801a522:	6812      	ldr	r2, [r2, #0]
 801a524:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a528:	f043 0301 	orr.w	r3, r3, #1
 801a52c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a534:	4618      	mov	r0, r3
 801a536:	f7f7 fcbe 	bl	8011eb6 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	6a1b      	ldr	r3, [r3, #32]
 801a53e:	2b00      	cmp	r3, #0
 801a540:	d005      	beq.n	801a54e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a542:	4b05      	ldr	r3, [pc, #20]	; (801a558 <HAL_PCDEx_LPM_Callback+0x98>)
 801a544:	691b      	ldr	r3, [r3, #16]
 801a546:	4a04      	ldr	r2, [pc, #16]	; (801a558 <HAL_PCDEx_LPM_Callback+0x98>)
 801a548:	f043 0306 	orr.w	r3, r3, #6
 801a54c:	6113      	str	r3, [r2, #16]
    break;   
 801a54e:	bf00      	nop
}
 801a550:	bf00      	nop
 801a552:	3708      	adds	r7, #8
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}
 801a558:	e000ed00 	.word	0xe000ed00

0801a55c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a55c:	b580      	push	{r7, lr}
 801a55e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a560:	f7ea f8dc 	bl	800471c <SystemClock_Config>
}
 801a564:	bf00      	nop
 801a566:	bd80      	pop	{r7, pc}

0801a568 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a568:	b480      	push	{r7}
 801a56a:	b085      	sub	sp, #20
 801a56c:	af00      	add	r7, sp, #0
 801a56e:	4603      	mov	r3, r0
 801a570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a572:	2300      	movs	r3, #0
 801a574:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a576:	79fb      	ldrb	r3, [r7, #7]
 801a578:	2b03      	cmp	r3, #3
 801a57a:	d817      	bhi.n	801a5ac <USBD_Get_USB_Status+0x44>
 801a57c:	a201      	add	r2, pc, #4	; (adr r2, 801a584 <USBD_Get_USB_Status+0x1c>)
 801a57e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a582:	bf00      	nop
 801a584:	0801a595 	.word	0x0801a595
 801a588:	0801a59b 	.word	0x0801a59b
 801a58c:	0801a5a1 	.word	0x0801a5a1
 801a590:	0801a5a7 	.word	0x0801a5a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a594:	2300      	movs	r3, #0
 801a596:	73fb      	strb	r3, [r7, #15]
    break;
 801a598:	e00b      	b.n	801a5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a59a:	2303      	movs	r3, #3
 801a59c:	73fb      	strb	r3, [r7, #15]
    break;
 801a59e:	e008      	b.n	801a5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a5a0:	2301      	movs	r3, #1
 801a5a2:	73fb      	strb	r3, [r7, #15]
    break;
 801a5a4:	e005      	b.n	801a5b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a5a6:	2303      	movs	r3, #3
 801a5a8:	73fb      	strb	r3, [r7, #15]
    break;
 801a5aa:	e002      	b.n	801a5b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a5ac:	2303      	movs	r3, #3
 801a5ae:	73fb      	strb	r3, [r7, #15]
    break;
 801a5b0:	bf00      	nop
  }
  return usb_status;
 801a5b2:	7bfb      	ldrb	r3, [r7, #15]
}
 801a5b4:	4618      	mov	r0, r3
 801a5b6:	3714      	adds	r7, #20
 801a5b8:	46bd      	mov	sp, r7
 801a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5be:	4770      	bx	lr

0801a5c0 <__errno>:
 801a5c0:	4b01      	ldr	r3, [pc, #4]	; (801a5c8 <__errno+0x8>)
 801a5c2:	6818      	ldr	r0, [r3, #0]
 801a5c4:	4770      	bx	lr
 801a5c6:	bf00      	nop
 801a5c8:	20000194 	.word	0x20000194

0801a5cc <__libc_init_array>:
 801a5cc:	b570      	push	{r4, r5, r6, lr}
 801a5ce:	4e0d      	ldr	r6, [pc, #52]	; (801a604 <__libc_init_array+0x38>)
 801a5d0:	4c0d      	ldr	r4, [pc, #52]	; (801a608 <__libc_init_array+0x3c>)
 801a5d2:	1ba4      	subs	r4, r4, r6
 801a5d4:	10a4      	asrs	r4, r4, #2
 801a5d6:	2500      	movs	r5, #0
 801a5d8:	42a5      	cmp	r5, r4
 801a5da:	d109      	bne.n	801a5f0 <__libc_init_array+0x24>
 801a5dc:	4e0b      	ldr	r6, [pc, #44]	; (801a60c <__libc_init_array+0x40>)
 801a5de:	4c0c      	ldr	r4, [pc, #48]	; (801a610 <__libc_init_array+0x44>)
 801a5e0:	f002 faa2 	bl	801cb28 <_init>
 801a5e4:	1ba4      	subs	r4, r4, r6
 801a5e6:	10a4      	asrs	r4, r4, #2
 801a5e8:	2500      	movs	r5, #0
 801a5ea:	42a5      	cmp	r5, r4
 801a5ec:	d105      	bne.n	801a5fa <__libc_init_array+0x2e>
 801a5ee:	bd70      	pop	{r4, r5, r6, pc}
 801a5f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a5f4:	4798      	blx	r3
 801a5f6:	3501      	adds	r5, #1
 801a5f8:	e7ee      	b.n	801a5d8 <__libc_init_array+0xc>
 801a5fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a5fe:	4798      	blx	r3
 801a600:	3501      	adds	r5, #1
 801a602:	e7f2      	b.n	801a5ea <__libc_init_array+0x1e>
 801a604:	0801d930 	.word	0x0801d930
 801a608:	0801d930 	.word	0x0801d930
 801a60c:	0801d930 	.word	0x0801d930
 801a610:	0801d934 	.word	0x0801d934

0801a614 <malloc>:
 801a614:	4b02      	ldr	r3, [pc, #8]	; (801a620 <malloc+0xc>)
 801a616:	4601      	mov	r1, r0
 801a618:	6818      	ldr	r0, [r3, #0]
 801a61a:	f000 b86d 	b.w	801a6f8 <_malloc_r>
 801a61e:	bf00      	nop
 801a620:	20000194 	.word	0x20000194

0801a624 <free>:
 801a624:	4b02      	ldr	r3, [pc, #8]	; (801a630 <free+0xc>)
 801a626:	4601      	mov	r1, r0
 801a628:	6818      	ldr	r0, [r3, #0]
 801a62a:	f000 b817 	b.w	801a65c <_free_r>
 801a62e:	bf00      	nop
 801a630:	20000194 	.word	0x20000194

0801a634 <memcpy>:
 801a634:	b510      	push	{r4, lr}
 801a636:	1e43      	subs	r3, r0, #1
 801a638:	440a      	add	r2, r1
 801a63a:	4291      	cmp	r1, r2
 801a63c:	d100      	bne.n	801a640 <memcpy+0xc>
 801a63e:	bd10      	pop	{r4, pc}
 801a640:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a644:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a648:	e7f7      	b.n	801a63a <memcpy+0x6>

0801a64a <memset>:
 801a64a:	4402      	add	r2, r0
 801a64c:	4603      	mov	r3, r0
 801a64e:	4293      	cmp	r3, r2
 801a650:	d100      	bne.n	801a654 <memset+0xa>
 801a652:	4770      	bx	lr
 801a654:	f803 1b01 	strb.w	r1, [r3], #1
 801a658:	e7f9      	b.n	801a64e <memset+0x4>
	...

0801a65c <_free_r>:
 801a65c:	b538      	push	{r3, r4, r5, lr}
 801a65e:	4605      	mov	r5, r0
 801a660:	2900      	cmp	r1, #0
 801a662:	d045      	beq.n	801a6f0 <_free_r+0x94>
 801a664:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a668:	1f0c      	subs	r4, r1, #4
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	bfb8      	it	lt
 801a66e:	18e4      	addlt	r4, r4, r3
 801a670:	f000 f8e0 	bl	801a834 <__malloc_lock>
 801a674:	4a1f      	ldr	r2, [pc, #124]	; (801a6f4 <_free_r+0x98>)
 801a676:	6813      	ldr	r3, [r2, #0]
 801a678:	4610      	mov	r0, r2
 801a67a:	b933      	cbnz	r3, 801a68a <_free_r+0x2e>
 801a67c:	6063      	str	r3, [r4, #4]
 801a67e:	6014      	str	r4, [r2, #0]
 801a680:	4628      	mov	r0, r5
 801a682:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a686:	f000 b8d6 	b.w	801a836 <__malloc_unlock>
 801a68a:	42a3      	cmp	r3, r4
 801a68c:	d90c      	bls.n	801a6a8 <_free_r+0x4c>
 801a68e:	6821      	ldr	r1, [r4, #0]
 801a690:	1862      	adds	r2, r4, r1
 801a692:	4293      	cmp	r3, r2
 801a694:	bf04      	itt	eq
 801a696:	681a      	ldreq	r2, [r3, #0]
 801a698:	685b      	ldreq	r3, [r3, #4]
 801a69a:	6063      	str	r3, [r4, #4]
 801a69c:	bf04      	itt	eq
 801a69e:	1852      	addeq	r2, r2, r1
 801a6a0:	6022      	streq	r2, [r4, #0]
 801a6a2:	6004      	str	r4, [r0, #0]
 801a6a4:	e7ec      	b.n	801a680 <_free_r+0x24>
 801a6a6:	4613      	mov	r3, r2
 801a6a8:	685a      	ldr	r2, [r3, #4]
 801a6aa:	b10a      	cbz	r2, 801a6b0 <_free_r+0x54>
 801a6ac:	42a2      	cmp	r2, r4
 801a6ae:	d9fa      	bls.n	801a6a6 <_free_r+0x4a>
 801a6b0:	6819      	ldr	r1, [r3, #0]
 801a6b2:	1858      	adds	r0, r3, r1
 801a6b4:	42a0      	cmp	r0, r4
 801a6b6:	d10b      	bne.n	801a6d0 <_free_r+0x74>
 801a6b8:	6820      	ldr	r0, [r4, #0]
 801a6ba:	4401      	add	r1, r0
 801a6bc:	1858      	adds	r0, r3, r1
 801a6be:	4282      	cmp	r2, r0
 801a6c0:	6019      	str	r1, [r3, #0]
 801a6c2:	d1dd      	bne.n	801a680 <_free_r+0x24>
 801a6c4:	6810      	ldr	r0, [r2, #0]
 801a6c6:	6852      	ldr	r2, [r2, #4]
 801a6c8:	605a      	str	r2, [r3, #4]
 801a6ca:	4401      	add	r1, r0
 801a6cc:	6019      	str	r1, [r3, #0]
 801a6ce:	e7d7      	b.n	801a680 <_free_r+0x24>
 801a6d0:	d902      	bls.n	801a6d8 <_free_r+0x7c>
 801a6d2:	230c      	movs	r3, #12
 801a6d4:	602b      	str	r3, [r5, #0]
 801a6d6:	e7d3      	b.n	801a680 <_free_r+0x24>
 801a6d8:	6820      	ldr	r0, [r4, #0]
 801a6da:	1821      	adds	r1, r4, r0
 801a6dc:	428a      	cmp	r2, r1
 801a6de:	bf04      	itt	eq
 801a6e0:	6811      	ldreq	r1, [r2, #0]
 801a6e2:	6852      	ldreq	r2, [r2, #4]
 801a6e4:	6062      	str	r2, [r4, #4]
 801a6e6:	bf04      	itt	eq
 801a6e8:	1809      	addeq	r1, r1, r0
 801a6ea:	6021      	streq	r1, [r4, #0]
 801a6ec:	605c      	str	r4, [r3, #4]
 801a6ee:	e7c7      	b.n	801a680 <_free_r+0x24>
 801a6f0:	bd38      	pop	{r3, r4, r5, pc}
 801a6f2:	bf00      	nop
 801a6f4:	2000887c 	.word	0x2000887c

0801a6f8 <_malloc_r>:
 801a6f8:	b570      	push	{r4, r5, r6, lr}
 801a6fa:	1ccd      	adds	r5, r1, #3
 801a6fc:	f025 0503 	bic.w	r5, r5, #3
 801a700:	3508      	adds	r5, #8
 801a702:	2d0c      	cmp	r5, #12
 801a704:	bf38      	it	cc
 801a706:	250c      	movcc	r5, #12
 801a708:	2d00      	cmp	r5, #0
 801a70a:	4606      	mov	r6, r0
 801a70c:	db01      	blt.n	801a712 <_malloc_r+0x1a>
 801a70e:	42a9      	cmp	r1, r5
 801a710:	d903      	bls.n	801a71a <_malloc_r+0x22>
 801a712:	230c      	movs	r3, #12
 801a714:	6033      	str	r3, [r6, #0]
 801a716:	2000      	movs	r0, #0
 801a718:	bd70      	pop	{r4, r5, r6, pc}
 801a71a:	f000 f88b 	bl	801a834 <__malloc_lock>
 801a71e:	4a21      	ldr	r2, [pc, #132]	; (801a7a4 <_malloc_r+0xac>)
 801a720:	6814      	ldr	r4, [r2, #0]
 801a722:	4621      	mov	r1, r4
 801a724:	b991      	cbnz	r1, 801a74c <_malloc_r+0x54>
 801a726:	4c20      	ldr	r4, [pc, #128]	; (801a7a8 <_malloc_r+0xb0>)
 801a728:	6823      	ldr	r3, [r4, #0]
 801a72a:	b91b      	cbnz	r3, 801a734 <_malloc_r+0x3c>
 801a72c:	4630      	mov	r0, r6
 801a72e:	f000 f83d 	bl	801a7ac <_sbrk_r>
 801a732:	6020      	str	r0, [r4, #0]
 801a734:	4629      	mov	r1, r5
 801a736:	4630      	mov	r0, r6
 801a738:	f000 f838 	bl	801a7ac <_sbrk_r>
 801a73c:	1c43      	adds	r3, r0, #1
 801a73e:	d124      	bne.n	801a78a <_malloc_r+0x92>
 801a740:	230c      	movs	r3, #12
 801a742:	6033      	str	r3, [r6, #0]
 801a744:	4630      	mov	r0, r6
 801a746:	f000 f876 	bl	801a836 <__malloc_unlock>
 801a74a:	e7e4      	b.n	801a716 <_malloc_r+0x1e>
 801a74c:	680b      	ldr	r3, [r1, #0]
 801a74e:	1b5b      	subs	r3, r3, r5
 801a750:	d418      	bmi.n	801a784 <_malloc_r+0x8c>
 801a752:	2b0b      	cmp	r3, #11
 801a754:	d90f      	bls.n	801a776 <_malloc_r+0x7e>
 801a756:	600b      	str	r3, [r1, #0]
 801a758:	50cd      	str	r5, [r1, r3]
 801a75a:	18cc      	adds	r4, r1, r3
 801a75c:	4630      	mov	r0, r6
 801a75e:	f000 f86a 	bl	801a836 <__malloc_unlock>
 801a762:	f104 000b 	add.w	r0, r4, #11
 801a766:	1d23      	adds	r3, r4, #4
 801a768:	f020 0007 	bic.w	r0, r0, #7
 801a76c:	1ac3      	subs	r3, r0, r3
 801a76e:	d0d3      	beq.n	801a718 <_malloc_r+0x20>
 801a770:	425a      	negs	r2, r3
 801a772:	50e2      	str	r2, [r4, r3]
 801a774:	e7d0      	b.n	801a718 <_malloc_r+0x20>
 801a776:	428c      	cmp	r4, r1
 801a778:	684b      	ldr	r3, [r1, #4]
 801a77a:	bf16      	itet	ne
 801a77c:	6063      	strne	r3, [r4, #4]
 801a77e:	6013      	streq	r3, [r2, #0]
 801a780:	460c      	movne	r4, r1
 801a782:	e7eb      	b.n	801a75c <_malloc_r+0x64>
 801a784:	460c      	mov	r4, r1
 801a786:	6849      	ldr	r1, [r1, #4]
 801a788:	e7cc      	b.n	801a724 <_malloc_r+0x2c>
 801a78a:	1cc4      	adds	r4, r0, #3
 801a78c:	f024 0403 	bic.w	r4, r4, #3
 801a790:	42a0      	cmp	r0, r4
 801a792:	d005      	beq.n	801a7a0 <_malloc_r+0xa8>
 801a794:	1a21      	subs	r1, r4, r0
 801a796:	4630      	mov	r0, r6
 801a798:	f000 f808 	bl	801a7ac <_sbrk_r>
 801a79c:	3001      	adds	r0, #1
 801a79e:	d0cf      	beq.n	801a740 <_malloc_r+0x48>
 801a7a0:	6025      	str	r5, [r4, #0]
 801a7a2:	e7db      	b.n	801a75c <_malloc_r+0x64>
 801a7a4:	2000887c 	.word	0x2000887c
 801a7a8:	20008880 	.word	0x20008880

0801a7ac <_sbrk_r>:
 801a7ac:	b538      	push	{r3, r4, r5, lr}
 801a7ae:	4c06      	ldr	r4, [pc, #24]	; (801a7c8 <_sbrk_r+0x1c>)
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	4605      	mov	r5, r0
 801a7b4:	4608      	mov	r0, r1
 801a7b6:	6023      	str	r3, [r4, #0]
 801a7b8:	f7eb f9ee 	bl	8005b98 <_sbrk>
 801a7bc:	1c43      	adds	r3, r0, #1
 801a7be:	d102      	bne.n	801a7c6 <_sbrk_r+0x1a>
 801a7c0:	6823      	ldr	r3, [r4, #0]
 801a7c2:	b103      	cbz	r3, 801a7c6 <_sbrk_r+0x1a>
 801a7c4:	602b      	str	r3, [r5, #0]
 801a7c6:	bd38      	pop	{r3, r4, r5, pc}
 801a7c8:	2001e39c 	.word	0x2001e39c

0801a7cc <sniprintf>:
 801a7cc:	b40c      	push	{r2, r3}
 801a7ce:	b530      	push	{r4, r5, lr}
 801a7d0:	4b17      	ldr	r3, [pc, #92]	; (801a830 <sniprintf+0x64>)
 801a7d2:	1e0c      	subs	r4, r1, #0
 801a7d4:	b09d      	sub	sp, #116	; 0x74
 801a7d6:	681d      	ldr	r5, [r3, #0]
 801a7d8:	da08      	bge.n	801a7ec <sniprintf+0x20>
 801a7da:	238b      	movs	r3, #139	; 0x8b
 801a7dc:	602b      	str	r3, [r5, #0]
 801a7de:	f04f 30ff 	mov.w	r0, #4294967295
 801a7e2:	b01d      	add	sp, #116	; 0x74
 801a7e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a7e8:	b002      	add	sp, #8
 801a7ea:	4770      	bx	lr
 801a7ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a7f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a7f4:	bf14      	ite	ne
 801a7f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a7fa:	4623      	moveq	r3, r4
 801a7fc:	9304      	str	r3, [sp, #16]
 801a7fe:	9307      	str	r3, [sp, #28]
 801a800:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a804:	9002      	str	r0, [sp, #8]
 801a806:	9006      	str	r0, [sp, #24]
 801a808:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a80c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a80e:	ab21      	add	r3, sp, #132	; 0x84
 801a810:	a902      	add	r1, sp, #8
 801a812:	4628      	mov	r0, r5
 801a814:	9301      	str	r3, [sp, #4]
 801a816:	f000 f869 	bl	801a8ec <_svfiprintf_r>
 801a81a:	1c43      	adds	r3, r0, #1
 801a81c:	bfbc      	itt	lt
 801a81e:	238b      	movlt	r3, #139	; 0x8b
 801a820:	602b      	strlt	r3, [r5, #0]
 801a822:	2c00      	cmp	r4, #0
 801a824:	d0dd      	beq.n	801a7e2 <sniprintf+0x16>
 801a826:	9b02      	ldr	r3, [sp, #8]
 801a828:	2200      	movs	r2, #0
 801a82a:	701a      	strb	r2, [r3, #0]
 801a82c:	e7d9      	b.n	801a7e2 <sniprintf+0x16>
 801a82e:	bf00      	nop
 801a830:	20000194 	.word	0x20000194

0801a834 <__malloc_lock>:
 801a834:	4770      	bx	lr

0801a836 <__malloc_unlock>:
 801a836:	4770      	bx	lr

0801a838 <__ssputs_r>:
 801a838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a83c:	688e      	ldr	r6, [r1, #8]
 801a83e:	429e      	cmp	r6, r3
 801a840:	4682      	mov	sl, r0
 801a842:	460c      	mov	r4, r1
 801a844:	4690      	mov	r8, r2
 801a846:	4699      	mov	r9, r3
 801a848:	d837      	bhi.n	801a8ba <__ssputs_r+0x82>
 801a84a:	898a      	ldrh	r2, [r1, #12]
 801a84c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a850:	d031      	beq.n	801a8b6 <__ssputs_r+0x7e>
 801a852:	6825      	ldr	r5, [r4, #0]
 801a854:	6909      	ldr	r1, [r1, #16]
 801a856:	1a6f      	subs	r7, r5, r1
 801a858:	6965      	ldr	r5, [r4, #20]
 801a85a:	2302      	movs	r3, #2
 801a85c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a860:	fb95 f5f3 	sdiv	r5, r5, r3
 801a864:	f109 0301 	add.w	r3, r9, #1
 801a868:	443b      	add	r3, r7
 801a86a:	429d      	cmp	r5, r3
 801a86c:	bf38      	it	cc
 801a86e:	461d      	movcc	r5, r3
 801a870:	0553      	lsls	r3, r2, #21
 801a872:	d530      	bpl.n	801a8d6 <__ssputs_r+0x9e>
 801a874:	4629      	mov	r1, r5
 801a876:	f7ff ff3f 	bl	801a6f8 <_malloc_r>
 801a87a:	4606      	mov	r6, r0
 801a87c:	b950      	cbnz	r0, 801a894 <__ssputs_r+0x5c>
 801a87e:	230c      	movs	r3, #12
 801a880:	f8ca 3000 	str.w	r3, [sl]
 801a884:	89a3      	ldrh	r3, [r4, #12]
 801a886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a88a:	81a3      	strh	r3, [r4, #12]
 801a88c:	f04f 30ff 	mov.w	r0, #4294967295
 801a890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a894:	463a      	mov	r2, r7
 801a896:	6921      	ldr	r1, [r4, #16]
 801a898:	f7ff fecc 	bl	801a634 <memcpy>
 801a89c:	89a3      	ldrh	r3, [r4, #12]
 801a89e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a8a6:	81a3      	strh	r3, [r4, #12]
 801a8a8:	6126      	str	r6, [r4, #16]
 801a8aa:	6165      	str	r5, [r4, #20]
 801a8ac:	443e      	add	r6, r7
 801a8ae:	1bed      	subs	r5, r5, r7
 801a8b0:	6026      	str	r6, [r4, #0]
 801a8b2:	60a5      	str	r5, [r4, #8]
 801a8b4:	464e      	mov	r6, r9
 801a8b6:	454e      	cmp	r6, r9
 801a8b8:	d900      	bls.n	801a8bc <__ssputs_r+0x84>
 801a8ba:	464e      	mov	r6, r9
 801a8bc:	4632      	mov	r2, r6
 801a8be:	4641      	mov	r1, r8
 801a8c0:	6820      	ldr	r0, [r4, #0]
 801a8c2:	f000 fa93 	bl	801adec <memmove>
 801a8c6:	68a3      	ldr	r3, [r4, #8]
 801a8c8:	1b9b      	subs	r3, r3, r6
 801a8ca:	60a3      	str	r3, [r4, #8]
 801a8cc:	6823      	ldr	r3, [r4, #0]
 801a8ce:	441e      	add	r6, r3
 801a8d0:	6026      	str	r6, [r4, #0]
 801a8d2:	2000      	movs	r0, #0
 801a8d4:	e7dc      	b.n	801a890 <__ssputs_r+0x58>
 801a8d6:	462a      	mov	r2, r5
 801a8d8:	f000 faa1 	bl	801ae1e <_realloc_r>
 801a8dc:	4606      	mov	r6, r0
 801a8de:	2800      	cmp	r0, #0
 801a8e0:	d1e2      	bne.n	801a8a8 <__ssputs_r+0x70>
 801a8e2:	6921      	ldr	r1, [r4, #16]
 801a8e4:	4650      	mov	r0, sl
 801a8e6:	f7ff feb9 	bl	801a65c <_free_r>
 801a8ea:	e7c8      	b.n	801a87e <__ssputs_r+0x46>

0801a8ec <_svfiprintf_r>:
 801a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a8f0:	461d      	mov	r5, r3
 801a8f2:	898b      	ldrh	r3, [r1, #12]
 801a8f4:	061f      	lsls	r7, r3, #24
 801a8f6:	b09d      	sub	sp, #116	; 0x74
 801a8f8:	4680      	mov	r8, r0
 801a8fa:	460c      	mov	r4, r1
 801a8fc:	4616      	mov	r6, r2
 801a8fe:	d50f      	bpl.n	801a920 <_svfiprintf_r+0x34>
 801a900:	690b      	ldr	r3, [r1, #16]
 801a902:	b96b      	cbnz	r3, 801a920 <_svfiprintf_r+0x34>
 801a904:	2140      	movs	r1, #64	; 0x40
 801a906:	f7ff fef7 	bl	801a6f8 <_malloc_r>
 801a90a:	6020      	str	r0, [r4, #0]
 801a90c:	6120      	str	r0, [r4, #16]
 801a90e:	b928      	cbnz	r0, 801a91c <_svfiprintf_r+0x30>
 801a910:	230c      	movs	r3, #12
 801a912:	f8c8 3000 	str.w	r3, [r8]
 801a916:	f04f 30ff 	mov.w	r0, #4294967295
 801a91a:	e0c8      	b.n	801aaae <_svfiprintf_r+0x1c2>
 801a91c:	2340      	movs	r3, #64	; 0x40
 801a91e:	6163      	str	r3, [r4, #20]
 801a920:	2300      	movs	r3, #0
 801a922:	9309      	str	r3, [sp, #36]	; 0x24
 801a924:	2320      	movs	r3, #32
 801a926:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a92a:	2330      	movs	r3, #48	; 0x30
 801a92c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a930:	9503      	str	r5, [sp, #12]
 801a932:	f04f 0b01 	mov.w	fp, #1
 801a936:	4637      	mov	r7, r6
 801a938:	463d      	mov	r5, r7
 801a93a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a93e:	b10b      	cbz	r3, 801a944 <_svfiprintf_r+0x58>
 801a940:	2b25      	cmp	r3, #37	; 0x25
 801a942:	d13e      	bne.n	801a9c2 <_svfiprintf_r+0xd6>
 801a944:	ebb7 0a06 	subs.w	sl, r7, r6
 801a948:	d00b      	beq.n	801a962 <_svfiprintf_r+0x76>
 801a94a:	4653      	mov	r3, sl
 801a94c:	4632      	mov	r2, r6
 801a94e:	4621      	mov	r1, r4
 801a950:	4640      	mov	r0, r8
 801a952:	f7ff ff71 	bl	801a838 <__ssputs_r>
 801a956:	3001      	adds	r0, #1
 801a958:	f000 80a4 	beq.w	801aaa4 <_svfiprintf_r+0x1b8>
 801a95c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a95e:	4453      	add	r3, sl
 801a960:	9309      	str	r3, [sp, #36]	; 0x24
 801a962:	783b      	ldrb	r3, [r7, #0]
 801a964:	2b00      	cmp	r3, #0
 801a966:	f000 809d 	beq.w	801aaa4 <_svfiprintf_r+0x1b8>
 801a96a:	2300      	movs	r3, #0
 801a96c:	f04f 32ff 	mov.w	r2, #4294967295
 801a970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a974:	9304      	str	r3, [sp, #16]
 801a976:	9307      	str	r3, [sp, #28]
 801a978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a97c:	931a      	str	r3, [sp, #104]	; 0x68
 801a97e:	462f      	mov	r7, r5
 801a980:	2205      	movs	r2, #5
 801a982:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a986:	4850      	ldr	r0, [pc, #320]	; (801aac8 <_svfiprintf_r+0x1dc>)
 801a988:	f7e5 fc4a 	bl	8000220 <memchr>
 801a98c:	9b04      	ldr	r3, [sp, #16]
 801a98e:	b9d0      	cbnz	r0, 801a9c6 <_svfiprintf_r+0xda>
 801a990:	06d9      	lsls	r1, r3, #27
 801a992:	bf44      	itt	mi
 801a994:	2220      	movmi	r2, #32
 801a996:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a99a:	071a      	lsls	r2, r3, #28
 801a99c:	bf44      	itt	mi
 801a99e:	222b      	movmi	r2, #43	; 0x2b
 801a9a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a9a4:	782a      	ldrb	r2, [r5, #0]
 801a9a6:	2a2a      	cmp	r2, #42	; 0x2a
 801a9a8:	d015      	beq.n	801a9d6 <_svfiprintf_r+0xea>
 801a9aa:	9a07      	ldr	r2, [sp, #28]
 801a9ac:	462f      	mov	r7, r5
 801a9ae:	2000      	movs	r0, #0
 801a9b0:	250a      	movs	r5, #10
 801a9b2:	4639      	mov	r1, r7
 801a9b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a9b8:	3b30      	subs	r3, #48	; 0x30
 801a9ba:	2b09      	cmp	r3, #9
 801a9bc:	d94d      	bls.n	801aa5a <_svfiprintf_r+0x16e>
 801a9be:	b1b8      	cbz	r0, 801a9f0 <_svfiprintf_r+0x104>
 801a9c0:	e00f      	b.n	801a9e2 <_svfiprintf_r+0xf6>
 801a9c2:	462f      	mov	r7, r5
 801a9c4:	e7b8      	b.n	801a938 <_svfiprintf_r+0x4c>
 801a9c6:	4a40      	ldr	r2, [pc, #256]	; (801aac8 <_svfiprintf_r+0x1dc>)
 801a9c8:	1a80      	subs	r0, r0, r2
 801a9ca:	fa0b f000 	lsl.w	r0, fp, r0
 801a9ce:	4318      	orrs	r0, r3
 801a9d0:	9004      	str	r0, [sp, #16]
 801a9d2:	463d      	mov	r5, r7
 801a9d4:	e7d3      	b.n	801a97e <_svfiprintf_r+0x92>
 801a9d6:	9a03      	ldr	r2, [sp, #12]
 801a9d8:	1d11      	adds	r1, r2, #4
 801a9da:	6812      	ldr	r2, [r2, #0]
 801a9dc:	9103      	str	r1, [sp, #12]
 801a9de:	2a00      	cmp	r2, #0
 801a9e0:	db01      	blt.n	801a9e6 <_svfiprintf_r+0xfa>
 801a9e2:	9207      	str	r2, [sp, #28]
 801a9e4:	e004      	b.n	801a9f0 <_svfiprintf_r+0x104>
 801a9e6:	4252      	negs	r2, r2
 801a9e8:	f043 0302 	orr.w	r3, r3, #2
 801a9ec:	9207      	str	r2, [sp, #28]
 801a9ee:	9304      	str	r3, [sp, #16]
 801a9f0:	783b      	ldrb	r3, [r7, #0]
 801a9f2:	2b2e      	cmp	r3, #46	; 0x2e
 801a9f4:	d10c      	bne.n	801aa10 <_svfiprintf_r+0x124>
 801a9f6:	787b      	ldrb	r3, [r7, #1]
 801a9f8:	2b2a      	cmp	r3, #42	; 0x2a
 801a9fa:	d133      	bne.n	801aa64 <_svfiprintf_r+0x178>
 801a9fc:	9b03      	ldr	r3, [sp, #12]
 801a9fe:	1d1a      	adds	r2, r3, #4
 801aa00:	681b      	ldr	r3, [r3, #0]
 801aa02:	9203      	str	r2, [sp, #12]
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	bfb8      	it	lt
 801aa08:	f04f 33ff 	movlt.w	r3, #4294967295
 801aa0c:	3702      	adds	r7, #2
 801aa0e:	9305      	str	r3, [sp, #20]
 801aa10:	4d2e      	ldr	r5, [pc, #184]	; (801aacc <_svfiprintf_r+0x1e0>)
 801aa12:	7839      	ldrb	r1, [r7, #0]
 801aa14:	2203      	movs	r2, #3
 801aa16:	4628      	mov	r0, r5
 801aa18:	f7e5 fc02 	bl	8000220 <memchr>
 801aa1c:	b138      	cbz	r0, 801aa2e <_svfiprintf_r+0x142>
 801aa1e:	2340      	movs	r3, #64	; 0x40
 801aa20:	1b40      	subs	r0, r0, r5
 801aa22:	fa03 f000 	lsl.w	r0, r3, r0
 801aa26:	9b04      	ldr	r3, [sp, #16]
 801aa28:	4303      	orrs	r3, r0
 801aa2a:	3701      	adds	r7, #1
 801aa2c:	9304      	str	r3, [sp, #16]
 801aa2e:	7839      	ldrb	r1, [r7, #0]
 801aa30:	4827      	ldr	r0, [pc, #156]	; (801aad0 <_svfiprintf_r+0x1e4>)
 801aa32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801aa36:	2206      	movs	r2, #6
 801aa38:	1c7e      	adds	r6, r7, #1
 801aa3a:	f7e5 fbf1 	bl	8000220 <memchr>
 801aa3e:	2800      	cmp	r0, #0
 801aa40:	d038      	beq.n	801aab4 <_svfiprintf_r+0x1c8>
 801aa42:	4b24      	ldr	r3, [pc, #144]	; (801aad4 <_svfiprintf_r+0x1e8>)
 801aa44:	bb13      	cbnz	r3, 801aa8c <_svfiprintf_r+0x1a0>
 801aa46:	9b03      	ldr	r3, [sp, #12]
 801aa48:	3307      	adds	r3, #7
 801aa4a:	f023 0307 	bic.w	r3, r3, #7
 801aa4e:	3308      	adds	r3, #8
 801aa50:	9303      	str	r3, [sp, #12]
 801aa52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa54:	444b      	add	r3, r9
 801aa56:	9309      	str	r3, [sp, #36]	; 0x24
 801aa58:	e76d      	b.n	801a936 <_svfiprintf_r+0x4a>
 801aa5a:	fb05 3202 	mla	r2, r5, r2, r3
 801aa5e:	2001      	movs	r0, #1
 801aa60:	460f      	mov	r7, r1
 801aa62:	e7a6      	b.n	801a9b2 <_svfiprintf_r+0xc6>
 801aa64:	2300      	movs	r3, #0
 801aa66:	3701      	adds	r7, #1
 801aa68:	9305      	str	r3, [sp, #20]
 801aa6a:	4619      	mov	r1, r3
 801aa6c:	250a      	movs	r5, #10
 801aa6e:	4638      	mov	r0, r7
 801aa70:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa74:	3a30      	subs	r2, #48	; 0x30
 801aa76:	2a09      	cmp	r2, #9
 801aa78:	d903      	bls.n	801aa82 <_svfiprintf_r+0x196>
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d0c8      	beq.n	801aa10 <_svfiprintf_r+0x124>
 801aa7e:	9105      	str	r1, [sp, #20]
 801aa80:	e7c6      	b.n	801aa10 <_svfiprintf_r+0x124>
 801aa82:	fb05 2101 	mla	r1, r5, r1, r2
 801aa86:	2301      	movs	r3, #1
 801aa88:	4607      	mov	r7, r0
 801aa8a:	e7f0      	b.n	801aa6e <_svfiprintf_r+0x182>
 801aa8c:	ab03      	add	r3, sp, #12
 801aa8e:	9300      	str	r3, [sp, #0]
 801aa90:	4622      	mov	r2, r4
 801aa92:	4b11      	ldr	r3, [pc, #68]	; (801aad8 <_svfiprintf_r+0x1ec>)
 801aa94:	a904      	add	r1, sp, #16
 801aa96:	4640      	mov	r0, r8
 801aa98:	f3af 8000 	nop.w
 801aa9c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801aaa0:	4681      	mov	r9, r0
 801aaa2:	d1d6      	bne.n	801aa52 <_svfiprintf_r+0x166>
 801aaa4:	89a3      	ldrh	r3, [r4, #12]
 801aaa6:	065b      	lsls	r3, r3, #25
 801aaa8:	f53f af35 	bmi.w	801a916 <_svfiprintf_r+0x2a>
 801aaac:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aaae:	b01d      	add	sp, #116	; 0x74
 801aab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aab4:	ab03      	add	r3, sp, #12
 801aab6:	9300      	str	r3, [sp, #0]
 801aab8:	4622      	mov	r2, r4
 801aaba:	4b07      	ldr	r3, [pc, #28]	; (801aad8 <_svfiprintf_r+0x1ec>)
 801aabc:	a904      	add	r1, sp, #16
 801aabe:	4640      	mov	r0, r8
 801aac0:	f000 f882 	bl	801abc8 <_printf_i>
 801aac4:	e7ea      	b.n	801aa9c <_svfiprintf_r+0x1b0>
 801aac6:	bf00      	nop
 801aac8:	0801d81c 	.word	0x0801d81c
 801aacc:	0801d822 	.word	0x0801d822
 801aad0:	0801d826 	.word	0x0801d826
 801aad4:	00000000 	.word	0x00000000
 801aad8:	0801a839 	.word	0x0801a839

0801aadc <_printf_common>:
 801aadc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aae0:	4691      	mov	r9, r2
 801aae2:	461f      	mov	r7, r3
 801aae4:	688a      	ldr	r2, [r1, #8]
 801aae6:	690b      	ldr	r3, [r1, #16]
 801aae8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aaec:	4293      	cmp	r3, r2
 801aaee:	bfb8      	it	lt
 801aaf0:	4613      	movlt	r3, r2
 801aaf2:	f8c9 3000 	str.w	r3, [r9]
 801aaf6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aafa:	4606      	mov	r6, r0
 801aafc:	460c      	mov	r4, r1
 801aafe:	b112      	cbz	r2, 801ab06 <_printf_common+0x2a>
 801ab00:	3301      	adds	r3, #1
 801ab02:	f8c9 3000 	str.w	r3, [r9]
 801ab06:	6823      	ldr	r3, [r4, #0]
 801ab08:	0699      	lsls	r1, r3, #26
 801ab0a:	bf42      	ittt	mi
 801ab0c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801ab10:	3302      	addmi	r3, #2
 801ab12:	f8c9 3000 	strmi.w	r3, [r9]
 801ab16:	6825      	ldr	r5, [r4, #0]
 801ab18:	f015 0506 	ands.w	r5, r5, #6
 801ab1c:	d107      	bne.n	801ab2e <_printf_common+0x52>
 801ab1e:	f104 0a19 	add.w	sl, r4, #25
 801ab22:	68e3      	ldr	r3, [r4, #12]
 801ab24:	f8d9 2000 	ldr.w	r2, [r9]
 801ab28:	1a9b      	subs	r3, r3, r2
 801ab2a:	42ab      	cmp	r3, r5
 801ab2c:	dc28      	bgt.n	801ab80 <_printf_common+0xa4>
 801ab2e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801ab32:	6822      	ldr	r2, [r4, #0]
 801ab34:	3300      	adds	r3, #0
 801ab36:	bf18      	it	ne
 801ab38:	2301      	movne	r3, #1
 801ab3a:	0692      	lsls	r2, r2, #26
 801ab3c:	d42d      	bmi.n	801ab9a <_printf_common+0xbe>
 801ab3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ab42:	4639      	mov	r1, r7
 801ab44:	4630      	mov	r0, r6
 801ab46:	47c0      	blx	r8
 801ab48:	3001      	adds	r0, #1
 801ab4a:	d020      	beq.n	801ab8e <_printf_common+0xb2>
 801ab4c:	6823      	ldr	r3, [r4, #0]
 801ab4e:	68e5      	ldr	r5, [r4, #12]
 801ab50:	f8d9 2000 	ldr.w	r2, [r9]
 801ab54:	f003 0306 	and.w	r3, r3, #6
 801ab58:	2b04      	cmp	r3, #4
 801ab5a:	bf08      	it	eq
 801ab5c:	1aad      	subeq	r5, r5, r2
 801ab5e:	68a3      	ldr	r3, [r4, #8]
 801ab60:	6922      	ldr	r2, [r4, #16]
 801ab62:	bf0c      	ite	eq
 801ab64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ab68:	2500      	movne	r5, #0
 801ab6a:	4293      	cmp	r3, r2
 801ab6c:	bfc4      	itt	gt
 801ab6e:	1a9b      	subgt	r3, r3, r2
 801ab70:	18ed      	addgt	r5, r5, r3
 801ab72:	f04f 0900 	mov.w	r9, #0
 801ab76:	341a      	adds	r4, #26
 801ab78:	454d      	cmp	r5, r9
 801ab7a:	d11a      	bne.n	801abb2 <_printf_common+0xd6>
 801ab7c:	2000      	movs	r0, #0
 801ab7e:	e008      	b.n	801ab92 <_printf_common+0xb6>
 801ab80:	2301      	movs	r3, #1
 801ab82:	4652      	mov	r2, sl
 801ab84:	4639      	mov	r1, r7
 801ab86:	4630      	mov	r0, r6
 801ab88:	47c0      	blx	r8
 801ab8a:	3001      	adds	r0, #1
 801ab8c:	d103      	bne.n	801ab96 <_printf_common+0xba>
 801ab8e:	f04f 30ff 	mov.w	r0, #4294967295
 801ab92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab96:	3501      	adds	r5, #1
 801ab98:	e7c3      	b.n	801ab22 <_printf_common+0x46>
 801ab9a:	18e1      	adds	r1, r4, r3
 801ab9c:	1c5a      	adds	r2, r3, #1
 801ab9e:	2030      	movs	r0, #48	; 0x30
 801aba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aba4:	4422      	add	r2, r4
 801aba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801abaa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801abae:	3302      	adds	r3, #2
 801abb0:	e7c5      	b.n	801ab3e <_printf_common+0x62>
 801abb2:	2301      	movs	r3, #1
 801abb4:	4622      	mov	r2, r4
 801abb6:	4639      	mov	r1, r7
 801abb8:	4630      	mov	r0, r6
 801abba:	47c0      	blx	r8
 801abbc:	3001      	adds	r0, #1
 801abbe:	d0e6      	beq.n	801ab8e <_printf_common+0xb2>
 801abc0:	f109 0901 	add.w	r9, r9, #1
 801abc4:	e7d8      	b.n	801ab78 <_printf_common+0x9c>
	...

0801abc8 <_printf_i>:
 801abc8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801abcc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801abd0:	460c      	mov	r4, r1
 801abd2:	7e09      	ldrb	r1, [r1, #24]
 801abd4:	b085      	sub	sp, #20
 801abd6:	296e      	cmp	r1, #110	; 0x6e
 801abd8:	4617      	mov	r7, r2
 801abda:	4606      	mov	r6, r0
 801abdc:	4698      	mov	r8, r3
 801abde:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801abe0:	f000 80b3 	beq.w	801ad4a <_printf_i+0x182>
 801abe4:	d822      	bhi.n	801ac2c <_printf_i+0x64>
 801abe6:	2963      	cmp	r1, #99	; 0x63
 801abe8:	d036      	beq.n	801ac58 <_printf_i+0x90>
 801abea:	d80a      	bhi.n	801ac02 <_printf_i+0x3a>
 801abec:	2900      	cmp	r1, #0
 801abee:	f000 80b9 	beq.w	801ad64 <_printf_i+0x19c>
 801abf2:	2958      	cmp	r1, #88	; 0x58
 801abf4:	f000 8083 	beq.w	801acfe <_printf_i+0x136>
 801abf8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abfc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801ac00:	e032      	b.n	801ac68 <_printf_i+0xa0>
 801ac02:	2964      	cmp	r1, #100	; 0x64
 801ac04:	d001      	beq.n	801ac0a <_printf_i+0x42>
 801ac06:	2969      	cmp	r1, #105	; 0x69
 801ac08:	d1f6      	bne.n	801abf8 <_printf_i+0x30>
 801ac0a:	6820      	ldr	r0, [r4, #0]
 801ac0c:	6813      	ldr	r3, [r2, #0]
 801ac0e:	0605      	lsls	r5, r0, #24
 801ac10:	f103 0104 	add.w	r1, r3, #4
 801ac14:	d52a      	bpl.n	801ac6c <_printf_i+0xa4>
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	6011      	str	r1, [r2, #0]
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	da03      	bge.n	801ac26 <_printf_i+0x5e>
 801ac1e:	222d      	movs	r2, #45	; 0x2d
 801ac20:	425b      	negs	r3, r3
 801ac22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801ac26:	486f      	ldr	r0, [pc, #444]	; (801ade4 <_printf_i+0x21c>)
 801ac28:	220a      	movs	r2, #10
 801ac2a:	e039      	b.n	801aca0 <_printf_i+0xd8>
 801ac2c:	2973      	cmp	r1, #115	; 0x73
 801ac2e:	f000 809d 	beq.w	801ad6c <_printf_i+0x1a4>
 801ac32:	d808      	bhi.n	801ac46 <_printf_i+0x7e>
 801ac34:	296f      	cmp	r1, #111	; 0x6f
 801ac36:	d020      	beq.n	801ac7a <_printf_i+0xb2>
 801ac38:	2970      	cmp	r1, #112	; 0x70
 801ac3a:	d1dd      	bne.n	801abf8 <_printf_i+0x30>
 801ac3c:	6823      	ldr	r3, [r4, #0]
 801ac3e:	f043 0320 	orr.w	r3, r3, #32
 801ac42:	6023      	str	r3, [r4, #0]
 801ac44:	e003      	b.n	801ac4e <_printf_i+0x86>
 801ac46:	2975      	cmp	r1, #117	; 0x75
 801ac48:	d017      	beq.n	801ac7a <_printf_i+0xb2>
 801ac4a:	2978      	cmp	r1, #120	; 0x78
 801ac4c:	d1d4      	bne.n	801abf8 <_printf_i+0x30>
 801ac4e:	2378      	movs	r3, #120	; 0x78
 801ac50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ac54:	4864      	ldr	r0, [pc, #400]	; (801ade8 <_printf_i+0x220>)
 801ac56:	e055      	b.n	801ad04 <_printf_i+0x13c>
 801ac58:	6813      	ldr	r3, [r2, #0]
 801ac5a:	1d19      	adds	r1, r3, #4
 801ac5c:	681b      	ldr	r3, [r3, #0]
 801ac5e:	6011      	str	r1, [r2, #0]
 801ac60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ac64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ac68:	2301      	movs	r3, #1
 801ac6a:	e08c      	b.n	801ad86 <_printf_i+0x1be>
 801ac6c:	681b      	ldr	r3, [r3, #0]
 801ac6e:	6011      	str	r1, [r2, #0]
 801ac70:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac74:	bf18      	it	ne
 801ac76:	b21b      	sxthne	r3, r3
 801ac78:	e7cf      	b.n	801ac1a <_printf_i+0x52>
 801ac7a:	6813      	ldr	r3, [r2, #0]
 801ac7c:	6825      	ldr	r5, [r4, #0]
 801ac7e:	1d18      	adds	r0, r3, #4
 801ac80:	6010      	str	r0, [r2, #0]
 801ac82:	0628      	lsls	r0, r5, #24
 801ac84:	d501      	bpl.n	801ac8a <_printf_i+0xc2>
 801ac86:	681b      	ldr	r3, [r3, #0]
 801ac88:	e002      	b.n	801ac90 <_printf_i+0xc8>
 801ac8a:	0668      	lsls	r0, r5, #25
 801ac8c:	d5fb      	bpl.n	801ac86 <_printf_i+0xbe>
 801ac8e:	881b      	ldrh	r3, [r3, #0]
 801ac90:	4854      	ldr	r0, [pc, #336]	; (801ade4 <_printf_i+0x21c>)
 801ac92:	296f      	cmp	r1, #111	; 0x6f
 801ac94:	bf14      	ite	ne
 801ac96:	220a      	movne	r2, #10
 801ac98:	2208      	moveq	r2, #8
 801ac9a:	2100      	movs	r1, #0
 801ac9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801aca0:	6865      	ldr	r5, [r4, #4]
 801aca2:	60a5      	str	r5, [r4, #8]
 801aca4:	2d00      	cmp	r5, #0
 801aca6:	f2c0 8095 	blt.w	801add4 <_printf_i+0x20c>
 801acaa:	6821      	ldr	r1, [r4, #0]
 801acac:	f021 0104 	bic.w	r1, r1, #4
 801acb0:	6021      	str	r1, [r4, #0]
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d13d      	bne.n	801ad32 <_printf_i+0x16a>
 801acb6:	2d00      	cmp	r5, #0
 801acb8:	f040 808e 	bne.w	801add8 <_printf_i+0x210>
 801acbc:	4665      	mov	r5, ip
 801acbe:	2a08      	cmp	r2, #8
 801acc0:	d10b      	bne.n	801acda <_printf_i+0x112>
 801acc2:	6823      	ldr	r3, [r4, #0]
 801acc4:	07db      	lsls	r3, r3, #31
 801acc6:	d508      	bpl.n	801acda <_printf_i+0x112>
 801acc8:	6923      	ldr	r3, [r4, #16]
 801acca:	6862      	ldr	r2, [r4, #4]
 801accc:	429a      	cmp	r2, r3
 801acce:	bfde      	ittt	le
 801acd0:	2330      	movle	r3, #48	; 0x30
 801acd2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801acd6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801acda:	ebac 0305 	sub.w	r3, ip, r5
 801acde:	6123      	str	r3, [r4, #16]
 801ace0:	f8cd 8000 	str.w	r8, [sp]
 801ace4:	463b      	mov	r3, r7
 801ace6:	aa03      	add	r2, sp, #12
 801ace8:	4621      	mov	r1, r4
 801acea:	4630      	mov	r0, r6
 801acec:	f7ff fef6 	bl	801aadc <_printf_common>
 801acf0:	3001      	adds	r0, #1
 801acf2:	d14d      	bne.n	801ad90 <_printf_i+0x1c8>
 801acf4:	f04f 30ff 	mov.w	r0, #4294967295
 801acf8:	b005      	add	sp, #20
 801acfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801acfe:	4839      	ldr	r0, [pc, #228]	; (801ade4 <_printf_i+0x21c>)
 801ad00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ad04:	6813      	ldr	r3, [r2, #0]
 801ad06:	6821      	ldr	r1, [r4, #0]
 801ad08:	1d1d      	adds	r5, r3, #4
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	6015      	str	r5, [r2, #0]
 801ad0e:	060a      	lsls	r2, r1, #24
 801ad10:	d50b      	bpl.n	801ad2a <_printf_i+0x162>
 801ad12:	07ca      	lsls	r2, r1, #31
 801ad14:	bf44      	itt	mi
 801ad16:	f041 0120 	orrmi.w	r1, r1, #32
 801ad1a:	6021      	strmi	r1, [r4, #0]
 801ad1c:	b91b      	cbnz	r3, 801ad26 <_printf_i+0x15e>
 801ad1e:	6822      	ldr	r2, [r4, #0]
 801ad20:	f022 0220 	bic.w	r2, r2, #32
 801ad24:	6022      	str	r2, [r4, #0]
 801ad26:	2210      	movs	r2, #16
 801ad28:	e7b7      	b.n	801ac9a <_printf_i+0xd2>
 801ad2a:	064d      	lsls	r5, r1, #25
 801ad2c:	bf48      	it	mi
 801ad2e:	b29b      	uxthmi	r3, r3
 801ad30:	e7ef      	b.n	801ad12 <_printf_i+0x14a>
 801ad32:	4665      	mov	r5, ip
 801ad34:	fbb3 f1f2 	udiv	r1, r3, r2
 801ad38:	fb02 3311 	mls	r3, r2, r1, r3
 801ad3c:	5cc3      	ldrb	r3, [r0, r3]
 801ad3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ad42:	460b      	mov	r3, r1
 801ad44:	2900      	cmp	r1, #0
 801ad46:	d1f5      	bne.n	801ad34 <_printf_i+0x16c>
 801ad48:	e7b9      	b.n	801acbe <_printf_i+0xf6>
 801ad4a:	6813      	ldr	r3, [r2, #0]
 801ad4c:	6825      	ldr	r5, [r4, #0]
 801ad4e:	6961      	ldr	r1, [r4, #20]
 801ad50:	1d18      	adds	r0, r3, #4
 801ad52:	6010      	str	r0, [r2, #0]
 801ad54:	0628      	lsls	r0, r5, #24
 801ad56:	681b      	ldr	r3, [r3, #0]
 801ad58:	d501      	bpl.n	801ad5e <_printf_i+0x196>
 801ad5a:	6019      	str	r1, [r3, #0]
 801ad5c:	e002      	b.n	801ad64 <_printf_i+0x19c>
 801ad5e:	066a      	lsls	r2, r5, #25
 801ad60:	d5fb      	bpl.n	801ad5a <_printf_i+0x192>
 801ad62:	8019      	strh	r1, [r3, #0]
 801ad64:	2300      	movs	r3, #0
 801ad66:	6123      	str	r3, [r4, #16]
 801ad68:	4665      	mov	r5, ip
 801ad6a:	e7b9      	b.n	801ace0 <_printf_i+0x118>
 801ad6c:	6813      	ldr	r3, [r2, #0]
 801ad6e:	1d19      	adds	r1, r3, #4
 801ad70:	6011      	str	r1, [r2, #0]
 801ad72:	681d      	ldr	r5, [r3, #0]
 801ad74:	6862      	ldr	r2, [r4, #4]
 801ad76:	2100      	movs	r1, #0
 801ad78:	4628      	mov	r0, r5
 801ad7a:	f7e5 fa51 	bl	8000220 <memchr>
 801ad7e:	b108      	cbz	r0, 801ad84 <_printf_i+0x1bc>
 801ad80:	1b40      	subs	r0, r0, r5
 801ad82:	6060      	str	r0, [r4, #4]
 801ad84:	6863      	ldr	r3, [r4, #4]
 801ad86:	6123      	str	r3, [r4, #16]
 801ad88:	2300      	movs	r3, #0
 801ad8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad8e:	e7a7      	b.n	801ace0 <_printf_i+0x118>
 801ad90:	6923      	ldr	r3, [r4, #16]
 801ad92:	462a      	mov	r2, r5
 801ad94:	4639      	mov	r1, r7
 801ad96:	4630      	mov	r0, r6
 801ad98:	47c0      	blx	r8
 801ad9a:	3001      	adds	r0, #1
 801ad9c:	d0aa      	beq.n	801acf4 <_printf_i+0x12c>
 801ad9e:	6823      	ldr	r3, [r4, #0]
 801ada0:	079b      	lsls	r3, r3, #30
 801ada2:	d413      	bmi.n	801adcc <_printf_i+0x204>
 801ada4:	68e0      	ldr	r0, [r4, #12]
 801ada6:	9b03      	ldr	r3, [sp, #12]
 801ada8:	4298      	cmp	r0, r3
 801adaa:	bfb8      	it	lt
 801adac:	4618      	movlt	r0, r3
 801adae:	e7a3      	b.n	801acf8 <_printf_i+0x130>
 801adb0:	2301      	movs	r3, #1
 801adb2:	464a      	mov	r2, r9
 801adb4:	4639      	mov	r1, r7
 801adb6:	4630      	mov	r0, r6
 801adb8:	47c0      	blx	r8
 801adba:	3001      	adds	r0, #1
 801adbc:	d09a      	beq.n	801acf4 <_printf_i+0x12c>
 801adbe:	3501      	adds	r5, #1
 801adc0:	68e3      	ldr	r3, [r4, #12]
 801adc2:	9a03      	ldr	r2, [sp, #12]
 801adc4:	1a9b      	subs	r3, r3, r2
 801adc6:	42ab      	cmp	r3, r5
 801adc8:	dcf2      	bgt.n	801adb0 <_printf_i+0x1e8>
 801adca:	e7eb      	b.n	801ada4 <_printf_i+0x1dc>
 801adcc:	2500      	movs	r5, #0
 801adce:	f104 0919 	add.w	r9, r4, #25
 801add2:	e7f5      	b.n	801adc0 <_printf_i+0x1f8>
 801add4:	2b00      	cmp	r3, #0
 801add6:	d1ac      	bne.n	801ad32 <_printf_i+0x16a>
 801add8:	7803      	ldrb	r3, [r0, #0]
 801adda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801adde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ade2:	e76c      	b.n	801acbe <_printf_i+0xf6>
 801ade4:	0801d82d 	.word	0x0801d82d
 801ade8:	0801d83e 	.word	0x0801d83e

0801adec <memmove>:
 801adec:	4288      	cmp	r0, r1
 801adee:	b510      	push	{r4, lr}
 801adf0:	eb01 0302 	add.w	r3, r1, r2
 801adf4:	d807      	bhi.n	801ae06 <memmove+0x1a>
 801adf6:	1e42      	subs	r2, r0, #1
 801adf8:	4299      	cmp	r1, r3
 801adfa:	d00a      	beq.n	801ae12 <memmove+0x26>
 801adfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ae00:	f802 4f01 	strb.w	r4, [r2, #1]!
 801ae04:	e7f8      	b.n	801adf8 <memmove+0xc>
 801ae06:	4283      	cmp	r3, r0
 801ae08:	d9f5      	bls.n	801adf6 <memmove+0xa>
 801ae0a:	1881      	adds	r1, r0, r2
 801ae0c:	1ad2      	subs	r2, r2, r3
 801ae0e:	42d3      	cmn	r3, r2
 801ae10:	d100      	bne.n	801ae14 <memmove+0x28>
 801ae12:	bd10      	pop	{r4, pc}
 801ae14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ae18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801ae1c:	e7f7      	b.n	801ae0e <memmove+0x22>

0801ae1e <_realloc_r>:
 801ae1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae20:	4607      	mov	r7, r0
 801ae22:	4614      	mov	r4, r2
 801ae24:	460e      	mov	r6, r1
 801ae26:	b921      	cbnz	r1, 801ae32 <_realloc_r+0x14>
 801ae28:	4611      	mov	r1, r2
 801ae2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801ae2e:	f7ff bc63 	b.w	801a6f8 <_malloc_r>
 801ae32:	b922      	cbnz	r2, 801ae3e <_realloc_r+0x20>
 801ae34:	f7ff fc12 	bl	801a65c <_free_r>
 801ae38:	4625      	mov	r5, r4
 801ae3a:	4628      	mov	r0, r5
 801ae3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae3e:	f000 f814 	bl	801ae6a <_malloc_usable_size_r>
 801ae42:	42a0      	cmp	r0, r4
 801ae44:	d20f      	bcs.n	801ae66 <_realloc_r+0x48>
 801ae46:	4621      	mov	r1, r4
 801ae48:	4638      	mov	r0, r7
 801ae4a:	f7ff fc55 	bl	801a6f8 <_malloc_r>
 801ae4e:	4605      	mov	r5, r0
 801ae50:	2800      	cmp	r0, #0
 801ae52:	d0f2      	beq.n	801ae3a <_realloc_r+0x1c>
 801ae54:	4631      	mov	r1, r6
 801ae56:	4622      	mov	r2, r4
 801ae58:	f7ff fbec 	bl	801a634 <memcpy>
 801ae5c:	4631      	mov	r1, r6
 801ae5e:	4638      	mov	r0, r7
 801ae60:	f7ff fbfc 	bl	801a65c <_free_r>
 801ae64:	e7e9      	b.n	801ae3a <_realloc_r+0x1c>
 801ae66:	4635      	mov	r5, r6
 801ae68:	e7e7      	b.n	801ae3a <_realloc_r+0x1c>

0801ae6a <_malloc_usable_size_r>:
 801ae6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ae6e:	1f18      	subs	r0, r3, #4
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	bfbc      	itt	lt
 801ae74:	580b      	ldrlt	r3, [r1, r0]
 801ae76:	18c0      	addlt	r0, r0, r3
 801ae78:	4770      	bx	lr

0801ae7a <fmaxf>:
 801ae7a:	b508      	push	{r3, lr}
 801ae7c:	ed2d 8b02 	vpush	{d8}
 801ae80:	eeb0 8a40 	vmov.f32	s16, s0
 801ae84:	eef0 8a60 	vmov.f32	s17, s1
 801ae88:	f000 f82e 	bl	801aee8 <__fpclassifyf>
 801ae8c:	b148      	cbz	r0, 801aea2 <fmaxf+0x28>
 801ae8e:	eeb0 0a68 	vmov.f32	s0, s17
 801ae92:	f000 f829 	bl	801aee8 <__fpclassifyf>
 801ae96:	b130      	cbz	r0, 801aea6 <fmaxf+0x2c>
 801ae98:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ae9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aea0:	dc01      	bgt.n	801aea6 <fmaxf+0x2c>
 801aea2:	eeb0 8a68 	vmov.f32	s16, s17
 801aea6:	eeb0 0a48 	vmov.f32	s0, s16
 801aeaa:	ecbd 8b02 	vpop	{d8}
 801aeae:	bd08      	pop	{r3, pc}

0801aeb0 <fminf>:
 801aeb0:	b508      	push	{r3, lr}
 801aeb2:	ed2d 8b02 	vpush	{d8}
 801aeb6:	eeb0 8a40 	vmov.f32	s16, s0
 801aeba:	eef0 8a60 	vmov.f32	s17, s1
 801aebe:	f000 f813 	bl	801aee8 <__fpclassifyf>
 801aec2:	b148      	cbz	r0, 801aed8 <fminf+0x28>
 801aec4:	eeb0 0a68 	vmov.f32	s0, s17
 801aec8:	f000 f80e 	bl	801aee8 <__fpclassifyf>
 801aecc:	b130      	cbz	r0, 801aedc <fminf+0x2c>
 801aece:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801aed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aed6:	d401      	bmi.n	801aedc <fminf+0x2c>
 801aed8:	eeb0 8a68 	vmov.f32	s16, s17
 801aedc:	eeb0 0a48 	vmov.f32	s0, s16
 801aee0:	ecbd 8b02 	vpop	{d8}
 801aee4:	bd08      	pop	{r3, pc}
	...

0801aee8 <__fpclassifyf>:
 801aee8:	ee10 3a10 	vmov	r3, s0
 801aeec:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 801aef0:	d00d      	beq.n	801af0e <__fpclassifyf+0x26>
 801aef2:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801aef6:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801aefa:	d30a      	bcc.n	801af12 <__fpclassifyf+0x2a>
 801aefc:	4b07      	ldr	r3, [pc, #28]	; (801af1c <__fpclassifyf+0x34>)
 801aefe:	1e42      	subs	r2, r0, #1
 801af00:	429a      	cmp	r2, r3
 801af02:	d908      	bls.n	801af16 <__fpclassifyf+0x2e>
 801af04:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801af08:	4258      	negs	r0, r3
 801af0a:	4158      	adcs	r0, r3
 801af0c:	4770      	bx	lr
 801af0e:	2002      	movs	r0, #2
 801af10:	4770      	bx	lr
 801af12:	2004      	movs	r0, #4
 801af14:	4770      	bx	lr
 801af16:	2003      	movs	r0, #3
 801af18:	4770      	bx	lr
 801af1a:	bf00      	nop
 801af1c:	007ffffe 	.word	0x007ffffe

0801af20 <pow>:
 801af20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801af24:	ed2d 8b04 	vpush	{d8-d9}
 801af28:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b1fc <pow+0x2dc>
 801af2c:	b08d      	sub	sp, #52	; 0x34
 801af2e:	ec57 6b10 	vmov	r6, r7, d0
 801af32:	ec55 4b11 	vmov	r4, r5, d1
 801af36:	f000 fb73 	bl	801b620 <__ieee754_pow>
 801af3a:	f999 3000 	ldrsb.w	r3, [r9]
 801af3e:	9300      	str	r3, [sp, #0]
 801af40:	3301      	adds	r3, #1
 801af42:	eeb0 8a40 	vmov.f32	s16, s0
 801af46:	eef0 8a60 	vmov.f32	s17, s1
 801af4a:	46c8      	mov	r8, r9
 801af4c:	d05f      	beq.n	801b00e <pow+0xee>
 801af4e:	4622      	mov	r2, r4
 801af50:	462b      	mov	r3, r5
 801af52:	4620      	mov	r0, r4
 801af54:	4629      	mov	r1, r5
 801af56:	f7e5 fe09 	bl	8000b6c <__aeabi_dcmpun>
 801af5a:	4683      	mov	fp, r0
 801af5c:	2800      	cmp	r0, #0
 801af5e:	d156      	bne.n	801b00e <pow+0xee>
 801af60:	4632      	mov	r2, r6
 801af62:	463b      	mov	r3, r7
 801af64:	4630      	mov	r0, r6
 801af66:	4639      	mov	r1, r7
 801af68:	f7e5 fe00 	bl	8000b6c <__aeabi_dcmpun>
 801af6c:	9001      	str	r0, [sp, #4]
 801af6e:	b1e8      	cbz	r0, 801afac <pow+0x8c>
 801af70:	2200      	movs	r2, #0
 801af72:	2300      	movs	r3, #0
 801af74:	4620      	mov	r0, r4
 801af76:	4629      	mov	r1, r5
 801af78:	f7e5 fdc6 	bl	8000b08 <__aeabi_dcmpeq>
 801af7c:	2800      	cmp	r0, #0
 801af7e:	d046      	beq.n	801b00e <pow+0xee>
 801af80:	2301      	movs	r3, #1
 801af82:	9302      	str	r3, [sp, #8]
 801af84:	4b96      	ldr	r3, [pc, #600]	; (801b1e0 <pow+0x2c0>)
 801af86:	9303      	str	r3, [sp, #12]
 801af88:	4b96      	ldr	r3, [pc, #600]	; (801b1e4 <pow+0x2c4>)
 801af8a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801af8e:	2200      	movs	r2, #0
 801af90:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801af94:	9b00      	ldr	r3, [sp, #0]
 801af96:	2b02      	cmp	r3, #2
 801af98:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801af9c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801afa0:	d033      	beq.n	801b00a <pow+0xea>
 801afa2:	a802      	add	r0, sp, #8
 801afa4:	f001 fbce 	bl	801c744 <matherr>
 801afa8:	bb48      	cbnz	r0, 801affe <pow+0xde>
 801afaa:	e05d      	b.n	801b068 <pow+0x148>
 801afac:	f04f 0a00 	mov.w	sl, #0
 801afb0:	f04f 0b00 	mov.w	fp, #0
 801afb4:	4652      	mov	r2, sl
 801afb6:	465b      	mov	r3, fp
 801afb8:	4630      	mov	r0, r6
 801afba:	4639      	mov	r1, r7
 801afbc:	f7e5 fda4 	bl	8000b08 <__aeabi_dcmpeq>
 801afc0:	ec4b ab19 	vmov	d9, sl, fp
 801afc4:	2800      	cmp	r0, #0
 801afc6:	d054      	beq.n	801b072 <pow+0x152>
 801afc8:	4652      	mov	r2, sl
 801afca:	465b      	mov	r3, fp
 801afcc:	4620      	mov	r0, r4
 801afce:	4629      	mov	r1, r5
 801afd0:	f7e5 fd9a 	bl	8000b08 <__aeabi_dcmpeq>
 801afd4:	4680      	mov	r8, r0
 801afd6:	b318      	cbz	r0, 801b020 <pow+0x100>
 801afd8:	2301      	movs	r3, #1
 801afda:	9302      	str	r3, [sp, #8]
 801afdc:	4b80      	ldr	r3, [pc, #512]	; (801b1e0 <pow+0x2c0>)
 801afde:	9303      	str	r3, [sp, #12]
 801afe0:	9b01      	ldr	r3, [sp, #4]
 801afe2:	930a      	str	r3, [sp, #40]	; 0x28
 801afe4:	9b00      	ldr	r3, [sp, #0]
 801afe6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801afea:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801afee:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801aff2:	2b00      	cmp	r3, #0
 801aff4:	d0d5      	beq.n	801afa2 <pow+0x82>
 801aff6:	4b7b      	ldr	r3, [pc, #492]	; (801b1e4 <pow+0x2c4>)
 801aff8:	2200      	movs	r2, #0
 801affa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801affe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b000:	b11b      	cbz	r3, 801b00a <pow+0xea>
 801b002:	f7ff fadd 	bl	801a5c0 <__errno>
 801b006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b008:	6003      	str	r3, [r0, #0]
 801b00a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801b00e:	eeb0 0a48 	vmov.f32	s0, s16
 801b012:	eef0 0a68 	vmov.f32	s1, s17
 801b016:	b00d      	add	sp, #52	; 0x34
 801b018:	ecbd 8b04 	vpop	{d8-d9}
 801b01c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b020:	ec45 4b10 	vmov	d0, r4, r5
 801b024:	f001 fb86 	bl	801c734 <finite>
 801b028:	2800      	cmp	r0, #0
 801b02a:	d0f0      	beq.n	801b00e <pow+0xee>
 801b02c:	4652      	mov	r2, sl
 801b02e:	465b      	mov	r3, fp
 801b030:	4620      	mov	r0, r4
 801b032:	4629      	mov	r1, r5
 801b034:	f7e5 fd72 	bl	8000b1c <__aeabi_dcmplt>
 801b038:	2800      	cmp	r0, #0
 801b03a:	d0e8      	beq.n	801b00e <pow+0xee>
 801b03c:	2301      	movs	r3, #1
 801b03e:	9302      	str	r3, [sp, #8]
 801b040:	4b67      	ldr	r3, [pc, #412]	; (801b1e0 <pow+0x2c0>)
 801b042:	9303      	str	r3, [sp, #12]
 801b044:	f999 3000 	ldrsb.w	r3, [r9]
 801b048:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801b04c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b050:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b054:	b913      	cbnz	r3, 801b05c <pow+0x13c>
 801b056:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801b05a:	e7a2      	b.n	801afa2 <pow+0x82>
 801b05c:	4962      	ldr	r1, [pc, #392]	; (801b1e8 <pow+0x2c8>)
 801b05e:	2000      	movs	r0, #0
 801b060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b064:	2b02      	cmp	r3, #2
 801b066:	d19c      	bne.n	801afa2 <pow+0x82>
 801b068:	f7ff faaa 	bl	801a5c0 <__errno>
 801b06c:	2321      	movs	r3, #33	; 0x21
 801b06e:	6003      	str	r3, [r0, #0]
 801b070:	e7c5      	b.n	801affe <pow+0xde>
 801b072:	eeb0 0a48 	vmov.f32	s0, s16
 801b076:	eef0 0a68 	vmov.f32	s1, s17
 801b07a:	f001 fb5b 	bl	801c734 <finite>
 801b07e:	9000      	str	r0, [sp, #0]
 801b080:	2800      	cmp	r0, #0
 801b082:	f040 8081 	bne.w	801b188 <pow+0x268>
 801b086:	ec47 6b10 	vmov	d0, r6, r7
 801b08a:	f001 fb53 	bl	801c734 <finite>
 801b08e:	2800      	cmp	r0, #0
 801b090:	d07a      	beq.n	801b188 <pow+0x268>
 801b092:	ec45 4b10 	vmov	d0, r4, r5
 801b096:	f001 fb4d 	bl	801c734 <finite>
 801b09a:	2800      	cmp	r0, #0
 801b09c:	d074      	beq.n	801b188 <pow+0x268>
 801b09e:	ec53 2b18 	vmov	r2, r3, d8
 801b0a2:	ee18 0a10 	vmov	r0, s16
 801b0a6:	4619      	mov	r1, r3
 801b0a8:	f7e5 fd60 	bl	8000b6c <__aeabi_dcmpun>
 801b0ac:	f999 9000 	ldrsb.w	r9, [r9]
 801b0b0:	4b4b      	ldr	r3, [pc, #300]	; (801b1e0 <pow+0x2c0>)
 801b0b2:	b1b0      	cbz	r0, 801b0e2 <pow+0x1c2>
 801b0b4:	2201      	movs	r2, #1
 801b0b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b0ba:	9b00      	ldr	r3, [sp, #0]
 801b0bc:	930a      	str	r3, [sp, #40]	; 0x28
 801b0be:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b0c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b0c6:	f1b9 0f00 	cmp.w	r9, #0
 801b0ca:	d0c4      	beq.n	801b056 <pow+0x136>
 801b0cc:	4652      	mov	r2, sl
 801b0ce:	465b      	mov	r3, fp
 801b0d0:	4650      	mov	r0, sl
 801b0d2:	4659      	mov	r1, fp
 801b0d4:	f7e5 fbda 	bl	800088c <__aeabi_ddiv>
 801b0d8:	f1b9 0f02 	cmp.w	r9, #2
 801b0dc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b0e0:	e7c1      	b.n	801b066 <pow+0x146>
 801b0e2:	2203      	movs	r2, #3
 801b0e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b0e8:	900a      	str	r0, [sp, #40]	; 0x28
 801b0ea:	4629      	mov	r1, r5
 801b0ec:	4620      	mov	r0, r4
 801b0ee:	2200      	movs	r2, #0
 801b0f0:	4b3e      	ldr	r3, [pc, #248]	; (801b1ec <pow+0x2cc>)
 801b0f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b0f6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b0fa:	f7e5 fa9d 	bl	8000638 <__aeabi_dmul>
 801b0fe:	4604      	mov	r4, r0
 801b100:	460d      	mov	r5, r1
 801b102:	f1b9 0f00 	cmp.w	r9, #0
 801b106:	d124      	bne.n	801b152 <pow+0x232>
 801b108:	4b39      	ldr	r3, [pc, #228]	; (801b1f0 <pow+0x2d0>)
 801b10a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b10e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b112:	4630      	mov	r0, r6
 801b114:	4652      	mov	r2, sl
 801b116:	465b      	mov	r3, fp
 801b118:	4639      	mov	r1, r7
 801b11a:	f7e5 fcff 	bl	8000b1c <__aeabi_dcmplt>
 801b11e:	2800      	cmp	r0, #0
 801b120:	d056      	beq.n	801b1d0 <pow+0x2b0>
 801b122:	ec45 4b10 	vmov	d0, r4, r5
 801b126:	f001 fb17 	bl	801c758 <rint>
 801b12a:	4622      	mov	r2, r4
 801b12c:	462b      	mov	r3, r5
 801b12e:	ec51 0b10 	vmov	r0, r1, d0
 801b132:	f7e5 fce9 	bl	8000b08 <__aeabi_dcmpeq>
 801b136:	b920      	cbnz	r0, 801b142 <pow+0x222>
 801b138:	4b2e      	ldr	r3, [pc, #184]	; (801b1f4 <pow+0x2d4>)
 801b13a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b13e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b142:	f998 3000 	ldrsb.w	r3, [r8]
 801b146:	2b02      	cmp	r3, #2
 801b148:	d142      	bne.n	801b1d0 <pow+0x2b0>
 801b14a:	f7ff fa39 	bl	801a5c0 <__errno>
 801b14e:	2322      	movs	r3, #34	; 0x22
 801b150:	e78d      	b.n	801b06e <pow+0x14e>
 801b152:	4b29      	ldr	r3, [pc, #164]	; (801b1f8 <pow+0x2d8>)
 801b154:	2200      	movs	r2, #0
 801b156:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b15a:	4630      	mov	r0, r6
 801b15c:	4652      	mov	r2, sl
 801b15e:	465b      	mov	r3, fp
 801b160:	4639      	mov	r1, r7
 801b162:	f7e5 fcdb 	bl	8000b1c <__aeabi_dcmplt>
 801b166:	2800      	cmp	r0, #0
 801b168:	d0eb      	beq.n	801b142 <pow+0x222>
 801b16a:	ec45 4b10 	vmov	d0, r4, r5
 801b16e:	f001 faf3 	bl	801c758 <rint>
 801b172:	4622      	mov	r2, r4
 801b174:	462b      	mov	r3, r5
 801b176:	ec51 0b10 	vmov	r0, r1, d0
 801b17a:	f7e5 fcc5 	bl	8000b08 <__aeabi_dcmpeq>
 801b17e:	2800      	cmp	r0, #0
 801b180:	d1df      	bne.n	801b142 <pow+0x222>
 801b182:	2200      	movs	r2, #0
 801b184:	4b18      	ldr	r3, [pc, #96]	; (801b1e8 <pow+0x2c8>)
 801b186:	e7da      	b.n	801b13e <pow+0x21e>
 801b188:	2200      	movs	r2, #0
 801b18a:	2300      	movs	r3, #0
 801b18c:	ec51 0b18 	vmov	r0, r1, d8
 801b190:	f7e5 fcba 	bl	8000b08 <__aeabi_dcmpeq>
 801b194:	2800      	cmp	r0, #0
 801b196:	f43f af3a 	beq.w	801b00e <pow+0xee>
 801b19a:	ec47 6b10 	vmov	d0, r6, r7
 801b19e:	f001 fac9 	bl	801c734 <finite>
 801b1a2:	2800      	cmp	r0, #0
 801b1a4:	f43f af33 	beq.w	801b00e <pow+0xee>
 801b1a8:	ec45 4b10 	vmov	d0, r4, r5
 801b1ac:	f001 fac2 	bl	801c734 <finite>
 801b1b0:	2800      	cmp	r0, #0
 801b1b2:	f43f af2c 	beq.w	801b00e <pow+0xee>
 801b1b6:	2304      	movs	r3, #4
 801b1b8:	9302      	str	r3, [sp, #8]
 801b1ba:	4b09      	ldr	r3, [pc, #36]	; (801b1e0 <pow+0x2c0>)
 801b1bc:	9303      	str	r3, [sp, #12]
 801b1be:	2300      	movs	r3, #0
 801b1c0:	930a      	str	r3, [sp, #40]	; 0x28
 801b1c2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b1c6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b1ca:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b1ce:	e7b8      	b.n	801b142 <pow+0x222>
 801b1d0:	a802      	add	r0, sp, #8
 801b1d2:	f001 fab7 	bl	801c744 <matherr>
 801b1d6:	2800      	cmp	r0, #0
 801b1d8:	f47f af11 	bne.w	801affe <pow+0xde>
 801b1dc:	e7b5      	b.n	801b14a <pow+0x22a>
 801b1de:	bf00      	nop
 801b1e0:	0801d8b0 	.word	0x0801d8b0
 801b1e4:	3ff00000 	.word	0x3ff00000
 801b1e8:	fff00000 	.word	0xfff00000
 801b1ec:	3fe00000 	.word	0x3fe00000
 801b1f0:	47efffff 	.word	0x47efffff
 801b1f4:	c7efffff 	.word	0xc7efffff
 801b1f8:	7ff00000 	.word	0x7ff00000
 801b1fc:	200001f8 	.word	0x200001f8

0801b200 <sqrt>:
 801b200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b204:	ed2d 8b02 	vpush	{d8}
 801b208:	b08b      	sub	sp, #44	; 0x2c
 801b20a:	ec55 4b10 	vmov	r4, r5, d0
 801b20e:	f000 ff15 	bl	801c03c <__ieee754_sqrt>
 801b212:	4b26      	ldr	r3, [pc, #152]	; (801b2ac <sqrt+0xac>)
 801b214:	eeb0 8a40 	vmov.f32	s16, s0
 801b218:	eef0 8a60 	vmov.f32	s17, s1
 801b21c:	f993 6000 	ldrsb.w	r6, [r3]
 801b220:	1c73      	adds	r3, r6, #1
 801b222:	d02a      	beq.n	801b27a <sqrt+0x7a>
 801b224:	4622      	mov	r2, r4
 801b226:	462b      	mov	r3, r5
 801b228:	4620      	mov	r0, r4
 801b22a:	4629      	mov	r1, r5
 801b22c:	f7e5 fc9e 	bl	8000b6c <__aeabi_dcmpun>
 801b230:	4607      	mov	r7, r0
 801b232:	bb10      	cbnz	r0, 801b27a <sqrt+0x7a>
 801b234:	f04f 0800 	mov.w	r8, #0
 801b238:	f04f 0900 	mov.w	r9, #0
 801b23c:	4642      	mov	r2, r8
 801b23e:	464b      	mov	r3, r9
 801b240:	4620      	mov	r0, r4
 801b242:	4629      	mov	r1, r5
 801b244:	f7e5 fc6a 	bl	8000b1c <__aeabi_dcmplt>
 801b248:	b1b8      	cbz	r0, 801b27a <sqrt+0x7a>
 801b24a:	2301      	movs	r3, #1
 801b24c:	9300      	str	r3, [sp, #0]
 801b24e:	4b18      	ldr	r3, [pc, #96]	; (801b2b0 <sqrt+0xb0>)
 801b250:	9301      	str	r3, [sp, #4]
 801b252:	9708      	str	r7, [sp, #32]
 801b254:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b258:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b25c:	b9b6      	cbnz	r6, 801b28c <sqrt+0x8c>
 801b25e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801b262:	4668      	mov	r0, sp
 801b264:	f001 fa6e 	bl	801c744 <matherr>
 801b268:	b1d0      	cbz	r0, 801b2a0 <sqrt+0xa0>
 801b26a:	9b08      	ldr	r3, [sp, #32]
 801b26c:	b11b      	cbz	r3, 801b276 <sqrt+0x76>
 801b26e:	f7ff f9a7 	bl	801a5c0 <__errno>
 801b272:	9b08      	ldr	r3, [sp, #32]
 801b274:	6003      	str	r3, [r0, #0]
 801b276:	ed9d 8b06 	vldr	d8, [sp, #24]
 801b27a:	eeb0 0a48 	vmov.f32	s0, s16
 801b27e:	eef0 0a68 	vmov.f32	s1, s17
 801b282:	b00b      	add	sp, #44	; 0x2c
 801b284:	ecbd 8b02 	vpop	{d8}
 801b288:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b28c:	4642      	mov	r2, r8
 801b28e:	464b      	mov	r3, r9
 801b290:	4640      	mov	r0, r8
 801b292:	4649      	mov	r1, r9
 801b294:	f7e5 fafa 	bl	800088c <__aeabi_ddiv>
 801b298:	2e02      	cmp	r6, #2
 801b29a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b29e:	d1e0      	bne.n	801b262 <sqrt+0x62>
 801b2a0:	f7ff f98e 	bl	801a5c0 <__errno>
 801b2a4:	2321      	movs	r3, #33	; 0x21
 801b2a6:	6003      	str	r3, [r0, #0]
 801b2a8:	e7df      	b.n	801b26a <sqrt+0x6a>
 801b2aa:	bf00      	nop
 801b2ac:	200001f8 	.word	0x200001f8
 801b2b0:	0801d8b4 	.word	0x0801d8b4

0801b2b4 <powf>:
 801b2b4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801b2b8:	ed2d 8b04 	vpush	{d8-d9}
 801b2bc:	4ca7      	ldr	r4, [pc, #668]	; (801b55c <powf+0x2a8>)
 801b2be:	b08a      	sub	sp, #40	; 0x28
 801b2c0:	eef0 8a40 	vmov.f32	s17, s0
 801b2c4:	eeb0 8a60 	vmov.f32	s16, s1
 801b2c8:	f000 ff68 	bl	801c19c <__ieee754_powf>
 801b2cc:	f994 5000 	ldrsb.w	r5, [r4]
 801b2d0:	1c6b      	adds	r3, r5, #1
 801b2d2:	eeb0 9a40 	vmov.f32	s18, s0
 801b2d6:	4626      	mov	r6, r4
 801b2d8:	d05f      	beq.n	801b39a <powf+0xe6>
 801b2da:	eeb4 8a48 	vcmp.f32	s16, s16
 801b2de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2e2:	d65a      	bvs.n	801b39a <powf+0xe6>
 801b2e4:	eef4 8a68 	vcmp.f32	s17, s17
 801b2e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ec:	d721      	bvc.n	801b332 <powf+0x7e>
 801b2ee:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b2f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2f6:	d150      	bne.n	801b39a <powf+0xe6>
 801b2f8:	2301      	movs	r3, #1
 801b2fa:	9300      	str	r3, [sp, #0]
 801b2fc:	4b98      	ldr	r3, [pc, #608]	; (801b560 <powf+0x2ac>)
 801b2fe:	9301      	str	r3, [sp, #4]
 801b300:	ee18 0a90 	vmov	r0, s17
 801b304:	2300      	movs	r3, #0
 801b306:	9308      	str	r3, [sp, #32]
 801b308:	f7e5 f93e 	bl	8000588 <__aeabi_f2d>
 801b30c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b310:	ee18 0a10 	vmov	r0, s16
 801b314:	f7e5 f938 	bl	8000588 <__aeabi_f2d>
 801b318:	4b92      	ldr	r3, [pc, #584]	; (801b564 <powf+0x2b0>)
 801b31a:	2200      	movs	r2, #0
 801b31c:	2d02      	cmp	r5, #2
 801b31e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b322:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b326:	d032      	beq.n	801b38e <powf+0xda>
 801b328:	4668      	mov	r0, sp
 801b32a:	f001 fa0b 	bl	801c744 <matherr>
 801b32e:	bb40      	cbnz	r0, 801b382 <powf+0xce>
 801b330:	e065      	b.n	801b3fe <powf+0x14a>
 801b332:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801b568 <powf+0x2b4>
 801b336:	eef4 8a69 	vcmp.f32	s17, s19
 801b33a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b33e:	d163      	bne.n	801b408 <powf+0x154>
 801b340:	eeb4 8a69 	vcmp.f32	s16, s19
 801b344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b348:	d12e      	bne.n	801b3a8 <powf+0xf4>
 801b34a:	2301      	movs	r3, #1
 801b34c:	9300      	str	r3, [sp, #0]
 801b34e:	4b84      	ldr	r3, [pc, #528]	; (801b560 <powf+0x2ac>)
 801b350:	9301      	str	r3, [sp, #4]
 801b352:	ee18 0a90 	vmov	r0, s17
 801b356:	2300      	movs	r3, #0
 801b358:	9308      	str	r3, [sp, #32]
 801b35a:	f7e5 f915 	bl	8000588 <__aeabi_f2d>
 801b35e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b362:	ee18 0a10 	vmov	r0, s16
 801b366:	f7e5 f90f 	bl	8000588 <__aeabi_f2d>
 801b36a:	2200      	movs	r2, #0
 801b36c:	2300      	movs	r3, #0
 801b36e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b372:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b376:	2d00      	cmp	r5, #0
 801b378:	d0d6      	beq.n	801b328 <powf+0x74>
 801b37a:	4b7a      	ldr	r3, [pc, #488]	; (801b564 <powf+0x2b0>)
 801b37c:	2200      	movs	r2, #0
 801b37e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b382:	9b08      	ldr	r3, [sp, #32]
 801b384:	b11b      	cbz	r3, 801b38e <powf+0xda>
 801b386:	f7ff f91b 	bl	801a5c0 <__errno>
 801b38a:	9b08      	ldr	r3, [sp, #32]
 801b38c:	6003      	str	r3, [r0, #0]
 801b38e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b392:	f7e5 fc21 	bl	8000bd8 <__aeabi_d2f>
 801b396:	ee09 0a10 	vmov	s18, r0
 801b39a:	eeb0 0a49 	vmov.f32	s0, s18
 801b39e:	b00a      	add	sp, #40	; 0x28
 801b3a0:	ecbd 8b04 	vpop	{d8-d9}
 801b3a4:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801b3a8:	eeb0 0a48 	vmov.f32	s0, s16
 801b3ac:	f001 fad5 	bl	801c95a <finitef>
 801b3b0:	2800      	cmp	r0, #0
 801b3b2:	d0f2      	beq.n	801b39a <powf+0xe6>
 801b3b4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b3b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3bc:	d5ed      	bpl.n	801b39a <powf+0xe6>
 801b3be:	2301      	movs	r3, #1
 801b3c0:	9300      	str	r3, [sp, #0]
 801b3c2:	4b67      	ldr	r3, [pc, #412]	; (801b560 <powf+0x2ac>)
 801b3c4:	9301      	str	r3, [sp, #4]
 801b3c6:	ee18 0a90 	vmov	r0, s17
 801b3ca:	2300      	movs	r3, #0
 801b3cc:	9308      	str	r3, [sp, #32]
 801b3ce:	f7e5 f8db 	bl	8000588 <__aeabi_f2d>
 801b3d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b3d6:	ee18 0a10 	vmov	r0, s16
 801b3da:	f7e5 f8d5 	bl	8000588 <__aeabi_f2d>
 801b3de:	f994 3000 	ldrsb.w	r3, [r4]
 801b3e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b3e6:	b923      	cbnz	r3, 801b3f2 <powf+0x13e>
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	2300      	movs	r3, #0
 801b3ec:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b3f0:	e79a      	b.n	801b328 <powf+0x74>
 801b3f2:	495e      	ldr	r1, [pc, #376]	; (801b56c <powf+0x2b8>)
 801b3f4:	2000      	movs	r0, #0
 801b3f6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b3fa:	2b02      	cmp	r3, #2
 801b3fc:	d194      	bne.n	801b328 <powf+0x74>
 801b3fe:	f7ff f8df 	bl	801a5c0 <__errno>
 801b402:	2321      	movs	r3, #33	; 0x21
 801b404:	6003      	str	r3, [r0, #0]
 801b406:	e7bc      	b.n	801b382 <powf+0xce>
 801b408:	f001 faa7 	bl	801c95a <finitef>
 801b40c:	4605      	mov	r5, r0
 801b40e:	2800      	cmp	r0, #0
 801b410:	d173      	bne.n	801b4fa <powf+0x246>
 801b412:	eeb0 0a68 	vmov.f32	s0, s17
 801b416:	f001 faa0 	bl	801c95a <finitef>
 801b41a:	2800      	cmp	r0, #0
 801b41c:	d06d      	beq.n	801b4fa <powf+0x246>
 801b41e:	eeb0 0a48 	vmov.f32	s0, s16
 801b422:	f001 fa9a 	bl	801c95a <finitef>
 801b426:	2800      	cmp	r0, #0
 801b428:	d067      	beq.n	801b4fa <powf+0x246>
 801b42a:	ee18 0a90 	vmov	r0, s17
 801b42e:	f7e5 f8ab 	bl	8000588 <__aeabi_f2d>
 801b432:	4680      	mov	r8, r0
 801b434:	ee18 0a10 	vmov	r0, s16
 801b438:	4689      	mov	r9, r1
 801b43a:	f7e5 f8a5 	bl	8000588 <__aeabi_f2d>
 801b43e:	eeb4 9a49 	vcmp.f32	s18, s18
 801b442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b446:	f994 4000 	ldrsb.w	r4, [r4]
 801b44a:	4b45      	ldr	r3, [pc, #276]	; (801b560 <powf+0x2ac>)
 801b44c:	d713      	bvc.n	801b476 <powf+0x1c2>
 801b44e:	2201      	movs	r2, #1
 801b450:	e9cd 2300 	strd	r2, r3, [sp]
 801b454:	9508      	str	r5, [sp, #32]
 801b456:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b45a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b45e:	2c00      	cmp	r4, #0
 801b460:	d0c2      	beq.n	801b3e8 <powf+0x134>
 801b462:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801b466:	ee17 0a90 	vmov	r0, s15
 801b46a:	f7e5 f88d 	bl	8000588 <__aeabi_f2d>
 801b46e:	2c02      	cmp	r4, #2
 801b470:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b474:	e7c2      	b.n	801b3fc <powf+0x148>
 801b476:	2203      	movs	r2, #3
 801b478:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b47c:	e9cd 2300 	strd	r2, r3, [sp]
 801b480:	9508      	str	r5, [sp, #32]
 801b482:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b486:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b48a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b48e:	b9fc      	cbnz	r4, 801b4d0 <powf+0x21c>
 801b490:	4b37      	ldr	r3, [pc, #220]	; (801b570 <powf+0x2bc>)
 801b492:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b496:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b49a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b49e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b4a2:	d553      	bpl.n	801b54c <powf+0x298>
 801b4a4:	eeb0 0a48 	vmov.f32	s0, s16
 801b4a8:	f001 fa68 	bl	801c97c <rintf>
 801b4ac:	eeb4 0a48 	vcmp.f32	s0, s16
 801b4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4b4:	d004      	beq.n	801b4c0 <powf+0x20c>
 801b4b6:	4b2f      	ldr	r3, [pc, #188]	; (801b574 <powf+0x2c0>)
 801b4b8:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b4bc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b4c0:	f996 3000 	ldrsb.w	r3, [r6]
 801b4c4:	2b02      	cmp	r3, #2
 801b4c6:	d141      	bne.n	801b54c <powf+0x298>
 801b4c8:	f7ff f87a 	bl	801a5c0 <__errno>
 801b4cc:	2322      	movs	r3, #34	; 0x22
 801b4ce:	e799      	b.n	801b404 <powf+0x150>
 801b4d0:	4b29      	ldr	r3, [pc, #164]	; (801b578 <powf+0x2c4>)
 801b4d2:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b4d6:	2200      	movs	r2, #0
 801b4d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4dc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b4e0:	d5ee      	bpl.n	801b4c0 <powf+0x20c>
 801b4e2:	eeb0 0a48 	vmov.f32	s0, s16
 801b4e6:	f001 fa49 	bl	801c97c <rintf>
 801b4ea:	eeb4 0a48 	vcmp.f32	s0, s16
 801b4ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4f2:	d0e5      	beq.n	801b4c0 <powf+0x20c>
 801b4f4:	2200      	movs	r2, #0
 801b4f6:	4b1d      	ldr	r3, [pc, #116]	; (801b56c <powf+0x2b8>)
 801b4f8:	e7e0      	b.n	801b4bc <powf+0x208>
 801b4fa:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801b4fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b502:	f47f af4a 	bne.w	801b39a <powf+0xe6>
 801b506:	eeb0 0a68 	vmov.f32	s0, s17
 801b50a:	f001 fa26 	bl	801c95a <finitef>
 801b50e:	2800      	cmp	r0, #0
 801b510:	f43f af43 	beq.w	801b39a <powf+0xe6>
 801b514:	eeb0 0a48 	vmov.f32	s0, s16
 801b518:	f001 fa1f 	bl	801c95a <finitef>
 801b51c:	2800      	cmp	r0, #0
 801b51e:	f43f af3c 	beq.w	801b39a <powf+0xe6>
 801b522:	2304      	movs	r3, #4
 801b524:	9300      	str	r3, [sp, #0]
 801b526:	4b0e      	ldr	r3, [pc, #56]	; (801b560 <powf+0x2ac>)
 801b528:	9301      	str	r3, [sp, #4]
 801b52a:	ee18 0a90 	vmov	r0, s17
 801b52e:	2300      	movs	r3, #0
 801b530:	9308      	str	r3, [sp, #32]
 801b532:	f7e5 f829 	bl	8000588 <__aeabi_f2d>
 801b536:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b53a:	ee18 0a10 	vmov	r0, s16
 801b53e:	f7e5 f823 	bl	8000588 <__aeabi_f2d>
 801b542:	2200      	movs	r2, #0
 801b544:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b548:	2300      	movs	r3, #0
 801b54a:	e7b7      	b.n	801b4bc <powf+0x208>
 801b54c:	4668      	mov	r0, sp
 801b54e:	f001 f8f9 	bl	801c744 <matherr>
 801b552:	2800      	cmp	r0, #0
 801b554:	f47f af15 	bne.w	801b382 <powf+0xce>
 801b558:	e7b6      	b.n	801b4c8 <powf+0x214>
 801b55a:	bf00      	nop
 801b55c:	200001f8 	.word	0x200001f8
 801b560:	0801d8b9 	.word	0x0801d8b9
 801b564:	3ff00000 	.word	0x3ff00000
 801b568:	00000000 	.word	0x00000000
 801b56c:	fff00000 	.word	0xfff00000
 801b570:	47efffff 	.word	0x47efffff
 801b574:	c7efffff 	.word	0xc7efffff
 801b578:	7ff00000 	.word	0x7ff00000

0801b57c <sqrtf>:
 801b57c:	b510      	push	{r4, lr}
 801b57e:	ed2d 8b02 	vpush	{d8}
 801b582:	b08a      	sub	sp, #40	; 0x28
 801b584:	eeb0 8a40 	vmov.f32	s16, s0
 801b588:	f001 f8c8 	bl	801c71c <__ieee754_sqrtf>
 801b58c:	4b21      	ldr	r3, [pc, #132]	; (801b614 <sqrtf+0x98>)
 801b58e:	f993 4000 	ldrsb.w	r4, [r3]
 801b592:	1c63      	adds	r3, r4, #1
 801b594:	d02c      	beq.n	801b5f0 <sqrtf+0x74>
 801b596:	eeb4 8a48 	vcmp.f32	s16, s16
 801b59a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b59e:	d627      	bvs.n	801b5f0 <sqrtf+0x74>
 801b5a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b5a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b5a8:	d522      	bpl.n	801b5f0 <sqrtf+0x74>
 801b5aa:	2301      	movs	r3, #1
 801b5ac:	9300      	str	r3, [sp, #0]
 801b5ae:	4b1a      	ldr	r3, [pc, #104]	; (801b618 <sqrtf+0x9c>)
 801b5b0:	9301      	str	r3, [sp, #4]
 801b5b2:	ee18 0a10 	vmov	r0, s16
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	9308      	str	r3, [sp, #32]
 801b5ba:	f7e4 ffe5 	bl	8000588 <__aeabi_f2d>
 801b5be:	2200      	movs	r2, #0
 801b5c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b5c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b5c8:	2300      	movs	r3, #0
 801b5ca:	b9ac      	cbnz	r4, 801b5f8 <sqrtf+0x7c>
 801b5cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b5d0:	4668      	mov	r0, sp
 801b5d2:	f001 f8b7 	bl	801c744 <matherr>
 801b5d6:	b1b8      	cbz	r0, 801b608 <sqrtf+0x8c>
 801b5d8:	9b08      	ldr	r3, [sp, #32]
 801b5da:	b11b      	cbz	r3, 801b5e4 <sqrtf+0x68>
 801b5dc:	f7fe fff0 	bl	801a5c0 <__errno>
 801b5e0:	9b08      	ldr	r3, [sp, #32]
 801b5e2:	6003      	str	r3, [r0, #0]
 801b5e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b5e8:	f7e5 faf6 	bl	8000bd8 <__aeabi_d2f>
 801b5ec:	ee00 0a10 	vmov	s0, r0
 801b5f0:	b00a      	add	sp, #40	; 0x28
 801b5f2:	ecbd 8b02 	vpop	{d8}
 801b5f6:	bd10      	pop	{r4, pc}
 801b5f8:	4610      	mov	r0, r2
 801b5fa:	4619      	mov	r1, r3
 801b5fc:	f7e5 f946 	bl	800088c <__aeabi_ddiv>
 801b600:	2c02      	cmp	r4, #2
 801b602:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b606:	d1e3      	bne.n	801b5d0 <sqrtf+0x54>
 801b608:	f7fe ffda 	bl	801a5c0 <__errno>
 801b60c:	2321      	movs	r3, #33	; 0x21
 801b60e:	6003      	str	r3, [r0, #0]
 801b610:	e7e2      	b.n	801b5d8 <sqrtf+0x5c>
 801b612:	bf00      	nop
 801b614:	200001f8 	.word	0x200001f8
 801b618:	0801d8be 	.word	0x0801d8be
 801b61c:	00000000 	.word	0x00000000

0801b620 <__ieee754_pow>:
 801b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b624:	b091      	sub	sp, #68	; 0x44
 801b626:	ed8d 1b00 	vstr	d1, [sp]
 801b62a:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b62e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b632:	ea58 0302 	orrs.w	r3, r8, r2
 801b636:	ec57 6b10 	vmov	r6, r7, d0
 801b63a:	f000 84be 	beq.w	801bfba <__ieee754_pow+0x99a>
 801b63e:	4b7a      	ldr	r3, [pc, #488]	; (801b828 <__ieee754_pow+0x208>)
 801b640:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b644:	429c      	cmp	r4, r3
 801b646:	463d      	mov	r5, r7
 801b648:	ee10 aa10 	vmov	sl, s0
 801b64c:	dc09      	bgt.n	801b662 <__ieee754_pow+0x42>
 801b64e:	d103      	bne.n	801b658 <__ieee754_pow+0x38>
 801b650:	b93e      	cbnz	r6, 801b662 <__ieee754_pow+0x42>
 801b652:	45a0      	cmp	r8, r4
 801b654:	dc0d      	bgt.n	801b672 <__ieee754_pow+0x52>
 801b656:	e001      	b.n	801b65c <__ieee754_pow+0x3c>
 801b658:	4598      	cmp	r8, r3
 801b65a:	dc02      	bgt.n	801b662 <__ieee754_pow+0x42>
 801b65c:	4598      	cmp	r8, r3
 801b65e:	d10e      	bne.n	801b67e <__ieee754_pow+0x5e>
 801b660:	b16a      	cbz	r2, 801b67e <__ieee754_pow+0x5e>
 801b662:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b666:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b66a:	ea54 030a 	orrs.w	r3, r4, sl
 801b66e:	f000 84a4 	beq.w	801bfba <__ieee754_pow+0x99a>
 801b672:	486e      	ldr	r0, [pc, #440]	; (801b82c <__ieee754_pow+0x20c>)
 801b674:	b011      	add	sp, #68	; 0x44
 801b676:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b67a:	f001 b865 	b.w	801c748 <nan>
 801b67e:	2d00      	cmp	r5, #0
 801b680:	da53      	bge.n	801b72a <__ieee754_pow+0x10a>
 801b682:	4b6b      	ldr	r3, [pc, #428]	; (801b830 <__ieee754_pow+0x210>)
 801b684:	4598      	cmp	r8, r3
 801b686:	dc4d      	bgt.n	801b724 <__ieee754_pow+0x104>
 801b688:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b68c:	4598      	cmp	r8, r3
 801b68e:	dd4c      	ble.n	801b72a <__ieee754_pow+0x10a>
 801b690:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b694:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b698:	2b14      	cmp	r3, #20
 801b69a:	dd26      	ble.n	801b6ea <__ieee754_pow+0xca>
 801b69c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b6a0:	fa22 f103 	lsr.w	r1, r2, r3
 801b6a4:	fa01 f303 	lsl.w	r3, r1, r3
 801b6a8:	4293      	cmp	r3, r2
 801b6aa:	d13e      	bne.n	801b72a <__ieee754_pow+0x10a>
 801b6ac:	f001 0101 	and.w	r1, r1, #1
 801b6b0:	f1c1 0b02 	rsb	fp, r1, #2
 801b6b4:	2a00      	cmp	r2, #0
 801b6b6:	d15b      	bne.n	801b770 <__ieee754_pow+0x150>
 801b6b8:	4b5b      	ldr	r3, [pc, #364]	; (801b828 <__ieee754_pow+0x208>)
 801b6ba:	4598      	cmp	r8, r3
 801b6bc:	d124      	bne.n	801b708 <__ieee754_pow+0xe8>
 801b6be:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b6c2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b6c6:	ea53 030a 	orrs.w	r3, r3, sl
 801b6ca:	f000 8476 	beq.w	801bfba <__ieee754_pow+0x99a>
 801b6ce:	4b59      	ldr	r3, [pc, #356]	; (801b834 <__ieee754_pow+0x214>)
 801b6d0:	429c      	cmp	r4, r3
 801b6d2:	dd2d      	ble.n	801b730 <__ieee754_pow+0x110>
 801b6d4:	f1b9 0f00 	cmp.w	r9, #0
 801b6d8:	f280 8473 	bge.w	801bfc2 <__ieee754_pow+0x9a2>
 801b6dc:	2000      	movs	r0, #0
 801b6de:	2100      	movs	r1, #0
 801b6e0:	ec41 0b10 	vmov	d0, r0, r1
 801b6e4:	b011      	add	sp, #68	; 0x44
 801b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ea:	2a00      	cmp	r2, #0
 801b6ec:	d13e      	bne.n	801b76c <__ieee754_pow+0x14c>
 801b6ee:	f1c3 0314 	rsb	r3, r3, #20
 801b6f2:	fa48 f103 	asr.w	r1, r8, r3
 801b6f6:	fa01 f303 	lsl.w	r3, r1, r3
 801b6fa:	4543      	cmp	r3, r8
 801b6fc:	f040 8469 	bne.w	801bfd2 <__ieee754_pow+0x9b2>
 801b700:	f001 0101 	and.w	r1, r1, #1
 801b704:	f1c1 0b02 	rsb	fp, r1, #2
 801b708:	4b4b      	ldr	r3, [pc, #300]	; (801b838 <__ieee754_pow+0x218>)
 801b70a:	4598      	cmp	r8, r3
 801b70c:	d118      	bne.n	801b740 <__ieee754_pow+0x120>
 801b70e:	f1b9 0f00 	cmp.w	r9, #0
 801b712:	f280 845a 	bge.w	801bfca <__ieee754_pow+0x9aa>
 801b716:	4948      	ldr	r1, [pc, #288]	; (801b838 <__ieee754_pow+0x218>)
 801b718:	4632      	mov	r2, r6
 801b71a:	463b      	mov	r3, r7
 801b71c:	2000      	movs	r0, #0
 801b71e:	f7e5 f8b5 	bl	800088c <__aeabi_ddiv>
 801b722:	e7dd      	b.n	801b6e0 <__ieee754_pow+0xc0>
 801b724:	f04f 0b02 	mov.w	fp, #2
 801b728:	e7c4      	b.n	801b6b4 <__ieee754_pow+0x94>
 801b72a:	f04f 0b00 	mov.w	fp, #0
 801b72e:	e7c1      	b.n	801b6b4 <__ieee754_pow+0x94>
 801b730:	f1b9 0f00 	cmp.w	r9, #0
 801b734:	dad2      	bge.n	801b6dc <__ieee754_pow+0xbc>
 801b736:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b73a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b73e:	e7cf      	b.n	801b6e0 <__ieee754_pow+0xc0>
 801b740:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b744:	d106      	bne.n	801b754 <__ieee754_pow+0x134>
 801b746:	4632      	mov	r2, r6
 801b748:	463b      	mov	r3, r7
 801b74a:	4610      	mov	r0, r2
 801b74c:	4619      	mov	r1, r3
 801b74e:	f7e4 ff73 	bl	8000638 <__aeabi_dmul>
 801b752:	e7c5      	b.n	801b6e0 <__ieee754_pow+0xc0>
 801b754:	4b39      	ldr	r3, [pc, #228]	; (801b83c <__ieee754_pow+0x21c>)
 801b756:	4599      	cmp	r9, r3
 801b758:	d10a      	bne.n	801b770 <__ieee754_pow+0x150>
 801b75a:	2d00      	cmp	r5, #0
 801b75c:	db08      	blt.n	801b770 <__ieee754_pow+0x150>
 801b75e:	ec47 6b10 	vmov	d0, r6, r7
 801b762:	b011      	add	sp, #68	; 0x44
 801b764:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b768:	f000 bc68 	b.w	801c03c <__ieee754_sqrt>
 801b76c:	f04f 0b00 	mov.w	fp, #0
 801b770:	ec47 6b10 	vmov	d0, r6, r7
 801b774:	f000 ffd5 	bl	801c722 <fabs>
 801b778:	ec51 0b10 	vmov	r0, r1, d0
 801b77c:	f1ba 0f00 	cmp.w	sl, #0
 801b780:	d127      	bne.n	801b7d2 <__ieee754_pow+0x1b2>
 801b782:	b124      	cbz	r4, 801b78e <__ieee754_pow+0x16e>
 801b784:	4b2c      	ldr	r3, [pc, #176]	; (801b838 <__ieee754_pow+0x218>)
 801b786:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d121      	bne.n	801b7d2 <__ieee754_pow+0x1b2>
 801b78e:	f1b9 0f00 	cmp.w	r9, #0
 801b792:	da05      	bge.n	801b7a0 <__ieee754_pow+0x180>
 801b794:	4602      	mov	r2, r0
 801b796:	460b      	mov	r3, r1
 801b798:	2000      	movs	r0, #0
 801b79a:	4927      	ldr	r1, [pc, #156]	; (801b838 <__ieee754_pow+0x218>)
 801b79c:	f7e5 f876 	bl	800088c <__aeabi_ddiv>
 801b7a0:	2d00      	cmp	r5, #0
 801b7a2:	da9d      	bge.n	801b6e0 <__ieee754_pow+0xc0>
 801b7a4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b7a8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b7ac:	ea54 030b 	orrs.w	r3, r4, fp
 801b7b0:	d108      	bne.n	801b7c4 <__ieee754_pow+0x1a4>
 801b7b2:	4602      	mov	r2, r0
 801b7b4:	460b      	mov	r3, r1
 801b7b6:	4610      	mov	r0, r2
 801b7b8:	4619      	mov	r1, r3
 801b7ba:	f7e4 fd85 	bl	80002c8 <__aeabi_dsub>
 801b7be:	4602      	mov	r2, r0
 801b7c0:	460b      	mov	r3, r1
 801b7c2:	e7ac      	b.n	801b71e <__ieee754_pow+0xfe>
 801b7c4:	f1bb 0f01 	cmp.w	fp, #1
 801b7c8:	d18a      	bne.n	801b6e0 <__ieee754_pow+0xc0>
 801b7ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b7ce:	4619      	mov	r1, r3
 801b7d0:	e786      	b.n	801b6e0 <__ieee754_pow+0xc0>
 801b7d2:	0fed      	lsrs	r5, r5, #31
 801b7d4:	1e6b      	subs	r3, r5, #1
 801b7d6:	930d      	str	r3, [sp, #52]	; 0x34
 801b7d8:	ea5b 0303 	orrs.w	r3, fp, r3
 801b7dc:	d102      	bne.n	801b7e4 <__ieee754_pow+0x1c4>
 801b7de:	4632      	mov	r2, r6
 801b7e0:	463b      	mov	r3, r7
 801b7e2:	e7e8      	b.n	801b7b6 <__ieee754_pow+0x196>
 801b7e4:	4b16      	ldr	r3, [pc, #88]	; (801b840 <__ieee754_pow+0x220>)
 801b7e6:	4598      	cmp	r8, r3
 801b7e8:	f340 80fe 	ble.w	801b9e8 <__ieee754_pow+0x3c8>
 801b7ec:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b7f0:	4598      	cmp	r8, r3
 801b7f2:	dd0a      	ble.n	801b80a <__ieee754_pow+0x1ea>
 801b7f4:	4b0f      	ldr	r3, [pc, #60]	; (801b834 <__ieee754_pow+0x214>)
 801b7f6:	429c      	cmp	r4, r3
 801b7f8:	dc0d      	bgt.n	801b816 <__ieee754_pow+0x1f6>
 801b7fa:	f1b9 0f00 	cmp.w	r9, #0
 801b7fe:	f6bf af6d 	bge.w	801b6dc <__ieee754_pow+0xbc>
 801b802:	a307      	add	r3, pc, #28	; (adr r3, 801b820 <__ieee754_pow+0x200>)
 801b804:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b808:	e79f      	b.n	801b74a <__ieee754_pow+0x12a>
 801b80a:	4b0e      	ldr	r3, [pc, #56]	; (801b844 <__ieee754_pow+0x224>)
 801b80c:	429c      	cmp	r4, r3
 801b80e:	ddf4      	ble.n	801b7fa <__ieee754_pow+0x1da>
 801b810:	4b09      	ldr	r3, [pc, #36]	; (801b838 <__ieee754_pow+0x218>)
 801b812:	429c      	cmp	r4, r3
 801b814:	dd18      	ble.n	801b848 <__ieee754_pow+0x228>
 801b816:	f1b9 0f00 	cmp.w	r9, #0
 801b81a:	dcf2      	bgt.n	801b802 <__ieee754_pow+0x1e2>
 801b81c:	e75e      	b.n	801b6dc <__ieee754_pow+0xbc>
 801b81e:	bf00      	nop
 801b820:	8800759c 	.word	0x8800759c
 801b824:	7e37e43c 	.word	0x7e37e43c
 801b828:	7ff00000 	.word	0x7ff00000
 801b82c:	0801d821 	.word	0x0801d821
 801b830:	433fffff 	.word	0x433fffff
 801b834:	3fefffff 	.word	0x3fefffff
 801b838:	3ff00000 	.word	0x3ff00000
 801b83c:	3fe00000 	.word	0x3fe00000
 801b840:	41e00000 	.word	0x41e00000
 801b844:	3feffffe 	.word	0x3feffffe
 801b848:	2200      	movs	r2, #0
 801b84a:	4b63      	ldr	r3, [pc, #396]	; (801b9d8 <__ieee754_pow+0x3b8>)
 801b84c:	f7e4 fd3c 	bl	80002c8 <__aeabi_dsub>
 801b850:	a355      	add	r3, pc, #340	; (adr r3, 801b9a8 <__ieee754_pow+0x388>)
 801b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b856:	4604      	mov	r4, r0
 801b858:	460d      	mov	r5, r1
 801b85a:	f7e4 feed 	bl	8000638 <__aeabi_dmul>
 801b85e:	a354      	add	r3, pc, #336	; (adr r3, 801b9b0 <__ieee754_pow+0x390>)
 801b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b864:	4606      	mov	r6, r0
 801b866:	460f      	mov	r7, r1
 801b868:	4620      	mov	r0, r4
 801b86a:	4629      	mov	r1, r5
 801b86c:	f7e4 fee4 	bl	8000638 <__aeabi_dmul>
 801b870:	2200      	movs	r2, #0
 801b872:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b876:	4b59      	ldr	r3, [pc, #356]	; (801b9dc <__ieee754_pow+0x3bc>)
 801b878:	4620      	mov	r0, r4
 801b87a:	4629      	mov	r1, r5
 801b87c:	f7e4 fedc 	bl	8000638 <__aeabi_dmul>
 801b880:	4602      	mov	r2, r0
 801b882:	460b      	mov	r3, r1
 801b884:	a14c      	add	r1, pc, #304	; (adr r1, 801b9b8 <__ieee754_pow+0x398>)
 801b886:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b88a:	f7e4 fd1d 	bl	80002c8 <__aeabi_dsub>
 801b88e:	4622      	mov	r2, r4
 801b890:	462b      	mov	r3, r5
 801b892:	f7e4 fed1 	bl	8000638 <__aeabi_dmul>
 801b896:	4602      	mov	r2, r0
 801b898:	460b      	mov	r3, r1
 801b89a:	2000      	movs	r0, #0
 801b89c:	4950      	ldr	r1, [pc, #320]	; (801b9e0 <__ieee754_pow+0x3c0>)
 801b89e:	f7e4 fd13 	bl	80002c8 <__aeabi_dsub>
 801b8a2:	4622      	mov	r2, r4
 801b8a4:	462b      	mov	r3, r5
 801b8a6:	4680      	mov	r8, r0
 801b8a8:	4689      	mov	r9, r1
 801b8aa:	4620      	mov	r0, r4
 801b8ac:	4629      	mov	r1, r5
 801b8ae:	f7e4 fec3 	bl	8000638 <__aeabi_dmul>
 801b8b2:	4602      	mov	r2, r0
 801b8b4:	460b      	mov	r3, r1
 801b8b6:	4640      	mov	r0, r8
 801b8b8:	4649      	mov	r1, r9
 801b8ba:	f7e4 febd 	bl	8000638 <__aeabi_dmul>
 801b8be:	a340      	add	r3, pc, #256	; (adr r3, 801b9c0 <__ieee754_pow+0x3a0>)
 801b8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8c4:	f7e4 feb8 	bl	8000638 <__aeabi_dmul>
 801b8c8:	4602      	mov	r2, r0
 801b8ca:	460b      	mov	r3, r1
 801b8cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b8d0:	f7e4 fcfa 	bl	80002c8 <__aeabi_dsub>
 801b8d4:	4602      	mov	r2, r0
 801b8d6:	460b      	mov	r3, r1
 801b8d8:	4604      	mov	r4, r0
 801b8da:	460d      	mov	r5, r1
 801b8dc:	4630      	mov	r0, r6
 801b8de:	4639      	mov	r1, r7
 801b8e0:	f7e4 fcf4 	bl	80002cc <__adddf3>
 801b8e4:	2000      	movs	r0, #0
 801b8e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b8ea:	4632      	mov	r2, r6
 801b8ec:	463b      	mov	r3, r7
 801b8ee:	f7e4 fceb 	bl	80002c8 <__aeabi_dsub>
 801b8f2:	4602      	mov	r2, r0
 801b8f4:	460b      	mov	r3, r1
 801b8f6:	4620      	mov	r0, r4
 801b8f8:	4629      	mov	r1, r5
 801b8fa:	f7e4 fce5 	bl	80002c8 <__aeabi_dsub>
 801b8fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b900:	f10b 33ff 	add.w	r3, fp, #4294967295
 801b904:	4313      	orrs	r3, r2
 801b906:	4606      	mov	r6, r0
 801b908:	460f      	mov	r7, r1
 801b90a:	f040 81eb 	bne.w	801bce4 <__ieee754_pow+0x6c4>
 801b90e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b9c8 <__ieee754_pow+0x3a8>
 801b912:	e9dd 4500 	ldrd	r4, r5, [sp]
 801b916:	2400      	movs	r4, #0
 801b918:	4622      	mov	r2, r4
 801b91a:	462b      	mov	r3, r5
 801b91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b920:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b924:	f7e4 fcd0 	bl	80002c8 <__aeabi_dsub>
 801b928:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b92c:	f7e4 fe84 	bl	8000638 <__aeabi_dmul>
 801b930:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b934:	4680      	mov	r8, r0
 801b936:	4689      	mov	r9, r1
 801b938:	4630      	mov	r0, r6
 801b93a:	4639      	mov	r1, r7
 801b93c:	f7e4 fe7c 	bl	8000638 <__aeabi_dmul>
 801b940:	4602      	mov	r2, r0
 801b942:	460b      	mov	r3, r1
 801b944:	4640      	mov	r0, r8
 801b946:	4649      	mov	r1, r9
 801b948:	f7e4 fcc0 	bl	80002cc <__adddf3>
 801b94c:	4622      	mov	r2, r4
 801b94e:	462b      	mov	r3, r5
 801b950:	4680      	mov	r8, r0
 801b952:	4689      	mov	r9, r1
 801b954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b958:	f7e4 fe6e 	bl	8000638 <__aeabi_dmul>
 801b95c:	460b      	mov	r3, r1
 801b95e:	4604      	mov	r4, r0
 801b960:	460d      	mov	r5, r1
 801b962:	4602      	mov	r2, r0
 801b964:	4649      	mov	r1, r9
 801b966:	4640      	mov	r0, r8
 801b968:	e9cd 4500 	strd	r4, r5, [sp]
 801b96c:	f7e4 fcae 	bl	80002cc <__adddf3>
 801b970:	4b1c      	ldr	r3, [pc, #112]	; (801b9e4 <__ieee754_pow+0x3c4>)
 801b972:	4299      	cmp	r1, r3
 801b974:	4606      	mov	r6, r0
 801b976:	460f      	mov	r7, r1
 801b978:	468b      	mov	fp, r1
 801b97a:	f340 82f7 	ble.w	801bf6c <__ieee754_pow+0x94c>
 801b97e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b982:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b986:	4303      	orrs	r3, r0
 801b988:	f000 81ea 	beq.w	801bd60 <__ieee754_pow+0x740>
 801b98c:	a310      	add	r3, pc, #64	; (adr r3, 801b9d0 <__ieee754_pow+0x3b0>)
 801b98e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b996:	f7e4 fe4f 	bl	8000638 <__aeabi_dmul>
 801b99a:	a30d      	add	r3, pc, #52	; (adr r3, 801b9d0 <__ieee754_pow+0x3b0>)
 801b99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9a0:	e6d5      	b.n	801b74e <__ieee754_pow+0x12e>
 801b9a2:	bf00      	nop
 801b9a4:	f3af 8000 	nop.w
 801b9a8:	60000000 	.word	0x60000000
 801b9ac:	3ff71547 	.word	0x3ff71547
 801b9b0:	f85ddf44 	.word	0xf85ddf44
 801b9b4:	3e54ae0b 	.word	0x3e54ae0b
 801b9b8:	55555555 	.word	0x55555555
 801b9bc:	3fd55555 	.word	0x3fd55555
 801b9c0:	652b82fe 	.word	0x652b82fe
 801b9c4:	3ff71547 	.word	0x3ff71547
 801b9c8:	00000000 	.word	0x00000000
 801b9cc:	bff00000 	.word	0xbff00000
 801b9d0:	8800759c 	.word	0x8800759c
 801b9d4:	7e37e43c 	.word	0x7e37e43c
 801b9d8:	3ff00000 	.word	0x3ff00000
 801b9dc:	3fd00000 	.word	0x3fd00000
 801b9e0:	3fe00000 	.word	0x3fe00000
 801b9e4:	408fffff 	.word	0x408fffff
 801b9e8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b9ec:	f04f 0200 	mov.w	r2, #0
 801b9f0:	da05      	bge.n	801b9fe <__ieee754_pow+0x3de>
 801b9f2:	4bd3      	ldr	r3, [pc, #844]	; (801bd40 <__ieee754_pow+0x720>)
 801b9f4:	f7e4 fe20 	bl	8000638 <__aeabi_dmul>
 801b9f8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b9fc:	460c      	mov	r4, r1
 801b9fe:	1523      	asrs	r3, r4, #20
 801ba00:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801ba04:	4413      	add	r3, r2
 801ba06:	9309      	str	r3, [sp, #36]	; 0x24
 801ba08:	4bce      	ldr	r3, [pc, #824]	; (801bd44 <__ieee754_pow+0x724>)
 801ba0a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801ba0e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801ba12:	429c      	cmp	r4, r3
 801ba14:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801ba18:	dd08      	ble.n	801ba2c <__ieee754_pow+0x40c>
 801ba1a:	4bcb      	ldr	r3, [pc, #812]	; (801bd48 <__ieee754_pow+0x728>)
 801ba1c:	429c      	cmp	r4, r3
 801ba1e:	f340 815e 	ble.w	801bcde <__ieee754_pow+0x6be>
 801ba22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba24:	3301      	adds	r3, #1
 801ba26:	9309      	str	r3, [sp, #36]	; 0x24
 801ba28:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801ba2c:	f04f 0a00 	mov.w	sl, #0
 801ba30:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801ba34:	930c      	str	r3, [sp, #48]	; 0x30
 801ba36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ba38:	4bc4      	ldr	r3, [pc, #784]	; (801bd4c <__ieee754_pow+0x72c>)
 801ba3a:	4413      	add	r3, r2
 801ba3c:	ed93 7b00 	vldr	d7, [r3]
 801ba40:	4629      	mov	r1, r5
 801ba42:	ec53 2b17 	vmov	r2, r3, d7
 801ba46:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ba4a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801ba4e:	f7e4 fc3b 	bl	80002c8 <__aeabi_dsub>
 801ba52:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801ba56:	4606      	mov	r6, r0
 801ba58:	460f      	mov	r7, r1
 801ba5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801ba5e:	f7e4 fc35 	bl	80002cc <__adddf3>
 801ba62:	4602      	mov	r2, r0
 801ba64:	460b      	mov	r3, r1
 801ba66:	2000      	movs	r0, #0
 801ba68:	49b9      	ldr	r1, [pc, #740]	; (801bd50 <__ieee754_pow+0x730>)
 801ba6a:	f7e4 ff0f 	bl	800088c <__aeabi_ddiv>
 801ba6e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801ba72:	4602      	mov	r2, r0
 801ba74:	460b      	mov	r3, r1
 801ba76:	4630      	mov	r0, r6
 801ba78:	4639      	mov	r1, r7
 801ba7a:	f7e4 fddd 	bl	8000638 <__aeabi_dmul>
 801ba7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ba82:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801ba86:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ba8a:	2300      	movs	r3, #0
 801ba8c:	9302      	str	r3, [sp, #8]
 801ba8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ba92:	106d      	asrs	r5, r5, #1
 801ba94:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ba98:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ba9c:	2200      	movs	r2, #0
 801ba9e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801baa2:	4640      	mov	r0, r8
 801baa4:	4649      	mov	r1, r9
 801baa6:	4614      	mov	r4, r2
 801baa8:	461d      	mov	r5, r3
 801baaa:	f7e4 fdc5 	bl	8000638 <__aeabi_dmul>
 801baae:	4602      	mov	r2, r0
 801bab0:	460b      	mov	r3, r1
 801bab2:	4630      	mov	r0, r6
 801bab4:	4639      	mov	r1, r7
 801bab6:	f7e4 fc07 	bl	80002c8 <__aeabi_dsub>
 801baba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801babe:	4606      	mov	r6, r0
 801bac0:	460f      	mov	r7, r1
 801bac2:	4620      	mov	r0, r4
 801bac4:	4629      	mov	r1, r5
 801bac6:	f7e4 fbff 	bl	80002c8 <__aeabi_dsub>
 801baca:	4602      	mov	r2, r0
 801bacc:	460b      	mov	r3, r1
 801bace:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801bad2:	f7e4 fbf9 	bl	80002c8 <__aeabi_dsub>
 801bad6:	4642      	mov	r2, r8
 801bad8:	464b      	mov	r3, r9
 801bada:	f7e4 fdad 	bl	8000638 <__aeabi_dmul>
 801bade:	4602      	mov	r2, r0
 801bae0:	460b      	mov	r3, r1
 801bae2:	4630      	mov	r0, r6
 801bae4:	4639      	mov	r1, r7
 801bae6:	f7e4 fbef 	bl	80002c8 <__aeabi_dsub>
 801baea:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801baee:	f7e4 fda3 	bl	8000638 <__aeabi_dmul>
 801baf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801baf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bafa:	4610      	mov	r0, r2
 801bafc:	4619      	mov	r1, r3
 801bafe:	f7e4 fd9b 	bl	8000638 <__aeabi_dmul>
 801bb02:	a37b      	add	r3, pc, #492	; (adr r3, 801bcf0 <__ieee754_pow+0x6d0>)
 801bb04:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb08:	4604      	mov	r4, r0
 801bb0a:	460d      	mov	r5, r1
 801bb0c:	f7e4 fd94 	bl	8000638 <__aeabi_dmul>
 801bb10:	a379      	add	r3, pc, #484	; (adr r3, 801bcf8 <__ieee754_pow+0x6d8>)
 801bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb16:	f7e4 fbd9 	bl	80002cc <__adddf3>
 801bb1a:	4622      	mov	r2, r4
 801bb1c:	462b      	mov	r3, r5
 801bb1e:	f7e4 fd8b 	bl	8000638 <__aeabi_dmul>
 801bb22:	a377      	add	r3, pc, #476	; (adr r3, 801bd00 <__ieee754_pow+0x6e0>)
 801bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb28:	f7e4 fbd0 	bl	80002cc <__adddf3>
 801bb2c:	4622      	mov	r2, r4
 801bb2e:	462b      	mov	r3, r5
 801bb30:	f7e4 fd82 	bl	8000638 <__aeabi_dmul>
 801bb34:	a374      	add	r3, pc, #464	; (adr r3, 801bd08 <__ieee754_pow+0x6e8>)
 801bb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb3a:	f7e4 fbc7 	bl	80002cc <__adddf3>
 801bb3e:	4622      	mov	r2, r4
 801bb40:	462b      	mov	r3, r5
 801bb42:	f7e4 fd79 	bl	8000638 <__aeabi_dmul>
 801bb46:	a372      	add	r3, pc, #456	; (adr r3, 801bd10 <__ieee754_pow+0x6f0>)
 801bb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb4c:	f7e4 fbbe 	bl	80002cc <__adddf3>
 801bb50:	4622      	mov	r2, r4
 801bb52:	462b      	mov	r3, r5
 801bb54:	f7e4 fd70 	bl	8000638 <__aeabi_dmul>
 801bb58:	a36f      	add	r3, pc, #444	; (adr r3, 801bd18 <__ieee754_pow+0x6f8>)
 801bb5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bb5e:	f7e4 fbb5 	bl	80002cc <__adddf3>
 801bb62:	4622      	mov	r2, r4
 801bb64:	4606      	mov	r6, r0
 801bb66:	460f      	mov	r7, r1
 801bb68:	462b      	mov	r3, r5
 801bb6a:	4620      	mov	r0, r4
 801bb6c:	4629      	mov	r1, r5
 801bb6e:	f7e4 fd63 	bl	8000638 <__aeabi_dmul>
 801bb72:	4602      	mov	r2, r0
 801bb74:	460b      	mov	r3, r1
 801bb76:	4630      	mov	r0, r6
 801bb78:	4639      	mov	r1, r7
 801bb7a:	f7e4 fd5d 	bl	8000638 <__aeabi_dmul>
 801bb7e:	4642      	mov	r2, r8
 801bb80:	4604      	mov	r4, r0
 801bb82:	460d      	mov	r5, r1
 801bb84:	464b      	mov	r3, r9
 801bb86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb8a:	f7e4 fb9f 	bl	80002cc <__adddf3>
 801bb8e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bb92:	f7e4 fd51 	bl	8000638 <__aeabi_dmul>
 801bb96:	4622      	mov	r2, r4
 801bb98:	462b      	mov	r3, r5
 801bb9a:	f7e4 fb97 	bl	80002cc <__adddf3>
 801bb9e:	4642      	mov	r2, r8
 801bba0:	4606      	mov	r6, r0
 801bba2:	460f      	mov	r7, r1
 801bba4:	464b      	mov	r3, r9
 801bba6:	4640      	mov	r0, r8
 801bba8:	4649      	mov	r1, r9
 801bbaa:	f7e4 fd45 	bl	8000638 <__aeabi_dmul>
 801bbae:	2200      	movs	r2, #0
 801bbb0:	4b68      	ldr	r3, [pc, #416]	; (801bd54 <__ieee754_pow+0x734>)
 801bbb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bbb6:	f7e4 fb89 	bl	80002cc <__adddf3>
 801bbba:	4632      	mov	r2, r6
 801bbbc:	463b      	mov	r3, r7
 801bbbe:	f7e4 fb85 	bl	80002cc <__adddf3>
 801bbc2:	9802      	ldr	r0, [sp, #8]
 801bbc4:	460d      	mov	r5, r1
 801bbc6:	4604      	mov	r4, r0
 801bbc8:	4602      	mov	r2, r0
 801bbca:	460b      	mov	r3, r1
 801bbcc:	4640      	mov	r0, r8
 801bbce:	4649      	mov	r1, r9
 801bbd0:	f7e4 fd32 	bl	8000638 <__aeabi_dmul>
 801bbd4:	2200      	movs	r2, #0
 801bbd6:	4680      	mov	r8, r0
 801bbd8:	4689      	mov	r9, r1
 801bbda:	4b5e      	ldr	r3, [pc, #376]	; (801bd54 <__ieee754_pow+0x734>)
 801bbdc:	4620      	mov	r0, r4
 801bbde:	4629      	mov	r1, r5
 801bbe0:	f7e4 fb72 	bl	80002c8 <__aeabi_dsub>
 801bbe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bbe8:	f7e4 fb6e 	bl	80002c8 <__aeabi_dsub>
 801bbec:	4602      	mov	r2, r0
 801bbee:	460b      	mov	r3, r1
 801bbf0:	4630      	mov	r0, r6
 801bbf2:	4639      	mov	r1, r7
 801bbf4:	f7e4 fb68 	bl	80002c8 <__aeabi_dsub>
 801bbf8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bbfc:	f7e4 fd1c 	bl	8000638 <__aeabi_dmul>
 801bc00:	4622      	mov	r2, r4
 801bc02:	4606      	mov	r6, r0
 801bc04:	460f      	mov	r7, r1
 801bc06:	462b      	mov	r3, r5
 801bc08:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bc0c:	f7e4 fd14 	bl	8000638 <__aeabi_dmul>
 801bc10:	4602      	mov	r2, r0
 801bc12:	460b      	mov	r3, r1
 801bc14:	4630      	mov	r0, r6
 801bc16:	4639      	mov	r1, r7
 801bc18:	f7e4 fb58 	bl	80002cc <__adddf3>
 801bc1c:	4606      	mov	r6, r0
 801bc1e:	460f      	mov	r7, r1
 801bc20:	4602      	mov	r2, r0
 801bc22:	460b      	mov	r3, r1
 801bc24:	4640      	mov	r0, r8
 801bc26:	4649      	mov	r1, r9
 801bc28:	f7e4 fb50 	bl	80002cc <__adddf3>
 801bc2c:	9802      	ldr	r0, [sp, #8]
 801bc2e:	a33c      	add	r3, pc, #240	; (adr r3, 801bd20 <__ieee754_pow+0x700>)
 801bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc34:	4604      	mov	r4, r0
 801bc36:	460d      	mov	r5, r1
 801bc38:	f7e4 fcfe 	bl	8000638 <__aeabi_dmul>
 801bc3c:	4642      	mov	r2, r8
 801bc3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bc42:	464b      	mov	r3, r9
 801bc44:	4620      	mov	r0, r4
 801bc46:	4629      	mov	r1, r5
 801bc48:	f7e4 fb3e 	bl	80002c8 <__aeabi_dsub>
 801bc4c:	4602      	mov	r2, r0
 801bc4e:	460b      	mov	r3, r1
 801bc50:	4630      	mov	r0, r6
 801bc52:	4639      	mov	r1, r7
 801bc54:	f7e4 fb38 	bl	80002c8 <__aeabi_dsub>
 801bc58:	a333      	add	r3, pc, #204	; (adr r3, 801bd28 <__ieee754_pow+0x708>)
 801bc5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc5e:	f7e4 fceb 	bl	8000638 <__aeabi_dmul>
 801bc62:	a333      	add	r3, pc, #204	; (adr r3, 801bd30 <__ieee754_pow+0x710>)
 801bc64:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc68:	4606      	mov	r6, r0
 801bc6a:	460f      	mov	r7, r1
 801bc6c:	4620      	mov	r0, r4
 801bc6e:	4629      	mov	r1, r5
 801bc70:	f7e4 fce2 	bl	8000638 <__aeabi_dmul>
 801bc74:	4602      	mov	r2, r0
 801bc76:	460b      	mov	r3, r1
 801bc78:	4630      	mov	r0, r6
 801bc7a:	4639      	mov	r1, r7
 801bc7c:	f7e4 fb26 	bl	80002cc <__adddf3>
 801bc80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc82:	4b35      	ldr	r3, [pc, #212]	; (801bd58 <__ieee754_pow+0x738>)
 801bc84:	4413      	add	r3, r2
 801bc86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc8a:	f7e4 fb1f 	bl	80002cc <__adddf3>
 801bc8e:	4604      	mov	r4, r0
 801bc90:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc92:	460d      	mov	r5, r1
 801bc94:	f7e4 fc66 	bl	8000564 <__aeabi_i2d>
 801bc98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc9a:	4b30      	ldr	r3, [pc, #192]	; (801bd5c <__ieee754_pow+0x73c>)
 801bc9c:	4413      	add	r3, r2
 801bc9e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bca2:	4606      	mov	r6, r0
 801bca4:	460f      	mov	r7, r1
 801bca6:	4622      	mov	r2, r4
 801bca8:	462b      	mov	r3, r5
 801bcaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bcae:	f7e4 fb0d 	bl	80002cc <__adddf3>
 801bcb2:	4642      	mov	r2, r8
 801bcb4:	464b      	mov	r3, r9
 801bcb6:	f7e4 fb09 	bl	80002cc <__adddf3>
 801bcba:	4632      	mov	r2, r6
 801bcbc:	463b      	mov	r3, r7
 801bcbe:	f7e4 fb05 	bl	80002cc <__adddf3>
 801bcc2:	9802      	ldr	r0, [sp, #8]
 801bcc4:	4632      	mov	r2, r6
 801bcc6:	463b      	mov	r3, r7
 801bcc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bccc:	f7e4 fafc 	bl	80002c8 <__aeabi_dsub>
 801bcd0:	4642      	mov	r2, r8
 801bcd2:	464b      	mov	r3, r9
 801bcd4:	f7e4 faf8 	bl	80002c8 <__aeabi_dsub>
 801bcd8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bcdc:	e607      	b.n	801b8ee <__ieee754_pow+0x2ce>
 801bcde:	f04f 0a01 	mov.w	sl, #1
 801bce2:	e6a5      	b.n	801ba30 <__ieee754_pow+0x410>
 801bce4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bd38 <__ieee754_pow+0x718>
 801bce8:	e613      	b.n	801b912 <__ieee754_pow+0x2f2>
 801bcea:	bf00      	nop
 801bcec:	f3af 8000 	nop.w
 801bcf0:	4a454eef 	.word	0x4a454eef
 801bcf4:	3fca7e28 	.word	0x3fca7e28
 801bcf8:	93c9db65 	.word	0x93c9db65
 801bcfc:	3fcd864a 	.word	0x3fcd864a
 801bd00:	a91d4101 	.word	0xa91d4101
 801bd04:	3fd17460 	.word	0x3fd17460
 801bd08:	518f264d 	.word	0x518f264d
 801bd0c:	3fd55555 	.word	0x3fd55555
 801bd10:	db6fabff 	.word	0xdb6fabff
 801bd14:	3fdb6db6 	.word	0x3fdb6db6
 801bd18:	33333303 	.word	0x33333303
 801bd1c:	3fe33333 	.word	0x3fe33333
 801bd20:	e0000000 	.word	0xe0000000
 801bd24:	3feec709 	.word	0x3feec709
 801bd28:	dc3a03fd 	.word	0xdc3a03fd
 801bd2c:	3feec709 	.word	0x3feec709
 801bd30:	145b01f5 	.word	0x145b01f5
 801bd34:	be3e2fe0 	.word	0xbe3e2fe0
 801bd38:	00000000 	.word	0x00000000
 801bd3c:	3ff00000 	.word	0x3ff00000
 801bd40:	43400000 	.word	0x43400000
 801bd44:	0003988e 	.word	0x0003988e
 801bd48:	000bb679 	.word	0x000bb679
 801bd4c:	0801d8c8 	.word	0x0801d8c8
 801bd50:	3ff00000 	.word	0x3ff00000
 801bd54:	40080000 	.word	0x40080000
 801bd58:	0801d8e8 	.word	0x0801d8e8
 801bd5c:	0801d8d8 	.word	0x0801d8d8
 801bd60:	a3b4      	add	r3, pc, #720	; (adr r3, 801c034 <__ieee754_pow+0xa14>)
 801bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd66:	4640      	mov	r0, r8
 801bd68:	4649      	mov	r1, r9
 801bd6a:	f7e4 faaf 	bl	80002cc <__adddf3>
 801bd6e:	4622      	mov	r2, r4
 801bd70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd74:	462b      	mov	r3, r5
 801bd76:	4630      	mov	r0, r6
 801bd78:	4639      	mov	r1, r7
 801bd7a:	f7e4 faa5 	bl	80002c8 <__aeabi_dsub>
 801bd7e:	4602      	mov	r2, r0
 801bd80:	460b      	mov	r3, r1
 801bd82:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bd86:	f7e4 fee7 	bl	8000b58 <__aeabi_dcmpgt>
 801bd8a:	2800      	cmp	r0, #0
 801bd8c:	f47f adfe 	bne.w	801b98c <__ieee754_pow+0x36c>
 801bd90:	4aa3      	ldr	r2, [pc, #652]	; (801c020 <__ieee754_pow+0xa00>)
 801bd92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bd96:	4293      	cmp	r3, r2
 801bd98:	f340 810a 	ble.w	801bfb0 <__ieee754_pow+0x990>
 801bd9c:	151b      	asrs	r3, r3, #20
 801bd9e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bda2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bda6:	fa4a f303 	asr.w	r3, sl, r3
 801bdaa:	445b      	add	r3, fp
 801bdac:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801bdb0:	4e9c      	ldr	r6, [pc, #624]	; (801c024 <__ieee754_pow+0xa04>)
 801bdb2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801bdb6:	4116      	asrs	r6, r2
 801bdb8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801bdbc:	2000      	movs	r0, #0
 801bdbe:	ea23 0106 	bic.w	r1, r3, r6
 801bdc2:	f1c2 0214 	rsb	r2, r2, #20
 801bdc6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801bdca:	fa4a fa02 	asr.w	sl, sl, r2
 801bdce:	f1bb 0f00 	cmp.w	fp, #0
 801bdd2:	4602      	mov	r2, r0
 801bdd4:	460b      	mov	r3, r1
 801bdd6:	4620      	mov	r0, r4
 801bdd8:	4629      	mov	r1, r5
 801bdda:	bfb8      	it	lt
 801bddc:	f1ca 0a00 	rsblt	sl, sl, #0
 801bde0:	f7e4 fa72 	bl	80002c8 <__aeabi_dsub>
 801bde4:	e9cd 0100 	strd	r0, r1, [sp]
 801bde8:	4642      	mov	r2, r8
 801bdea:	464b      	mov	r3, r9
 801bdec:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bdf0:	f7e4 fa6c 	bl	80002cc <__adddf3>
 801bdf4:	2000      	movs	r0, #0
 801bdf6:	a378      	add	r3, pc, #480	; (adr r3, 801bfd8 <__ieee754_pow+0x9b8>)
 801bdf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdfc:	4604      	mov	r4, r0
 801bdfe:	460d      	mov	r5, r1
 801be00:	f7e4 fc1a 	bl	8000638 <__aeabi_dmul>
 801be04:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be08:	4606      	mov	r6, r0
 801be0a:	460f      	mov	r7, r1
 801be0c:	4620      	mov	r0, r4
 801be0e:	4629      	mov	r1, r5
 801be10:	f7e4 fa5a 	bl	80002c8 <__aeabi_dsub>
 801be14:	4602      	mov	r2, r0
 801be16:	460b      	mov	r3, r1
 801be18:	4640      	mov	r0, r8
 801be1a:	4649      	mov	r1, r9
 801be1c:	f7e4 fa54 	bl	80002c8 <__aeabi_dsub>
 801be20:	a36f      	add	r3, pc, #444	; (adr r3, 801bfe0 <__ieee754_pow+0x9c0>)
 801be22:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be26:	f7e4 fc07 	bl	8000638 <__aeabi_dmul>
 801be2a:	a36f      	add	r3, pc, #444	; (adr r3, 801bfe8 <__ieee754_pow+0x9c8>)
 801be2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be30:	4680      	mov	r8, r0
 801be32:	4689      	mov	r9, r1
 801be34:	4620      	mov	r0, r4
 801be36:	4629      	mov	r1, r5
 801be38:	f7e4 fbfe 	bl	8000638 <__aeabi_dmul>
 801be3c:	4602      	mov	r2, r0
 801be3e:	460b      	mov	r3, r1
 801be40:	4640      	mov	r0, r8
 801be42:	4649      	mov	r1, r9
 801be44:	f7e4 fa42 	bl	80002cc <__adddf3>
 801be48:	4604      	mov	r4, r0
 801be4a:	460d      	mov	r5, r1
 801be4c:	4602      	mov	r2, r0
 801be4e:	460b      	mov	r3, r1
 801be50:	4630      	mov	r0, r6
 801be52:	4639      	mov	r1, r7
 801be54:	f7e4 fa3a 	bl	80002cc <__adddf3>
 801be58:	4632      	mov	r2, r6
 801be5a:	463b      	mov	r3, r7
 801be5c:	4680      	mov	r8, r0
 801be5e:	4689      	mov	r9, r1
 801be60:	f7e4 fa32 	bl	80002c8 <__aeabi_dsub>
 801be64:	4602      	mov	r2, r0
 801be66:	460b      	mov	r3, r1
 801be68:	4620      	mov	r0, r4
 801be6a:	4629      	mov	r1, r5
 801be6c:	f7e4 fa2c 	bl	80002c8 <__aeabi_dsub>
 801be70:	4642      	mov	r2, r8
 801be72:	4606      	mov	r6, r0
 801be74:	460f      	mov	r7, r1
 801be76:	464b      	mov	r3, r9
 801be78:	4640      	mov	r0, r8
 801be7a:	4649      	mov	r1, r9
 801be7c:	f7e4 fbdc 	bl	8000638 <__aeabi_dmul>
 801be80:	a35b      	add	r3, pc, #364	; (adr r3, 801bff0 <__ieee754_pow+0x9d0>)
 801be82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be86:	4604      	mov	r4, r0
 801be88:	460d      	mov	r5, r1
 801be8a:	f7e4 fbd5 	bl	8000638 <__aeabi_dmul>
 801be8e:	a35a      	add	r3, pc, #360	; (adr r3, 801bff8 <__ieee754_pow+0x9d8>)
 801be90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be94:	f7e4 fa18 	bl	80002c8 <__aeabi_dsub>
 801be98:	4622      	mov	r2, r4
 801be9a:	462b      	mov	r3, r5
 801be9c:	f7e4 fbcc 	bl	8000638 <__aeabi_dmul>
 801bea0:	a357      	add	r3, pc, #348	; (adr r3, 801c000 <__ieee754_pow+0x9e0>)
 801bea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bea6:	f7e4 fa11 	bl	80002cc <__adddf3>
 801beaa:	4622      	mov	r2, r4
 801beac:	462b      	mov	r3, r5
 801beae:	f7e4 fbc3 	bl	8000638 <__aeabi_dmul>
 801beb2:	a355      	add	r3, pc, #340	; (adr r3, 801c008 <__ieee754_pow+0x9e8>)
 801beb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beb8:	f7e4 fa06 	bl	80002c8 <__aeabi_dsub>
 801bebc:	4622      	mov	r2, r4
 801bebe:	462b      	mov	r3, r5
 801bec0:	f7e4 fbba 	bl	8000638 <__aeabi_dmul>
 801bec4:	a352      	add	r3, pc, #328	; (adr r3, 801c010 <__ieee754_pow+0x9f0>)
 801bec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801beca:	f7e4 f9ff 	bl	80002cc <__adddf3>
 801bece:	4622      	mov	r2, r4
 801bed0:	462b      	mov	r3, r5
 801bed2:	f7e4 fbb1 	bl	8000638 <__aeabi_dmul>
 801bed6:	4602      	mov	r2, r0
 801bed8:	460b      	mov	r3, r1
 801beda:	4640      	mov	r0, r8
 801bedc:	4649      	mov	r1, r9
 801bede:	f7e4 f9f3 	bl	80002c8 <__aeabi_dsub>
 801bee2:	4604      	mov	r4, r0
 801bee4:	460d      	mov	r5, r1
 801bee6:	4602      	mov	r2, r0
 801bee8:	460b      	mov	r3, r1
 801beea:	4640      	mov	r0, r8
 801beec:	4649      	mov	r1, r9
 801beee:	f7e4 fba3 	bl	8000638 <__aeabi_dmul>
 801bef2:	2200      	movs	r2, #0
 801bef4:	e9cd 0100 	strd	r0, r1, [sp]
 801bef8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801befc:	4620      	mov	r0, r4
 801befe:	4629      	mov	r1, r5
 801bf00:	f7e4 f9e2 	bl	80002c8 <__aeabi_dsub>
 801bf04:	4602      	mov	r2, r0
 801bf06:	460b      	mov	r3, r1
 801bf08:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf0c:	f7e4 fcbe 	bl	800088c <__aeabi_ddiv>
 801bf10:	4632      	mov	r2, r6
 801bf12:	4604      	mov	r4, r0
 801bf14:	460d      	mov	r5, r1
 801bf16:	463b      	mov	r3, r7
 801bf18:	4640      	mov	r0, r8
 801bf1a:	4649      	mov	r1, r9
 801bf1c:	f7e4 fb8c 	bl	8000638 <__aeabi_dmul>
 801bf20:	4632      	mov	r2, r6
 801bf22:	463b      	mov	r3, r7
 801bf24:	f7e4 f9d2 	bl	80002cc <__adddf3>
 801bf28:	4602      	mov	r2, r0
 801bf2a:	460b      	mov	r3, r1
 801bf2c:	4620      	mov	r0, r4
 801bf2e:	4629      	mov	r1, r5
 801bf30:	f7e4 f9ca 	bl	80002c8 <__aeabi_dsub>
 801bf34:	4642      	mov	r2, r8
 801bf36:	464b      	mov	r3, r9
 801bf38:	f7e4 f9c6 	bl	80002c8 <__aeabi_dsub>
 801bf3c:	4602      	mov	r2, r0
 801bf3e:	460b      	mov	r3, r1
 801bf40:	2000      	movs	r0, #0
 801bf42:	4939      	ldr	r1, [pc, #228]	; (801c028 <__ieee754_pow+0xa08>)
 801bf44:	f7e4 f9c0 	bl	80002c8 <__aeabi_dsub>
 801bf48:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801bf4c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801bf50:	4602      	mov	r2, r0
 801bf52:	460b      	mov	r3, r1
 801bf54:	da2f      	bge.n	801bfb6 <__ieee754_pow+0x996>
 801bf56:	4650      	mov	r0, sl
 801bf58:	ec43 2b10 	vmov	d0, r2, r3
 801bf5c:	f000 fc80 	bl	801c860 <scalbn>
 801bf60:	ec51 0b10 	vmov	r0, r1, d0
 801bf64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bf68:	f7ff bbf1 	b.w	801b74e <__ieee754_pow+0x12e>
 801bf6c:	4b2f      	ldr	r3, [pc, #188]	; (801c02c <__ieee754_pow+0xa0c>)
 801bf6e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801bf72:	429e      	cmp	r6, r3
 801bf74:	f77f af0c 	ble.w	801bd90 <__ieee754_pow+0x770>
 801bf78:	4b2d      	ldr	r3, [pc, #180]	; (801c030 <__ieee754_pow+0xa10>)
 801bf7a:	440b      	add	r3, r1
 801bf7c:	4303      	orrs	r3, r0
 801bf7e:	d00b      	beq.n	801bf98 <__ieee754_pow+0x978>
 801bf80:	a325      	add	r3, pc, #148	; (adr r3, 801c018 <__ieee754_pow+0x9f8>)
 801bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf8a:	f7e4 fb55 	bl	8000638 <__aeabi_dmul>
 801bf8e:	a322      	add	r3, pc, #136	; (adr r3, 801c018 <__ieee754_pow+0x9f8>)
 801bf90:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf94:	f7ff bbdb 	b.w	801b74e <__ieee754_pow+0x12e>
 801bf98:	4622      	mov	r2, r4
 801bf9a:	462b      	mov	r3, r5
 801bf9c:	f7e4 f994 	bl	80002c8 <__aeabi_dsub>
 801bfa0:	4642      	mov	r2, r8
 801bfa2:	464b      	mov	r3, r9
 801bfa4:	f7e4 fdce 	bl	8000b44 <__aeabi_dcmpge>
 801bfa8:	2800      	cmp	r0, #0
 801bfaa:	f43f aef1 	beq.w	801bd90 <__ieee754_pow+0x770>
 801bfae:	e7e7      	b.n	801bf80 <__ieee754_pow+0x960>
 801bfb0:	f04f 0a00 	mov.w	sl, #0
 801bfb4:	e718      	b.n	801bde8 <__ieee754_pow+0x7c8>
 801bfb6:	4621      	mov	r1, r4
 801bfb8:	e7d4      	b.n	801bf64 <__ieee754_pow+0x944>
 801bfba:	2000      	movs	r0, #0
 801bfbc:	491a      	ldr	r1, [pc, #104]	; (801c028 <__ieee754_pow+0xa08>)
 801bfbe:	f7ff bb8f 	b.w	801b6e0 <__ieee754_pow+0xc0>
 801bfc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bfc6:	f7ff bb8b 	b.w	801b6e0 <__ieee754_pow+0xc0>
 801bfca:	4630      	mov	r0, r6
 801bfcc:	4639      	mov	r1, r7
 801bfce:	f7ff bb87 	b.w	801b6e0 <__ieee754_pow+0xc0>
 801bfd2:	4693      	mov	fp, r2
 801bfd4:	f7ff bb98 	b.w	801b708 <__ieee754_pow+0xe8>
 801bfd8:	00000000 	.word	0x00000000
 801bfdc:	3fe62e43 	.word	0x3fe62e43
 801bfe0:	fefa39ef 	.word	0xfefa39ef
 801bfe4:	3fe62e42 	.word	0x3fe62e42
 801bfe8:	0ca86c39 	.word	0x0ca86c39
 801bfec:	be205c61 	.word	0xbe205c61
 801bff0:	72bea4d0 	.word	0x72bea4d0
 801bff4:	3e663769 	.word	0x3e663769
 801bff8:	c5d26bf1 	.word	0xc5d26bf1
 801bffc:	3ebbbd41 	.word	0x3ebbbd41
 801c000:	af25de2c 	.word	0xaf25de2c
 801c004:	3f11566a 	.word	0x3f11566a
 801c008:	16bebd93 	.word	0x16bebd93
 801c00c:	3f66c16c 	.word	0x3f66c16c
 801c010:	5555553e 	.word	0x5555553e
 801c014:	3fc55555 	.word	0x3fc55555
 801c018:	c2f8f359 	.word	0xc2f8f359
 801c01c:	01a56e1f 	.word	0x01a56e1f
 801c020:	3fe00000 	.word	0x3fe00000
 801c024:	000fffff 	.word	0x000fffff
 801c028:	3ff00000 	.word	0x3ff00000
 801c02c:	4090cbff 	.word	0x4090cbff
 801c030:	3f6f3400 	.word	0x3f6f3400
 801c034:	652b82fe 	.word	0x652b82fe
 801c038:	3c971547 	.word	0x3c971547

0801c03c <__ieee754_sqrt>:
 801c03c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c040:	4955      	ldr	r1, [pc, #340]	; (801c198 <__ieee754_sqrt+0x15c>)
 801c042:	ec55 4b10 	vmov	r4, r5, d0
 801c046:	43a9      	bics	r1, r5
 801c048:	462b      	mov	r3, r5
 801c04a:	462a      	mov	r2, r5
 801c04c:	d112      	bne.n	801c074 <__ieee754_sqrt+0x38>
 801c04e:	ee10 2a10 	vmov	r2, s0
 801c052:	ee10 0a10 	vmov	r0, s0
 801c056:	4629      	mov	r1, r5
 801c058:	f7e4 faee 	bl	8000638 <__aeabi_dmul>
 801c05c:	4602      	mov	r2, r0
 801c05e:	460b      	mov	r3, r1
 801c060:	4620      	mov	r0, r4
 801c062:	4629      	mov	r1, r5
 801c064:	f7e4 f932 	bl	80002cc <__adddf3>
 801c068:	4604      	mov	r4, r0
 801c06a:	460d      	mov	r5, r1
 801c06c:	ec45 4b10 	vmov	d0, r4, r5
 801c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c074:	2d00      	cmp	r5, #0
 801c076:	ee10 0a10 	vmov	r0, s0
 801c07a:	4621      	mov	r1, r4
 801c07c:	dc0f      	bgt.n	801c09e <__ieee754_sqrt+0x62>
 801c07e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c082:	4330      	orrs	r0, r6
 801c084:	d0f2      	beq.n	801c06c <__ieee754_sqrt+0x30>
 801c086:	b155      	cbz	r5, 801c09e <__ieee754_sqrt+0x62>
 801c088:	ee10 2a10 	vmov	r2, s0
 801c08c:	4620      	mov	r0, r4
 801c08e:	4629      	mov	r1, r5
 801c090:	f7e4 f91a 	bl	80002c8 <__aeabi_dsub>
 801c094:	4602      	mov	r2, r0
 801c096:	460b      	mov	r3, r1
 801c098:	f7e4 fbf8 	bl	800088c <__aeabi_ddiv>
 801c09c:	e7e4      	b.n	801c068 <__ieee754_sqrt+0x2c>
 801c09e:	151b      	asrs	r3, r3, #20
 801c0a0:	d073      	beq.n	801c18a <__ieee754_sqrt+0x14e>
 801c0a2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c0a6:	07dd      	lsls	r5, r3, #31
 801c0a8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c0ac:	bf48      	it	mi
 801c0ae:	0fc8      	lsrmi	r0, r1, #31
 801c0b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c0b4:	bf44      	itt	mi
 801c0b6:	0049      	lslmi	r1, r1, #1
 801c0b8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c0bc:	2500      	movs	r5, #0
 801c0be:	1058      	asrs	r0, r3, #1
 801c0c0:	0fcb      	lsrs	r3, r1, #31
 801c0c2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c0c6:	0049      	lsls	r1, r1, #1
 801c0c8:	2316      	movs	r3, #22
 801c0ca:	462c      	mov	r4, r5
 801c0cc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c0d0:	19a7      	adds	r7, r4, r6
 801c0d2:	4297      	cmp	r7, r2
 801c0d4:	bfde      	ittt	le
 801c0d6:	19bc      	addle	r4, r7, r6
 801c0d8:	1bd2      	suble	r2, r2, r7
 801c0da:	19ad      	addle	r5, r5, r6
 801c0dc:	0fcf      	lsrs	r7, r1, #31
 801c0de:	3b01      	subs	r3, #1
 801c0e0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c0e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c0e8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c0ec:	d1f0      	bne.n	801c0d0 <__ieee754_sqrt+0x94>
 801c0ee:	f04f 0c20 	mov.w	ip, #32
 801c0f2:	469e      	mov	lr, r3
 801c0f4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c0f8:	42a2      	cmp	r2, r4
 801c0fa:	eb06 070e 	add.w	r7, r6, lr
 801c0fe:	dc02      	bgt.n	801c106 <__ieee754_sqrt+0xca>
 801c100:	d112      	bne.n	801c128 <__ieee754_sqrt+0xec>
 801c102:	428f      	cmp	r7, r1
 801c104:	d810      	bhi.n	801c128 <__ieee754_sqrt+0xec>
 801c106:	2f00      	cmp	r7, #0
 801c108:	eb07 0e06 	add.w	lr, r7, r6
 801c10c:	da42      	bge.n	801c194 <__ieee754_sqrt+0x158>
 801c10e:	f1be 0f00 	cmp.w	lr, #0
 801c112:	db3f      	blt.n	801c194 <__ieee754_sqrt+0x158>
 801c114:	f104 0801 	add.w	r8, r4, #1
 801c118:	1b12      	subs	r2, r2, r4
 801c11a:	428f      	cmp	r7, r1
 801c11c:	bf88      	it	hi
 801c11e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c122:	1bc9      	subs	r1, r1, r7
 801c124:	4433      	add	r3, r6
 801c126:	4644      	mov	r4, r8
 801c128:	0052      	lsls	r2, r2, #1
 801c12a:	f1bc 0c01 	subs.w	ip, ip, #1
 801c12e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c132:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c136:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c13a:	d1dd      	bne.n	801c0f8 <__ieee754_sqrt+0xbc>
 801c13c:	430a      	orrs	r2, r1
 801c13e:	d006      	beq.n	801c14e <__ieee754_sqrt+0x112>
 801c140:	1c5c      	adds	r4, r3, #1
 801c142:	bf13      	iteet	ne
 801c144:	3301      	addne	r3, #1
 801c146:	3501      	addeq	r5, #1
 801c148:	4663      	moveq	r3, ip
 801c14a:	f023 0301 	bicne.w	r3, r3, #1
 801c14e:	106a      	asrs	r2, r5, #1
 801c150:	085b      	lsrs	r3, r3, #1
 801c152:	07e9      	lsls	r1, r5, #31
 801c154:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c158:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c15c:	bf48      	it	mi
 801c15e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c162:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c166:	461c      	mov	r4, r3
 801c168:	e780      	b.n	801c06c <__ieee754_sqrt+0x30>
 801c16a:	0aca      	lsrs	r2, r1, #11
 801c16c:	3815      	subs	r0, #21
 801c16e:	0549      	lsls	r1, r1, #21
 801c170:	2a00      	cmp	r2, #0
 801c172:	d0fa      	beq.n	801c16a <__ieee754_sqrt+0x12e>
 801c174:	02d6      	lsls	r6, r2, #11
 801c176:	d50a      	bpl.n	801c18e <__ieee754_sqrt+0x152>
 801c178:	f1c3 0420 	rsb	r4, r3, #32
 801c17c:	fa21 f404 	lsr.w	r4, r1, r4
 801c180:	1e5d      	subs	r5, r3, #1
 801c182:	4099      	lsls	r1, r3
 801c184:	4322      	orrs	r2, r4
 801c186:	1b43      	subs	r3, r0, r5
 801c188:	e78b      	b.n	801c0a2 <__ieee754_sqrt+0x66>
 801c18a:	4618      	mov	r0, r3
 801c18c:	e7f0      	b.n	801c170 <__ieee754_sqrt+0x134>
 801c18e:	0052      	lsls	r2, r2, #1
 801c190:	3301      	adds	r3, #1
 801c192:	e7ef      	b.n	801c174 <__ieee754_sqrt+0x138>
 801c194:	46a0      	mov	r8, r4
 801c196:	e7bf      	b.n	801c118 <__ieee754_sqrt+0xdc>
 801c198:	7ff00000 	.word	0x7ff00000

0801c19c <__ieee754_powf>:
 801c19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c1a0:	ee10 5a90 	vmov	r5, s1
 801c1a4:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801c1a8:	ed2d 8b02 	vpush	{d8}
 801c1ac:	eeb0 8a40 	vmov.f32	s16, s0
 801c1b0:	eef0 8a60 	vmov.f32	s17, s1
 801c1b4:	f000 8293 	beq.w	801c6de <__ieee754_powf+0x542>
 801c1b8:	ee10 8a10 	vmov	r8, s0
 801c1bc:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801c1c0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801c1c4:	dc06      	bgt.n	801c1d4 <__ieee754_powf+0x38>
 801c1c6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c1ca:	dd0a      	ble.n	801c1e2 <__ieee754_powf+0x46>
 801c1cc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c1d0:	f000 8285 	beq.w	801c6de <__ieee754_powf+0x542>
 801c1d4:	ecbd 8b02 	vpop	{d8}
 801c1d8:	48d9      	ldr	r0, [pc, #868]	; (801c540 <__ieee754_powf+0x3a4>)
 801c1da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c1de:	f000 bbc7 	b.w	801c970 <nanf>
 801c1e2:	f1b8 0f00 	cmp.w	r8, #0
 801c1e6:	da1d      	bge.n	801c224 <__ieee754_powf+0x88>
 801c1e8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801c1ec:	da2c      	bge.n	801c248 <__ieee754_powf+0xac>
 801c1ee:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c1f2:	db30      	blt.n	801c256 <__ieee754_powf+0xba>
 801c1f4:	15fb      	asrs	r3, r7, #23
 801c1f6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801c1fa:	fa47 f603 	asr.w	r6, r7, r3
 801c1fe:	fa06 f303 	lsl.w	r3, r6, r3
 801c202:	42bb      	cmp	r3, r7
 801c204:	d127      	bne.n	801c256 <__ieee754_powf+0xba>
 801c206:	f006 0601 	and.w	r6, r6, #1
 801c20a:	f1c6 0602 	rsb	r6, r6, #2
 801c20e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c212:	d122      	bne.n	801c25a <__ieee754_powf+0xbe>
 801c214:	2d00      	cmp	r5, #0
 801c216:	f280 8268 	bge.w	801c6ea <__ieee754_powf+0x54e>
 801c21a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c21e:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801c222:	e00d      	b.n	801c240 <__ieee754_powf+0xa4>
 801c224:	2600      	movs	r6, #0
 801c226:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c22a:	d1f0      	bne.n	801c20e <__ieee754_powf+0x72>
 801c22c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c230:	f000 8255 	beq.w	801c6de <__ieee754_powf+0x542>
 801c234:	dd0a      	ble.n	801c24c <__ieee754_powf+0xb0>
 801c236:	2d00      	cmp	r5, #0
 801c238:	f280 8254 	bge.w	801c6e4 <__ieee754_powf+0x548>
 801c23c:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801c544 <__ieee754_powf+0x3a8>
 801c240:	ecbd 8b02 	vpop	{d8}
 801c244:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c248:	2602      	movs	r6, #2
 801c24a:	e7ec      	b.n	801c226 <__ieee754_powf+0x8a>
 801c24c:	2d00      	cmp	r5, #0
 801c24e:	daf5      	bge.n	801c23c <__ieee754_powf+0xa0>
 801c250:	eeb1 0a68 	vneg.f32	s0, s17
 801c254:	e7f4      	b.n	801c240 <__ieee754_powf+0xa4>
 801c256:	2600      	movs	r6, #0
 801c258:	e7d9      	b.n	801c20e <__ieee754_powf+0x72>
 801c25a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801c25e:	d102      	bne.n	801c266 <__ieee754_powf+0xca>
 801c260:	ee28 0a08 	vmul.f32	s0, s16, s16
 801c264:	e7ec      	b.n	801c240 <__ieee754_powf+0xa4>
 801c266:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801c26a:	eeb0 0a48 	vmov.f32	s0, s16
 801c26e:	d108      	bne.n	801c282 <__ieee754_powf+0xe6>
 801c270:	f1b8 0f00 	cmp.w	r8, #0
 801c274:	db05      	blt.n	801c282 <__ieee754_powf+0xe6>
 801c276:	ecbd 8b02 	vpop	{d8}
 801c27a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c27e:	f000 ba4d 	b.w	801c71c <__ieee754_sqrtf>
 801c282:	f000 fb63 	bl	801c94c <fabsf>
 801c286:	b124      	cbz	r4, 801c292 <__ieee754_powf+0xf6>
 801c288:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801c28c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801c290:	d117      	bne.n	801c2c2 <__ieee754_powf+0x126>
 801c292:	2d00      	cmp	r5, #0
 801c294:	bfbc      	itt	lt
 801c296:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801c29a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801c29e:	f1b8 0f00 	cmp.w	r8, #0
 801c2a2:	dacd      	bge.n	801c240 <__ieee754_powf+0xa4>
 801c2a4:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801c2a8:	ea54 0306 	orrs.w	r3, r4, r6
 801c2ac:	d104      	bne.n	801c2b8 <__ieee754_powf+0x11c>
 801c2ae:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c2b2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c2b6:	e7c3      	b.n	801c240 <__ieee754_powf+0xa4>
 801c2b8:	2e01      	cmp	r6, #1
 801c2ba:	d1c1      	bne.n	801c240 <__ieee754_powf+0xa4>
 801c2bc:	eeb1 0a40 	vneg.f32	s0, s0
 801c2c0:	e7be      	b.n	801c240 <__ieee754_powf+0xa4>
 801c2c2:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801c2c6:	3801      	subs	r0, #1
 801c2c8:	ea56 0300 	orrs.w	r3, r6, r0
 801c2cc:	d104      	bne.n	801c2d8 <__ieee754_powf+0x13c>
 801c2ce:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c2d2:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c2d6:	e7b3      	b.n	801c240 <__ieee754_powf+0xa4>
 801c2d8:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801c2dc:	dd6d      	ble.n	801c3ba <__ieee754_powf+0x21e>
 801c2de:	4b9a      	ldr	r3, [pc, #616]	; (801c548 <__ieee754_powf+0x3ac>)
 801c2e0:	429c      	cmp	r4, r3
 801c2e2:	dc06      	bgt.n	801c2f2 <__ieee754_powf+0x156>
 801c2e4:	2d00      	cmp	r5, #0
 801c2e6:	daa9      	bge.n	801c23c <__ieee754_powf+0xa0>
 801c2e8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801c54c <__ieee754_powf+0x3b0>
 801c2ec:	ee20 0a00 	vmul.f32	s0, s0, s0
 801c2f0:	e7a6      	b.n	801c240 <__ieee754_powf+0xa4>
 801c2f2:	4b97      	ldr	r3, [pc, #604]	; (801c550 <__ieee754_powf+0x3b4>)
 801c2f4:	429c      	cmp	r4, r3
 801c2f6:	dd02      	ble.n	801c2fe <__ieee754_powf+0x162>
 801c2f8:	2d00      	cmp	r5, #0
 801c2fa:	dcf5      	bgt.n	801c2e8 <__ieee754_powf+0x14c>
 801c2fc:	e79e      	b.n	801c23c <__ieee754_powf+0xa0>
 801c2fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c302:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c306:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801c554 <__ieee754_powf+0x3b8>
 801c30a:	eef1 6a40 	vneg.f32	s13, s0
 801c30e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801c312:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c316:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c31a:	eee7 7a40 	vfms.f32	s15, s14, s0
 801c31e:	ee60 0a00 	vmul.f32	s1, s0, s0
 801c322:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 801c558 <__ieee754_powf+0x3bc>
 801c326:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c32a:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801c55c <__ieee754_powf+0x3c0>
 801c32e:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801c332:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c336:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801c560 <__ieee754_powf+0x3c4>
 801c33a:	eeb0 6a67 	vmov.f32	s12, s15
 801c33e:	eea0 6a07 	vfma.f32	s12, s0, s14
 801c342:	ee16 3a10 	vmov	r3, s12
 801c346:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c34a:	f023 030f 	bic.w	r3, r3, #15
 801c34e:	ee00 3a90 	vmov	s1, r3
 801c352:	eee6 0a87 	vfma.f32	s1, s13, s14
 801c356:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c35a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801c35e:	f025 050f 	bic.w	r5, r5, #15
 801c362:	ee07 5a10 	vmov	s14, r5
 801c366:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801c36a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801c36e:	ee07 3a90 	vmov	s15, r3
 801c372:	eee7 0a27 	vfma.f32	s1, s14, s15
 801c376:	3e01      	subs	r6, #1
 801c378:	ea56 0200 	orrs.w	r2, r6, r0
 801c37c:	ee07 5a10 	vmov	s14, r5
 801c380:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c384:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801c388:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801c38c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c390:	ee17 4a10 	vmov	r4, s14
 801c394:	bf08      	it	eq
 801c396:	eeb0 8a40 	vmoveq.f32	s16, s0
 801c39a:	2c00      	cmp	r4, #0
 801c39c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c3a0:	f340 8184 	ble.w	801c6ac <__ieee754_powf+0x510>
 801c3a4:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801c3a8:	f340 80fc 	ble.w	801c5a4 <__ieee754_powf+0x408>
 801c3ac:	eddf 7a67 	vldr	s15, [pc, #412]	; 801c54c <__ieee754_powf+0x3b0>
 801c3b0:	ee28 0a27 	vmul.f32	s0, s16, s15
 801c3b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c3b8:	e742      	b.n	801c240 <__ieee754_powf+0xa4>
 801c3ba:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801c3be:	bfbf      	itttt	lt
 801c3c0:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801c564 <__ieee754_powf+0x3c8>
 801c3c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c3c8:	f06f 0217 	mvnlt.w	r2, #23
 801c3cc:	ee17 4a90 	vmovlt	r4, s15
 801c3d0:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801c3d4:	bfa8      	it	ge
 801c3d6:	2200      	movge	r2, #0
 801c3d8:	3b7f      	subs	r3, #127	; 0x7f
 801c3da:	4413      	add	r3, r2
 801c3dc:	4a62      	ldr	r2, [pc, #392]	; (801c568 <__ieee754_powf+0x3cc>)
 801c3de:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801c3e2:	4294      	cmp	r4, r2
 801c3e4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801c3e8:	dd06      	ble.n	801c3f8 <__ieee754_powf+0x25c>
 801c3ea:	4a60      	ldr	r2, [pc, #384]	; (801c56c <__ieee754_powf+0x3d0>)
 801c3ec:	4294      	cmp	r4, r2
 801c3ee:	f340 80a5 	ble.w	801c53c <__ieee754_powf+0x3a0>
 801c3f2:	3301      	adds	r3, #1
 801c3f4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801c3f8:	2400      	movs	r4, #0
 801c3fa:	4a5d      	ldr	r2, [pc, #372]	; (801c570 <__ieee754_powf+0x3d4>)
 801c3fc:	00a7      	lsls	r7, r4, #2
 801c3fe:	443a      	add	r2, r7
 801c400:	ee07 1a90 	vmov	s15, r1
 801c404:	ed92 7a00 	vldr	s14, [r2]
 801c408:	4a5a      	ldr	r2, [pc, #360]	; (801c574 <__ieee754_powf+0x3d8>)
 801c40a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801c40e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801c412:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801c416:	1049      	asrs	r1, r1, #1
 801c418:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801c41c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801c420:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801c424:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801c428:	ee06 1a10 	vmov	s12, r1
 801c42c:	ee65 4aa6 	vmul.f32	s9, s11, s13
 801c430:	ee14 ca90 	vmov	ip, s9
 801c434:	ea02 0c0c 	and.w	ip, r2, ip
 801c438:	ee05 ca10 	vmov	s10, ip
 801c43c:	eeb1 4a45 	vneg.f32	s8, s10
 801c440:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c444:	ee36 6a47 	vsub.f32	s12, s12, s14
 801c448:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801c578 <__ieee754_powf+0x3dc>
 801c44c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801c450:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801c454:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c458:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801c45c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 801c460:	eddf 5a46 	vldr	s11, [pc, #280]	; 801c57c <__ieee754_powf+0x3e0>
 801c464:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801c468:	eddf 5a45 	vldr	s11, [pc, #276]	; 801c580 <__ieee754_powf+0x3e4>
 801c46c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c470:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801c554 <__ieee754_powf+0x3b8>
 801c474:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c478:	eddf 5a42 	vldr	s11, [pc, #264]	; 801c584 <__ieee754_powf+0x3e8>
 801c47c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c480:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801c588 <__ieee754_powf+0x3ec>
 801c484:	ee75 6a24 	vadd.f32	s13, s10, s9
 801c488:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c48c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c490:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801c494:	eef0 7a65 	vmov.f32	s15, s11
 801c498:	eee3 6a87 	vfma.f32	s13, s7, s14
 801c49c:	eee5 7a05 	vfma.f32	s15, s10, s10
 801c4a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c4a4:	ee17 1a90 	vmov	r1, s15
 801c4a8:	4011      	ands	r1, r2
 801c4aa:	ee07 1a90 	vmov	s15, r1
 801c4ae:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801c4b2:	eddf 5a36 	vldr	s11, [pc, #216]	; 801c58c <__ieee754_powf+0x3f0>
 801c4b6:	eea4 7a05 	vfma.f32	s14, s8, s10
 801c4ba:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801c4be:	ee27 7a24 	vmul.f32	s14, s14, s9
 801c4c2:	eea7 7a86 	vfma.f32	s14, s15, s12
 801c4c6:	eeb0 6a47 	vmov.f32	s12, s14
 801c4ca:	eea5 6a27 	vfma.f32	s12, s10, s15
 801c4ce:	ee16 1a10 	vmov	r1, s12
 801c4d2:	4011      	ands	r1, r2
 801c4d4:	ee06 1a90 	vmov	s13, r1
 801c4d8:	eee4 6a27 	vfma.f32	s13, s8, s15
 801c4dc:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801c590 <__ieee754_powf+0x3f4>
 801c4e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c4e4:	ee06 1a10 	vmov	s12, r1
 801c4e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c4ec:	eddf 7a29 	vldr	s15, [pc, #164]	; 801c594 <__ieee754_powf+0x3f8>
 801c4f0:	4929      	ldr	r1, [pc, #164]	; (801c598 <__ieee754_powf+0x3fc>)
 801c4f2:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c4f6:	4439      	add	r1, r7
 801c4f8:	edd1 7a00 	vldr	s15, [r1]
 801c4fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c500:	ee07 3a90 	vmov	s15, r3
 801c504:	eef0 0a47 	vmov.f32	s1, s14
 801c508:	4b24      	ldr	r3, [pc, #144]	; (801c59c <__ieee754_powf+0x400>)
 801c50a:	eee6 0a25 	vfma.f32	s1, s12, s11
 801c50e:	443b      	add	r3, r7
 801c510:	ed93 5a00 	vldr	s10, [r3]
 801c514:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c518:	ee70 0a85 	vadd.f32	s1, s1, s10
 801c51c:	ee70 7aa6 	vadd.f32	s15, s1, s13
 801c520:	ee17 3a90 	vmov	r3, s15
 801c524:	4013      	ands	r3, r2
 801c526:	ee07 3a90 	vmov	s15, r3
 801c52a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c52e:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801c532:	eee6 7a65 	vfms.f32	s15, s12, s11
 801c536:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c53a:	e70e      	b.n	801c35a <__ieee754_powf+0x1be>
 801c53c:	2401      	movs	r4, #1
 801c53e:	e75c      	b.n	801c3fa <__ieee754_powf+0x25e>
 801c540:	0801d821 	.word	0x0801d821
 801c544:	00000000 	.word	0x00000000
 801c548:	3f7ffff7 	.word	0x3f7ffff7
 801c54c:	7149f2ca 	.word	0x7149f2ca
 801c550:	3f800007 	.word	0x3f800007
 801c554:	3eaaaaab 	.word	0x3eaaaaab
 801c558:	36eca570 	.word	0x36eca570
 801c55c:	3fb8aa3b 	.word	0x3fb8aa3b
 801c560:	3fb8aa00 	.word	0x3fb8aa00
 801c564:	4b800000 	.word	0x4b800000
 801c568:	001cc471 	.word	0x001cc471
 801c56c:	005db3d6 	.word	0x005db3d6
 801c570:	0801d8f8 	.word	0x0801d8f8
 801c574:	fffff000 	.word	0xfffff000
 801c578:	3e6c3255 	.word	0x3e6c3255
 801c57c:	3e53f142 	.word	0x3e53f142
 801c580:	3e8ba305 	.word	0x3e8ba305
 801c584:	3edb6db7 	.word	0x3edb6db7
 801c588:	3f19999a 	.word	0x3f19999a
 801c58c:	3f763800 	.word	0x3f763800
 801c590:	3f76384f 	.word	0x3f76384f
 801c594:	369dc3a0 	.word	0x369dc3a0
 801c598:	0801d908 	.word	0x0801d908
 801c59c:	0801d900 	.word	0x0801d900
 801c5a0:	3338aa3c 	.word	0x3338aa3c
 801c5a4:	f040 8092 	bne.w	801c6cc <__ieee754_powf+0x530>
 801c5a8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801c5a0 <__ieee754_powf+0x404>
 801c5ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c5b0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c5b4:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5bc:	f73f aef6 	bgt.w	801c3ac <__ieee754_powf+0x210>
 801c5c0:	15db      	asrs	r3, r3, #23
 801c5c2:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801c5c6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801c5ca:	4103      	asrs	r3, r0
 801c5cc:	4423      	add	r3, r4
 801c5ce:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c5d2:	4947      	ldr	r1, [pc, #284]	; (801c6f0 <__ieee754_powf+0x554>)
 801c5d4:	3a7f      	subs	r2, #127	; 0x7f
 801c5d6:	4111      	asrs	r1, r2
 801c5d8:	ea23 0101 	bic.w	r1, r3, r1
 801c5dc:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801c5e0:	ee07 1a10 	vmov	s14, r1
 801c5e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801c5e8:	f1c2 0217 	rsb	r2, r2, #23
 801c5ec:	4110      	asrs	r0, r2
 801c5ee:	2c00      	cmp	r4, #0
 801c5f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c5f4:	bfb8      	it	lt
 801c5f6:	4240      	neglt	r0, r0
 801c5f8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801c5fc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801c6f4 <__ieee754_powf+0x558>
 801c600:	ee17 3a10 	vmov	r3, s14
 801c604:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c608:	f023 030f 	bic.w	r3, r3, #15
 801c60c:	ee07 3a10 	vmov	s14, r3
 801c610:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c614:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c618:	eddf 7a37 	vldr	s15, [pc, #220]	; 801c6f8 <__ieee754_powf+0x55c>
 801c61c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c620:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801c624:	eddf 6a35 	vldr	s13, [pc, #212]	; 801c6fc <__ieee754_powf+0x560>
 801c628:	eeb0 0a67 	vmov.f32	s0, s15
 801c62c:	eea7 0a26 	vfma.f32	s0, s14, s13
 801c630:	eeb0 6a40 	vmov.f32	s12, s0
 801c634:	eea7 6a66 	vfms.f32	s12, s14, s13
 801c638:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c63c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c640:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801c700 <__ieee754_powf+0x564>
 801c644:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801c704 <__ieee754_powf+0x568>
 801c648:	eea7 6a26 	vfma.f32	s12, s14, s13
 801c64c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801c708 <__ieee754_powf+0x56c>
 801c650:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c654:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801c70c <__ieee754_powf+0x570>
 801c658:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c65c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801c710 <__ieee754_powf+0x574>
 801c660:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c664:	eeb0 6a40 	vmov.f32	s12, s0
 801c668:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c66c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c670:	eeb0 7a46 	vmov.f32	s14, s12
 801c674:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c678:	ee20 6a06 	vmul.f32	s12, s0, s12
 801c67c:	eee0 7a27 	vfma.f32	s15, s0, s15
 801c680:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801c684:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c688:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c68c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c690:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c694:	ee10 3a10 	vmov	r3, s0
 801c698:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801c69c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c6a0:	da1a      	bge.n	801c6d8 <__ieee754_powf+0x53c>
 801c6a2:	f000 f9c5 	bl	801ca30 <scalbnf>
 801c6a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 801c6aa:	e5c9      	b.n	801c240 <__ieee754_powf+0xa4>
 801c6ac:	4a19      	ldr	r2, [pc, #100]	; (801c714 <__ieee754_powf+0x578>)
 801c6ae:	4293      	cmp	r3, r2
 801c6b0:	dd02      	ble.n	801c6b8 <__ieee754_powf+0x51c>
 801c6b2:	eddf 7a19 	vldr	s15, [pc, #100]	; 801c718 <__ieee754_powf+0x57c>
 801c6b6:	e67b      	b.n	801c3b0 <__ieee754_powf+0x214>
 801c6b8:	d108      	bne.n	801c6cc <__ieee754_powf+0x530>
 801c6ba:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c6be:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c6c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c6c6:	f6ff af7b 	blt.w	801c5c0 <__ieee754_powf+0x424>
 801c6ca:	e7f2      	b.n	801c6b2 <__ieee754_powf+0x516>
 801c6cc:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801c6d0:	f73f af76 	bgt.w	801c5c0 <__ieee754_powf+0x424>
 801c6d4:	2000      	movs	r0, #0
 801c6d6:	e78f      	b.n	801c5f8 <__ieee754_powf+0x45c>
 801c6d8:	ee00 3a10 	vmov	s0, r3
 801c6dc:	e7e3      	b.n	801c6a6 <__ieee754_powf+0x50a>
 801c6de:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c6e2:	e5ad      	b.n	801c240 <__ieee754_powf+0xa4>
 801c6e4:	eeb0 0a68 	vmov.f32	s0, s17
 801c6e8:	e5aa      	b.n	801c240 <__ieee754_powf+0xa4>
 801c6ea:	eeb0 0a48 	vmov.f32	s0, s16
 801c6ee:	e5a7      	b.n	801c240 <__ieee754_powf+0xa4>
 801c6f0:	007fffff 	.word	0x007fffff
 801c6f4:	3f317218 	.word	0x3f317218
 801c6f8:	35bfbe8c 	.word	0x35bfbe8c
 801c6fc:	3f317200 	.word	0x3f317200
 801c700:	3331bb4c 	.word	0x3331bb4c
 801c704:	b5ddea0e 	.word	0xb5ddea0e
 801c708:	388ab355 	.word	0x388ab355
 801c70c:	bb360b61 	.word	0xbb360b61
 801c710:	3e2aaaab 	.word	0x3e2aaaab
 801c714:	43160000 	.word	0x43160000
 801c718:	0da24260 	.word	0x0da24260

0801c71c <__ieee754_sqrtf>:
 801c71c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c720:	4770      	bx	lr

0801c722 <fabs>:
 801c722:	ec51 0b10 	vmov	r0, r1, d0
 801c726:	ee10 2a10 	vmov	r2, s0
 801c72a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c72e:	ec43 2b10 	vmov	d0, r2, r3
 801c732:	4770      	bx	lr

0801c734 <finite>:
 801c734:	ee10 3a90 	vmov	r3, s1
 801c738:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801c73c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c740:	0fc0      	lsrs	r0, r0, #31
 801c742:	4770      	bx	lr

0801c744 <matherr>:
 801c744:	2000      	movs	r0, #0
 801c746:	4770      	bx	lr

0801c748 <nan>:
 801c748:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c750 <nan+0x8>
 801c74c:	4770      	bx	lr
 801c74e:	bf00      	nop
 801c750:	00000000 	.word	0x00000000
 801c754:	7ff80000 	.word	0x7ff80000

0801c758 <rint>:
 801c758:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c75a:	ec51 0b10 	vmov	r0, r1, d0
 801c75e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c762:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c766:	2e13      	cmp	r6, #19
 801c768:	460b      	mov	r3, r1
 801c76a:	ee10 4a10 	vmov	r4, s0
 801c76e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c772:	dc56      	bgt.n	801c822 <rint+0xca>
 801c774:	2e00      	cmp	r6, #0
 801c776:	da2b      	bge.n	801c7d0 <rint+0x78>
 801c778:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c77c:	4302      	orrs	r2, r0
 801c77e:	d023      	beq.n	801c7c8 <rint+0x70>
 801c780:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c784:	4302      	orrs	r2, r0
 801c786:	4254      	negs	r4, r2
 801c788:	4314      	orrs	r4, r2
 801c78a:	0c4b      	lsrs	r3, r1, #17
 801c78c:	0b24      	lsrs	r4, r4, #12
 801c78e:	045b      	lsls	r3, r3, #17
 801c790:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c794:	ea44 0103 	orr.w	r1, r4, r3
 801c798:	460b      	mov	r3, r1
 801c79a:	492f      	ldr	r1, [pc, #188]	; (801c858 <rint+0x100>)
 801c79c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801c7a0:	e9d1 6700 	ldrd	r6, r7, [r1]
 801c7a4:	4602      	mov	r2, r0
 801c7a6:	4639      	mov	r1, r7
 801c7a8:	4630      	mov	r0, r6
 801c7aa:	f7e3 fd8f 	bl	80002cc <__adddf3>
 801c7ae:	e9cd 0100 	strd	r0, r1, [sp]
 801c7b2:	463b      	mov	r3, r7
 801c7b4:	4632      	mov	r2, r6
 801c7b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7ba:	f7e3 fd85 	bl	80002c8 <__aeabi_dsub>
 801c7be:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c7c2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c7c6:	4639      	mov	r1, r7
 801c7c8:	ec41 0b10 	vmov	d0, r0, r1
 801c7cc:	b003      	add	sp, #12
 801c7ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c7d0:	4a22      	ldr	r2, [pc, #136]	; (801c85c <rint+0x104>)
 801c7d2:	4132      	asrs	r2, r6
 801c7d4:	ea01 0702 	and.w	r7, r1, r2
 801c7d8:	4307      	orrs	r7, r0
 801c7da:	d0f5      	beq.n	801c7c8 <rint+0x70>
 801c7dc:	0852      	lsrs	r2, r2, #1
 801c7de:	4011      	ands	r1, r2
 801c7e0:	430c      	orrs	r4, r1
 801c7e2:	d00b      	beq.n	801c7fc <rint+0xa4>
 801c7e4:	ea23 0202 	bic.w	r2, r3, r2
 801c7e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c7ec:	2e13      	cmp	r6, #19
 801c7ee:	fa43 f306 	asr.w	r3, r3, r6
 801c7f2:	bf0c      	ite	eq
 801c7f4:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c7f8:	2400      	movne	r4, #0
 801c7fa:	4313      	orrs	r3, r2
 801c7fc:	4916      	ldr	r1, [pc, #88]	; (801c858 <rint+0x100>)
 801c7fe:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c802:	4622      	mov	r2, r4
 801c804:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c808:	4620      	mov	r0, r4
 801c80a:	4629      	mov	r1, r5
 801c80c:	f7e3 fd5e 	bl	80002cc <__adddf3>
 801c810:	e9cd 0100 	strd	r0, r1, [sp]
 801c814:	4622      	mov	r2, r4
 801c816:	462b      	mov	r3, r5
 801c818:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c81c:	f7e3 fd54 	bl	80002c8 <__aeabi_dsub>
 801c820:	e7d2      	b.n	801c7c8 <rint+0x70>
 801c822:	2e33      	cmp	r6, #51	; 0x33
 801c824:	dd07      	ble.n	801c836 <rint+0xde>
 801c826:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c82a:	d1cd      	bne.n	801c7c8 <rint+0x70>
 801c82c:	ee10 2a10 	vmov	r2, s0
 801c830:	f7e3 fd4c 	bl	80002cc <__adddf3>
 801c834:	e7c8      	b.n	801c7c8 <rint+0x70>
 801c836:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801c83a:	f04f 32ff 	mov.w	r2, #4294967295
 801c83e:	40f2      	lsrs	r2, r6
 801c840:	4210      	tst	r0, r2
 801c842:	d0c1      	beq.n	801c7c8 <rint+0x70>
 801c844:	0852      	lsrs	r2, r2, #1
 801c846:	4210      	tst	r0, r2
 801c848:	bf1f      	itttt	ne
 801c84a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c84e:	ea20 0202 	bicne.w	r2, r0, r2
 801c852:	4134      	asrne	r4, r6
 801c854:	4314      	orrne	r4, r2
 801c856:	e7d1      	b.n	801c7fc <rint+0xa4>
 801c858:	0801d910 	.word	0x0801d910
 801c85c:	000fffff 	.word	0x000fffff

0801c860 <scalbn>:
 801c860:	b570      	push	{r4, r5, r6, lr}
 801c862:	ec55 4b10 	vmov	r4, r5, d0
 801c866:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c86a:	4606      	mov	r6, r0
 801c86c:	462b      	mov	r3, r5
 801c86e:	b9aa      	cbnz	r2, 801c89c <scalbn+0x3c>
 801c870:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c874:	4323      	orrs	r3, r4
 801c876:	d03b      	beq.n	801c8f0 <scalbn+0x90>
 801c878:	4b31      	ldr	r3, [pc, #196]	; (801c940 <scalbn+0xe0>)
 801c87a:	4629      	mov	r1, r5
 801c87c:	2200      	movs	r2, #0
 801c87e:	ee10 0a10 	vmov	r0, s0
 801c882:	f7e3 fed9 	bl	8000638 <__aeabi_dmul>
 801c886:	4b2f      	ldr	r3, [pc, #188]	; (801c944 <scalbn+0xe4>)
 801c888:	429e      	cmp	r6, r3
 801c88a:	4604      	mov	r4, r0
 801c88c:	460d      	mov	r5, r1
 801c88e:	da12      	bge.n	801c8b6 <scalbn+0x56>
 801c890:	a327      	add	r3, pc, #156	; (adr r3, 801c930 <scalbn+0xd0>)
 801c892:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c896:	f7e3 fecf 	bl	8000638 <__aeabi_dmul>
 801c89a:	e009      	b.n	801c8b0 <scalbn+0x50>
 801c89c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c8a0:	428a      	cmp	r2, r1
 801c8a2:	d10c      	bne.n	801c8be <scalbn+0x5e>
 801c8a4:	ee10 2a10 	vmov	r2, s0
 801c8a8:	4620      	mov	r0, r4
 801c8aa:	4629      	mov	r1, r5
 801c8ac:	f7e3 fd0e 	bl	80002cc <__adddf3>
 801c8b0:	4604      	mov	r4, r0
 801c8b2:	460d      	mov	r5, r1
 801c8b4:	e01c      	b.n	801c8f0 <scalbn+0x90>
 801c8b6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c8ba:	460b      	mov	r3, r1
 801c8bc:	3a36      	subs	r2, #54	; 0x36
 801c8be:	4432      	add	r2, r6
 801c8c0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c8c4:	428a      	cmp	r2, r1
 801c8c6:	dd0b      	ble.n	801c8e0 <scalbn+0x80>
 801c8c8:	ec45 4b11 	vmov	d1, r4, r5
 801c8cc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801c938 <scalbn+0xd8>
 801c8d0:	f000 f90e 	bl	801caf0 <copysign>
 801c8d4:	a318      	add	r3, pc, #96	; (adr r3, 801c938 <scalbn+0xd8>)
 801c8d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8da:	ec51 0b10 	vmov	r0, r1, d0
 801c8de:	e7da      	b.n	801c896 <scalbn+0x36>
 801c8e0:	2a00      	cmp	r2, #0
 801c8e2:	dd08      	ble.n	801c8f6 <scalbn+0x96>
 801c8e4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c8e8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c8ec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c8f0:	ec45 4b10 	vmov	d0, r4, r5
 801c8f4:	bd70      	pop	{r4, r5, r6, pc}
 801c8f6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c8fa:	da0d      	bge.n	801c918 <scalbn+0xb8>
 801c8fc:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c900:	429e      	cmp	r6, r3
 801c902:	ec45 4b11 	vmov	d1, r4, r5
 801c906:	dce1      	bgt.n	801c8cc <scalbn+0x6c>
 801c908:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801c930 <scalbn+0xd0>
 801c90c:	f000 f8f0 	bl	801caf0 <copysign>
 801c910:	a307      	add	r3, pc, #28	; (adr r3, 801c930 <scalbn+0xd0>)
 801c912:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c916:	e7e0      	b.n	801c8da <scalbn+0x7a>
 801c918:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c91c:	3236      	adds	r2, #54	; 0x36
 801c91e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c922:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c926:	4620      	mov	r0, r4
 801c928:	4629      	mov	r1, r5
 801c92a:	2200      	movs	r2, #0
 801c92c:	4b06      	ldr	r3, [pc, #24]	; (801c948 <scalbn+0xe8>)
 801c92e:	e7b2      	b.n	801c896 <scalbn+0x36>
 801c930:	c2f8f359 	.word	0xc2f8f359
 801c934:	01a56e1f 	.word	0x01a56e1f
 801c938:	8800759c 	.word	0x8800759c
 801c93c:	7e37e43c 	.word	0x7e37e43c
 801c940:	43500000 	.word	0x43500000
 801c944:	ffff3cb0 	.word	0xffff3cb0
 801c948:	3c900000 	.word	0x3c900000

0801c94c <fabsf>:
 801c94c:	ee10 3a10 	vmov	r3, s0
 801c950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c954:	ee00 3a10 	vmov	s0, r3
 801c958:	4770      	bx	lr

0801c95a <finitef>:
 801c95a:	ee10 3a10 	vmov	r3, s0
 801c95e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801c962:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801c966:	bfac      	ite	ge
 801c968:	2000      	movge	r0, #0
 801c96a:	2001      	movlt	r0, #1
 801c96c:	4770      	bx	lr
	...

0801c970 <nanf>:
 801c970:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c978 <nanf+0x8>
 801c974:	4770      	bx	lr
 801c976:	bf00      	nop
 801c978:	7fc00000 	.word	0x7fc00000

0801c97c <rintf>:
 801c97c:	b513      	push	{r0, r1, r4, lr}
 801c97e:	ee10 1a10 	vmov	r1, s0
 801c982:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c986:	0ddc      	lsrs	r4, r3, #23
 801c988:	3c7f      	subs	r4, #127	; 0x7f
 801c98a:	2c16      	cmp	r4, #22
 801c98c:	dc46      	bgt.n	801ca1c <rintf+0xa0>
 801c98e:	b32b      	cbz	r3, 801c9dc <rintf+0x60>
 801c990:	2c00      	cmp	r4, #0
 801c992:	ee10 2a10 	vmov	r2, s0
 801c996:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801c99a:	da21      	bge.n	801c9e0 <rintf+0x64>
 801c99c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801c9a0:	425b      	negs	r3, r3
 801c9a2:	4a21      	ldr	r2, [pc, #132]	; (801ca28 <rintf+0xac>)
 801c9a4:	0a5b      	lsrs	r3, r3, #9
 801c9a6:	0d09      	lsrs	r1, r1, #20
 801c9a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c9ac:	0509      	lsls	r1, r1, #20
 801c9ae:	430b      	orrs	r3, r1
 801c9b0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801c9b4:	ee07 3a90 	vmov	s15, r3
 801c9b8:	edd2 6a00 	vldr	s13, [r2]
 801c9bc:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801c9c0:	ed8d 7a01 	vstr	s14, [sp, #4]
 801c9c4:	eddd 7a01 	vldr	s15, [sp, #4]
 801c9c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c9cc:	ee17 3a90 	vmov	r3, s15
 801c9d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c9d4:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801c9d8:	ee00 3a10 	vmov	s0, r3
 801c9dc:	b002      	add	sp, #8
 801c9de:	bd10      	pop	{r4, pc}
 801c9e0:	4b12      	ldr	r3, [pc, #72]	; (801ca2c <rintf+0xb0>)
 801c9e2:	4123      	asrs	r3, r4
 801c9e4:	4219      	tst	r1, r3
 801c9e6:	d0f9      	beq.n	801c9dc <rintf+0x60>
 801c9e8:	085b      	lsrs	r3, r3, #1
 801c9ea:	4219      	tst	r1, r3
 801c9ec:	d006      	beq.n	801c9fc <rintf+0x80>
 801c9ee:	ea21 0203 	bic.w	r2, r1, r3
 801c9f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801c9f6:	fa43 f404 	asr.w	r4, r3, r4
 801c9fa:	4322      	orrs	r2, r4
 801c9fc:	4b0a      	ldr	r3, [pc, #40]	; (801ca28 <rintf+0xac>)
 801c9fe:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801ca02:	ed90 7a00 	vldr	s14, [r0]
 801ca06:	ee07 2a90 	vmov	s15, r2
 801ca0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801ca0e:	edcd 7a01 	vstr	s15, [sp, #4]
 801ca12:	ed9d 0a01 	vldr	s0, [sp, #4]
 801ca16:	ee30 0a47 	vsub.f32	s0, s0, s14
 801ca1a:	e7df      	b.n	801c9dc <rintf+0x60>
 801ca1c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ca20:	d3dc      	bcc.n	801c9dc <rintf+0x60>
 801ca22:	ee30 0a00 	vadd.f32	s0, s0, s0
 801ca26:	e7d9      	b.n	801c9dc <rintf+0x60>
 801ca28:	0801d920 	.word	0x0801d920
 801ca2c:	007fffff 	.word	0x007fffff

0801ca30 <scalbnf>:
 801ca30:	b508      	push	{r3, lr}
 801ca32:	ee10 2a10 	vmov	r2, s0
 801ca36:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801ca3a:	ed2d 8b02 	vpush	{d8}
 801ca3e:	eef0 0a40 	vmov.f32	s1, s0
 801ca42:	d004      	beq.n	801ca4e <scalbnf+0x1e>
 801ca44:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801ca48:	d306      	bcc.n	801ca58 <scalbnf+0x28>
 801ca4a:	ee70 0a00 	vadd.f32	s1, s0, s0
 801ca4e:	ecbd 8b02 	vpop	{d8}
 801ca52:	eeb0 0a60 	vmov.f32	s0, s1
 801ca56:	bd08      	pop	{r3, pc}
 801ca58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801ca5c:	d21c      	bcs.n	801ca98 <scalbnf+0x68>
 801ca5e:	4b1f      	ldr	r3, [pc, #124]	; (801cadc <scalbnf+0xac>)
 801ca60:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801cae0 <scalbnf+0xb0>
 801ca64:	4298      	cmp	r0, r3
 801ca66:	ee60 0a27 	vmul.f32	s1, s0, s15
 801ca6a:	db10      	blt.n	801ca8e <scalbnf+0x5e>
 801ca6c:	ee10 2a90 	vmov	r2, s1
 801ca70:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801ca74:	3b19      	subs	r3, #25
 801ca76:	4403      	add	r3, r0
 801ca78:	2bfe      	cmp	r3, #254	; 0xfe
 801ca7a:	dd0f      	ble.n	801ca9c <scalbnf+0x6c>
 801ca7c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801cae4 <scalbnf+0xb4>
 801ca80:	eeb0 0a48 	vmov.f32	s0, s16
 801ca84:	f000 f843 	bl	801cb0e <copysignf>
 801ca88:	ee60 0a08 	vmul.f32	s1, s0, s16
 801ca8c:	e7df      	b.n	801ca4e <scalbnf+0x1e>
 801ca8e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801cae8 <scalbnf+0xb8>
 801ca92:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801ca96:	e7da      	b.n	801ca4e <scalbnf+0x1e>
 801ca98:	0ddb      	lsrs	r3, r3, #23
 801ca9a:	e7ec      	b.n	801ca76 <scalbnf+0x46>
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	dd06      	ble.n	801caae <scalbnf+0x7e>
 801caa0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801caa4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801caa8:	ee00 3a90 	vmov	s1, r3
 801caac:	e7cf      	b.n	801ca4e <scalbnf+0x1e>
 801caae:	f113 0f16 	cmn.w	r3, #22
 801cab2:	da06      	bge.n	801cac2 <scalbnf+0x92>
 801cab4:	f24c 3350 	movw	r3, #50000	; 0xc350
 801cab8:	4298      	cmp	r0, r3
 801caba:	dcdf      	bgt.n	801ca7c <scalbnf+0x4c>
 801cabc:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801cae8 <scalbnf+0xb8>
 801cac0:	e7de      	b.n	801ca80 <scalbnf+0x50>
 801cac2:	3319      	adds	r3, #25
 801cac4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801cac8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801cacc:	eddf 7a07 	vldr	s15, [pc, #28]	; 801caec <scalbnf+0xbc>
 801cad0:	ee07 3a10 	vmov	s14, r3
 801cad4:	ee67 0a27 	vmul.f32	s1, s14, s15
 801cad8:	e7b9      	b.n	801ca4e <scalbnf+0x1e>
 801cada:	bf00      	nop
 801cadc:	ffff3cb0 	.word	0xffff3cb0
 801cae0:	4c000000 	.word	0x4c000000
 801cae4:	7149f2ca 	.word	0x7149f2ca
 801cae8:	0da24260 	.word	0x0da24260
 801caec:	33000000 	.word	0x33000000

0801caf0 <copysign>:
 801caf0:	ec51 0b10 	vmov	r0, r1, d0
 801caf4:	ee11 0a90 	vmov	r0, s3
 801caf8:	ee10 2a10 	vmov	r2, s0
 801cafc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801cb00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801cb04:	ea41 0300 	orr.w	r3, r1, r0
 801cb08:	ec43 2b10 	vmov	d0, r2, r3
 801cb0c:	4770      	bx	lr

0801cb0e <copysignf>:
 801cb0e:	ee10 3a10 	vmov	r3, s0
 801cb12:	ee10 2a90 	vmov	r2, s1
 801cb16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801cb1a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801cb1e:	4313      	orrs	r3, r2
 801cb20:	ee00 3a10 	vmov	s0, r3
 801cb24:	4770      	bx	lr
	...

0801cb28 <_init>:
 801cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb2a:	bf00      	nop
 801cb2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb2e:	bc08      	pop	{r3}
 801cb30:	469e      	mov	lr, r3
 801cb32:	4770      	bx	lr

0801cb34 <_fini>:
 801cb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cb36:	bf00      	nop
 801cb38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cb3a:	bc08      	pop	{r3}
 801cb3c:	469e      	mov	lr, r3
 801cb3e:	4770      	bx	lr
