
mb_working_gps.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c900  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e00  0801cad0  0801cad0  0002cad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d8d0  0801d8d0  000301fc  2**0
                  CONTENTS
  4 .ARM          00000008  0801d8d0  0801d8d0  0002d8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d8d8  0801d8d8  000301fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d8d8  0801d8d8  0002d8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d8dc  0801d8dc  0002d8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001fc  20000000  0801d8e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001e270  200001fc  0801dadc  000301fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2001e46c  0801dadc  0003e46c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004995f  00000000  00000000  0003022c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00008d6a  00000000  00000000  00079b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002aa0  00000000  00000000  000828f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002688  00000000  00000000  00085398  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00034a30  00000000  00000000  00087a20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00030b83  00000000  00000000  000bc450  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010b078  00000000  00000000  000ecfd3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f804b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000ba44  00000000  00000000  001f80c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001fc 	.word	0x200001fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801cab8 	.word	0x0801cab8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000200 	.word	0x20000200
 800020c:	0801cab8 	.word	0x0801cab8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b972 	b.w	8000f74 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4688      	mov	r8, r1
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d14b      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb6:	428a      	cmp	r2, r1
 8000cb8:	4615      	mov	r5, r2
 8000cba:	d967      	bls.n	8000d8c <__udivmoddi4+0xe4>
 8000cbc:	fab2 f282 	clz	r2, r2
 8000cc0:	b14a      	cbz	r2, 8000cd6 <__udivmoddi4+0x2e>
 8000cc2:	f1c2 0720 	rsb	r7, r2, #32
 8000cc6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cca:	fa20 f707 	lsr.w	r7, r0, r7
 8000cce:	4095      	lsls	r5, r2
 8000cd0:	ea47 0803 	orr.w	r8, r7, r3
 8000cd4:	4094      	lsls	r4, r2
 8000cd6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cda:	0c23      	lsrs	r3, r4, #16
 8000cdc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ce0:	fa1f fc85 	uxth.w	ip, r5
 8000ce4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ce8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cec:	fb07 f10c 	mul.w	r1, r7, ip
 8000cf0:	4299      	cmp	r1, r3
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x60>
 8000cf4:	18eb      	adds	r3, r5, r3
 8000cf6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cfa:	f080 811b 	bcs.w	8000f34 <__udivmoddi4+0x28c>
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	f240 8118 	bls.w	8000f34 <__udivmoddi4+0x28c>
 8000d04:	3f02      	subs	r7, #2
 8000d06:	442b      	add	r3, r5
 8000d08:	1a5b      	subs	r3, r3, r1
 8000d0a:	b2a4      	uxth	r4, r4
 8000d0c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d10:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d18:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d1c:	45a4      	cmp	ip, r4
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x8c>
 8000d20:	192c      	adds	r4, r5, r4
 8000d22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d26:	f080 8107 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d2a:	45a4      	cmp	ip, r4
 8000d2c:	f240 8104 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d30:	3802      	subs	r0, #2
 8000d32:	442c      	add	r4, r5
 8000d34:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d38:	eba4 040c 	sub.w	r4, r4, ip
 8000d3c:	2700      	movs	r7, #0
 8000d3e:	b11e      	cbz	r6, 8000d48 <__udivmoddi4+0xa0>
 8000d40:	40d4      	lsrs	r4, r2
 8000d42:	2300      	movs	r3, #0
 8000d44:	e9c6 4300 	strd	r4, r3, [r6]
 8000d48:	4639      	mov	r1, r7
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0xbe>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80eb 	beq.w	8000f2e <__udivmoddi4+0x286>
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d5e:	4638      	mov	r0, r7
 8000d60:	4639      	mov	r1, r7
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f783 	clz	r7, r3
 8000d6a:	2f00      	cmp	r7, #0
 8000d6c:	d147      	bne.n	8000dfe <__udivmoddi4+0x156>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0xd0>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80fa 	bhi.w	8000f6c <__udivmoddi4+0x2c4>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	4698      	mov	r8, r3
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	d0e0      	beq.n	8000d48 <__udivmoddi4+0xa0>
 8000d86:	e9c6 4800 	strd	r4, r8, [r6]
 8000d8a:	e7dd      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000d8c:	b902      	cbnz	r2, 8000d90 <__udivmoddi4+0xe8>
 8000d8e:	deff      	udf	#255	; 0xff
 8000d90:	fab2 f282 	clz	r2, r2
 8000d94:	2a00      	cmp	r2, #0
 8000d96:	f040 808f 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d9a:	1b49      	subs	r1, r1, r5
 8000d9c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000da0:	fa1f f885 	uxth.w	r8, r5
 8000da4:	2701      	movs	r7, #1
 8000da6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fb0e 111c 	mls	r1, lr, ip, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb08 f10c 	mul.w	r1, r8, ip
 8000db8:	4299      	cmp	r1, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dbc:	18eb      	adds	r3, r5, r3
 8000dbe:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4299      	cmp	r1, r3
 8000dc6:	f200 80cd 	bhi.w	8000f64 <__udivmoddi4+0x2bc>
 8000dca:	4684      	mov	ip, r0
 8000dcc:	1a59      	subs	r1, r3, r1
 8000dce:	b2a3      	uxth	r3, r4
 8000dd0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dd4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dd8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000ddc:	fb08 f800 	mul.w	r8, r8, r0
 8000de0:	45a0      	cmp	r8, r4
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x14c>
 8000de4:	192c      	adds	r4, r5, r4
 8000de6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x14a>
 8000dec:	45a0      	cmp	r8, r4
 8000dee:	f200 80b6 	bhi.w	8000f5e <__udivmoddi4+0x2b6>
 8000df2:	4618      	mov	r0, r3
 8000df4:	eba4 0408 	sub.w	r4, r4, r8
 8000df8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dfc:	e79f      	b.n	8000d3e <__udivmoddi4+0x96>
 8000dfe:	f1c7 0c20 	rsb	ip, r7, #32
 8000e02:	40bb      	lsls	r3, r7
 8000e04:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e08:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e0c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e10:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e14:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e18:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e1c:	4325      	orrs	r5, r4
 8000e1e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e22:	0c2c      	lsrs	r4, r5, #16
 8000e24:	fb08 3319 	mls	r3, r8, r9, r3
 8000e28:	fa1f fa8e 	uxth.w	sl, lr
 8000e2c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e30:	fb09 f40a 	mul.w	r4, r9, sl
 8000e34:	429c      	cmp	r4, r3
 8000e36:	fa02 f207 	lsl.w	r2, r2, r7
 8000e3a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1e 0303 	adds.w	r3, lr, r3
 8000e44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e48:	f080 8087 	bcs.w	8000f5a <__udivmoddi4+0x2b2>
 8000e4c:	429c      	cmp	r4, r3
 8000e4e:	f240 8084 	bls.w	8000f5a <__udivmoddi4+0x2b2>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4473      	add	r3, lr
 8000e58:	1b1b      	subs	r3, r3, r4
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e60:	fb08 3310 	mls	r3, r8, r0, r3
 8000e64:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e68:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e6c:	45a2      	cmp	sl, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1e 0404 	adds.w	r4, lr, r4
 8000e74:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e78:	d26b      	bcs.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7a:	45a2      	cmp	sl, r4
 8000e7c:	d969      	bls.n	8000f52 <__udivmoddi4+0x2aa>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4474      	add	r4, lr
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8a:	eba4 040a 	sub.w	r4, r4, sl
 8000e8e:	454c      	cmp	r4, r9
 8000e90:	46c2      	mov	sl, r8
 8000e92:	464b      	mov	r3, r9
 8000e94:	d354      	bcc.n	8000f40 <__udivmoddi4+0x298>
 8000e96:	d051      	beq.n	8000f3c <__udivmoddi4+0x294>
 8000e98:	2e00      	cmp	r6, #0
 8000e9a:	d069      	beq.n	8000f70 <__udivmoddi4+0x2c8>
 8000e9c:	ebb1 050a 	subs.w	r5, r1, sl
 8000ea0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ea4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ea8:	40fd      	lsrs	r5, r7
 8000eaa:	40fc      	lsrs	r4, r7
 8000eac:	ea4c 0505 	orr.w	r5, ip, r5
 8000eb0:	e9c6 5400 	strd	r5, r4, [r6]
 8000eb4:	2700      	movs	r7, #0
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ec0:	4095      	lsls	r5, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ece:	4338      	orrs	r0, r7
 8000ed0:	0c01      	lsrs	r1, r0, #16
 8000ed2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ed6:	fa1f f885 	uxth.w	r8, r5
 8000eda:	fb0e 3317 	mls	r3, lr, r7, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb07 f308 	mul.w	r3, r7, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	fa04 f402 	lsl.w	r4, r4, r2
 8000eec:	d907      	bls.n	8000efe <__udivmoddi4+0x256>
 8000eee:	1869      	adds	r1, r5, r1
 8000ef0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ef4:	d22f      	bcs.n	8000f56 <__udivmoddi4+0x2ae>
 8000ef6:	428b      	cmp	r3, r1
 8000ef8:	d92d      	bls.n	8000f56 <__udivmoddi4+0x2ae>
 8000efa:	3f02      	subs	r7, #2
 8000efc:	4429      	add	r1, r5
 8000efe:	1acb      	subs	r3, r1, r3
 8000f00:	b281      	uxth	r1, r0
 8000f02:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f06:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f0e:	fb00 f308 	mul.w	r3, r0, r8
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d907      	bls.n	8000f26 <__udivmoddi4+0x27e>
 8000f16:	1869      	adds	r1, r5, r1
 8000f18:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1c:	d217      	bcs.n	8000f4e <__udivmoddi4+0x2a6>
 8000f1e:	428b      	cmp	r3, r1
 8000f20:	d915      	bls.n	8000f4e <__udivmoddi4+0x2a6>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4429      	add	r1, r5
 8000f26:	1ac9      	subs	r1, r1, r3
 8000f28:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f2c:	e73b      	b.n	8000da6 <__udivmoddi4+0xfe>
 8000f2e:	4637      	mov	r7, r6
 8000f30:	4630      	mov	r0, r6
 8000f32:	e709      	b.n	8000d48 <__udivmoddi4+0xa0>
 8000f34:	4607      	mov	r7, r0
 8000f36:	e6e7      	b.n	8000d08 <__udivmoddi4+0x60>
 8000f38:	4618      	mov	r0, r3
 8000f3a:	e6fb      	b.n	8000d34 <__udivmoddi4+0x8c>
 8000f3c:	4541      	cmp	r1, r8
 8000f3e:	d2ab      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f40:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f44:	eb69 020e 	sbc.w	r2, r9, lr
 8000f48:	3801      	subs	r0, #1
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	e7a4      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f4e:	4660      	mov	r0, ip
 8000f50:	e7e9      	b.n	8000f26 <__udivmoddi4+0x27e>
 8000f52:	4618      	mov	r0, r3
 8000f54:	e795      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f56:	4667      	mov	r7, ip
 8000f58:	e7d1      	b.n	8000efe <__udivmoddi4+0x256>
 8000f5a:	4681      	mov	r9, r0
 8000f5c:	e77c      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f5e:	3802      	subs	r0, #2
 8000f60:	442c      	add	r4, r5
 8000f62:	e747      	b.n	8000df4 <__udivmoddi4+0x14c>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	442b      	add	r3, r5
 8000f6a:	e72f      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f6c:	4638      	mov	r0, r7
 8000f6e:	e708      	b.n	8000d82 <__udivmoddi4+0xda>
 8000f70:	4637      	mov	r7, r6
 8000f72:	e6e9      	b.n	8000d48 <__udivmoddi4+0xa0>

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <calculateCRC>:
 *  Created on: Jun 12, 2020
 *      Author: Jonas
 */
#include "EPOS4/epos4.h"

uint16_t calculateCRC(uint8_t *data, uint8_t len) {
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	460b      	mov	r3, r1
 8000f82:	70fb      	strb	r3, [r7, #3]
	uint16_t shifter, c;
	uint16_t carry;
	uint16_t crc = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	827b      	strh	r3, [r7, #18]

	for (int i = 0; i < len + 2; i += 2) {
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	e03c      	b.n	8001008 <calculateCRC+0x90>
		shifter = 0x8000;
 8000f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f92:	82fb      	strh	r3, [r7, #22]
		if (i == len) {
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	68fa      	ldr	r2, [r7, #12]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d102      	bne.n	8000fa2 <calculateCRC+0x2a>
			c = 0;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	82bb      	strh	r3, [r7, #20]
 8000fa0:	e00e      	b.n	8000fc0 <calculateCRC+0x48>
		} else {
			c = data[i+1] << 8 | data[i];
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	021b      	lsls	r3, r3, #8
 8000fae:	b21a      	sxth	r2, r3
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	6879      	ldr	r1, [r7, #4]
 8000fb4:	440b      	add	r3, r1
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	82bb      	strh	r3, [r7, #20]
		}
		do {
			carry = crc & 0x8000;
 8000fc0:	8a7b      	ldrh	r3, [r7, #18]
 8000fc2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000fc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000fca:	817b      	strh	r3, [r7, #10]
			crc <<= 1;
 8000fcc:	8a7b      	ldrh	r3, [r7, #18]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	827b      	strh	r3, [r7, #18]
			if(c & shifter) crc++;
 8000fd2:	8aba      	ldrh	r2, [r7, #20]
 8000fd4:	8afb      	ldrh	r3, [r7, #22]
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <calculateCRC+0x6c>
 8000fde:	8a7b      	ldrh	r3, [r7, #18]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	827b      	strh	r3, [r7, #18]
			if(carry) crc ^= 0x1021;
 8000fe4:	897b      	ldrh	r3, [r7, #10]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <calculateCRC+0x7e>
 8000fea:	8a7b      	ldrh	r3, [r7, #18]
 8000fec:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8000ff0:	f083 0301 	eor.w	r3, r3, #1
 8000ff4:	827b      	strh	r3, [r7, #18]
			shifter >>= 1;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	085b      	lsrs	r3, r3, #1
 8000ffa:	82fb      	strh	r3, [r7, #22]
		} while(shifter);
 8000ffc:	8afb      	ldrh	r3, [r7, #22]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1de      	bne.n	8000fc0 <calculateCRC+0x48>
	for (int i = 0; i < len + 2; i += 2) {
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	3302      	adds	r3, #2
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	78fb      	ldrb	r3, [r7, #3]
 800100a:	3302      	adds	r3, #2
 800100c:	68fa      	ldr	r2, [r7, #12]
 800100e:	429a      	cmp	r2, r3
 8001010:	dbbd      	blt.n	8000f8e <calculateCRC+0x16>
	}
	return crc;
 8001012:	8a7b      	ldrh	r3, [r7, #18]
}
 8001014:	4618      	mov	r0, r3
 8001016:	371c      	adds	r7, #28
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <EnableMotor>:

osStatus_t EnableMotor(){
 8001020:	b580      	push	{r7, lr}
 8001022:	b08e      	sub	sp, #56	; 0x38
 8001024:	af00      	add	r7, sp, #0

	osStatus_t status = osError;
 8001026:	f04f 33ff 	mov.w	r3, #4294967295
 800102a:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Register for Motor Control */
	command[0] = 0x60;
 800102c:	2360      	movs	r3, #96	; 0x60
 800102e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 8001032:	2340      	movs	r3, #64	; 0x40
 8001034:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	data[0] = 0x00;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 800103e:	2300      	movs	r3, #0
 8001040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 8001044:	2300      	movs	r3, #0
 8001046:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x06;
 800104a:	2306      	movs	r3, #6
 800104c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001050:	f107 0218 	add.w	r2, r7, #24
 8001054:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001058:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800105c:	4618      	mov	r0, r3
 800105e:	f000 f957 	bl	8001310 <WriteCommand>
 8001062:	6378      	str	r0, [r7, #52]	; 0x34

	/* Register for Motor Control */
	command[0] = 0x60;
 8001064:	2360      	movs	r3, #96	; 0x60
 8001066:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x40;
 800106a:	2340      	movs	r3, #64	; 0x40
 800106c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	/* Fully Enable Controller */
	data[0] = 0x00;
 8001070:	2300      	movs	r3, #0
 8001072:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	data[1] = 0x00;
 8001076:	2300      	movs	r3, #0
 8001078:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	data[2] = 0x00;
 800107c:	2300      	movs	r3, #0
 800107e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	data[3] = 0x0F;
 8001082:	230f      	movs	r3, #15
 8001084:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	status = WriteCommand(command, data, rx_buffer_write);
 8001088:	f107 0218 	add.w	r2, r7, #24
 800108c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001090:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001094:	4618      	mov	r0, r3
 8001096:	f000 f93b 	bl	8001310 <WriteCommand>
 800109a:	6378      	str	r0, [r7, #52]	; 0x34


	/* Check if Motor is enabled */
	uint8_t rx_buffer_read[20];

	command[0] = 0x60;
 800109c:	2360      	movs	r3, #96	; 0x60
 800109e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	command[1] = 0x41;
 80010a2:	2341      	movs	r3, #65	; 0x41
 80010a4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

	status = ReadCommand(command, rx_buffer_read);
 80010a8:	1d3a      	adds	r2, r7, #4
 80010aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010ae:	4611      	mov	r1, r2
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f9d5 	bl	8001460 <ReadCommand>
 80010b6:	6378      	str	r0, [r7, #52]	; 0x34

	if(rx_buffer_read[8] == 0x37 && rx_buffer_read[9] == 0x04 ){
 80010b8:	7b3b      	ldrb	r3, [r7, #12]
 80010ba:	2b37      	cmp	r3, #55	; 0x37
 80010bc:	d104      	bne.n	80010c8 <EnableMotor+0xa8>
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	2b04      	cmp	r3, #4
 80010c2:	d101      	bne.n	80010c8 <EnableMotor+0xa8>
		status = osOK;
 80010c4:	2300      	movs	r3, #0
 80010c6:	637b      	str	r3, [r7, #52]	; 0x34
	}

	return status;
 80010c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3738      	adds	r7, #56	; 0x38
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <SetPositionMode>:
	status = WriteCommand(command, data, rx_buffer_write);

	return status;
}

osStatus_t SetPositionMode(int8_t position_mode){
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b08a      	sub	sp, #40	; 0x28
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
	osStatus_t status = osError;
 80010dc:	f04f 33ff 	mov.w	r3, #4294967295
 80010e0:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t data[4];
	uint8_t rx_buffer_write[20];


	/* Position Mode Register */
	command[0] = 0x60;
 80010e2:	2360      	movs	r3, #96	; 0x60
 80010e4:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x60;
 80010e8:	2360      	movs	r3, #96	; 0x60
 80010ea:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21


	/* Enable Cyclic Sync Position Mode */
	data[0] = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80010f2:	2300      	movs	r3, #0
 80010f4:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80010f6:	2300      	movs	r3, #0
 80010f8:	77bb      	strb	r3, [r7, #30]
	data[3] = position_mode;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	77fb      	strb	r3, [r7, #31]

	status = WriteCommand(command, data, rx_buffer_write);
 80010fe:	f107 0208 	add.w	r2, r7, #8
 8001102:	f107 011c 	add.w	r1, r7, #28
 8001106:	f107 0320 	add.w	r3, r7, #32
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f900 	bl	8001310 <WriteCommand>
 8001110:	6278      	str	r0, [r7, #36]	; 0x24

	return status;
 8001112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001114:	4618      	mov	r0, r3
 8001116:	3728      	adds	r7, #40	; 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <MoveToPositionPPM>:

	return status;

}

osStatus_t MoveToPositionPPM(int32_t position){
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	osStatus_t status = osError;
 8001124:	f04f 33ff 	mov.w	r3, #4294967295
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Write Desired Position */
	command[0] = 0x60;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x7A;
 8001130:	237a      	movs	r3, #122	; 0x7a
 8001132:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = (position >> 24) & 0xFF;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	0e1b      	lsrs	r3, r3, #24
 800113a:	b2db      	uxtb	r3, r3
 800113c:	773b      	strb	r3, [r7, #28]
	data[1] = (position >> 16) & 0xFF;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	141b      	asrs	r3, r3, #16
 8001142:	b2db      	uxtb	r3, r3
 8001144:	777b      	strb	r3, [r7, #29]
	data[2] = (position >> 8) & 0xFF;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	121b      	asrs	r3, r3, #8
 800114a:	b2db      	uxtb	r3, r3
 800114c:	77bb      	strb	r3, [r7, #30]
	data[3] = position & 0xFF;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	b2db      	uxtb	r3, r3
 8001152:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001154:	f107 0208 	add.w	r2, r7, #8
 8001158:	f107 011c 	add.w	r1, r7, #28
 800115c:	f107 0320 	add.w	r3, r7, #32
 8001160:	4618      	mov	r0, r3
 8001162:	f000 f8d5 	bl	8001310 <WriteCommand>
 8001166:	6278      	str	r0, [r7, #36]	; 0x24

	/* Goto Position */
	command[0] = 0x60;
 8001168:	2360      	movs	r3, #96	; 0x60
 800116a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800116e:	2340      	movs	r3, #64	; 0x40
 8001170:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 8001174:	2300      	movs	r3, #0
 8001176:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 8001178:	2300      	movs	r3, #0
 800117a:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 800117c:	2300      	movs	r3, #0
 800117e:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x3F;
 8001180:	233f      	movs	r3, #63	; 0x3f
 8001182:	77fb      	strb	r3, [r7, #31]


	status = WriteCommand(command, data, rx_buffer_write);
 8001184:	f107 0208 	add.w	r2, r7, #8
 8001188:	f107 011c 	add.w	r1, r7, #28
 800118c:	f107 0320 	add.w	r3, r7, #32
 8001190:	4618      	mov	r0, r3
 8001192:	f000 f8bd 	bl	8001310 <WriteCommand>
 8001196:	6278      	str	r0, [r7, #36]	; 0x24

	/* Disabe Movement Again */
	command[0] = 0x60;
 8001198:	2360      	movs	r3, #96	; 0x60
 800119a:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x40;
 800119e:	2340      	movs	r3, #64	; 0x40
 80011a0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	data[0] = 0x00;
 80011a4:	2300      	movs	r3, #0
 80011a6:	773b      	strb	r3, [r7, #28]
	data[1] = 0x00;
 80011a8:	2300      	movs	r3, #0
 80011aa:	777b      	strb	r3, [r7, #29]
	data[2] = 0x00;
 80011ac:	2300      	movs	r3, #0
 80011ae:	77bb      	strb	r3, [r7, #30]
	data[3] = 0x0F;
 80011b0:	230f      	movs	r3, #15
 80011b2:	77fb      	strb	r3, [r7, #31]

	/* Goto Position */
	status = WriteCommand(command, data, rx_buffer_write);
 80011b4:	f107 0208 	add.w	r2, r7, #8
 80011b8:	f107 011c 	add.w	r1, r7, #28
 80011bc:	f107 0320 	add.w	r3, r7, #32
 80011c0:	4618      	mov	r0, r3
 80011c2:	f000 f8a5 	bl	8001310 <WriteCommand>
 80011c6:	6278      	str	r0, [r7, #36]	; 0x24


	return status;
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <ConfigurePPM>:

osStatus_t ConfigurePPM(int32_t velocity, int32_t acceleration, int32_t deceleration){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b08c      	sub	sp, #48	; 0x30
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	60f8      	str	r0, [r7, #12]
 80011da:	60b9      	str	r1, [r7, #8]
 80011dc:	607a      	str	r2, [r7, #4]

	osStatus_t status = osError;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t command[2];
	uint8_t data[4];
	uint8_t rx_buffer_write[20];

	/* Configure desired Velocity to be reached during Position Change */
	command[0] = 0x60;
 80011e4:	2360      	movs	r3, #96	; 0x60
 80011e6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x81;
 80011ea:	2381      	movs	r3, #129	; 0x81
 80011ec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (velocity >> 24) & 0xFF;
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	0e1b      	lsrs	r3, r3, #24
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (velocity >> 16) & 0xFF;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	141b      	asrs	r3, r3, #16
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (velocity >> 8) & 0xFF;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	121b      	asrs	r3, r3, #8
 8001208:	b2db      	uxtb	r3, r3
 800120a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = velocity & 0xFF;
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	b2db      	uxtb	r3, r3
 8001212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 8001216:	f107 0210 	add.w	r2, r7, #16
 800121a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800121e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001222:	4618      	mov	r0, r3
 8001224:	f000 f874 	bl	8001310 <WriteCommand>
 8001228:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 800122a:	2360      	movs	r3, #96	; 0x60
 800122c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x83;
 8001230:	2383      	movs	r3, #131	; 0x83
 8001232:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (acceleration >> 24) & 0xFF;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	0e1b      	lsrs	r3, r3, #24
 800123a:	b2db      	uxtb	r3, r3
 800123c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (acceleration >> 16) & 0xFF;
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	141b      	asrs	r3, r3, #16
 8001244:	b2db      	uxtb	r3, r3
 8001246:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (acceleration >> 8) & 0xFF;
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	121b      	asrs	r3, r3, #8
 800124e:	b2db      	uxtb	r3, r3
 8001250:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = acceleration & 0xFF;
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 800125c:	f107 0210 	add.w	r2, r7, #16
 8001260:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001264:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f851 	bl	8001310 <WriteCommand>
 800126e:	62f8      	str	r0, [r7, #44]	; 0x2c

	/* Configure desired acceleration to be reached during Position Change */
	command[0] = 0x60;
 8001270:	2360      	movs	r3, #96	; 0x60
 8001272:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	command[1] = 0x84;
 8001276:	2384      	movs	r3, #132	; 0x84
 8001278:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

	data[0] = (deceleration >> 24) & 0xFF;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	0e1b      	lsrs	r3, r3, #24
 8001280:	b2db      	uxtb	r3, r3
 8001282:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	data[1] = (deceleration >> 16) & 0xFF;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	141b      	asrs	r3, r3, #16
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	data[2] = (deceleration >> 8) & 0xFF;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	121b      	asrs	r3, r3, #8
 8001294:	b2db      	uxtb	r3, r3
 8001296:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	data[3] = deceleration & 0xFF;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	status = WriteCommand(command, data, rx_buffer_write);
 80012a2:	f107 0210 	add.w	r2, r7, #16
 80012a6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f82e 	bl	8001310 <WriteCommand>
 80012b4:	62f8      	str	r0, [r7, #44]	; 0x2c

	return status;
 80012b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3730      	adds	r7, #48	; 0x30
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <GetPosition>:

osStatus_t GetPosition(int32_t *position){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08a      	sub	sp, #40	; 0x28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]

	osStatus_t status = osError;
 80012c8:	f04f 33ff 	mov.w	r3, #4294967295
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t command[2];
	uint8_t rx_buffer_read[20];

	/* Register where the Current Position is written */
	command[0] = 0x60;
 80012ce:	2360      	movs	r3, #96	; 0x60
 80012d0:	f887 3020 	strb.w	r3, [r7, #32]
	command[1] = 0x64;
 80012d4:	2364      	movs	r3, #100	; 0x64
 80012d6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

	status = ReadCommand(command, rx_buffer_read);
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	f107 0320 	add.w	r3, r7, #32
 80012e2:	4611      	mov	r1, r2
 80012e4:	4618      	mov	r0, r3
 80012e6:	f000 f8bb 	bl	8001460 <ReadCommand>
 80012ea:	6278      	str	r0, [r7, #36]	; 0x24

	*position = rx_buffer_read[8] +
 80012ec:	7d3b      	ldrb	r3, [r7, #20]
 80012ee:	461a      	mov	r2, r3
			(rx_buffer_read[9] << 8) +
 80012f0:	7d7b      	ldrb	r3, [r7, #21]
 80012f2:	021b      	lsls	r3, r3, #8
	*position = rx_buffer_read[8] +
 80012f4:	441a      	add	r2, r3
			(rx_buffer_read[10] << 16) +
 80012f6:	7dbb      	ldrb	r3, [r7, #22]
 80012f8:	041b      	lsls	r3, r3, #16
			(rx_buffer_read[9] << 8) +
 80012fa:	441a      	add	r2, r3
			(rx_buffer_read[11] << 24);
 80012fc:	7dfb      	ldrb	r3, [r7, #23]
 80012fe:	061b      	lsls	r3, r3, #24
			(rx_buffer_read[10] << 16) +
 8001300:	441a      	add	r2, r3
	*position = rx_buffer_read[8] +
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	601a      	str	r2, [r3, #0]

	return status;
 8001306:	6a7b      	ldr	r3, [r7, #36]	; 0x24


}
 8001308:	4618      	mov	r0, r3
 800130a:	3728      	adds	r7, #40	; 0x28
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <WriteCommand>:

osStatus_t WriteCommand(uint8_t *command, uint8_t *data, uint8_t *rx_buffer){
 8001310:	b5b0      	push	{r4, r5, r7, lr}
 8001312:	b092      	sub	sp, #72	; 0x48
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
	osStatus_t status = osError;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	647b      	str	r3, [r7, #68]	; 0x44

	uint8_t byte_stream_write[14] = { 0 };
 8001322:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	819a      	strh	r2, [r3, #12]

	uint8_t dma_buffer[20] = { 0 };
 8001330:	f107 0320 	add.w	r3, r7, #32
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

	byte_stream_write[0] = 0x90;			// DLE
 8001340:	2390      	movs	r3, #144	; 0x90
 8001342:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_write[1] = 0x02;			// STX
 8001346:	2302      	movs	r3, #2
 8001348:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_write[2] = 0x68;			// Write Object
 800134c:	2368      	movs	r3, #104	; 0x68
 800134e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_write[3] = 0x04;			// Length of Data in Words
 8001352:	2304      	movs	r3, #4
 8001354:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	byte_stream_write[4] = 0x01;			// Node ID
 8001358:	2301      	movs	r3, #1
 800135a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_write[5] = command[1];		// Index Low Byte
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	785b      	ldrb	r3, [r3, #1]
 8001362:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	byte_stream_write[6] = command[0];		// Index High byte
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	byte_stream_write[7] = 0x00;			// Subindex of object
 800136e:	2300      	movs	r3, #0
 8001370:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	byte_stream_write[8] = data[3];			// Data - low byte
 8001374:	68bb      	ldr	r3, [r7, #8]
 8001376:	78db      	ldrb	r3, [r3, #3]
 8001378:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	byte_stream_write[9] = data[2];			// Data
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	789b      	ldrb	r3, [r3, #2]
 8001380:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	byte_stream_write[10] = data[1];		// Data
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	785b      	ldrb	r3, [r3, #1]
 8001388:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	byte_stream_write[11] = data[0];		// Data - high byte
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* CRC Calculation */
	uint8_t crc_data_array[10] = { 0 };
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	811a      	strh	r2, [r3, #8]
	memcpy(crc_data_array, &byte_stream_write[2], 10*sizeof(*byte_stream_write));
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	f107 0236 	add.w	r2, r7, #54	; 0x36
 80013a8:	6810      	ldr	r0, [r2, #0]
 80013aa:	6851      	ldr	r1, [r2, #4]
 80013ac:	c303      	stmia	r3!, {r0, r1}
 80013ae:	8912      	ldrh	r2, [r2, #8]
 80013b0:	801a      	strh	r2, [r3, #0]

	uint16_t crc_calc = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	crc_calc = calculateCRC(crc_data_array, 10);
 80013b8:	f107 0314 	add.w	r3, r7, #20
 80013bc:	210a      	movs	r1, #10
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fdda 	bl	8000f78 <calculateCRC>
 80013c4:	4603      	mov	r3, r0
 80013c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

	byte_stream_write[12] = crc_calc & 0xFF;;				// CRC low byte
 80013ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	byte_stream_write[13] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 80013d4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80013d8:	0a1b      	lsrs	r3, r3, #8
 80013da:	b29b      	uxth	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41


	HAL_UART_Transmit(&huart4, byte_stream_write, 14, 20);
 80013e2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80013e6:	2314      	movs	r3, #20
 80013e8:	220e      	movs	r2, #14
 80013ea:	481c      	ldr	r0, [pc, #112]	; (800145c <WriteCommand+0x14c>)
 80013ec:	f00c faf8 	bl	800d9e0 <HAL_UART_Transmit>

	HAL_UART_DMAResume(&huart4);
 80013f0:	481a      	ldr	r0, [pc, #104]	; (800145c <WriteCommand+0x14c>)
 80013f2:	f00c fd01 	bl	800ddf8 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	2214      	movs	r2, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4817      	ldr	r0, [pc, #92]	; (800145c <WriteCommand+0x14c>)
 8001400:	f00c fc22 	bl	800dc48 <HAL_UART_Receive_DMA>
	osDelay(3);
 8001404:	2003      	movs	r0, #3
 8001406:	f014 fc71 	bl	8015cec <osDelay>
	HAL_UART_DMAStop(&huart4);
 800140a:	4814      	ldr	r0, [pc, #80]	; (800145c <WriteCommand+0x14c>)
 800140c:	f00c fd3a 	bl	800de84 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	461d      	mov	r5, r3
 8001414:	f107 0420 	add.w	r4, r7, #32
 8001418:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800141a:	6028      	str	r0, [r5, #0]
 800141c:	6069      	str	r1, [r5, #4]
 800141e:	60aa      	str	r2, [r5, #8]
 8001420:	60eb      	str	r3, [r5, #12]
 8001422:	6820      	ldr	r0, [r4, #0]
 8001424:	6128      	str	r0, [r5, #16]

	/* Check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	3307      	adds	r3, #7
 800142a:	781a      	ldrb	r2, [r3, #0]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3306      	adds	r3, #6
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	4313      	orrs	r3, r2
 8001434:	b2da      	uxtb	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	3305      	adds	r3, #5
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	4313      	orrs	r3, r2
 800143e:	b2da      	uxtb	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3304      	adds	r3, #4
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	4313      	orrs	r3, r2
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <WriteCommand+0x142>
		status = osOK;
 800144e:	2300      	movs	r3, #0
 8001450:	647b      	str	r3, [r7, #68]	; 0x44
	}

	return status;
 8001452:	6c7b      	ldr	r3, [r7, #68]	; 0x44

}
 8001454:	4618      	mov	r0, r3
 8001456:	3748      	adds	r7, #72	; 0x48
 8001458:	46bd      	mov	sp, r7
 800145a:	bdb0      	pop	{r4, r5, r7, pc}
 800145c:	20017e78 	.word	0x20017e78

08001460 <ReadCommand>:

osStatus_t ReadCommand(uint8_t *command, uint8_t *rx_buffer){
 8001460:	b580      	push	{r7, lr}
 8001462:	b090      	sub	sp, #64	; 0x40
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	6039      	str	r1, [r7, #0]
	osStatus_t status = osError;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	63fb      	str	r3, [r7, #60]	; 0x3c

	uint8_t byte_stream_read[10];

	uint8_t dma_buffer[30] = { 0 };
 8001470:	f107 0310 	add.w	r3, r7, #16
 8001474:	221e      	movs	r2, #30
 8001476:	2100      	movs	r1, #0
 8001478:	4618      	mov	r0, r3
 800147a:	f019 f874 	bl	801a566 <memset>

	byte_stream_read[0] = 0x90;				// DLE
 800147e:	2390      	movs	r3, #144	; 0x90
 8001480:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	byte_stream_read[1] = 0x02;				// STX
 8001484:	2302      	movs	r3, #2
 8001486:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	byte_stream_read[2] = 0x60;				// Read Object
 800148a:	2360      	movs	r3, #96	; 0x60
 800148c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	byte_stream_read[3] = 0x02;				// Length of stuff sent
 8001490:	2302      	movs	r3, #2
 8001492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	byte_stream_read[4] = 0x01;				// Node ID
 8001496:	2301      	movs	r3, #1
 8001498:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	byte_stream_read[5] = command[1];		// Index Low Byte
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	785b      	ldrb	r3, [r3, #1]
 80014a0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	byte_stream_read[6] = command[0];		// Index High byte
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	byte_stream_read[7] = 0x00;				// Subindex of object
 80014ac:	2300      	movs	r3, #0
 80014ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/* CRC data array */
	uint8_t crc_data_array[6] = { 0 };
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	809a      	strh	r2, [r3, #4]
	memcpy(crc_data_array, &byte_stream_read[2], 6*sizeof(*byte_stream_read));
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	f107 0232 	add.w	r2, r7, #50	; 0x32
 80014c4:	6810      	ldr	r0, [r2, #0]
 80014c6:	6018      	str	r0, [r3, #0]
 80014c8:	8892      	ldrh	r2, [r2, #4]
 80014ca:	809a      	strh	r2, [r3, #4]

	uint16_t crc_calc = 0;
 80014cc:	2300      	movs	r3, #0
 80014ce:	877b      	strh	r3, [r7, #58]	; 0x3a
	crc_calc = calculateCRC(crc_data_array, 6);
 80014d0:	f107 0308 	add.w	r3, r7, #8
 80014d4:	2106      	movs	r1, #6
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd4e 	bl	8000f78 <calculateCRC>
 80014dc:	4603      	mov	r3, r0
 80014de:	877b      	strh	r3, [r7, #58]	; 0x3a

	byte_stream_read[8] = crc_calc & 0xFF;;				// CRC low byte
 80014e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	byte_stream_read[9] = (crc_calc >> 8) & 0xFF;;		// CRC high byte
 80014e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80014ea:	0a1b      	lsrs	r3, r3, #8
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39


	HAL_UART_Transmit(&huart4, byte_stream_read, 10, 10);
 80014f4:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80014f8:	230a      	movs	r3, #10
 80014fa:	220a      	movs	r2, #10
 80014fc:	481a      	ldr	r0, [pc, #104]	; (8001568 <ReadCommand+0x108>)
 80014fe:	f00c fa6f 	bl	800d9e0 <HAL_UART_Transmit>

	HAL_UART_DMAResume(&huart4);
 8001502:	4819      	ldr	r0, [pc, #100]	; (8001568 <ReadCommand+0x108>)
 8001504:	f00c fc78 	bl	800ddf8 <HAL_UART_DMAResume>
	HAL_UART_Receive_DMA(&huart4, dma_buffer, 20);
 8001508:	f107 0310 	add.w	r3, r7, #16
 800150c:	2214      	movs	r2, #20
 800150e:	4619      	mov	r1, r3
 8001510:	4815      	ldr	r0, [pc, #84]	; (8001568 <ReadCommand+0x108>)
 8001512:	f00c fb99 	bl	800dc48 <HAL_UART_Receive_DMA>
	osDelay(3);
 8001516:	2003      	movs	r0, #3
 8001518:	f014 fbe8 	bl	8015cec <osDelay>
	HAL_UART_DMAStop(&huart4);
 800151c:	4812      	ldr	r0, [pc, #72]	; (8001568 <ReadCommand+0x108>)
 800151e:	f00c fcb1 	bl	800de84 <HAL_UART_DMAStop>
	memcpy(rx_buffer, dma_buffer, 20);
 8001522:	f107 0310 	add.w	r3, r7, #16
 8001526:	2214      	movs	r2, #20
 8001528:	4619      	mov	r1, r3
 800152a:	6838      	ldr	r0, [r7, #0]
 800152c:	f019 f810 	bl	801a550 <memcpy>


	/* check if we have an error code */
	if((rx_buffer[7] | rx_buffer[6] | rx_buffer[5] | rx_buffer[4]) == 0){
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	3307      	adds	r3, #7
 8001534:	781a      	ldrb	r2, [r3, #0]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3306      	adds	r3, #6
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4313      	orrs	r3, r2
 800153e:	b2da      	uxtb	r2, r3
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	3305      	adds	r3, #5
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	4313      	orrs	r3, r2
 8001548:	b2da      	uxtb	r2, r3
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	3304      	adds	r3, #4
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	4313      	orrs	r3, r2
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <ReadCommand+0xfc>
		status = osOK;
 8001558:	2300      	movs	r3, #0
 800155a:	63fb      	str	r3, [r7, #60]	; 0x3c
	}
	return status;
 800155c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

}
 800155e:	4618      	mov	r0, r3
 8001560:	3740      	adds	r7, #64	; 0x40
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20017e78 	.word	0x20017e78

0800156c <_gps_search_start>:

#include "GPS/gps.h"

const uint8_t ubxgga[HEADER_SIZE] = {'G','G','A'};

uint32_t _gps_search_start(uint8_t *arr){
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 8001574:	2303      	movs	r3, #3
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	e01c      	b.n	80015b4 <_gps_search_start+0x48>
			{
			  if(arr[i-2] == ubxgga[0] && arr[i-1] == ubxgga[1] && arr[i] == ubxgga[2])
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	3b02      	subs	r3, #2
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2247      	movs	r2, #71	; 0x47
 8001586:	4293      	cmp	r3, r2
 8001588:	d111      	bne.n	80015ae <_gps_search_start+0x42>
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	3b01      	subs	r3, #1
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	4413      	add	r3, r2
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2247      	movs	r2, #71	; 0x47
 8001596:	4293      	cmp	r3, r2
 8001598:	d109      	bne.n	80015ae <_gps_search_start+0x42>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2241      	movs	r2, #65	; 0x41
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d102      	bne.n	80015ae <_gps_search_start+0x42>
			    return i+1;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	3301      	adds	r3, #1
 80015ac:	e008      	b.n	80015c0 <_gps_search_start+0x54>
	for(int i=3; i<BUFFER_SIZE-DATA_SIZE; i++)
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f240 32a1 	movw	r2, #929	; 0x3a1
 80015ba:	4293      	cmp	r3, r2
 80015bc:	dddd      	ble.n	800157a <_gps_search_start+0xe>
			}
	return 0;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	0000      	movs	r0, r0
	...

080015d0 <_parse_data>:

uint8_t _parse_data (struct gps_device *dev, uint8_t* data){
 80015d0:	b5b0      	push	{r4, r5, r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]


	if (data[22] == 'N' || data[22] == 'S'){
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	3316      	adds	r3, #22
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b4e      	cmp	r3, #78	; 0x4e
 80015e2:	d005      	beq.n	80015f0 <_parse_data+0x20>
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	3316      	adds	r3, #22
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b53      	cmp	r3, #83	; 0x53
 80015ec:	f040 81e7 	bne.w	80019be <_parse_data+0x3ee>

		// ASCII to decimal conversion
		for(int i = 0; i < DATA_SIZE; i++) data[i] = data[i]-48;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	e00c      	b.n	8001610 <_parse_data+0x40>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	4413      	add	r3, r2
 80015fc:	781a      	ldrb	r2, [r3, #0]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	6839      	ldr	r1, [r7, #0]
 8001602:	440b      	add	r3, r1
 8001604:	3a30      	subs	r2, #48	; 0x30
 8001606:	b2d2      	uxtb	r2, r2
 8001608:	701a      	strb	r2, [r3, #0]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	3301      	adds	r3, #1
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	2b45      	cmp	r3, #69	; 0x45
 8001614:	ddef      	ble.n	80015f6 <_parse_data+0x26>


		dev->data.hour = data[1]*10 + data[2];
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	3301      	adds	r3, #1
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4613      	mov	r3, r2
 8001620:	009b      	lsls	r3, r3, #2
 8001622:	4413      	add	r3, r2
 8001624:	005b      	lsls	r3, r3, #1
 8001626:	461a      	mov	r2, r3
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	3302      	adds	r3, #2
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	461a      	mov	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	609a      	str	r2, [r3, #8]
		dev->data.minute = data[3]*10 + data[4];
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	3303      	adds	r3, #3
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	461a      	mov	r2, r3
 800163e:	4613      	mov	r3, r2
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	4413      	add	r3, r2
 8001644:	005b      	lsls	r3, r3, #1
 8001646:	461a      	mov	r2, r3
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	3304      	adds	r3, #4
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	4413      	add	r3, r2
 8001650:	461a      	mov	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	60da      	str	r2, [r3, #12]
		dev->data.second = data[5]*10 + data[6];
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	3305      	adds	r3, #5
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	461a      	mov	r2, r3
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	3306      	adds	r3, #6
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	4413      	add	r3, r2
 8001670:	461a      	mov	r2, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	611a      	str	r2, [r3, #16]

		dev->data.lat_deg = data[11]*10 +data[12];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	330b      	adds	r3, #11
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	461a      	mov	r2, r3
 800167e:	0092      	lsls	r2, r2, #2
 8001680:	4413      	add	r3, r2
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	b2da      	uxtb	r2, r3
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	330c      	adds	r3, #12
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	b2da      	uxtb	r2, r3
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	751a      	strb	r2, [r3, #20]
		dev->data.lat_decimal = (data[13]*1e7 + data[14]*1e6 + data[16]*1e5 + data[17]*1e4 + data[18]*1e3 + data[19]*1e2 + data[20])/6;
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	330d      	adds	r3, #13
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7fe ff62 	bl	8000564 <__aeabi_i2d>
 80016a0:	a3cb      	add	r3, pc, #812	; (adr r3, 80019d0 <_parse_data+0x400>)
 80016a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a6:	f7fe ffc7 	bl	8000638 <__aeabi_dmul>
 80016aa:	4603      	mov	r3, r0
 80016ac:	460c      	mov	r4, r1
 80016ae:	4625      	mov	r5, r4
 80016b0:	461c      	mov	r4, r3
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	330e      	adds	r3, #14
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff53 	bl	8000564 <__aeabi_i2d>
 80016be:	a3c6      	add	r3, pc, #792	; (adr r3, 80019d8 <_parse_data+0x408>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffb8 	bl	8000638 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4620      	mov	r0, r4
 80016ce:	4629      	mov	r1, r5
 80016d0:	f7fe fdfc 	bl	80002cc <__adddf3>
 80016d4:	4603      	mov	r3, r0
 80016d6:	460c      	mov	r4, r1
 80016d8:	4625      	mov	r5, r4
 80016da:	461c      	mov	r4, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	3310      	adds	r3, #16
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe ff3e 	bl	8000564 <__aeabi_i2d>
 80016e8:	a3bd      	add	r3, pc, #756	; (adr r3, 80019e0 <_parse_data+0x410>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe ffa3 	bl	8000638 <__aeabi_dmul>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4620      	mov	r0, r4
 80016f8:	4629      	mov	r1, r5
 80016fa:	f7fe fde7 	bl	80002cc <__adddf3>
 80016fe:	4603      	mov	r3, r0
 8001700:	460c      	mov	r4, r1
 8001702:	4625      	mov	r5, r4
 8001704:	461c      	mov	r4, r3
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	3311      	adds	r3, #17
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff29 	bl	8000564 <__aeabi_i2d>
 8001712:	a3b5      	add	r3, pc, #724	; (adr r3, 80019e8 <_parse_data+0x418>)
 8001714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001718:	f7fe ff8e 	bl	8000638 <__aeabi_dmul>
 800171c:	4602      	mov	r2, r0
 800171e:	460b      	mov	r3, r1
 8001720:	4620      	mov	r0, r4
 8001722:	4629      	mov	r1, r5
 8001724:	f7fe fdd2 	bl	80002cc <__adddf3>
 8001728:	4603      	mov	r3, r0
 800172a:	460c      	mov	r4, r1
 800172c:	4625      	mov	r5, r4
 800172e:	461c      	mov	r4, r3
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3312      	adds	r3, #18
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7fe ff14 	bl	8000564 <__aeabi_i2d>
 800173c:	f04f 0200 	mov.w	r2, #0
 8001740:	4bab      	ldr	r3, [pc, #684]	; (80019f0 <_parse_data+0x420>)
 8001742:	f7fe ff79 	bl	8000638 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4620      	mov	r0, r4
 800174c:	4629      	mov	r1, r5
 800174e:	f7fe fdbd 	bl	80002cc <__adddf3>
 8001752:	4603      	mov	r3, r0
 8001754:	460c      	mov	r4, r1
 8001756:	4625      	mov	r5, r4
 8001758:	461c      	mov	r4, r3
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	3313      	adds	r3, #19
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe feff 	bl	8000564 <__aeabi_i2d>
 8001766:	f04f 0200 	mov.w	r2, #0
 800176a:	4ba2      	ldr	r3, [pc, #648]	; (80019f4 <_parse_data+0x424>)
 800176c:	f7fe ff64 	bl	8000638 <__aeabi_dmul>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7fe fda8 	bl	80002cc <__adddf3>
 800177c:	4603      	mov	r3, r0
 800177e:	460c      	mov	r4, r1
 8001780:	4625      	mov	r5, r4
 8001782:	461c      	mov	r4, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	3314      	adds	r3, #20
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	4618      	mov	r0, r3
 800178c:	f7fe feea 	bl	8000564 <__aeabi_i2d>
 8001790:	4602      	mov	r2, r0
 8001792:	460b      	mov	r3, r1
 8001794:	4620      	mov	r0, r4
 8001796:	4629      	mov	r1, r5
 8001798:	f7fe fd98 	bl	80002cc <__adddf3>
 800179c:	4603      	mov	r3, r0
 800179e:	460c      	mov	r4, r1
 80017a0:	4618      	mov	r0, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	f04f 0200 	mov.w	r2, #0
 80017a8:	4b93      	ldr	r3, [pc, #588]	; (80019f8 <_parse_data+0x428>)
 80017aa:	f7ff f86f 	bl	800088c <__aeabi_ddiv>
 80017ae:	4603      	mov	r3, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	4618      	mov	r0, r3
 80017b4:	4621      	mov	r1, r4
 80017b6:	f7ff f9ef 	bl	8000b98 <__aeabi_d2uiz>
 80017ba:	4602      	mov	r2, r0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	619a      	str	r2, [r3, #24]

		dev->data.lon_deg = data[25]*10 +data[26];
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3319      	adds	r3, #25
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	461a      	mov	r2, r3
 80017c8:	0092      	lsls	r2, r2, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	b2da      	uxtb	r2, r3
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	331a      	adds	r3, #26
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	4413      	add	r3, r2
 80017d8:	b2da      	uxtb	r2, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	771a      	strb	r2, [r3, #28]
		dev->data.lon_decimal = (data[27]*1e7 + data[28]*1e6 + data[30]*1e5 + data[31]*1e4 + data[32]*1e3 + data[33]*1e2 + data[34])/6;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	331b      	adds	r3, #27
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe febd 	bl	8000564 <__aeabi_i2d>
 80017ea:	a379      	add	r3, pc, #484	; (adr r3, 80019d0 <_parse_data+0x400>)
 80017ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f0:	f7fe ff22 	bl	8000638 <__aeabi_dmul>
 80017f4:	4603      	mov	r3, r0
 80017f6:	460c      	mov	r4, r1
 80017f8:	4625      	mov	r5, r4
 80017fa:	461c      	mov	r4, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	331c      	adds	r3, #28
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	4618      	mov	r0, r3
 8001804:	f7fe feae 	bl	8000564 <__aeabi_i2d>
 8001808:	a373      	add	r3, pc, #460	; (adr r3, 80019d8 <_parse_data+0x408>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe ff13 	bl	8000638 <__aeabi_dmul>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe fd57 	bl	80002cc <__adddf3>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	4625      	mov	r5, r4
 8001824:	461c      	mov	r4, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	331e      	adds	r3, #30
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe99 	bl	8000564 <__aeabi_i2d>
 8001832:	a36b      	add	r3, pc, #428	; (adr r3, 80019e0 <_parse_data+0x410>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fefe 	bl	8000638 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4620      	mov	r0, r4
 8001842:	4629      	mov	r1, r5
 8001844:	f7fe fd42 	bl	80002cc <__adddf3>
 8001848:	4603      	mov	r3, r0
 800184a:	460c      	mov	r4, r1
 800184c:	4625      	mov	r5, r4
 800184e:	461c      	mov	r4, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	331f      	adds	r3, #31
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fe84 	bl	8000564 <__aeabi_i2d>
 800185c:	a362      	add	r3, pc, #392	; (adr r3, 80019e8 <_parse_data+0x418>)
 800185e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001862:	f7fe fee9 	bl	8000638 <__aeabi_dmul>
 8001866:	4602      	mov	r2, r0
 8001868:	460b      	mov	r3, r1
 800186a:	4620      	mov	r0, r4
 800186c:	4629      	mov	r1, r5
 800186e:	f7fe fd2d 	bl	80002cc <__adddf3>
 8001872:	4603      	mov	r3, r0
 8001874:	460c      	mov	r4, r1
 8001876:	4625      	mov	r5, r4
 8001878:	461c      	mov	r4, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	3320      	adds	r3, #32
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fe6f 	bl	8000564 <__aeabi_i2d>
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b59      	ldr	r3, [pc, #356]	; (80019f0 <_parse_data+0x420>)
 800188c:	f7fe fed4 	bl	8000638 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4620      	mov	r0, r4
 8001896:	4629      	mov	r1, r5
 8001898:	f7fe fd18 	bl	80002cc <__adddf3>
 800189c:	4603      	mov	r3, r0
 800189e:	460c      	mov	r4, r1
 80018a0:	4625      	mov	r5, r4
 80018a2:	461c      	mov	r4, r3
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	3321      	adds	r3, #33	; 0x21
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe5a 	bl	8000564 <__aeabi_i2d>
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b4f      	ldr	r3, [pc, #316]	; (80019f4 <_parse_data+0x424>)
 80018b6:	f7fe febf 	bl	8000638 <__aeabi_dmul>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	4620      	mov	r0, r4
 80018c0:	4629      	mov	r1, r5
 80018c2:	f7fe fd03 	bl	80002cc <__adddf3>
 80018c6:	4603      	mov	r3, r0
 80018c8:	460c      	mov	r4, r1
 80018ca:	4625      	mov	r5, r4
 80018cc:	461c      	mov	r4, r3
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3322      	adds	r3, #34	; 0x22
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe fe45 	bl	8000564 <__aeabi_i2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	4620      	mov	r0, r4
 80018e0:	4629      	mov	r1, r5
 80018e2:	f7fe fcf3 	bl	80002cc <__adddf3>
 80018e6:	4603      	mov	r3, r0
 80018e8:	460c      	mov	r4, r1
 80018ea:	4618      	mov	r0, r3
 80018ec:	4621      	mov	r1, r4
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	4b41      	ldr	r3, [pc, #260]	; (80019f8 <_parse_data+0x428>)
 80018f4:	f7fe ffca 	bl	800088c <__aeabi_ddiv>
 80018f8:	4603      	mov	r3, r0
 80018fa:	460c      	mov	r4, r1
 80018fc:	4618      	mov	r0, r3
 80018fe:	4621      	mov	r1, r4
 8001900:	f7ff f94a 	bl	8000b98 <__aeabi_d2uiz>
 8001904:	4602      	mov	r2, r0
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	621a      	str	r2, [r3, #32]

		dev->data.fix = data[38];
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

		dev->data.satellite = data[40]*10 + data[41];
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	3328      	adds	r3, #40	; 0x28
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	461a      	mov	r2, r3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4413      	add	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	b2da      	uxtb	r2, r3
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	3329      	adds	r3, #41	; 0x29
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	4413      	add	r3, r2
 800192e:	b2da      	uxtb	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

		dev->data.HDOP = data[43]*100+data[45]*10+data[46];
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	332b      	adds	r3, #43	; 0x2b
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	b29b      	uxth	r3, r3
 800193e:	461a      	mov	r2, r3
 8001940:	0092      	lsls	r2, r2, #2
 8001942:	4413      	add	r3, r2
 8001944:	461a      	mov	r2, r3
 8001946:	0091      	lsls	r1, r2, #2
 8001948:	461a      	mov	r2, r3
 800194a:	460b      	mov	r3, r1
 800194c:	4413      	add	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	b29a      	uxth	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	332d      	adds	r3, #45	; 0x2d
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b29b      	uxth	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	0089      	lsls	r1, r1, #2
 800195e:	440b      	add	r3, r1
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	b29b      	uxth	r3, r3
 8001964:	4413      	add	r3, r2
 8001966:	b29a      	uxth	r2, r3
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	332e      	adds	r3, #46	; 0x2e
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	b29b      	uxth	r3, r3
 8001970:	4413      	add	r3, r2
 8001972:	b29a      	uxth	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	84da      	strh	r2, [r3, #38]	; 0x26

		dev->data.altitude= data[48]*100+data[49]*10+data[50];
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3330      	adds	r3, #48	; 0x30
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4413      	add	r3, r2
 8001986:	461a      	mov	r2, r3
 8001988:	0091      	lsls	r1, r2, #2
 800198a:	461a      	mov	r2, r3
 800198c:	460b      	mov	r3, r1
 800198e:	4413      	add	r3, r2
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	b29a      	uxth	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	3331      	adds	r3, #49	; 0x31
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4619      	mov	r1, r3
 800199e:	0089      	lsls	r1, r1, #2
 80019a0:	440b      	add	r3, r1
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	3332      	adds	r3, #50	; 0x32
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4413      	add	r3, r2
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	851a      	strh	r2, [r3, #40]	; 0x28
	}
	else {
		dev->data.fix = 0;
		return 0;
	}
	return 1;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e004      	b.n	80019c8 <_parse_data+0x3f8>
		dev->data.fix = 0;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		return 0;
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3710      	adds	r7, #16
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bdb0      	pop	{r4, r5, r7, pc}
 80019d0:	00000000 	.word	0x00000000
 80019d4:	416312d0 	.word	0x416312d0
 80019d8:	00000000 	.word	0x00000000
 80019dc:	412e8480 	.word	0x412e8480
 80019e0:	00000000 	.word	0x00000000
 80019e4:	40f86a00 	.word	0x40f86a00
 80019e8:	00000000 	.word	0x00000000
 80019ec:	40c38800 	.word	0x40c38800
 80019f0:	408f4000 	.word	0x408f4000
 80019f4:	40590000 	.word	0x40590000
 80019f8:	40180000 	.word	0x40180000

080019fc <gps_dma_init>:


void gps_dma_init(struct gps_device *dev){
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(dev->uart_bus);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f00c fa3b 	bl	800de84 <HAL_UART_DMAStop>

	HAL_UART_Receive_DMA(dev->uart_bus, gps_data[dev->id], BUFFER_SIZE);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6858      	ldr	r0, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a1c:	fb03 f302 	mul.w	r3, r3, r2
 8001a20:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <gps_dma_init+0x44>)
 8001a22:	4413      	add	r3, r2
 8001a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f00c f90d 	bl	800dc48 <HAL_UART_Receive_DMA>

	HAL_UART_DMAResume(dev->uart_bus);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f00c f9e0 	bl	800ddf8 <HAL_UART_DMAResume>
}
 8001a38:	bf00      	nop
 8001a3a:	3708      	adds	r7, #8
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	20008a20 	.word	0x20008a20

08001a44 <gps_read_sensor>:



uint8_t gps_read_sensor (struct gps_device *dev){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAPause(dev->uart_bus);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00c f97d 	bl	800dd50 <HAL_UART_DMAPause>

	uint32_t data_start = _gps_search_start(gps_data[dev->id]);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a60:	fb03 f302 	mul.w	r3, r3, r2
 8001a64:	4a1a      	ldr	r2, [pc, #104]	; (8001ad0 <gps_read_sensor+0x8c>)
 8001a66:	4413      	add	r3, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fd7f 	bl	800156c <_gps_search_start>
 8001a6e:	60f8      	str	r0, [r7, #12]
	if (data_start > 0) memcpy(gps_gga[dev->id], gps_data[dev->id] + data_start, DATA_SIZE);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d016      	beq.n	8001aa4 <gps_read_sensor+0x60>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	2346      	movs	r3, #70	; 0x46
 8001a7e:	fb03 f302 	mul.w	r3, r3, r2
 8001a82:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <gps_read_sensor+0x90>)
 8001a84:	1898      	adds	r0, r3, r2
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a90:	fb03 f302 	mul.w	r3, r3, r2
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <gps_read_sensor+0x8c>)
 8001a96:	441a      	add	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	2246      	movs	r2, #70	; 0x46
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	f018 fd56 	bl	801a550 <memcpy>

	HAL_UART_DMAResume(dev->uart_bus);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f00c f9a5 	bl	800ddf8 <HAL_UART_DMAResume>

	return _parse_data(dev, gps_gga[dev->id]);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	2346      	movs	r3, #70	; 0x46
 8001ab6:	fb03 f302 	mul.w	r3, r3, r2
 8001aba:	4a06      	ldr	r2, [pc, #24]	; (8001ad4 <gps_read_sensor+0x90>)
 8001abc:	4413      	add	r3, r2
 8001abe:	4619      	mov	r1, r3
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fd85 	bl	80015d0 <_parse_data>
 8001ac6:	4603      	mov	r3, r0
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20008a20 	.word	0x20008a20
 8001ad4:	20008884 	.word	0x20008884

08001ad8 <gps_reset>:


void gps_reset(struct gps_device *dev){
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]

	dev->data.hour = 0;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	609a      	str	r2, [r3, #8]
	dev->data.minute = 0;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
	dev->data.second = 0;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	611a      	str	r2, [r3, #16]

	dev->data.lat_deg = 0;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	751a      	strb	r2, [r3, #20]
	dev->data.lat_decimal = 0;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]

	dev->data.lon_deg = 0;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	771a      	strb	r2, [r3, #28]
	dev->data.lon_decimal = 0;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	621a      	str	r2, [r3, #32]

	dev->data.fix = 0;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	dev->data.satellite = 0;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	dev->data.HDOP = 0;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	84da      	strh	r2, [r3, #38]	; 0x26

	dev->data.altitude= 0;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <init_coeff>:

#include "Sim_Con/controller.h"

/* In this file, all the controller related function as the controller itself will be defined */

void init_coeff(control_data_t *control_data){
 8001b34:	b580      	push	{r7, lr}
 8001b36:	f5ad 7d7a 	sub.w	sp, sp, #1000	; 0x3e8
 8001b3a:	af00      	add	r7, sp, #0
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	6018      	str	r0, [r3, #0]

    const double coeff0[POLY_DEG+1] = {};
 8001b40:	4a27      	ldr	r2, [pc, #156]	; (8001be0 <init_coeff+0xac>)
 8001b42:	f507 733c 	add.w	r3, r7, #752	; 0x2f0
 8001b46:	4611      	mov	r1, r2
 8001b48:	22f8      	movs	r2, #248	; 0xf8
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f018 fd00 	bl	801a550 <memcpy>
    const double coeff1[POLY_DEG+1] = {};
 8001b50:	f507 73fc 	add.w	r3, r7, #504	; 0x1f8
 8001b54:	4a23      	ldr	r2, [pc, #140]	; (8001be4 <init_coeff+0xb0>)
 8001b56:	4618      	mov	r0, r3
 8001b58:	4611      	mov	r1, r2
 8001b5a:	23f8      	movs	r3, #248	; 0xf8
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f018 fcf7 	bl	801a550 <memcpy>
    const double coeff2[POLY_DEG+1] = {};
 8001b62:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <init_coeff+0xb4>)
 8001b68:	4618      	mov	r0, r3
 8001b6a:	4611      	mov	r1, r2
 8001b6c:	23f8      	movs	r3, #248	; 0xf8
 8001b6e:	461a      	mov	r2, r3
 8001b70:	f018 fcee 	bl	801a550 <memcpy>
    const double coeff3[POLY_DEG+1] = {};
 8001b74:	f107 0308 	add.w	r3, r7, #8
 8001b78:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <init_coeff+0xb8>)
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	23f8      	movs	r3, #248	; 0xf8
 8001b80:	461a      	mov	r2, r3
 8001b82:	f018 fce5 	bl	801a550 <memcpy>

    memcpy(control_data->poly_coeff[0], coeff0, sizeof(coeff0));
 8001b86:	1d3b      	adds	r3, r7, #4
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3340      	adds	r3, #64	; 0x40
 8001b8c:	f507 713c 	add.w	r1, r7, #752	; 0x2f0
 8001b90:	22f8      	movs	r2, #248	; 0xf8
 8001b92:	4618      	mov	r0, r3
 8001b94:	f018 fcdc 	bl	801a550 <memcpy>
    memcpy(control_data->poly_coeff[1], coeff1, sizeof(coeff1));
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8001ba0:	f507 71fc 	add.w	r1, r7, #504	; 0x1f8
 8001ba4:	22f8      	movs	r2, #248	; 0xf8
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f018 fcd2 	bl	801a550 <memcpy>
    memcpy(control_data->poly_coeff[2], coeff2, sizeof(coeff2));
 8001bac:	1d3b      	adds	r3, r7, #4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001bb4:	f507 7180 	add.w	r1, r7, #256	; 0x100
 8001bb8:	22f8      	movs	r2, #248	; 0xf8
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f018 fcc8 	bl	801a550 <memcpy>
    memcpy(control_data->poly_coeff[3], coeff3, sizeof(coeff3));
 8001bc0:	1d3b      	adds	r3, r7, #4
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f503 734a 	add.w	r3, r3, #808	; 0x328
 8001bc8:	f107 0108 	add.w	r1, r7, #8
 8001bcc:	22f8      	movs	r2, #248	; 0xf8
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f018 fcbe 	bl	801a550 <memcpy>
}
 8001bd4:	bf00      	nop
 8001bd6:	f507 777a 	add.w	r7, r7, #1000	; 0x3e8
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	0801cad0 	.word	0x0801cad0
 8001be4:	0801cbc8 	.word	0x0801cbc8
 8001be8:	0801ccc0 	.word	0x0801ccc0
 8001bec:	0801cdb8 	.word	0x0801cdb8

08001bf0 <compute_control_input>:

void compute_control_input(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 8001bf0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001bf4:	ed2d 8b02 	vpush	{d8}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
 8001bfe:	6039      	str	r1, [r7, #0]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b04      	cmp	r3, #4
 8001c06:	f040 80cd 	bne.w	8001da4 <compute_control_input+0x1b4>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	785b      	ldrb	r3, [r3, #1]
    if ((flight_phase_detection->flight_phase == COASTING) &&
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d004      	beq.n	8001c1c <compute_control_input+0x2c>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	785b      	ldrb	r3, [r3, #1]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	f040 80c4 	bne.w	8001da4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7fe fcb1 	bl	8000588 <__aeabi_f2d>
        ((flight_phase_detection->mach_regime == SUBSONIC) || (flight_phase_detection->mach_regime == TRANSONIC)) &&
 8001c26:	a36c      	add	r3, pc, #432	; (adr r3, 8001dd8 <compute_control_input+0x1e8>)
 8001c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c2c:	f7fe ff76 	bl	8000b1c <__aeabi_dcmplt>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80b6 	beq.w	8001da4 <compute_control_input+0x1b4>
        (flight_phase_detection->mach_number < CONTROL_ACTIVATION_MACH_NUMBER) && (!control_data->apogee_approach_phase)) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001c3e:	f083 0301 	eor.w	r3, r3, #1
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 80ad 	beq.w	8001da4 <compute_control_input+0x1b4>

        /* caluclate Gains and Reference velocity for given altitude AGL */
        evaluate_polyfit(control_data);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 f913 	bl	8001e76 <evaluate_polyfit>

        /* Calculate Velocity Error */
        compute_reference_error(control_data);
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	f000 fa15 	bl	8002080 <compute_reference_error>

        /* Calculate Control Input */
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8001c5c:	461d      	mov	r5, r3
 8001c5e:	f084 4600 	eor.w	r6, r4, #2147483648	; 0x80000000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc8e 	bl	8000588 <__aeabi_f2d>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	460c      	mov	r4, r1
 8001c70:	461a      	mov	r2, r3
 8001c72:	4623      	mov	r3, r4
 8001c74:	4628      	mov	r0, r5
 8001c76:	4631      	mov	r1, r6
 8001c78:	f7fe fcde 	bl	8000638 <__aeabi_dmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	460c      	mov	r4, r1
 8001c80:	4698      	mov	r8, r3
 8001c82:	46a1      	mov	r9, r4
                - control_data->gains[1] * control_data->integrated_error
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc7a 	bl	8000588 <__aeabi_f2d>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	4620      	mov	r0, r4
 8001c9a:	4629      	mov	r1, r5
 8001c9c:	f7fe fccc 	bl	8000638 <__aeabi_dmul>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	460c      	mov	r4, r1
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4623      	mov	r3, r4
 8001ca8:	4640      	mov	r0, r8
 8001caa:	4649      	mov	r1, r9
 8001cac:	f7fe fb0c 	bl	80002c8 <__aeabi_dsub>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	460c      	mov	r4, r1
 8001cb4:	4698      	mov	r8, r3
 8001cb6:	46a1      	mov	r9, r4
                - control_data->gains[2] * (control_data->control_input - OPT_TRAJ_CONTROL_INPUT)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7fe fc60 	bl	8000588 <__aeabi_f2d>
 8001cc8:	a345      	add	r3, pc, #276	; (adr r3, 8001de0 <compute_control_input+0x1f0>)
 8001cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cce:	f7fe fafb 	bl	80002c8 <__aeabi_dsub>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4620      	mov	r0, r4
 8001cd8:	4629      	mov	r1, r5
 8001cda:	f7fe fcad 	bl	8000638 <__aeabi_dmul>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	460c      	mov	r4, r1
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	4623      	mov	r3, r4
 8001ce6:	4640      	mov	r0, r8
 8001ce8:	4649      	mov	r1, r9
 8001cea:	f7fe faed 	bl	80002c8 <__aeabi_dsub>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460c      	mov	r4, r1
 8001cf2:	4625      	mov	r5, r4
 8001cf4:	461c      	mov	r4, r3
                + control_data->control_input);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7fe fc44 	bl	8000588 <__aeabi_f2d>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	4620      	mov	r0, r4
 8001d06:	4629      	mov	r1, r5
 8001d08:	f7fe fae0 	bl	80002cc <__adddf3>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	460c      	mov	r4, r1
        control_data->control_input = (float)(-control_data->gains[0] * control_data->reference_error
 8001d10:	4618      	mov	r0, r3
 8001d12:	4621      	mov	r1, r4
 8001d14:	f7fe ff60 	bl	8000bd8 <__aeabi_d2f>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]

        /* Check that the control input is between 0 and 1 */
        control_data->control_input = fmaxf(0, fminf(control_data->control_input, 1));
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	edd3 7a00 	vldr	s15, [r3]
 8001d24:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001d28:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2c:	f019 f888 	bl	801ae40 <fminf>
 8001d30:	eef0 7a40 	vmov.f32	s15, s0
 8001d34:	eef0 0a67 	vmov.f32	s1, s15
 8001d38:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8001dd0 <compute_control_input+0x1e0>
 8001d3c:	f019 f865 	bl	801ae0a <fmaxf>
 8001d40:	eef0 7a40 	vmov.f32	s15, s0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	edc3 7a00 	vstr	s15, [r3]

        /* Compute boundaries for the antiwindup */
        compute_antiwindup_boundaries(control_data);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f944 	bl	8001fd8 <compute_antiwindup_boundaries>

        /* Compute the integrated error */
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	ed93 8a06 	vldr	s16, [r3, #24]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	ed93 7a02 	vldr	s14, [r3, #8]
        + DELTA_T * control_data->reference_error, control_data->upperboundary_aw));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d62:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8001dd4 <compute_control_input+0x1e4>
 8001d66:	ee67 7aa6 	vmul.f32	s15, s15, s13
        control_data->integrated_error = fmaxf(control_data->lowerboundary_aw, fminf(control_data->integrated_error
 8001d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	ed93 7a07 	vldr	s14, [r3, #28]
 8001d74:	eef0 0a47 	vmov.f32	s1, s14
 8001d78:	eeb0 0a67 	vmov.f32	s0, s15
 8001d7c:	f019 f860 	bl	801ae40 <fminf>
 8001d80:	eef0 7a40 	vmov.f32	s15, s0
 8001d84:	eef0 0a67 	vmov.f32	s1, s15
 8001d88:	eeb0 0a48 	vmov.f32	s0, s16
 8001d8c:	f019 f83d 	bl	801ae0a <fmaxf>
 8001d90:	eef0 7a40 	vmov.f32	s15, s0
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	edc3 7a02 	vstr	s15, [r3, #8]

        /* Check if the apogee approach phase was entered */
        check_apogee_approach_phase(control_data, flight_phase_detection);
 8001d9a:	6839      	ldr	r1, [r7, #0]
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 f993 	bl	80020c8 <check_apogee_approach_phase>
        if (control_data->apogee_approach_phase == true) {
            evaluate_polyfit(control_data);
            compute_reference_error(control_data);
        }
    }
}
 8001da2:	e00d      	b.n	8001dc0 <compute_control_input+0x1d0>
        control_data_reset(control_data);
 8001da4:	6878      	ldr	r0, [r7, #4]
 8001da6:	f000 f81f 	bl	8001de8 <control_data_reset>
        if (control_data->apogee_approach_phase == true) {
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <compute_control_input+0x1d0>
            evaluate_polyfit(control_data);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f85e 	bl	8001e76 <evaluate_polyfit>
            compute_reference_error(control_data);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f960 	bl	8002080 <compute_reference_error>
}
 8001dc0:	bf00      	nop
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	ecbd 8b02 	vpop	{d8}
 8001dca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001dce:	bf00      	nop
 8001dd0:	00000000 	.word	0x00000000
 8001dd4:	3c23d70a 	.word	0x3c23d70a
 8001dd8:	9999999a 	.word	0x9999999a
 8001ddc:	3fe19999 	.word	0x3fe19999
 8001de0:	e41d1d5e 	.word	0xe41d1d5e
 8001de4:	3fdfc917 	.word	0x3fdfc917

08001de8 <control_data_reset>:


void control_data_reset(control_data_t *control_data){
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
    control_data->control_input = 0;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
    control_data->reference_error = 0;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	f04f 0200 	mov.w	r2, #0
 8001dfe:	605a      	str	r2, [r3, #4]
    control_data->integrated_error = 0;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	609a      	str	r2, [r3, #8]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <control_data_init>:

void control_data_init(control_data_t *control_data){
 8001e14:	b590      	push	{r4, r7, lr}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
    control_data_reset(control_data);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffe3 	bl	8001de8 <control_data_reset>

    control_data->lowerboundary_aw = 0;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f04f 0200 	mov.w	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
    control_data->upperboundary_aw = 0;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	61da      	str	r2, [r3, #28]

    control_data->safety_counter = 0;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	841a      	strh	r2, [r3, #32]
    control_data->apogee_approach_phase = false;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

    init_coeff(control_data);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff fe77 	bl	8001b34 <init_coeff>

    for(int i = 0; i < NUM_GAINS; i++){
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	e00d      	b.n	8001e68 <control_data_init+0x54>
        control_data->gains[i] = 0;
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	3305      	adds	r3, #5
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	441a      	add	r2, r3
 8001e56:	f04f 0300 	mov.w	r3, #0
 8001e5a:	f04f 0400 	mov.w	r4, #0
 8001e5e:	e9c2 3400 	strd	r3, r4, [r2]
    for(int i = 0; i < NUM_GAINS; i++){
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	ddee      	ble.n	8001e4c <control_data_init+0x38>
    }
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	bd90      	pop	{r4, r7, pc}

08001e76 <evaluate_polyfit>:

/* Does the Polynomial Calculation of the reference velocity */
void evaluate_polyfit(control_data_t *control_data) {
 8001e76:	b5b0      	push	{r4, r5, r7, lr}
 8001e78:	b08a      	sub	sp, #40	; 0x28
 8001e7a:	af00      	add	r7, sp, #0
 8001e7c:	6078      	str	r0, [r7, #4]
    /* For Speed */
    double x_placeholder = 0;
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	f04f 0400 	mov.w	r4, #0
 8001e86:	e9c7 3402 	strd	r3, r4, [r7, #8]

    /* Reset gains */
    for (int i = 0; i < NUM_GAINS; i++) {
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e8e:	e00d      	b.n	8001eac <evaluate_polyfit+0x36>
        control_data->gains[i] = 0;
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	3305      	adds	r3, #5
 8001e96:	00db      	lsls	r3, r3, #3
 8001e98:	441a      	add	r2, r3
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	f04f 0400 	mov.w	r4, #0
 8001ea2:	e9c2 3400 	strd	r3, r4, [r2]
    for (int i = 0; i < NUM_GAINS; i++) {
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
 8001eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	ddee      	ble.n	8001e90 <evaluate_polyfit+0x1a>
    }

    /* Reset ref_velocity_placeholder*/
    double ref_velocity_placeholder = 0;
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f04f 0400 	mov.w	r4, #0
 8001eba:	e9c7 3406 	strd	r3, r4, [r7, #24]

    /* For loop */
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e07b      	b.n	8001fbc <evaluate_polyfit+0x146>
        x_placeholder = pow(control_data->sf_ref_altitude_AGL, (double)(POLY_DEG - i));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fb5d 	bl	8000588 <__aeabi_f2d>
 8001ece:	4604      	mov	r4, r0
 8001ed0:	460d      	mov	r5, r1
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f1c3 031e 	rsb	r3, r3, #30
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb43 	bl	8000564 <__aeabi_i2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	ec43 2b11 	vmov	d1, r2, r3
 8001ee6:	ec45 4b10 	vmov	d0, r4, r5
 8001eea:	f018 ffe1 	bl	801aeb0 <pow>
 8001eee:	ed87 0b02 	vstr	d0, [r7, #8]
        control_data->gains[0] += control_data->poly_coeff[0][i] * x_placeholder;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	3308      	adds	r3, #8
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f0a:	f7fe fb95 	bl	8000638 <__aeabi_dmul>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4620      	mov	r0, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	f7fe f9d9 	bl	80002cc <__adddf3>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	460c      	mov	r4, r1
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
        control_data->gains[1] += control_data->poly_coeff[1][i] * x_placeholder;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8001f2a:	687a      	ldr	r2, [r7, #4]
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	3327      	adds	r3, #39	; 0x27
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4413      	add	r3, r2
 8001f34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f3c:	f7fe fb7c 	bl	8000638 <__aeabi_dmul>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4620      	mov	r0, r4
 8001f46:	4629      	mov	r1, r5
 8001f48:	f7fe f9c0 	bl	80002cc <__adddf3>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	460c      	mov	r4, r1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
        control_data->gains[2] += control_data->poly_coeff[2][i] * x_placeholder;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3346      	adds	r3, #70	; 0x46
 8001f62:	00db      	lsls	r3, r3, #3
 8001f64:	4413      	add	r3, r2
 8001f66:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f6a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f6e:	f7fe fb63 	bl	8000638 <__aeabi_dmul>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe f9a7 	bl	80002cc <__adddf3>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	460c      	mov	r4, r1
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
        ref_velocity_placeholder += (control_data->poly_coeff[3][i] * x_placeholder);
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	3365      	adds	r3, #101	; 0x65
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f9a:	f7fe fb4d 	bl	8000638 <__aeabi_dmul>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	460c      	mov	r4, r1
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001faa:	f7fe f98f 	bl	80002cc <__adddf3>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	460c      	mov	r4, r1
 8001fb2:	e9c7 3406 	strd	r3, r4, [r7, #24]
    for (int i = 0; i < POLY_DEG + 1; ++i) {
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	617b      	str	r3, [r7, #20]
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	2b1e      	cmp	r3, #30
 8001fc0:	dd80      	ble.n	8001ec4 <evaluate_polyfit+0x4e>
    }
    control_data->ref_velocity = (float)ref_velocity_placeholder;
 8001fc2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001fc6:	f7fe fe07 	bl	8000bd8 <__aeabi_d2f>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	615a      	str	r2, [r3, #20]
}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	; 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bdb0      	pop	{r4, r5, r7, pc}

08001fd8 <compute_antiwindup_boundaries>:

void compute_antiwindup_boundaries(control_data_t *control_data) {
 8001fd8:	b590      	push	{r4, r7, lr}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
    control_data->upperboundary_aw = fmaxf(M_AW *
            (CONTROL_DEACTIVATION_ALTITUDE_AGL - control_data->sf_ref_altitude_AGL), MIN_BOUNDARAY_AW);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7fe facf 	bl	8000588 <__aeabi_f2d>
 8001fea:	4603      	mov	r3, r0
 8001fec:	460c      	mov	r4, r1
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4623      	mov	r3, r4
 8001ff2:	a11f      	add	r1, pc, #124	; (adr r1, 8002070 <compute_antiwindup_boundaries+0x98>)
 8001ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ff8:	f7fe f966 	bl	80002c8 <__aeabi_dsub>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	460c      	mov	r4, r1
 8002000:	4618      	mov	r0, r3
 8002002:	4621      	mov	r1, r4
    control_data->upperboundary_aw = fmaxf(M_AW *
 8002004:	a31c      	add	r3, pc, #112	; (adr r3, 8002078 <compute_antiwindup_boundaries+0xa0>)
 8002006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800200a:	f7fe fb15 	bl	8000638 <__aeabi_dmul>
 800200e:	4603      	mov	r3, r0
 8002010:	460c      	mov	r4, r1
 8002012:	4618      	mov	r0, r3
 8002014:	4621      	mov	r1, r4
 8002016:	f7fe fddf 	bl	8000bd8 <__aeabi_d2f>
 800201a:	4603      	mov	r3, r0
 800201c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002020:	ee00 3a10 	vmov	s0, r3
 8002024:	f018 fef1 	bl	801ae0a <fmaxf>
 8002028:	eef0 7a40 	vmov.f32	s15, s0
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	edc3 7a07 	vstr	s15, [r3, #28]
    if (CONTROL_DEACTIVATION_ALTITUDE_AGL < control_data->sf_ref_altitude_AGL) {
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe faa6 	bl	8000588 <__aeabi_f2d>
 800203c:	a30c      	add	r3, pc, #48	; (adr r3, 8002070 <compute_antiwindup_boundaries+0x98>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe fd89 	bl	8000b58 <__aeabi_dcmpgt>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <compute_antiwindup_boundaries+0x7c>
        control_data->upperboundary_aw = 0;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	61da      	str	r2, [r3, #28]
    }
    control_data->lowerboundary_aw = - control_data->upperboundary_aw;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	edd3 7a07 	vldr	s15, [r3, #28]
 800205a:	eef1 7a67 	vneg.f32	s15, s15
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	bd90      	pop	{r4, r7, pc}
 800206c:	f3af 8000 	nop.w
 8002070:	7417f6de 	.word	0x7417f6de
 8002074:	4095dc93 	.word	0x4095dc93
 8002078:	47ae147b 	.word	0x47ae147b
 800207c:	3f747ae1 	.word	0x3f747ae1

08002080 <compute_reference_error>:

void compute_reference_error(control_data_t *control_data) {
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
    if (control_data->ref_velocity < 0) {
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	edd3 7a05 	vldr	s15, [r3, #20]
 800208e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002092:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002096:	d504      	bpl.n	80020a2 <compute_reference_error+0x22>
        control_data->reference_error = control_data->sf_velocity;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	691a      	ldr	r2, [r3, #16]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	605a      	str	r2, [r3, #4]
    }
    else{
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
    }
}
 80020a0:	e00a      	b.n	80020b8 <compute_reference_error+0x38>
        control_data->reference_error = control_data->sf_velocity - control_data->ref_velocity;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	ed93 7a04 	vldr	s14, [r3, #16]
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	edd3 7a05 	vldr	s15, [r3, #20]
 80020ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	0000      	movs	r0, r0
	...

080020c8 <check_apogee_approach_phase>:

void check_apogee_approach_phase(control_data_t *control_data, flight_phase_detection_t *flight_phase_detection){
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
    /* if n positive samples are counted, the apogee approach phase is entered */
    if (flight_phase_detection->mach_number < CONTROL_DEACTIVATION_MACH_NUMBER) {
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa56 	bl	8000588 <__aeabi_f2d>
 80020dc:	a30c      	add	r3, pc, #48	; (adr r3, 8002110 <check_apogee_approach_phase+0x48>)
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f7fe fd1b 	bl	8000b1c <__aeabi_dcmplt>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d005      	beq.n	80020f8 <check_apogee_approach_phase+0x30>
        control_data->safety_counter += 1;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	8c1b      	ldrh	r3, [r3, #32]
 80020f0:	3301      	adds	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	841a      	strh	r2, [r3, #32]
    }

    /* Check if the apogee approach phase should be entered*/
    if (control_data->safety_counter >= SAFETY_COUNTER_THRESHOLD) {
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	8c1b      	ldrh	r3, [r3, #32]
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d903      	bls.n	8002108 <check_apogee_approach_phase+0x40>
        control_data->apogee_approach_phase = true;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    }
}
 8002108:	bf00      	nop
 800210a:	3708      	adds	r7, #8
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	9999999a 	.word	0x9999999a
 8002114:	3fb99999 	.word	0x3fb99999

08002118 <init_env>:
#include "Sim_Con/env.h"

void init_env(env_t *env) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
	/* init constants */
	calibrate_env(env, PRESSURE_REFERENCE, TEMPERATURE_REFERENCE);
 8002120:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8002124:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002140 <init_env+0x28>
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f000 f80d 	bl	8002148 <calibrate_env>
	update_env(env, TEMPERATURE_REFERENCE);
 800212e:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f000 f82c 	bl	8002190 <update_env>
}
 8002138:	bf00      	nop
 800213a:	3708      	adds	r7, #8
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	47c5e680 	.word	0x47c5e680
 8002144:	00000000 	.word	0x00000000

08002148 <calibrate_env>:

void calibrate_env(env_t *env, float p_g, float T_g) {
 8002148:	b590      	push	{r4, r7, lr}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	ed87 0a02 	vstr	s0, [r7, #8]
 8002154:	edc7 0a01 	vstr	s1, [r7, #4]
	env->T_g = T_g + T_0; // input is temperature in °C
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f7fe fa15 	bl	8000588 <__aeabi_f2d>
 800215e:	a30a      	add	r3, pc, #40	; (adr r3, 8002188 <calibrate_env+0x40>)
 8002160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002164:	f7fe f8b2 	bl	80002cc <__adddf3>
 8002168:	4603      	mov	r3, r0
 800216a:	460c      	mov	r4, r1
 800216c:	4618      	mov	r0, r3
 800216e:	4621      	mov	r1, r4
 8002170:	f7fe fd32 	bl	8000bd8 <__aeabi_d2f>
 8002174:	4602      	mov	r2, r0
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	605a      	str	r2, [r3, #4]
	env->p_g = p_g; //
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	68ba      	ldr	r2, [r7, #8]
 800217e:	601a      	str	r2, [r3, #0]
}
 8002180:	bf00      	nop
 8002182:	3714      	adds	r7, #20
 8002184:	46bd      	mov	sp, r7
 8002186:	bd90      	pop	{r4, r7, pc}
 8002188:	66666666 	.word	0x66666666
 800218c:	40711266 	.word	0x40711266

08002190 <update_env>:

void update_env(env_t *env, float T) {
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	ed87 0a00 	vstr	s0, [r7]
	env->T = T + T_0; // input is temperature in °C and property is temperature in °K
 800219c:	6838      	ldr	r0, [r7, #0]
 800219e:	f7fe f9f3 	bl	8000588 <__aeabi_f2d>
 80021a2:	a317      	add	r3, pc, #92	; (adr r3, 8002200 <update_env+0x70>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe f890 	bl	80002cc <__adddf3>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	4618      	mov	r0, r3
 80021b2:	4621      	mov	r1, r4
 80021b4:	f7fe fd10 	bl	8000bd8 <__aeabi_d2f>
 80021b8:	4602      	mov	r2, r0
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	609a      	str	r2, [r3, #8]
	env->C = powf(GAMMA * R_0 * env->T, 0.5);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f9e0 	bl	8000588 <__aeabi_f2d>
 80021c8:	a30f      	add	r3, pc, #60	; (adr r3, 8002208 <update_env+0x78>)
 80021ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ce:	f7fe fa33 	bl	8000638 <__aeabi_dmul>
 80021d2:	4603      	mov	r3, r0
 80021d4:	460c      	mov	r4, r1
 80021d6:	4618      	mov	r0, r3
 80021d8:	4621      	mov	r1, r4
 80021da:	f7fe fcfd 	bl	8000bd8 <__aeabi_d2f>
 80021de:	4603      	mov	r3, r0
 80021e0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80021e4:	ee00 3a10 	vmov	s0, r3
 80021e8:	f019 f82c 	bl	801b244 <powf>
 80021ec:	eef0 7a40 	vmov.f32	s15, s0
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd90      	pop	{r4, r7, pc}
 80021fe:	bf00      	nop
 8002200:	66666666 	.word	0x66666666
 8002204:	40711266 	.word	0x40711266
 8002208:	8c1557b7 	.word	0x8c1557b7
 800220c:	40791e2f 	.word	0x40791e2f

08002210 <mach_number>:

float mach_number(env_t *env, float V_x) {
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	ed87 0a00 	vstr	s0, [r7]
	float mach_number = fabsf(V_x) / env->C;
 800221c:	edd7 7a00 	vldr	s15, [r7]
 8002220:	eef0 6ae7 	vabs.f32	s13, s15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	ed93 7a03 	vldr	s14, [r3, #12]
 800222a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800222e:	edc7 7a03 	vstr	s15, [r7, #12]
	return mach_number;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	ee07 3a90 	vmov	s15, r3
}
 8002238:	eeb0 0a67 	vmov.f32	s0, s15
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <pressure2altitudeAGL>:

void pressure2altitudeAGL(env_t *env, int n, float p[n], bool p_active[n], float h[n]) {
 8002248:	b5b0      	push	{r4, r5, r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	e043      	b.n	80022e4 <pressure2altitudeAGL+0x9c>
		if (p_active[i]) {
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	4413      	add	r3, r2
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d03a      	beq.n	80022de <pressure2altitudeAGL+0x96>
			/* original implementation */
			h[i] = env->T_g / T_GRAD * (1 - powf(p[i] / env->p_g, R_0 * T_GRAD / GRAVITATION));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	4618      	mov	r0, r3
 800226e:	f7fe f98b 	bl	8000588 <__aeabi_f2d>
 8002272:	a322      	add	r3, pc, #136	; (adr r3, 80022fc <pressure2altitudeAGL+0xb4>)
 8002274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002278:	f7fe fb08 	bl	800088c <__aeabi_ddiv>
 800227c:	4603      	mov	r3, r0
 800227e:	460c      	mov	r4, r1
 8002280:	4625      	mov	r5, r4
 8002282:	461c      	mov	r4, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	4413      	add	r3, r2
 800228c:	ed93 7a00 	vldr	s14, [r3]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800229a:	eddf 0a17 	vldr	s1, [pc, #92]	; 80022f8 <pressure2altitudeAGL+0xb0>
 800229e:	eeb0 0a66 	vmov.f32	s0, s13
 80022a2:	f018 ffcf 	bl	801b244 <powf>
 80022a6:	eeb0 7a40 	vmov.f32	s14, s0
 80022aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80022ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022b2:	ee17 0a90 	vmov	r0, s15
 80022b6:	f7fe f967 	bl	8000588 <__aeabi_f2d>
 80022ba:	4602      	mov	r2, r0
 80022bc:	460b      	mov	r3, r1
 80022be:	4620      	mov	r0, r4
 80022c0:	4629      	mov	r1, r5
 80022c2:	f7fe f9b9 	bl	8000638 <__aeabi_dmul>
 80022c6:	4603      	mov	r3, r0
 80022c8:	460c      	mov	r4, r1
 80022ca:	4618      	mov	r0, r3
 80022cc:	4621      	mov	r1, r4
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80022d4:	18d4      	adds	r4, r2, r3
 80022d6:	f7fe fc7f 	bl	8000bd8 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < n; i++) {
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbb7      	blt.n	800225c <pressure2altitudeAGL+0x14>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// h[i] = env->T_g / T_GRAD * (1 - expf(logf(p[i] / env->p_g) * R_0 * env->T_grad / GRAVITATION);
		}
	}
}
 80022ec:	bf00      	nop
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bdb0      	pop	{r4, r5, r7, pc}
 80022f4:	f3af 8000 	nop.w
 80022f8:	3e42c4dc 	.word	0x3e42c4dc
 80022fc:	76c8b439 	.word	0x76c8b439
 8002300:	3f7a9fbe 	.word	0x3f7a9fbe
 8002304:	00000000 	.word	0x00000000

08002308 <altitudeAGL2pressure>:

void altitudeAGL2pressure(env_t *env, int n, float h[n], bool h_active[n], float p[n]) {
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	ed2d 8b02 	vpush	{d8}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < n; i++) {
 800231a:	2300      	movs	r3, #0
 800231c:	617b      	str	r3, [r7, #20]
 800231e:	e047      	b.n	80023b0 <altitudeAGL2pressure+0xa8>
		if (h_active[i]) {
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	4413      	add	r3, r2
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d03e      	beq.n	80023aa <altitudeAGL2pressure+0xa2>
			/* original implementation */
			p[i] = env->p_g * powf((1 - T_GRAD * h[i] / env->T_g), GRAVITATION / (R_0 * T_GRAD));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	ed93 8a00 	vldr	s16, [r3]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe f923 	bl	8000588 <__aeabi_f2d>
 8002342:	a323      	add	r3, pc, #140	; (adr r3, 80023d0 <altitudeAGL2pressure+0xc8>)
 8002344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002348:	f7fe f976 	bl	8000638 <__aeabi_dmul>
 800234c:	4603      	mov	r3, r0
 800234e:	460c      	mov	r4, r1
 8002350:	4625      	mov	r5, r4
 8002352:	461c      	mov	r4, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	4618      	mov	r0, r3
 800235a:	f7fe f915 	bl	8000588 <__aeabi_f2d>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4620      	mov	r0, r4
 8002364:	4629      	mov	r1, r5
 8002366:	f7fe fa91 	bl	800088c <__aeabi_ddiv>
 800236a:	4603      	mov	r3, r0
 800236c:	460c      	mov	r4, r1
 800236e:	461a      	mov	r2, r3
 8002370:	4623      	mov	r3, r4
 8002372:	f04f 0000 	mov.w	r0, #0
 8002376:	4914      	ldr	r1, [pc, #80]	; (80023c8 <altitudeAGL2pressure+0xc0>)
 8002378:	f7fd ffa6 	bl	80002c8 <__aeabi_dsub>
 800237c:	4603      	mov	r3, r0
 800237e:	460c      	mov	r4, r1
 8002380:	4618      	mov	r0, r3
 8002382:	4621      	mov	r1, r4
 8002384:	f7fe fc28 	bl	8000bd8 <__aeabi_d2f>
 8002388:	4603      	mov	r3, r0
 800238a:	eddf 0a10 	vldr	s1, [pc, #64]	; 80023cc <altitudeAGL2pressure+0xc4>
 800238e:	ee00 3a10 	vmov	s0, r3
 8002392:	f018 ff57 	bl	801b244 <powf>
 8002396:	eef0 7a40 	vmov.f32	s15, s0
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80023a0:	4413      	add	r3, r2
 80023a2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80023a6:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i < n; i++) {
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	3301      	adds	r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	dbb3      	blt.n	8002320 <altitudeAGL2pressure+0x18>
			/* adapted implementation which can possibly speed up calculation and should have the same results */
			// p[i] = env->p_g * expf(logf(1 - env->T_grad * h[i] / env->T_g) * GRAVITATION / (R_0 * env->T_grad));
		}
	}
}
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	ecbd 8b02 	vpop	{d8}
 80023c2:	bdb0      	pop	{r4, r5, r7, pc}
 80023c4:	f3af 8000 	nop.w
 80023c8:	3ff00000 	.word	0x3ff00000
 80023cc:	40a83d87 	.word	0x40a83d87
 80023d0:	76c8b439 	.word	0x76c8b439
 80023d4:	3f7a9fbe 	.word	0x3f7a9fbe

080023d8 <altitude_gradient>:

float altitude_gradient(env_t *env, float p) {
 80023d8:	b5b0      	push	{r4, r5, r7, lr}
 80023da:	b084      	sub	sp, #16
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
 80023e0:	ed87 0a00 	vstr	s0, [r7]
	/* computes the altitude gradient per infitesimal change in pressure (dh/dp) at a specified pressure */
	/* original implementation */
	float h_grad = -R_0 * env->T_g / (GRAVITATION * env->p_g) * powf(p / env->p_g, R_0 * T_GRAD / GRAVITATION - 1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7fe f8cd 	bl	8000588 <__aeabi_f2d>
 80023ee:	a323      	add	r3, pc, #140	; (adr r3, 800247c <altitude_gradient+0xa4>)
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f7fe f920 	bl	8000638 <__aeabi_dmul>
 80023f8:	4603      	mov	r3, r0
 80023fa:	460c      	mov	r4, r1
 80023fc:	4625      	mov	r5, r4
 80023fe:	461c      	mov	r4, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7fe f8bf 	bl	8000588 <__aeabi_f2d>
 800240a:	a31e      	add	r3, pc, #120	; (adr r3, 8002484 <altitude_gradient+0xac>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	f7fe f912 	bl	8000638 <__aeabi_dmul>
 8002414:	4602      	mov	r2, r0
 8002416:	460b      	mov	r3, r1
 8002418:	4620      	mov	r0, r4
 800241a:	4629      	mov	r1, r5
 800241c:	f7fe fa36 	bl	800088c <__aeabi_ddiv>
 8002420:	4603      	mov	r3, r0
 8002422:	460c      	mov	r4, r1
 8002424:	4625      	mov	r5, r4
 8002426:	461c      	mov	r4, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	edd3 7a00 	vldr	s15, [r3]
 800242e:	ed97 7a00 	vldr	s14, [r7]
 8002432:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002436:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002478 <altitude_gradient+0xa0>
 800243a:	eeb0 0a66 	vmov.f32	s0, s13
 800243e:	f018 ff01 	bl	801b244 <powf>
 8002442:	ee10 3a10 	vmov	r3, s0
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f89e 	bl	8000588 <__aeabi_f2d>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fe f8f0 	bl	8000638 <__aeabi_dmul>
 8002458:	4603      	mov	r3, r0
 800245a:	460c      	mov	r4, r1
 800245c:	4618      	mov	r0, r3
 800245e:	4621      	mov	r1, r4
 8002460:	f7fe fbba 	bl	8000bd8 <__aeabi_d2f>
 8002464:	4603      	mov	r3, r0
 8002466:	60fb      	str	r3, [r7, #12]
	/* adapted implementation which can possibly speed up calculation and should have the same results */
	// float h_grad = - R_0 * env->T_g / (GRAVITATION * env->p_g) * expf(logf(p / env->p_g) * (R_0 * env->T_grad / GRAVITATION - 1));
	return h_grad;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	ee07 3a90 	vmov	s15, r3
}
 800246e:	eeb0 0a67 	vmov.f32	s0, s15
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bdb0      	pop	{r4, r5, r7, pc}
 8002478:	bf4f4ec9 	.word	0xbf4f4ec9
 800247c:	640f3ea7 	.word	0x640f3ea7
 8002480:	c071f0fd 	.word	0xc071f0fd
 8002484:	51eb851f 	.word	0x51eb851f
 8002488:	40239eb8 	.word	0x40239eb8
 800248c:	00000000 	.word	0x00000000

08002490 <detect_flight_phase>:
#include "Sim_Con/flight_phase_detection.h"

void detect_flight_phase(flight_phase_detection_t *flight_phase_detection, state_est_data_t *state_est_data, env_t *env)
{   
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]


    /* determine state transition events */
    switch (flight_phase_detection->flight_phase) {
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	2b04      	cmp	r3, #4
 80024a4:	f200 80a6 	bhi.w	80025f4 <detect_flight_phase+0x164>
 80024a8:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <detect_flight_phase+0x20>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024c5 	.word	0x080024c5
 80024b4:	080025f5 	.word	0x080025f5
 80024b8:	08002513 	.word	0x08002513
 80024bc:	0800255d 	.word	0x0800255d
 80024c0:	080025a7 	.word	0x080025a7
        case IDLE:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 > 20) {
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024d0:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8002690 <detect_flight_phase+0x200>
 80024d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024d8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80024dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	dc00      	bgt.n	80024e8 <detect_flight_phase+0x58>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = THRUSTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80024e6:	e087      	b.n	80025f8 <detect_flight_phase+0x168>
                flight_phase_detection->num_samples_positive += 1;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	3301      	adds	r3, #1
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	b25a      	sxtb	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002500:	2b03      	cmp	r3, #3
 8002502:	dd79      	ble.n	80025f8 <detect_flight_phase+0x168>
                    flight_phase_detection->flight_phase = THRUSTING;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2203      	movs	r2, #3
 8002508:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	721a      	strb	r2, [r3, #8]
        break;
 8002510:	e072      	b.n	80025f8 <detect_flight_phase+0x168>

        case THRUSTING:
            if (((float)(state_est_data->acceleration_rocket[0])) / 1000 < 0) {
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	ee07 3a90 	vmov	s15, r3
 800251a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251e:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8002690 <detect_flight_phase+0x200>
 8002522:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002526:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800252a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800252e:	d400      	bmi.n	8002532 <detect_flight_phase+0xa2>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = COASTING;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 8002530:	e064      	b.n	80025fc <detect_flight_phase+0x16c>
                flight_phase_detection->num_samples_positive += 1;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3301      	adds	r3, #1
 800253c:	b2db      	uxtb	r3, r3
 800253e:	b25a      	sxtb	r2, r3
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800254a:	2b03      	cmp	r3, #3
 800254c:	dd56      	ble.n	80025fc <detect_flight_phase+0x16c>
                    flight_phase_detection->flight_phase = COASTING;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2204      	movs	r2, #4
 8002552:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2200      	movs	r2, #0
 8002558:	721a      	strb	r2, [r3, #8]
        break;
 800255a:	e04f      	b.n	80025fc <detect_flight_phase+0x16c>
        
        case COASTING:
            if (((float)(state_est_data->velocity_world[2])) / 1000 < 0) {
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002560:	ee07 3a90 	vmov	s15, r3
 8002564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002568:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002690 <detect_flight_phase+0x200>
 800256c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002570:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002578:	d400      	bmi.n	800257c <detect_flight_phase+0xec>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = DESCENT;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 800257a:	e041      	b.n	8002600 <detect_flight_phase+0x170>
                flight_phase_detection->num_samples_positive += 1;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002582:	b2db      	uxtb	r3, r3
 8002584:	3301      	adds	r3, #1
 8002586:	b2db      	uxtb	r3, r3
 8002588:	b25a      	sxtb	r2, r3
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002594:	2b03      	cmp	r3, #3
 8002596:	dd33      	ble.n	8002600 <detect_flight_phase+0x170>
                    flight_phase_detection->flight_phase = DESCENT;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2205      	movs	r2, #5
 800259c:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	721a      	strb	r2, [r3, #8]
        break;
 80025a4:	e02c      	b.n	8002600 <detect_flight_phase+0x170>

        case DESCENT:
            if (((float)(state_est_data->position_world[2])) / 1000 < 20) {
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	ee07 3a90 	vmov	s15, r3
 80025ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025b2:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002690 <detect_flight_phase+0x200>
 80025b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80025ba:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80025be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c6:	d400      	bmi.n	80025ca <detect_flight_phase+0x13a>
                if (flight_phase_detection->num_samples_positive >= 4) {
                    flight_phase_detection->flight_phase = RECOVERY;
                    flight_phase_detection->num_samples_positive = 0;
                }
            }
        break;
 80025c8:	e01c      	b.n	8002604 <detect_flight_phase+0x174>
                flight_phase_detection->num_samples_positive += 1;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	b25a      	sxtb	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	721a      	strb	r2, [r3, #8]
                if (flight_phase_detection->num_samples_positive >= 4) {
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80025e2:	2b03      	cmp	r3, #3
 80025e4:	dd0e      	ble.n	8002604 <detect_flight_phase+0x174>
                    flight_phase_detection->flight_phase = RECOVERY;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2206      	movs	r2, #6
 80025ea:	701a      	strb	r2, [r3, #0]
                    flight_phase_detection->num_samples_positive = 0;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	721a      	strb	r2, [r3, #8]
        break;
 80025f2:	e007      	b.n	8002604 <detect_flight_phase+0x174>

        default:
        break;
 80025f4:	bf00      	nop
 80025f6:	e006      	b.n	8002606 <detect_flight_phase+0x176>
        break;
 80025f8:	bf00      	nop
 80025fa:	e004      	b.n	8002606 <detect_flight_phase+0x176>
        break;
 80025fc:	bf00      	nop
 80025fe:	e002      	b.n	8002606 <detect_flight_phase+0x176>
        break;
 8002600:	bf00      	nop
 8002602:	e000      	b.n	8002606 <detect_flight_phase+0x176>
        break;
 8002604:	bf00      	nop
    }

    flight_phase_detection->mach_number = mach_number(env, ((float) state_est_data->velocity_rocket[0]) / 1000);
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002612:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002690 <detect_flight_phase+0x200>
 8002616:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800261a:	eeb0 0a66 	vmov.f32	s0, s13
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f7ff fdf6 	bl	8002210 <mach_number>
 8002624:	eef0 7a40 	vmov.f32	s15, s0
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	edc3 7a01 	vstr	s15, [r3, #4]

    /* determine the mach regime */
    if (flight_phase_detection->mach_number >= 1.3) {
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fd ffa8 	bl	8000588 <__aeabi_f2d>
 8002638:	a311      	add	r3, pc, #68	; (adr r3, 8002680 <detect_flight_phase+0x1f0>)
 800263a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800263e:	f7fe fa81 	bl	8000b44 <__aeabi_dcmpge>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <detect_flight_phase+0x1c0>
        flight_phase_detection->mach_regime = SUPERSONIC;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2203      	movs	r2, #3
 800264c:	705a      	strb	r2, [r3, #1]
    {
        flight_phase_detection->mach_regime = SUBSONIC;
    }
    
    
}
 800264e:	e013      	b.n	8002678 <detect_flight_phase+0x1e8>
    } else if (flight_phase_detection->mach_number >= 0.8)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	4618      	mov	r0, r3
 8002656:	f7fd ff97 	bl	8000588 <__aeabi_f2d>
 800265a:	a30b      	add	r3, pc, #44	; (adr r3, 8002688 <detect_flight_phase+0x1f8>)
 800265c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002660:	f7fe fa70 	bl	8000b44 <__aeabi_dcmpge>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <detect_flight_phase+0x1e2>
        flight_phase_detection->mach_regime = TRANSONIC;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2202      	movs	r2, #2
 800266e:	705a      	strb	r2, [r3, #1]
}
 8002670:	e002      	b.n	8002678 <detect_flight_phase+0x1e8>
        flight_phase_detection->mach_regime = SUBSONIC;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	705a      	strb	r2, [r3, #1]
}
 8002678:	bf00      	nop
 800267a:	3710      	adds	r7, #16
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	cccccccd 	.word	0xcccccccd
 8002684:	3ff4cccc 	.word	0x3ff4cccc
 8002688:	9999999a 	.word	0x9999999a
 800268c:	3fe99999 	.word	0x3fe99999
 8002690:	447a0000 	.word	0x447a0000

08002694 <reset_flight_phase_detection>:

void reset_flight_phase_detection(flight_phase_detection_t *flight_phase_detection){
 8002694:	b480      	push	{r7}
 8002696:	b083      	sub	sp, #12
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
    flight_phase_detection->flight_phase = IDLE;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	701a      	strb	r2, [r3, #0]
    flight_phase_detection->mach_regime = SUBSONIC;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	705a      	strb	r2, [r3, #1]
    flight_phase_detection->mach_number = 0.0;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	605a      	str	r2, [r3, #4]
    flight_phase_detection->num_samples_positive = 0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	721a      	strb	r2, [r3, #8]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <reset_kf_state>:
#include "Sim_Con/kf.h"

void reset_kf_state(kf_state_t *kf_state){
 80026c4:	b5b0      	push	{r4, r5, r7, lr}
 80026c6:	b0b0      	sub	sp, #192	; 0xc0
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{1.25E-5}, {5.0E-3}, {0.0}};
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
    } else if (STATE_ESTIMATION_FREQUENCY == 100) { 
        float A_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-0, 1.0E-2, 5.0E-5}, {0, 1.0E-0, 1.0E-2}, {0.0, 0.0, 1.0E-0}};
 80026cc:	4b45      	ldr	r3, [pc, #276]	; (80027e4 <reset_kf_state+0x120>)
 80026ce:	f107 040c 	add.w	r4, r7, #12
 80026d2:	461d      	mov	r5, r3
 80026d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026dc:	682b      	ldr	r3, [r5, #0]
 80026de:	6023      	str	r3, [r4, #0]
        float B_init[NUMBER_STATES][NUMBER_INPUTS] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80026e0:	4a41      	ldr	r2, [pc, #260]	; (80027e8 <reset_kf_state+0x124>)
 80026e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80026e6:	ca07      	ldmia	r2, {r0, r1, r2}
 80026e8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        float G_init[NUMBER_STATES][NUMBER_PROCESS_NOISE] = {{5.0E-5}, {1.0E-2}, {0.0}};
 80026ec:	4a3e      	ldr	r2, [pc, #248]	; (80027e8 <reset_kf_state+0x124>)
 80026ee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80026f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80026f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        memcpy(kf_state->Ad, A_init, sizeof(kf_state->Ad));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f107 010c 	add.w	r1, r7, #12
 80026fe:	2224      	movs	r2, #36	; 0x24
 8002700:	4618      	mov	r0, r3
 8002702:	f017 ff25 	bl	801a550 <memcpy>
        memcpy(kf_state->Bd, B_init, sizeof(kf_state->Bd));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3348      	adds	r3, #72	; 0x48
 800270a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800270e:	220c      	movs	r2, #12
 8002710:	4618      	mov	r0, r3
 8002712:	f017 ff1d 	bl	801a550 <memcpy>
        memcpy(kf_state->Gd, G_init, sizeof(kf_state->Gd));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	3354      	adds	r3, #84	; 0x54
 800271a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800271e:	220c      	movs	r2, #12
 8002720:	4618      	mov	r0, r3
 8002722:	f017 ff15 	bl	801a550 <memcpy>
        memset(kf_state->Ad, 0, sizeof(kf_state->Ad));
        memset(kf_state->Bd, 0, sizeof(kf_state->Bd));
        memset(kf_state->Gd, 0, sizeof(kf_state->Gd));
    }

	float x_est_init[NUMBER_STATES] = {0, 0, 0};
 8002726:	f04f 0300 	mov.w	r3, #0
 800272a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800272e:	f04f 0300 	mov.w	r3, #0
 8002732:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	float P_est_init[NUMBER_STATES][NUMBER_STATES] = {{1.0E-9, 0, 0}, {0, 1.0E-12, 0}, {0, 0, 0}};
 800273e:	4b2b      	ldr	r3, [pc, #172]	; (80027ec <reset_kf_state+0x128>)
 8002740:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8002744:	461d      	mov	r5, r3
 8002746:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002748:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800274c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800274e:	682b      	ldr	r3, [r5, #0]
 8002750:	6023      	str	r3, [r4, #0]

    memcpy(kf_state->x_est, x_est_init, sizeof(x_est_init));
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002758:	f107 01b4 	add.w	r1, r7, #180	; 0xb4
 800275c:	220c      	movs	r2, #12
 800275e:	4618      	mov	r0, r3
 8002760:	f017 fef6 	bl	801a550 <memcpy>
    memcpy(kf_state->P_est, P_est_init, sizeof(P_est_init));
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800276a:	f107 0190 	add.w	r1, r7, #144	; 0x90
 800276e:	2224      	movs	r2, #36	; 0x24
 8002770:	4618      	mov	r0, r3
 8002772:	f017 feed 	bl	801a550 <memcpy>

    memset(kf_state->Q, 0, NUMBER_PROCESS_NOISE*NUMBER_PROCESS_NOISE*sizeof(kf_state->Q[0][0]));
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	33b4      	adds	r3, #180	; 0xb4
 800277a:	2204      	movs	r2, #4
 800277c:	2100      	movs	r1, #0
 800277e:	4618      	mov	r0, r3
 8002780:	f017 fef1 	bl	801a566 <memset>
    memset(kf_state->R, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->R[0][0]));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	33b8      	adds	r3, #184	; 0xb8
 8002788:	2224      	movs	r2, #36	; 0x24
 800278a:	2100      	movs	r1, #0
 800278c:	4618      	mov	r0, r3
 800278e:	f017 feea 	bl	801a566 <memset>

    memset(kf_state->z, 0, NUMBER_MEASUREMENTS*sizeof(kf_state->z[0]));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002798:	220c      	movs	r2, #12
 800279a:	2100      	movs	r1, #0
 800279c:	4618      	mov	r0, r3
 800279e:	f017 fee2 	bl	801a566 <memset>
    memset(kf_state->z_active, false, NUMBER_MEASUREMENTS*sizeof(kf_state->z_active[0]));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80027a8:	2203      	movs	r2, #3
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f017 feda 	bl	801a566 <memset>
    kf_state->num_z_active = 0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

    transpose(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->Ad_T);
 80027ba:	687a      	ldr	r2, [r7, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3324      	adds	r3, #36	; 0x24
 80027c0:	2103      	movs	r1, #3
 80027c2:	2003      	movs	r0, #3
 80027c4:	f000 fd40 	bl	8003248 <transpose>
    transpose(NUMBER_STATES, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Gd_T);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f103 0254 	add.w	r2, r3, #84	; 0x54
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3360      	adds	r3, #96	; 0x60
 80027d2:	2101      	movs	r1, #1
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 fd37 	bl	8003248 <transpose>
}
 80027da:	bf00      	nop
 80027dc:	37c0      	adds	r7, #192	; 0xc0
 80027de:	46bd      	mov	sp, r7
 80027e0:	bdb0      	pop	{r4, r5, r7, pc}
 80027e2:	bf00      	nop
 80027e4:	0801ceb0 	.word	0x0801ceb0
 80027e8:	0801ced4 	.word	0x0801ced4
 80027ec:	0801cee0 	.word	0x0801cee0

080027f0 <kf_prediction>:

void kf_prediction(kf_state_t *kf_state){
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af04      	add	r7, sp, #16
 80027f6:	6078      	str	r0, [r7, #4]
    /* Prediction Step */
    /* Calculation of x_priori */
    matvecprod(NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->x_est, kf_state->x_priori, true);
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f503 7082 	add.w	r0, r3, #260	; 0x104
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f503 739a 	add.w	r3, r3, #308	; 0x134
 8002806:	2201      	movs	r2, #1
 8002808:	9201      	str	r2, [sp, #4]
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	4603      	mov	r3, r0
 800280e:	460a      	mov	r2, r1
 8002810:	2103      	movs	r1, #3
 8002812:	2003      	movs	r0, #3
 8002814:	f000 ff42 	bl	800369c <matvecprod>
    matvecprod(NUMBER_STATES, NUMBER_INPUTS, kf_state->Bd, kf_state->u, kf_state->x_priori, false);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f503 7080 	add.w	r0, r3, #256	; 0x100
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f503 739a 	add.w	r3, r3, #308	; 0x134
 800282a:	2200      	movs	r2, #0
 800282c:	9201      	str	r2, [sp, #4]
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	4603      	mov	r3, r0
 8002832:	460a      	mov	r2, r1
 8002834:	2101      	movs	r1, #1
 8002836:	2003      	movs	r0, #3
 8002838:	f000 ff30 	bl	800369c <matvecprod>

    /* Calculation of P_priori */
    /* P_priori = Ad * P_est_prior * Ad_T + Gd * Q * Gd_T */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Ad, kf_state->P_est, kf_state->Placeholder_Ad_mult_P_est, true);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	f502 7205 	add.w	r2, r2, #532	; 0x214
 800284a:	2101      	movs	r1, #1
 800284c:	9102      	str	r1, [sp, #8]
 800284e:	9201      	str	r2, [sp, #4]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	4603      	mov	r3, r0
 8002854:	2203      	movs	r2, #3
 8002856:	2103      	movs	r1, #3
 8002858:	2003      	movs	r0, #3
 800285a:	f000 fe85 	bl	8003568 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_PROCESS_NOISE, kf_state->Gd, kf_state->Q, kf_state->Placeholder_Gd_mult_Q, true);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f103 0054 	add.w	r0, r3, #84	; 0x54
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	33b4      	adds	r3, #180	; 0xb4
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	f502 720e 	add.w	r2, r2, #568	; 0x238
 800286e:	2101      	movs	r1, #1
 8002870:	9102      	str	r1, [sp, #8]
 8002872:	9201      	str	r2, [sp, #4]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4603      	mov	r3, r0
 8002878:	2201      	movs	r2, #1
 800287a:	2101      	movs	r1, #1
 800287c:	2003      	movs	r0, #3
 800287e:	f000 fe73 	bl	8003568 <matmul>

    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_Ad_mult_P_est, kf_state->Ad_T, kf_state->P_priori, true);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	f503 7005 	add.w	r0, r3, #532	; 0x214
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3324      	adds	r3, #36	; 0x24
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 8002892:	2101      	movs	r1, #1
 8002894:	9102      	str	r1, [sp, #8]
 8002896:	9201      	str	r2, [sp, #4]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	4603      	mov	r3, r0
 800289c:	2203      	movs	r2, #3
 800289e:	2103      	movs	r1, #3
 80028a0:	2003      	movs	r0, #3
 80028a2:	f000 fe61 	bl	8003568 <matmul>
    matmul(NUMBER_STATES, NUMBER_PROCESS_NOISE, NUMBER_STATES, kf_state->Placeholder_Gd_mult_Q, kf_state->Gd_T, kf_state->P_priori, false);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f503 700e 	add.w	r0, r3, #568	; 0x238
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3360      	adds	r3, #96	; 0x60
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	f502 72a0 	add.w	r2, r2, #320	; 0x140
 80028b6:	2100      	movs	r1, #0
 80028b8:	9102      	str	r1, [sp, #8]
 80028ba:	9201      	str	r2, [sp, #4]
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	4603      	mov	r3, r0
 80028c0:	2203      	movs	r2, #3
 80028c2:	2101      	movs	r1, #1
 80028c4:	2003      	movs	r0, #3
 80028c6:	f000 fe4f 	bl	8003568 <matmul>
}
 80028ca:	bf00      	nop
 80028cc:	3708      	adds	r7, #8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <select_kf_observation_matrices>:

void select_kf_observation_matrices(kf_state_t *kf_state){
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b084      	sub	sp, #16
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
    memset(kf_state->H, 0, NUMBER_MEASUREMENTS*NUMBER_STATES*sizeof(kf_state->H[0][0]));
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	336c      	adds	r3, #108	; 0x6c
 80028de:	2224      	movs	r2, #36	; 0x24
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f017 fe3f 	bl	801a566 <memset>

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e01e      	b.n	800292c <select_kf_observation_matrices+0x5a>
        if (kf_state->z_active[i]) {
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <select_kf_observation_matrices+0x44>
             /* activate contribution of measurement in measurement matrix */
            kf_state->H[i][0] = 1;
 80028fe:	6879      	ldr	r1, [r7, #4]
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	336c      	adds	r3, #108	; 0x6c
 800290e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	e007      	b.n	8002926 <select_kf_observation_matrices+0x54>
        } else {
            /* set contributed measurement covariance to zero */
            kf_state->R[i][i] = 0;
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	011b      	lsls	r3, r3, #4
 800291c:	4413      	add	r3, r2
 800291e:	33b8      	adds	r3, #184	; 0xb8
 8002920:	f04f 0200 	mov.w	r2, #0
 8002924:	601a      	str	r2, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	3301      	adds	r3, #1
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2b02      	cmp	r3, #2
 8002930:	dddd      	ble.n	80028ee <select_kf_observation_matrices+0x1c>
        }
    }

    transpose(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->H_T);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3390      	adds	r3, #144	; 0x90
 800293c:	2103      	movs	r1, #3
 800293e:	2003      	movs	r0, #3
 8002940:	f000 fc82 	bl	8003248 <transpose>
}
 8002944:	bf00      	nop
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}

0800294c <kf_update>:

void kf_update(kf_state_t *kf_state) {
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af04      	add	r7, sp, #16
 8002952:	6078      	str	r0, [r7, #4]
    /* Update Step */
    /* y = z - H * x_priori */
    matvecprod(NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->H, kf_state->x_priori, kf_state->y, true);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f503 709a 	add.w	r0, r3, #308	; 0x134
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 8002966:	2201      	movs	r2, #1
 8002968:	9201      	str	r2, [sp, #4]
 800296a:	9300      	str	r3, [sp, #0]
 800296c:	4603      	mov	r3, r0
 800296e:	460a      	mov	r2, r1
 8002970:	2103      	movs	r1, #3
 8002972:	2003      	movs	r0, #3
 8002974:	f000 fe92 	bl	800369c <matvecprod>
    vecsub(NUMBER_MEASUREMENTS, kf_state->z, kf_state->y, kf_state->y);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f503 72ca 	add.w	r2, r3, #404	; 0x194
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f503 73ca 	add.w	r3, r3, #404	; 0x194
 800298a:	2003      	movs	r0, #3
 800298c:	f000 fcdb 	bl	8003346 <vecsub>

    /* S = H * P_priori * H_T + R */
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_STATES, kf_state->H, kf_state->P_priori, kf_state->Placeholder_H_mult_P_priori, true);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	f502 7211 	add.w	r2, r2, #580	; 0x244
 80029a2:	2101      	movs	r1, #1
 80029a4:	9102      	str	r1, [sp, #8]
 80029a6:	9201      	str	r2, [sp, #4]
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	4603      	mov	r3, r0
 80029ac:	2203      	movs	r2, #3
 80029ae:	2103      	movs	r1, #3
 80029b0:	2003      	movs	r0, #3
 80029b2:	f000 fdd9 	bl	8003568 <matmul>
    matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_H_mult_P_priori, kf_state->H_T, kf_state->S, true);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f503 7011 	add.w	r0, r3, #580	; 0x244
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3390      	adds	r3, #144	; 0x90
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	f502 72d0 	add.w	r2, r2, #416	; 0x1a0
 80029c6:	2101      	movs	r1, #1
 80029c8:	9102      	str	r1, [sp, #8]
 80029ca:	9201      	str	r2, [sp, #4]
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	4603      	mov	r3, r0
 80029d0:	2203      	movs	r2, #3
 80029d2:	2103      	movs	r1, #3
 80029d4:	2003      	movs	r0, #3
 80029d6:	f000 fdc7 	bl	8003568 <matmul>
    matadd(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->S, kf_state->R, kf_state->S);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f503 72d0 	add.w	r2, r3, #416	; 0x1a0
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	460b      	mov	r3, r1
 80029f0:	2103      	movs	r1, #3
 80029f2:	2003      	movs	r0, #3
 80029f4:	f000 fcd2 	bl	800339c <matadd>

    /* Calculate Pseudoinverse of covariance innovation */
    memset(kf_state->S_inv, 0, NUMBER_MEASUREMENTS*NUMBER_MEASUREMENTS*sizeof(kf_state->S_inv[0][0]));
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 80029fe:	2224      	movs	r2, #36	; 0x24
 8002a00:	2100      	movs	r1, #0
 8002a02:	4618      	mov	r0, r3
 8002a04:	f017 fdaf 	bl	801a566 <memset>
        matmul(NUMBER_MEASUREMENTS, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->Placeholder_S_inv_3, kf_state->Placeholder_H_T_mult_R_inv, kf_state->S_inv, true);
        matsub(NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->R_inv, kf_state->S_inv, kf_state->S_inv);
    } else {
        /* we use the regular inverse when the state dimension is larger than the number of measurements */
        /* the cholvesky inverse has a big O complexity of n^3 */
        cholesky_inverse(NUMBER_MEASUREMENTS, kf_state->S, kf_state->S_inv, LAMBDA);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f503 71d0 	add.w	r1, r3, #416	; 0x1a0
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a14:	ed9f 0a43 	vldr	s0, [pc, #268]	; 8002b24 <kf_update+0x1d8>
 8002a18:	461a      	mov	r2, r3
 8002a1a:	2003      	movs	r0, #3
 8002a1c:	f001 f80a 	bl	8003a34 <cholesky_inverse>
    }

    /* K  = P_priori * H_T * S_inv */
    matmul(NUMBER_STATES, NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->P_priori, kf_state->H_T, kf_state->Placeholder_P_priori_mult_H_T, true);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f503 70a0 	add.w	r0, r3, #320	; 0x140
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3390      	adds	r3, #144	; 0x90
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8002a30:	2101      	movs	r1, #1
 8002a32:	9102      	str	r1, [sp, #8]
 8002a34:	9201      	str	r2, [sp, #4]
 8002a36:	9300      	str	r3, [sp, #0]
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	2103      	movs	r1, #3
 8002a3e:	2003      	movs	r0, #3
 8002a40:	f000 fd92 	bl	8003568 <matmul>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_MEASUREMENTS, kf_state->Placeholder_P_priori_mult_H_T, kf_state->S_inv, kf_state->K, true);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f503 701a 	add.w	r0, r3, #616	; 0x268
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f503 73e2 	add.w	r3, r3, #452	; 0x1c4
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	f502 72f4 	add.w	r2, r2, #488	; 0x1e8
 8002a56:	2101      	movs	r1, #1
 8002a58:	9102      	str	r1, [sp, #8]
 8002a5a:	9201      	str	r2, [sp, #4]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2203      	movs	r2, #3
 8002a62:	2103      	movs	r1, #3
 8002a64:	2003      	movs	r0, #3
 8002a66:	f000 fd7f 	bl	8003568 <matmul>

    /* x_est = x_priori + K*y */
    matvecprod(NUMBER_STATES, NUMBER_MEASUREMENTS, kf_state->K, kf_state->y, kf_state->x_est, true);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	f503 71f4 	add.w	r1, r3, #488	; 0x1e8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f503 70ca 	add.w	r0, r3, #404	; 0x194
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	9201      	str	r2, [sp, #4]
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	4603      	mov	r3, r0
 8002a84:	460a      	mov	r2, r1
 8002a86:	2103      	movs	r1, #3
 8002a88:	2003      	movs	r0, #3
 8002a8a:	f000 fe07 	bl	800369c <matvecprod>
    vecadd(NUMBER_STATES, kf_state->x_priori, kf_state->x_est, kf_state->x_est);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f503 719a 	add.w	r1, r3, #308	; 0x134
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f503 7282 	add.w	r2, r3, #260	; 0x104
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002aa0:	2003      	movs	r0, #3
 8002aa2:	f000 fc25 	bl	80032f0 <vecadd>


    /* P_est = (eye(NUMBER_STATES) - K*H)*P_priori */
    eye(NUMBER_STATES, kf_state->Placeholder_eye);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8002aac:	4619      	mov	r1, r3
 8002aae:	2003      	movs	r0, #3
 8002ab0:	f000 fb7e 	bl	80031b0 <eye>
    matmul(NUMBER_STATES, NUMBER_MEASUREMENTS, NUMBER_STATES, kf_state->K, kf_state->H, kf_state->Placeholder_K_mult_H, true);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f503 70f4 	add.w	r0, r3, #488	; 0x1e8
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	336c      	adds	r3, #108	; 0x6c
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	f502 7235 	add.w	r2, r2, #724	; 0x2d4
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	9201      	str	r2, [sp, #4]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4603      	mov	r3, r0
 8002ace:	2203      	movs	r2, #3
 8002ad0:	2103      	movs	r1, #3
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f000 fd48 	bl	8003568 <matmul>
    matsub(NUMBER_STATES, NUMBER_STATES, kf_state->Placeholder_eye, kf_state->Placeholder_K_mult_H, kf_state->Placeholder_P_est);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f503 722c 	add.w	r2, r3, #688	; 0x2b0
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f503 7135 	add.w	r1, r3, #724	; 0x2d4
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002aea:	9300      	str	r3, [sp, #0]
 8002aec:	460b      	mov	r3, r1
 8002aee:	2103      	movs	r1, #3
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 fcc6 	bl	8003482 <matsub>
    matmul(NUMBER_STATES, NUMBER_STATES,  NUMBER_STATES, kf_state->Placeholder_P_est, kf_state->P_priori, kf_state->P_est, true);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f503 7023 	add.w	r0, r3, #652	; 0x28c
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	f502 7288 	add.w	r2, r2, #272	; 0x110
 8002b08:	2101      	movs	r1, #1
 8002b0a:	9102      	str	r1, [sp, #8]
 8002b0c:	9201      	str	r2, [sp, #4]
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	4603      	mov	r3, r0
 8002b12:	2203      	movs	r2, #3
 8002b14:	2103      	movs	r1, #3
 8002b16:	2003      	movs	r0, #3
 8002b18:	f000 fd26 	bl	8003568 <matmul>
}
 8002b1c:	bf00      	nop
 8002b1e:	3708      	adds	r7, #8
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bd80      	pop	{r7, pc}
 8002b24:	38d1b717 	.word	0x38d1b717

08002b28 <update_state_est_data>:
#include "Sim_Con\state_est.h"


void update_state_est_data(state_est_data_t *state_est_data, kf_state_t *kf_state) {
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
    state_est_data->position_world[2] = (int32_t)(kf_state->x_est[0] * 1000);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	edd3 7a41 	vldr	s15, [r3, #260]	; 0x104
 8002b38:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002bc0 <update_state_est_data+0x98>
 8002b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b44:	ee17 2a90 	vmov	r2, s15
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	609a      	str	r2, [r3, #8]
    state_est_data->velocity_rocket[0] = (int32_t)(kf_state->x_est[1] * 1000);
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002b52:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8002bc0 <update_state_est_data+0x98>
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b5e:	ee17 2a90 	vmov	r2, s15
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	60da      	str	r2, [r3, #12]
    state_est_data->velocity_world[2] = (int32_t)(kf_state->x_est[1] * 1000);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8002b6c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8002bc0 <update_state_est_data+0x98>
 8002b70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b78:	ee17 2a90 	vmov	r2, s15
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	62da      	str	r2, [r3, #44]	; 0x2c
    state_est_data->acceleration_rocket[0] = (int32_t)(kf_state->u[0] * 1000);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002b86:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002bc0 <update_state_est_data+0x98>
 8002b8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b92:	ee17 2a90 	vmov	r2, s15
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	619a      	str	r2, [r3, #24]
    state_est_data->acceleration_world[2] = (int32_t)(kf_state->u[0] * 1000);
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	edd3 7a40 	vldr	s15, [r3, #256]	; 0x100
 8002ba0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8002bc0 <update_state_est_data+0x98>
 8002ba4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ba8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bac:	ee17 2a90 	vmov	r2, s15
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002bb4:	bf00      	nop
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	447a0000 	.word	0x447a0000
 8002bc4:	00000000 	.word	0x00000000

08002bc8 <process_measurements>:

void process_measurements(timestamp_t t, kf_state_t *kf_state, state_est_meas_t *state_est_meas, state_est_meas_t *state_est_meas_prior,
                          env_t *env, extrapolation_rolling_memory_t *baro_roll_mem) {
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b095      	sub	sp, #84	; 0x54
 8002bcc:	af02      	add	r7, sp, #8
 8002bce:	60f8      	str	r0, [r7, #12]
 8002bd0:	60b9      	str	r1, [r7, #8]
 8002bd2:	607a      	str	r2, [r7, #4]
 8002bd4:	603b      	str	r3, [r7, #0]
    float temp_meas[NUM_SENSORBOARDS];
    bool temp_meas_active[NUM_SENSORBOARDS];
    float acc_x_meas[NUM_SENSORBOARDS];
    bool acc_x_meas_active[NUM_SENSORBOARDS];

    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8002bda:	e09a      	b.n	8002d12 <process_measurements+0x14a>
        /* barometer */
        if (state_est_meas->baro_data[i].ts > state_est_meas_prior->baro_data[i].ts) {
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002be0:	4613      	mov	r3, r2
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	4413      	add	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3308      	adds	r3, #8
 8002bec:	6819      	ldr	r1, [r3, #0]
 8002bee:	6838      	ldr	r0, [r7, #0]
 8002bf0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	4413      	add	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4403      	add	r3, r0
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4299      	cmp	r1, r3
 8002c02:	d92b      	bls.n	8002c5c <process_measurements+0x94>
            kf_state->z[i] = state_est_meas->baro_data[i].pressure;
 8002c04:	6879      	ldr	r1, [r7, #4]
 8002c06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c08:	4613      	mov	r3, r2
 8002c0a:	005b      	lsls	r3, r3, #1
 8002c0c:	4413      	add	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c18:	3362      	adds	r3, #98	; 0x62
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = true;
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = state_est_meas->baro_data[i].temperature;
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c42:	009b      	lsls	r3, r3, #2
 8002c44:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002c48:	440b      	add	r3, r1
 8002c4a:	3b24      	subs	r3, #36	; 0x24
 8002c4c:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = true;
 8002c4e:	f107 0220 	add.w	r2, r7, #32
 8002c52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c54:	4413      	add	r3, r2
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
 8002c5a:	e01d      	b.n	8002c98 <process_measurements+0xd0>
        } else {
            kf_state->z[i] = 0;
 8002c5c:	68ba      	ldr	r2, [r7, #8]
 8002c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c60:	3362      	adds	r3, #98	; 0x62
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	601a      	str	r2, [r3, #0]
            kf_state->z_active[i] = false;
 8002c6c:	68ba      	ldr	r2, [r7, #8]
 8002c6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c70:	4413      	add	r3, r2
 8002c72:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002c76:	2200      	movs	r2, #0
 8002c78:	701a      	strb	r2, [r3, #0]

            temp_meas[i] = 0;
 8002c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002c82:	4413      	add	r3, r2
 8002c84:	3b24      	subs	r3, #36	; 0x24
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]
            temp_meas_active[i] = false;
 8002c8c:	f107 0220 	add.w	r2, r7, #32
 8002c90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c92:	4413      	add	r3, r2
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
        }

        /* imu */
        if (state_est_meas->imu_data[i].ts > state_est_meas_prior->imu_data[i].ts) {
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	00db      	lsls	r3, r3, #3
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	333c      	adds	r3, #60	; 0x3c
 8002ca8:	6819      	ldr	r1, [r3, #0]
 8002caa:	6838      	ldr	r0, [r7, #0]
 8002cac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	1a9b      	subs	r3, r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4403      	add	r3, r0
 8002cb8:	333c      	adds	r3, #60	; 0x3c
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4299      	cmp	r1, r3
 8002cbe:	d916      	bls.n	8002cee <process_measurements+0x126>
            acc_x_meas[i] = state_est_meas->imu_data[i].acc_x;
 8002cc0:	6879      	ldr	r1, [r7, #4]
 8002cc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	3330      	adds	r3, #48	; 0x30
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8002cda:	440b      	add	r3, r1
 8002cdc:	3b34      	subs	r3, #52	; 0x34
 8002cde:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = true;
 8002ce0:	f107 0210 	add.w	r2, r7, #16
 8002ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ce6:	4413      	add	r3, r2
 8002ce8:	2201      	movs	r2, #1
 8002cea:	701a      	strb	r2, [r3, #0]
 8002cec:	e00e      	b.n	8002d0c <process_measurements+0x144>
        } else {
            acc_x_meas[i] = 0;
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b34      	subs	r3, #52	; 0x34
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
            acc_x_meas_active[i] = false;
 8002d00:	f107 0210 	add.w	r2, r7, #16
 8002d04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d06:	4413      	add	r3, r2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < NUM_SENSORBOARDS; i++){
 8002d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d0e:	3301      	adds	r3, #1
 8002d10:	647b      	str	r3, [r7, #68]	; 0x44
 8002d12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d14:	2b02      	cmp	r3, #2
 8002d16:	f77f af61 	ble.w	8002bdc <process_measurements+0x14>
        if (baro_roll_mem->memory_length < MAX_LENGTH_ROLLING_MEMORY) {
            sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
        }
        sensor_elimination_by_extrapolation(t, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, baro_roll_mem);
    } else {
        sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active);
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f503 71c4 	add.w	r1, r3, #392	; 0x188
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002d26:	461a      	mov	r2, r3
 8002d28:	2003      	movs	r0, #3
 8002d2a:	f000 f96d 	bl	8003008 <sensor_elimination_by_stdev>
    }

    /* eliminate temperature measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, temp_meas, temp_meas_active);
 8002d2e:	f107 0220 	add.w	r2, r7, #32
 8002d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d36:	4619      	mov	r1, r3
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f000 f965 	bl	8003008 <sensor_elimination_by_stdev>

    /* eliminate accelerometer in rocket x-dir measurements */
    sensor_elimination_by_stdev(NUMBER_MEASUREMENTS, acc_x_meas, acc_x_meas_active);
 8002d3e:	f107 0210 	add.w	r2, r7, #16
 8002d42:	f107 0314 	add.w	r3, r7, #20
 8002d46:	4619      	mov	r1, r3
 8002d48:	2003      	movs	r0, #3
 8002d4a:	f000 f95d 	bl	8003008 <sensor_elimination_by_stdev>

    /* update num_z_active */
    kf_state->num_z_active = 0;
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
    /* take the average of the active accelerometers in rocket-x dir as the state estimation input */
    float u = 0;
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
    int num_acc_x_meas_active = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	643b      	str	r3, [r7, #64]	; 0x40

    /* take the average of the temperature measurement  */
    float temp_meas_mean = 0;
 8002d60:	f04f 0300 	mov.w	r3, #0
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
    int num_temp_meas_active = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	637b      	str	r3, [r7, #52]	; 0x34

    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	633b      	str	r3, [r7, #48]	; 0x30
 8002d6e:	e047      	b.n	8002e00 <process_measurements+0x238>
        if (kf_state->z_active[i]){
 8002d70:	68ba      	ldr	r2, [r7, #8]
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 7303 	add.w	r3, r3, #524	; 0x20c
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d006      	beq.n	8002d8e <process_measurements+0x1c6>
            kf_state->num_z_active += 1;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8002d86:	1c5a      	adds	r2, r3, #1
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
        }
        if (acc_x_meas_active[i]) {
 8002d8e:	f107 0210 	add.w	r2, r7, #16
 8002d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d94:	4413      	add	r3, r2
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d010      	beq.n	8002dbe <process_measurements+0x1f6>
            u += acc_x_meas[i];
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9e:	009b      	lsls	r3, r3, #2
 8002da0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002da4:	4413      	add	r3, r2
 8002da6:	3b34      	subs	r3, #52	; 0x34
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002db0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002db4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
            num_acc_x_meas_active += 1;
 8002db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dba:	3301      	adds	r3, #1
 8002dbc:	643b      	str	r3, [r7, #64]	; 0x40
        }
        if (temp_meas[i]) {
 8002dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002dc6:	4413      	add	r3, r2
 8002dc8:	3b24      	subs	r3, #36	; 0x24
 8002dca:	edd3 7a00 	vldr	s15, [r3]
 8002dce:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002dd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dd6:	d010      	beq.n	8002dfa <process_measurements+0x232>
            temp_meas_mean += temp_meas[i];
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8002de0:	4413      	add	r3, r2
 8002de2:	3b24      	subs	r3, #36	; 0x24
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8002dec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
            num_temp_meas_active += 1;
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	3301      	adds	r3, #1
 8002df8:	637b      	str	r3, [r7, #52]	; 0x34
    for (int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	ddb4      	ble.n	8002d70 <process_measurements+0x1a8>
        }
    }

    pressure2altitudeAGL(env, NUMBER_MEASUREMENTS, kf_state->z, kf_state->z_active, kf_state->z);
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	f503 7103 	add.w	r1, r3, #524	; 0x20c
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	2103      	movs	r1, #3
 8002e1e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e20:	f7ff fa12 	bl	8002248 <pressure2altitudeAGL>

    /* we take the old acceleration from the previous timestep, if no acceleration measurements are active */
    if (num_acc_x_meas_active > 0){
 8002e24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	dd1c      	ble.n	8002e64 <process_measurements+0x29c>
        u /= num_acc_x_meas_active;
 8002e2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e34:	edd7 6a0f 	vldr	s13, [r7, #60]	; 0x3c
 8002e38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e3c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        /* gravity compensation for accelerometer */
        kf_state->u[0] = u - GRAVITATION;
 8002e40:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e42:	f7fd fba1 	bl	8000588 <__aeabi_f2d>
 8002e46:	a314      	add	r3, pc, #80	; (adr r3, 8002e98 <process_measurements+0x2d0>)
 8002e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e4c:	f7fd fa3c 	bl	80002c8 <__aeabi_dsub>
 8002e50:	4603      	mov	r3, r0
 8002e52:	460c      	mov	r4, r1
 8002e54:	4618      	mov	r0, r3
 8002e56:	4621      	mov	r1, r4
 8002e58:	f7fd febe 	bl	8000bd8 <__aeabi_d2f>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    }

    if (num_temp_meas_active > 0){
 8002e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	dd0f      	ble.n	8002e8a <process_measurements+0x2c2>
        temp_meas_mean /= num_temp_meas_active;
 8002e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6c:	ee07 3a90 	vmov	s15, r3
 8002e70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e74:	edd7 6a0e 	vldr	s13, [r7, #56]	; 0x38
 8002e78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e7c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        update_env(env, temp_meas_mean);
 8002e80:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
 8002e84:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002e86:	f7ff f983 	bl	8002190 <update_env>
    }
} 
 8002e8a:	bf00      	nop
 8002e8c:	374c      	adds	r7, #76	; 0x4c
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd90      	pop	{r4, r7, pc}
 8002e92:	bf00      	nop
 8002e94:	f3af 8000 	nop.w
 8002e98:	51eb851f 	.word	0x51eb851f
 8002e9c:	40239eb8 	.word	0x40239eb8

08002ea0 <select_noise_models>:

void select_noise_models(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection, env_t *env,
                        extrapolation_rolling_memory_t *baro_roll_mem){
 8002ea0:	b590      	push	{r4, r7, lr}
 8002ea2:	b091      	sub	sp, #68	; 0x44
 8002ea4:	af02      	add	r7, sp, #8
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
    float accelerometer_x_stdev;
    float barometer_stdev;

    // TODO @maxi: add different noise models for each mach regime
    switch (flight_phase_detection->flight_phase) {
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	781b      	ldrb	r3, [r3, #0]
 8002eb2:	3b01      	subs	r3, #1
 8002eb4:	2b05      	cmp	r3, #5
 8002eb6:	d823      	bhi.n	8002f00 <select_noise_models+0x60>
 8002eb8:	a201      	add	r2, pc, #4	; (adr r2, 8002ec0 <select_noise_models+0x20>)
 8002eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ebe:	bf00      	nop
 8002ec0:	08002ed9 	.word	0x08002ed9
 8002ec4:	08002ed9 	.word	0x08002ed9
 8002ec8:	08002ee3 	.word	0x08002ee3
 8002ecc:	08002eed 	.word	0x08002eed
 8002ed0:	08002ef7 	.word	0x08002ef7
 8002ed4:	08002ed9 	.word	0x08002ed9
        case AIRBRAKE_TEST:
        case RECOVERY:
        case IDLE:
            accelerometer_x_stdev = 0.0185409;
 8002ed8:	4b43      	ldr	r3, [pc, #268]	; (8002fe8 <select_noise_models+0x148>)
 8002eda:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 1.869;
 8002edc:	4b43      	ldr	r3, [pc, #268]	; (8002fec <select_noise_models+0x14c>)
 8002ede:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002ee0:	e00e      	b.n	8002f00 <select_noise_models+0x60>
        case THRUSTING:
            accelerometer_x_stdev = 1.250775;
 8002ee2:	4b43      	ldr	r3, [pc, #268]	; (8002ff0 <select_noise_models+0x150>)
 8002ee4:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 13.000;
 8002ee6:	4b43      	ldr	r3, [pc, #268]	; (8002ff4 <select_noise_models+0x154>)
 8002ee8:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002eea:	e009      	b.n	8002f00 <select_noise_models+0x60>
        case COASTING:
            accelerometer_x_stdev = 0.61803;
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <select_noise_models+0x158>)
 8002eee:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 7.380;
 8002ef0:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <select_noise_models+0x15c>)
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002ef4:	e004      	b.n	8002f00 <select_noise_models+0x60>
        case DESCENT:
            accelerometer_x_stdev = 1.955133;
 8002ef6:	4b42      	ldr	r3, [pc, #264]	; (8003000 <select_noise_models+0x160>)
 8002ef8:	637b      	str	r3, [r7, #52]	; 0x34
            barometer_stdev = 3.896;
 8002efa:	4b42      	ldr	r3, [pc, #264]	; (8003004 <select_noise_models+0x164>)
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 8002efe:	bf00      	nop
    }

    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002f00:	2300      	movs	r3, #0
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f04:	e01b      	b.n	8002f3e <select_noise_models+0x9e>
        kf_state->Q[i][i] = pow(accelerometer_x_stdev, 2);
 8002f06:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f08:	f7fd fb3e 	bl	8000588 <__aeabi_f2d>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	460c      	mov	r4, r1
 8002f10:	ed9f 1b33 	vldr	d1, [pc, #204]	; 8002fe0 <select_noise_models+0x140>
 8002f14:	ec44 3b10 	vmov	d0, r3, r4
 8002f18:	f017 ffca 	bl	801aeb0 <pow>
 8002f1c:	ec54 3b10 	vmov	r3, r4, d0
 8002f20:	4618      	mov	r0, r3
 8002f22:	4621      	mov	r1, r4
 8002f24:	f7fd fe58 	bl	8000bd8 <__aeabi_d2f>
 8002f28:	4601      	mov	r1, r0
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f2e:	3316      	adds	r3, #22
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	3304      	adds	r3, #4
 8002f36:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_PROCESS_NOISE; i++){
 8002f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	dde0      	ble.n	8002f06 <select_noise_models+0x66>
    }

    float p[1];
    float h[1] = {kf_state->x_est[0]};
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8002f4a:	61bb      	str	r3, [r7, #24]
    bool h_active[1] = {true};
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	753b      	strb	r3, [r7, #20]
    altitudeAGL2pressure(env, 1, h, h_active, p);
 8002f50:	f107 0114 	add.w	r1, r7, #20
 8002f54:	f107 0218 	add.w	r2, r7, #24
 8002f58:	f107 031c 	add.w	r3, r7, #28
 8002f5c:	9300      	str	r3, [sp, #0]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	2101      	movs	r1, #1
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f7ff f9d0 	bl	8002308 <altitudeAGL2pressure>
    float h_grad = altitude_gradient(env, p[0]);
 8002f68:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f7ff fa31 	bl	80023d8 <altitude_gradient>
 8002f76:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
    float altitude_stdev = fabsf(barometer_stdev * h_grad);
 8002f7a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8002f7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f86:	eef0 7ae7 	vabs.f32	s15, s15
 8002f8a:	edc7 7a08 	vstr	s15, [r7, #32]

    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002f8e:	2300      	movs	r3, #0
 8002f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f92:	e01a      	b.n	8002fca <select_noise_models+0x12a>
        kf_state->R[i][i] = pow(altitude_stdev, 2);
 8002f94:	6a38      	ldr	r0, [r7, #32]
 8002f96:	f7fd faf7 	bl	8000588 <__aeabi_f2d>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	460c      	mov	r4, r1
 8002f9e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8002fe0 <select_noise_models+0x140>
 8002fa2:	ec44 3b10 	vmov	d0, r3, r4
 8002fa6:	f017 ff83 	bl	801aeb0 <pow>
 8002faa:	ec54 3b10 	vmov	r3, r4, d0
 8002fae:	4618      	mov	r0, r3
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	f7fd fe11 	bl	8000bd8 <__aeabi_d2f>
 8002fb6:	4601      	mov	r1, r0
 8002fb8:	68fa      	ldr	r2, [r7, #12]
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	4413      	add	r3, r2
 8002fc0:	33b8      	adds	r3, #184	; 0xb8
 8002fc2:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < NUMBER_MEASUREMENTS; i++){
 8002fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	dde1      	ble.n	8002f94 <select_noise_models+0xf4>
    }

    baro_roll_mem->noise_stdev = barometer_stdev;
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002fd4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
 8002fd8:	bf00      	nop
 8002fda:	373c      	adds	r7, #60	; 0x3c
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd90      	pop	{r4, r7, pc}
 8002fe0:	00000000 	.word	0x00000000
 8002fe4:	40000000 	.word	0x40000000
 8002fe8:	3c97e316 	.word	0x3c97e316
 8002fec:	3fef3b64 	.word	0x3fef3b64
 8002ff0:	3fa01965 	.word	0x3fa01965
 8002ff4:	41500000 	.word	0x41500000
 8002ff8:	3f1e3737 	.word	0x3f1e3737
 8002ffc:	40ec28f6 	.word	0x40ec28f6
 8003000:	3ffa41cc 	.word	0x3ffa41cc
 8003004:	40795810 	.word	0x40795810

08003008 <sensor_elimination_by_stdev>:

void sensor_elimination_by_stdev(int32_t n, float measurements[n], bool measurement_active[n]) {
 8003008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800300a:	b08b      	sub	sp, #44	; 0x2c
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
    /* calculate mean of the sample */
    int num_active = 0;
 8003014:	2300      	movs	r3, #0
 8003016:	627b      	str	r3, [r7, #36]	; 0x24
    float mean = 0;
 8003018:	f04f 0300 	mov.w	r3, #0
 800301c:	623b      	str	r3, [r7, #32]
    for (int i = 0; i < n; i++){
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
 8003022:	e017      	b.n	8003054 <sensor_elimination_by_stdev+0x4c>
        if (measurement_active[i]) {
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	4413      	add	r3, r2
 800302a:	781b      	ldrb	r3, [r3, #0]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d00e      	beq.n	800304e <sensor_elimination_by_stdev+0x46>
            num_active += 1;
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	3301      	adds	r3, #1
 8003034:	627b      	str	r3, [r7, #36]	; 0x24
            mean += measurements[i];
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	edd3 7a00 	vldr	s15, [r3]
 8003042:	ed97 7a08 	vldr	s14, [r7, #32]
 8003046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800304a:	edc7 7a08 	vstr	s15, [r7, #32]
    for (int i = 0; i < n; i++){
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	429a      	cmp	r2, r3
 800305a:	dbe3      	blt.n	8003024 <sensor_elimination_by_stdev+0x1c>
        }
    }
    if (num_active > 0){
 800305c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800305e:	2b00      	cmp	r3, #0
 8003060:	dd0a      	ble.n	8003078 <sensor_elimination_by_stdev+0x70>
        mean /= num_active;
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800306c:	edd7 6a08 	vldr	s13, [r7, #32]
 8003070:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003074:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    /* calculate the standard deviation of the sample */
    float stdev = 0;
 8003078:	f04f 0300 	mov.w	r3, #0
 800307c:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e033      	b.n	80030ec <sensor_elimination_by_stdev+0xe4>
        if (measurement_active[i]) {
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	4413      	add	r3, r2
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d02a      	beq.n	80030e6 <sensor_elimination_by_stdev+0xde>
            stdev += pow(measurements[i] - mean, 2);
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	4413      	add	r3, r2
 8003098:	ed93 7a00 	vldr	s14, [r3]
 800309c:	edd7 7a08 	vldr	s15, [r7, #32]
 80030a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030a4:	ee17 0a90 	vmov	r0, s15
 80030a8:	f7fd fa6e 	bl	8000588 <__aeabi_f2d>
 80030ac:	4603      	mov	r3, r0
 80030ae:	460c      	mov	r4, r1
 80030b0:	ed9f 1b3d 	vldr	d1, [pc, #244]	; 80031a8 <sensor_elimination_by_stdev+0x1a0>
 80030b4:	ec44 3b10 	vmov	d0, r3, r4
 80030b8:	f017 fefa 	bl	801aeb0 <pow>
 80030bc:	ec56 5b10 	vmov	r5, r6, d0
 80030c0:	69b8      	ldr	r0, [r7, #24]
 80030c2:	f7fd fa61 	bl	8000588 <__aeabi_f2d>
 80030c6:	4603      	mov	r3, r0
 80030c8:	460c      	mov	r4, r1
 80030ca:	461a      	mov	r2, r3
 80030cc:	4623      	mov	r3, r4
 80030ce:	4628      	mov	r0, r5
 80030d0:	4631      	mov	r1, r6
 80030d2:	f7fd f8fb 	bl	80002cc <__adddf3>
 80030d6:	4603      	mov	r3, r0
 80030d8:	460c      	mov	r4, r1
 80030da:	4618      	mov	r0, r3
 80030dc:	4621      	mov	r1, r4
 80030de:	f7fd fd7b 	bl	8000bd8 <__aeabi_d2f>
 80030e2:	4603      	mov	r3, r0
 80030e4:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < n; ++i) {
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	3301      	adds	r3, #1
 80030ea:	617b      	str	r3, [r7, #20]
 80030ec:	697a      	ldr	r2, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	dbc7      	blt.n	8003084 <sensor_elimination_by_stdev+0x7c>
        }
    }
    if (num_active > 0){
 80030f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	dd1a      	ble.n	8003130 <sensor_elimination_by_stdev+0x128>
        stdev = sqrt(stdev / num_active);
 80030fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003104:	ed97 7a06 	vldr	s14, [r7, #24]
 8003108:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800310c:	ee16 0a90 	vmov	r0, s13
 8003110:	f7fd fa3a 	bl	8000588 <__aeabi_f2d>
 8003114:	4603      	mov	r3, r0
 8003116:	460c      	mov	r4, r1
 8003118:	ec44 3b10 	vmov	d0, r3, r4
 800311c:	f018 f838 	bl	801b190 <sqrt>
 8003120:	ec54 3b10 	vmov	r3, r4, d0
 8003124:	4618      	mov	r0, r3
 8003126:	4621      	mov	r1, r4
 8003128:	f7fd fd56 	bl	8000bd8 <__aeabi_d2f>
 800312c:	4603      	mov	r3, r0
 800312e:	61bb      	str	r3, [r7, #24]
    }

    /* deactivate measurements if they are too far off the mean */
    for (int i = 0; i < n; ++i) {
 8003130:	2300      	movs	r3, #0
 8003132:	613b      	str	r3, [r7, #16]
 8003134:	e02f      	b.n	8003196 <sensor_elimination_by_stdev+0x18e>
        if (measurement_active[i]) {
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	4413      	add	r3, r2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d026      	beq.n	8003190 <sensor_elimination_by_stdev+0x188>
            if (fabsf(measurements[i] - mean) > 2.0 * stdev) {
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	68ba      	ldr	r2, [r7, #8]
 8003148:	4413      	add	r3, r2
 800314a:	ed93 7a00 	vldr	s14, [r3]
 800314e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	eef0 7ae7 	vabs.f32	s15, s15
 800315a:	ee17 0a90 	vmov	r0, s15
 800315e:	f7fd fa13 	bl	8000588 <__aeabi_f2d>
 8003162:	4604      	mov	r4, r0
 8003164:	460d      	mov	r5, r1
 8003166:	69b8      	ldr	r0, [r7, #24]
 8003168:	f7fd fa0e 	bl	8000588 <__aeabi_f2d>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	f7fd f8ac 	bl	80002cc <__adddf3>
 8003174:	4602      	mov	r2, r0
 8003176:	460b      	mov	r3, r1
 8003178:	4620      	mov	r0, r4
 800317a:	4629      	mov	r1, r5
 800317c:	f7fd fcec 	bl	8000b58 <__aeabi_dcmpgt>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d004      	beq.n	8003190 <sensor_elimination_by_stdev+0x188>
                measurement_active[i] = false;
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; ++i) {
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	3301      	adds	r3, #1
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	693a      	ldr	r2, [r7, #16]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	429a      	cmp	r2, r3
 800319c:	dbcb      	blt.n	8003136 <sensor_elimination_by_stdev+0x12e>
            }
        }
    }
}
 800319e:	bf00      	nop
 80031a0:	372c      	adds	r7, #44	; 0x2c
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031a6:	bf00      	nop
 80031a8:	00000000 	.word	0x00000000
 80031ac:	40000000 	.word	0x40000000

080031b0 <eye>:
#include "Util/math_utils.h"


void eye(int32_t dim, float A[dim][dim]) {
 80031b0:	b490      	push	{r4, r7}
 80031b2:	b086      	sub	sp, #24
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	1e43      	subs	r3, r0, #1
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	4603      	mov	r3, r0
 80031c2:	4619      	mov	r1, r3
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	f04f 0400 	mov.w	r4, #0
 80031d0:	0154      	lsls	r4, r2, #5
 80031d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80031d6:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < dim; i++){
 80031d8:	2300      	movs	r3, #0
 80031da:	613b      	str	r3, [r7, #16]
 80031dc:	e02b      	b.n	8003236 <eye+0x86>
        for(int j = 0; j < dim; j++){
 80031de:	2300      	movs	r3, #0
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	e021      	b.n	8003228 <eye+0x78>
            if (i == j){
 80031e4:	693a      	ldr	r2, [r7, #16]
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d10d      	bne.n	8003208 <eye+0x58>
				A[i][j] = 1;
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	fb03 f302 	mul.w	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	441a      	add	r2, r3
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	e00c      	b.n	8003222 <eye+0x72>
			} else {
				A[i][j] = 0;
 8003208:	4602      	mov	r2, r0
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	fb03 f302 	mul.w	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	441a      	add	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	009b      	lsls	r3, r3, #2
 800321a:	4413      	add	r3, r2
 800321c:	f04f 0200 	mov.w	r2, #0
 8003220:	601a      	str	r2, [r3, #0]
        for(int j = 0; j < dim; j++){
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	3301      	adds	r3, #1
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	429a      	cmp	r2, r3
 800322e:	dbd9      	blt.n	80031e4 <eye+0x34>
	for(int i = 0; i < dim; i++){
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	3301      	adds	r3, #1
 8003234:	613b      	str	r3, [r7, #16]
 8003236:	693a      	ldr	r2, [r7, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	429a      	cmp	r2, r3
 800323c:	dbcf      	blt.n	80031de <eye+0x2e>
			}
        }
    }
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bc90      	pop	{r4, r7}
 8003246:	4770      	bx	lr

08003248 <transpose>:

void transpose(int32_t m, int32_t n, float A[m][n], float A_T[n][m]) {
 8003248:	b4b0      	push	{r4, r5, r7}
 800324a:	b089      	sub	sp, #36	; 0x24
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
 8003256:	68b8      	ldr	r0, [r7, #8]
 8003258:	1e43      	subs	r3, r0, #1
 800325a:	617b      	str	r3, [r7, #20]
 800325c:	4603      	mov	r3, r0
 800325e:	4619      	mov	r1, r3
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	f04f 0300 	mov.w	r3, #0
 8003268:	f04f 0400 	mov.w	r4, #0
 800326c:	0154      	lsls	r4, r2, #5
 800326e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003272:	014b      	lsls	r3, r1, #5
 8003274:	68fd      	ldr	r5, [r7, #12]
 8003276:	1e6b      	subs	r3, r5, #1
 8003278:	613b      	str	r3, [r7, #16]
 800327a:	462b      	mov	r3, r5
 800327c:	4619      	mov	r1, r3
 800327e:	f04f 0200 	mov.w	r2, #0
 8003282:	f04f 0300 	mov.w	r3, #0
 8003286:	f04f 0400 	mov.w	r4, #0
 800328a:	0154      	lsls	r4, r2, #5
 800328c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003290:	014b      	lsls	r3, r1, #5
	/* Get Transpose */
	for(int i = 0; i < m; i++){
 8003292:	2300      	movs	r3, #0
 8003294:	61bb      	str	r3, [r7, #24]
 8003296:	e022      	b.n	80032de <transpose+0x96>
		for(int j = 0; j < n; j++){
 8003298:	2300      	movs	r3, #0
 800329a:	61fb      	str	r3, [r7, #28]
 800329c:	e018      	b.n	80032d0 <transpose+0x88>
			A_T[j][i] = A[i][j];
 800329e:	4602      	mov	r2, r0
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	fb03 f302 	mul.w	r3, r3, r2
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	441a      	add	r2, r3
 80032ac:	4629      	mov	r1, r5
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	fb03 f301 	mul.w	r3, r3, r1
 80032b4:	009b      	lsls	r3, r3, #2
 80032b6:	6839      	ldr	r1, [r7, #0]
 80032b8:	4419      	add	r1, r3
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	4413      	add	r3, r2
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	440b      	add	r3, r1
 80032c8:	601a      	str	r2, [r3, #0]
		for(int j = 0; j < n; j++){
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fa      	ldr	r2, [r7, #28]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	dbe2      	blt.n	800329e <transpose+0x56>
	for(int i = 0; i < m; i++){
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	3301      	adds	r3, #1
 80032dc:	61bb      	str	r3, [r7, #24]
 80032de:	69ba      	ldr	r2, [r7, #24]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	dbd8      	blt.n	8003298 <transpose+0x50>
		}
	}
}
 80032e6:	bf00      	nop
 80032e8:	3724      	adds	r7, #36	; 0x24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bcb0      	pop	{r4, r5, r7}
 80032ee:	4770      	bx	lr

080032f0 <vecadd>:

void vecadd(int32_t n, float a[n], float b[n], float c[n]) {
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 80032fe:	2300      	movs	r3, #0
 8003300:	617b      	str	r3, [r7, #20]
 8003302:	e016      	b.n	8003332 <vecadd+0x42>
		c[i] = a[i] + b[i];
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	4413      	add	r3, r2
 800330c:	ed93 7a00 	vldr	s14, [r3]
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4413      	add	r3, r2
 8003318:	edd3 7a00 	vldr	s15, [r3]
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	4413      	add	r3, r2
 8003324:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003328:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	3301      	adds	r3, #1
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	429a      	cmp	r2, r3
 8003338:	dbe4      	blt.n	8003304 <vecadd+0x14>
	}
}
 800333a:	bf00      	nop
 800333c:	371c      	adds	r7, #28
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <vecsub>:

void vecsub(int32_t n, float a[n], float b[n], float c[n]) {
 8003346:	b480      	push	{r7}
 8003348:	b087      	sub	sp, #28
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
 8003352:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < n; i++){
 8003354:	2300      	movs	r3, #0
 8003356:	617b      	str	r3, [r7, #20]
 8003358:	e016      	b.n	8003388 <vecsub+0x42>
		c[i] = a[i] - b[i];
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	68ba      	ldr	r2, [r7, #8]
 8003360:	4413      	add	r3, r2
 8003362:	ed93 7a00 	vldr	s14, [r3]
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4413      	add	r3, r2
 800336e:	edd3 7a00 	vldr	s15, [r3]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	4413      	add	r3, r2
 800337a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800337e:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < n; i++){
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	3301      	adds	r3, #1
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	429a      	cmp	r2, r3
 800338e:	dbe4      	blt.n	800335a <vecsub+0x14>
	}
}
 8003390:	bf00      	nop
 8003392:	371c      	adds	r7, #28
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <matadd>:

void matadd(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 800339c:	b4f0      	push	{r4, r5, r6, r7}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
 80033a8:	603b      	str	r3, [r7, #0]
 80033aa:	68b8      	ldr	r0, [r7, #8]
 80033ac:	1e43      	subs	r3, r0, #1
 80033ae:	627b      	str	r3, [r7, #36]	; 0x24
 80033b0:	4603      	mov	r3, r0
 80033b2:	4619      	mov	r1, r3
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	f04f 0400 	mov.w	r4, #0
 80033c0:	0154      	lsls	r4, r2, #5
 80033c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033c6:	014b      	lsls	r3, r1, #5
 80033c8:	68bd      	ldr	r5, [r7, #8]
 80033ca:	1e6b      	subs	r3, r5, #1
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	462b      	mov	r3, r5
 80033d0:	4619      	mov	r1, r3
 80033d2:	f04f 0200 	mov.w	r2, #0
 80033d6:	f04f 0300 	mov.w	r3, #0
 80033da:	f04f 0400 	mov.w	r4, #0
 80033de:	0154      	lsls	r4, r2, #5
 80033e0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033e4:	014b      	lsls	r3, r1, #5
 80033e6:	68be      	ldr	r6, [r7, #8]
 80033e8:	1e73      	subs	r3, r6, #1
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	4633      	mov	r3, r6
 80033ee:	4619      	mov	r1, r3
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	f04f 0300 	mov.w	r3, #0
 80033f8:	f04f 0400 	mov.w	r4, #0
 80033fc:	0154      	lsls	r4, r2, #5
 80033fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003402:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 8003404:	2300      	movs	r3, #0
 8003406:	61fb      	str	r3, [r7, #28]
 8003408:	e032      	b.n	8003470 <matadd+0xd4>
        for(int j = 0; j < n; j++){
 800340a:	2300      	movs	r3, #0
 800340c:	623b      	str	r3, [r7, #32]
 800340e:	e028      	b.n	8003462 <matadd+0xc6>
            C[i][j] =  A[i][j] + B[i][j];
 8003410:	4602      	mov	r2, r0
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	fb03 f302 	mul.w	r3, r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	687a      	ldr	r2, [r7, #4]
 800341c:	441a      	add	r2, r3
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	009b      	lsls	r3, r3, #2
 8003422:	4413      	add	r3, r2
 8003424:	ed93 7a00 	vldr	s14, [r3]
 8003428:	462a      	mov	r2, r5
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	fb03 f302 	mul.w	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	441a      	add	r2, r3
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	4632      	mov	r2, r6
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	fb03 f302 	mul.w	r3, r3, r2
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800344c:	441a      	add	r2, r3
 800344e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	4413      	add	r3, r2
 8003458:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	3301      	adds	r3, #1
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	6a3a      	ldr	r2, [r7, #32]
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	429a      	cmp	r2, r3
 8003468:	dbd2      	blt.n	8003410 <matadd+0x74>
	for(int i = 0; i < m; i++){
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	3301      	adds	r3, #1
 800346e:	61fb      	str	r3, [r7, #28]
 8003470:	69fa      	ldr	r2, [r7, #28]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	429a      	cmp	r2, r3
 8003476:	dbc8      	blt.n	800340a <matadd+0x6e>
        }
    }
}
 8003478:	bf00      	nop
 800347a:	3728      	adds	r7, #40	; 0x28
 800347c:	46bd      	mov	sp, r7
 800347e:	bcf0      	pop	{r4, r5, r6, r7}
 8003480:	4770      	bx	lr

08003482 <matsub>:

void matsub(int32_t m, int32_t n, float A[m][n], float B[m][n], float C[m][n]) {
 8003482:	b4f0      	push	{r4, r5, r6, r7}
 8003484:	b08a      	sub	sp, #40	; 0x28
 8003486:	af00      	add	r7, sp, #0
 8003488:	60f8      	str	r0, [r7, #12]
 800348a:	60b9      	str	r1, [r7, #8]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	68b8      	ldr	r0, [r7, #8]
 8003492:	1e43      	subs	r3, r0, #1
 8003494:	627b      	str	r3, [r7, #36]	; 0x24
 8003496:	4603      	mov	r3, r0
 8003498:	4619      	mov	r1, r3
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	f04f 0300 	mov.w	r3, #0
 80034a2:	f04f 0400 	mov.w	r4, #0
 80034a6:	0154      	lsls	r4, r2, #5
 80034a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034ac:	014b      	lsls	r3, r1, #5
 80034ae:	68bd      	ldr	r5, [r7, #8]
 80034b0:	1e6b      	subs	r3, r5, #1
 80034b2:	61bb      	str	r3, [r7, #24]
 80034b4:	462b      	mov	r3, r5
 80034b6:	4619      	mov	r1, r3
 80034b8:	f04f 0200 	mov.w	r2, #0
 80034bc:	f04f 0300 	mov.w	r3, #0
 80034c0:	f04f 0400 	mov.w	r4, #0
 80034c4:	0154      	lsls	r4, r2, #5
 80034c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034ca:	014b      	lsls	r3, r1, #5
 80034cc:	68be      	ldr	r6, [r7, #8]
 80034ce:	1e73      	subs	r3, r6, #1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	4633      	mov	r3, r6
 80034d4:	4619      	mov	r1, r3
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	f04f 0400 	mov.w	r4, #0
 80034e2:	0154      	lsls	r4, r2, #5
 80034e4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80034e8:	014b      	lsls	r3, r1, #5
	for(int i = 0; i < m; i++){
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e032      	b.n	8003556 <matsub+0xd4>
        for(int j = 0; j < n; j++){
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	e028      	b.n	8003548 <matsub+0xc6>
            C[i][j] =  A[i][j] - B[i][j];
 80034f6:	4602      	mov	r2, r0
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	fb03 f302 	mul.w	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	441a      	add	r2, r3
 8003504:	6a3b      	ldr	r3, [r7, #32]
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4413      	add	r3, r2
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	462a      	mov	r2, r5
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	fb03 f302 	mul.w	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	441a      	add	r2, r3
 800351c:	6a3b      	ldr	r3, [r7, #32]
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4413      	add	r3, r2
 8003522:	edd3 7a00 	vldr	s15, [r3]
 8003526:	4632      	mov	r2, r6
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	fb03 f302 	mul.w	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003532:	441a      	add	r2, r3
 8003534:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	3301      	adds	r3, #1
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	6a3a      	ldr	r2, [r7, #32]
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	429a      	cmp	r2, r3
 800354e:	dbd2      	blt.n	80034f6 <matsub+0x74>
	for(int i = 0; i < m; i++){
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	3301      	adds	r3, #1
 8003554:	61fb      	str	r3, [r7, #28]
 8003556:	69fa      	ldr	r2, [r7, #28]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	429a      	cmp	r2, r3
 800355c:	dbc8      	blt.n	80034f0 <matsub+0x6e>
        }
    }
}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bcf0      	pop	{r4, r5, r6, r7}
 8003566:	4770      	bx	lr

08003568 <matmul>:

void matmul(int32_t m, int32_t n, int32_t o, float A[m][n], float B[n][o], float C[m][o], bool reset) {
 8003568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800356a:	b08d      	sub	sp, #52	; 0x34
 800356c:	af00      	add	r7, sp, #0
 800356e:	6178      	str	r0, [r7, #20]
 8003570:	6139      	str	r1, [r7, #16]
 8003572:	60fa      	str	r2, [r7, #12]
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	693e      	ldr	r6, [r7, #16]
 8003578:	1e73      	subs	r3, r6, #1
 800357a:	623b      	str	r3, [r7, #32]
 800357c:	4633      	mov	r3, r6
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	f04f 0400 	mov.w	r4, #0
 800358c:	0154      	lsls	r4, r2, #5
 800358e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003592:	014b      	lsls	r3, r1, #5
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	607a      	str	r2, [r7, #4]
 8003598:	4613      	mov	r3, r2
 800359a:	3b01      	subs	r3, #1
 800359c:	61fb      	str	r3, [r7, #28]
 800359e:	4613      	mov	r3, r2
 80035a0:	4619      	mov	r1, r3
 80035a2:	f04f 0200 	mov.w	r2, #0
 80035a6:	f04f 0300 	mov.w	r3, #0
 80035aa:	f04f 0400 	mov.w	r4, #0
 80035ae:	0154      	lsls	r4, r2, #5
 80035b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035b4:	014b      	lsls	r3, r1, #5
 80035b6:	68fd      	ldr	r5, [r7, #12]
 80035b8:	1e6b      	subs	r3, r5, #1
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	462b      	mov	r3, r5
 80035be:	4619      	mov	r1, r3
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	f04f 0400 	mov.w	r4, #0
 80035cc:	0154      	lsls	r4, r2, #5
 80035ce:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035d2:	014b      	lsls	r3, r1, #5
	if (reset) {
 80035d4:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d009      	beq.n	80035f0 <matmul+0x88>
		memset(C, 0, m * o * sizeof(C[0][0]));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	fb02 f303 	mul.w	r3, r2, r3
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	461a      	mov	r2, r3
 80035e8:	2100      	movs	r1, #0
 80035ea:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80035ec:	f016 ffbb 	bl	801a566 <memset>
	}
	for(int i = 0; i < m; i++){
 80035f0:	2300      	movs	r3, #0
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
 80035f4:	e04a      	b.n	800368c <matmul+0x124>
        for(int j = 0; j < o; j++){
 80035f6:	2300      	movs	r3, #0
 80035f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80035fa:	e040      	b.n	800367e <matmul+0x116>
            for(int k = 0; k < n; k++){
 80035fc:	2300      	movs	r3, #0
 80035fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003600:	e036      	b.n	8003670 <matmul+0x108>
                C[i][j] +=  A[i][k] * B[k][j];
 8003602:	4632      	mov	r2, r6
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	fb03 f302 	mul.w	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	68ba      	ldr	r2, [r7, #8]
 800360e:	441a      	add	r2, r3
 8003610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	ed93 7a00 	vldr	s14, [r3]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800361e:	fb03 f302 	mul.w	r3, r3, r2
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003626:	441a      	add	r2, r3
 8003628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	4413      	add	r3, r2
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003636:	462a      	mov	r2, r5
 8003638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363a:	fb03 f302 	mul.w	r3, r3, r2
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003642:	441a      	add	r2, r3
 8003644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	edd3 7a00 	vldr	s15, [r3]
 800364e:	462a      	mov	r2, r5
 8003650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003652:	fb03 f302 	mul.w	r3, r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800365a:	441a      	add	r2, r3
 800365c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	4413      	add	r3, r2
 8003666:	edc3 7a00 	vstr	s15, [r3]
            for(int k = 0; k < n; k++){
 800366a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366c:	3301      	adds	r3, #1
 800366e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003670:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	429a      	cmp	r2, r3
 8003676:	dbc4      	blt.n	8003602 <matmul+0x9a>
        for(int j = 0; j < o; j++){
 8003678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800367a:	3301      	adds	r3, #1
 800367c:	62bb      	str	r3, [r7, #40]	; 0x28
 800367e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	429a      	cmp	r2, r3
 8003684:	dbba      	blt.n	80035fc <matmul+0x94>
	for(int i = 0; i < m; i++){
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	3301      	adds	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
 800368c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	429a      	cmp	r2, r3
 8003692:	dbb0      	blt.n	80035f6 <matmul+0x8e>
            }
        }
    }
}
 8003694:	bf00      	nop
 8003696:	3734      	adds	r7, #52	; 0x34
 8003698:	46bd      	mov	sp, r7
 800369a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800369c <matvecprod>:

void matvecprod(int32_t m, int32_t n, float A[m][n], float b[n], float c[m], bool reset) {
 800369c:	b5b0      	push	{r4, r5, r7, lr}
 800369e:	b088      	sub	sp, #32
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
 80036aa:	68bd      	ldr	r5, [r7, #8]
 80036ac:	1e6b      	subs	r3, r5, #1
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	462b      	mov	r3, r5
 80036b2:	4619      	mov	r1, r3
 80036b4:	f04f 0200 	mov.w	r2, #0
 80036b8:	f04f 0300 	mov.w	r3, #0
 80036bc:	f04f 0400 	mov.w	r4, #0
 80036c0:	0154      	lsls	r4, r2, #5
 80036c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80036c6:	014b      	lsls	r3, r1, #5
	if (reset) {
 80036c8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d006      	beq.n	80036de <matvecprod+0x42>
		memset(c, 0, m * sizeof(c[0]));
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	461a      	mov	r2, r3
 80036d6:	2100      	movs	r1, #0
 80036d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80036da:	f016 ff44 	bl	801a566 <memset>
	}
	for(int i = 0; i < m; i++){
 80036de:	2300      	movs	r3, #0
 80036e0:	61bb      	str	r3, [r7, #24]
 80036e2:	e02e      	b.n	8003742 <matvecprod+0xa6>
        for(int j = 0; j < n; j++){
 80036e4:	2300      	movs	r3, #0
 80036e6:	61fb      	str	r3, [r7, #28]
 80036e8:	e024      	b.n	8003734 <matvecprod+0x98>
            c[i] += A[i][j] * b[j];
 80036ea:	462a      	mov	r2, r5
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	fb03 f302 	mul.w	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	441a      	add	r2, r3
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	ed93 7a00 	vldr	s14, [r3]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	683a      	ldr	r2, [r7, #0]
 8003708:	4413      	add	r3, r2
 800370a:	edd3 7a00 	vldr	s15, [r3]
 800370e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003718:	4413      	add	r3, r2
 800371a:	edd3 7a00 	vldr	s15, [r3]
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003724:	4413      	add	r3, r2
 8003726:	ee77 7a27 	vadd.f32	s15, s14, s15
 800372a:	edc3 7a00 	vstr	s15, [r3]
        for(int j = 0; j < n; j++){
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3301      	adds	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	69fa      	ldr	r2, [r7, #28]
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	429a      	cmp	r2, r3
 800373a:	dbd6      	blt.n	80036ea <matvecprod+0x4e>
	for(int i = 0; i < m; i++){
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	3301      	adds	r3, #1
 8003740:	61bb      	str	r3, [r7, #24]
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	429a      	cmp	r2, r3
 8003748:	dbcc      	blt.n	80036e4 <matvecprod+0x48>
        }
    }
}
 800374a:	bf00      	nop
 800374c:	3720      	adds	r7, #32
 800374e:	46bd      	mov	sp, r7
 8003750:	bdb0      	pop	{r4, r5, r7, pc}

08003752 <lower_triangular_inverse>:
	}
}

/* computes in-place the inverse of the lower triangular matrix L */
/* http://www.mymathlib.com/matrices/linearsystems/triangular.html */
int32_t lower_triangular_inverse(int32_t n, float *L) {
 8003752:	b480      	push	{r7}
 8003754:	b08b      	sub	sp, #44	; 0x2c
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
   int32_t i, j, k;
   float *p_i, *p_j, *p_k;
   float sum;

    /* Invert the diagonal elements of the lower triangular matrix L. */
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	613b      	str	r3, [r7, #16]
 8003764:	e01d      	b.n	80037a2 <lower_triangular_inverse+0x50>
        if (*p_k == 0.0) return -1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	edd3 7a00 	vldr	s15, [r3]
 800376c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003774:	d102      	bne.n	800377c <lower_triangular_inverse+0x2a>
 8003776:	f04f 33ff 	mov.w	r3, #4294967295
 800377a:	e076      	b.n	800386a <lower_triangular_inverse+0x118>
        else *p_k = 1.0 / *p_k;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	ed93 7a00 	vldr	s14, [r3]
 8003782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003786:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	edc3 7a00 	vstr	s15, [r3]
    for (k = 0, p_k = L; k < n; p_k += (n + 1), k++) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3301      	adds	r3, #1
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4413      	add	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	3301      	adds	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
 80037a2:	69fa      	ldr	r2, [r7, #28]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	429a      	cmp	r2, r3
 80037a8:	dbdd      	blt.n	8003766 <lower_triangular_inverse+0x14>
    }

    /* Invert the remaining lower triangular matrix L row by row. */
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 80037aa:	2301      	movs	r3, #1
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	4413      	add	r3, r2
 80037b6:	61bb      	str	r3, [r7, #24]
 80037b8:	e052      	b.n	8003860 <lower_triangular_inverse+0x10e>
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 80037ba:	2300      	movs	r3, #0
 80037bc:	623b      	str	r3, [r7, #32]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	e041      	b.n	8003848 <lower_triangular_inverse+0xf6>
            sum = 0.0;
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	61fb      	str	r3, [r7, #28]
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	613b      	str	r3, [r7, #16]
 80037d2:	e01b      	b.n	800380c <lower_triangular_inverse+0xba>
                sum += *(p_i + k) * *(p_k + j);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4413      	add	r3, r2
 80037dc:	ed93 7a00 	vldr	s14, [r3]
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4413      	add	r3, r2
 80037e8:	edd3 7a00 	vldr	s15, [r3]
 80037ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037f0:	ed97 7a03 	vldr	s14, [r7, #12]
 80037f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f8:	edc7 7a03 	vstr	s15, [r7, #12]
            for (k = j, p_k = p_j; k < i; k++, p_k += n)
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	3301      	adds	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	4413      	add	r3, r2
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	69fa      	ldr	r2, [r7, #28]
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	429a      	cmp	r2, r3
 8003812:	dbdf      	blt.n	80037d4 <lower_triangular_inverse+0x82>
            *(p_i + j) = - *(p_i + i) * sum;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	4413      	add	r3, r2
 800381c:	edd3 7a00 	vldr	s15, [r3]
 8003820:	eeb1 7a67 	vneg.f32	s14, s15
 8003824:	6a3b      	ldr	r3, [r7, #32]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	69ba      	ldr	r2, [r7, #24]
 800382a:	4413      	add	r3, r2
 800382c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003830:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003834:	edc3 7a00 	vstr	s15, [r3]
        for (j = 0, p_j = L; j < i; p_j += n, j++) {
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	4413      	add	r3, r2
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	3301      	adds	r3, #1
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3a      	ldr	r2, [r7, #32]
 800384a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384c:	429a      	cmp	r2, r3
 800384e:	dbb9      	blt.n	80037c4 <lower_triangular_inverse+0x72>
    for (i = 1, p_i = L + n; i < n; i++, p_i += n) {
 8003850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003852:	3301      	adds	r3, #1
 8003854:	627b      	str	r3, [r7, #36]	; 0x24
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	009b      	lsls	r3, r3, #2
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4413      	add	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
 8003860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	429a      	cmp	r2, r3
 8003866:	dba8      	blt.n	80037ba <lower_triangular_inverse+0x68>
        }
    }

    return 0;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	372c      	adds	r7, #44	; 0x2c
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
	...

08003878 <cholesky>:

/* computes the cholesky decomposition */
/* https://rosettacode.org/wiki/Cholesky_decomposition#C */
void cholesky(int32_t n, float A[n][n], float L[n][n]) {
 8003878:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800387c:	b08b      	sub	sp, #44	; 0x2c
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	60b9      	str	r1, [r7, #8]
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	68fe      	ldr	r6, [r7, #12]
 8003888:	1e73      	subs	r3, r6, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	4633      	mov	r3, r6
 800388e:	4619      	mov	r1, r3
 8003890:	f04f 0200 	mov.w	r2, #0
 8003894:	f04f 0300 	mov.w	r3, #0
 8003898:	f04f 0400 	mov.w	r4, #0
 800389c:	0154      	lsls	r4, r2, #5
 800389e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038a2:	014b      	lsls	r3, r1, #5
 80038a4:	68fd      	ldr	r5, [r7, #12]
 80038a6:	1e6b      	subs	r3, r5, #1
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	462b      	mov	r3, r5
 80038ac:	4619      	mov	r1, r3
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	f04f 0400 	mov.w	r4, #0
 80038ba:	0154      	lsls	r4, r2, #5
 80038bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80038c0:	014b      	lsls	r3, r1, #5
    memset(L, 0, n * n * sizeof(L[0][0]));
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	68fa      	ldr	r2, [r7, #12]
 80038c6:	fb02 f303 	mul.w	r3, r2, r3
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	461a      	mov	r2, r3
 80038ce:	2100      	movs	r1, #0
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f016 fe48 	bl	801a566 <memset>
    for (int i = 0; i < n; i++)
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	e09f      	b.n	8003a1c <cholesky+0x1a4>
        for (int j = 0; j < (i+1); j++) {
 80038dc:	2300      	movs	r3, #0
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	e093      	b.n	8003a0a <cholesky+0x192>
            float s = 0;
 80038e2:	f04f 0300 	mov.w	r3, #0
 80038e6:	623b      	str	r3, [r7, #32]
            for (int k = 0; k < j; k++)
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
 80038ec:	e022      	b.n	8003934 <cholesky+0xbc>
                s += L[i][k] * L[j][k];
 80038ee:	462a      	mov	r2, r5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	fb03 f302 	mul.w	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	441a      	add	r2, r3
 80038fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	ed93 7a00 	vldr	s14, [r3]
 8003906:	462a      	mov	r2, r5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	fb03 f302 	mul.w	r3, r3, r2
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	441a      	add	r2, r3
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	edd3 7a00 	vldr	s15, [r3]
 800391e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003922:	ed97 7a08 	vldr	s14, [r7, #32]
 8003926:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392a:	edc7 7a08 	vstr	s15, [r7, #32]
            for (int k = 0; k < j; k++)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	3301      	adds	r3, #1
 8003932:	627b      	str	r3, [r7, #36]	; 0x24
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	429a      	cmp	r2, r3
 800393a:	dbd8      	blt.n	80038ee <cholesky+0x76>
            L[i][j] = (i == j) ? sqrtf(A[i][i] - s) : (1.0 / L[j][j] * (A[i][j] - s));
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	429a      	cmp	r2, r3
 8003942:	d116      	bne.n	8003972 <cholesky+0xfa>
 8003944:	4632      	mov	r2, r6
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	fb03 f302 	mul.w	r3, r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	441a      	add	r2, r3
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	4413      	add	r3, r2
 8003958:	ed93 7a00 	vldr	s14, [r3]
 800395c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003964:	eeb0 0a67 	vmov.f32	s0, s15
 8003968:	f017 fdd0 	bl	801b50c <sqrtf>
 800396c:	ee10 1a10 	vmov	r1, s0
 8003970:	e03d      	b.n	80039ee <cholesky+0x176>
 8003972:	462a      	mov	r2, r5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	fb03 f302 	mul.w	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	441a      	add	r2, r3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	4413      	add	r3, r2
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4618      	mov	r0, r3
 800398a:	f7fc fdfd 	bl	8000588 <__aeabi_f2d>
 800398e:	4603      	mov	r3, r0
 8003990:	460c      	mov	r4, r1
 8003992:	461a      	mov	r2, r3
 8003994:	4623      	mov	r3, r4
 8003996:	f04f 0000 	mov.w	r0, #0
 800399a:	4925      	ldr	r1, [pc, #148]	; (8003a30 <cholesky+0x1b8>)
 800399c:	f7fc ff76 	bl	800088c <__aeabi_ddiv>
 80039a0:	4603      	mov	r3, r0
 80039a2:	460c      	mov	r4, r1
 80039a4:	4698      	mov	r8, r3
 80039a6:	46a1      	mov	r9, r4
 80039a8:	4632      	mov	r2, r6
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	fb03 f302 	mul.w	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	441a      	add	r2, r3
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	4413      	add	r3, r2
 80039bc:	ed93 7a00 	vldr	s14, [r3]
 80039c0:	edd7 7a08 	vldr	s15, [r7, #32]
 80039c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039c8:	ee17 0a90 	vmov	r0, s15
 80039cc:	f7fc fddc 	bl	8000588 <__aeabi_f2d>
 80039d0:	4603      	mov	r3, r0
 80039d2:	460c      	mov	r4, r1
 80039d4:	461a      	mov	r2, r3
 80039d6:	4623      	mov	r3, r4
 80039d8:	4640      	mov	r0, r8
 80039da:	4649      	mov	r1, r9
 80039dc:	f7fc fe2c 	bl	8000638 <__aeabi_dmul>
 80039e0:	4603      	mov	r3, r0
 80039e2:	460c      	mov	r4, r1
 80039e4:	4618      	mov	r0, r3
 80039e6:	4621      	mov	r1, r4
 80039e8:	f7fd f8f6 	bl	8000bd8 <__aeabi_d2f>
 80039ec:	4601      	mov	r1, r0
 80039ee:	462a      	mov	r2, r5
 80039f0:	69bb      	ldr	r3, [r7, #24]
 80039f2:	fb03 f302 	mul.w	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	441a      	add	r2, r3
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4413      	add	r3, r2
 8003a02:	6019      	str	r1, [r3, #0]
        for (int j = 0; j < (i+1); j++) {
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	3301      	adds	r3, #1
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	f6ff af66 	blt.w	80038e2 <cholesky+0x6a>
    for (int i = 0; i < n; i++)
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	3301      	adds	r3, #1
 8003a1a:	61bb      	str	r3, [r7, #24]
 8003a1c:	69ba      	ldr	r2, [r7, #24]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	f6ff af5b 	blt.w	80038dc <cholesky+0x64>
        }
}
 8003a26:	bf00      	nop
 8003a28:	372c      	adds	r7, #44	; 0x2c
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003a30:	3ff00000 	.word	0x3ff00000

08003a34 <cholesky_inverse>:

/* computes the inverse of a Hermitian, positive-definite matrix of dimension n x n using cholesky decomposition*/
/* Krishnamoorthy, Aravindh, and Deepak Menon. "Matrix inversion using Cholesky decomposition." */
/* 2013 signal processing: Algorithms, architectures, arrangements, and applications (SPA). IEEE, 2013. */
/* the inverse has a big O complexity of n^3 */
void cholesky_inverse(int32_t n, float A[n][n], float inverse[n][n], float lambda) {
 8003a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a38:	b090      	sub	sp, #64	; 0x40
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	60f8      	str	r0, [r7, #12]
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	ed87 0a00 	vstr	s0, [r7]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	1e5a      	subs	r2, r3, #1
 8003a4a:	63ba      	str	r2, [r7, #56]	; 0x38
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	f04f 0400 	mov.w	r4, #0
 8003a5a:	0154      	lsls	r4, r2, #5
 8003a5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a60:	014b      	lsls	r3, r1, #5
 8003a62:	68fd      	ldr	r5, [r7, #12]
 8003a64:	1e6b      	subs	r3, r5, #1
 8003a66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a68:	462b      	mov	r3, r5
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	f04f 0200 	mov.w	r2, #0
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	f04f 0400 	mov.w	r4, #0
 8003a78:	0154      	lsls	r4, r2, #5
 8003a7a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a7e:	014b      	lsls	r3, r1, #5
 8003a80:	466b      	mov	r3, sp
 8003a82:	4699      	mov	r9, r3
    /* add damping factor to avoid singularities. */
	/* if no damping is required set lambda to 0.0 */
	float A_dash[n][n];
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	68fe      	ldr	r6, [r7, #12]
 8003a88:	1e43      	subs	r3, r0, #1
 8003a8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	f04f 0400 	mov.w	r4, #0
 8003a9c:	0154      	lsls	r4, r2, #5
 8003a9e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003aa2:	014b      	lsls	r3, r1, #5
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003aaa:	1e73      	subs	r3, r6, #1
 8003aac:	623b      	str	r3, [r7, #32]
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	f04f 0200 	mov.w	r2, #0
 8003ab6:	4633      	mov	r3, r6
 8003ab8:	f04f 0400 	mov.w	r4, #0
 8003abc:	fb03 fe02 	mul.w	lr, r3, r2
 8003ac0:	fb01 fc04 	mul.w	ip, r1, r4
 8003ac4:	44f4      	add	ip, lr
 8003ac6:	fba1 3403 	umull	r3, r4, r1, r3
 8003aca:	eb0c 0204 	add.w	r2, ip, r4
 8003ace:	4614      	mov	r4, r2
 8003ad0:	f04f 0100 	mov.w	r1, #0
 8003ad4:	f04f 0200 	mov.w	r2, #0
 8003ad8:	0162      	lsls	r2, r4, #5
 8003ada:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003ade:	0159      	lsls	r1, r3, #5
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	4633      	mov	r3, r6
 8003aea:	f04f 0400 	mov.w	r4, #0
 8003aee:	fb03 fe02 	mul.w	lr, r3, r2
 8003af2:	fb01 fc04 	mul.w	ip, r1, r4
 8003af6:	44f4      	add	ip, lr
 8003af8:	fba1 3403 	umull	r3, r4, r1, r3
 8003afc:	eb0c 0204 	add.w	r2, ip, r4
 8003b00:	4614      	mov	r4, r2
 8003b02:	f04f 0100 	mov.w	r1, #0
 8003b06:	f04f 0200 	mov.w	r2, #0
 8003b0a:	0162      	lsls	r2, r4, #5
 8003b0c:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003b10:	0159      	lsls	r1, r3, #5
 8003b12:	4603      	mov	r3, r0
 8003b14:	4632      	mov	r2, r6
 8003b16:	fb02 f303 	mul.w	r3, r2, r3
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	3303      	adds	r3, #3
 8003b1e:	3307      	adds	r3, #7
 8003b20:	08db      	lsrs	r3, r3, #3
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	ebad 0d03 	sub.w	sp, sp, r3
 8003b28:	466b      	mov	r3, sp
 8003b2a:	3303      	adds	r3, #3
 8003b2c:	089b      	lsrs	r3, r3, #2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	61fb      	str	r3, [r7, #28]
    memcpy(A_dash, A, n * n * sizeof(A[0][0]));
 8003b32:	69f8      	ldr	r0, [r7, #28]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	fb02 f303 	mul.w	r3, r2, r3
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68b9      	ldr	r1, [r7, #8]
 8003b42:	f016 fd05 	bl	801a550 <memcpy>
    for (int i = 0; i < n; i++) {
 8003b46:	2300      	movs	r3, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	e022      	b.n	8003b92 <cholesky_inverse+0x15e>
        A_dash[i][i] = A_dash[i][i] + lambda * lambda;
 8003b4c:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003b50:	69fa      	ldr	r2, [r7, #28]
 8003b52:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b54:	fb01 f103 	mul.w	r1, r1, r3
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	440b      	add	r3, r1
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	4413      	add	r3, r2
 8003b60:	ed93 7a00 	vldr	s14, [r3]
 8003b64:	edd7 6a00 	vldr	s13, [r7]
 8003b68:	edd7 7a00 	vldr	s15, [r7]
 8003b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b70:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003b74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b78:	69fa      	ldr	r2, [r7, #28]
 8003b7a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b7c:	fb01 f103 	mul.w	r1, r1, r3
 8003b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b82:	440b      	add	r3, r1
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < n; i++) {
 8003b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8e:	3301      	adds	r3, #1
 8003b90:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	429a      	cmp	r2, r3
 8003b98:	dbd8      	blt.n	8003b4c <cholesky_inverse+0x118>
	}

    /* call cholesky decomposition to get lower triangular matrix L */
    float L[n][n];
 8003b9a:	68f8      	ldr	r0, [r7, #12]
 8003b9c:	68fe      	ldr	r6, [r7, #12]
 8003b9e:	466b      	mov	r3, sp
 8003ba0:	469a      	mov	sl, r3
 8003ba2:	1e43      	subs	r3, r0, #1
 8003ba4:	61bb      	str	r3, [r7, #24]
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	4619      	mov	r1, r3
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	f04f 0400 	mov.w	r4, #0
 8003bb6:	0154      	lsls	r4, r2, #5
 8003bb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003bbc:	014b      	lsls	r3, r1, #5
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	ea4f 0883 	mov.w	r8, r3, lsl #2
 8003bc4:	1e73      	subs	r3, r6, #1
 8003bc6:	617b      	str	r3, [r7, #20]
 8003bc8:	4603      	mov	r3, r0
 8003bca:	4619      	mov	r1, r3
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	4633      	mov	r3, r6
 8003bd2:	f04f 0400 	mov.w	r4, #0
 8003bd6:	fb03 fe02 	mul.w	lr, r3, r2
 8003bda:	fb01 fc04 	mul.w	ip, r1, r4
 8003bde:	44f4      	add	ip, lr
 8003be0:	fba1 3403 	umull	r3, r4, r1, r3
 8003be4:	eb0c 0204 	add.w	r2, ip, r4
 8003be8:	4614      	mov	r4, r2
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	0162      	lsls	r2, r4, #5
 8003bf4:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003bf8:	0159      	lsls	r1, r3, #5
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	4619      	mov	r1, r3
 8003bfe:	f04f 0200 	mov.w	r2, #0
 8003c02:	4633      	mov	r3, r6
 8003c04:	f04f 0400 	mov.w	r4, #0
 8003c08:	fb03 fe02 	mul.w	lr, r3, r2
 8003c0c:	fb01 fc04 	mul.w	ip, r1, r4
 8003c10:	44f4      	add	ip, lr
 8003c12:	fba1 3403 	umull	r3, r4, r1, r3
 8003c16:	eb0c 0204 	add.w	r2, ip, r4
 8003c1a:	4614      	mov	r4, r2
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	0162      	lsls	r2, r4, #5
 8003c26:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
 8003c2a:	0159      	lsls	r1, r3, #5
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	4632      	mov	r2, r6
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	3303      	adds	r3, #3
 8003c38:	3307      	adds	r3, #7
 8003c3a:	08db      	lsrs	r3, r3, #3
 8003c3c:	00db      	lsls	r3, r3, #3
 8003c3e:	ebad 0d03 	sub.w	sp, sp, r3
 8003c42:	466b      	mov	r3, sp
 8003c44:	3303      	adds	r3, #3
 8003c46:	089b      	lsrs	r3, r3, #2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	613b      	str	r3, [r7, #16]
    cholesky(n, A_dash, L);
 8003c4c:	69fb      	ldr	r3, [r7, #28]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	4619      	mov	r1, r3
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fe10 	bl	8003878 <cholesky>

    /* compute lower triangular inverse in-place */
    lower_triangular_inverse(n, &L[0][0]);
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	68f8      	ldr	r0, [r7, #12]
 8003c5e:	f7ff fd78 	bl	8003752 <lower_triangular_inverse>

    /* compute matrix inverse A_inv = L_T^(-1) * L^(-1) */
    memset(inverse, 0, n * n * sizeof(inverse[0][0]));
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	2100      	movs	r1, #0
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f016 fc78 	bl	801a566 <memset>
    for(int i = 0; i < n; i++){
 8003c76:	2300      	movs	r3, #0
 8003c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c7a:	e04e      	b.n	8003d1a <cholesky_inverse+0x2e6>
        for(int j = 0; j < n; j++){
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	633b      	str	r3, [r7, #48]	; 0x30
 8003c80:	e044      	b.n	8003d0c <cholesky_inverse+0x2d8>
            for(int k = max(i, j); k < n; k++){
 8003c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	4293      	cmp	r3, r2
 8003c88:	bfb8      	it	lt
 8003c8a:	4613      	movlt	r3, r2
 8003c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c8e:	e036      	b.n	8003cfe <cholesky_inverse+0x2ca>
                inverse[i][j] +=  L[k][i] * L[k][j];
 8003c90:	462a      	mov	r2, r5
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	fb03 f302 	mul.w	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	441a      	add	r2, r3
 8003c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	4413      	add	r3, r2
 8003ca4:	ed93 7a00 	vldr	s14, [r3]
 8003ca8:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cb0:	fb01 f103 	mul.w	r1, r1, r3
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	440b      	add	r3, r1
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	edd3 6a00 	vldr	s13, [r3]
 8003cc0:	ea4f 0398 	mov.w	r3, r8, lsr #2
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cc8:	fb01 f103 	mul.w	r1, r1, r3
 8003ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cce:	440b      	add	r3, r1
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	4413      	add	r3, r2
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003cdc:	462a      	mov	r2, r5
 8003cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce0:	fb03 f302 	mul.w	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	441a      	add	r2, r3
 8003cea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	edc3 7a00 	vstr	s15, [r3]
            for(int k = max(i, j); k < n; k++){
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	429a      	cmp	r2, r3
 8003d04:	dbc4      	blt.n	8003c90 <cholesky_inverse+0x25c>
        for(int j = 0; j < n; j++){
 8003d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d08:	3301      	adds	r3, #1
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	dbb6      	blt.n	8003c82 <cholesky_inverse+0x24e>
    for(int i = 0; i < n; i++){
 8003d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d16:	3301      	adds	r3, #1
 8003d18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	dbac      	blt.n	8003c7c <cholesky_inverse+0x248>
 8003d22:	46d5      	mov	sp, sl
 8003d24:	46cd      	mov	sp, r9
            }
        }
    }
}
 8003d26:	bf00      	nop
 8003d28:	3740      	adds	r7, #64	; 0x40
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003d30 <AcquireMutex>:
 *  Created on: Jun 19, 2020
 *      Author: Jonas
 */
#include "Util/mutex.h"

osStatus_t AcquireMutex(custom_mutex_t *custom_mutex){
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b084      	sub	sp, #16
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
	osStatus_t status = osOK;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]
	status = osMutexAcquire(custom_mutex->mutex, 10);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	210a      	movs	r1, #10
 8003d42:	4618      	mov	r0, r3
 8003d44:	f012 f8da 	bl	8015efc <osMutexAcquire>
 8003d48:	60f8      	str	r0, [r7, #12]
	if(status == osOK){
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d104      	bne.n	8003d5a <AcquireMutex+0x2a>
		custom_mutex->counter++;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	1c5a      	adds	r2, r3, #1
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	605a      	str	r2, [r3, #4]
	}

	return status;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <ReleaseMutex>:

osStatus_t ReleaseMutex(custom_mutex_t *custom_mutex){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	return osMutexRelease(custom_mutex->mutex);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f012 f921 	bl	8015fb8 <osMutexRelease>
 8003d76:	4603      	mov	r3, r0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3708      	adds	r7, #8
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <ReadMutex>:

osStatus_t ReadMutex(custom_mutex_t *custom_mutex,void const* global_data, void* const local_data, int32_t size){
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b0a0      	sub	sp, #128	; 0x80
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
 8003d8c:	603b      	str	r3, [r7, #0]
	uint8_t buffer[100] = { 0 };
 8003d8e:	f107 0310 	add.w	r3, r7, #16
 8003d92:	2264      	movs	r2, #100	; 0x64
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f016 fbe5 	bl	801a566 <memset>
	uint32_t counter = custom_mutex->counter;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	67fb      	str	r3, [r7, #124]	; 0x7c
	osStatus_t status = osError;
 8003da2:	f04f 33ff 	mov.w	r3, #4294967295
 8003da6:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i = 0; i < 5; i++){
 8003da8:	2300      	movs	r3, #0
 8003daa:	677b      	str	r3, [r7, #116]	; 0x74
 8003dac:	e01b      	b.n	8003de6 <ReadMutex+0x66>
		memcpy(&buffer[0], global_data, size);
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	f107 0310 	add.w	r3, r7, #16
 8003db4:	68b9      	ldr	r1, [r7, #8]
 8003db6:	4618      	mov	r0, r3
 8003db8:	f016 fbca 	bl	801a550 <memcpy>
		if(custom_mutex->counter == counter){
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d109      	bne.n	8003dda <ReadMutex+0x5a>
			memcpy(local_data, buffer, size);
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	f107 0310 	add.w	r3, r7, #16
 8003dcc:	4619      	mov	r1, r3
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f016 fbbe 	bl	801a550 <memcpy>
			status = osOK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	67bb      	str	r3, [r7, #120]	; 0x78
			break;
 8003dd8:	e008      	b.n	8003dec <ReadMutex+0x6c>
		}
		counter = custom_mutex->counter;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	67fb      	str	r3, [r7, #124]	; 0x7c
	for(int i = 0; i < 5; i++){
 8003de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de2:	3301      	adds	r3, #1
 8003de4:	677b      	str	r3, [r7, #116]	; 0x74
 8003de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de8:	2b04      	cmp	r3, #4
 8003dea:	dde0      	ble.n	8003dae <ReadMutex+0x2e>
	}
	return status;
 8003dec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3780      	adds	r7, #128	; 0x80
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
	...

08003df8 <ReadMutexStateEst>:

osStatus_t ReadMutexStateEst(custom_mutex_t *custom_mutex, baro_data_t *baro, imu_data_t *imu, state_est_meas_t *state, uint32_t sb_number){
 8003df8:	b590      	push	{r4, r7, lr}
 8003dfa:	b08d      	sub	sp, #52	; 0x34
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
 8003e04:	603b      	str	r3, [r7, #0]
	/* Buffer */
	uint32_t Placeholder_timestamps[2] = { 0 };
 8003e06:	f107 031c 	add.w	r3, r7, #28
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	605a      	str	r2, [r3, #4]
	float Placeholder_measurement[3] = { 0 };
 8003e10:	f107 0310 	add.w	r3, r7, #16
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]

	/* Status */
	osStatus_t status = osError;
 8003e1c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e20:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Counter */
	uint32_t counter = custom_mutex->counter;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28

	for(int i = 0; i < 5; i++){
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e2c:	e07b      	b.n	8003f26 <ReadMutexStateEst+0x12e>
		/* Write in Buffer */
		Placeholder_measurement[0] = (float) (baro->pressure);
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	ee07 3a90 	vmov	s15, r3
 8003e36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e3a:	edc7 7a04 	vstr	s15, [r7, #16]
		Placeholder_timestamps[0] = baro->ts;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	61fb      	str	r3, [r7, #28]
		Placeholder_measurement[1] = ((float) (imu->acc_z)) / 1024;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8003e4a:	ee07 3a90 	vmov	s15, r3
 8003e4e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e52:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8003f40 <ReadMutexStateEst+0x148>
 8003e56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e5a:	edc7 7a05 	vstr	s15, [r7, #20]
		Placeholder_timestamps[1] = imu->ts;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	623b      	str	r3, [r7, #32]
		Placeholder_measurement[2] = ((float) (baro->temperature)) / 100;
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	ee07 3a90 	vmov	s15, r3
 8003e6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e70:	eddf 6a34 	vldr	s13, [pc, #208]	; 8003f44 <ReadMutexStateEst+0x14c>
 8003e74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003e78:	edc7 7a06 	vstr	s15, [r7, #24]

		/* Check if Mutex was aquired */
		if(custom_mutex->counter == counter){
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d149      	bne.n	8003f1a <ReadMutexStateEst+0x122>
			state->baro_data[sb_number-1].pressure = Placeholder_measurement[0];
 8003e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e88:	1e5a      	subs	r2, r3, #1
 8003e8a:	6939      	ldr	r1, [r7, #16]
 8003e8c:	6838      	ldr	r0, [r7, #0]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	4413      	add	r3, r2
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	4403      	add	r3, r0
 8003e98:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].temperature = Placeholder_measurement[2];
 8003e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e9c:	1e5a      	subs	r2, r3, #1
 8003e9e:	69b9      	ldr	r1, [r7, #24]
 8003ea0:	6838      	ldr	r0, [r7, #0]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	005b      	lsls	r3, r3, #1
 8003ea6:	4413      	add	r3, r2
 8003ea8:	009b      	lsls	r3, r3, #2
 8003eaa:	4403      	add	r3, r0
 8003eac:	3304      	adds	r3, #4
 8003eae:	6019      	str	r1, [r3, #0]
			state->baro_data[sb_number-1].ts = Placeholder_timestamps[0];
 8003eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eb2:	1e5a      	subs	r2, r3, #1
 8003eb4:	69f9      	ldr	r1, [r7, #28]
 8003eb6:	6838      	ldr	r0, [r7, #0]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	005b      	lsls	r3, r3, #1
 8003ebc:	4413      	add	r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	4403      	add	r3, r0
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	6019      	str	r1, [r3, #0]

			state->imu_data[sb_number-1].acc_x = Placeholder_measurement[1] * GRAVITATION;
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fb5d 	bl	8000588 <__aeabi_f2d>
 8003ece:	a31a      	add	r3, pc, #104	; (adr r3, 8003f38 <ReadMutexStateEst+0x140>)
 8003ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed4:	f7fc fbb0 	bl	8000638 <__aeabi_dmul>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	460c      	mov	r4, r1
 8003edc:	4619      	mov	r1, r3
 8003ede:	4622      	mov	r2, r4
 8003ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ee2:	1e5c      	subs	r4, r3, #1
 8003ee4:	4608      	mov	r0, r1
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	f7fc fe76 	bl	8000bd8 <__aeabi_d2f>
 8003eec:	4601      	mov	r1, r0
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	4623      	mov	r3, r4
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	1b1b      	subs	r3, r3, r4
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4413      	add	r3, r2
 8003efa:	3330      	adds	r3, #48	; 0x30
 8003efc:	6019      	str	r1, [r3, #0]
			state->imu_data[sb_number-1].ts = Placeholder_timestamps[1];
 8003efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f00:	1e5a      	subs	r2, r3, #1
 8003f02:	6a39      	ldr	r1, [r7, #32]
 8003f04:	6838      	ldr	r0, [r7, #0]
 8003f06:	4613      	mov	r3, r2
 8003f08:	00db      	lsls	r3, r3, #3
 8003f0a:	1a9b      	subs	r3, r3, r2
 8003f0c:	009b      	lsls	r3, r3, #2
 8003f0e:	4403      	add	r3, r0
 8003f10:	333c      	adds	r3, #60	; 0x3c
 8003f12:	6019      	str	r1, [r3, #0]
			status = osOK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	62fb      	str	r3, [r7, #44]	; 0x2c
			break;
 8003f18:	e008      	b.n	8003f2c <ReadMutexStateEst+0x134>
		}
		counter = custom_mutex->counter;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
	for(int i = 0; i < 5; i++){
 8003f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f22:	3301      	adds	r3, #1
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	2b04      	cmp	r3, #4
 8003f2a:	dd80      	ble.n	8003e2e <ReadMutexStateEst+0x36>
	}


	return status;
 8003f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3734      	adds	r7, #52	; 0x34
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd90      	pop	{r4, r7, pc}
 8003f36:	bf00      	nop
 8003f38:	51eb851f 	.word	0x51eb851f
 8003f3c:	40239eb8 	.word	0x40239eb8
 8003f40:	44800000 	.word	0x44800000
 8003f44:	42c80000 	.word	0x42c80000

08003f48 <logSensor>:
 %%	print a percent sign
 \%	print a percent sign
 */

osStatus_t logSensor(timestamp_t ts, board_id_t sensor_board_id,
		sensor_type_e sensor_type, void *sensor_data) {
 8003f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f4a:	b0bd      	sub	sp, #244	; 0xf4
 8003f4c:	af0a      	add	r7, sp, #40	; 0x28
 8003f4e:	61f8      	str	r0, [r7, #28]
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	460b      	mov	r3, r1
 8003f54:	76fb      	strb	r3, [r7, #27]
 8003f56:	4613      	mov	r3, r2
 8003f58:	76bb      	strb	r3, [r7, #26]
	log_entry_t log_entry = { 0 };
 8003f5a:	f107 0320 	add.w	r3, r7, #32
 8003f5e:	2296      	movs	r2, #150	; 0x96
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f016 faff 	bl	801a566 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%hi,%d,", ts, SENSOR,
 8003f68:	7efb      	ldrb	r3, [r7, #27]
 8003f6a:	7eba      	ldrb	r2, [r7, #26]
 8003f6c:	f107 0020 	add.w	r0, r7, #32
 8003f70:	9202      	str	r2, [sp, #8]
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	2301      	movs	r3, #1
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4a7a      	ldr	r2, [pc, #488]	; (8004164 <logSensor+0x21c>)
 8003f7c:	2196      	movs	r1, #150	; 0x96
 8003f7e:	f016 fbb3 	bl	801a6e8 <sniprintf>
			sensor_board_id, sensor_type);

	switch (sensor_type) {
 8003f82:	7ebb      	ldrb	r3, [r7, #26]
 8003f84:	3b01      	subs	r3, #1
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	f200 80c8 	bhi.w	800411c <logSensor+0x1d4>
 8003f8c:	a201      	add	r2, pc, #4	; (adr r2, 8003f94 <logSensor+0x4c>)
 8003f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f92:	bf00      	nop
 8003f94:	08003fa5 	.word	0x08003fa5
 8003f98:	08003fdf 	.word	0x08003fdf
 8003f9c:	08004051 	.word	0x08004051
 8003fa0:	080040d5 	.word	0x080040d5
	case BARO: {
		baro_data_t *baro_data_ptr = (baro_data_t*) sensor_data;
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		snprintf(log_entry.str + strlen(log_entry.str),
 8003faa:	f107 0320 	add.w	r3, r7, #32
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f7fc f92e 	bl	8000210 <strlen>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f107 0320 	add.w	r3, r7, #32
 8003fba:	1898      	adds	r0, r3, r2
 8003fbc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fc0:	6819      	ldr	r1, [r3, #0]
 8003fc2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003fcc:	6892      	ldr	r2, [r2, #8]
 8003fce:	9201      	str	r2, [sp, #4]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4a64      	ldr	r2, [pc, #400]	; (8004168 <logSensor+0x220>)
 8003fd6:	2196      	movs	r1, #150	; 0x96
 8003fd8:	f016 fb86 	bl	801a6e8 <sniprintf>
		LOG_BUFFER_LEN, "%ld,%ld,%lu\n", baro_data_ptr->pressure,
				baro_data_ptr->temperature, baro_data_ptr->ts);
	}
		break;
 8003fdc:	e0b4      	b.n	8004148 <logSensor+0x200>
	case IMU: {
		imu_data_t *imu_data_ptr = (imu_data_t*) sensor_data;
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		snprintf(log_entry.str + strlen(log_entry.str),
 8003fe4:	f107 0320 	add.w	r3, r7, #32
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f7fc f911 	bl	8000210 <strlen>
 8003fee:	4602      	mov	r2, r0
 8003ff0:	f107 0320 	add.w	r3, r7, #32
 8003ff4:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd,%hd,%hd,%lu\n", imu_data_ptr->acc_x,
 8003ff6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003ffa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 8003ffe:	469c      	mov	ip, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8004000:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004004:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004008:	461a      	mov	r2, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 800400a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800400e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004012:	4619      	mov	r1, r3
				imu_data_ptr->acc_y, imu_data_ptr->acc_z, imu_data_ptr->gyro_x,
 8004014:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004018:	f9b3 3000 	ldrsh.w	r3, [r3]
		snprintf(log_entry.str + strlen(log_entry.str),
 800401c:	461c      	mov	r4, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 800401e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004022:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004026:	461d      	mov	r5, r3
				imu_data_ptr->gyro_y, imu_data_ptr->gyro_z, imu_data_ptr->ts);
 8004028:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800402c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004030:	461e      	mov	r6, r3
 8004032:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	9305      	str	r3, [sp, #20]
 800403a:	9604      	str	r6, [sp, #16]
 800403c:	9503      	str	r5, [sp, #12]
 800403e:	9402      	str	r4, [sp, #8]
 8004040:	9101      	str	r1, [sp, #4]
 8004042:	9200      	str	r2, [sp, #0]
 8004044:	4663      	mov	r3, ip
 8004046:	4a49      	ldr	r2, [pc, #292]	; (800416c <logSensor+0x224>)
 8004048:	2196      	movs	r1, #150	; 0x96
 800404a:	f016 fb4d 	bl	801a6e8 <sniprintf>
	}
		break;
 800404e:	e07b      	b.n	8004148 <logSensor+0x200>
	case GPS: {
		gps_data_t *gps_data = (gps_data_t*) sensor_data;
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
		snprintf(log_entry.str + strlen(log_entry.str),
 8004056:	f107 0320 	add.w	r3, r7, #32
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc f8d8 	bl	8000210 <strlen>
 8004060:	4602      	mov	r2, r0
 8004062:	f107 0320 	add.w	r3, r7, #32
 8004066:	189d      	adds	r5, r3, r2
 8004068:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800406c:	681e      	ldr	r6, [r3, #0]
 800406e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004078:	6892      	ldr	r2, [r2, #8]
		LOG_BUFFER_LEN, "%ld,%ld,%ld,%d,%ld,%d,%ld,%d,%hd,%hd\n",
			gps_data->hour, gps_data->minute, gps_data->second, gps_data->lat_deg,
 800407a:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800407e:	7b09      	ldrb	r1, [r1, #12]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004080:	6139      	str	r1, [r7, #16]
 8004082:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8004086:	6909      	ldr	r1, [r1, #16]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 8004088:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800408c:	7d00      	ldrb	r0, [r0, #20]
		snprintf(log_entry.str + strlen(log_entry.str),
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8004094:	6980      	ldr	r0, [r0, #24]
			gps_data->lat_decimal, gps_data->lon_deg, gps_data->lon_decimal, gps_data->satellite,
 8004096:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 800409a:	7f64      	ldrb	r4, [r4, #29]
		snprintf(log_entry.str + strlen(log_entry.str),
 800409c:	60bc      	str	r4, [r7, #8]
			gps_data->altitude, gps_data->HDOP);
 800409e:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040a2:	8c24      	ldrh	r4, [r4, #32]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040a4:	607c      	str	r4, [r7, #4]
			gps_data->altitude, gps_data->HDOP);
 80040a6:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 80040aa:	8be4      	ldrh	r4, [r4, #30]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040ac:	9408      	str	r4, [sp, #32]
 80040ae:	687c      	ldr	r4, [r7, #4]
 80040b0:	9407      	str	r4, [sp, #28]
 80040b2:	68bc      	ldr	r4, [r7, #8]
 80040b4:	9406      	str	r4, [sp, #24]
 80040b6:	9005      	str	r0, [sp, #20]
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	9004      	str	r0, [sp, #16]
 80040bc:	9103      	str	r1, [sp, #12]
 80040be:	6939      	ldr	r1, [r7, #16]
 80040c0:	9102      	str	r1, [sp, #8]
 80040c2:	9201      	str	r2, [sp, #4]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	4633      	mov	r3, r6
 80040c8:	4a29      	ldr	r2, [pc, #164]	; (8004170 <logSensor+0x228>)
 80040ca:	2196      	movs	r1, #150	; 0x96
 80040cc:	4628      	mov	r0, r5
 80040ce:	f016 fb0b 	bl	801a6e8 <sniprintf>
	}
		break;
 80040d2:	e039      	b.n	8004148 <logSensor+0x200>
	case BATTERY: {
		battery_data_t *battery_data = (battery_data_t*) sensor_data;
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		snprintf(log_entry.str + strlen(log_entry.str),
 80040da:	f107 0320 	add.w	r3, r7, #32
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fc f896 	bl	8000210 <strlen>
 80040e4:	4602      	mov	r2, r0
 80040e6:	f107 0320 	add.w	r3, r7, #32
 80040ea:	1898      	adds	r0, r3, r2
		LOG_BUFFER_LEN, "%hd,%hd,%hd,%hd\n",
			battery_data->battery, battery_data->consumption,
 80040ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f0:	885b      	ldrh	r3, [r3, #2]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040f2:	461c      	mov	r4, r3
			battery_data->battery, battery_data->consumption,
 80040f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80040f8:	88db      	ldrh	r3, [r3, #6]
		snprintf(log_entry.str + strlen(log_entry.str),
 80040fa:	461a      	mov	r2, r3
			battery_data->current, battery_data->supply);
 80040fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004100:	889b      	ldrh	r3, [r3, #4]
		snprintf(log_entry.str + strlen(log_entry.str),
 8004102:	4619      	mov	r1, r3
			battery_data->current, battery_data->supply);
 8004104:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004108:	881b      	ldrh	r3, [r3, #0]
		snprintf(log_entry.str + strlen(log_entry.str),
 800410a:	9302      	str	r3, [sp, #8]
 800410c:	9101      	str	r1, [sp, #4]
 800410e:	9200      	str	r2, [sp, #0]
 8004110:	4623      	mov	r3, r4
 8004112:	4a18      	ldr	r2, [pc, #96]	; (8004174 <logSensor+0x22c>)
 8004114:	2196      	movs	r1, #150	; 0x96
 8004116:	f016 fae7 	bl	801a6e8 <sniprintf>
	}
		break;
 800411a:	e015      	b.n	8004148 <logSensor+0x200>
	default:
		snprintf(log_entry.str + strlen(log_entry.str),
 800411c:	f107 0320 	add.w	r3, r7, #32
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc f875 	bl	8000210 <strlen>
 8004126:	4602      	mov	r2, r0
 8004128:	f107 0320 	add.w	r3, r7, #32
 800412c:	4413      	add	r3, r2
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <logSensor+0x230>)
 8004130:	461d      	mov	r5, r3
 8004132:	4614      	mov	r4, r2
 8004134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004136:	6028      	str	r0, [r5, #0]
 8004138:	6069      	str	r1, [r5, #4]
 800413a:	60aa      	str	r2, [r5, #8]
 800413c:	60eb      	str	r3, [r5, #12]
 800413e:	6820      	ldr	r0, [r4, #0]
 8004140:	6128      	str	r0, [r5, #16]
 8004142:	7923      	ldrb	r3, [r4, #4]
 8004144:	752b      	strb	r3, [r5, #20]
		LOG_BUFFER_LEN, "Unknown sensor type\n");
		break;
 8004146:	bf00      	nop
	}

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <logSensor+0x234>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	f107 0120 	add.w	r1, r7, #32
 8004150:	2300      	movs	r3, #0
 8004152:	2200      	movs	r2, #0
 8004154:	f012 f998 	bl	8016488 <osMessageQueuePut>
 8004158:	4603      	mov	r3, r0
}
 800415a:	4618      	mov	r0, r3
 800415c:	37cc      	adds	r7, #204	; 0xcc
 800415e:	46bd      	mov	sp, r7
 8004160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004162:	bf00      	nop
 8004164:	0801cf04 	.word	0x0801cf04
 8004168:	0801cf14 	.word	0x0801cf14
 800416c:	0801cf24 	.word	0x0801cf24
 8004170:	0801cf44 	.word	0x0801cf44
 8004174:	0801cf6c 	.word	0x0801cf6c
 8004178:	0801cf80 	.word	0x0801cf80
 800417c:	20017f5c 	.word	0x20017f5c

08004180 <logRocketState>:

osStatus_t logRocketState(timestamp_t ts, flight_phase_detection_t flight_phase_detection) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b0ac      	sub	sp, #176	; 0xb0
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	4638      	mov	r0, r7
 800418a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 800418e:	f107 0310 	add.w	r3, r7, #16
 8004192:	2296      	movs	r2, #150	; 0x96
 8004194:	2100      	movs	r1, #0
 8004196:	4618      	mov	r0, r3
 8004198:	f016 f9e5 	bl	801a566 <memset>

	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
			flight_phase_detection.flight_phase);
 800419c:	783b      	ldrb	r3, [r7, #0]
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%d\n", ts, STATE,
 800419e:	f107 0010 	add.w	r0, r7, #16
 80041a2:	9301      	str	r3, [sp, #4]
 80041a4:	2302      	movs	r3, #2
 80041a6:	9300      	str	r3, [sp, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4a08      	ldr	r2, [pc, #32]	; (80041cc <logRocketState+0x4c>)
 80041ac:	2196      	movs	r1, #150	; 0x96
 80041ae:	f016 fa9b 	bl	801a6e8 <sniprintf>

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80041b2:	4b07      	ldr	r3, [pc, #28]	; (80041d0 <logRocketState+0x50>)
 80041b4:	6818      	ldr	r0, [r3, #0]
 80041b6:	f107 0110 	add.w	r1, r7, #16
 80041ba:	2300      	movs	r3, #0
 80041bc:	2200      	movs	r2, #0
 80041be:	f012 f963 	bl	8016488 <osMessageQueuePut>
 80041c2:	4603      	mov	r3, r0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	37a8      	adds	r7, #168	; 0xa8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	0801cf98 	.word	0x0801cf98
 80041d0:	20017f5c 	.word	0x20017f5c

080041d4 <logEstimatorVar>:

osStatus_t logEstimatorVar(timestamp_t ts, state_est_data_t estimator_data) {
 80041d4:	b084      	sub	sp, #16
 80041d6:	b580      	push	{r7, lr}
 80041d8:	b0ac      	sub	sp, #176	; 0xb0
 80041da:	af04      	add	r7, sp, #16
 80041dc:	6078      	str	r0, [r7, #4]
 80041de:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 80041e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	log_entry_t log_entry = { 0 };
 80041e6:	f107 0308 	add.w	r3, r7, #8
 80041ea:	2296      	movs	r2, #150	; 0x96
 80041ec:	2100      	movs	r1, #0
 80041ee:	4618      	mov	r0, r3
 80041f0:	f016 f9b9 	bl	801a566 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, ESTIMATOR_VAR,
 80041f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80041f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041fc:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 8004200:	f107 0008 	add.w	r0, r7, #8
 8004204:	9103      	str	r1, [sp, #12]
 8004206:	9202      	str	r2, [sp, #8]
 8004208:	9301      	str	r3, [sp, #4]
 800420a:	2303      	movs	r3, #3
 800420c:	9300      	str	r3, [sp, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a09      	ldr	r2, [pc, #36]	; (8004238 <logEstimatorVar+0x64>)
 8004212:	2196      	movs	r1, #150	; 0x96
 8004214:	f016 fa68 	bl	801a6e8 <sniprintf>
			estimator_data.position_world[2], estimator_data.velocity_rocket[0], estimator_data.acceleration_rocket[0]);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 8004218:	4b08      	ldr	r3, [pc, #32]	; (800423c <logEstimatorVar+0x68>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	f107 0108 	add.w	r1, r7, #8
 8004220:	2300      	movs	r3, #0
 8004222:	2200      	movs	r2, #0
 8004224:	f012 f930 	bl	8016488 <osMessageQueuePut>
 8004228:	4603      	mov	r3, r0
}
 800422a:	4618      	mov	r0, r3
 800422c:	37a0      	adds	r7, #160	; 0xa0
 800422e:	46bd      	mov	sp, r7
 8004230:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004234:	b004      	add	sp, #16
 8004236:	4770      	bx	lr
 8004238:	0801cfa4 	.word	0x0801cfa4
 800423c:	20017f5c 	.word	0x20017f5c

08004240 <logControllerOutput>:

osStatus_t logControllerOutput(timestamp_t ts, int32_t controller_output, int32_t reference_error,
		int32_t integrated_error) {
 8004240:	b580      	push	{r7, lr}
 8004242:	b0ae      	sub	sp, #184	; 0xb8
 8004244:	af04      	add	r7, sp, #16
 8004246:	60f8      	str	r0, [r7, #12]
 8004248:	60b9      	str	r1, [r7, #8]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
	log_entry_t log_entry = { 0 };
 800424e:	f107 0310 	add.w	r3, r7, #16
 8004252:	2296      	movs	r2, #150	; 0x96
 8004254:	2100      	movs	r1, #0
 8004256:	4618      	mov	r0, r3
 8004258:	f016 f985 	bl	801a566 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld,%ld\n", ts, CONTROLLER_OUTPUT,
 800425c:	f107 0010 	add.w	r0, r7, #16
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	9303      	str	r3, [sp, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	9302      	str	r3, [sp, #8]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	9301      	str	r3, [sp, #4]
 800426c:	2304      	movs	r3, #4
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4a08      	ldr	r2, [pc, #32]	; (8004294 <logControllerOutput+0x54>)
 8004274:	2196      	movs	r1, #150	; 0x96
 8004276:	f016 fa37 	bl	801a6e8 <sniprintf>
			controller_output, reference_error, integrated_error);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <logControllerOutput+0x58>)
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	f107 0110 	add.w	r1, r7, #16
 8004282:	2300      	movs	r3, #0
 8004284:	2200      	movs	r2, #0
 8004286:	f012 f8ff 	bl	8016488 <osMessageQueuePut>
 800428a:	4603      	mov	r3, r0
}
 800428c:	4618      	mov	r0, r3
 800428e:	37a8      	adds	r7, #168	; 0xa8
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	0801cfa4 	.word	0x0801cfa4
 8004298:	20017f5c 	.word	0x20017f5c

0800429c <logMotor>:

osStatus_t logMotor(timestamp_t ts, int32_t desired_position, int32_t actual_position) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b0ae      	sub	sp, #184	; 0xb8
 80042a0:	af04      	add	r7, sp, #16
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
	log_entry_t log_entry = { 0 };
 80042a8:	f107 0310 	add.w	r3, r7, #16
 80042ac:	2296      	movs	r2, #150	; 0x96
 80042ae:	2100      	movs	r1, #0
 80042b0:	4618      	mov	r0, r3
 80042b2:	f016 f958 	bl	801a566 <memset>
	snprintf(log_entry.str, LOG_BUFFER_LEN, "%lu;%d;%ld,%ld\n", ts, MOTOR_POSITION,
 80042b6:	f107 0010 	add.w	r0, r7, #16
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	9302      	str	r3, [sp, #8]
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	9301      	str	r3, [sp, #4]
 80042c2:	2305      	movs	r3, #5
 80042c4:	9300      	str	r3, [sp, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	4a08      	ldr	r2, [pc, #32]	; (80042ec <logMotor+0x50>)
 80042ca:	2196      	movs	r1, #150	; 0x96
 80042cc:	f016 fa0c 	bl	801a6e8 <sniprintf>
			desired_position, actual_position);

	return osMessageQueuePut(log_queue, &log_entry, 0U, 0U);
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <logMotor+0x54>)
 80042d2:	6818      	ldr	r0, [r3, #0]
 80042d4:	f107 0110 	add.w	r1, r7, #16
 80042d8:	2300      	movs	r3, #0
 80042da:	2200      	movs	r2, #0
 80042dc:	f012 f8d4 	bl	8016488 <osMessageQueuePut>
 80042e0:	4603      	mov	r3, r0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	37a8      	adds	r7, #168	; 0xa8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	0801cfb8 	.word	0x0801cfb8
 80042f0:	20017f5c 	.word	0x20017f5c

080042f4 <UsbPrint>:
}


/** USB DEBUGGING SECTION **/

uint8_t UsbPrint(const char *format, ...) {
 80042f4:	b40f      	push	{r0, r1, r2, r3}
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
	uint8_t ret = 1;
 80042fc:	2301      	movs	r3, #1
 80042fe:	71fb      	strb	r3, [r7, #7]
#ifdef DEBUG
	if (osMutexAcquire(print_mutex, 0U) == osOK) {
 8004300:	4b14      	ldr	r3, [pc, #80]	; (8004354 <UsbPrint+0x60>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2100      	movs	r1, #0
 8004306:	4618      	mov	r0, r3
 8004308:	f011 fdf8 	bl	8015efc <osMutexAcquire>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d118      	bne.n	8004344 <UsbPrint+0x50>
		va_list argptr;
		va_start(argptr, format);
 8004312:	f107 0314 	add.w	r3, r7, #20
 8004316:	603b      	str	r3, [r7, #0]
		vsnprintf(print_buffer, PRINT_BUFFER_LEN, format, argptr);
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	693a      	ldr	r2, [r7, #16]
 800431c:	21c8      	movs	r1, #200	; 0xc8
 800431e:	480e      	ldr	r0, [pc, #56]	; (8004358 <UsbPrint+0x64>)
 8004320:	f016 fa42 	bl	801a7a8 <vsniprintf>
		va_end(argptr);
		ret = CDC_Transmit_FS((uint8_t*) print_buffer, strlen(print_buffer));
 8004324:	480c      	ldr	r0, [pc, #48]	; (8004358 <UsbPrint+0x64>)
 8004326:	f7fb ff73 	bl	8000210 <strlen>
 800432a:	4603      	mov	r3, r0
 800432c:	b29b      	uxth	r3, r3
 800432e:	4619      	mov	r1, r3
 8004330:	4809      	ldr	r0, [pc, #36]	; (8004358 <UsbPrint+0x64>)
 8004332:	f015 fc29 	bl	8019b88 <CDC_Transmit_FS>
 8004336:	4603      	mov	r3, r0
 8004338:	71fb      	strb	r3, [r7, #7]
		osMutexRelease(print_mutex);
 800433a:	4b06      	ldr	r3, [pc, #24]	; (8004354 <UsbPrint+0x60>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4618      	mov	r0, r3
 8004340:	f011 fe3a 	bl	8015fb8 <osMutexRelease>
	}
#endif
	return ret;
 8004344:	79fb      	ldrb	r3, [r7, #7]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3708      	adds	r7, #8
 800434a:	46bd      	mov	sp, r7
 800434c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004350:	b004      	add	sp, #16
 8004352:	4770      	bx	lr
 8004354:	200095d8 	.word	0x200095d8
 8004358:	20008958 	.word	0x20008958

0800435c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b0b1      	sub	sp, #196	; 0xc4
 8004360:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004362:	f003 f8e0 	bl	8007526 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004366:	f000 f9f1 	bl	800474c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	(DBGMCU)->APB1FZ = 0x7E01BFF;
 800436a:	4bb0      	ldr	r3, [pc, #704]	; (800462c <main+0x2d0>)
 800436c:	4ab0      	ldr	r2, [pc, #704]	; (8004630 <main+0x2d4>)
 800436e:	609a      	str	r2, [r3, #8]
	(DBGMCU)->APB2FZ = 0x70003;
 8004370:	4bae      	ldr	r3, [pc, #696]	; (800462c <main+0x2d0>)
 8004372:	4ab0      	ldr	r2, [pc, #704]	; (8004634 <main+0x2d8>)
 8004374:	60da      	str	r2, [r3, #12]
	init_env(&global_env);
 8004376:	48b0      	ldr	r0, [pc, #704]	; (8004638 <main+0x2dc>)
 8004378:	f7fd fece 	bl	8002118 <init_env>
	reset_flight_phase_detection(&global_flight_phase_detection);
 800437c:	48af      	ldr	r0, [pc, #700]	; (800463c <main+0x2e0>)
 800437e:	f7fe f989 	bl	8002694 <reset_flight_phase_detection>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004382:	f000 fd3f 	bl	8004e04 <MX_GPIO_Init>
  MX_DMA_Init();
 8004386:	f000 fccb 	bl	8004d20 <MX_DMA_Init>
  MX_SPI3_Init();
 800438a:	f000 fb9f 	bl	8004acc <MX_SPI3_Init>
  MX_SPI1_Init();
 800438e:	f000 fb29 	bl	80049e4 <MX_SPI1_Init>
  MX_SDMMC1_SD_Init();
 8004392:	f000 fb07 	bl	80049a4 <MX_SDMMC1_SD_Init>
  MX_SPI2_Init();
 8004396:	f000 fb5f 	bl	8004a58 <MX_SPI2_Init>
  MX_FATFS_Init();
 800439a:	f00c fd35 	bl	8010e08 <MX_FATFS_Init>
  MX_UART7_Init();
 800439e:	f000 fbff 	bl	8004ba0 <MX_UART7_Init>
  MX_USART1_UART_Init();
 80043a2:	f000 fc2d 	bl	8004c00 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80043a6:	f000 fc5b 	bl	8004c60 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80043aa:	f000 fc89 	bl	8004cc0 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 80043ae:	f000 fa67 	bl	8004880 <MX_ADC1_Init>
  MX_UART4_Init();
 80043b2:	f000 fbc5 	bl	8004b40 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
	MX_USB_DEVICE_Init();
 80043b6:	f015 fb29 	bl	8019a0c <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80043ba:	f011 fb33 	bl	8015a24 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
	/* Sensor Board 1 Mutex */
	const osMutexAttr_t sb1_mutex_attr = {
 80043be:	4ba0      	ldr	r3, [pc, #640]	; (8004640 <main+0x2e4>)
 80043c0:	f107 04b0 	add.w	r4, r7, #176	; 0xb0
 80043c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb1_mutex_only = osMutexNew(&sb1_mutex_attr);
 80043ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80043ce:	4618      	mov	r0, r3
 80043d0:	f011 fcfa 	bl	8015dc8 <osMutexNew>
 80043d4:	4602      	mov	r2, r0
 80043d6:	4b9b      	ldr	r3, [pc, #620]	; (8004644 <main+0x2e8>)
 80043d8:	601a      	str	r2, [r3, #0]

	/* Sensor Board 2 Mutex */
	const osMutexAttr_t sb2_mutex_attr = {
 80043da:	4b9b      	ldr	r3, [pc, #620]	; (8004648 <main+0x2ec>)
 80043dc:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 80043e0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,                       // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb2_mutex_only = osMutexNew(&sb2_mutex_attr);
 80043e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80043ea:	4618      	mov	r0, r3
 80043ec:	f011 fcec 	bl	8015dc8 <osMutexNew>
 80043f0:	4602      	mov	r2, r0
 80043f2:	4b96      	ldr	r3, [pc, #600]	; (800464c <main+0x2f0>)
 80043f4:	601a      	str	r2, [r3, #0]

	/* Sensor Board 3 Mutex */
	const osMutexAttr_t sb3_mutex_attr = {
 80043f6:	4b96      	ldr	r3, [pc, #600]	; (8004650 <main+0x2f4>)
 80043f8:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80043fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80043fe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	sb3_mutex_only = osMutexNew(&sb3_mutex_attr);
 8004402:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004406:	4618      	mov	r0, r3
 8004408:	f011 fcde 	bl	8015dc8 <osMutexNew>
 800440c:	4602      	mov	r2, r0
 800440e:	4b91      	ldr	r3, [pc, #580]	; (8004654 <main+0x2f8>)
 8004410:	601a      	str	r2, [r3, #0]

	/* State Estimation Output Mutex */
	const osMutexAttr_t state_est_mutex_attr = {
 8004412:	4b91      	ldr	r3, [pc, #580]	; (8004658 <main+0x2fc>)
 8004414:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8004418:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800441a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	state_est_mutex_only = osMutexNew(&state_est_mutex_attr);
 800441e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004422:	4618      	mov	r0, r3
 8004424:	f011 fcd0 	bl	8015dc8 <osMutexNew>
 8004428:	4602      	mov	r2, r0
 800442a:	4b8c      	ldr	r3, [pc, #560]	; (800465c <main+0x300>)
 800442c:	601a      	str	r2, [r3, #0]

	/* Controller Output Mutex */
	const osMutexAttr_t controller_mutex_attr = {
 800442e:	4b8c      	ldr	r3, [pc, #560]	; (8004660 <main+0x304>)
 8004430:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8004434:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004436:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	controller_mutex_only = osMutexNew(&controller_mutex_attr);
 800443a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800443e:	4618      	mov	r0, r3
 8004440:	f011 fcc2 	bl	8015dc8 <osMutexNew>
 8004444:	4602      	mov	r2, r0
 8004446:	4b87      	ldr	r3, [pc, #540]	; (8004664 <main+0x308>)
 8004448:	601a      	str	r2, [r3, #0]

	/* FSM Output Mutex */
	const osMutexAttr_t fsm_mutex_attr = {
 800444a:	4b87      	ldr	r3, [pc, #540]	; (8004668 <main+0x30c>)
 800444c:	f107 0460 	add.w	r4, r7, #96	; 0x60
 8004450:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004452:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	fsm_mutex_only = osMutexNew(&fsm_mutex_attr);
 8004456:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800445a:	4618      	mov	r0, r3
 800445c:	f011 fcb4 	bl	8015dc8 <osMutexNew>
 8004460:	4602      	mov	r2, r0
 8004462:	4b82      	ldr	r3, [pc, #520]	; (800466c <main+0x310>)
 8004464:	601a      	str	r2, [r3, #0]

	/* Environment Mutex */
	const osMutexAttr_t environment_mutex_attr = {
 8004466:	4b82      	ldr	r3, [pc, #520]	; (8004670 <main+0x314>)
 8004468:	f107 0450 	add.w	r4, r7, #80	; 0x50
 800446c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800446e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	environment_mutex_only = osMutexNew(&environment_mutex_attr);
 8004472:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004476:	4618      	mov	r0, r3
 8004478:	f011 fca6 	bl	8015dc8 <osMutexNew>
 800447c:	4602      	mov	r2, r0
 800447e:	4b7d      	ldr	r3, [pc, #500]	; (8004674 <main+0x318>)
 8004480:	601a      	str	r2, [r3, #0]

	/* USB Data Mutex */
	const osMutexAttr_t usb_data_mutex_attr = {
 8004482:	4b7d      	ldr	r3, [pc, #500]	; (8004678 <main+0x31c>)
 8004484:	f107 0440 	add.w	r4, r7, #64	; 0x40
 8004488:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800448a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	usb_data_mutex_only = osMutexNew(&usb_data_mutex_attr);
 800448e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8004492:	4618      	mov	r0, r3
 8004494:	f011 fc98 	bl	8015dc8 <osMutexNew>
 8004498:	4602      	mov	r2, r0
 800449a:	4b78      	ldr	r3, [pc, #480]	; (800467c <main+0x320>)
 800449c:	601a      	str	r2, [r3, #0]

	/* Command Mutex */
	const osMutexAttr_t command_mutex_attr = {
 800449e:	4b78      	ldr	r3, [pc, #480]	; (8004680 <main+0x324>)
 80044a0:	f107 0430 	add.w	r4, r7, #48	; 0x30
 80044a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	command_mutex_only = osMutexNew(&command_mutex_attr);
 80044aa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80044ae:	4618      	mov	r0, r3
 80044b0:	f011 fc8a 	bl	8015dc8 <osMutexNew>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <main+0x328>)
 80044b8:	601a      	str	r2, [r3, #0]

	/* GPS Mutex */
	const osMutexAttr_t gps_mutex_attr = {
 80044ba:	4b73      	ldr	r3, [pc, #460]	; (8004688 <main+0x32c>)
 80044bc:	f107 0420 	add.w	r4, r7, #32
 80044c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	gps_mutex_only = osMutexNew(&gps_mutex_attr);
 80044c6:	f107 0320 	add.w	r3, r7, #32
 80044ca:	4618      	mov	r0, r3
 80044cc:	f011 fc7c 	bl	8015dc8 <osMutexNew>
 80044d0:	4602      	mov	r2, r0
 80044d2:	4b6e      	ldr	r3, [pc, #440]	; (800468c <main+0x330>)
 80044d4:	601a      	str	r2, [r3, #0]

	/* Battery Mutex */
	const osMutexAttr_t battery_mutex_attr = {
 80044d6:	4b6e      	ldr	r3, [pc, #440]	; (8004690 <main+0x334>)
 80044d8:	f107 0410 	add.w	r4, r7, #16
 80044dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80044de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					 // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	battery_mutex_only = osMutexNew(&battery_mutex_attr);
 80044e2:	f107 0310 	add.w	r3, r7, #16
 80044e6:	4618      	mov	r0, r3
 80044e8:	f011 fc6e 	bl	8015dc8 <osMutexNew>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b69      	ldr	r3, [pc, #420]	; (8004694 <main+0x338>)
 80044f0:	601a      	str	r2, [r3, #0]


	/** Initialise Mutexes **/

	sb1_mutex.mutex = sb1_mutex_only;
 80044f2:	4b54      	ldr	r3, [pc, #336]	; (8004644 <main+0x2e8>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a68      	ldr	r2, [pc, #416]	; (8004698 <main+0x33c>)
 80044f8:	6013      	str	r3, [r2, #0]
	sb2_mutex.mutex = sb2_mutex_only;
 80044fa:	4b54      	ldr	r3, [pc, #336]	; (800464c <main+0x2f0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a67      	ldr	r2, [pc, #412]	; (800469c <main+0x340>)
 8004500:	6013      	str	r3, [r2, #0]
	sb3_mutex.mutex = sb3_mutex_only;
 8004502:	4b54      	ldr	r3, [pc, #336]	; (8004654 <main+0x2f8>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a66      	ldr	r2, [pc, #408]	; (80046a0 <main+0x344>)
 8004508:	6013      	str	r3, [r2, #0]
	env_mutex.mutex = environment_mutex_only;
 800450a:	4b5a      	ldr	r3, [pc, #360]	; (8004674 <main+0x318>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a65      	ldr	r2, [pc, #404]	; (80046a4 <main+0x348>)
 8004510:	6013      	str	r3, [r2, #0]
	fsm_mutex.mutex = fsm_mutex_only;
 8004512:	4b56      	ldr	r3, [pc, #344]	; (800466c <main+0x310>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a64      	ldr	r2, [pc, #400]	; (80046a8 <main+0x34c>)
 8004518:	6013      	str	r3, [r2, #0]
	controller_mutex.mutex = controller_mutex_only;
 800451a:	4b52      	ldr	r3, [pc, #328]	; (8004664 <main+0x308>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a63      	ldr	r2, [pc, #396]	; (80046ac <main+0x350>)
 8004520:	6013      	str	r3, [r2, #0]
	state_est_mutex.mutex = state_est_mutex_only;
 8004522:	4b4e      	ldr	r3, [pc, #312]	; (800465c <main+0x300>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a62      	ldr	r2, [pc, #392]	; (80046b0 <main+0x354>)
 8004528:	6013      	str	r3, [r2, #0]
	usb_data_mutex.mutex = usb_data_mutex_only;
 800452a:	4b54      	ldr	r3, [pc, #336]	; (800467c <main+0x320>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a61      	ldr	r2, [pc, #388]	; (80046b4 <main+0x358>)
 8004530:	6013      	str	r3, [r2, #0]
	command_mutex.mutex = command_mutex_only;
 8004532:	4b54      	ldr	r3, [pc, #336]	; (8004684 <main+0x328>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a60      	ldr	r2, [pc, #384]	; (80046b8 <main+0x35c>)
 8004538:	6013      	str	r3, [r2, #0]
	gps_mutex.mutex = gps_mutex_only;
 800453a:	4b54      	ldr	r3, [pc, #336]	; (800468c <main+0x330>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5f      	ldr	r2, [pc, #380]	; (80046bc <main+0x360>)
 8004540:	6013      	str	r3, [r2, #0]
	battery_mutex.mutex = battery_mutex_only;
 8004542:	4b54      	ldr	r3, [pc, #336]	; (8004694 <main+0x338>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a5e      	ldr	r2, [pc, #376]	; (80046c0 <main+0x364>)
 8004548:	6013      	str	r3, [r2, #0]

	global_flight_phase_detection.flight_phase = IDLE;
 800454a:	4b3c      	ldr	r3, [pc, #240]	; (800463c <main+0x2e0>)
 800454c:	2201      	movs	r2, #1
 800454e:	701a      	strb	r2, [r3, #0]
	global_flight_phase_detection.mach_regime = SUBSONIC;
 8004550:	4b3a      	ldr	r3, [pc, #232]	; (800463c <main+0x2e0>)
 8004552:	2201      	movs	r2, #1
 8004554:	705a      	strb	r2, [r3, #1]
	global_telemetry_command = IDLE_COMMAND;
 8004556:	4b5b      	ldr	r3, [pc, #364]	; (80046c4 <main+0x368>)
 8004558:	229b      	movs	r2, #155	; 0x9b
 800455a:	701a      	strb	r2, [r3, #0]




#ifdef DEBUG
	const osMutexAttr_t print_mutex_attr = {
 800455c:	4b5a      	ldr	r3, [pc, #360]	; (80046c8 <main+0x36c>)
 800455e:	463c      	mov	r4, r7
 8004560:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004562:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			osMutexPrioInherit,    					  // attr_bits
			NULL,                                     // memory for control block
			0U                                        // size for control block
	};

	print_mutex = osMutexNew(&print_mutex_attr);
 8004566:	463b      	mov	r3, r7
 8004568:	4618      	mov	r0, r3
 800456a:	f011 fc2d 	bl	8015dc8 <osMutexNew>
 800456e:	4602      	mov	r2, r0
 8004570:	4b56      	ldr	r3, [pc, #344]	; (80046cc <main+0x370>)
 8004572:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_TIMERS */
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	log_queue = osMessageQueueNew(LOG_QUEUE_SIZE, sizeof(log_entry_t), NULL);
 8004574:	2200      	movs	r2, #0
 8004576:	2196      	movs	r1, #150	; 0x96
 8004578:	2080      	movs	r0, #128	; 0x80
 800457a:	f011 feff 	bl	801637c <osMessageQueueNew>
 800457e:	4602      	mov	r2, r0
 8004580:	4b53      	ldr	r3, [pc, #332]	; (80046d0 <main+0x374>)
 8004582:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004584:	4a53      	ldr	r2, [pc, #332]	; (80046d4 <main+0x378>)
 8004586:	2100      	movs	r1, #0
 8004588:	4853      	ldr	r0, [pc, #332]	; (80046d8 <main+0x37c>)
 800458a:	f011 fb09 	bl	8015ba0 <osThreadNew>
 800458e:	4602      	mov	r2, r0
 8004590:	4b52      	ldr	r3, [pc, #328]	; (80046dc <main+0x380>)
 8004592:	601a      	str	r2, [r3, #0]

  /* creation of task_state_est */
  task_state_estHandle = osThreadNew(vTaskStateEst, NULL, &task_state_est_attributes);
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <main+0x384>)
 8004596:	2100      	movs	r1, #0
 8004598:	4852      	ldr	r0, [pc, #328]	; (80046e4 <main+0x388>)
 800459a:	f011 fb01 	bl	8015ba0 <osThreadNew>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b51      	ldr	r3, [pc, #324]	; (80046e8 <main+0x38c>)
 80045a2:	601a      	str	r2, [r3, #0]

  /* creation of task_controller */
  task_controllerHandle = osThreadNew(vTaskController, NULL, &task_controller_attributes);
 80045a4:	4a51      	ldr	r2, [pc, #324]	; (80046ec <main+0x390>)
 80045a6:	2100      	movs	r1, #0
 80045a8:	4851      	ldr	r0, [pc, #324]	; (80046f0 <main+0x394>)
 80045aa:	f011 faf9 	bl	8015ba0 <osThreadNew>
 80045ae:	4602      	mov	r2, r0
 80045b0:	4b50      	ldr	r3, [pc, #320]	; (80046f4 <main+0x398>)
 80045b2:	601a      	str	r2, [r3, #0]

  /* creation of task_sens_read */
  task_sens_readHandle = osThreadNew(vTaskSensRead, NULL, &task_sens_read_attributes);
 80045b4:	4a50      	ldr	r2, [pc, #320]	; (80046f8 <main+0x39c>)
 80045b6:	2100      	movs	r1, #0
 80045b8:	4850      	ldr	r0, [pc, #320]	; (80046fc <main+0x3a0>)
 80045ba:	f011 faf1 	bl	8015ba0 <osThreadNew>
 80045be:	4602      	mov	r2, r0
 80045c0:	4b4f      	ldr	r3, [pc, #316]	; (8004700 <main+0x3a4>)
 80045c2:	601a      	str	r2, [r3, #0]

  /* creation of task_sd_card */
  task_sd_cardHandle = osThreadNew(vTaskSdCard, NULL, &task_sd_card_attributes);
 80045c4:	4a4f      	ldr	r2, [pc, #316]	; (8004704 <main+0x3a8>)
 80045c6:	2100      	movs	r1, #0
 80045c8:	484f      	ldr	r0, [pc, #316]	; (8004708 <main+0x3ac>)
 80045ca:	f011 fae9 	bl	8015ba0 <osThreadNew>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b4e      	ldr	r3, [pc, #312]	; (800470c <main+0x3b0>)
 80045d2:	601a      	str	r2, [r3, #0]

  /* creation of task_motor_cont */
  task_motor_contHandle = osThreadNew(vTaskMotorCont, NULL, &task_motor_cont_attributes);
 80045d4:	4a4e      	ldr	r2, [pc, #312]	; (8004710 <main+0x3b4>)
 80045d6:	2100      	movs	r1, #0
 80045d8:	484e      	ldr	r0, [pc, #312]	; (8004714 <main+0x3b8>)
 80045da:	f011 fae1 	bl	8015ba0 <osThreadNew>
 80045de:	4602      	mov	r2, r0
 80045e0:	4b4d      	ldr	r3, [pc, #308]	; (8004718 <main+0x3bc>)
 80045e2:	601a      	str	r2, [r3, #0]

  /* creation of task_fsm */
  task_fsmHandle = osThreadNew(vTaskFSM, NULL, &task_fsm_attributes);
 80045e4:	4a4d      	ldr	r2, [pc, #308]	; (800471c <main+0x3c0>)
 80045e6:	2100      	movs	r1, #0
 80045e8:	484d      	ldr	r0, [pc, #308]	; (8004720 <main+0x3c4>)
 80045ea:	f011 fad9 	bl	8015ba0 <osThreadNew>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4b4c      	ldr	r3, [pc, #304]	; (8004724 <main+0x3c8>)
 80045f2:	601a      	str	r2, [r3, #0]

  /* creation of task_gps */
  task_gpsHandle = osThreadNew(vTaskGps, NULL, &task_gps_attributes);
 80045f4:	4a4c      	ldr	r2, [pc, #304]	; (8004728 <main+0x3cc>)
 80045f6:	2100      	movs	r1, #0
 80045f8:	484c      	ldr	r0, [pc, #304]	; (800472c <main+0x3d0>)
 80045fa:	f011 fad1 	bl	8015ba0 <osThreadNew>
 80045fe:	4602      	mov	r2, r0
 8004600:	4b4b      	ldr	r3, [pc, #300]	; (8004730 <main+0x3d4>)
 8004602:	601a      	str	r2, [r3, #0]

  /* creation of task_battery */
  task_batteryHandle = osThreadNew(vTaskBattery, NULL, &task_battery_attributes);
 8004604:	4a4b      	ldr	r2, [pc, #300]	; (8004734 <main+0x3d8>)
 8004606:	2100      	movs	r1, #0
 8004608:	484b      	ldr	r0, [pc, #300]	; (8004738 <main+0x3dc>)
 800460a:	f011 fac9 	bl	8015ba0 <osThreadNew>
 800460e:	4602      	mov	r2, r0
 8004610:	4b4a      	ldr	r3, [pc, #296]	; (800473c <main+0x3e0>)
 8004612:	601a      	str	r2, [r3, #0]

  /* creation of task_xbee */
  task_xbeeHandle = osThreadNew(vTaskXbee, NULL, &task_xbee_attributes);
 8004614:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <main+0x3e4>)
 8004616:	2100      	movs	r1, #0
 8004618:	484a      	ldr	r0, [pc, #296]	; (8004744 <main+0x3e8>)
 800461a:	f011 fac1 	bl	8015ba0 <osThreadNew>
 800461e:	4602      	mov	r2, r0
 8004620:	4b49      	ldr	r3, [pc, #292]	; (8004748 <main+0x3ec>)
 8004622:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8004624:	f011 fa54 	bl	8015ad0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8004628:	e7fe      	b.n	8004628 <main+0x2cc>
 800462a:	bf00      	nop
 800462c:	e0042000 	.word	0xe0042000
 8004630:	07e01bff 	.word	0x07e01bff
 8004634:	00070003 	.word	0x00070003
 8004638:	200002ac 	.word	0x200002ac
 800463c:	200002bc 	.word	0x200002bc
 8004640:	0801d074 	.word	0x0801d074
 8004644:	2000fd1c 	.word	0x2000fd1c
 8004648:	0801d094 	.word	0x0801d094
 800464c:	20019f60 	.word	0x20019f60
 8004650:	0801d0b4 	.word	0x0801d0b4
 8004654:	2000ba80 	.word	0x2000ba80
 8004658:	0801d0dc 	.word	0x0801d0dc
 800465c:	2000fca4 	.word	0x2000fca4
 8004660:	0801d104 	.word	0x0801d104
 8004664:	2001c1bc 	.word	0x2001c1bc
 8004668:	0801d124 	.word	0x0801d124
 800466c:	2000fd18 	.word	0x2000fd18
 8004670:	0801d14c 	.word	0x0801d14c
 8004674:	2000fcac 	.word	0x2000fcac
 8004678:	0801d170 	.word	0x0801d170
 800467c:	2000ba7c 	.word	0x2000ba7c
 8004680:	0801d194 	.word	0x0801d194
 8004684:	2000ba84 	.word	0x2000ba84
 8004688:	0801d1b4 	.word	0x0801d1b4
 800468c:	20011d20 	.word	0x20011d20
 8004690:	0801d1d8 	.word	0x0801d1d8
 8004694:	2000fca8 	.word	0x2000fca8
 8004698:	2000fbc0 	.word	0x2000fbc0
 800469c:	2001c228 	.word	0x2001c228
 80046a0:	2000fcb0 	.word	0x2000fcb0
 80046a4:	2000ba90 	.word	0x2000ba90
 80046a8:	200096a4 	.word	0x200096a4
 80046ac:	2000fb00 	.word	0x2000fb00
 80046b0:	20011d24 	.word	0x20011d24
 80046b4:	2000b934 	.word	0x2000b934
 80046b8:	2000ba88 	.word	0x2000ba88
 80046bc:	20017e70 	.word	0x20017e70
 80046c0:	20009710 	.word	0x20009710
 80046c4:	20013dac 	.word	0x20013dac
 80046c8:	0801d1f4 	.word	0x0801d1f4
 80046cc:	200095d8 	.word	0x200095d8
 80046d0:	20017f5c 	.word	0x20017f5c
 80046d4:	0801d5ac 	.word	0x0801d5ac
 80046d8:	08004f05 	.word	0x08004f05
 80046dc:	20009640 	.word	0x20009640
 80046e0:	0801d5d0 	.word	0x0801d5d0
 80046e4:	08006d25 	.word	0x08006d25
 80046e8:	2000fb5c 	.word	0x2000fb5c
 80046ec:	0801d5f4 	.word	0x0801d5f4
 80046f0:	08006099 	.word	0x08006099
 80046f4:	2001c224 	.word	0x2001c224
 80046f8:	0801d618 	.word	0x0801d618
 80046fc:	08006ac5 	.word	0x08006ac5
 8004700:	2000ba98 	.word	0x2000ba98
 8004704:	0801d63c 	.word	0x0801d63c
 8004708:	08006731 	.word	0x08006731
 800470c:	200098d4 	.word	0x200098d4
 8004710:	0801d660 	.word	0x0801d660
 8004714:	08006599 	.word	0x08006599
 8004718:	2000fb58 	.word	0x2000fb58
 800471c:	0801d684 	.word	0x0801d684
 8004720:	08006209 	.word	0x08006209
 8004724:	2001c220 	.word	0x2001c220
 8004728:	0801d6a8 	.word	0x0801d6a8
 800472c:	080062f1 	.word	0x080062f1
 8004730:	200095dc 	.word	0x200095dc
 8004734:	0801d6cc 	.word	0x0801d6cc
 8004738:	08005c69 	.word	0x08005c69
 800473c:	2001c0fc 	.word	0x2001c0fc
 8004740:	0801d6f0 	.word	0x0801d6f0
 8004744:	08007111 	.word	0x08007111
 8004748:	20017e6c 	.word	0x20017e6c

0800474c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b0b4      	sub	sp, #208	; 0xd0
 8004750:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004752:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8004756:	2230      	movs	r2, #48	; 0x30
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f015 ff03 	bl	801a566 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004760:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004764:	2200      	movs	r2, #0
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	605a      	str	r2, [r3, #4]
 800476a:	609a      	str	r2, [r3, #8]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	2284      	movs	r2, #132	; 0x84
 8004776:	2100      	movs	r1, #0
 8004778:	4618      	mov	r0, r3
 800477a:	f015 fef4 	bl	801a566 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b3d      	ldr	r3, [pc, #244]	; (8004874 <SystemClock_Config+0x128>)
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	4a3c      	ldr	r2, [pc, #240]	; (8004874 <SystemClock_Config+0x128>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	6413      	str	r3, [r2, #64]	; 0x40
 800478a:	4b3a      	ldr	r3, [pc, #232]	; (8004874 <SystemClock_Config+0x128>)
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	607b      	str	r3, [r7, #4]
 8004794:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8004796:	4b38      	ldr	r3, [pc, #224]	; (8004878 <SystemClock_Config+0x12c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800479e:	4a36      	ldr	r2, [pc, #216]	; (8004878 <SystemClock_Config+0x12c>)
 80047a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	4b34      	ldr	r3, [pc, #208]	; (8004878 <SystemClock_Config+0x12c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047ae:	603b      	str	r3, [r7, #0]
 80047b0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80047b2:	2301      	movs	r3, #1
 80047b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80047b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80047c0:	2302      	movs	r3, #2
 80047c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80047c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80047ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80047ce:	2304      	movs	r3, #4
 80047d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 168;
 80047d4:	23a8      	movs	r3, #168	; 0xa8
 80047d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80047da:	2302      	movs	r3, #2
 80047dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80047e0:	2307      	movs	r3, #7
 80047e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80047e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80047ea:	4618      	mov	r0, r3
 80047ec:	f005 fbf4 	bl	8009fd8 <HAL_RCC_OscConfig>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80047f6:	f000 fba1 	bl	8004f3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80047fa:	230f      	movs	r3, #15
 80047fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004800:	2302      	movs	r3, #2
 8004802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004806:	2300      	movs	r3, #0
 8004808:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800480c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800481c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8004820:	2105      	movs	r1, #5
 8004822:	4618      	mov	r0, r3
 8004824:	f005 fe7c 	bl	800a520 <HAL_RCC_ClockConfig>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d001      	beq.n	8004832 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800482e:	f000 fb85 	bl	8004f3c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8004832:	4b12      	ldr	r3, [pc, #72]	; (800487c <SystemClock_Config+0x130>)
 8004834:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_UART4
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_SDMMC1
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004836:	2300      	movs	r3, #0
 8004838:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800483a:	2300      	movs	r3, #0
 800483c:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800483e:	2300      	movs	r3, #0
 8004840:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8004842:	2300      	movs	r3, #0
 8004844:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8004846:	2300      	movs	r3, #0
 8004848:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800484a:	2300      	movs	r3, #0
 800484c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8004850:	2300      	movs	r3, #0
 8004852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004856:	f107 0308 	add.w	r3, r7, #8
 800485a:	4618      	mov	r0, r3
 800485c:	f006 f88a 	bl	800a974 <HAL_RCCEx_PeriphCLKConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8004866:	f000 fb69 	bl	8004f3c <Error_Handler>
  }
}
 800486a:	bf00      	nop
 800486c:	37d0      	adds	r7, #208	; 0xd0
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40023800 	.word	0x40023800
 8004878:	40007000 	.word	0x40007000
 800487c:	00a013c0 	.word	0x00a013c0

08004880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b084      	sub	sp, #16
 8004884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004886:	463b      	mov	r3, r7
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	605a      	str	r2, [r3, #4]
 800488e:	609a      	str	r2, [r3, #8]
 8004890:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8004892:	4b40      	ldr	r3, [pc, #256]	; (8004994 <MX_ADC1_Init+0x114>)
 8004894:	4a40      	ldr	r2, [pc, #256]	; (8004998 <MX_ADC1_Init+0x118>)
 8004896:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004898:	4b3e      	ldr	r3, [pc, #248]	; (8004994 <MX_ADC1_Init+0x114>)
 800489a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800489e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80048a0:	4b3c      	ldr	r3, [pc, #240]	; (8004994 <MX_ADC1_Init+0x114>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80048a6:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <MX_ADC1_Init+0x114>)
 80048a8:	2201      	movs	r2, #1
 80048aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80048ac:	4b39      	ldr	r3, [pc, #228]	; (8004994 <MX_ADC1_Init+0x114>)
 80048ae:	2201      	movs	r2, #1
 80048b0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80048b2:	4b38      	ldr	r3, [pc, #224]	; (8004994 <MX_ADC1_Init+0x114>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80048ba:	4b36      	ldr	r3, [pc, #216]	; (8004994 <MX_ADC1_Init+0x114>)
 80048bc:	2200      	movs	r2, #0
 80048be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80048c0:	4b34      	ldr	r3, [pc, #208]	; (8004994 <MX_ADC1_Init+0x114>)
 80048c2:	4a36      	ldr	r2, [pc, #216]	; (800499c <MX_ADC1_Init+0x11c>)
 80048c4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80048c6:	4b33      	ldr	r3, [pc, #204]	; (8004994 <MX_ADC1_Init+0x114>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80048cc:	4b31      	ldr	r3, [pc, #196]	; (8004994 <MX_ADC1_Init+0x114>)
 80048ce:	2205      	movs	r2, #5
 80048d0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <MX_ADC1_Init+0x114>)
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80048da:	4b2e      	ldr	r3, [pc, #184]	; (8004994 <MX_ADC1_Init+0x114>)
 80048dc:	2201      	movs	r2, #1
 80048de:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80048e0:	482c      	ldr	r0, [pc, #176]	; (8004994 <MX_ADC1_Init+0x114>)
 80048e2:	f002 fe6f 	bl	80075c4 <HAL_ADC_Init>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d001      	beq.n	80048f0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80048ec:	f000 fb26 	bl	8004f3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80048f0:	2308      	movs	r3, #8
 80048f2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80048f4:	2301      	movs	r3, #1
 80048f6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80048f8:	2307      	movs	r3, #7
 80048fa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80048fc:	463b      	mov	r3, r7
 80048fe:	4619      	mov	r1, r3
 8004900:	4824      	ldr	r0, [pc, #144]	; (8004994 <MX_ADC1_Init+0x114>)
 8004902:	f002 fff9 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8004906:	4603      	mov	r3, r0
 8004908:	2b00      	cmp	r3, #0
 800490a:	d001      	beq.n	8004910 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800490c:	f000 fb16 	bl	8004f3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004910:	230a      	movs	r3, #10
 8004912:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8004914:	2302      	movs	r3, #2
 8004916:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8004918:	2305      	movs	r3, #5
 800491a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800491c:	463b      	mov	r3, r7
 800491e:	4619      	mov	r1, r3
 8004920:	481c      	ldr	r0, [pc, #112]	; (8004994 <MX_ADC1_Init+0x114>)
 8004922:	f002 ffe9 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8004926:	4603      	mov	r3, r0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d001      	beq.n	8004930 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800492c:	f000 fb06 	bl	8004f3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8004930:	230b      	movs	r3, #11
 8004932:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8004934:	2303      	movs	r3, #3
 8004936:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004938:	463b      	mov	r3, r7
 800493a:	4619      	mov	r1, r3
 800493c:	4815      	ldr	r0, [pc, #84]	; (8004994 <MX_ADC1_Init+0x114>)
 800493e:	f002 ffdb 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004948:	f000 faf8 	bl	8004f3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800494c:	230f      	movs	r3, #15
 800494e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8004950:	2304      	movs	r3, #4
 8004952:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8004954:	2307      	movs	r3, #7
 8004956:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004958:	463b      	mov	r3, r7
 800495a:	4619      	mov	r1, r3
 800495c:	480d      	ldr	r0, [pc, #52]	; (8004994 <MX_ADC1_Init+0x114>)
 800495e:	f002 ffcb 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d001      	beq.n	800496c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8004968:	f000 fae8 	bl	8004f3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800496c:	4b0c      	ldr	r3, [pc, #48]	; (80049a0 <MX_ADC1_Init+0x120>)
 800496e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8004970:	2305      	movs	r3, #5
 8004972:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8004974:	2301      	movs	r3, #1
 8004976:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004978:	463b      	mov	r3, r7
 800497a:	4619      	mov	r1, r3
 800497c:	4805      	ldr	r0, [pc, #20]	; (8004994 <MX_ADC1_Init+0x114>)
 800497e:	f002 ffbb 	bl	80078f8 <HAL_ADC_ConfigChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	2b00      	cmp	r3, #0
 8004986:	d001      	beq.n	800498c <MX_ADC1_Init+0x10c>
  {
    Error_Handler();
 8004988:	f000 fad8 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800498c:	bf00      	nop
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	2000fb10 	.word	0x2000fb10
 8004998:	40012000 	.word	0x40012000
 800499c:	0f000001 	.word	0x0f000001
 80049a0:	10000012 	.word	0x10000012

080049a4 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049aa:	4a0d      	ldr	r2, [pc, #52]	; (80049e0 <MX_SDMMC1_SD_Init+0x3c>)
 80049ac:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80049ae:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049b0:	2200      	movs	r2, #0
 80049b2:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80049b4:	4b09      	ldr	r3, [pc, #36]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80049ba:	4b08      	ldr	r3, [pc, #32]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049bc:	2200      	movs	r2, #0
 80049be:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80049c0:	4b06      	ldr	r3, [pc, #24]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80049c6:	4b05      	ldr	r3, [pc, #20]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049c8:	2200      	movs	r2, #0
 80049ca:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 80049cc:	4b03      	ldr	r3, [pc, #12]	; (80049dc <MX_SDMMC1_SD_Init+0x38>)
 80049ce:	2200      	movs	r2, #0
 80049d0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80049d2:	bf00      	nop
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	2000b9f8 	.word	0x2000b9f8
 80049e0:	40012c00 	.word	0x40012c00

080049e4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80049e8:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049ea:	4a1a      	ldr	r2, [pc, #104]	; (8004a54 <MX_SPI1_Init+0x70>)
 80049ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80049ee:	4b18      	ldr	r3, [pc, #96]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80049f4:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80049fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80049fc:	4b14      	ldr	r3, [pc, #80]	; (8004a50 <MX_SPI1_Init+0x6c>)
 80049fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a04:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a0a:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8004a10:	4b0f      	ldr	r3, [pc, #60]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a16:	4b0e      	ldr	r3, [pc, #56]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a1c:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a1e:	2200      	movs	r2, #0
 8004a20:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a22:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a24:	2200      	movs	r2, #0
 8004a26:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004a28:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a2a:	2207      	movs	r2, #7
 8004a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004a2e:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004a34:	4b06      	ldr	r3, [pc, #24]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a36:	2200      	movs	r2, #0
 8004a38:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004a3a:	4805      	ldr	r0, [pc, #20]	; (8004a50 <MX_SPI1_Init+0x6c>)
 8004a3c:	f007 fe46 	bl	800c6cc <HAL_SPI_Init>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8004a46:	f000 fa79 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004a4a:	bf00      	nop
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	20017ef8 	.word	0x20017ef8
 8004a54:	40013000 	.word	0x40013000

08004a58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8004a5c:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a5e:	4a1a      	ldr	r2, [pc, #104]	; (8004ac8 <MX_SPI2_Init+0x70>)
 8004a60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8004a62:	4b18      	ldr	r3, [pc, #96]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004a68:	4b16      	ldr	r3, [pc, #88]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8004a70:	4b14      	ldr	r3, [pc, #80]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a72:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004a76:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a78:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004a7e:	4b11      	ldr	r3, [pc, #68]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8004a84:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a8a:	4b0e      	ldr	r3, [pc, #56]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a90:	4b0c      	ldr	r3, [pc, #48]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a96:	4b0b      	ldr	r3, [pc, #44]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8004a9c:	4b09      	ldr	r3, [pc, #36]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004a9e:	2207      	movs	r2, #7
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004aae:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <MX_SPI2_Init+0x6c>)
 8004ab0:	f007 fe0c 	bl	800c6cc <HAL_SPI_Init>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d001      	beq.n	8004abe <MX_SPI2_Init+0x66>
  {
    Error_Handler();
 8004aba:	f000 fa3f 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004abe:	bf00      	nop
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	200096ac 	.word	0x200096ac
 8004ac8:	40003800 	.word	0x40003800

08004acc <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004ad0:	4b19      	ldr	r3, [pc, #100]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ad2:	4a1a      	ldr	r2, [pc, #104]	; (8004b3c <MX_SPI3_Init+0x70>)
 8004ad4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8004ad6:	4b18      	ldr	r3, [pc, #96]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004ae2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004ae4:	4b14      	ldr	r3, [pc, #80]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004ae6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004aea:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004aec:	4b12      	ldr	r3, [pc, #72]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004af2:	4b11      	ldr	r3, [pc, #68]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004af4:	2200      	movs	r2, #0
 8004af6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_INPUT;
 8004af8:	4b0f      	ldr	r3, [pc, #60]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b04:	4b0c      	ldr	r3, [pc, #48]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b0a:	4b0b      	ldr	r3, [pc, #44]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004b10:	4b09      	ldr	r3, [pc, #36]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b12:	2207      	movs	r2, #7
 8004b14:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b16:	4b08      	ldr	r3, [pc, #32]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8004b1c:	4b06      	ldr	r3, [pc, #24]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b22:	4805      	ldr	r0, [pc, #20]	; (8004b38 <MX_SPI3_Init+0x6c>)
 8004b24:	f007 fdd2 	bl	800c6cc <HAL_SPI_Init>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <MX_SPI3_Init+0x66>
  {
    Error_Handler();
 8004b2e:	f000 fa05 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004b32:	bf00      	nop
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	2000fa9c 	.word	0x2000fa9c
 8004b3c:	40003c00 	.word	0x40003c00

08004b40 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8004b44:	4b14      	ldr	r3, [pc, #80]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b46:	4a15      	ldr	r2, [pc, #84]	; (8004b9c <MX_UART4_Init+0x5c>)
 8004b48:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8004b4a:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004b50:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8004b52:	4b11      	ldr	r3, [pc, #68]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b54:	2200      	movs	r2, #0
 8004b56:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8004b58:	4b0f      	ldr	r3, [pc, #60]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8004b5e:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8004b64:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b66:	220c      	movs	r2, #12
 8004b68:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004b6a:	4b0b      	ldr	r3, [pc, #44]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8004b70:	4b09      	ldr	r3, [pc, #36]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b72:	2200      	movs	r2, #0
 8004b74:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b7e:	2200      	movs	r2, #0
 8004b80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8004b82:	4805      	ldr	r0, [pc, #20]	; (8004b98 <MX_UART4_Init+0x58>)
 8004b84:	f008 fede 	bl	800d944 <HAL_UART_Init>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d001      	beq.n	8004b92 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8004b8e:	f000 f9d5 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20017e78 	.word	0x20017e78
 8004b9c:	40004c00 	.word	0x40004c00

08004ba0 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004ba6:	4a15      	ldr	r2, [pc, #84]	; (8004bfc <MX_UART7_Init+0x5c>)
 8004ba8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8004baa:	4b13      	ldr	r3, [pc, #76]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004bb0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8004bb8:	4b0f      	ldr	r3, [pc, #60]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8004bc4:	4b0c      	ldr	r3, [pc, #48]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bc6:	220c      	movs	r2, #12
 8004bc8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004bca:	4b0b      	ldr	r3, [pc, #44]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8004bd0:	4b09      	ldr	r3, [pc, #36]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004bd6:	4b08      	ldr	r3, [pc, #32]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004bdc:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8004be2:	4805      	ldr	r0, [pc, #20]	; (8004bf8 <MX_UART7_Init+0x58>)
 8004be4:	f008 feae 	bl	800d944 <HAL_UART_Init>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8004bee:	f000 f9a5 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004bf2:	bf00      	nop
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	20009718 	.word	0x20009718
 8004bfc:	40007800 	.word	0x40007800

08004c00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004c04:	4b14      	ldr	r3, [pc, #80]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c06:	4a15      	ldr	r2, [pc, #84]	; (8004c5c <MX_USART1_UART_Init+0x5c>)
 8004c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004c0a:	4b13      	ldr	r3, [pc, #76]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c0c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004c12:	4b11      	ldr	r3, [pc, #68]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004c18:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_RX;
 8004c24:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c26:	2204      	movs	r2, #4
 8004c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c2a:	4b0b      	ldr	r3, [pc, #44]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c36:	4b08      	ldr	r3, [pc, #32]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c3c:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c3e:	2200      	movs	r2, #0
 8004c40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004c42:	4805      	ldr	r0, [pc, #20]	; (8004c58 <MX_USART1_UART_Init+0x58>)
 8004c44:	f008 fe7e 	bl	800d944 <HAL_UART_Init>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8004c4e:	f000 f975 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	2000fc24 	.word	0x2000fc24
 8004c5c:	40011000 	.word	0x40011000

08004c60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004c64:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c66:	4a15      	ldr	r2, [pc, #84]	; (8004cbc <MX_USART2_UART_Init+0x5c>)
 8004c68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c6c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004c70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004c72:	4b11      	ldr	r3, [pc, #68]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004c78:	4b0f      	ldr	r3, [pc, #60]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004c7e:	4b0e      	ldr	r3, [pc, #56]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_RX;
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c86:	2204      	movs	r2, #4
 8004c88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004c90:	4b09      	ldr	r3, [pc, #36]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004c96:	4b08      	ldr	r3, [pc, #32]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004c9c:	4b06      	ldr	r3, [pc, #24]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004ca2:	4805      	ldr	r0, [pc, #20]	; (8004cb8 <MX_USART2_UART_Init+0x58>)
 8004ca4:	f008 fe4e 	bl	800d944 <HAL_UART_Init>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d001      	beq.n	8004cb2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004cae:	f000 f945 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004cb2:	bf00      	nop
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	20019fc0 	.word	0x20019fc0
 8004cbc:	40004400 	.word	0x40004400

08004cc0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004cc4:	4b14      	ldr	r3, [pc, #80]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cc6:	4a15      	ldr	r2, [pc, #84]	; (8004d1c <MX_USART3_UART_Init+0x5c>)
 8004cc8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8004cca:	4b13      	ldr	r3, [pc, #76]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004ccc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004cd0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004cd2:	4b11      	ldr	r3, [pc, #68]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004cd8:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cda:	2200      	movs	r2, #0
 8004cdc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004cde:	4b0e      	ldr	r3, [pc, #56]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_RX;
 8004ce4:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004ce6:	2204      	movs	r2, #4
 8004ce8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cea:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cec:	2200      	movs	r2, #0
 8004cee:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004cf0:	4b09      	ldr	r3, [pc, #36]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004cf6:	4b08      	ldr	r3, [pc, #32]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cfc:	4b06      	ldr	r3, [pc, #24]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004d02:	4805      	ldr	r0, [pc, #20]	; (8004d18 <MX_USART3_UART_Init+0x58>)
 8004d04:	f008 fe1e 	bl	800d944 <HAL_UART_Init>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d001      	beq.n	8004d12 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8004d0e:	f000 f915 	bl	8004f3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004d12:	bf00      	nop
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	200097f8 	.word	0x200097f8
 8004d1c:	40004800 	.word	0x40004800

08004d20 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004d26:	4b36      	ldr	r3, [pc, #216]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d2a:	4a35      	ldr	r2, [pc, #212]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d30:	6313      	str	r3, [r2, #48]	; 0x30
 8004d32:	4b33      	ldr	r3, [pc, #204]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d3a:	607b      	str	r3, [r7, #4]
 8004d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004d3e:	4b30      	ldr	r3, [pc, #192]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d42:	4a2f      	ldr	r2, [pc, #188]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d44:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004d48:	6313      	str	r3, [r2, #48]	; 0x30
 8004d4a:	4b2d      	ldr	r3, [pc, #180]	; (8004e00 <MX_DMA_Init+0xe0>)
 8004d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d52:	603b      	str	r3, [r7, #0]
 8004d54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8004d56:	2200      	movs	r2, #0
 8004d58:	2105      	movs	r1, #5
 8004d5a:	200b      	movs	r0, #11
 8004d5c:	f003 f94a 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8004d60:	200b      	movs	r0, #11
 8004d62:	f003 f963 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2105      	movs	r1, #5
 8004d6a:	200c      	movs	r0, #12
 8004d6c:	f003 f942 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004d70:	200c      	movs	r0, #12
 8004d72:	f003 f95b 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2105      	movs	r1, #5
 8004d7a:	200d      	movs	r0, #13
 8004d7c:	f003 f93a 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8004d80:	200d      	movs	r0, #13
 8004d82:	f003 f953 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	2105      	movs	r1, #5
 8004d8a:	200e      	movs	r0, #14
 8004d8c:	f003 f932 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8004d90:	200e      	movs	r0, #14
 8004d92:	f003 f94b 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8004d96:	2200      	movs	r2, #0
 8004d98:	2105      	movs	r1, #5
 8004d9a:	2010      	movs	r0, #16
 8004d9c:	f003 f92a 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8004da0:	2010      	movs	r0, #16
 8004da2:	f003 f943 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8004da6:	2200      	movs	r2, #0
 8004da8:	2105      	movs	r1, #5
 8004daa:	2038      	movs	r0, #56	; 0x38
 8004dac:	f003 f922 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004db0:	2038      	movs	r0, #56	; 0x38
 8004db2:	f003 f93b 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8004db6:	2200      	movs	r2, #0
 8004db8:	2105      	movs	r1, #5
 8004dba:	203a      	movs	r0, #58	; 0x3a
 8004dbc:	f003 f91a 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004dc0:	203a      	movs	r0, #58	; 0x3a
 8004dc2:	f003 f933 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	2105      	movs	r1, #5
 8004dca:	203b      	movs	r0, #59	; 0x3b
 8004dcc:	f003 f912 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8004dd0:	203b      	movs	r0, #59	; 0x3b
 8004dd2:	f003 f92b 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	2105      	movs	r1, #5
 8004dda:	203c      	movs	r0, #60	; 0x3c
 8004ddc:	f003 f90a 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004de0:	203c      	movs	r0, #60	; 0x3c
 8004de2:	f003 f923 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2105      	movs	r1, #5
 8004dea:	2045      	movs	r0, #69	; 0x45
 8004dec:	f003 f902 	bl	8007ff4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8004df0:	2045      	movs	r0, #69	; 0x45
 8004df2:	f003 f91b 	bl	800802c <HAL_NVIC_EnableIRQ>

}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	40023800 	.word	0x40023800

08004e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0a:	f107 031c 	add.w	r3, r7, #28
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	609a      	str	r2, [r3, #8]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1a:	4b37      	ldr	r3, [pc, #220]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	4a36      	ldr	r2, [pc, #216]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e20:	f043 0304 	orr.w	r3, r3, #4
 8004e24:	6313      	str	r3, [r2, #48]	; 0x30
 8004e26:	4b34      	ldr	r3, [pc, #208]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2a:	f003 0304 	and.w	r3, r3, #4
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e32:	4b31      	ldr	r3, [pc, #196]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e36:	4a30      	ldr	r2, [pc, #192]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e3e:	4b2e      	ldr	r3, [pc, #184]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e4a:	4b2b      	ldr	r3, [pc, #172]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e4e:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e50:	f043 0301 	orr.w	r3, r3, #1
 8004e54:	6313      	str	r3, [r2, #48]	; 0x30
 8004e56:	4b28      	ldr	r3, [pc, #160]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e62:	4b25      	ldr	r3, [pc, #148]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a24      	ldr	r2, [pc, #144]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e68:	f043 0302 	orr.w	r3, r3, #2
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b22      	ldr	r3, [pc, #136]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	60fb      	str	r3, [r7, #12]
 8004e78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004e7a:	4b1f      	ldr	r3, [pc, #124]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7e:	4a1e      	ldr	r2, [pc, #120]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e80:	f043 0310 	orr.w	r3, r3, #16
 8004e84:	6313      	str	r3, [r2, #48]	; 0x30
 8004e86:	4b1c      	ldr	r3, [pc, #112]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	60bb      	str	r3, [r7, #8]
 8004e90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e92:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	4a18      	ldr	r2, [pc, #96]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004e98:	f043 0308 	orr.w	r3, r3, #8
 8004e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9e:	4b16      	ldr	r3, [pc, #88]	; (8004ef8 <MX_GPIO_Init+0xf4>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	607b      	str	r3, [r7, #4]
 8004ea8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f643 0103 	movw	r1, #14339	; 0x3803
 8004eb0:	4812      	ldr	r0, [pc, #72]	; (8004efc <MX_GPIO_Init+0xf8>)
 8004eb2:	f003 fe9f 	bl	8008bf4 <HAL_GPIO_WritePin>
                          |LED2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8004eb6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004eba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ec4:	f107 031c 	add.w	r3, r7, #28
 8004ec8:	4619      	mov	r1, r3
 8004eca:	480d      	ldr	r0, [pc, #52]	; (8004f00 <MX_GPIO_Init+0xfc>)
 8004ecc:	f003 fcd0 	bl	8008870 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED4_Pin BUZZER_Pin LED1_Pin 
                           LED2_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin|BUZZER_Pin|LED1_Pin 
 8004ed0:	f643 0303 	movw	r3, #14339	; 0x3803
 8004ed4:	61fb      	str	r3, [r7, #28]
                          |LED2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eda:	2300      	movs	r3, #0
 8004edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ee2:	f107 031c 	add.w	r3, r7, #28
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	4804      	ldr	r0, [pc, #16]	; (8004efc <MX_GPIO_Init+0xf8>)
 8004eea:	f003 fcc1 	bl	8008870 <HAL_GPIO_Init>

}
 8004eee:	bf00      	nop
 8004ef0:	3730      	adds	r7, #48	; 0x30
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	40020c00 	.word	0x40020c00
 8004f00:	40020800 	.word	0x40020800

08004f04 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b082      	sub	sp, #8
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8004f0c:	f014 fd7e 	bl	8019a0c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8004f10:	2001      	movs	r0, #1
 8004f12:	f010 feeb 	bl	8015cec <osDelay>
 8004f16:	e7fb      	b.n	8004f10 <StartDefaultTask+0xc>

08004f18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a04      	ldr	r2, [pc, #16]	; (8004f38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d101      	bne.n	8004f2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004f2a:	f002 fb09 	bl	8007540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004f2e:	bf00      	nop
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	40010000 	.word	0x40010000

08004f3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004f40:	bf00      	nop
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr
	...

08004f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	4a10      	ldr	r2, [pc, #64]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f5e:	4b0e      	ldr	r3, [pc, #56]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6e:	4a0a      	ldr	r2, [pc, #40]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f74:	6453      	str	r3, [r2, #68]	; 0x44
 8004f76:	4b08      	ldr	r3, [pc, #32]	; (8004f98 <HAL_MspInit+0x4c>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004f82:	2200      	movs	r2, #0
 8004f84:	210f      	movs	r1, #15
 8004f86:	f06f 0001 	mvn.w	r0, #1
 8004f8a:	f003 f833 	bl	8007ff4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f8e:	bf00      	nop
 8004f90:	3708      	adds	r7, #8
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40023800 	.word	0x40023800

08004f9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b08a      	sub	sp, #40	; 0x28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fa4:	f107 0314 	add.w	r3, r7, #20
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	605a      	str	r2, [r3, #4]
 8004fae:	609a      	str	r2, [r3, #8]
 8004fb0:	60da      	str	r2, [r3, #12]
 8004fb2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a39      	ldr	r2, [pc, #228]	; (80050a0 <HAL_ADC_MspInit+0x104>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d16b      	bne.n	8005096 <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004fbe:	4b39      	ldr	r3, [pc, #228]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fc2:	4a38      	ldr	r2, [pc, #224]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd2:	613b      	str	r3, [r7, #16]
 8004fd4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004fd6:	4b33      	ldr	r3, [pc, #204]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004fdc:	f043 0304 	orr.w	r3, r3, #4
 8004fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fe2:	4b30      	ldr	r3, [pc, #192]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	60fb      	str	r3, [r7, #12]
 8004fec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fee:	4b2d      	ldr	r3, [pc, #180]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff2:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004ff4:	f043 0302 	orr.w	r3, r3, #2
 8004ff8:	6313      	str	r3, [r2, #48]	; 0x30
 8004ffa:	4b2a      	ldr	r3, [pc, #168]	; (80050a4 <HAL_ADC_MspInit+0x108>)
 8004ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC5     ------> ADC1_IN15
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = VSENS3V3_Pin|VSENSBAT_Pin|CURRBAT1_Pin;
 8005006:	2323      	movs	r3, #35	; 0x23
 8005008:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800500a:	2303      	movs	r3, #3
 800500c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500e:	2300      	movs	r3, #0
 8005010:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	4619      	mov	r1, r3
 8005018:	4823      	ldr	r0, [pc, #140]	; (80050a8 <HAL_ADC_MspInit+0x10c>)
 800501a:	f003 fc29 	bl	8008870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CURRBAT2_Pin;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005022:	2303      	movs	r3, #3
 8005024:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CURRBAT2_GPIO_Port, &GPIO_InitStruct);
 800502a:	f107 0314 	add.w	r3, r7, #20
 800502e:	4619      	mov	r1, r3
 8005030:	481e      	ldr	r0, [pc, #120]	; (80050ac <HAL_ADC_MspInit+0x110>)
 8005032:	f003 fc1d 	bl	8008870 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 8005036:	4b1e      	ldr	r3, [pc, #120]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005038:	4a1e      	ldr	r2, [pc, #120]	; (80050b4 <HAL_ADC_MspInit+0x118>)
 800503a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800503c:	4b1c      	ldr	r3, [pc, #112]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 800503e:	2200      	movs	r2, #0
 8005040:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005042:	4b1b      	ldr	r3, [pc, #108]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005044:	2200      	movs	r2, #0
 8005046:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005048:	4b19      	ldr	r3, [pc, #100]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 800504a:	2200      	movs	r2, #0
 800504c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800504e:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005054:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005056:	4b16      	ldr	r3, [pc, #88]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800505c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800505e:	4b14      	ldr	r3, [pc, #80]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005064:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005066:	4b12      	ldr	r3, [pc, #72]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800506c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005070:	2200      	movs	r2, #0
 8005072:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005076:	2200      	movs	r2, #0
 8005078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800507a:	480d      	ldr	r0, [pc, #52]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 800507c:	f002 ffe4 	bl	8008048 <HAL_DMA_Init>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d001      	beq.n	800508a <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 8005086:	f7ff ff59 	bl	8004f3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a08      	ldr	r2, [pc, #32]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 800508e:	639a      	str	r2, [r3, #56]	; 0x38
 8005090:	4a07      	ldr	r2, [pc, #28]	; (80050b0 <HAL_ADC_MspInit+0x114>)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005096:	bf00      	nop
 8005098:	3728      	adds	r7, #40	; 0x28
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40012000 	.word	0x40012000
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40020800 	.word	0x40020800
 80050ac:	40020400 	.word	0x40020400
 80050b0:	2000fcb8 	.word	0x2000fcb8
 80050b4:	40026470 	.word	0x40026470

080050b8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b08a      	sub	sp, #40	; 0x28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050c0:	f107 0314 	add.w	r3, r7, #20
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]
 80050c8:	605a      	str	r2, [r3, #4]
 80050ca:	609a      	str	r2, [r3, #8]
 80050cc:	60da      	str	r2, [r3, #12]
 80050ce:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a65      	ldr	r2, [pc, #404]	; (800526c <HAL_SD_MspInit+0x1b4>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	f040 80c3 	bne.w	8005262 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80050dc:	4b64      	ldr	r3, [pc, #400]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 80050de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050e0:	4a63      	ldr	r2, [pc, #396]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 80050e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80050e6:	6453      	str	r3, [r2, #68]	; 0x44
 80050e8:	4b61      	ldr	r3, [pc, #388]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 80050ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f0:	613b      	str	r3, [r7, #16]
 80050f2:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80050f4:	4b5e      	ldr	r3, [pc, #376]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 80050f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f8:	4a5d      	ldr	r2, [pc, #372]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 80050fa:	f043 0304 	orr.w	r3, r3, #4
 80050fe:	6313      	str	r3, [r2, #48]	; 0x30
 8005100:	4b5b      	ldr	r3, [pc, #364]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 8005102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800510c:	4b58      	ldr	r3, [pc, #352]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	4a57      	ldr	r2, [pc, #348]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 8005112:	f043 0308 	orr.w	r3, r3, #8
 8005116:	6313      	str	r3, [r2, #48]	; 0x30
 8005118:	4b55      	ldr	r3, [pc, #340]	; (8005270 <HAL_SD_MspInit+0x1b8>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	f003 0308 	and.w	r3, r3, #8
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11 
 8005124:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8005128:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800512a:	2302      	movs	r3, #2
 800512c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512e:	2300      	movs	r3, #0
 8005130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005132:	2303      	movs	r3, #3
 8005134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005136:	230c      	movs	r3, #12
 8005138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800513a:	f107 0314 	add.w	r3, r7, #20
 800513e:	4619      	mov	r1, r3
 8005140:	484c      	ldr	r0, [pc, #304]	; (8005274 <HAL_SD_MspInit+0x1bc>)
 8005142:	f003 fb95 	bl	8008870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005146:	2304      	movs	r3, #4
 8005148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800514a:	2302      	movs	r3, #2
 800514c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514e:	2300      	movs	r3, #0
 8005150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005152:	2303      	movs	r3, #3
 8005154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8005156:	230c      	movs	r3, #12
 8005158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800515a:	f107 0314 	add.w	r3, r7, #20
 800515e:	4619      	mov	r1, r3
 8005160:	4845      	ldr	r0, [pc, #276]	; (8005278 <HAL_SD_MspInit+0x1c0>)
 8005162:	f003 fb85 	bl	8008870 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream6;
 8005166:	4b45      	ldr	r3, [pc, #276]	; (800527c <HAL_SD_MspInit+0x1c4>)
 8005168:	4a45      	ldr	r2, [pc, #276]	; (8005280 <HAL_SD_MspInit+0x1c8>)
 800516a:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 800516c:	4b43      	ldr	r3, [pc, #268]	; (800527c <HAL_SD_MspInit+0x1c4>)
 800516e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005172:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005174:	4b41      	ldr	r3, [pc, #260]	; (800527c <HAL_SD_MspInit+0x1c4>)
 8005176:	2200      	movs	r2, #0
 8005178:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800517a:	4b40      	ldr	r3, [pc, #256]	; (800527c <HAL_SD_MspInit+0x1c4>)
 800517c:	2200      	movs	r2, #0
 800517e:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005180:	4b3e      	ldr	r3, [pc, #248]	; (800527c <HAL_SD_MspInit+0x1c4>)
 8005182:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005186:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005188:	4b3c      	ldr	r3, [pc, #240]	; (800527c <HAL_SD_MspInit+0x1c4>)
 800518a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800518e:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005190:	4b3a      	ldr	r3, [pc, #232]	; (800527c <HAL_SD_MspInit+0x1c4>)
 8005192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005196:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8005198:	4b38      	ldr	r3, [pc, #224]	; (800527c <HAL_SD_MspInit+0x1c4>)
 800519a:	2220      	movs	r2, #32
 800519c:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800519e:	4b37      	ldr	r3, [pc, #220]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051a0:	2200      	movs	r2, #0
 80051a2:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80051a4:	4b35      	ldr	r3, [pc, #212]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051a6:	2204      	movs	r2, #4
 80051a8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051ac:	2203      	movs	r2, #3
 80051ae:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80051b8:	4b30      	ldr	r3, [pc, #192]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051ba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80051c0:	482e      	ldr	r0, [pc, #184]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051c2:	f002 ff41 	bl	8008048 <HAL_DMA_Init>
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 80051cc:	f7ff feb6 	bl	8004f3c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4a2a      	ldr	r2, [pc, #168]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051d4:	641a      	str	r2, [r3, #64]	; 0x40
 80051d6:	4a29      	ldr	r2, [pc, #164]	; (800527c <HAL_SD_MspInit+0x1c4>)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream3;
 80051dc:	4b29      	ldr	r3, [pc, #164]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 80051de:	4a2a      	ldr	r2, [pc, #168]	; (8005288 <HAL_SD_MspInit+0x1d0>)
 80051e0:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 80051e2:	4b28      	ldr	r3, [pc, #160]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 80051e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051e8:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051ea:	4b26      	ldr	r3, [pc, #152]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 80051ec:	2240      	movs	r2, #64	; 0x40
 80051ee:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051f0:	4b24      	ldr	r3, [pc, #144]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 80051f2:	2200      	movs	r2, #0
 80051f4:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051f6:	4b23      	ldr	r3, [pc, #140]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 80051f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051fc:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80051fe:	4b21      	ldr	r3, [pc, #132]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005200:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005204:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005206:	4b1f      	ldr	r3, [pc, #124]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005208:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800520c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 800520e:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005210:	2220      	movs	r2, #32
 8005212:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005214:	4b1b      	ldr	r3, [pc, #108]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005216:	2200      	movs	r2, #0
 8005218:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800521a:	4b1a      	ldr	r3, [pc, #104]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 800521c:	2204      	movs	r2, #4
 800521e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8005220:	4b18      	ldr	r3, [pc, #96]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005222:	2203      	movs	r2, #3
 8005224:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8005226:	4b17      	ldr	r3, [pc, #92]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005228:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800522c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 800522e:	4b15      	ldr	r3, [pc, #84]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005230:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005234:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8005236:	4813      	ldr	r0, [pc, #76]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 8005238:	f002 ff06 	bl	8008048 <HAL_DMA_Init>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d001      	beq.n	8005246 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8005242:	f7ff fe7b 	bl	8004f3c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a0e      	ldr	r2, [pc, #56]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 800524a:	63da      	str	r2, [r3, #60]	; 0x3c
 800524c:	4a0d      	ldr	r2, [pc, #52]	; (8005284 <HAL_SD_MspInit+0x1cc>)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8005252:	2200      	movs	r2, #0
 8005254:	2105      	movs	r1, #5
 8005256:	2031      	movs	r0, #49	; 0x31
 8005258:	f002 fecc 	bl	8007ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800525c:	2031      	movs	r0, #49	; 0x31
 800525e:	f002 fee5 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8005262:	bf00      	nop
 8005264:	3728      	adds	r7, #40	; 0x28
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
 800526a:	bf00      	nop
 800526c:	40012c00 	.word	0x40012c00
 8005270:	40023800 	.word	0x40023800
 8005274:	40020800 	.word	0x40020800
 8005278:	40020c00 	.word	0x40020c00
 800527c:	20013e0c 	.word	0x20013e0c
 8005280:	400264a0 	.word	0x400264a0
 8005284:	2001c100 	.word	0x2001c100
 8005288:	40026458 	.word	0x40026458

0800528c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b08e      	sub	sp, #56	; 0x38
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	605a      	str	r2, [r3, #4]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	60da      	str	r2, [r3, #12]
 80052a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a64      	ldr	r2, [pc, #400]	; (800543c <HAL_SPI_MspInit+0x1b0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d160      	bne.n	8005370 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80052ae:	4b64      	ldr	r3, [pc, #400]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 80052b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052b2:	4a63      	ldr	r2, [pc, #396]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 80052b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80052b8:	6453      	str	r3, [r2, #68]	; 0x44
 80052ba:	4b61      	ldr	r3, [pc, #388]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 80052bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80052c2:	623b      	str	r3, [r7, #32]
 80052c4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80052c6:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 80052c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ca:	4a5d      	ldr	r2, [pc, #372]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 80052cc:	f043 0301 	orr.w	r3, r3, #1
 80052d0:	6313      	str	r3, [r2, #48]	; 0x30
 80052d2:	4b5b      	ldr	r3, [pc, #364]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	f003 0301 	and.w	r3, r3, #1
 80052da:	61fb      	str	r3, [r7, #28]
 80052dc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7|GPIO_PIN_15;
 80052de:	f248 03a0 	movw	r3, #32928	; 0x80a0
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e4:	2302      	movs	r3, #2
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ec:	2303      	movs	r3, #3
 80052ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80052f0:	2305      	movs	r3, #5
 80052f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f8:	4619      	mov	r1, r3
 80052fa:	4852      	ldr	r0, [pc, #328]	; (8005444 <HAL_SPI_MspInit+0x1b8>)
 80052fc:	f003 fab8 	bl	8008870 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 8005300:	4b51      	ldr	r3, [pc, #324]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005302:	4a52      	ldr	r2, [pc, #328]	; (800544c <HAL_SPI_MspInit+0x1c0>)
 8005304:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 8005306:	4b50      	ldr	r3, [pc, #320]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005308:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800530c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800530e:	4b4e      	ldr	r3, [pc, #312]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005310:	2200      	movs	r2, #0
 8005312:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005314:	4b4c      	ldr	r3, [pc, #304]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005316:	2200      	movs	r2, #0
 8005318:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800531a:	4b4b      	ldr	r3, [pc, #300]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 800531c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005320:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005322:	4b49      	ldr	r3, [pc, #292]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005324:	2200      	movs	r2, #0
 8005326:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005328:	4b47      	ldr	r3, [pc, #284]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 800532a:	2200      	movs	r2, #0
 800532c:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800532e:	4b46      	ldr	r3, [pc, #280]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005330:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005334:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005336:	4b44      	ldr	r3, [pc, #272]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005338:	2200      	movs	r2, #0
 800533a:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800533c:	4b42      	ldr	r3, [pc, #264]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 800533e:	2200      	movs	r2, #0
 8005340:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8005342:	4841      	ldr	r0, [pc, #260]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005344:	f002 fe80 	bl	8008048 <HAL_DMA_Init>
 8005348:	4603      	mov	r3, r0
 800534a:	2b00      	cmp	r3, #0
 800534c:	d001      	beq.n	8005352 <HAL_SPI_MspInit+0xc6>
    {
      Error_Handler();
 800534e:	f7ff fdf5 	bl	8004f3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a3c      	ldr	r2, [pc, #240]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 8005356:	659a      	str	r2, [r3, #88]	; 0x58
 8005358:	4a3b      	ldr	r2, [pc, #236]	; (8005448 <HAL_SPI_MspInit+0x1bc>)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800535e:	2200      	movs	r2, #0
 8005360:	2105      	movs	r1, #5
 8005362:	2023      	movs	r0, #35	; 0x23
 8005364:	f002 fe46 	bl	8007ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8005368:	2023      	movs	r0, #35	; 0x23
 800536a:	f002 fe5f 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800536e:	e107      	b.n	8005580 <HAL_SPI_MspInit+0x2f4>
  else if(hspi->Instance==SPI2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a36      	ldr	r2, [pc, #216]	; (8005450 <HAL_SPI_MspInit+0x1c4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d172      	bne.n	8005460 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800537a:	4b31      	ldr	r3, [pc, #196]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 8005380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005384:	6413      	str	r3, [r2, #64]	; 0x40
 8005386:	4b2e      	ldr	r3, [pc, #184]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 8005388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800538e:	61bb      	str	r3, [r7, #24]
 8005390:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005392:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	4a2a      	ldr	r2, [pc, #168]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	6313      	str	r3, [r2, #48]	; 0x30
 800539e:	4b28      	ldr	r3, [pc, #160]	; (8005440 <HAL_SPI_MspInit+0x1b4>)
 80053a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80053aa:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053b0:	2302      	movs	r3, #2
 80053b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053b4:	2300      	movs	r3, #0
 80053b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053b8:	2303      	movs	r3, #3
 80053ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80053bc:	2305      	movs	r3, #5
 80053be:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053c4:	4619      	mov	r1, r3
 80053c6:	4823      	ldr	r0, [pc, #140]	; (8005454 <HAL_SPI_MspInit+0x1c8>)
 80053c8:	f003 fa52 	bl	8008870 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80053cc:	4b22      	ldr	r3, [pc, #136]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053ce:	4a23      	ldr	r2, [pc, #140]	; (800545c <HAL_SPI_MspInit+0x1d0>)
 80053d0:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80053d2:	4b21      	ldr	r3, [pc, #132]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053d8:	4b1f      	ldr	r3, [pc, #124]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053da:	2200      	movs	r2, #0
 80053dc:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053de:	4b1e      	ldr	r3, [pc, #120]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053e4:	4b1c      	ldr	r3, [pc, #112]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053ea:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053ec:	4b1a      	ldr	r3, [pc, #104]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053f2:	4b19      	ldr	r3, [pc, #100]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053f4:	2200      	movs	r2, #0
 80053f6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80053f8:	4b17      	ldr	r3, [pc, #92]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 80053fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80053fe:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005400:	4b15      	ldr	r3, [pc, #84]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 8005402:	2200      	movs	r2, #0
 8005404:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005406:	4b14      	ldr	r3, [pc, #80]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 8005408:	2200      	movs	r2, #0
 800540a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800540c:	4812      	ldr	r0, [pc, #72]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 800540e:	f002 fe1b 	bl	8008048 <HAL_DMA_Init>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_SPI_MspInit+0x190>
      Error_Handler();
 8005418:	f7ff fd90 	bl	8004f3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a0e      	ldr	r2, [pc, #56]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 8005420:	659a      	str	r2, [r3, #88]	; 0x58
 8005422:	4a0d      	ldr	r2, [pc, #52]	; (8005458 <HAL_SPI_MspInit+0x1cc>)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8005428:	2200      	movs	r2, #0
 800542a:	2105      	movs	r1, #5
 800542c:	2024      	movs	r0, #36	; 0x24
 800542e:	f002 fde1 	bl	8007ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8005432:	2024      	movs	r0, #36	; 0x24
 8005434:	f002 fdfa 	bl	800802c <HAL_NVIC_EnableIRQ>
}
 8005438:	e0a2      	b.n	8005580 <HAL_SPI_MspInit+0x2f4>
 800543a:	bf00      	nop
 800543c:	40013000 	.word	0x40013000
 8005440:	40023800 	.word	0x40023800
 8005444:	40020000 	.word	0x40020000
 8005448:	2001a09c 	.word	0x2001a09c
 800544c:	40026410 	.word	0x40026410
 8005450:	40003800 	.word	0x40003800
 8005454:	40020400 	.word	0x40020400
 8005458:	2000b998 	.word	0x2000b998
 800545c:	40026058 	.word	0x40026058
  else if(hspi->Instance==SPI3)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a48      	ldr	r2, [pc, #288]	; (8005588 <HAL_SPI_MspInit+0x2fc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	f040 808a 	bne.w	8005580 <HAL_SPI_MspInit+0x2f4>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800546c:	4b47      	ldr	r3, [pc, #284]	; (800558c <HAL_SPI_MspInit+0x300>)
 800546e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005470:	4a46      	ldr	r2, [pc, #280]	; (800558c <HAL_SPI_MspInit+0x300>)
 8005472:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005476:	6413      	str	r3, [r2, #64]	; 0x40
 8005478:	4b44      	ldr	r3, [pc, #272]	; (800558c <HAL_SPI_MspInit+0x300>)
 800547a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005480:	613b      	str	r3, [r7, #16]
 8005482:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005484:	4b41      	ldr	r3, [pc, #260]	; (800558c <HAL_SPI_MspInit+0x300>)
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	4a40      	ldr	r2, [pc, #256]	; (800558c <HAL_SPI_MspInit+0x300>)
 800548a:	f043 0301 	orr.w	r3, r3, #1
 800548e:	6313      	str	r3, [r2, #48]	; 0x30
 8005490:	4b3e      	ldr	r3, [pc, #248]	; (800558c <HAL_SPI_MspInit+0x300>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800549c:	4b3b      	ldr	r3, [pc, #236]	; (800558c <HAL_SPI_MspInit+0x300>)
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	4a3a      	ldr	r2, [pc, #232]	; (800558c <HAL_SPI_MspInit+0x300>)
 80054a2:	f043 0302 	orr.w	r3, r3, #2
 80054a6:	6313      	str	r3, [r2, #48]	; 0x30
 80054a8:	4b38      	ldr	r3, [pc, #224]	; (800558c <HAL_SPI_MspInit+0x300>)
 80054aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ac:	f003 0302 	and.w	r3, r3, #2
 80054b0:	60bb      	str	r3, [r7, #8]
 80054b2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80054b4:	2310      	movs	r3, #16
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054b8:	2302      	movs	r3, #2
 80054ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054bc:	2300      	movs	r3, #0
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054c0:	2303      	movs	r3, #3
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80054c4:	2306      	movs	r3, #6
 80054c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054cc:	4619      	mov	r1, r3
 80054ce:	4830      	ldr	r0, [pc, #192]	; (8005590 <HAL_SPI_MspInit+0x304>)
 80054d0:	f003 f9ce 	bl	8008870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80054d4:	2304      	movs	r3, #4
 80054d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054d8:	2302      	movs	r3, #2
 80054da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054dc:	2300      	movs	r3, #0
 80054de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e0:	2303      	movs	r3, #3
 80054e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80054e4:	2307      	movs	r3, #7
 80054e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ec:	4619      	mov	r1, r3
 80054ee:	4829      	ldr	r0, [pc, #164]	; (8005594 <HAL_SPI_MspInit+0x308>)
 80054f0:	f003 f9be 	bl	8008870 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80054f4:	2318      	movs	r3, #24
 80054f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054f8:	2302      	movs	r3, #2
 80054fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005500:	2303      	movs	r3, #3
 8005502:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005504:	2306      	movs	r3, #6
 8005506:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005508:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800550c:	4619      	mov	r1, r3
 800550e:	4821      	ldr	r0, [pc, #132]	; (8005594 <HAL_SPI_MspInit+0x308>)
 8005510:	f003 f9ae 	bl	8008870 <HAL_GPIO_Init>
    hdma_spi3_rx.Instance = DMA1_Stream0;
 8005514:	4b20      	ldr	r3, [pc, #128]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005516:	4a21      	ldr	r2, [pc, #132]	; (800559c <HAL_SPI_MspInit+0x310>)
 8005518:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Channel = DMA_CHANNEL_0;
 800551a:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 800551c:	2200      	movs	r2, #0
 800551e:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005520:	4b1d      	ldr	r3, [pc, #116]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005522:	2200      	movs	r2, #0
 8005524:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005526:	4b1c      	ldr	r3, [pc, #112]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005528:	2200      	movs	r2, #0
 800552a:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800552c:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 800552e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005532:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005534:	4b18      	ldr	r3, [pc, #96]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005536:	2200      	movs	r2, #0
 8005538:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800553a:	4b17      	ldr	r3, [pc, #92]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 800553c:	2200      	movs	r2, #0
 800553e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_CIRCULAR;
 8005540:	4b15      	ldr	r3, [pc, #84]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005546:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005548:	4b13      	ldr	r3, [pc, #76]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 800554a:	2200      	movs	r2, #0
 800554c:	621a      	str	r2, [r3, #32]
    hdma_spi3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800554e:	4b12      	ldr	r3, [pc, #72]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005550:	2200      	movs	r2, #0
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 8005554:	4810      	ldr	r0, [pc, #64]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005556:	f002 fd77 	bl	8008048 <HAL_DMA_Init>
 800555a:	4603      	mov	r3, r0
 800555c:	2b00      	cmp	r3, #0
 800555e:	d001      	beq.n	8005564 <HAL_SPI_MspInit+0x2d8>
      Error_Handler();
 8005560:	f7ff fcec 	bl	8004f3c <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a0c      	ldr	r2, [pc, #48]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 8005568:	659a      	str	r2, [r3, #88]	; 0x58
 800556a:	4a0b      	ldr	r2, [pc, #44]	; (8005598 <HAL_SPI_MspInit+0x30c>)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8005570:	2200      	movs	r2, #0
 8005572:	2105      	movs	r1, #5
 8005574:	2033      	movs	r0, #51	; 0x33
 8005576:	f002 fd3d 	bl	8007ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 800557a:	2033      	movs	r0, #51	; 0x33
 800557c:	f002 fd56 	bl	800802c <HAL_NVIC_EnableIRQ>
}
 8005580:	bf00      	nop
 8005582:	3738      	adds	r7, #56	; 0x38
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}
 8005588:	40003c00 	.word	0x40003c00
 800558c:	40023800 	.word	0x40023800
 8005590:	40020000 	.word	0x40020000
 8005594:	40020400 	.word	0x40020400
 8005598:	2001c1c0 	.word	0x2001c1c0
 800559c:	40026010 	.word	0x40026010

080055a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b092      	sub	sp, #72	; 0x48
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
 80055b0:	605a      	str	r2, [r3, #4]
 80055b2:	609a      	str	r2, [r3, #8]
 80055b4:	60da      	str	r2, [r3, #12]
 80055b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a77      	ldr	r2, [pc, #476]	; (800579c <HAL_UART_MspInit+0x1fc>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d156      	bne.n	8005670 <HAL_UART_MspInit+0xd0>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80055c2:	4b77      	ldr	r3, [pc, #476]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80055c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c6:	4a76      	ldr	r2, [pc, #472]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80055c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055cc:	6413      	str	r3, [r2, #64]	; 0x40
 80055ce:	4b74      	ldr	r3, [pc, #464]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80055d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055d6:	633b      	str	r3, [r7, #48]	; 0x30
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055da:	4b71      	ldr	r3, [pc, #452]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80055dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055de:	4a70      	ldr	r2, [pc, #448]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80055e0:	f043 0301 	orr.w	r3, r3, #1
 80055e4:	6313      	str	r3, [r2, #48]	; 0x30
 80055e6:	4b6e      	ldr	r3, [pc, #440]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80055e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration    
    PA0/WKUP     ------> UART4_TX
    PA1     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80055f2:	2303      	movs	r3, #3
 80055f4:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055f6:	2302      	movs	r3, #2
 80055f8:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055fa:	2300      	movs	r3, #0
 80055fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055fe:	2303      	movs	r3, #3
 8005600:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005602:	2308      	movs	r3, #8
 8005604:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005606:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800560a:	4619      	mov	r1, r3
 800560c:	4865      	ldr	r0, [pc, #404]	; (80057a4 <HAL_UART_MspInit+0x204>)
 800560e:	f003 f92f 	bl	8008870 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8005612:	4b65      	ldr	r3, [pc, #404]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005614:	4a65      	ldr	r2, [pc, #404]	; (80057ac <HAL_UART_MspInit+0x20c>)
 8005616:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8005618:	4b63      	ldr	r3, [pc, #396]	; (80057a8 <HAL_UART_MspInit+0x208>)
 800561a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800561e:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005620:	4b61      	ldr	r3, [pc, #388]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005626:	4b60      	ldr	r3, [pc, #384]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005628:	2200      	movs	r2, #0
 800562a:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800562c:	4b5e      	ldr	r3, [pc, #376]	; (80057a8 <HAL_UART_MspInit+0x208>)
 800562e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005632:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005634:	4b5c      	ldr	r3, [pc, #368]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005636:	2200      	movs	r2, #0
 8005638:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800563a:	4b5b      	ldr	r3, [pc, #364]	; (80057a8 <HAL_UART_MspInit+0x208>)
 800563c:	2200      	movs	r2, #0
 800563e:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8005640:	4b59      	ldr	r3, [pc, #356]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005642:	2200      	movs	r2, #0
 8005644:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005646:	4b58      	ldr	r3, [pc, #352]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005648:	2200      	movs	r2, #0
 800564a:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800564c:	4b56      	ldr	r3, [pc, #344]	; (80057a8 <HAL_UART_MspInit+0x208>)
 800564e:	2200      	movs	r2, #0
 8005650:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8005652:	4855      	ldr	r0, [pc, #340]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005654:	f002 fcf8 	bl	8008048 <HAL_DMA_Init>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 800565e:	f7ff fc6d 	bl	8004f3c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a50      	ldr	r2, [pc, #320]	; (80057a8 <HAL_UART_MspInit+0x208>)
 8005666:	66da      	str	r2, [r3, #108]	; 0x6c
 8005668:	4a4f      	ldr	r2, [pc, #316]	; (80057a8 <HAL_UART_MspInit+0x208>)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800566e:	e165      	b.n	800593c <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==UART7)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	4a4e      	ldr	r2, [pc, #312]	; (80057b0 <HAL_UART_MspInit+0x210>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d131      	bne.n	80056de <HAL_UART_MspInit+0x13e>
    __HAL_RCC_UART7_CLK_ENABLE();
 800567a:	4b49      	ldr	r3, [pc, #292]	; (80057a0 <HAL_UART_MspInit+0x200>)
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	4a48      	ldr	r2, [pc, #288]	; (80057a0 <HAL_UART_MspInit+0x200>)
 8005680:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005684:	6413      	str	r3, [r2, #64]	; 0x40
 8005686:	4b46      	ldr	r3, [pc, #280]	; (80057a0 <HAL_UART_MspInit+0x200>)
 8005688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800568e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005690:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_UART_MspInit+0x200>)
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	4a42      	ldr	r2, [pc, #264]	; (80057a0 <HAL_UART_MspInit+0x200>)
 8005698:	f043 0310 	orr.w	r3, r3, #16
 800569c:	6313      	str	r3, [r2, #48]	; 0x30
 800569e:	4b40      	ldr	r3, [pc, #256]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80056a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80056aa:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80056ae:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b0:	2302      	movs	r3, #2
 80056b2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b8:	2303      	movs	r3, #3
 80056ba:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80056bc:	2308      	movs	r3, #8
 80056be:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80056c0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80056c4:	4619      	mov	r1, r3
 80056c6:	483b      	ldr	r0, [pc, #236]	; (80057b4 <HAL_UART_MspInit+0x214>)
 80056c8:	f003 f8d2 	bl	8008870 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80056cc:	2200      	movs	r2, #0
 80056ce:	2105      	movs	r1, #5
 80056d0:	2052      	movs	r0, #82	; 0x52
 80056d2:	f002 fc8f 	bl	8007ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80056d6:	2052      	movs	r0, #82	; 0x52
 80056d8:	f002 fca8 	bl	800802c <HAL_NVIC_EnableIRQ>
}
 80056dc:	e12e      	b.n	800593c <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART1)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a35      	ldr	r2, [pc, #212]	; (80057b8 <HAL_UART_MspInit+0x218>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d16d      	bne.n	80057c4 <HAL_UART_MspInit+0x224>
    __HAL_RCC_USART1_CLK_ENABLE();
 80056e8:	4b2d      	ldr	r3, [pc, #180]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80056ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80056ee:	f043 0310 	orr.w	r3, r3, #16
 80056f2:	6453      	str	r3, [r2, #68]	; 0x44
 80056f4:	4b2a      	ldr	r3, [pc, #168]	; (80057a0 <HAL_UART_MspInit+0x200>)
 80056f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f8:	f003 0310 	and.w	r3, r3, #16
 80056fc:	623b      	str	r3, [r7, #32]
 80056fe:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005700:	4b27      	ldr	r3, [pc, #156]	; (80057a0 <HAL_UART_MspInit+0x200>)
 8005702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005704:	4a26      	ldr	r2, [pc, #152]	; (80057a0 <HAL_UART_MspInit+0x200>)
 8005706:	f043 0301 	orr.w	r3, r3, #1
 800570a:	6313      	str	r3, [r2, #48]	; 0x30
 800570c:	4b24      	ldr	r3, [pc, #144]	; (80057a0 <HAL_UART_MspInit+0x200>)
 800570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	61fb      	str	r3, [r7, #28]
 8005716:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005718:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800571c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800571e:	2302      	movs	r3, #2
 8005720:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005722:	2300      	movs	r3, #0
 8005724:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005726:	2303      	movs	r3, #3
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800572a:	2307      	movs	r3, #7
 800572c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800572e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005732:	4619      	mov	r1, r3
 8005734:	481b      	ldr	r0, [pc, #108]	; (80057a4 <HAL_UART_MspInit+0x204>)
 8005736:	f003 f89b 	bl	8008870 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800573a:	4b20      	ldr	r3, [pc, #128]	; (80057bc <HAL_UART_MspInit+0x21c>)
 800573c:	4a20      	ldr	r2, [pc, #128]	; (80057c0 <HAL_UART_MspInit+0x220>)
 800573e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8005740:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005742:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005746:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005748:	4b1c      	ldr	r3, [pc, #112]	; (80057bc <HAL_UART_MspInit+0x21c>)
 800574a:	2200      	movs	r2, #0
 800574c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800574e:	4b1b      	ldr	r3, [pc, #108]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005750:	2200      	movs	r2, #0
 8005752:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005754:	4b19      	ldr	r3, [pc, #100]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800575a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800575c:	4b17      	ldr	r3, [pc, #92]	; (80057bc <HAL_UART_MspInit+0x21c>)
 800575e:	2200      	movs	r2, #0
 8005760:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005764:	2200      	movs	r2, #0
 8005766:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005768:	4b14      	ldr	r3, [pc, #80]	; (80057bc <HAL_UART_MspInit+0x21c>)
 800576a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800576e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005770:	4b12      	ldr	r3, [pc, #72]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005772:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005776:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005778:	4b10      	ldr	r3, [pc, #64]	; (80057bc <HAL_UART_MspInit+0x21c>)
 800577a:	2200      	movs	r2, #0
 800577c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800577e:	480f      	ldr	r0, [pc, #60]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005780:	f002 fc62 	bl	8008048 <HAL_DMA_Init>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_UART_MspInit+0x1ee>
      Error_Handler();
 800578a:	f7ff fbd7 	bl	8004f3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005792:	66da      	str	r2, [r3, #108]	; 0x6c
 8005794:	4a09      	ldr	r2, [pc, #36]	; (80057bc <HAL_UART_MspInit+0x21c>)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6393      	str	r3, [r2, #56]	; 0x38
}
 800579a:	e0cf      	b.n	800593c <HAL_UART_MspInit+0x39c>
 800579c:	40004c00 	.word	0x40004c00
 80057a0:	40023800 	.word	0x40023800
 80057a4:	40020000 	.word	0x40020000
 80057a8:	200095e0 	.word	0x200095e0
 80057ac:	40026040 	.word	0x40026040
 80057b0:	40007800 	.word	0x40007800
 80057b4:	40021000 	.word	0x40021000
 80057b8:	40011000 	.word	0x40011000
 80057bc:	2000fb60 	.word	0x2000fb60
 80057c0:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a5e      	ldr	r2, [pc, #376]	; (8005944 <HAL_UART_MspInit+0x3a4>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d158      	bne.n	8005880 <HAL_UART_MspInit+0x2e0>
    __HAL_RCC_USART2_CLK_ENABLE();
 80057ce:	4b5e      	ldr	r3, [pc, #376]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	4a5d      	ldr	r2, [pc, #372]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80057d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80057d8:	6413      	str	r3, [r2, #64]	; 0x40
 80057da:	4b5b      	ldr	r3, [pc, #364]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80057dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057e6:	4b58      	ldr	r3, [pc, #352]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	4a57      	ldr	r2, [pc, #348]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80057ec:	f043 0301 	orr.w	r3, r3, #1
 80057f0:	6313      	str	r3, [r2, #48]	; 0x30
 80057f2:	4b55      	ldr	r3, [pc, #340]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80057fe:	230c      	movs	r3, #12
 8005800:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005802:	2302      	movs	r3, #2
 8005804:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005806:	2300      	movs	r3, #0
 8005808:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800580a:	2303      	movs	r3, #3
 800580c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800580e:	2307      	movs	r3, #7
 8005810:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005812:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005816:	4619      	mov	r1, r3
 8005818:	484c      	ldr	r0, [pc, #304]	; (800594c <HAL_UART_MspInit+0x3ac>)
 800581a:	f003 f829 	bl	8008870 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800581e:	4b4c      	ldr	r3, [pc, #304]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005820:	4a4c      	ldr	r2, [pc, #304]	; (8005954 <HAL_UART_MspInit+0x3b4>)
 8005822:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005824:	4b4a      	ldr	r3, [pc, #296]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005826:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800582a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800582c:	4b48      	ldr	r3, [pc, #288]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 800582e:	2200      	movs	r2, #0
 8005830:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005832:	4b47      	ldr	r3, [pc, #284]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005834:	2200      	movs	r2, #0
 8005836:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005838:	4b45      	ldr	r3, [pc, #276]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 800583a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800583e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005840:	4b43      	ldr	r3, [pc, #268]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005842:	2200      	movs	r2, #0
 8005844:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005846:	4b42      	ldr	r3, [pc, #264]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005848:	2200      	movs	r2, #0
 800584a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800584c:	4b40      	ldr	r3, [pc, #256]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 800584e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005852:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005854:	4b3e      	ldr	r3, [pc, #248]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800585a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800585c:	4b3c      	ldr	r3, [pc, #240]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 800585e:	2200      	movs	r2, #0
 8005860:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005862:	483b      	ldr	r0, [pc, #236]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005864:	f002 fbf0 	bl	8008048 <HAL_DMA_Init>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <HAL_UART_MspInit+0x2d2>
      Error_Handler();
 800586e:	f7ff fb65 	bl	8004f3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a36      	ldr	r2, [pc, #216]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 8005876:	66da      	str	r2, [r3, #108]	; 0x6c
 8005878:	4a35      	ldr	r2, [pc, #212]	; (8005950 <HAL_UART_MspInit+0x3b0>)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6393      	str	r3, [r2, #56]	; 0x38
}
 800587e:	e05d      	b.n	800593c <HAL_UART_MspInit+0x39c>
  else if(huart->Instance==USART3)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a34      	ldr	r2, [pc, #208]	; (8005958 <HAL_UART_MspInit+0x3b8>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d158      	bne.n	800593c <HAL_UART_MspInit+0x39c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800588a:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 8005890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005894:	6413      	str	r3, [r2, #64]	; 0x40
 8005896:	4b2c      	ldr	r3, [pc, #176]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 8005898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80058a2:	4b29      	ldr	r3, [pc, #164]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80058a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058a6:	4a28      	ldr	r2, [pc, #160]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80058a8:	f043 0308 	orr.w	r3, r3, #8
 80058ac:	6313      	str	r3, [r2, #48]	; 0x30
 80058ae:	4b26      	ldr	r3, [pc, #152]	; (8005948 <HAL_UART_MspInit+0x3a8>)
 80058b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058b2:	f003 0308 	and.w	r3, r3, #8
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80058ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80058be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058c0:	2302      	movs	r3, #2
 80058c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058c4:	2300      	movs	r3, #0
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058c8:	2303      	movs	r3, #3
 80058ca:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80058cc:	2307      	movs	r3, #7
 80058ce:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80058d0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80058d4:	4619      	mov	r1, r3
 80058d6:	4821      	ldr	r0, [pc, #132]	; (800595c <HAL_UART_MspInit+0x3bc>)
 80058d8:	f002 ffca 	bl	8008870 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80058dc:	4b20      	ldr	r3, [pc, #128]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 80058de:	4a21      	ldr	r2, [pc, #132]	; (8005964 <HAL_UART_MspInit+0x3c4>)
 80058e0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80058e2:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 80058e4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80058e8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80058ea:	4b1d      	ldr	r3, [pc, #116]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80058f6:	4b1a      	ldr	r3, [pc, #104]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 80058f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058fc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80058fe:	4b18      	ldr	r3, [pc, #96]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 8005900:	2200      	movs	r2, #0
 8005902:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005904:	4b16      	ldr	r3, [pc, #88]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 8005906:	2200      	movs	r2, #0
 8005908:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800590a:	4b15      	ldr	r3, [pc, #84]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 800590c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005910:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005912:	4b13      	ldr	r3, [pc, #76]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 8005914:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005918:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800591a:	4b11      	ldr	r3, [pc, #68]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 800591c:	2200      	movs	r2, #0
 800591e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005920:	480f      	ldr	r0, [pc, #60]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 8005922:	f002 fb91 	bl	8008048 <HAL_DMA_Init>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <HAL_UART_MspInit+0x390>
      Error_Handler();
 800592c:	f7ff fb06 	bl	8004f3c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a0b      	ldr	r2, [pc, #44]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 8005934:	66da      	str	r2, [r3, #108]	; 0x6c
 8005936:	4a0a      	ldr	r2, [pc, #40]	; (8005960 <HAL_UART_MspInit+0x3c0>)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6393      	str	r3, [r2, #56]	; 0x38
}
 800593c:	bf00      	nop
 800593e:	3748      	adds	r7, #72	; 0x48
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}
 8005944:	40004400 	.word	0x40004400
 8005948:	40023800 	.word	0x40023800
 800594c:	40020000 	.word	0x40020000
 8005950:	20009644 	.word	0x20009644
 8005954:	40026088 	.word	0x40026088
 8005958:	40004800 	.word	0x40004800
 800595c:	40020c00 	.word	0x40020c00
 8005960:	20009798 	.word	0x20009798
 8005964:	40026028 	.word	0x40026028

08005968 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08c      	sub	sp, #48	; 0x30
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005970:	2300      	movs	r3, #0
 8005972:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8005978:	2200      	movs	r2, #0
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	2019      	movs	r0, #25
 800597e:	f002 fb39 	bl	8007ff4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8005982:	2019      	movs	r0, #25
 8005984:	f002 fb52 	bl	800802c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005988:	4b1f      	ldr	r3, [pc, #124]	; (8005a08 <HAL_InitTick+0xa0>)
 800598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598c:	4a1e      	ldr	r2, [pc, #120]	; (8005a08 <HAL_InitTick+0xa0>)
 800598e:	f043 0301 	orr.w	r3, r3, #1
 8005992:	6453      	str	r3, [r2, #68]	; 0x44
 8005994:	4b1c      	ldr	r3, [pc, #112]	; (8005a08 <HAL_InitTick+0xa0>)
 8005996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	60fb      	str	r3, [r7, #12]
 800599e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80059a0:	f107 0210 	add.w	r2, r7, #16
 80059a4:	f107 0314 	add.w	r3, r7, #20
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f004 ffb0 	bl	800a910 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80059b0:	f004 ff9a 	bl	800a8e8 <HAL_RCC_GetPCLK2Freq>
 80059b4:	4603      	mov	r3, r0
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80059ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059bc:	4a13      	ldr	r2, [pc, #76]	; (8005a0c <HAL_InitTick+0xa4>)
 80059be:	fba2 2303 	umull	r2, r3, r2, r3
 80059c2:	0c9b      	lsrs	r3, r3, #18
 80059c4:	3b01      	subs	r3, #1
 80059c6:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80059c8:	4b11      	ldr	r3, [pc, #68]	; (8005a10 <HAL_InitTick+0xa8>)
 80059ca:	4a12      	ldr	r2, [pc, #72]	; (8005a14 <HAL_InitTick+0xac>)
 80059cc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 80059ce:	4b10      	ldr	r3, [pc, #64]	; (8005a10 <HAL_InitTick+0xa8>)
 80059d0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80059d4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80059d6:	4a0e      	ldr	r2, [pc, #56]	; (8005a10 <HAL_InitTick+0xa8>)
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80059dc:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <HAL_InitTick+0xa8>)
 80059de:	2200      	movs	r2, #0
 80059e0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80059e2:	4b0b      	ldr	r3, [pc, #44]	; (8005a10 <HAL_InitTick+0xa8>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80059e8:	4809      	ldr	r0, [pc, #36]	; (8005a10 <HAL_InitTick+0xa8>)
 80059ea:	f007 fd45 	bl	800d478 <HAL_TIM_Base_Init>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80059f4:	4806      	ldr	r0, [pc, #24]	; (8005a10 <HAL_InitTick+0xa8>)
 80059f6:	f007 fd75 	bl	800d4e4 <HAL_TIM_Base_Start_IT>
 80059fa:	4603      	mov	r3, r0
 80059fc:	e000      	b.n	8005a00 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3730      	adds	r7, #48	; 0x30
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}
 8005a08:	40023800 	.word	0x40023800
 8005a0c:	431bde83 	.word	0x431bde83
 8005a10:	2001c230 	.word	0x2001c230
 8005a14:	40010000 	.word	0x40010000

08005a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005a1c:	bf00      	nop
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005a26:	b480      	push	{r7}
 8005a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005a2a:	e7fe      	b.n	8005a2a <HardFault_Handler+0x4>

08005a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005a30:	e7fe      	b.n	8005a30 <MemManage_Handler+0x4>

08005a32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005a32:	b480      	push	{r7}
 8005a34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005a36:	e7fe      	b.n	8005a36 <BusFault_Handler+0x4>

08005a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005a3c:	e7fe      	b.n	8005a3c <UsageFault_Handler+0x4>

08005a3e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005a42:	bf00      	nop
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8005a50:	4802      	ldr	r0, [pc, #8]	; (8005a5c <DMA1_Stream0_IRQHandler+0x10>)
 8005a52:	f002 fc99 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8005a56:	bf00      	nop
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	bf00      	nop
 8005a5c:	2001c1c0 	.word	0x2001c1c0

08005a60 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005a64:	4802      	ldr	r0, [pc, #8]	; (8005a70 <DMA1_Stream1_IRQHandler+0x10>)
 8005a66:	f002 fc8f 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005a6a:	bf00      	nop
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	20009798 	.word	0x20009798

08005a74 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8005a78:	4802      	ldr	r0, [pc, #8]	; (8005a84 <DMA1_Stream2_IRQHandler+0x10>)
 8005a7a:	f002 fc85 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8005a7e:	bf00      	nop
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	200095e0 	.word	0x200095e0

08005a88 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8005a8c:	4802      	ldr	r0, [pc, #8]	; (8005a98 <DMA1_Stream3_IRQHandler+0x10>)
 8005a8e:	f002 fc7b 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8005a92:	bf00      	nop
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000b998 	.word	0x2000b998

08005a9c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005aa0:	4802      	ldr	r0, [pc, #8]	; (8005aac <DMA1_Stream5_IRQHandler+0x10>)
 8005aa2:	f002 fc71 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8005aa6:	bf00      	nop
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop
 8005aac:	20009644 	.word	0x20009644

08005ab0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005ab4:	4802      	ldr	r0, [pc, #8]	; (8005ac0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8005ab6:	f007 fd3f 	bl	800d538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8005aba:	bf00      	nop
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	2001c230 	.word	0x2001c230

08005ac4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8005ac8:	4802      	ldr	r0, [pc, #8]	; (8005ad4 <SPI1_IRQHandler+0x10>)
 8005aca:	f007 f939 	bl	800cd40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8005ace:	bf00      	nop
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	20017ef8 	.word	0x20017ef8

08005ad8 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005adc:	4802      	ldr	r0, [pc, #8]	; (8005ae8 <SPI2_IRQHandler+0x10>)
 8005ade:	f007 f92f 	bl	800cd40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8005ae2:	bf00      	nop
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	200096ac 	.word	0x200096ac

08005aec <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8005af0:	4802      	ldr	r0, [pc, #8]	; (8005afc <SDMMC1_IRQHandler+0x10>)
 8005af2:	f005 fd67 	bl	800b5c4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8005af6:	bf00      	nop
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	2000b9f8 	.word	0x2000b9f8

08005b00 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8005b04:	4802      	ldr	r0, [pc, #8]	; (8005b10 <SPI3_IRQHandler+0x10>)
 8005b06:	f007 f91b 	bl	800cd40 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8005b0a:	bf00      	nop
 8005b0c:	bd80      	pop	{r7, pc}
 8005b0e:	bf00      	nop
 8005b10:	2000fa9c 	.word	0x2000fa9c

08005b14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8005b18:	4802      	ldr	r0, [pc, #8]	; (8005b24 <DMA2_Stream0_IRQHandler+0x10>)
 8005b1a:	f002 fc35 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005b1e:	bf00      	nop
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	2001a09c 	.word	0x2001a09c

08005b28 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005b2c:	4802      	ldr	r0, [pc, #8]	; (8005b38 <DMA2_Stream2_IRQHandler+0x10>)
 8005b2e:	f002 fc2b 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005b32:	bf00      	nop
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	2000fb60 	.word	0x2000fb60

08005b3c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8005b40:	4802      	ldr	r0, [pc, #8]	; (8005b4c <DMA2_Stream3_IRQHandler+0x10>)
 8005b42:	f002 fc21 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8005b46:	bf00      	nop
 8005b48:	bd80      	pop	{r7, pc}
 8005b4a:	bf00      	nop
 8005b4c:	2001c100 	.word	0x2001c100

08005b50 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005b54:	4802      	ldr	r0, [pc, #8]	; (8005b60 <DMA2_Stream4_IRQHandler+0x10>)
 8005b56:	f002 fc17 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8005b5a:	bf00      	nop
 8005b5c:	bd80      	pop	{r7, pc}
 8005b5e:	bf00      	nop
 8005b60:	2000fcb8 	.word	0x2000fcb8

08005b64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8005b68:	4802      	ldr	r0, [pc, #8]	; (8005b74 <OTG_FS_IRQHandler+0x10>)
 8005b6a:	f003 f9bc 	bl	8008ee6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8005b6e:	bf00      	nop
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	bf00      	nop
 8005b74:	2001e064 	.word	0x2001e064

08005b78 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8005b7c:	4802      	ldr	r0, [pc, #8]	; (8005b88 <DMA2_Stream6_IRQHandler+0x10>)
 8005b7e:	f002 fc03 	bl	8008388 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8005b82:	bf00      	nop
 8005b84:	bd80      	pop	{r7, pc}
 8005b86:	bf00      	nop
 8005b88:	20013e0c 	.word	0x20013e0c

08005b8c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005b90:	4802      	ldr	r0, [pc, #8]	; (8005b9c <UART7_IRQHandler+0x10>)
 8005b92:	f008 f9e3 	bl	800df5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8005b96:	bf00      	nop
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	20009718 	.word	0x20009718

08005ba0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005ba8:	4b11      	ldr	r3, [pc, #68]	; (8005bf0 <_sbrk+0x50>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d102      	bne.n	8005bb6 <_sbrk+0x16>
		heap_end = &end;
 8005bb0:	4b0f      	ldr	r3, [pc, #60]	; (8005bf0 <_sbrk+0x50>)
 8005bb2:	4a10      	ldr	r2, [pc, #64]	; (8005bf4 <_sbrk+0x54>)
 8005bb4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005bb6:	4b0e      	ldr	r3, [pc, #56]	; (8005bf0 <_sbrk+0x50>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <_sbrk+0x50>)
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	466a      	mov	r2, sp
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d907      	bls.n	8005bda <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005bca:	f014 fc87 	bl	801a4dc <__errno>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	230c      	movs	r3, #12
 8005bd2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	e006      	b.n	8005be8 <_sbrk+0x48>
	}

	heap_end += incr;
 8005bda:	4b05      	ldr	r3, [pc, #20]	; (8005bf0 <_sbrk+0x50>)
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4413      	add	r3, r2
 8005be2:	4a03      	ldr	r2, [pc, #12]	; (8005bf0 <_sbrk+0x50>)
 8005be4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005be6:	68fb      	ldr	r3, [r7, #12]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3710      	adds	r7, #16
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	200002c8 	.word	0x200002c8
 8005bf4:	2001e470 	.word	0x2001e470

08005bf8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005bfc:	4b15      	ldr	r3, [pc, #84]	; (8005c54 <SystemInit+0x5c>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <SystemInit+0x5c>)
 8005c04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005c0c:	4b12      	ldr	r3, [pc, #72]	; (8005c58 <SystemInit+0x60>)
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a11      	ldr	r2, [pc, #68]	; (8005c58 <SystemInit+0x60>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005c18:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <SystemInit+0x60>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005c1e:	4b0e      	ldr	r3, [pc, #56]	; (8005c58 <SystemInit+0x60>)
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	490d      	ldr	r1, [pc, #52]	; (8005c58 <SystemInit+0x60>)
 8005c24:	4b0d      	ldr	r3, [pc, #52]	; (8005c5c <SystemInit+0x64>)
 8005c26:	4013      	ands	r3, r2
 8005c28:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005c2a:	4b0b      	ldr	r3, [pc, #44]	; (8005c58 <SystemInit+0x60>)
 8005c2c:	4a0c      	ldr	r2, [pc, #48]	; (8005c60 <SystemInit+0x68>)
 8005c2e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005c30:	4b09      	ldr	r3, [pc, #36]	; (8005c58 <SystemInit+0x60>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a08      	ldr	r2, [pc, #32]	; (8005c58 <SystemInit+0x60>)
 8005c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c3a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8005c3c:	4b06      	ldr	r3, [pc, #24]	; (8005c58 <SystemInit+0x60>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005c42:	4b04      	ldr	r3, [pc, #16]	; (8005c54 <SystemInit+0x5c>)
 8005c44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005c48:	609a      	str	r2, [r3, #8]
#endif
}
 8005c4a:	bf00      	nop
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr
 8005c54:	e000ed00 	.word	0xe000ed00
 8005c58:	40023800 	.word	0x40023800
 8005c5c:	fef6ffff 	.word	0xfef6ffff
 8005c60:	24003010 	.word	0x24003010
 8005c64:	00000000 	.word	0x00000000

08005c68 <vTaskBattery>:
#include "tasks/task_battery.h"

float get_temp (uint16_t adc_value);


void vTaskBattery(void *argument) {
 8005c68:	b5b0      	push	{r4, r5, r7, lr}
 8005c6a:	b09e      	sub	sp, #120	; 0x78
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	6078      	str	r0, [r7, #4]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	double mah;
	double curr = 0;
 8005c70:	f04f 0300 	mov.w	r3, #0
 8005c74:	f04f 0400 	mov.w	r4, #0
 8005c78:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
	double supp = 0;
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	f04f 0400 	mov.w	r4, #0
 8005c84:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
	double bat = 0;
 8005c88:	f04f 0300 	mov.w	r3, #0
 8005c8c:	f04f 0400 	mov.w	r4, #0
 8005c90:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48


	battery_data_t battery_data = { 0 };
 8005c94:	f107 031c 	add.w	r3, r7, #28
 8005c98:	2200      	movs	r2, #0
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	605a      	str	r2, [r3, #4]
 8005c9e:	811a      	strh	r2, [r3, #8]

	int counter = 0;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	647b      	str	r3, [r7, #68]	; 0x44

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8005ca4:	f00f ff4a 	bl	8015b3c <osKernelGetTickCount>
 8005ca8:	66f8      	str	r0, [r7, #108]	; 0x6c
	tick_update = osKernelGetTickFreq() / BATTERY_SAMPLE_RATE;
 8005caa:	f00f ff6f 	bl	8015b8c <osKernelGetTickFreq>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	4b67      	ldr	r3, [pc, #412]	; (8005e50 <vTaskBattery+0x1e8>)
 8005cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8005cb6:	091b      	lsrs	r3, r3, #4
 8005cb8:	643b      	str	r3, [r7, #64]	; 0x40

	//ADC init
	uint32_t adc_value[5];

	HAL_ADC_Stop_DMA(&hadc1);
 8005cba:	4866      	ldr	r0, [pc, #408]	; (8005e54 <vTaskBattery+0x1ec>)
 8005cbc:	f001 fdb4 	bl	8007828 <HAL_ADC_Stop_DMA>
	HAL_ADC_Start_DMA(&hadc1, adc_value, 5);
 8005cc0:	f107 0308 	add.w	r3, r7, #8
 8005cc4:	2205      	movs	r2, #5
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	4862      	ldr	r0, [pc, #392]	; (8005e54 <vTaskBattery+0x1ec>)
 8005cca:	f001 fcbf 	bl	800764c <HAL_ADC_Start_DMA>

	osDelay(200);
 8005cce:	20c8      	movs	r0, #200	; 0xc8
 8005cd0:	f010 f80c 	bl	8015cec <osDelay>



	for (;;) {
		tick_count += tick_update;
 8005cd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005cd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cd8:	4413      	add	r3, r2
 8005cda:	66fb      	str	r3, [r7, #108]	; 0x6c

		double current2 = ((double)adc_value[0] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR2
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fa fc30 	bl	8000544 <__aeabi_ui2d>
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	4b5b      	ldr	r3, [pc, #364]	; (8005e58 <vTaskBattery+0x1f0>)
 8005cea:	f7fa fca5 	bl	8000638 <__aeabi_dmul>
 8005cee:	4603      	mov	r3, r0
 8005cf0:	460c      	mov	r4, r1
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	4621      	mov	r1, r4
 8005cf6:	a350      	add	r3, pc, #320	; (adr r3, 8005e38 <vTaskBattery+0x1d0>)
 8005cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cfc:	f7fa fae4 	bl	80002c8 <__aeabi_dsub>
 8005d00:	4603      	mov	r3, r0
 8005d02:	460c      	mov	r4, r1
 8005d04:	4618      	mov	r0, r3
 8005d06:	4621      	mov	r1, r4
 8005d08:	a34d      	add	r3, pc, #308	; (adr r3, 8005e40 <vTaskBattery+0x1d8>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fdbd 	bl	800088c <__aeabi_ddiv>
 8005d12:	4603      	mov	r3, r0
 8005d14:	460c      	mov	r4, r1
 8005d16:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
		float supply_voltage = adc_value[1] * (2.5/4096) * 2; // 3V3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fa fc11 	bl	8000544 <__aeabi_ui2d>
 8005d22:	f04f 0200 	mov.w	r2, #0
 8005d26:	4b4c      	ldr	r3, [pc, #304]	; (8005e58 <vTaskBattery+0x1f0>)
 8005d28:	f7fa fc86 	bl	8000638 <__aeabi_dmul>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	460c      	mov	r4, r1
 8005d30:	4618      	mov	r0, r3
 8005d32:	4621      	mov	r1, r4
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	f7fa fac8 	bl	80002cc <__adddf3>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	460c      	mov	r4, r1
 8005d40:	4618      	mov	r0, r3
 8005d42:	4621      	mov	r1, r4
 8005d44:	f7fa ff48 	bl	8000bd8 <__aeabi_d2f>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
		float battery_voltage = adc_value[2] * (2.5/4096) * 5.2; // BAT
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fa fbf8 	bl	8000544 <__aeabi_ui2d>
 8005d54:	f04f 0200 	mov.w	r2, #0
 8005d58:	4b3f      	ldr	r3, [pc, #252]	; (8005e58 <vTaskBattery+0x1f0>)
 8005d5a:	f7fa fc6d 	bl	8000638 <__aeabi_dmul>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	460c      	mov	r4, r1
 8005d62:	4618      	mov	r0, r3
 8005d64:	4621      	mov	r1, r4
 8005d66:	a338      	add	r3, pc, #224	; (adr r3, 8005e48 <vTaskBattery+0x1e0>)
 8005d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6c:	f7fa fc64 	bl	8000638 <__aeabi_dmul>
 8005d70:	4603      	mov	r3, r0
 8005d72:	460c      	mov	r4, r1
 8005d74:	4618      	mov	r0, r3
 8005d76:	4621      	mov	r1, r4
 8005d78:	f7fa ff2e 	bl	8000bd8 <__aeabi_d2f>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	633b      	str	r3, [r7, #48]	; 0x30
		double current1 = ((double)adc_value[3] * (2.5/4096.0) - (3.3*0.107)) / 0.264; // CURR1
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fa fbde 	bl	8000544 <__aeabi_ui2d>
 8005d88:	f04f 0200 	mov.w	r2, #0
 8005d8c:	4b32      	ldr	r3, [pc, #200]	; (8005e58 <vTaskBattery+0x1f0>)
 8005d8e:	f7fa fc53 	bl	8000638 <__aeabi_dmul>
 8005d92:	4603      	mov	r3, r0
 8005d94:	460c      	mov	r4, r1
 8005d96:	4618      	mov	r0, r3
 8005d98:	4621      	mov	r1, r4
 8005d9a:	a327      	add	r3, pc, #156	; (adr r3, 8005e38 <vTaskBattery+0x1d0>)
 8005d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da0:	f7fa fa92 	bl	80002c8 <__aeabi_dsub>
 8005da4:	4603      	mov	r3, r0
 8005da6:	460c      	mov	r4, r1
 8005da8:	4618      	mov	r0, r3
 8005daa:	4621      	mov	r1, r4
 8005dac:	a324      	add	r3, pc, #144	; (adr r3, 8005e40 <vTaskBattery+0x1d8>)
 8005dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db2:	f7fa fd6b 	bl	800088c <__aeabi_ddiv>
 8005db6:	4603      	mov	r3, r0
 8005db8:	460c      	mov	r4, r1
 8005dba:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
		get_temp(adc_value[4]); // temp
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f000 f918 	bl	8005ff8 <get_temp>

		// Filter adc values
		if (counter < 50) {
 8005dc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dca:	2b31      	cmp	r3, #49	; 0x31
 8005dcc:	dc46      	bgt.n	8005e5c <vTaskBattery+0x1f4>
			counter++;
 8005dce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd0:	3301      	adds	r3, #1
 8005dd2:	647b      	str	r3, [r7, #68]	; 0x44
			curr += current1 + current2;
 8005dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005dd8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005ddc:	f7fa fa76 	bl	80002cc <__adddf3>
 8005de0:	4603      	mov	r3, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	461a      	mov	r2, r3
 8005de6:	4623      	mov	r3, r4
 8005de8:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005dec:	f7fa fa6e 	bl	80002cc <__adddf3>
 8005df0:	4603      	mov	r3, r0
 8005df2:	460c      	mov	r4, r1
 8005df4:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			supp += supply_voltage;
 8005df8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005dfa:	f7fa fbc5 	bl	8000588 <__aeabi_f2d>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	460c      	mov	r4, r1
 8005e02:	461a      	mov	r2, r3
 8005e04:	4623      	mov	r3, r4
 8005e06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005e0a:	f7fa fa5f 	bl	80002cc <__adddf3>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	460c      	mov	r4, r1
 8005e12:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			bat += battery_voltage;
 8005e16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e18:	f7fa fbb6 	bl	8000588 <__aeabi_f2d>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	460c      	mov	r4, r1
 8005e20:	461a      	mov	r2, r3
 8005e22:	4623      	mov	r3, r4
 8005e24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e28:	f7fa fa50 	bl	80002cc <__adddf3>
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
 8005e34:	e0ca      	b.n	8005fcc <vTaskBattery+0x364>
 8005e36:	bf00      	nop
 8005e38:	be0ded28 	.word	0xbe0ded28
 8005e3c:	3fd69930 	.word	0x3fd69930
 8005e40:	4189374c 	.word	0x4189374c
 8005e44:	3fd0e560 	.word	0x3fd0e560
 8005e48:	cccccccd 	.word	0xcccccccd
 8005e4c:	4014cccc 	.word	0x4014cccc
 8005e50:	51eb851f 	.word	0x51eb851f
 8005e54:	2000fb10 	.word	0x2000fb10
 8005e58:	3f440000 	.word	0x3f440000
		} else {
			counter = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	647b      	str	r3, [r7, #68]	; 0x44
			mah += (curr) / (BATTERY_SAMPLE_RATE * 3.6);
 8005e60:	f04f 0200 	mov.w	r2, #0
 8005e64:	4b5b      	ldr	r3, [pc, #364]	; (8005fd4 <vTaskBattery+0x36c>)
 8005e66:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e6a:	f7fa fd0f 	bl	800088c <__aeabi_ddiv>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	460c      	mov	r4, r1
 8005e72:	461a      	mov	r2, r3
 8005e74:	4623      	mov	r3, r4
 8005e76:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e7a:	f7fa fa27 	bl	80002cc <__adddf3>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	460c      	mov	r4, r1
 8005e82:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
			battery_data.consumption = (uint16_t)mah;
 8005e86:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e8a:	f7fa fe85 	bl	8000b98 <__aeabi_d2uiz>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	847b      	strh	r3, [r7, #34]	; 0x22
			battery_data.current = (uint16_t)(curr*1000)/50;
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	4b4f      	ldr	r3, [pc, #316]	; (8005fd8 <vTaskBattery+0x370>)
 8005e9a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005e9e:	f7fa fbcb 	bl	8000638 <__aeabi_dmul>
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	460c      	mov	r4, r1
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	4621      	mov	r1, r4
 8005eaa:	f7fa fe75 	bl	8000b98 <__aeabi_d2uiz>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	4a4a      	ldr	r2, [pc, #296]	; (8005fdc <vTaskBattery+0x374>)
 8005eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb8:	091b      	lsrs	r3, r3, #4
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	843b      	strh	r3, [r7, #32]
			battery_data.power = (curr*1000)/50 * (battery_voltage/50);
 8005ebe:	f04f 0200 	mov.w	r2, #0
 8005ec2:	4b45      	ldr	r3, [pc, #276]	; (8005fd8 <vTaskBattery+0x370>)
 8005ec4:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ec8:	f7fa fbb6 	bl	8000638 <__aeabi_dmul>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	460c      	mov	r4, r1
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	4621      	mov	r1, r4
 8005ed4:	f04f 0200 	mov.w	r2, #0
 8005ed8:	4b41      	ldr	r3, [pc, #260]	; (8005fe0 <vTaskBattery+0x378>)
 8005eda:	f7fa fcd7 	bl	800088c <__aeabi_ddiv>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	460c      	mov	r4, r1
 8005ee2:	4625      	mov	r5, r4
 8005ee4:	461c      	mov	r4, r3
 8005ee6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8005eea:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8005fe4 <vTaskBattery+0x37c>
 8005eee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8005ef2:	ee16 0a90 	vmov	r0, s13
 8005ef6:	f7fa fb47 	bl	8000588 <__aeabi_f2d>
 8005efa:	4602      	mov	r2, r0
 8005efc:	460b      	mov	r3, r1
 8005efe:	4620      	mov	r0, r4
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7fa fb99 	bl	8000638 <__aeabi_dmul>
 8005f06:	4603      	mov	r3, r0
 8005f08:	460c      	mov	r4, r1
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	4621      	mov	r1, r4
 8005f0e:	f7fa fe43 	bl	8000b98 <__aeabi_d2uiz>
 8005f12:	4603      	mov	r3, r0
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	84bb      	strh	r3, [r7, #36]	; 0x24
			battery_data.supply = (uint16_t)(supp * 20);
 8005f18:	f04f 0200 	mov.w	r2, #0
 8005f1c:	4b32      	ldr	r3, [pc, #200]	; (8005fe8 <vTaskBattery+0x380>)
 8005f1e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f22:	f7fa fb89 	bl	8000638 <__aeabi_dmul>
 8005f26:	4603      	mov	r3, r0
 8005f28:	460c      	mov	r4, r1
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	f7fa fe33 	bl	8000b98 <__aeabi_d2uiz>
 8005f32:	4603      	mov	r3, r0
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	83bb      	strh	r3, [r7, #28]
			battery_data.battery = (uint16_t)(bat * 20);
 8005f38:	f04f 0200 	mov.w	r2, #0
 8005f3c:	4b2a      	ldr	r3, [pc, #168]	; (8005fe8 <vTaskBattery+0x380>)
 8005f3e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005f42:	f7fa fb79 	bl	8000638 <__aeabi_dmul>
 8005f46:	4603      	mov	r3, r0
 8005f48:	460c      	mov	r4, r1
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	4621      	mov	r1, r4
 8005f4e:	f7fa fe23 	bl	8000b98 <__aeabi_d2uiz>
 8005f52:	4603      	mov	r3, r0
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	83fb      	strh	r3, [r7, #30]
			curr = 0;
 8005f58:	f04f 0300 	mov.w	r3, #0
 8005f5c:	f04f 0400 	mov.w	r4, #0
 8005f60:	e9c7 3416 	strd	r3, r4, [r7, #88]	; 0x58
			bat = 0;
 8005f64:	f04f 0300 	mov.w	r3, #0
 8005f68:	f04f 0400 	mov.w	r4, #0
 8005f6c:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
			supp = 0;
 8005f70:	f04f 0300 	mov.w	r3, #0
 8005f74:	f04f 0400 	mov.w	r4, #0
 8005f78:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f7c:	8bbb      	ldrh	r3, [r7, #28]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f7e:	4619      	mov	r1, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f80:	8bfb      	ldrh	r3, [r7, #30]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f82:	4618      	mov	r0, r3
					battery_data.supply, battery_data.battery, battery_data.current,
 8005f84:	8c3b      	ldrh	r3, [r7, #32]
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f86:	461c      	mov	r4, r3
					battery_data.consumption, battery_data.power);
 8005f88:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005f8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
			UsbPrint("[BATTERY] Supply: %d Battery: %d Current: %dmA, Consumption: %dmAh Power: %dmW\n",
 8005f8c:	9201      	str	r2, [sp, #4]
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	4623      	mov	r3, r4
 8005f92:	4602      	mov	r2, r0
 8005f94:	4815      	ldr	r0, [pc, #84]	; (8005fec <vTaskBattery+0x384>)
 8005f96:	f7fe f9ad 	bl	80042f4 <UsbPrint>

			/* Log Battery Power */
			logSensor(tick_count, 1, BATTERY, &battery_data);
 8005f9a:	f107 031c 	add.w	r3, r7, #28
 8005f9e:	2204      	movs	r2, #4
 8005fa0:	2101      	movs	r1, #1
 8005fa2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fa4:	f7fd ffd0 	bl	8003f48 <logSensor>

			/* Write Data into global Variable */
			if(AcquireMutex(&battery_mutex) == osOK ){
 8005fa8:	4811      	ldr	r0, [pc, #68]	; (8005ff0 <vTaskBattery+0x388>)
 8005faa:	f7fd fec1 	bl	8003d30 <AcquireMutex>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10b      	bne.n	8005fcc <vTaskBattery+0x364>
				global_battery_data.battery = battery_data.battery;
 8005fb4:	8bfa      	ldrh	r2, [r7, #30]
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <vTaskBattery+0x38c>)
 8005fb8:	801a      	strh	r2, [r3, #0]
				global_battery_data.consumption = battery_data.consumption;
 8005fba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8005fbc:	4b0d      	ldr	r3, [pc, #52]	; (8005ff4 <vTaskBattery+0x38c>)
 8005fbe:	809a      	strh	r2, [r3, #4]
				global_battery_data.current = battery_data.current;
 8005fc0:	8c3a      	ldrh	r2, [r7, #32]
 8005fc2:	4b0c      	ldr	r3, [pc, #48]	; (8005ff4 <vTaskBattery+0x38c>)
 8005fc4:	805a      	strh	r2, [r3, #2]
				ReleaseMutex(&battery_mutex);
 8005fc6:	480a      	ldr	r0, [pc, #40]	; (8005ff0 <vTaskBattery+0x388>)
 8005fc8:	f7fd fecc 	bl	8003d64 <ReleaseMutex>
			}
		}

		/* Sleep */
		osDelayUntil(tick_count);
 8005fcc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005fce:	f00f febb 	bl	8015d48 <osDelayUntil>
	for (;;) {
 8005fd2:	e67f      	b.n	8005cd4 <vTaskBattery+0x6c>
 8005fd4:	40668000 	.word	0x40668000
 8005fd8:	408f4000 	.word	0x408f4000
 8005fdc:	51eb851f 	.word	0x51eb851f
 8005fe0:	40490000 	.word	0x40490000
 8005fe4:	42480000 	.word	0x42480000
 8005fe8:	40340000 	.word	0x40340000
 8005fec:	0801d204 	.word	0x0801d204
 8005ff0:	20009710 	.word	0x20009710
 8005ff4:	2000fb08 	.word	0x2000fb08

08005ff8 <get_temp>:
	}
}


float get_temp (uint16_t adc_value){
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	4603      	mov	r3, r0
 8006000:	80fb      	strh	r3, [r7, #6]
	float VSENSE;
	VSENSE = 2.5/4096 * adc_value;
 8006002:	88fb      	ldrh	r3, [r7, #6]
 8006004:	4618      	mov	r0, r3
 8006006:	f7fa faad 	bl	8000564 <__aeabi_i2d>
 800600a:	f04f 0200 	mov.w	r2, #0
 800600e:	4b20      	ldr	r3, [pc, #128]	; (8006090 <get_temp+0x98>)
 8006010:	f7fa fb12 	bl	8000638 <__aeabi_dmul>
 8006014:	4603      	mov	r3, r0
 8006016:	460c      	mov	r4, r1
 8006018:	4618      	mov	r0, r3
 800601a:	4621      	mov	r1, r4
 800601c:	f7fa fddc 	bl	8000bd8 <__aeabi_d2f>
 8006020:	4603      	mov	r3, r0
 8006022:	60fb      	str	r3, [r7, #12]
	return ((V25 - VSENSE) / AVG_SLOPE + 25);
 8006024:	68f8      	ldr	r0, [r7, #12]
 8006026:	f7fa faaf 	bl	8000588 <__aeabi_f2d>
 800602a:	4603      	mov	r3, r0
 800602c:	460c      	mov	r4, r1
 800602e:	461a      	mov	r2, r3
 8006030:	4623      	mov	r3, r4
 8006032:	a113      	add	r1, pc, #76	; (adr r1, 8006080 <get_temp+0x88>)
 8006034:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006038:	f7fa f946 	bl	80002c8 <__aeabi_dsub>
 800603c:	4603      	mov	r3, r0
 800603e:	460c      	mov	r4, r1
 8006040:	4618      	mov	r0, r3
 8006042:	4621      	mov	r1, r4
 8006044:	a310      	add	r3, pc, #64	; (adr r3, 8006088 <get_temp+0x90>)
 8006046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604a:	f7fa fc1f 	bl	800088c <__aeabi_ddiv>
 800604e:	4603      	mov	r3, r0
 8006050:	460c      	mov	r4, r1
 8006052:	4618      	mov	r0, r3
 8006054:	4621      	mov	r1, r4
 8006056:	f04f 0200 	mov.w	r2, #0
 800605a:	4b0e      	ldr	r3, [pc, #56]	; (8006094 <get_temp+0x9c>)
 800605c:	f7fa f936 	bl	80002cc <__adddf3>
 8006060:	4603      	mov	r3, r0
 8006062:	460c      	mov	r4, r1
 8006064:	4618      	mov	r0, r3
 8006066:	4621      	mov	r1, r4
 8006068:	f7fa fdb6 	bl	8000bd8 <__aeabi_d2f>
 800606c:	4603      	mov	r3, r0
 800606e:	ee07 3a90 	vmov	s15, r3
}
 8006072:	eeb0 0a67 	vmov.f32	s0, s15
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	bd90      	pop	{r4, r7, pc}
 800607c:	f3af 8000 	nop.w
 8006080:	ae147ae1 	.word	0xae147ae1
 8006084:	3ff6e147 	.word	0x3ff6e147
 8006088:	75f6fd22 	.word	0x75f6fd22
 800608c:	3f719ce0 	.word	0x3f719ce0
 8006090:	3f440000 	.word	0x3f440000
 8006094:	40390000 	.word	0x40390000

08006098 <vTaskController>:
#include "tasks/task_controller.h"

/* Abbreviation 'aw' is used to described everything related to the antiwindup */


void vTaskController(void *argument) {
 8006098:	b580      	push	{r7, lr}
 800609a:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 800609e:	af00      	add	r7, sp, #0
 80060a0:	1d3b      	adds	r3, r7, #4
 80060a2:	6018      	str	r0, [r3, #0]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	state_est_data_t state_est_data_local;
    flight_phase_detection_t current_flight_phase_detection = { 0 };
 80060a4:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 80060a8:	2200      	movs	r2, #0
 80060aa:	601a      	str	r2, [r3, #0]
 80060ac:	605a      	str	r2, [r3, #4]
 80060ae:	609a      	str	r2, [r3, #8]

    /* Initialize the control_data struct */
    control_data_t control_data = { 0 };
 80060b0:	f107 0308 	add.w	r3, r7, #8
 80060b4:	4618      	mov	r0, r3
 80060b6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80060ba:	461a      	mov	r2, r3
 80060bc:	2100      	movs	r1, #0
 80060be:	f014 fa52 	bl	801a566 <memset>
    control_data_init(&control_data);
 80060c2:	f107 0308 	add.w	r3, r7, #8
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fb fea4 	bl	8001e14 <control_data_init>

	osDelay(800);
 80060cc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80060d0:	f00f fe0c 	bl	8015cec <osDelay>

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 80060d4:	f00f fd32 	bl	8015b3c <osKernelGetTickCount>
 80060d8:	f8c7 0474 	str.w	r0, [r7, #1140]	; 0x474
	tick_update = osKernelGetTickFreq() / CONTROLLER_SAMPLING_FREQ;
 80060dc:	f00f fd56 	bl	8015b8c <osKernelGetTickFreq>
 80060e0:	4602      	mov	r2, r0
 80060e2:	4b41      	ldr	r3, [pc, #260]	; (80061e8 <vTaskController+0x150>)
 80060e4:	fba3 2302 	umull	r2, r3, r3, r2
 80060e8:	095b      	lsrs	r3, r3, #5
 80060ea:	f8c7 3470 	str.w	r3, [r7, #1136]	; 0x470


	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 80060ee:	f8d7 2474 	ldr.w	r2, [r7, #1140]	; 0x474
 80060f2:	f8d7 3470 	ldr.w	r3, [r7, #1136]	; 0x470
 80060f6:	4413      	add	r3, r2
 80060f8:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474

		/* Update Sensor Fusion Variables */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_local, sizeof(state_est_data_local));
 80060fc:	f207 4234 	addw	r2, r7, #1076	; 0x434
 8006100:	233c      	movs	r3, #60	; 0x3c
 8006102:	493a      	ldr	r1, [pc, #232]	; (80061ec <vTaskController+0x154>)
 8006104:	483a      	ldr	r0, [pc, #232]	; (80061f0 <vTaskController+0x158>)
 8006106:	f7fd fe3b 	bl	8003d80 <ReadMutex>

		control_data.sf_ref_altitude_AGL = ((float)state_est_data_global.position_world[2]) / 1000;
 800610a:	4b38      	ldr	r3, [pc, #224]	; (80061ec <vTaskController+0x154>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006116:	eddf 6a37 	vldr	s13, [pc, #220]	; 80061f4 <vTaskController+0x15c>
 800611a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800611e:	f107 0308 	add.w	r3, r7, #8
 8006122:	edc3 7a03 	vstr	s15, [r3, #12]
		control_data.sf_velocity = ((float)state_est_data_global.velocity_world[2]) / 1000;
 8006126:	4b31      	ldr	r3, [pc, #196]	; (80061ec <vTaskController+0x154>)
 8006128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612a:	ee07 3a90 	vmov	s15, r3
 800612e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006132:	eddf 6a30 	vldr	s13, [pc, #192]	; 80061f4 <vTaskController+0x15c>
 8006136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800613a:	f107 0308 	add.w	r3, r7, #8
 800613e:	edc3 7a04 	vstr	s15, [r3, #16]

		/* Update flight Phase */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &current_flight_phase_detection, sizeof(state_est_data_local));
 8006142:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8006146:	233c      	movs	r3, #60	; 0x3c
 8006148:	492b      	ldr	r1, [pc, #172]	; (80061f8 <vTaskController+0x160>)
 800614a:	482c      	ldr	r0, [pc, #176]	; (80061fc <vTaskController+0x164>)
 800614c:	f7fd fe18 	bl	8003d80 <ReadMutex>

		/** MAKE SURE THE RIGHT CONTROLLER IS ACTIVE IS ACTIVE!!!!! **/
        if(LQR_ACTIVE) {
            compute_control_input(&control_data, &current_flight_phase_detection);
 8006150:	f507 6285 	add.w	r2, r7, #1064	; 0x428
 8006154:	f107 0308 	add.w	r3, r7, #8
 8006158:	4611      	mov	r1, r2
 800615a:	4618      	mov	r0, r3
 800615c:	f7fb fd48 	bl	8001bf0 <compute_control_input>
        else {
            compute_test_control_input(&control_data);
        }

		/* Write Control Input into Global Variable */
		if(AcquireMutex(&controller_mutex) == osOK){
 8006160:	4827      	ldr	r0, [pc, #156]	; (8006200 <vTaskController+0x168>)
 8006162:	f7fd fde5 	bl	8003d30 <AcquireMutex>
 8006166:	4603      	mov	r3, r0
 8006168:	2b00      	cmp	r3, #0
 800616a:	d110      	bne.n	800618e <vTaskController+0xf6>
			controller_output_global = (int32_t)(control_data.control_input * 1000);
 800616c:	f107 0308 	add.w	r3, r7, #8
 8006170:	edd3 7a00 	vldr	s15, [r3]
 8006174:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80061f4 <vTaskController+0x15c>
 8006178:	ee67 7a87 	vmul.f32	s15, s15, s14
 800617c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006180:	ee17 2a90 	vmov	r2, s15
 8006184:	4b1f      	ldr	r3, [pc, #124]	; (8006204 <vTaskController+0x16c>)
 8006186:	601a      	str	r2, [r3, #0]
			ReleaseMutex(&controller_mutex);
 8006188:	481d      	ldr	r0, [pc, #116]	; (8006200 <vTaskController+0x168>)
 800618a:	f7fd fdeb 	bl	8003d64 <ReleaseMutex>
		}


		/* Log to SD Card */
		logControllerOutput(osKernelGetTickCount(),
 800618e:	f00f fcd5 	bl	8015b3c <osKernelGetTickCount>
				(int32_t)(control_data.control_input * 1000),
 8006192:	f107 0308 	add.w	r3, r7, #8
 8006196:	edd3 7a00 	vldr	s15, [r3]
 800619a:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80061f4 <vTaskController+0x15c>
 800619e:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 80061a2:	eefd 6ae7 	vcvt.s32.f32	s13, s15
				(int32_t)(control_data.reference_error * 1000),
 80061a6:	f107 0308 	add.w	r3, r7, #8
 80061aa:	edd3 7a01 	vldr	s15, [r3, #4]
 80061ae:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80061f4 <vTaskController+0x15c>
 80061b2:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 80061b6:	eebd 6ae7 	vcvt.s32.f32	s12, s15
				(int32_t)(control_data.integrated_error * 1000));
 80061ba:	f107 0308 	add.w	r3, r7, #8
 80061be:	edd3 7a02 	vldr	s15, [r3, #8]
 80061c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80061f4 <vTaskController+0x15c>
 80061c6:	ee67 7a87 	vmul.f32	s15, s15, s14
		logControllerOutput(osKernelGetTickCount(),
 80061ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ce:	ee17 3a90 	vmov	r3, s15
 80061d2:	ee16 2a10 	vmov	r2, s12
 80061d6:	ee16 1a90 	vmov	r1, s13
 80061da:	f7fe f831 	bl	8004240 <logControllerOutput>


		/* Sleep */
		osDelayUntil(tick_count);
 80061de:	f8d7 0474 	ldr.w	r0, [r7, #1140]	; 0x474
 80061e2:	f00f fdb1 	bl	8015d48 <osDelayUntil>
		tick_count += tick_update;
 80061e6:	e782      	b.n	80060ee <vTaskController+0x56>
 80061e8:	51eb851f 	.word	0x51eb851f
 80061ec:	2000026c 	.word	0x2000026c
 80061f0:	20011d24 	.word	0x20011d24
 80061f4:	447a0000 	.word	0x447a0000
 80061f8:	200002bc 	.word	0x200002bc
 80061fc:	200096a4 	.word	0x200096a4
 8006200:	2000fb00 	.word	0x2000fb00
 8006204:	200002a8 	.word	0x200002a8

08006208 <vTaskFSM>:
 */

#include "tasks/task_fsm.h"


void vTaskFSM(void *argument) {
 8006208:	b590      	push	{r4, r7, lr}
 800620a:	b09f      	sub	sp, #124	; 0x7c
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
	/* For periodic update */
	uint32_t tick_count, tick_update;

	/* Phase detection struct */
	flight_phase_detection_t flight_phase_detection = { 0 };
 8006210:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006214:	2200      	movs	r2, #0
 8006216:	601a      	str	r2, [r3, #0]
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	609a      	str	r2, [r3, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 800621c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006220:	4618      	mov	r0, r3
 8006222:	f7fc fa37 	bl	8002694 <reset_flight_phase_detection>

	/*State Estimation data */
	state_est_data_t state_est_data_fsm = { 0 };
 8006226:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800622a:	223c      	movs	r2, #60	; 0x3c
 800622c:	2100      	movs	r1, #0
 800622e:	4618      	mov	r0, r3
 8006230:	f014 f999 	bl	801a566 <memset>

	/* environment data */
	env_t environment;
	env_t dummy_env;
	init_env(&dummy_env);
 8006234:	f107 0308 	add.w	r3, r7, #8
 8006238:	4618      	mov	r0, r3
 800623a:	f7fb ff6d 	bl	8002118 <init_env>
	init_env(&environment);
 800623e:	f107 0318 	add.w	r3, r7, #24
 8006242:	4618      	mov	r0, r3
 8006244:	f7fb ff68 	bl	8002118 <init_env>

	osDelay(700);
 8006248:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800624c:	f00f fd4e 	bl	8015cec <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006250:	f00f fc74 	bl	8015b3c <osKernelGetTickCount>
 8006254:	6778      	str	r0, [r7, #116]	; 0x74
	tick_update = osKernelGetTickFreq() / FSM_SAMPLING_FREQ;
 8006256:	f00f fc99 	bl	8015b8c <osKernelGetTickFreq>
 800625a:	4602      	mov	r2, r0
 800625c:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <vTaskFSM+0xcc>)
 800625e:	fba3 2302 	umull	r2, r3, r3, r2
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	673b      	str	r3, [r7, #112]	; 0x70

	while (1) {
		/* Tick Update */
		tick_count += tick_update;
 8006266:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006268:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800626a:	4413      	add	r3, r2
 800626c:	677b      	str	r3, [r7, #116]	; 0x74


		/* Update Local State Estimation Data */
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data_fsm, sizeof(state_est_data_global));
 800626e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006272:	233c      	movs	r3, #60	; 0x3c
 8006274:	4918      	ldr	r1, [pc, #96]	; (80062d8 <vTaskFSM+0xd0>)
 8006276:	4819      	ldr	r0, [pc, #100]	; (80062dc <vTaskFSM+0xd4>)
 8006278:	f7fd fd82 	bl	8003d80 <ReadMutex>


		/* Update Local Environment Data */
		ReadMutex(&env_mutex, &global_env, &environment, sizeof(global_env));
 800627c:	f107 0218 	add.w	r2, r7, #24
 8006280:	2310      	movs	r3, #16
 8006282:	4917      	ldr	r1, [pc, #92]	; (80062e0 <vTaskFSM+0xd8>)
 8006284:	4817      	ldr	r0, [pc, #92]	; (80062e4 <vTaskFSM+0xdc>)
 8006286:	f7fd fd7b 	bl	8003d80 <ReadMutex>

		/* get Flight Phase update */
		detect_flight_phase(&flight_phase_detection, &state_est_data_fsm, &environment);
 800628a:	f107 0218 	add.w	r2, r7, #24
 800628e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006292:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8006296:	4618      	mov	r0, r3
 8006298:	f7fc f8fa 	bl	8002490 <detect_flight_phase>


		/* Write updated flight Phase detection */
		if(AcquireMutex(&fsm_mutex) == osOK){
 800629c:	4812      	ldr	r0, [pc, #72]	; (80062e8 <vTaskFSM+0xe0>)
 800629e:	f7fd fd47 	bl	8003d30 <AcquireMutex>
 80062a2:	4603      	mov	r3, r0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <vTaskFSM+0xb6>
			global_flight_phase_detection = flight_phase_detection;
 80062a8:	4b10      	ldr	r3, [pc, #64]	; (80062ec <vTaskFSM+0xe4>)
 80062aa:	461c      	mov	r4, r3
 80062ac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80062b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80062b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			ReleaseMutex(&fsm_mutex);
 80062b8:	480b      	ldr	r0, [pc, #44]	; (80062e8 <vTaskFSM+0xe0>)
 80062ba:	f7fd fd53 	bl	8003d64 <ReleaseMutex>
		}

		logRocketState(osKernelGetTickCount(), flight_phase_detection);
 80062be:	f00f fc3d 	bl	8015b3c <osKernelGetTickCount>
 80062c2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80062c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062c8:	f7fd ff5a 	bl	8004180 <logRocketState>

		/* Sleep */
		osDelayUntil(tick_count);
 80062cc:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80062ce:	f00f fd3b 	bl	8015d48 <osDelayUntil>
		tick_count += tick_update;
 80062d2:	e7c8      	b.n	8006266 <vTaskFSM+0x5e>
 80062d4:	cccccccd 	.word	0xcccccccd
 80062d8:	2000026c 	.word	0x2000026c
 80062dc:	20011d24 	.word	0x20011d24
 80062e0:	200002ac 	.word	0x200002ac
 80062e4:	2000ba90 	.word	0x2000ba90
 80062e8:	200096a4 	.word	0x200096a4
 80062ec:	200002bc 	.word	0x200002bc

080062f0 <vTaskGps>:





void vTaskGps(void *argument) {
 80062f0:	b5b0      	push	{r4, r5, r7, lr}
 80062f2:	b0b2      	sub	sp, #200	; 0xc8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

	UBLOX GPS1 = {0,&huart1};
 80062f8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80062fc:	222c      	movs	r2, #44	; 0x2c
 80062fe:	2100      	movs	r1, #0
 8006300:	4618      	mov	r0, r3
 8006302:	f014 f930 	bl	801a566 <memset>
 8006306:	4b9f      	ldr	r3, [pc, #636]	; (8006584 <vTaskGps+0x294>)
 8006308:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	UBLOX GPS2 = {1,&huart2};
 800630c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006310:	222c      	movs	r2, #44	; 0x2c
 8006312:	2100      	movs	r1, #0
 8006314:	4618      	mov	r0, r3
 8006316:	f014 f926 	bl	801a566 <memset>
 800631a:	2301      	movs	r3, #1
 800631c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8006320:	4b99      	ldr	r3, [pc, #612]	; (8006588 <vTaskGps+0x298>)
 8006322:	65fb      	str	r3, [r7, #92]	; 0x5c
	UBLOX GPS3 = {2,&huart3};
 8006324:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006328:	222c      	movs	r2, #44	; 0x2c
 800632a:	2100      	movs	r1, #0
 800632c:	4618      	mov	r0, r3
 800632e:	f014 f91a 	bl	801a566 <memset>
 8006332:	2302      	movs	r3, #2
 8006334:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8006338:	4b94      	ldr	r3, [pc, #592]	; (800658c <vTaskGps+0x29c>)
 800633a:	633b      	str	r3, [r7, #48]	; 0x30

	int timeout_counter1 = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	int timeout_counter2 = 0;
 8006342:	2300      	movs	r3, #0
 8006344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	int timeout_counter3 = 0;
 8006348:	2300      	movs	r3, #0
 800634a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	/* For periodic update */
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	gps_data_t gps_telemetry = { 0 };
 800634e:	f107 0308 	add.w	r3, r7, #8
 8006352:	2224      	movs	r2, #36	; 0x24
 8006354:	2100      	movs	r1, #0
 8006356:	4618      	mov	r0, r3
 8006358:	f014 f905 	bl	801a566 <memset>
	uint8_t choose_GPS = 1;
 800635c:	2301      	movs	r3, #1
 800635e:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7

	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006362:	f00f fbeb 	bl	8015b3c <osKernelGetTickCount>
 8006366:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
	tick_update = osKernelGetTickFreq() / GPS_SAMPLE_RATE;
 800636a:	f00f fc0f 	bl	8015b8c <osKernelGetTickFreq>
 800636e:	4603      	mov	r3, r0
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	osDelay(200);
 8006376:	20c8      	movs	r0, #200	; 0xc8
 8006378:	f00f fcb8 	bl	8015cec <osDelay>

	gps_dma_init(&GPS1);
 800637c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006380:	4618      	mov	r0, r3
 8006382:	f7fb fb3b 	bl	80019fc <gps_dma_init>
	gps_dma_init(&GPS2);
 8006386:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800638a:	4618      	mov	r0, r3
 800638c:	f7fb fb36 	bl	80019fc <gps_dma_init>
	gps_dma_init(&GPS3);
 8006390:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006394:	4618      	mov	r0, r3
 8006396:	f7fb fb31 	bl	80019fc <gps_dma_init>

	for (;;) {
		tick_count += tick_update;
 800639a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800639e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063a2:	4413      	add	r3, r2
 80063a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

		/* Read GPS */
		if (gps_read_sensor(&GPS1)){
 80063a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80063ac:	4618      	mov	r0, r3
 80063ae:	f7fb fb49 	bl	8001a44 <gps_read_sensor>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <vTaskGps+0xd0>
			timeout_counter1 = 0;
 80063b8:	2300      	movs	r3, #0
 80063ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80063be:	e010      	b.n	80063e2 <vTaskGps+0xf2>
		} else {
			timeout_counter1++;
 80063c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063c4:	3301      	adds	r3, #1
 80063c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			if (timeout_counter1 == 10){
 80063ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80063ce:	2b0a      	cmp	r3, #10
 80063d0:	d107      	bne.n	80063e2 <vTaskGps+0xf2>
				gps_reset(&GPS1);
 80063d2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fb fb7e 	bl	8001ad8 <gps_reset>
				timeout_counter1 = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
			}
		}
		if (gps_read_sensor(&GPS2)){
 80063e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80063e6:	4618      	mov	r0, r3
 80063e8:	f7fb fb2c 	bl	8001a44 <gps_read_sensor>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d003      	beq.n	80063fa <vTaskGps+0x10a>
			timeout_counter2 = 0;
 80063f2:	2300      	movs	r3, #0
 80063f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063f8:	e010      	b.n	800641c <vTaskGps+0x12c>
		} else {
			timeout_counter2++;
 80063fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063fe:	3301      	adds	r3, #1
 8006400:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			if (timeout_counter2 == 10){
 8006404:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006408:	2b0a      	cmp	r3, #10
 800640a:	d107      	bne.n	800641c <vTaskGps+0x12c>
				gps_reset(&GPS2);
 800640c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006410:	4618      	mov	r0, r3
 8006412:	f7fb fb61 	bl	8001ad8 <gps_reset>
				timeout_counter2 = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
			}
		}
		if (gps_read_sensor(&GPS3)){
 800641c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006420:	4618      	mov	r0, r3
 8006422:	f7fb fb0f 	bl	8001a44 <gps_read_sensor>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <vTaskGps+0x144>
			timeout_counter3 = 0;
 800642c:	2300      	movs	r3, #0
 800642e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006432:	e010      	b.n	8006456 <vTaskGps+0x166>
		} else {
			timeout_counter3++;
 8006434:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006438:	3301      	adds	r3, #1
 800643a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			if (timeout_counter3 == 10){
 800643e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006442:	2b0a      	cmp	r3, #10
 8006444:	d107      	bne.n	8006456 <vTaskGps+0x166>
				gps_reset(&GPS3);
 8006446:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800644a:	4618      	mov	r0, r3
 800644c:	f7fb fb44 	bl	8001ad8 <gps_reset>
				timeout_counter3 = 0;
 8006450:	2300      	movs	r3, #0
 8006452:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		//		UsbPrint("[GPS3] Time: %d:%d.%d Lat: %d.%ld Lon: %d.%ld Sats: %d, Alt: %d\n",
		//								GPS3.data.hour, GPS3.data.minute, GPS3.data.second, GPS3.data.lat_deg,
		//								GPS3.data.lat_decimal, GPS3.data.lon_deg, GPS3.data.lon_decimal, GPS3.data.satellite, GPS3.data.altitude);

		/* Write GPS to Log */
		logSensor(osKernelGetTickCount(), 1, GPS, &GPS1.data);
 8006456:	f00f fb71 	bl	8015b3c <osKernelGetTickCount>
 800645a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800645e:	3308      	adds	r3, #8
 8006460:	2203      	movs	r2, #3
 8006462:	2101      	movs	r1, #1
 8006464:	f7fd fd70 	bl	8003f48 <logSensor>
		logSensor(osKernelGetTickCount(), 2, GPS, &GPS2.data);
 8006468:	f00f fb68 	bl	8015b3c <osKernelGetTickCount>
 800646c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8006470:	3308      	adds	r3, #8
 8006472:	2203      	movs	r2, #3
 8006474:	2102      	movs	r1, #2
 8006476:	f7fd fd67 	bl	8003f48 <logSensor>
		logSensor(osKernelGetTickCount(), 3, GPS, &GPS3.data);
 800647a:	f00f fb5f 	bl	8015b3c <osKernelGetTickCount>
 800647e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006482:	3308      	adds	r3, #8
 8006484:	2203      	movs	r2, #3
 8006486:	2103      	movs	r1, #3
 8006488:	f7fd fd5e 	bl	8003f48 <logSensor>

		/* get best possible GPS for Telemetry */

		if(GPS1.data.satellite >= GPS2.data.satellite){
 800648c:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 8006490:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 8006494:	429a      	cmp	r2, r3
 8006496:	d30d      	bcc.n	80064b4 <vTaskGps+0x1c4>
			if(GPS1.data.satellite >= GPS3.data.satellite){
 8006498:	f897 20a9 	ldrb.w	r2, [r7, #169]	; 0xa9
 800649c:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d303      	bcc.n	80064ac <vTaskGps+0x1bc>
				choose_GPS = 1;
 80064a4:	2301      	movs	r3, #1
 80064a6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80064aa:	e02a      	b.n	8006502 <vTaskGps+0x212>
			}
			else{
				choose_GPS = 3;
 80064ac:	2303      	movs	r3, #3
 80064ae:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80064b2:	e026      	b.n	8006502 <vTaskGps+0x212>
			}
		}
		else if(GPS2.data.satellite >= GPS3.data.satellite){
 80064b4:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80064b8:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80064bc:	429a      	cmp	r2, r3
 80064be:	d30d      	bcc.n	80064dc <vTaskGps+0x1ec>
			if(GPS2.data.satellite >= GPS1.data.satellite){
 80064c0:	f897 207d 	ldrb.w	r2, [r7, #125]	; 0x7d
 80064c4:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80064c8:	429a      	cmp	r2, r3
 80064ca:	d303      	bcc.n	80064d4 <vTaskGps+0x1e4>
				choose_GPS = 2;
 80064cc:	2302      	movs	r3, #2
 80064ce:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80064d2:	e016      	b.n	8006502 <vTaskGps+0x212>
			}
			else{
				choose_GPS = 1;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80064da:	e012      	b.n	8006502 <vTaskGps+0x212>
			}
		}
		else if(GPS3.data.satellite >= GPS1.data.satellite){
 80064dc:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80064e0:	f897 30a9 	ldrb.w	r3, [r7, #169]	; 0xa9
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d30c      	bcc.n	8006502 <vTaskGps+0x212>
			if(GPS3.data.satellite >= GPS2.data.satellite){
 80064e8:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 80064ec:	f897 307d 	ldrb.w	r3, [r7, #125]	; 0x7d
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d303      	bcc.n	80064fc <vTaskGps+0x20c>
				choose_GPS = 3;
 80064f4:	2303      	movs	r3, #3
 80064f6:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
 80064fa:	e002      	b.n	8006502 <vTaskGps+0x212>
			}
			else{
				choose_GPS = 2;
 80064fc:	2302      	movs	r3, #2
 80064fe:	f887 30b7 	strb.w	r3, [r7, #183]	; 0xb7
			}
		}

		if(choose_GPS == 1){
 8006502:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006506:	2b01      	cmp	r3, #1
 8006508:	d10a      	bne.n	8006520 <vTaskGps+0x230>
			gps_telemetry = GPS1.data;
 800650a:	f107 0408 	add.w	r4, r7, #8
 800650e:	f107 058c 	add.w	r5, r7, #140	; 0x8c
 8006512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800651a:	682b      	ldr	r3, [r5, #0]
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	e018      	b.n	8006552 <vTaskGps+0x262>
//			gps_telemetry.lat_decimal = GPS1.data.lat_decimal;
//			gps_telemetry.lon_deg = GPS1.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS1.data.lon_decimal;
//			gps_telemetry.satellite = GPS1.data.satellite;
		}
		else if(choose_GPS == 2){
 8006520:	f897 30b7 	ldrb.w	r3, [r7, #183]	; 0xb7
 8006524:	2b02      	cmp	r3, #2
 8006526:	d10a      	bne.n	800653e <vTaskGps+0x24e>
			gps_telemetry = GPS2.data;
 8006528:	f107 0408 	add.w	r4, r7, #8
 800652c:	f107 0560 	add.w	r5, r7, #96	; 0x60
 8006530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006538:	682b      	ldr	r3, [r5, #0]
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	e009      	b.n	8006552 <vTaskGps+0x262>
//			gps_telemetry.lon_deg = GPS2.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS2.data.lon_decimal;
//			gps_telemetry.satellite = GPS2.data.satellite;
		}
		else{
			gps_telemetry = GPS3.data;
 800653e:	f107 0408 	add.w	r4, r7, #8
 8006542:	f107 0534 	add.w	r5, r7, #52	; 0x34
 8006546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800654a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800654c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800654e:	682b      	ldr	r3, [r5, #0]
 8006550:	6023      	str	r3, [r4, #0]
//			gps_telemetry.lon_deg = GPS3.data.lon_deg;
//			gps_telemetry.lon_decimal = GPS3.data.lon_decimal;
//			gps_telemetry.satellite = GPS3.data.satellite;
		}

		if(AcquireMutex(&gps_mutex) == osOK){
 8006552:	480f      	ldr	r0, [pc, #60]	; (8006590 <vTaskGps+0x2a0>)
 8006554:	f7fd fbec 	bl	8003d30 <AcquireMutex>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10c      	bne.n	8006578 <vTaskGps+0x288>
			globalGPS = gps_telemetry;
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <vTaskGps+0x2a4>)
 8006560:	461d      	mov	r5, r3
 8006562:	f107 0408 	add.w	r4, r7, #8
 8006566:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006568:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800656a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800656c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800656e:	6823      	ldr	r3, [r4, #0]
 8006570:	602b      	str	r3, [r5, #0]
			ReleaseMutex(&gps_mutex);
 8006572:	4807      	ldr	r0, [pc, #28]	; (8006590 <vTaskGps+0x2a0>)
 8006574:	f7fd fbf6 	bl	8003d64 <ReleaseMutex>
		}
		/* Sleep */
		osDelayUntil(tick_count);
 8006578:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800657c:	f00f fbe4 	bl	8015d48 <osDelayUntil>
		tick_count += tick_update;
 8006580:	e70b      	b.n	800639a <vTaskGps+0xaa>
 8006582:	bf00      	nop
 8006584:	2000fc24 	.word	0x2000fc24
 8006588:	20019fc0 	.word	0x20019fc0
 800658c:	200097f8 	.word	0x200097f8
 8006590:	20017e70 	.word	0x20017e70
 8006594:	20013d88 	.word	0x20013d88

08006598 <vTaskMotorCont>:
#include "tasks/task_motor_control.h"

void testairbrakes(int32_t position);


void vTaskMotorCont(void *argument) {
 8006598:	b580      	push	{r7, lr}
 800659a:	b090      	sub	sp, #64	; 0x40
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osStatus_t motor_status = osOK;
 80065a0:	2300      	movs	r3, #0
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34

	/* Telemetry Command and FSM State */
	command_e telemetry_command = IDLE_COMMAND;
 80065a4:	239b      	movs	r3, #155	; 0x9b
 80065a6:	77fb      	strb	r3, [r7, #31]
	flight_phase_detection_t flight_phase_detection = { 0 };
 80065a8:	f107 0310 	add.w	r3, r7, #16
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	605a      	str	r2, [r3, #4]
 80065b2:	609a      	str	r2, [r3, #8]
	flight_phase_detection.flight_phase = IDLE;
 80065b4:	2301      	movs	r3, #1
 80065b6:	743b      	strb	r3, [r7, #16]
	flight_phase_detection.mach_number = SUBSONIC;
 80065b8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80065bc:	617b      	str	r3, [r7, #20]


	/* Initialisation */
	//int8_t position_mode = 0x08;
	/* Profile Position Mode */
	int8_t position_mode = 0x01;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	int32_t PPM_velocity = 10000;
 80065c4:	f242 7310 	movw	r3, #10000	; 0x2710
 80065c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t PPM_acceleration = 100000;
 80065ca:	4b45      	ldr	r3, [pc, #276]	; (80066e0 <vTaskMotorCont+0x148>)
 80065cc:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t PPM_deceleration = 100000;
 80065ce:	4b44      	ldr	r3, [pc, #272]	; (80066e0 <vTaskMotorCont+0x148>)
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24

	osDelay(2000);
 80065d2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80065d6:	f00f fb89 	bl	8015cec <osDelay>


	/* Controller Variables */
	int32_t controller_actuation = 0;
 80065da:	2300      	movs	r3, #0
 80065dc:	60fb      	str	r3, [r7, #12]

	/* Task Variables */
	int32_t desired_motor_position = 0;
 80065de:	2300      	movs	r3, #0
 80065e0:	63bb      	str	r3, [r7, #56]	; 0x38
	int32_t measured_motor_position = 0;
 80065e2:	2300      	movs	r3, #0
 80065e4:	60bb      	str	r3, [r7, #8]

	//	while(EnableMotor() != osOK){
	//		osDelay(1000);
	//		break;
	//	};
	EnableMotor();
 80065e6:	f7fa fd1b 	bl	8001020 <EnableMotor>

	SetPositionMode(position_mode);
 80065ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fa fd6f 	bl	80010d2 <SetPositionMode>
	//	while(SetPositionMode(position_mode) != osOK){
	//		osDelay(1000);
	//		break;
	//	};

	if (position_mode == 0x01) {
 80065f4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d105      	bne.n	8006608 <vTaskMotorCont+0x70>
		motor_status = ConfigurePPM(PPM_velocity, PPM_acceleration, PPM_deceleration);
 80065fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006600:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006602:	f7fa fde6 	bl	80011d2 <ConfigurePPM>
 8006606:	6378      	str	r0, [r7, #52]	; 0x34
	}


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006608:	f00f fa98 	bl	8015b3c <osKernelGetTickCount>
 800660c:	63f8      	str	r0, [r7, #60]	; 0x3c
	tick_update = osKernelGetTickFreq() / MOTOR_TASK_FREQUENCY;
 800660e:	f00f fabd 	bl	8015b8c <osKernelGetTickFreq>
 8006612:	4602      	mov	r2, r0
 8006614:	4b33      	ldr	r3, [pc, #204]	; (80066e4 <vTaskMotorCont+0x14c>)
 8006616:	fba3 2302 	umull	r2, r3, r3, r2
 800661a:	091b      	lsrs	r3, r3, #4
 800661c:	623b      	str	r3, [r7, #32]

	for (;;) {
		tick_count += tick_update;
 800661e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006620:	6a3b      	ldr	r3, [r7, #32]
 8006622:	4413      	add	r3, r2
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* Read Current Motor Position */
		motor_status = GetPosition(&measured_motor_position);
 8006626:	f107 0308 	add.w	r3, r7, #8
 800662a:	4618      	mov	r0, r3
 800662c:	f7fa fe48 	bl	80012c0 <GetPosition>
 8006630:	6378      	str	r0, [r7, #52]	; 0x34

		/* Read Telemetry Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8006632:	f107 021f 	add.w	r2, r7, #31
 8006636:	2301      	movs	r3, #1
 8006638:	492b      	ldr	r1, [pc, #172]	; (80066e8 <vTaskMotorCont+0x150>)
 800663a:	482c      	ldr	r0, [pc, #176]	; (80066ec <vTaskMotorCont+0x154>)
 800663c:	f7fd fba0 	bl	8003d80 <ReadMutex>

		UsbPrint("[MOTOR] Read Position:%d\n", measured_motor_position);
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	4619      	mov	r1, r3
 8006644:	482a      	ldr	r0, [pc, #168]	; (80066f0 <vTaskMotorCont+0x158>)
 8006646:	f7fd fe55 	bl	80042f4 <UsbPrint>

		/* Read FSM State */
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(global_flight_phase_detection));
 800664a:	f107 0210 	add.w	r2, r7, #16
 800664e:	230c      	movs	r3, #12
 8006650:	4928      	ldr	r1, [pc, #160]	; (80066f4 <vTaskMotorCont+0x15c>)
 8006652:	4829      	ldr	r0, [pc, #164]	; (80066f8 <vTaskMotorCont+0x160>)
 8006654:	f7fd fb94 	bl	8003d80 <ReadMutex>

		/* Read in Current Controller Output */
		ReadMutex(&controller_mutex, &controller_output_global, &controller_actuation, sizeof(controller_actuation));
 8006658:	f107 020c 	add.w	r2, r7, #12
 800665c:	2304      	movs	r3, #4
 800665e:	4927      	ldr	r1, [pc, #156]	; (80066fc <vTaskMotorCont+0x164>)
 8006660:	4827      	ldr	r0, [pc, #156]	; (8006700 <vTaskMotorCont+0x168>)
 8006662:	f7fd fb8d 	bl	8003d80 <ReadMutex>

		/* Transform 0-1 Controller output to controller output of motor */
		desired_motor_position = (int32_t)(((float)controller_actuation)/1000*(-140));
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	ee07 3a90 	vmov	s15, r3
 800666c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006670:	eddf 6a24 	vldr	s13, [pc, #144]	; 8006704 <vTaskMotorCont+0x16c>
 8006674:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006678:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006708 <vTaskMotorCont+0x170>
 800667c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006684:	ee17 3a90 	vmov	r3, s15
 8006688:	63bb      	str	r3, [r7, #56]	; 0x38

		/* Check Bounds */
		if(desired_motor_position > -2){
 800668a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006690:	db02      	blt.n	8006698 <vTaskMotorCont+0x100>
			desired_motor_position = -2;
 8006692:	f06f 0301 	mvn.w	r3, #1
 8006696:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		if(desired_motor_position < -135){
 8006698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800669a:	f113 0f87 	cmn.w	r3, #135	; 0x87
 800669e:	da02      	bge.n	80066a6 <vTaskMotorCont+0x10e>
			desired_motor_position = -135;
 80066a0:	f06f 0386 	mvn.w	r3, #134	; 0x86
 80066a4:	63bb      	str	r3, [r7, #56]	; 0x38
		}

		/* If we are in IDLE, THRUSTING or DESCENDING
		 * the Motor is not allowed to Move!
		 */
		if(flight_phase_detection.flight_phase == COASTING){
 80066a6:	7c3b      	ldrb	r3, [r7, #16]
 80066a8:	2b04      	cmp	r3, #4
 80066aa:	d102      	bne.n	80066b2 <vTaskMotorCont+0x11a>
			/* Move the Motor */
			MoveToPositionPPM(desired_motor_position);
 80066ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066ae:	f7fa fd35 	bl	800111c <MoveToPositionPPM>
		else{
			//	MoveToPositionPPM(0);
		}

		/* Airbrake Test if telemetry command is given and we are in idle state */
		if(flight_phase_detection.flight_phase == IDLE && telemetry_command == AIRBRAKE_TEST_COMMAND){
 80066b2:	7c3b      	ldrb	r3, [r7, #16]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d108      	bne.n	80066ca <vTaskMotorCont+0x132>
 80066b8:	7ffb      	ldrb	r3, [r7, #31]
 80066ba:	2bd9      	cmp	r3, #217	; 0xd9
 80066bc:	d105      	bne.n	80066ca <vTaskMotorCont+0x132>
			testairbrakes(-130);
 80066be:	f06f 0081 	mvn.w	r0, #129	; 0x81
 80066c2:	f000 f823 	bl	800670c <testairbrakes>
			telemetry_command = IDLE_COMMAND;
 80066c6:	239b      	movs	r3, #155	; 0x9b
 80066c8:	77fb      	strb	r3, [r7, #31]
		}


		/* Log Motor Position and Desired Motor Position */
		logMotor(osKernelGetTickCount(), desired_motor_position, measured_motor_position);
 80066ca:	f00f fa37 	bl	8015b3c <osKernelGetTickCount>
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	461a      	mov	r2, r3
 80066d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80066d4:	f7fd fde2 	bl	800429c <logMotor>


		osDelayUntil(tick_count);
 80066d8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80066da:	f00f fb35 	bl	8015d48 <osDelayUntil>
		tick_count += tick_update;
 80066de:	e79e      	b.n	800661e <vTaskMotorCont+0x86>
 80066e0:	000186a0 	.word	0x000186a0
 80066e4:	cccccccd 	.word	0xcccccccd
 80066e8:	20013dac 	.word	0x20013dac
 80066ec:	2000ba88 	.word	0x2000ba88
 80066f0:	0801d254 	.word	0x0801d254
 80066f4:	200002bc 	.word	0x200002bc
 80066f8:	200096a4 	.word	0x200096a4
 80066fc:	200002a8 	.word	0x200002a8
 8006700:	2000fb00 	.word	0x2000fb00
 8006704:	447a0000 	.word	0x447a0000
 8006708:	c30c0000 	.word	0xc30c0000

0800670c <testairbrakes>:
	}
}

void testairbrakes(int32_t position){
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
	MoveToPositionPPM(position);
 8006714:	6878      	ldr	r0, [r7, #4]
 8006716:	f7fa fd01 	bl	800111c <MoveToPositionPPM>
	osDelay(1000);
 800671a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800671e:	f00f fae5 	bl	8015cec <osDelay>
	MoveToPositionPPM(0);
 8006722:	2000      	movs	r0, #0
 8006724:	f7fa fcfa 	bl	800111c <MoveToPositionPPM>
}
 8006728:	bf00      	nop
 800672a:	3708      	adds	r7, #8
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <vTaskSdCard>:
		break;
	}
	return 20;
}

void vTaskSdCard(void *argument) {
 8006730:	b5b0      	push	{r4, r5, r7, lr}
 8006732:	b0cc      	sub	sp, #304	; 0x130
 8006734:	af00      	add	r7, sp, #0
 8006736:	1d3b      	adds	r3, r7, #4
 8006738:	6018      	str	r0, [r3, #0]
	osDelay(100);
 800673a:	2064      	movs	r0, #100	; 0x64
 800673c:	f00f fad6 	bl	8015cec <osDelay>
	FRESULT res;
	char EULER_LOG_FILE_NAME[13] = "";
 8006740:	2300      	movs	r3, #0
 8006742:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8006746:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800674a:	2200      	movs	r2, #0
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	605a      	str	r2, [r3, #4]
 8006750:	721a      	strb	r2, [r3, #8]
	UsbPrint("[STORAGE TASK] Starting SD Card Task..\n");
 8006752:	48c3      	ldr	r0, [pc, #780]	; (8006a60 <vTaskSdCard+0x330>)
 8006754:	f7fd fdce 	bl	80042f4 <UsbPrint>
 8006758:	e000      	b.n	800675c <vTaskSdCard+0x2c>

	resetSDCard: //UsbPrint("[STORAGE TASK] Mounting SD card\n");
 800675a:	bf00      	nop
	do {
		res = f_mount(&EULER_FatFS, "", 1);
 800675c:	2201      	movs	r2, #1
 800675e:	49c1      	ldr	r1, [pc, #772]	; (8006a64 <vTaskSdCard+0x334>)
 8006760:	48c1      	ldr	r0, [pc, #772]	; (8006a68 <vTaskSdCard+0x338>)
 8006762:	f00e f8df 	bl	8014924 <f_mount>
 8006766:	4603      	mov	r3, r0
 8006768:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 800676c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <vTaskSdCard+0x5c>
			UsbPrint("[STORAGE TASK] Failed mounting SD card: %d\n", res);
 8006774:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006778:	4619      	mov	r1, r3
 800677a:	48bc      	ldr	r0, [pc, #752]	; (8006a6c <vTaskSdCard+0x33c>)
 800677c:	f7fd fdba 	bl	80042f4 <UsbPrint>
			// force sd card to be reinitialized
			disk.is_initialized[0] = 0;
 8006780:	4bbb      	ldr	r3, [pc, #748]	; (8006a70 <vTaskSdCard+0x340>)
 8006782:	2200      	movs	r2, #0
 8006784:	701a      	strb	r2, [r3, #0]
			osDelay(100);
 8006786:	2064      	movs	r0, #100	; 0x64
 8006788:	f00f fab0 	bl	8015cec <osDelay>
		}
	} while (res != FR_OK);
 800678c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006790:	2b00      	cmp	r3, #0
 8006792:	d1e2      	bne.n	800675a <vTaskSdCard+0x2a>

	if (!EULER_LOG_FILE_NAME[0]) {
 8006794:	f897 3110 	ldrb.w	r3, [r7, #272]	; 0x110
 8006798:	2b00      	cmp	r3, #0
 800679a:	f040 80a9 	bne.w	80068f0 <vTaskSdCard+0x1c0>
		UsbPrint("[STORAGE TASK] Creating file name\n");
 800679e:	48b5      	ldr	r0, [pc, #724]	; (8006a74 <vTaskSdCard+0x344>)
 80067a0:	f7fd fda8 	bl	80042f4 <UsbPrint>

		unsigned int file_number = 1;
 80067a4:	2301      	movs	r3, #1
 80067a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

		DIR dj;
		FILINFO fno;
		res = f_findfirst(&dj, &fno, "", "LOG_???.CSV");
 80067aa:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80067ae:	f107 0008 	add.w	r0, r7, #8
 80067b2:	4bb1      	ldr	r3, [pc, #708]	; (8006a78 <vTaskSdCard+0x348>)
 80067b4:	4aab      	ldr	r2, [pc, #684]	; (8006a64 <vTaskSdCard+0x334>)
 80067b6:	f00f f86d 	bl	8015894 <f_findfirst>
 80067ba:	4603      	mov	r3, r0
 80067bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 80067c0:	e02b      	b.n	800681a <vTaskSdCard+0xea>
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80067c2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80067c6:	3b30      	subs	r3, #48	; 0x30
 80067c8:	2264      	movs	r2, #100	; 0x64
 80067ca:	fb02 f103 	mul.w	r1, r2, r3
					+ (fno.fname[5] - '0') * 10 + (fno.fname[6] - '0');
 80067ce:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80067d2:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	18ca      	adds	r2, r1, r3
 80067e0:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80067e4:	3b30      	subs	r3, #48	; 0x30
 80067e6:	4413      	add	r3, r2
			unsigned int current_file_number = (fno.fname[4] - '0') * 100
 80067e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
			if (current_file_number + 1 > file_number) {
 80067ec:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067f0:	3301      	adds	r3, #1
 80067f2:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d204      	bcs.n	8006804 <vTaskSdCard+0xd4>
				file_number = current_file_number + 1;
 80067fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80067fe:	3301      	adds	r3, #1
 8006800:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
			}
			res = f_findnext(&dj, &fno);
 8006804:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006808:	f107 0308 	add.w	r3, r7, #8
 800680c:	4611      	mov	r1, r2
 800680e:	4618      	mov	r0, r3
 8006810:	f00f f818 	bl	8015844 <f_findnext>
 8006814:	4603      	mov	r3, r0
 8006816:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		while (res == FR_OK && fno.fname[0]) {
 800681a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800681e:	2b00      	cmp	r3, #0
 8006820:	d103      	bne.n	800682a <vTaskSdCard+0xfa>
 8006822:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8006826:	2b00      	cmp	r3, #0
 8006828:	d1cb      	bne.n	80067c2 <vTaskSdCard+0x92>
		}
		if (res != FR_OK) {
 800682a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800682e:	2b00      	cmp	r3, #0
 8006830:	d006      	beq.n	8006840 <vTaskSdCard+0x110>
			UsbPrint("[STORAGE TASK] Failed finding first or next file: %d\n",
 8006832:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006836:	4619      	mov	r1, r3
 8006838:	4890      	ldr	r0, [pc, #576]	; (8006a7c <vTaskSdCard+0x34c>)
 800683a:	f7fd fd5b 	bl	80042f4 <UsbPrint>
					res);
			goto resetSDCard;
 800683e:	e78d      	b.n	800675c <vTaskSdCard+0x2c>
		}

		strcpy(EULER_LOG_FILE_NAME, "LOG_000.CSV");
 8006840:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8006844:	4a8e      	ldr	r2, [pc, #568]	; (8006a80 <vTaskSdCard+0x350>)
 8006846:	ca07      	ldmia	r2, {r0, r1, r2}
 8006848:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		EULER_LOG_FILE_NAME[6] = '0' + file_number % 10;
 800684c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8006850:	4b8c      	ldr	r3, [pc, #560]	; (8006a84 <vTaskSdCard+0x354>)
 8006852:	fba3 2301 	umull	r2, r3, r3, r1
 8006856:	08da      	lsrs	r2, r3, #3
 8006858:	4613      	mov	r3, r2
 800685a:	009b      	lsls	r3, r3, #2
 800685c:	4413      	add	r3, r2
 800685e:	005b      	lsls	r3, r3, #1
 8006860:	1aca      	subs	r2, r1, r3
 8006862:	b2d3      	uxtb	r3, r2
 8006864:	3330      	adds	r3, #48	; 0x30
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
		EULER_LOG_FILE_NAME[5] = '0' + (file_number / 10) % 10;
 800686c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006870:	4a84      	ldr	r2, [pc, #528]	; (8006a84 <vTaskSdCard+0x354>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	08d9      	lsrs	r1, r3, #3
 8006878:	4b82      	ldr	r3, [pc, #520]	; (8006a84 <vTaskSdCard+0x354>)
 800687a:	fba3 2301 	umull	r2, r3, r3, r1
 800687e:	08da      	lsrs	r2, r3, #3
 8006880:	4613      	mov	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	4413      	add	r3, r2
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	1aca      	subs	r2, r1, r3
 800688a:	b2d3      	uxtb	r3, r2
 800688c:	3330      	adds	r3, #48	; 0x30
 800688e:	b2db      	uxtb	r3, r3
 8006890:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
		EULER_LOG_FILE_NAME[4] = '0' + (file_number / 100) % 10;
 8006894:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8006898:	4a7b      	ldr	r2, [pc, #492]	; (8006a88 <vTaskSdCard+0x358>)
 800689a:	fba2 2303 	umull	r2, r3, r2, r3
 800689e:	0959      	lsrs	r1, r3, #5
 80068a0:	4b78      	ldr	r3, [pc, #480]	; (8006a84 <vTaskSdCard+0x354>)
 80068a2:	fba3 2301 	umull	r2, r3, r3, r1
 80068a6:	08da      	lsrs	r2, r3, #3
 80068a8:	4613      	mov	r3, r2
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	005b      	lsls	r3, r3, #1
 80068b0:	1aca      	subs	r2, r1, r3
 80068b2:	b2d3      	uxtb	r3, r2
 80068b4:	3330      	adds	r3, #48	; 0x30
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

		UsbPrint("[STORAGE TASK] Using file name: %s\n", EULER_LOG_FILE_NAME);
 80068bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068c0:	4619      	mov	r1, r3
 80068c2:	4872      	ldr	r0, [pc, #456]	; (8006a8c <vTaskSdCard+0x35c>)
 80068c4:	f7fd fd16 	bl	80042f4 <UsbPrint>

		res = f_closedir(&dj);
 80068c8:	f107 0308 	add.w	r3, r7, #8
 80068cc:	4618      	mov	r0, r3
 80068ce:	f00e ff4b 	bl	8015768 <f_closedir>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		if (res != FR_OK) {
 80068d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <vTaskSdCard+0x1c0>
			UsbPrint("[STORAGE TASK] Failed closing directory: %d\n", res);
 80068e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80068e4:	4619      	mov	r1, r3
 80068e6:	486a      	ldr	r0, [pc, #424]	; (8006a90 <vTaskSdCard+0x360>)
 80068e8:	f7fd fd04 	bl	80042f4 <UsbPrint>
			goto resetSDCard;
 80068ec:	bf00      	nop
 80068ee:	e735      	b.n	800675c <vTaskSdCard+0x2c>
		}
	}

	UsbPrint("[STORAGE TASK] Opening log file\n");
 80068f0:	4868      	ldr	r0, [pc, #416]	; (8006a94 <vTaskSdCard+0x364>)
 80068f2:	f7fd fcff 	bl	80042f4 <UsbPrint>
	res = f_open(&EULER_LOG_FILE, EULER_LOG_FILE_NAME,
 80068f6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80068fa:	2212      	movs	r2, #18
 80068fc:	4619      	mov	r1, r3
 80068fe:	4866      	ldr	r0, [pc, #408]	; (8006a98 <vTaskSdCard+0x368>)
 8006900:	f00e f874 	bl	80149ec <f_open>
 8006904:	4603      	mov	r3, r0
 8006906:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	FA_OPEN_ALWAYS | FA_WRITE);
	if (res != FR_OK) {
 800690a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800690e:	2b00      	cmp	r3, #0
 8006910:	d006      	beq.n	8006920 <vTaskSdCard+0x1f0>
		UsbPrint("[STORAGE TASK] Failed opening log file: %d\n", res);
 8006912:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006916:	4619      	mov	r1, r3
 8006918:	4860      	ldr	r0, [pc, #384]	; (8006a9c <vTaskSdCard+0x36c>)
 800691a:	f7fd fceb 	bl	80042f4 <UsbPrint>
		goto resetSDCard;
 800691e:	e71d      	b.n	800675c <vTaskSdCard+0x2c>
	}

	UsbPrint("[STORAGE TASK] Going to end of file\n");
 8006920:	485f      	ldr	r0, [pc, #380]	; (8006aa0 <vTaskSdCard+0x370>)
 8006922:	f7fd fce7 	bl	80042f4 <UsbPrint>
	res = f_lseek(&EULER_LOG_FILE, f_size(&EULER_LOG_FILE));
 8006926:	4b5c      	ldr	r3, [pc, #368]	; (8006a98 <vTaskSdCard+0x368>)
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	4619      	mov	r1, r3
 800692c:	485a      	ldr	r0, [pc, #360]	; (8006a98 <vTaskSdCard+0x368>)
 800692e:	f00e fc4f 	bl	80151d0 <f_lseek>
 8006932:	4603      	mov	r3, r0
 8006934:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	if (res != FR_OK) {
 8006938:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800693c:	2b00      	cmp	r3, #0
 800693e:	d006      	beq.n	800694e <vTaskSdCard+0x21e>
		UsbPrint("[STORAGE TASK] Failed going to end of file: %d\n", res);
 8006940:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006944:	4619      	mov	r1, r3
 8006946:	4857      	ldr	r0, [pc, #348]	; (8006aa4 <vTaskSdCard+0x374>)
 8006948:	f7fd fcd4 	bl	80042f4 <UsbPrint>
		goto resetSDCard;
 800694c:	e706      	b.n	800675c <vTaskSdCard+0x2c>
	}

	volatile int32_t msgCounter = 0;
 800694e:	2300      	movs	r3, #0
 8006950:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	char log_header[32] = "Timestamp;Log Entry Type;Data\n";
 8006954:	4b54      	ldr	r3, [pc, #336]	; (8006aa8 <vTaskSdCard+0x378>)
 8006956:	f107 04ec 	add.w	r4, r7, #236	; 0xec
 800695a:	461d      	mov	r5, r3
 800695c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800695e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006960:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8006964:	c407      	stmia	r4!, {r0, r1, r2}
 8006966:	8023      	strh	r3, [r4, #0]
 8006968:	3402      	adds	r4, #2
 800696a:	0c1b      	lsrs	r3, r3, #16
 800696c:	7023      	strb	r3, [r4, #0]
 800696e:	2300      	movs	r3, #0
 8006970:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	uint32_t num_bytes = 0;
 8006974:	2300      	movs	r3, #0
 8006976:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
	res = f_write(&EULER_LOG_FILE, log_header, strlen(log_header),
 800697a:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800697e:	4618      	mov	r0, r3
 8006980:	f7f9 fc46 	bl	8000210 <strlen>
 8006984:	4602      	mov	r2, r0
 8006986:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 800698a:	4b48      	ldr	r3, [pc, #288]	; (8006aac <vTaskSdCard+0x37c>)
 800698c:	4842      	ldr	r0, [pc, #264]	; (8006a98 <vTaskSdCard+0x368>)
 800698e:	f00e f9f2 	bl	8014d76 <f_write>
 8006992:	4603      	mov	r3, r0
 8006994:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
			&EULER_bytesSD);
	if (res != FR_OK) {
 8006998:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <vTaskSdCard+0x27e>
		UsbPrint("[STORAGE TASK] Failed writing to file: %d\n", res);
 80069a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80069a4:	4619      	mov	r1, r3
 80069a6:	4842      	ldr	r0, [pc, #264]	; (8006ab0 <vTaskSdCard+0x380>)
 80069a8:	f7fd fca4 	bl	80042f4 <UsbPrint>
		goto resetSDCard;
 80069ac:	e6d6      	b.n	800675c <vTaskSdCard+0x2c>
	}
	log_entry_t log_entry = { 0 };
 80069ae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069b2:	2296      	movs	r2, #150	; 0x96
 80069b4:	2100      	movs	r1, #0
 80069b6:	4618      	mov	r0, r3
 80069b8:	f013 fdd5 	bl	801a566 <memset>
	for (;;) {
		if (osMessageQueueGet(log_queue, &log_entry, NULL,
 80069bc:	4b3d      	ldr	r3, [pc, #244]	; (8006ab4 <vTaskSdCard+0x384>)
 80069be:	6818      	ldr	r0, [r3, #0]
 80069c0:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80069c4:	f04f 33ff 	mov.w	r3, #4294967295
 80069c8:	2200      	movs	r2, #0
 80069ca:	f00f fdd1 	bl	8016570 <osMessageQueueGet>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f3      	bne.n	80069bc <vTaskSdCard+0x28c>
		osWaitForever) == osOK) {
			num_bytes = strlen(log_entry.str);
 80069d4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80069d8:	4618      	mov	r0, r3
 80069da:	f7f9 fc19 	bl	8000210 <strlen>
 80069de:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
			if (num_bytes > 0) {
 80069e2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d015      	beq.n	8006a16 <vTaskSdCard+0x2e6>
				res = f_write(&EULER_LOG_FILE, log_entry.str, num_bytes,
 80069ea:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80069ee:	4b2f      	ldr	r3, [pc, #188]	; (8006aac <vTaskSdCard+0x37c>)
 80069f0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80069f4:	4828      	ldr	r0, [pc, #160]	; (8006a98 <vTaskSdCard+0x368>)
 80069f6:	f00e f9be 	bl	8014d76 <f_write>
 80069fa:	4603      	mov	r3, r0
 80069fc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
						&EULER_bytesSD);
				if (res != FR_OK) {
 8006a00:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d006      	beq.n	8006a16 <vTaskSdCard+0x2e6>
					UsbPrint("[STORAGE TASK] Failed writing to file: %d\n",
 8006a08:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4828      	ldr	r0, [pc, #160]	; (8006ab0 <vTaskSdCard+0x380>)
 8006a10:	f7fd fc70 	bl	80042f4 <UsbPrint>
							res);
					goto resetSDCard;
 8006a14:	e6a2      	b.n	800675c <vTaskSdCard+0x2c>
				}
			}

			msgCounter++;
 8006a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

			if (msgCounter >= SYNC_AFTER_COUNT) {
 8006a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006a24:	2b7f      	cmp	r3, #127	; 0x7f
 8006a26:	ddc9      	ble.n	80069bc <vTaskSdCard+0x28c>
				msgCounter = 0;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

				UsbPrint("[STORAGE TASK] Syncing file..\n");
 8006a2e:	4822      	ldr	r0, [pc, #136]	; (8006ab8 <vTaskSdCard+0x388>)
 8006a30:	f7fd fc60 	bl	80042f4 <UsbPrint>
				HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8006a34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006a38:	4820      	ldr	r0, [pc, #128]	; (8006abc <vTaskSdCard+0x38c>)
 8006a3a:	f002 f8f4 	bl	8008c26 <HAL_GPIO_TogglePin>
				res = f_sync(&EULER_LOG_FILE);
 8006a3e:	4816      	ldr	r0, [pc, #88]	; (8006a98 <vTaskSdCard+0x368>)
 8006a40:	f00e fb3d 	bl	80150be <f_sync>
 8006a44:	4603      	mov	r3, r0
 8006a46:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
				if (res != FR_OK) {
 8006a4a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0b4      	beq.n	80069bc <vTaskSdCard+0x28c>
					UsbPrint("[STORAGE TASK] Failed syncing file: %d\n", res);
 8006a52:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8006a56:	4619      	mov	r1, r3
 8006a58:	4819      	ldr	r0, [pc, #100]	; (8006ac0 <vTaskSdCard+0x390>)
 8006a5a:	f7fd fc4b 	bl	80042f4 <UsbPrint>
					goto resetSDCard;
 8006a5e:	e67d      	b.n	800675c <vTaskSdCard+0x2c>
 8006a60:	0801d270 	.word	0x0801d270
 8006a64:	0801d298 	.word	0x0801d298
 8006a68:	2001c4a0 	.word	0x2001c4a0
 8006a6c:	0801d29c 	.word	0x0801d29c
 8006a70:	20000368 	.word	0x20000368
 8006a74:	0801d2c8 	.word	0x0801d2c8
 8006a78:	0801d2ec 	.word	0x0801d2ec
 8006a7c:	0801d2f8 	.word	0x0801d2f8
 8006a80:	0801d330 	.word	0x0801d330
 8006a84:	cccccccd 	.word	0xcccccccd
 8006a88:	51eb851f 	.word	0x51eb851f
 8006a8c:	0801d33c 	.word	0x0801d33c
 8006a90:	0801d360 	.word	0x0801d360
 8006a94:	0801d390 	.word	0x0801d390
 8006a98:	2001c270 	.word	0x2001c270
 8006a9c:	0801d3b4 	.word	0x0801d3b4
 8006aa0:	0801d3e0 	.word	0x0801d3e0
 8006aa4:	0801d408 	.word	0x0801d408
 8006aa8:	0801d4ac 	.word	0x0801d4ac
 8006aac:	2001c6d4 	.word	0x2001c6d4
 8006ab0:	0801d438 	.word	0x0801d438
 8006ab4:	20017f5c 	.word	0x20017f5c
 8006ab8:	0801d464 	.word	0x0801d464
 8006abc:	40020c00 	.word	0x40020c00
 8006ac0:	0801d484 	.word	0x0801d484

08006ac4 <vTaskSensRead>:
/* SPI Read Data */
sb_data_t sb1_data = { 0 };
sb_data_t sb2_data = { 0 };
sb_data_t sb3_data = { 0 };

void vTaskSensRead(void *argument) {
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]

	/* For periodic update */
	uint32_t tick_count, tick_update;

	osDelay(500);
 8006acc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006ad0:	f00f f90c 	bl	8015cec <osDelay>
	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006ad4:	f00f f832 	bl	8015b3c <osKernelGetTickCount>
 8006ad8:	60f8      	str	r0, [r7, #12]
	tick_update = osKernelGetTickFreq() / SENSOR_READ_FREQUENCY;
 8006ada:	f00f f857 	bl	8015b8c <osKernelGetTickFreq>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	4b22      	ldr	r3, [pc, #136]	; (8006b6c <vTaskSensRead+0xa8>)
 8006ae2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ae6:	095b      	lsrs	r3, r3, #5
 8006ae8:	60bb      	str	r3, [r7, #8]

	for (;;) {
		tick_count += tick_update;
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	4413      	add	r3, r2
 8006af0:	60fb      	str	r3, [r7, #12]
		/* Get Data */
		if(USB_DATA_ENABLE){
			ReadDataUSB();
		}
		else{
			ReadDataSB(&sb1_data, &sb2_data, &sb3_data);
 8006af2:	4a1f      	ldr	r2, [pc, #124]	; (8006b70 <vTaskSensRead+0xac>)
 8006af4:	491f      	ldr	r1, [pc, #124]	; (8006b74 <vTaskSensRead+0xb0>)
 8006af6:	4820      	ldr	r0, [pc, #128]	; (8006b78 <vTaskSensRead+0xb4>)
 8006af8:	f000 f858 	bl	8006bac <ReadDataSB>
		}
		/* Log Data */
		logSensor(tick_count, 1, BARO, &sb1_data.baro);
 8006afc:	4b1e      	ldr	r3, [pc, #120]	; (8006b78 <vTaskSensRead+0xb4>)
 8006afe:	2201      	movs	r2, #1
 8006b00:	2101      	movs	r1, #1
 8006b02:	68f8      	ldr	r0, [r7, #12]
 8006b04:	f7fd fa20 	bl	8003f48 <logSensor>
		logSensor(tick_count, 1, IMU, &sb1_data.imu);
 8006b08:	4b1c      	ldr	r3, [pc, #112]	; (8006b7c <vTaskSensRead+0xb8>)
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	2101      	movs	r1, #1
 8006b0e:	68f8      	ldr	r0, [r7, #12]
 8006b10:	f7fd fa1a 	bl	8003f48 <logSensor>
		logSensor(tick_count, 2, BARO, &sb2_data.baro);
 8006b14:	4b17      	ldr	r3, [pc, #92]	; (8006b74 <vTaskSensRead+0xb0>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	2102      	movs	r1, #2
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7fd fa14 	bl	8003f48 <logSensor>
		logSensor(tick_count, 2, IMU, &sb2_data.imu);
 8006b20:	4b17      	ldr	r3, [pc, #92]	; (8006b80 <vTaskSensRead+0xbc>)
 8006b22:	2202      	movs	r2, #2
 8006b24:	2102      	movs	r1, #2
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f7fd fa0e 	bl	8003f48 <logSensor>
		logSensor(tick_count, 3, BARO, &sb3_data.baro);
 8006b2c:	4b10      	ldr	r3, [pc, #64]	; (8006b70 <vTaskSensRead+0xac>)
 8006b2e:	2201      	movs	r2, #1
 8006b30:	2103      	movs	r1, #3
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f7fd fa08 	bl	8003f48 <logSensor>
		logSensor(tick_count, 3, IMU, &sb3_data.imu);
 8006b38:	4b12      	ldr	r3, [pc, #72]	; (8006b84 <vTaskSensRead+0xc0>)
 8006b3a:	2202      	movs	r2, #2
 8006b3c:	2103      	movs	r1, #3
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7fd fa02 	bl	8003f48 <logSensor>
		HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) &sb1_data, sizeof(sb1_data));
 8006b44:	2220      	movs	r2, #32
 8006b46:	490c      	ldr	r1, [pc, #48]	; (8006b78 <vTaskSensRead+0xb4>)
 8006b48:	480f      	ldr	r0, [pc, #60]	; (8006b88 <vTaskSensRead+0xc4>)
 8006b4a:	f005 fe51 	bl	800c7f0 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) &sb2_data, sizeof(sb2_data));
 8006b4e:	2220      	movs	r2, #32
 8006b50:	4908      	ldr	r1, [pc, #32]	; (8006b74 <vTaskSensRead+0xb0>)
 8006b52:	480e      	ldr	r0, [pc, #56]	; (8006b8c <vTaskSensRead+0xc8>)
 8006b54:	f005 fe4c 	bl	800c7f0 <HAL_SPI_Receive_DMA>
		HAL_SPI_Receive_DMA(&hspi3, (uint8_t*) &sb3_data, sizeof(sb3_data));
 8006b58:	2220      	movs	r2, #32
 8006b5a:	4905      	ldr	r1, [pc, #20]	; (8006b70 <vTaskSensRead+0xac>)
 8006b5c:	480c      	ldr	r0, [pc, #48]	; (8006b90 <vTaskSensRead+0xcc>)
 8006b5e:	f005 fe47 	bl	800c7f0 <HAL_SPI_Receive_DMA>
		/* Periodic Update */
		osDelayUntil(tick_count);
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f00f f8f0 	bl	8015d48 <osDelayUntil>
		tick_count += tick_update;
 8006b68:	e7bf      	b.n	8006aea <vTaskSensRead+0x26>
 8006b6a:	bf00      	nop
 8006b6c:	51eb851f 	.word	0x51eb851f
 8006b70:	2000030c 	.word	0x2000030c
 8006b74:	200002ec 	.word	0x200002ec
 8006b78:	200002cc 	.word	0x200002cc
 8006b7c:	200002d8 	.word	0x200002d8
 8006b80:	200002f8 	.word	0x200002f8
 8006b84:	20000318 	.word	0x20000318
 8006b88:	20017ef8 	.word	0x20017ef8
 8006b8c:	200096ac 	.word	0x200096ac
 8006b90:	2000fa9c 	.word	0x2000fa9c

08006b94 <HAL_SPI_RxCpltCallback>:
	}
}

/* SPI callback */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	HAL_SPIEx_FlushRxFifo(hspi);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f006 fc49 	bl	800d434 <HAL_SPIEx_FlushRxFifo>
}
 8006ba2:	bf00      	nop
 8006ba4:	3708      	adds	r7, #8
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
	...

08006bac <ReadDataSB>:



/* Read Data from Sensor Boards */
void ReadDataSB(sb_data_t *sb1, sb_data_t *sb2, sb_data_t *sb3){
 8006bac:	b590      	push	{r4, r7, lr}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]

	/* Read SB 1, Write SB 1 Global Variable */
	uint8_t checksum;
	checksum = calculate_checksum_sb(sb1);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f87d 	bl	8006cb8 <calculate_checksum_sb>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb1->checksum){
		if(AcquireMutex(&sb1_mutex) == osOK ){
 8006bc2:	4834      	ldr	r0, [pc, #208]	; (8006c94 <ReadDataSB+0xe8>)
 8006bc4:	f7fd f8b4 	bl	8003d30 <AcquireMutex>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d117      	bne.n	8006bfe <ReadDataSB+0x52>
			sb1_baro = sb1->baro;
 8006bce:	4b32      	ldr	r3, [pc, #200]	; (8006c98 <ReadDataSB+0xec>)
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006bd4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb1_imu = sb1->imu;
 8006bd8:	4a30      	ldr	r2, [pc, #192]	; (8006c9c <ReadDataSB+0xf0>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4614      	mov	r4, r2
 8006bde:	330c      	adds	r3, #12
 8006be0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006be2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb1_mutex);
 8006be6:	482b      	ldr	r0, [pc, #172]	; (8006c94 <ReadDataSB+0xe8>)
 8006be8:	f7fd f8bc 	bl	8003d64 <ReleaseMutex>
			sb1_imu.acc_z = -sb1_imu.acc_z;
 8006bec:	4b2b      	ldr	r3, [pc, #172]	; (8006c9c <ReadDataSB+0xf0>)
 8006bee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	425b      	negs	r3, r3
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	b21a      	sxth	r2, r3
 8006bfa:	4b28      	ldr	r3, [pc, #160]	; (8006c9c <ReadDataSB+0xf0>)
 8006bfc:	815a      	strh	r2, [r3, #10]
		}
//	}

	/* Read SB 2, Write SB 2 Global Variable  */
	checksum = calculate_checksum_sb(sb2);
 8006bfe:	68b8      	ldr	r0, [r7, #8]
 8006c00:	f000 f85a 	bl	8006cb8 <calculate_checksum_sb>
 8006c04:	4603      	mov	r3, r0
 8006c06:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb2->checksum){
		if(AcquireMutex(&sb2_mutex) == osOK){
 8006c08:	4825      	ldr	r0, [pc, #148]	; (8006ca0 <ReadDataSB+0xf4>)
 8006c0a:	f7fd f891 	bl	8003d30 <AcquireMutex>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d117      	bne.n	8006c44 <ReadDataSB+0x98>
			sb2_baro = sb2->baro;
 8006c14:	4b23      	ldr	r3, [pc, #140]	; (8006ca4 <ReadDataSB+0xf8>)
 8006c16:	68ba      	ldr	r2, [r7, #8]
 8006c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c1a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb2_imu = sb2->imu;
 8006c1e:	4a22      	ldr	r2, [pc, #136]	; (8006ca8 <ReadDataSB+0xfc>)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	4614      	mov	r4, r2
 8006c24:	330c      	adds	r3, #12
 8006c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb2_mutex);
 8006c2c:	481c      	ldr	r0, [pc, #112]	; (8006ca0 <ReadDataSB+0xf4>)
 8006c2e:	f7fd f899 	bl	8003d64 <ReleaseMutex>
			sb2_imu.acc_z = -sb2_imu.acc_z;
 8006c32:	4b1d      	ldr	r3, [pc, #116]	; (8006ca8 <ReadDataSB+0xfc>)
 8006c34:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	425b      	negs	r3, r3
 8006c3c:	b29b      	uxth	r3, r3
 8006c3e:	b21a      	sxth	r2, r3
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <ReadDataSB+0xfc>)
 8006c42:	815a      	strh	r2, [r3, #10]
		}
//	}

	/* Read SB 3, Write SB 3 Global Variable  */
	checksum = calculate_checksum_sb(sb3);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f837 	bl	8006cb8 <calculate_checksum_sb>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	75fb      	strb	r3, [r7, #23]
//	if(checksum == sb3->checksum){
		if(AcquireMutex(&sb3_mutex) == osOK){
 8006c4e:	4817      	ldr	r0, [pc, #92]	; (8006cac <ReadDataSB+0x100>)
 8006c50:	f7fd f86e 	bl	8003d30 <AcquireMutex>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d117      	bne.n	8006c8a <ReadDataSB+0xde>
			sb3_baro = sb2->baro;
 8006c5a:	4b15      	ldr	r3, [pc, #84]	; (8006cb0 <ReadDataSB+0x104>)
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8006c60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			sb3_imu = sb2->imu;
 8006c64:	4a13      	ldr	r2, [pc, #76]	; (8006cb4 <ReadDataSB+0x108>)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	4614      	mov	r4, r2
 8006c6a:	330c      	adds	r3, #12
 8006c6c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006c6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&sb3_mutex);
 8006c72:	480e      	ldr	r0, [pc, #56]	; (8006cac <ReadDataSB+0x100>)
 8006c74:	f7fd f876 	bl	8003d64 <ReleaseMutex>
			sb3_imu.acc_z = -sb3_imu.acc_z;
 8006c78:	4b0e      	ldr	r3, [pc, #56]	; (8006cb4 <ReadDataSB+0x108>)
 8006c7a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8006c7e:	b29b      	uxth	r3, r3
 8006c80:	425b      	negs	r3, r3
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	b21a      	sxth	r2, r3
 8006c86:	4b0b      	ldr	r3, [pc, #44]	; (8006cb4 <ReadDataSB+0x108>)
 8006c88:	815a      	strh	r2, [r3, #10]
		}
//	}
}
 8006c8a:	bf00      	nop
 8006c8c:	371c      	adds	r7, #28
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd90      	pop	{r4, r7, pc}
 8006c92:	bf00      	nop
 8006c94:	2000fbc0 	.word	0x2000fbc0
 8006c98:	20000218 	.word	0x20000218
 8006c9c:	20000224 	.word	0x20000224
 8006ca0:	2001c228 	.word	0x2001c228
 8006ca4:	20000234 	.word	0x20000234
 8006ca8:	20000240 	.word	0x20000240
 8006cac:	2000fcb0 	.word	0x2000fcb0
 8006cb0:	20000250 	.word	0x20000250
 8006cb4:	2000025c 	.word	0x2000025c

08006cb8 <calculate_checksum_sb>:
		osMutexRelease(usb_data_mutex.mutex);
	}
}


uint8_t calculate_checksum_sb(sb_data_t *sb_data){
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]

	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	4413      	add	r3, r2
 8006cce:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
	return sb_data->baro.pressure + sb_data->baro.temperature +
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	4413      	add	r3, r2
 8006cda:	b2da      	uxtb	r2, r3
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8006ce2:	b2db      	uxtb	r3, r3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	b2da      	uxtb	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	4413      	add	r3, r2
 8006cf2:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
			sb_data->imu.gyro_x + sb_data->imu.gyro_y + sb_data->imu.gyro_z +
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	4413      	add	r3, r2
 8006cfe:	b2da      	uxtb	r2, r3
			sb_data->imu.acc_x + sb_data->imu.acc_y +  sb_data->imu.acc_z;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	4413      	add	r3, r2
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8006d12:	b2db      	uxtb	r3, r3
 8006d14:	4413      	add	r3, r2
 8006d16:	b2db      	uxtb	r3, r3
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	370c      	adds	r7, #12
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <vTaskStateEst>:
void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory,
		float pressure, float temperature);


void vTaskStateEst(void *argument) {
 8006d24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d26:	f2ad 5dc4 	subw	sp, sp, #1476	; 0x5c4
 8006d2a:	af0c      	add	r7, sp, #48	; 0x30
 8006d2c:	1d3b      	adds	r3, r7, #4
 8006d2e:	6018      	str	r0, [r3, #0]
	uint32_t tick_count, tick_update;


	/* Initialise Variables */
	env_t env;
	init_env(&env);
 8006d30:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8006d34:	4618      	mov	r0, r3
 8006d36:	f7fb f9ef 	bl	8002118 <init_env>

	state_est_meas_t state_est_meas = { 0 };
 8006d3a:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8006d3e:	2278      	movs	r2, #120	; 0x78
 8006d40:	2100      	movs	r1, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f013 fc0f 	bl	801a566 <memset>
	state_est_meas_t state_est_meas_prior = { 0 };
 8006d48:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	2378      	movs	r3, #120	; 0x78
 8006d50:	461a      	mov	r2, r3
 8006d52:	2100      	movs	r1, #0
 8006d54:	f013 fc07 	bl	801a566 <memset>

	kf_state_t kf_state;
	reset_kf_state(&kf_state);
 8006d58:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	f7fb fcb1 	bl	80026c4 <reset_kf_state>

	extrapolation_rolling_memory_t extrapolation_rolling_memory = { 0 };
 8006d62:	f107 0318 	add.w	r3, r7, #24
 8006d66:	4618      	mov	r0, r3
 8006d68:	23b0      	movs	r3, #176	; 0xb0
 8006d6a:	461a      	mov	r2, r3
 8006d6c:	2100      	movs	r1, #0
 8006d6e:	f013 fbfa 	bl	801a566 <memset>
	extrapolation_rolling_memory.memory_length = 0;
 8006d72:	f107 0318 	add.w	r3, r7, #24
 8006d76:	2200      	movs	r2, #0
 8006d78:	601a      	str	r2, [r3, #0]

	flight_phase_detection_t flight_phase_detection = { 0 };
 8006d7a:	f107 030c 	add.w	r3, r7, #12
 8006d7e:	461a      	mov	r2, r3
 8006d80:	2300      	movs	r3, #0
 8006d82:	6013      	str	r3, [r2, #0]
 8006d84:	6053      	str	r3, [r2, #4]
 8006d86:	6093      	str	r3, [r2, #8]
	reset_flight_phase_detection(&flight_phase_detection);
 8006d88:	f107 030c 	add.w	r3, r7, #12
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7fb fc81 	bl	8002694 <reset_flight_phase_detection>

	command_e telemetry_command = IDLE_COMMAND;
 8006d92:	f107 030b 	add.w	r3, r7, #11
 8006d96:	229b      	movs	r2, #155	; 0x9b
 8006d98:	701a      	strb	r2, [r3, #0]

	select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8006d9a:	f107 0318 	add.w	r3, r7, #24
 8006d9e:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006da2:	f107 010c 	add.w	r1, r7, #12
 8006da6:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006daa:	f7fc f879 	bl	8002ea0 <select_noise_models>

	/* average Temperature */
	float average_temp = 0;
 8006dae:	f04f 0300 	mov.w	r3, #0
 8006db2:	f507 62b1 	add.w	r2, r7, #1416	; 0x588
 8006db6:	6013      	str	r3, [r2, #0]
	float sum_temp = 0;
 8006db8:	f04f 0300 	mov.w	r3, #0
 8006dbc:	f207 5284 	addw	r2, r7, #1412	; 0x584
 8006dc0:	6013      	str	r3, [r2, #0]
	/* average Pressure */
	float average_press = 0;
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	f507 62b0 	add.w	r2, r7, #1408	; 0x580
 8006dca:	6013      	str	r3, [r2, #0]
	float sum_press = 0;
 8006dcc:	f04f 0300 	mov.w	r3, #0
 8006dd0:	f207 527c 	addw	r2, r7, #1404	; 0x57c
 8006dd4:	6013      	str	r3, [r2, #0]
	uint16_t calibrate_count = 0;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a

	osDelay(600);
 8006ddc:	f44f 7016 	mov.w	r0, #600	; 0x258
 8006de0:	f00e ff84 	bl	8015cec <osDelay>


	/* Infinite loop */
	tick_count = osKernelGetTickCount();
 8006de4:	f00e feaa 	bl	8015b3c <osKernelGetTickCount>
 8006de8:	f8c7 058c 	str.w	r0, [r7, #1420]	; 0x58c
	tick_update = osKernelGetTickFreq() / STATE_ESTIMATION_FREQUENCY;
 8006dec:	f00e fece 	bl	8015b8c <osKernelGetTickFreq>
 8006df0:	4602      	mov	r2, r0
 8006df2:	4b9e      	ldr	r3, [pc, #632]	; (800706c <vTaskStateEst+0x348>)
 8006df4:	fba3 2302 	umull	r2, r3, r3, r2
 8006df8:	095b      	lsrs	r3, r3, #5
 8006dfa:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574

	for (;;) {
		tick_count += tick_update;
 8006dfe:	f8d7 258c 	ldr.w	r2, [r7, #1420]	; 0x58c
 8006e02:	f8d7 3574 	ldr.w	r3, [r7, #1396]	; 0x574
 8006e06:	4413      	add	r3, r2
 8006e08:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c

		/* Acquire New Command */
		ReadMutex(&command_mutex, &global_telemetry_command, &telemetry_command, sizeof(global_telemetry_command));
 8006e0c:	f107 020b 	add.w	r2, r7, #11
 8006e10:	2301      	movs	r3, #1
 8006e12:	4997      	ldr	r1, [pc, #604]	; (8007070 <vTaskStateEst+0x34c>)
 8006e14:	4897      	ldr	r0, [pc, #604]	; (8007074 <vTaskStateEst+0x350>)
 8006e16:	f7fc ffb3 	bl	8003d80 <ReadMutex>
		/*
		 * Check if we need to reset the state estimation
		 * and if we are in idle state to be able
		 * to do so
		 */
		if(flight_phase_detection.flight_phase == IDLE && global_telemetry_command == CALIBRATE_SENSORS){
 8006e1a:	f107 030c 	add.w	r3, r7, #12
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d115      	bne.n	8006e50 <vTaskStateEst+0x12c>
 8006e24:	4b92      	ldr	r3, [pc, #584]	; (8007070 <vTaskStateEst+0x34c>)
 8006e26:	781b      	ldrb	r3, [r3, #0]
 8006e28:	2b49      	cmp	r3, #73	; 0x49
 8006e2a:	d111      	bne.n	8006e50 <vTaskStateEst+0x12c>
			resetStateEstimation(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory, average_press, average_temp);
 8006e2c:	f107 0318 	add.w	r3, r7, #24
 8006e30:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006e34:	f107 010c 	add.w	r1, r7, #12
 8006e38:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006e3c:	f507 64b1 	add.w	r4, r7, #1416	; 0x588
 8006e40:	edd4 0a00 	vldr	s1, [r4]
 8006e44:	f507 64b0 	add.w	r4, r7, #1408	; 0x580
 8006e48:	ed94 0a00 	vldr	s0, [r4]
 8006e4c:	f000 f932 	bl	80070b4 <resetStateEstimation>
		}

		/* Acquire the Sensor data */

		/* Sensor Board 1 */
		ReadMutexStateEst(&sb1_mutex, &sb1_baro, &sb1_imu, &state_est_meas, 1);
 8006e50:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006e54:	2301      	movs	r3, #1
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	4a87      	ldr	r2, [pc, #540]	; (8007078 <vTaskStateEst+0x354>)
 8006e5c:	4987      	ldr	r1, [pc, #540]	; (800707c <vTaskStateEst+0x358>)
 8006e5e:	4888      	ldr	r0, [pc, #544]	; (8007080 <vTaskStateEst+0x35c>)
 8006e60:	f7fc ffca 	bl	8003df8 <ReadMutexStateEst>

		/* Sensor Board 2 */
		ReadMutexStateEst(&sb2_mutex, &sb2_baro, &sb2_imu, &state_est_meas, 2);
 8006e64:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006e68:	2302      	movs	r3, #2
 8006e6a:	9300      	str	r3, [sp, #0]
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	4a85      	ldr	r2, [pc, #532]	; (8007084 <vTaskStateEst+0x360>)
 8006e70:	4985      	ldr	r1, [pc, #532]	; (8007088 <vTaskStateEst+0x364>)
 8006e72:	4886      	ldr	r0, [pc, #536]	; (800708c <vTaskStateEst+0x368>)
 8006e74:	f7fc ffc0 	bl	8003df8 <ReadMutexStateEst>

		/* Sensor Board 3 */
		ReadMutexStateEst(&sb3_mutex, &sb3_baro, &sb3_imu, &state_est_meas, 3);
 8006e78:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	9300      	str	r3, [sp, #0]
 8006e80:	4613      	mov	r3, r2
 8006e82:	4a83      	ldr	r2, [pc, #524]	; (8007090 <vTaskStateEst+0x36c>)
 8006e84:	4983      	ldr	r1, [pc, #524]	; (8007094 <vTaskStateEst+0x370>)
 8006e86:	4884      	ldr	r0, [pc, #528]	; (8007098 <vTaskStateEst+0x374>)
 8006e88:	f7fc ffb6 	bl	8003df8 <ReadMutexStateEst>

		/* calculate averaging */
		if(flight_phase_detection.flight_phase == IDLE){
 8006e8c:	f107 030c 	add.w	r3, r7, #12
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d165      	bne.n	8006f62 <vTaskStateEst+0x23e>
			sum_press += (float)(sb1_baro.pressure + sb2_baro.pressure + sb3_baro.pressure);
 8006e96:	4b79      	ldr	r3, [pc, #484]	; (800707c <vTaskStateEst+0x358>)
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4b7b      	ldr	r3, [pc, #492]	; (8007088 <vTaskStateEst+0x364>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	441a      	add	r2, r3
 8006ea0:	4b7c      	ldr	r3, [pc, #496]	; (8007094 <vTaskStateEst+0x370>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eae:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8006eb2:	ed93 7a00 	vldr	s14, [r3]
 8006eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eba:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8006ebe:	edc3 7a00 	vstr	s15, [r3]
			sum_temp += ((float)(sb1_baro.temperature + sb2_baro.temperature + sb3_baro.temperature))/100;
 8006ec2:	4b6e      	ldr	r3, [pc, #440]	; (800707c <vTaskStateEst+0x358>)
 8006ec4:	685a      	ldr	r2, [r3, #4]
 8006ec6:	4b70      	ldr	r3, [pc, #448]	; (8007088 <vTaskStateEst+0x364>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	441a      	add	r2, r3
 8006ecc:	4b71      	ldr	r3, [pc, #452]	; (8007094 <vTaskStateEst+0x370>)
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	ee07 3a90 	vmov	s15, r3
 8006ed6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006eda:	eddf 6a70 	vldr	s13, [pc, #448]	; 800709c <vTaskStateEst+0x378>
 8006ede:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ee2:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006ee6:	ed93 7a00 	vldr	s14, [r3]
 8006eea:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006eee:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006ef2:	edc3 7a00 	vstr	s15, [r3]
			calibrate_count += 3;
 8006ef6:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006efa:	3303      	adds	r3, #3
 8006efc:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
			if(calibrate_count > 150){
 8006f00:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006f04:	2b96      	cmp	r3, #150	; 0x96
 8006f06:	d92c      	bls.n	8006f62 <vTaskStateEst+0x23e>
				average_press = sum_press / (float)calibrate_count;
 8006f08:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006f0c:	ee07 3a90 	vmov	s15, r3
 8006f10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f14:	f207 537c 	addw	r3, r7, #1404	; 0x57c
 8006f18:	edd3 6a00 	vldr	s13, [r3]
 8006f1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f20:	f507 63b0 	add.w	r3, r7, #1408	; 0x580
 8006f24:	edc3 7a00 	vstr	s15, [r3]
				average_temp = sum_temp / (float)calibrate_count;
 8006f28:	f8b7 357a 	ldrh.w	r3, [r7, #1402]	; 0x57a
 8006f2c:	ee07 3a90 	vmov	s15, r3
 8006f30:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006f34:	f207 5384 	addw	r3, r7, #1412	; 0x584
 8006f38:	edd3 6a00 	vldr	s13, [r3]
 8006f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f40:	f507 63b1 	add.w	r3, r7, #1416	; 0x588
 8006f44:	edc3 7a00 	vstr	s15, [r3]
				sum_press = 0;
 8006f48:	f04f 0300 	mov.w	r3, #0
 8006f4c:	f207 527c 	addw	r2, r7, #1404	; 0x57c
 8006f50:	6013      	str	r3, [r2, #0]
				sum_temp = 0;
 8006f52:	f04f 0300 	mov.w	r3, #0
 8006f56:	f207 5284 	addw	r2, r7, #1412	; 0x584
 8006f5a:	6013      	str	r3, [r2, #0]
				calibrate_count = 0;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f8a7 357a 	strh.w	r3, [r7, #1402]	; 0x57a
			}
		}

		/* get new Phase Detection*/
		ReadMutex(&fsm_mutex, &global_flight_phase_detection, &flight_phase_detection, sizeof(flight_phase_detection));
 8006f62:	f107 020c 	add.w	r2, r7, #12
 8006f66:	230c      	movs	r3, #12
 8006f68:	494d      	ldr	r1, [pc, #308]	; (80070a0 <vTaskStateEst+0x37c>)
 8006f6a:	484e      	ldr	r0, [pc, #312]	; (80070a4 <vTaskStateEst+0x380>)
 8006f6c:	f7fc ff08 	bl	8003d80 <ReadMutex>

		/* process measurements */
		process_measurements(tick_count, &kf_state, &state_est_meas, &state_est_meas_prior, &env, &extrapolation_rolling_memory);
 8006f70:	f207 4074 	addw	r0, r7, #1140	; 0x474
 8006f74:	f207 42ec 	addw	r2, r7, #1260	; 0x4ec
 8006f78:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 8006f7c:	f107 0318 	add.w	r3, r7, #24
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	f207 5364 	addw	r3, r7, #1380	; 0x564
 8006f86:	9300      	str	r3, [sp, #0]
 8006f88:	4603      	mov	r3, r0
 8006f8a:	f8d7 058c 	ldr.w	r0, [r7, #1420]	; 0x58c
 8006f8e:	f7fb fe1b 	bl	8002bc8 <process_measurements>

		/* select noise models (dependent on detected flight phase and updated temperature in environment) */
		select_noise_models(&kf_state, &flight_phase_detection, &env, &extrapolation_rolling_memory);
 8006f92:	f107 0318 	add.w	r3, r7, #24
 8006f96:	f207 5264 	addw	r2, r7, #1380	; 0x564
 8006f9a:	f107 010c 	add.w	r1, r7, #12
 8006f9e:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8006fa2:	f7fb ff7d 	bl	8002ea0 <select_noise_models>

		/* Start Kalman Update */

		/* Prediction Step */
		kf_prediction(&kf_state);
 8006fa6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fb fc20 	bl	80027f0 <kf_prediction>

		/* update Step */
		if (kf_state.num_z_active > 0) {
 8006fb0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006fb4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	dd0a      	ble.n	8006fd2 <vTaskStateEst+0x2ae>
			select_kf_observation_matrices(&kf_state);
 8006fbc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	f7fb fc86 	bl	80028d2 <select_kf_observation_matrices>
			kf_update(&kf_state);
 8006fc6:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f7fb fcbe 	bl	800294c <kf_update>
 8006fd0:	e00a      	b.n	8006fe8 <vTaskStateEst+0x2c4>
		}
		else
		{
			memcpy(kf_state.x_est, kf_state.x_priori, sizeof(kf_state.x_priori));
 8006fd2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8006fd6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8006fda:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8006fde:	f502 729a 	add.w	r2, r2, #308	; 0x134
 8006fe2:	ca07      	ldmia	r2, {r0, r1, r2}
 8006fe4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}

		/* set measurement prior to measurements from completed state estimation step */
		memcpy(&state_est_meas_prior, &state_est_meas, sizeof(state_est_meas));
 8006fe8:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8006fec:	4618      	mov	r0, r3
 8006fee:	f207 43ec 	addw	r3, r7, #1260	; 0x4ec
 8006ff2:	2278      	movs	r2, #120	; 0x78
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	f013 faab 	bl	801a550 <memcpy>

		/* Kalman Update Finished */

		/* Update global State Estimation Data */
		if(AcquireMutex(&state_est_mutex) == osOK){
 8006ffa:	482b      	ldr	r0, [pc, #172]	; (80070a8 <vTaskStateEst+0x384>)
 8006ffc:	f7fc fe98 	bl	8003d30 <AcquireMutex>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d108      	bne.n	8007018 <vTaskStateEst+0x2f4>
			update_state_est_data(&state_est_data_global, &kf_state);
 8007006:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800700a:	4619      	mov	r1, r3
 800700c:	4827      	ldr	r0, [pc, #156]	; (80070ac <vTaskStateEst+0x388>)
 800700e:	f7fb fd8b 	bl	8002b28 <update_state_est_data>
			ReleaseMutex(&state_est_mutex);
 8007012:	4825      	ldr	r0, [pc, #148]	; (80070a8 <vTaskStateEst+0x384>)
 8007014:	f7fc fea6 	bl	8003d64 <ReleaseMutex>
		}

		/* Update env for FSM */
		if(AcquireMutex(&fsm_mutex) == osOK){
 8007018:	4822      	ldr	r0, [pc, #136]	; (80070a4 <vTaskStateEst+0x380>)
 800701a:	f7fc fe89 	bl	8003d30 <AcquireMutex>
 800701e:	4603      	mov	r3, r0
 8007020:	2b00      	cmp	r3, #0
 8007022:	d109      	bne.n	8007038 <vTaskStateEst+0x314>
			global_env = env;
 8007024:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <vTaskStateEst+0x38c>)
 8007026:	461c      	mov	r4, r3
 8007028:	f207 5364 	addw	r3, r7, #1380	; 0x564
 800702c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800702e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			ReleaseMutex(&fsm_mutex);
 8007032:	481c      	ldr	r0, [pc, #112]	; (80070a4 <vTaskStateEst+0x380>)
 8007034:	f7fc fe96 	bl	8003d64 <ReleaseMutex>
		}

		/* Write to logging system */
		logEstimatorVar(osKernelGetTickCount(), state_est_data_global);
 8007038:	f00e fd80 	bl	8015b3c <osKernelGetTickCount>
 800703c:	4684      	mov	ip, r0
 800703e:	4e1b      	ldr	r6, [pc, #108]	; (80070ac <vTaskStateEst+0x388>)
 8007040:	466d      	mov	r5, sp
 8007042:	f106 040c 	add.w	r4, r6, #12
 8007046:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007048:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800704a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800704c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800704e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8007052:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8007056:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800705a:	4660      	mov	r0, ip
 800705c:	f7fd f8ba 	bl	80041d4 <logEstimatorVar>

		/* TODO: Check if the state estimation can do this for the given frequency */

		osDelayUntil(tick_count);
 8007060:	f8d7 058c 	ldr.w	r0, [r7, #1420]	; 0x58c
 8007064:	f00e fe70 	bl	8015d48 <osDelayUntil>
		tick_count += tick_update;
 8007068:	e6c9      	b.n	8006dfe <vTaskStateEst+0xda>
 800706a:	bf00      	nop
 800706c:	51eb851f 	.word	0x51eb851f
 8007070:	20013dac 	.word	0x20013dac
 8007074:	2000ba88 	.word	0x2000ba88
 8007078:	20000224 	.word	0x20000224
 800707c:	20000218 	.word	0x20000218
 8007080:	2000fbc0 	.word	0x2000fbc0
 8007084:	20000240 	.word	0x20000240
 8007088:	20000234 	.word	0x20000234
 800708c:	2001c228 	.word	0x2001c228
 8007090:	2000025c 	.word	0x2000025c
 8007094:	20000250 	.word	0x20000250
 8007098:	2000fcb0 	.word	0x2000fcb0
 800709c:	42c80000 	.word	0x42c80000
 80070a0:	200002bc 	.word	0x200002bc
 80070a4:	200096a4 	.word	0x200096a4
 80070a8:	20011d24 	.word	0x20011d24
 80070ac:	2000026c 	.word	0x2000026c
 80070b0:	200002ac 	.word	0x200002ac

080070b4 <resetStateEstimation>:
	}
}


void resetStateEstimation(kf_state_t *kf_state, flight_phase_detection_t *flight_phase_detection,
		env_t *environment, extrapolation_rolling_memory_t *extrapolation_rolling_memory, float pressure, float temperature){
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b086      	sub	sp, #24
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6178      	str	r0, [r7, #20]
 80070bc:	6139      	str	r1, [r7, #16]
 80070be:	60fa      	str	r2, [r7, #12]
 80070c0:	60bb      	str	r3, [r7, #8]
 80070c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80070c6:	edc7 0a00 	vstr	s1, [r7]
	reset_flight_phase_detection(flight_phase_detection);
 80070ca:	6938      	ldr	r0, [r7, #16]
 80070cc:	f7fb fae2 	bl	8002694 <reset_flight_phase_detection>
	calibrate_env(environment, pressure, temperature);
 80070d0:	edd7 0a00 	vldr	s1, [r7]
 80070d4:	ed97 0a01 	vldr	s0, [r7, #4]
 80070d8:	68f8      	ldr	r0, [r7, #12]
 80070da:	f7fb f835 	bl	8002148 <calibrate_env>
	update_env(environment, temperature);
 80070de:	ed97 0a00 	vldr	s0, [r7]
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7fb f854 	bl	8002190 <update_env>
	reset_kf_state(kf_state);
 80070e8:	6978      	ldr	r0, [r7, #20]
 80070ea:	f7fb faeb 	bl	80026c4 <reset_kf_state>
	*extrapolation_rolling_memory = EMPTY_MEMORY;
 80070ee:	68bb      	ldr	r3, [r7, #8]
 80070f0:	4618      	mov	r0, r3
 80070f2:	23b0      	movs	r3, #176	; 0xb0
 80070f4:	461a      	mov	r2, r3
 80070f6:	2100      	movs	r1, #0
 80070f8:	f013 fa35 	bl	801a566 <memset>
	select_noise_models(kf_state, flight_phase_detection, environment, extrapolation_rolling_memory);
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	6939      	ldr	r1, [r7, #16]
 8007102:	6978      	ldr	r0, [r7, #20]
 8007104:	f7fb fecc 	bl	8002ea0 <select_noise_models>
}
 8007108:	bf00      	nop
 800710a:	3718      	adds	r7, #24
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <vTaskXbee>:
bool buzzer_on_telemetry = false;


uint8_t calculate_checksum(telemetry_t *cnf);

void vTaskXbee(void *argument) {
 8007110:	b580      	push	{r7, lr}
 8007112:	b0b4      	sub	sp, #208	; 0xd0
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
	/* local Data */
	state_est_data_t state_est_data;
	sb_data_t local_sb_data;

	/* Telemetry struct */
	telemetry_t telemetry_send = { 0 };
 8007118:	f107 030c 	add.w	r3, r7, #12
 800711c:	2258      	movs	r2, #88	; 0x58
 800711e:	2100      	movs	r1, #0
 8007120:	4618      	mov	r0, r3
 8007122:	f013 fa20 	bl	801a566 <memset>
	telemetry_send.flight_phase = IDLE;
 8007126:	2301      	movs	r3, #1
 8007128:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58


	/* Command struct */
	local_command_rx = IDLE_COMMAND;
 800712c:	4b99      	ldr	r3, [pc, #612]	; (8007394 <vTaskXbee+0x284>)
 800712e:	229b      	movs	r2, #155	; 0x9b
 8007130:	701a      	strb	r2, [r3, #0]
	local_command = IDLE_COMMAND;
 8007132:	4b99      	ldr	r3, [pc, #612]	; (8007398 <vTaskXbee+0x288>)
 8007134:	229b      	movs	r2, #155	; 0x9b
 8007136:	701a      	strb	r2, [r3, #0]

	uint8_t buzzercounter = 0;
 8007138:	2300      	movs	r3, #0
 800713a:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

	osDelay(400);
 800713e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007142:	f00e fdd3 	bl	8015cec <osDelay>


	/* Infinite loop */

	tick_update_slow = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ;
 8007146:	f00e fd21 	bl	8015b8c <osKernelGetTickFreq>
 800714a:	4602      	mov	r2, r0
 800714c:	4b93      	ldr	r3, [pc, #588]	; (800739c <vTaskXbee+0x28c>)
 800714e:	fba3 2302 	umull	r2, r3, r3, r2
 8007152:	08db      	lsrs	r3, r3, #3
 8007154:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	tick_update_fast = osKernelGetTickFreq() / XBEE_SAMPLING_FREQ_HIGH;
 8007158:	f00e fd18 	bl	8015b8c <osKernelGetTickFreq>
 800715c:	4602      	mov	r2, r0
 800715e:	4b90      	ldr	r3, [pc, #576]	; (80073a0 <vTaskXbee+0x290>)
 8007160:	fba3 2302 	umull	r2, r3, r3, r2
 8007164:	091b      	lsrs	r3, r3, #4
 8007166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	bool fast_sampling = false;
 800716a:	2300      	movs	r3, #0
 800716c:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
	tick_count = osKernelGetTickCount();
 8007170:	f00e fce4 	bl	8015b3c <osKernelGetTickCount>
 8007174:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc


	while (1) {
		/* Tick Update */
		if(fast_sampling){
 8007178:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800717c:	2b00      	cmp	r3, #0
 800717e:	d007      	beq.n	8007190 <vTaskXbee+0x80>
			tick_count += tick_update_fast;
 8007180:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007184:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007188:	4413      	add	r3, r2
 800718a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800718e:	e006      	b.n	800719e <vTaskXbee+0x8e>
		}
		else{
			tick_count += tick_update_slow;
 8007190:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8007194:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007198:	4413      	add	r3, r2
 800719a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
		}
		/* Read Command */
		HAL_UART_Receive_IT(&huart7, (uint8_t*)&local_command_rx, 1);
 800719e:	2201      	movs	r2, #1
 80071a0:	497c      	ldr	r1, [pc, #496]	; (8007394 <vTaskXbee+0x284>)
 80071a2:	4880      	ldr	r0, [pc, #512]	; (80073a4 <vTaskXbee+0x294>)
 80071a4:	f006 fcae 	bl	800db04 <HAL_UART_Receive_IT>
		UsbPrint("[Telemetry] ts: %u, Received Commmand: %u, Rx_buffer; %u\n",
 80071a8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80071aa:	4b7b      	ldr	r3, [pc, #492]	; (8007398 <vTaskXbee+0x288>)
 80071ac:	781b      	ldrb	r3, [r3, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	4b78      	ldr	r3, [pc, #480]	; (8007394 <vTaskXbee+0x284>)
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	487c      	ldr	r0, [pc, #496]	; (80073a8 <vTaskXbee+0x298>)
 80071b6:	f7fd f89d 	bl	80042f4 <UsbPrint>
				telemetry_send.ts, local_command, local_command_rx);

		if(AcquireMutex(&command_mutex) == osOK){
 80071ba:	487c      	ldr	r0, [pc, #496]	; (80073ac <vTaskXbee+0x29c>)
 80071bc:	f7fc fdb8 	bl	8003d30 <AcquireMutex>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <vTaskXbee+0xc4>
			global_telemetry_command = local_command;
 80071c6:	4b74      	ldr	r3, [pc, #464]	; (8007398 <vTaskXbee+0x288>)
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	4b79      	ldr	r3, [pc, #484]	; (80073b0 <vTaskXbee+0x2a0>)
 80071cc:	701a      	strb	r2, [r3, #0]
			ReleaseMutex(&command_mutex);
 80071ce:	4877      	ldr	r0, [pc, #476]	; (80073ac <vTaskXbee+0x29c>)
 80071d0:	f7fc fdc8 	bl	8003d64 <ReleaseMutex>
		}

		/* Check if we need to go to fast sampling */
		if(local_command == TELEMETRY_HIGH_SAMPLING){
 80071d4:	4b70      	ldr	r3, [pc, #448]	; (8007398 <vTaskXbee+0x288>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b0d      	cmp	r3, #13
 80071da:	d102      	bne.n	80071e2 <vTaskXbee+0xd2>
			fast_sampling = true;
 80071dc:	2301      	movs	r3, #1
 80071de:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		}

		/* Check if we need to go to low sampling */
		if(local_command == TELEMETRY_LOW_SAMPLING){
 80071e2:	4b6d      	ldr	r3, [pc, #436]	; (8007398 <vTaskXbee+0x288>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	2bc5      	cmp	r3, #197	; 0xc5
 80071e8:	d102      	bne.n	80071f0 <vTaskXbee+0xe0>
			fast_sampling = false;
 80071ea:	2300      	movs	r3, #0
 80071ec:	f887 30ca 	strb.w	r3, [r7, #202]	; 0xca
		}

		/* Enable Buzzer trough Telemetry */
		if(local_command == ENABLE_BUZZER){
 80071f0:	4b69      	ldr	r3, [pc, #420]	; (8007398 <vTaskXbee+0x288>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b71      	cmp	r3, #113	; 0x71
 80071f6:	d10e      	bne.n	8007216 <vTaskXbee+0x106>
			buzzer_on_telemetry = !buzzer_on_telemetry;
 80071f8:	4b6e      	ldr	r3, [pc, #440]	; (80073b4 <vTaskXbee+0x2a4>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	bf14      	ite	ne
 8007200:	2301      	movne	r3, #1
 8007202:	2300      	moveq	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	f083 0301 	eor.w	r3, r3, #1
 800720a:	b2db      	uxtb	r3, r3
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	b2da      	uxtb	r2, r3
 8007212:	4b68      	ldr	r3, [pc, #416]	; (80073b4 <vTaskXbee+0x2a4>)
 8007214:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Buzzer Trough FSM */
		if(telemetry_send.flight_phase == RECOVERY){
 8007216:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800721a:	2b06      	cmp	r3, #6
 800721c:	d102      	bne.n	8007224 <vTaskXbee+0x114>
			buzzer_on_fsm = true;
 800721e:	4b66      	ldr	r3, [pc, #408]	; (80073b8 <vTaskXbee+0x2a8>)
 8007220:	2201      	movs	r2, #1
 8007222:	701a      	strb	r2, [r3, #0]
		}

		/* reset command */
		if(new_command){
 8007224:	4b65      	ldr	r3, [pc, #404]	; (80073bc <vTaskXbee+0x2ac>)
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d005      	beq.n	8007238 <vTaskXbee+0x128>
			local_command = IDLE_COMMAND;
 800722c:	4b5a      	ldr	r3, [pc, #360]	; (8007398 <vTaskXbee+0x288>)
 800722e:	229b      	movs	r2, #155	; 0x9b
 8007230:	701a      	strb	r2, [r3, #0]
			new_command = false;
 8007232:	4b62      	ldr	r3, [pc, #392]	; (80073bc <vTaskXbee+0x2ac>)
 8007234:	2200      	movs	r2, #0
 8007236:	701a      	strb	r2, [r3, #0]
		}

		/* Enable Buzzer */
		if(buzzer_on_fsm ^ buzzer_on_telemetry){
 8007238:	4b5f      	ldr	r3, [pc, #380]	; (80073b8 <vTaskXbee+0x2a8>)
 800723a:	781a      	ldrb	r2, [r3, #0]
 800723c:	4b5d      	ldr	r3, [pc, #372]	; (80073b4 <vTaskXbee+0x2a4>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	429a      	cmp	r2, r3
 8007242:	d029      	beq.n	8007298 <vTaskXbee+0x188>
			if(fast_sampling){
 8007244:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8007248:	2b00      	cmp	r3, #0
 800724a:	d012      	beq.n	8007272 <vTaskXbee+0x162>
				if(buzzercounter > (400/tick_update_fast)){
 800724c:	f897 20cb 	ldrb.w	r2, [r7, #203]	; 0xcb
 8007250:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007254:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007258:	fbb1 f3f3 	udiv	r3, r1, r3
 800725c:	429a      	cmp	r2, r3
 800725e:	d921      	bls.n	80072a4 <vTaskXbee+0x194>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8007260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007264:	4856      	ldr	r0, [pc, #344]	; (80073c0 <vTaskXbee+0x2b0>)
 8007266:	f001 fcde 	bl	8008c26 <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 800726a:	2300      	movs	r3, #0
 800726c:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8007270:	e018      	b.n	80072a4 <vTaskXbee+0x194>
				}
			}
			else{
				if(buzzercounter > (400/tick_update_slow)){
 8007272:	f897 20cb 	ldrb.w	r2, [r7, #203]	; 0xcb
 8007276:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800727a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800727e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007282:	429a      	cmp	r2, r3
 8007284:	d90e      	bls.n	80072a4 <vTaskXbee+0x194>
					HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8007286:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800728a:	484d      	ldr	r0, [pc, #308]	; (80073c0 <vTaskXbee+0x2b0>)
 800728c:	f001 fccb 	bl	8008c26 <HAL_GPIO_TogglePin>
					buzzercounter = 0;
 8007290:	2300      	movs	r3, #0
 8007292:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb
 8007296:	e005      	b.n	80072a4 <vTaskXbee+0x194>
				}
			}
		}
		else{
			HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8007298:	2200      	movs	r2, #0
 800729a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800729e:	4848      	ldr	r0, [pc, #288]	; (80073c0 <vTaskXbee+0x2b0>)
 80072a0:	f001 fca8 	bl	8008bf4 <HAL_GPIO_WritePin>
		}
		buzzercounter++;
 80072a4:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 80072a8:	3301      	adds	r3, #1
 80072aa:	f887 30cb 	strb.w	r3, [r7, #203]	; 0xcb

		/* Read Sensor Board Data */
		ReadMutex(&sb1_mutex, &sb1_baro, &local_sb_data.baro, sizeof(sb1_baro));
 80072ae:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80072b2:	230c      	movs	r3, #12
 80072b4:	4943      	ldr	r1, [pc, #268]	; (80073c4 <vTaskXbee+0x2b4>)
 80072b6:	4844      	ldr	r0, [pc, #272]	; (80073c8 <vTaskXbee+0x2b8>)
 80072b8:	f7fc fd62 	bl	8003d80 <ReadMutex>
		ReadMutex(&sb1_mutex, &sb1_imu, &local_sb_data.imu, sizeof(sb1_imu));
 80072bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80072c0:	f103 020c 	add.w	r2, r3, #12
 80072c4:	2310      	movs	r3, #16
 80072c6:	4941      	ldr	r1, [pc, #260]	; (80073cc <vTaskXbee+0x2bc>)
 80072c8:	483f      	ldr	r0, [pc, #252]	; (80073c8 <vTaskXbee+0x2b8>)
 80072ca:	f7fc fd59 	bl	8003d80 <ReadMutex>

		telemetry_send.sb_data.pressure = local_sb_data.baro.pressure;
 80072ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80072d0:	60fb      	str	r3, [r7, #12]
		telemetry_send.sb_data.temperature = local_sb_data.baro.temperature;
 80072d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072d4:	613b      	str	r3, [r7, #16]
		telemetry_send.sb_data.acc_x = local_sb_data.imu.acc_x;
 80072d6:	f9b7 3076 	ldrsh.w	r3, [r7, #118]	; 0x76
 80072da:	837b      	strh	r3, [r7, #26]
		telemetry_send.sb_data.acc_y = local_sb_data.imu.acc_y;
 80072dc:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 80072e0:	83bb      	strh	r3, [r7, #28]
		telemetry_send.sb_data.acc_z = local_sb_data.imu.acc_z;
 80072e2:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 80072e6:	83fb      	strh	r3, [r7, #30]
		telemetry_send.sb_data.gyro_x = local_sb_data.imu.gyro_x;
 80072e8:	f9b7 3070 	ldrsh.w	r3, [r7, #112]	; 0x70
 80072ec:	82bb      	strh	r3, [r7, #20]
		telemetry_send.sb_data.gyro_y = local_sb_data.imu.gyro_y;
 80072ee:	f9b7 3072 	ldrsh.w	r3, [r7, #114]	; 0x72
 80072f2:	82fb      	strh	r3, [r7, #22]
		telemetry_send.sb_data.gyro_z = local_sb_data.imu.gyro_z;
 80072f4:	f9b7 3074 	ldrsh.w	r3, [r7, #116]	; 0x74
 80072f8:	833b      	strh	r3, [r7, #24]


		/* Read Control Data*/
		ReadMutex(&state_est_mutex, &state_est_data_global, &state_est_data, sizeof(state_est_data));
 80072fa:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80072fe:	233c      	movs	r3, #60	; 0x3c
 8007300:	4933      	ldr	r1, [pc, #204]	; (80073d0 <vTaskXbee+0x2c0>)
 8007302:	4834      	ldr	r0, [pc, #208]	; (80073d4 <vTaskXbee+0x2c4>)
 8007304:	f7fc fd3c 	bl	8003d80 <ReadMutex>

		ReadMutex(&controller_mutex, &controller_output_global, &telemetry_send.airbrake_extension, sizeof(controller_output_global));
 8007308:	f107 030c 	add.w	r3, r7, #12
 800730c:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007310:	2304      	movs	r3, #4
 8007312:	4931      	ldr	r1, [pc, #196]	; (80073d8 <vTaskXbee+0x2c8>)
 8007314:	4831      	ldr	r0, [pc, #196]	; (80073dc <vTaskXbee+0x2cc>)
 8007316:	f7fc fd33 	bl	8003d80 <ReadMutex>

		ReadMutex(&fsm_mutex, &global_flight_phase_detection.flight_phase, &telemetry_send.flight_phase, sizeof(global_flight_phase_detection.flight_phase));
 800731a:	f107 030c 	add.w	r3, r7, #12
 800731e:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007322:	2301      	movs	r3, #1
 8007324:	492e      	ldr	r1, [pc, #184]	; (80073e0 <vTaskXbee+0x2d0>)
 8007326:	482f      	ldr	r0, [pc, #188]	; (80073e4 <vTaskXbee+0x2d4>)
 8007328:	f7fc fd2a 	bl	8003d80 <ReadMutex>

		/* read GPS */
		ReadMutex(&gps_mutex, &globalGPS, &telemetry_send.gps, sizeof(globalGPS));
 800732c:	f107 030c 	add.w	r3, r7, #12
 8007330:	f103 021c 	add.w	r2, r3, #28
 8007334:	2324      	movs	r3, #36	; 0x24
 8007336:	492c      	ldr	r1, [pc, #176]	; (80073e8 <vTaskXbee+0x2d8>)
 8007338:	482c      	ldr	r0, [pc, #176]	; (80073ec <vTaskXbee+0x2dc>)
 800733a:	f7fc fd21 	bl	8003d80 <ReadMutex>

		/* read Battery */
		ReadMutex(&battery_mutex, &global_battery_data, &telemetry_send.battery, sizeof(global_battery_data));
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	f103 0214 	add.w	r2, r3, #20
 8007346:	2306      	movs	r3, #6
 8007348:	4929      	ldr	r1, [pc, #164]	; (80073f0 <vTaskXbee+0x2e0>)
 800734a:	482a      	ldr	r0, [pc, #168]	; (80073f4 <vTaskXbee+0x2e4>)
 800734c:	f7fc fd18 	bl	8003d80 <ReadMutex>


		telemetry_send.height = state_est_data.position_world[2];
 8007350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007354:	64fb      	str	r3, [r7, #76]	; 0x4c
		telemetry_send.velocity = state_est_data.velocity_world[2];
 8007356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800735a:	653b      	str	r3, [r7, #80]	; 0x50
		telemetry_send.ts = osKernelGetTickCount();
 800735c:	f00e fbee 	bl	8015b3c <osKernelGetTickCount>
 8007360:	4603      	mov	r3, r0
 8007362:	65fb      	str	r3, [r7, #92]	; 0x5c

		telemetry_send.checksum = calculate_checksum(&telemetry_send);
 8007364:	f107 030c 	add.w	r3, r7, #12
 8007368:	4618      	mov	r0, r3
 800736a:	f000 f893 	bl	8007494 <calculate_checksum>
 800736e:	4603      	mov	r3, r0
 8007370:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

		/* Send to Xbee module */
		HAL_UART_Transmit(&huart7, (uint8_t*) &telemetry_send, sizeof(telemetry_send), 100);
 8007374:	f107 010c 	add.w	r1, r7, #12
 8007378:	2364      	movs	r3, #100	; 0x64
 800737a:	2258      	movs	r2, #88	; 0x58
 800737c:	4809      	ldr	r0, [pc, #36]	; (80073a4 <vTaskXbee+0x294>)
 800737e:	f006 fb2f 	bl	800d9e0 <HAL_UART_Transmit>
//		HAL_UART_Transmit(&huart7, (uint8_t*) &dummy_telemetry, sizeof(dummy_telemetry), 100);

		telemetry_send.checksum = 0;
 8007382:	2300      	movs	r3, #0
 8007384:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60

		/* Sleep */
		osDelayUntil(tick_count);
 8007388:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 800738c:	f00e fcdc 	bl	8015d48 <osDelayUntil>
		if(fast_sampling){
 8007390:	e6f2      	b.n	8007178 <vTaskXbee+0x68>
 8007392:	bf00      	nop
 8007394:	2001c6d9 	.word	0x2001c6d9
 8007398:	2001c6d8 	.word	0x2001c6d8
 800739c:	cccccccd 	.word	0xcccccccd
 80073a0:	51eb851f 	.word	0x51eb851f
 80073a4:	20009718 	.word	0x20009718
 80073a8:	0801d4cc 	.word	0x0801d4cc
 80073ac:	2000ba88 	.word	0x2000ba88
 80073b0:	20013dac 	.word	0x20013dac
 80073b4:	2000032e 	.word	0x2000032e
 80073b8:	2000032d 	.word	0x2000032d
 80073bc:	2000032c 	.word	0x2000032c
 80073c0:	40020c00 	.word	0x40020c00
 80073c4:	20000218 	.word	0x20000218
 80073c8:	2000fbc0 	.word	0x2000fbc0
 80073cc:	20000224 	.word	0x20000224
 80073d0:	2000026c 	.word	0x2000026c
 80073d4:	20011d24 	.word	0x20011d24
 80073d8:	200002a8 	.word	0x200002a8
 80073dc:	2000fb00 	.word	0x2000fb00
 80073e0:	200002bc 	.word	0x200002bc
 80073e4:	200096a4 	.word	0x200096a4
 80073e8:	20013d88 	.word	0x20013d88
 80073ec:	20017e70 	.word	0x20017e70
 80073f0:	2000fb08 	.word	0x2000fb08
 80073f4:	20009710 	.word	0x20009710

080073f8 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
	if(huart==&huart7){
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4a1e      	ldr	r2, [pc, #120]	; (800747c <HAL_UART_RxCpltCallback+0x84>)
 8007404:	4293      	cmp	r3, r2
 8007406:	d135      	bne.n	8007474 <HAL_UART_RxCpltCallback+0x7c>
		static int counter = 0;
		static uint8_t buffer [4];
		buffer[counter] = local_command_rx;
 8007408:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <HAL_UART_RxCpltCallback+0x88>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a1d      	ldr	r2, [pc, #116]	; (8007484 <HAL_UART_RxCpltCallback+0x8c>)
 800740e:	7811      	ldrb	r1, [r2, #0]
 8007410:	4a1d      	ldr	r2, [pc, #116]	; (8007488 <HAL_UART_RxCpltCallback+0x90>)
 8007412:	54d1      	strb	r1, [r2, r3]
		counter++;
 8007414:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <HAL_UART_RxCpltCallback+0x88>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	3301      	adds	r3, #1
 800741a:	4a19      	ldr	r2, [pc, #100]	; (8007480 <HAL_UART_RxCpltCallback+0x88>)
 800741c:	6013      	str	r3, [r2, #0]
		if(counter == 4){
 800741e:	4b18      	ldr	r3, [pc, #96]	; (8007480 <HAL_UART_RxCpltCallback+0x88>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2b04      	cmp	r3, #4
 8007424:	d121      	bne.n	800746a <HAL_UART_RxCpltCallback+0x72>
			uint8_t succesful = 1;
 8007426:	2301      	movs	r3, #1
 8007428:	73fb      	strb	r3, [r7, #15]
			for (int i = 1; i < 4; i++) if (buffer[0] != buffer[i]) succesful = 0;
 800742a:	2301      	movs	r3, #1
 800742c:	60bb      	str	r3, [r7, #8]
 800742e:	e00c      	b.n	800744a <HAL_UART_RxCpltCallback+0x52>
 8007430:	4b15      	ldr	r3, [pc, #84]	; (8007488 <HAL_UART_RxCpltCallback+0x90>)
 8007432:	781a      	ldrb	r2, [r3, #0]
 8007434:	4914      	ldr	r1, [pc, #80]	; (8007488 <HAL_UART_RxCpltCallback+0x90>)
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	440b      	add	r3, r1
 800743a:	781b      	ldrb	r3, [r3, #0]
 800743c:	429a      	cmp	r2, r3
 800743e:	d001      	beq.n	8007444 <HAL_UART_RxCpltCallback+0x4c>
 8007440:	2300      	movs	r3, #0
 8007442:	73fb      	strb	r3, [r7, #15]
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	3301      	adds	r3, #1
 8007448:	60bb      	str	r3, [r7, #8]
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	2b03      	cmp	r3, #3
 800744e:	ddef      	ble.n	8007430 <HAL_UART_RxCpltCallback+0x38>
			counter = 0;
 8007450:	4b0b      	ldr	r3, [pc, #44]	; (8007480 <HAL_UART_RxCpltCallback+0x88>)
 8007452:	2200      	movs	r2, #0
 8007454:	601a      	str	r2, [r3, #0]
			if (succesful) {
 8007456:	7bfb      	ldrb	r3, [r7, #15]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d006      	beq.n	800746a <HAL_UART_RxCpltCallback+0x72>
				new_command = true;
 800745c:	4b0b      	ldr	r3, [pc, #44]	; (800748c <HAL_UART_RxCpltCallback+0x94>)
 800745e:	2201      	movs	r2, #1
 8007460:	701a      	strb	r2, [r3, #0]
				local_command = local_command_rx;
 8007462:	4b08      	ldr	r3, [pc, #32]	; (8007484 <HAL_UART_RxCpltCallback+0x8c>)
 8007464:	781a      	ldrb	r2, [r3, #0]
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_UART_RxCpltCallback+0x98>)
 8007468:	701a      	strb	r2, [r3, #0]
			}
		}

		HAL_UART_Receive_IT(huart, (uint8_t*)&local_command_rx, 1);
 800746a:	2201      	movs	r2, #1
 800746c:	4905      	ldr	r1, [pc, #20]	; (8007484 <HAL_UART_RxCpltCallback+0x8c>)
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f006 fb48 	bl	800db04 <HAL_UART_Receive_IT>
	}
}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	20009718 	.word	0x20009718
 8007480:	20000330 	.word	0x20000330
 8007484:	2001c6d9 	.word	0x2001c6d9
 8007488:	20000334 	.word	0x20000334
 800748c:	2000032c 	.word	0x2000032c
 8007490:	2001c6d8 	.word	0x2001c6d8

08007494 <calculate_checksum>:

uint8_t calculate_checksum(telemetry_t *cnf){
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
	uint8_t cs=0;
 800749c:	2300      	movs	r3, #0
 800749e:	75fb      	strb	r3, [r7, #23]
	uint8_t *data;
	data = (uint8_t*) cnf;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	613b      	str	r3, [r7, #16]
	for(int i=0; i< sizeof(telemetry_t);i++){
 80074a4:	2300      	movs	r3, #0
 80074a6:	60fb      	str	r3, [r7, #12]
 80074a8:	e009      	b.n	80074be <calculate_checksum+0x2a>
		cs+=*data++;
 80074aa:	693b      	ldr	r3, [r7, #16]
 80074ac:	1c5a      	adds	r2, r3, #1
 80074ae:	613a      	str	r2, [r7, #16]
 80074b0:	781a      	ldrb	r2, [r3, #0]
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	4413      	add	r3, r2
 80074b6:	75fb      	strb	r3, [r7, #23]
	for(int i=0; i< sizeof(telemetry_t);i++){
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	3301      	adds	r3, #1
 80074bc:	60fb      	str	r3, [r7, #12]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2b57      	cmp	r3, #87	; 0x57
 80074c2:	d9f2      	bls.n	80074aa <calculate_checksum+0x16>
	}
	return cs;
 80074c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	371c      	adds	r7, #28
 80074ca:	46bd      	mov	sp, r7
 80074cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d0:	4770      	bx	lr
	...

080074d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80074d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800750c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80074d8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80074da:	e003      	b.n	80074e4 <LoopCopyDataInit>

080074dc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80074dc:	4b0c      	ldr	r3, [pc, #48]	; (8007510 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80074de:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80074e0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80074e2:	3104      	adds	r1, #4

080074e4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80074e4:	480b      	ldr	r0, [pc, #44]	; (8007514 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80074e6:	4b0c      	ldr	r3, [pc, #48]	; (8007518 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80074e8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80074ea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80074ec:	d3f6      	bcc.n	80074dc <CopyDataInit>
  ldr  r2, =_sbss
 80074ee:	4a0b      	ldr	r2, [pc, #44]	; (800751c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80074f0:	e002      	b.n	80074f8 <LoopFillZerobss>

080074f2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80074f2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80074f4:	f842 3b04 	str.w	r3, [r2], #4

080074f8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80074f8:	4b09      	ldr	r3, [pc, #36]	; (8007520 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80074fa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80074fc:	d3f9      	bcc.n	80074f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80074fe:	f7fe fb7b 	bl	8005bf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007502:	f012 fff1 	bl	801a4e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007506:	f7fc ff29 	bl	800435c <main>
  bx  lr    
 800750a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800750c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8007510:	0801d8e0 	.word	0x0801d8e0
  ldr  r0, =_sdata
 8007514:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007518:	200001fc 	.word	0x200001fc
  ldr  r2, =_sbss
 800751c:	200001fc 	.word	0x200001fc
  ldr  r3, = _ebss
 8007520:	2001e46c 	.word	0x2001e46c

08007524 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007524:	e7fe      	b.n	8007524 <ADC_IRQHandler>

08007526 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800752a:	2003      	movs	r0, #3
 800752c:	f000 fd57 	bl	8007fde <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007530:	2000      	movs	r0, #0
 8007532:	f7fe fa19 	bl	8005968 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8007536:	f7fd fd09 	bl	8004f4c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	bd80      	pop	{r7, pc}

08007540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007540:	b480      	push	{r7}
 8007542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007544:	4b06      	ldr	r3, [pc, #24]	; (8007560 <HAL_IncTick+0x20>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	4b06      	ldr	r3, [pc, #24]	; (8007564 <HAL_IncTick+0x24>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4413      	add	r3, r2
 8007550:	4a04      	ldr	r2, [pc, #16]	; (8007564 <HAL_IncTick+0x24>)
 8007552:	6013      	str	r3, [r2, #0]
}
 8007554:	bf00      	nop
 8007556:	46bd      	mov	sp, r7
 8007558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	20000008 	.word	0x20000008
 8007564:	2001c6e4 	.word	0x2001c6e4

08007568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
  return uwTick;
 800756c:	4b03      	ldr	r3, [pc, #12]	; (800757c <HAL_GetTick+0x14>)
 800756e:	681b      	ldr	r3, [r3, #0]
}
 8007570:	4618      	mov	r0, r3
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	2001c6e4 	.word	0x2001c6e4

08007580 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007588:	f7ff ffee 	bl	8007568 <HAL_GetTick>
 800758c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007598:	d005      	beq.n	80075a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800759a:	4b09      	ldr	r3, [pc, #36]	; (80075c0 <HAL_Delay+0x40>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	461a      	mov	r2, r3
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	4413      	add	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80075a6:	bf00      	nop
 80075a8:	f7ff ffde 	bl	8007568 <HAL_GetTick>
 80075ac:	4602      	mov	r2, r0
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	1ad3      	subs	r3, r2, r3
 80075b2:	68fa      	ldr	r2, [r7, #12]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d8f7      	bhi.n	80075a8 <HAL_Delay+0x28>
  {
  }
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000008 	.word	0x20000008

080075c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d101      	bne.n	80075da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e031      	b.n	800763e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d109      	bne.n	80075f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7fd fcda 	bl	8004f9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2200      	movs	r2, #0
 80075f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075fa:	f003 0310 	and.w	r3, r3, #16
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d116      	bne.n	8007630 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007606:	4b10      	ldr	r3, [pc, #64]	; (8007648 <HAL_ADC_Init+0x84>)
 8007608:	4013      	ands	r3, r2
 800760a:	f043 0202 	orr.w	r2, r3, #2
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 faba 	bl	8007b8c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2200      	movs	r2, #0
 800761c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007622:	f023 0303 	bic.w	r3, r3, #3
 8007626:	f043 0201 	orr.w	r2, r3, #1
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	641a      	str	r2, [r3, #64]	; 0x40
 800762e:	e001      	b.n	8007634 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007630:	2301      	movs	r3, #1
 8007632:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800763c:	7bfb      	ldrb	r3, [r7, #15]
}
 800763e:	4618      	mov	r0, r3
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	ffffeefd 	.word	0xffffeefd

0800764c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8007658:	2300      	movs	r3, #0
 800765a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007662:	2b01      	cmp	r3, #1
 8007664:	d101      	bne.n	800766a <HAL_ADC_Start_DMA+0x1e>
 8007666:	2302      	movs	r3, #2
 8007668:	e0c7      	b.n	80077fa <HAL_ADC_Start_DMA+0x1ae>
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 0301 	and.w	r3, r3, #1
 800767c:	2b01      	cmp	r3, #1
 800767e:	d018      	beq.n	80076b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	689a      	ldr	r2, [r3, #8]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f042 0201 	orr.w	r2, r2, #1
 800768e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8007690:	4b5c      	ldr	r3, [pc, #368]	; (8007804 <HAL_ADC_Start_DMA+0x1b8>)
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	4a5c      	ldr	r2, [pc, #368]	; (8007808 <HAL_ADC_Start_DMA+0x1bc>)
 8007696:	fba2 2303 	umull	r2, r3, r2, r3
 800769a:	0c9a      	lsrs	r2, r3, #18
 800769c:	4613      	mov	r3, r2
 800769e:	005b      	lsls	r3, r3, #1
 80076a0:	4413      	add	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80076a4:	e002      	b.n	80076ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	3b01      	subs	r3, #1
 80076aa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d1f9      	bne.n	80076a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	689b      	ldr	r3, [r3, #8]
 80076b8:	f003 0301 	and.w	r3, r3, #1
 80076bc:	2b01      	cmp	r3, #1
 80076be:	f040 809b 	bne.w	80077f8 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076c6:	4b51      	ldr	r3, [pc, #324]	; (800780c <HAL_ADC_Start_DMA+0x1c0>)
 80076c8:	4013      	ands	r3, r2
 80076ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d007      	beq.n	80076f0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076fc:	d106      	bne.n	800770c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f023 0206 	bic.w	r2, r3, #6
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	645a      	str	r2, [r3, #68]	; 0x44
 800770a:	e002      	b.n	8007712 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2200      	movs	r2, #0
 8007710:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	4a3c      	ldr	r2, [pc, #240]	; (8007810 <HAL_ADC_Start_DMA+0x1c4>)
 8007720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	4a3b      	ldr	r2, [pc, #236]	; (8007814 <HAL_ADC_Start_DMA+0x1c8>)
 8007728:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	4a3a      	ldr	r2, [pc, #232]	; (8007818 <HAL_ADC_Start_DMA+0x1cc>)
 8007730:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800773a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800774a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800775a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	334c      	adds	r3, #76	; 0x4c
 8007766:	4619      	mov	r1, r3
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f000 fd1a 	bl	80081a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8007770:	4b2a      	ldr	r3, [pc, #168]	; (800781c <HAL_ADC_Start_DMA+0x1d0>)
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	2b00      	cmp	r3, #0
 800777a:	d10f      	bne.n	800779c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d136      	bne.n	80077f8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	689a      	ldr	r2, [r3, #8]
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007798:	609a      	str	r2, [r3, #8]
 800779a:	e02d      	b.n	80077f8 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1f      	ldr	r2, [pc, #124]	; (8007820 <HAL_ADC_Start_DMA+0x1d4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d10e      	bne.n	80077c4 <HAL_ADC_Start_DMA+0x178>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d107      	bne.n	80077c4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	689a      	ldr	r2, [r3, #8]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077c2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80077c4:	4b15      	ldr	r3, [pc, #84]	; (800781c <HAL_ADC_Start_DMA+0x1d0>)
 80077c6:	685b      	ldr	r3, [r3, #4]
 80077c8:	f003 0310 	and.w	r3, r3, #16
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d113      	bne.n	80077f8 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a13      	ldr	r2, [pc, #76]	; (8007824 <HAL_ADC_Start_DMA+0x1d8>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d10e      	bne.n	80077f8 <HAL_ADC_Start_DMA+0x1ac>
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d107      	bne.n	80077f8 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	689a      	ldr	r2, [r3, #8]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077f6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80077f8:	2300      	movs	r3, #0
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3718      	adds	r7, #24
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	20000000 	.word	0x20000000
 8007808:	431bde83 	.word	0x431bde83
 800780c:	fffff8fe 	.word	0xfffff8fe
 8007810:	08007d81 	.word	0x08007d81
 8007814:	08007e3b 	.word	0x08007e3b
 8007818:	08007e57 	.word	0x08007e57
 800781c:	40012300 	.word	0x40012300
 8007820:	40012000 	.word	0x40012000
 8007824:	40012200 	.word	0x40012200

08007828 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007830:	2300      	movs	r3, #0
 8007832:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800783a:	2b01      	cmp	r3, #1
 800783c:	d101      	bne.n	8007842 <HAL_ADC_Stop_DMA+0x1a>
 800783e:	2302      	movs	r3, #2
 8007840:	e036      	b.n	80078b0 <HAL_ADC_Stop_DMA+0x88>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2201      	movs	r2, #1
 8007846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	689a      	ldr	r2, [r3, #8]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f022 0201 	bic.w	r2, r2, #1
 8007858:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 0301 	and.w	r3, r3, #1
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11e      	bne.n	80078a6 <HAL_ADC_Stop_DMA+0x7e>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689a      	ldr	r2, [r3, #8]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007876:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787c:	4618      	mov	r0, r3
 800787e:	f000 fcf1 	bl	8008264 <HAL_DMA_Abort>
 8007882:	4603      	mov	r3, r0
 8007884:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8007894:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800789a:	4b07      	ldr	r3, [pc, #28]	; (80078b8 <HAL_ADC_Stop_DMA+0x90>)
 800789c:	4013      	ands	r3, r2
 800789e:	f043 0201 	orr.w	r2, r3, #1
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80078ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	3710      	adds	r7, #16
 80078b4:	46bd      	mov	sp, r7
 80078b6:	bd80      	pop	{r7, pc}
 80078b8:	ffffeefe 	.word	0xffffeefe

080078bc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078bc:	b480      	push	{r7}
 80078be:	b083      	sub	sp, #12
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80078c4:	bf00      	nop
 80078c6:	370c      	adds	r7, #12
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80078ec:	bf00      	nop
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b085      	sub	sp, #20
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8007902:	2300      	movs	r3, #0
 8007904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800790c:	2b01      	cmp	r3, #1
 800790e:	d101      	bne.n	8007914 <HAL_ADC_ConfigChannel+0x1c>
 8007910:	2302      	movs	r3, #2
 8007912:	e12a      	b.n	8007b6a <HAL_ADC_ConfigChannel+0x272>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b09      	cmp	r3, #9
 8007922:	d93a      	bls.n	800799a <HAL_ADC_ConfigChannel+0xa2>
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800792c:	d035      	beq.n	800799a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68d9      	ldr	r1, [r3, #12]
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	b29b      	uxth	r3, r3
 800793a:	461a      	mov	r2, r3
 800793c:	4613      	mov	r3, r2
 800793e:	005b      	lsls	r3, r3, #1
 8007940:	4413      	add	r3, r2
 8007942:	3b1e      	subs	r3, #30
 8007944:	2207      	movs	r2, #7
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	43da      	mvns	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	400a      	ands	r2, r1
 8007952:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a87      	ldr	r2, [pc, #540]	; (8007b78 <HAL_ADC_ConfigChannel+0x280>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d10a      	bne.n	8007974 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	68d9      	ldr	r1, [r3, #12]
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	689b      	ldr	r3, [r3, #8]
 8007968:	061a      	lsls	r2, r3, #24
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	430a      	orrs	r2, r1
 8007970:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007972:	e035      	b.n	80079e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	68d9      	ldr	r1, [r3, #12]
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	689a      	ldr	r2, [r3, #8]
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	b29b      	uxth	r3, r3
 8007984:	4618      	mov	r0, r3
 8007986:	4603      	mov	r3, r0
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	4403      	add	r3, r0
 800798c:	3b1e      	subs	r3, #30
 800798e:	409a      	lsls	r2, r3
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	430a      	orrs	r2, r1
 8007996:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007998:	e022      	b.n	80079e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	6919      	ldr	r1, [r3, #16]
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	b29b      	uxth	r3, r3
 80079a6:	461a      	mov	r2, r3
 80079a8:	4613      	mov	r3, r2
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	2207      	movs	r2, #7
 80079b0:	fa02 f303 	lsl.w	r3, r2, r3
 80079b4:	43da      	mvns	r2, r3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	400a      	ands	r2, r1
 80079bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	6919      	ldr	r1, [r3, #16]
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	689a      	ldr	r2, [r3, #8]
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	4618      	mov	r0, r3
 80079d0:	4603      	mov	r3, r0
 80079d2:	005b      	lsls	r3, r3, #1
 80079d4:	4403      	add	r3, r0
 80079d6:	409a      	lsls	r2, r3
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	430a      	orrs	r2, r1
 80079de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	2b06      	cmp	r3, #6
 80079e6:	d824      	bhi.n	8007a32 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	685a      	ldr	r2, [r3, #4]
 80079f2:	4613      	mov	r3, r2
 80079f4:	009b      	lsls	r3, r3, #2
 80079f6:	4413      	add	r3, r2
 80079f8:	3b05      	subs	r3, #5
 80079fa:	221f      	movs	r2, #31
 80079fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007a00:	43da      	mvns	r2, r3
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	400a      	ands	r2, r1
 8007a08:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	b29b      	uxth	r3, r3
 8007a16:	4618      	mov	r0, r3
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	4413      	add	r3, r2
 8007a22:	3b05      	subs	r3, #5
 8007a24:	fa00 f203 	lsl.w	r2, r0, r3
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8007a30:	e04c      	b.n	8007acc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	2b0c      	cmp	r3, #12
 8007a38:	d824      	bhi.n	8007a84 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	4613      	mov	r3, r2
 8007a46:	009b      	lsls	r3, r3, #2
 8007a48:	4413      	add	r3, r2
 8007a4a:	3b23      	subs	r3, #35	; 0x23
 8007a4c:	221f      	movs	r2, #31
 8007a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a52:	43da      	mvns	r2, r3
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	400a      	ands	r2, r1
 8007a5a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	4618      	mov	r0, r3
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685a      	ldr	r2, [r3, #4]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	009b      	lsls	r3, r3, #2
 8007a72:	4413      	add	r3, r2
 8007a74:	3b23      	subs	r3, #35	; 0x23
 8007a76:	fa00 f203 	lsl.w	r2, r0, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	631a      	str	r2, [r3, #48]	; 0x30
 8007a82:	e023      	b.n	8007acc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	685a      	ldr	r2, [r3, #4]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	3b41      	subs	r3, #65	; 0x41
 8007a96:	221f      	movs	r2, #31
 8007a98:	fa02 f303 	lsl.w	r3, r2, r3
 8007a9c:	43da      	mvns	r2, r3
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	400a      	ands	r2, r1
 8007aa4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	b29b      	uxth	r3, r3
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	685a      	ldr	r2, [r3, #4]
 8007ab8:	4613      	mov	r3, r2
 8007aba:	009b      	lsls	r3, r3, #2
 8007abc:	4413      	add	r3, r2
 8007abe:	3b41      	subs	r3, #65	; 0x41
 8007ac0:	fa00 f203 	lsl.w	r2, r0, r3
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	430a      	orrs	r2, r1
 8007aca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a2a      	ldr	r2, [pc, #168]	; (8007b7c <HAL_ADC_ConfigChannel+0x284>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d10a      	bne.n	8007aec <HAL_ADC_ConfigChannel+0x1f4>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ade:	d105      	bne.n	8007aec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8007ae0:	4b27      	ldr	r3, [pc, #156]	; (8007b80 <HAL_ADC_ConfigChannel+0x288>)
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	4a26      	ldr	r2, [pc, #152]	; (8007b80 <HAL_ADC_ConfigChannel+0x288>)
 8007ae6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8007aea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	4a22      	ldr	r2, [pc, #136]	; (8007b7c <HAL_ADC_ConfigChannel+0x284>)
 8007af2:	4293      	cmp	r3, r2
 8007af4:	d109      	bne.n	8007b0a <HAL_ADC_ConfigChannel+0x212>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b12      	cmp	r3, #18
 8007afc:	d105      	bne.n	8007b0a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8007afe:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <HAL_ADC_ConfigChannel+0x288>)
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	4a1f      	ldr	r2, [pc, #124]	; (8007b80 <HAL_ADC_ConfigChannel+0x288>)
 8007b04:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b08:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a1b      	ldr	r2, [pc, #108]	; (8007b7c <HAL_ADC_ConfigChannel+0x284>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d125      	bne.n	8007b60 <HAL_ADC_ConfigChannel+0x268>
 8007b14:	683b      	ldr	r3, [r7, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a17      	ldr	r2, [pc, #92]	; (8007b78 <HAL_ADC_ConfigChannel+0x280>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d003      	beq.n	8007b26 <HAL_ADC_ConfigChannel+0x22e>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	2b11      	cmp	r3, #17
 8007b24:	d11c      	bne.n	8007b60 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8007b26:	4b16      	ldr	r3, [pc, #88]	; (8007b80 <HAL_ADC_ConfigChannel+0x288>)
 8007b28:	685b      	ldr	r3, [r3, #4]
 8007b2a:	4a15      	ldr	r2, [pc, #84]	; (8007b80 <HAL_ADC_ConfigChannel+0x288>)
 8007b2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b30:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a10      	ldr	r2, [pc, #64]	; (8007b78 <HAL_ADC_ConfigChannel+0x280>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d111      	bne.n	8007b60 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8007b3c:	4b11      	ldr	r3, [pc, #68]	; (8007b84 <HAL_ADC_ConfigChannel+0x28c>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a11      	ldr	r2, [pc, #68]	; (8007b88 <HAL_ADC_ConfigChannel+0x290>)
 8007b42:	fba2 2303 	umull	r2, r3, r2, r3
 8007b46:	0c9a      	lsrs	r2, r3, #18
 8007b48:	4613      	mov	r3, r2
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	4413      	add	r3, r2
 8007b4e:	005b      	lsls	r3, r3, #1
 8007b50:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007b52:	e002      	b.n	8007b5a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	3b01      	subs	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f9      	bne.n	8007b54 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	10000012 	.word	0x10000012
 8007b7c:	40012000 	.word	0x40012000
 8007b80:	40012300 	.word	0x40012300
 8007b84:	20000000 	.word	0x20000000
 8007b88:	431bde83 	.word	0x431bde83

08007b8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8007b94:	4b78      	ldr	r3, [pc, #480]	; (8007d78 <ADC_Init+0x1ec>)
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	4a77      	ldr	r2, [pc, #476]	; (8007d78 <ADC_Init+0x1ec>)
 8007b9a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8007b9e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8007ba0:	4b75      	ldr	r3, [pc, #468]	; (8007d78 <ADC_Init+0x1ec>)
 8007ba2:	685a      	ldr	r2, [r3, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	4973      	ldr	r1, [pc, #460]	; (8007d78 <ADC_Init+0x1ec>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	685a      	ldr	r2, [r3, #4]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bbc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6859      	ldr	r1, [r3, #4]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	021a      	lsls	r2, r3, #8
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007be0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6859      	ldr	r1, [r3, #4]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	689a      	ldr	r2, [r3, #8]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c02:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6899      	ldr	r1, [r3, #8]
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c1a:	4a58      	ldr	r2, [pc, #352]	; (8007d7c <ADC_Init+0x1f0>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d022      	beq.n	8007c66 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689a      	ldr	r2, [r3, #8]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c2e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	6899      	ldr	r1, [r3, #8]
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	430a      	orrs	r2, r1
 8007c40:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689a      	ldr	r2, [r3, #8]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c50:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	6899      	ldr	r1, [r3, #8]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	609a      	str	r2, [r3, #8]
 8007c64:	e00f      	b.n	8007c86 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	689a      	ldr	r2, [r3, #8]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007c74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007c84:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f022 0202 	bic.w	r2, r2, #2
 8007c94:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	6899      	ldr	r1, [r3, #8]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	005a      	lsls	r2, r3, #1
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d01b      	beq.n	8007cec <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	685a      	ldr	r2, [r3, #4]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cc2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685a      	ldr	r2, [r3, #4]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007cd2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6859      	ldr	r1, [r3, #4]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	3b01      	subs	r3, #1
 8007ce0:	035a      	lsls	r2, r3, #13
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
 8007cea:	e007      	b.n	8007cfc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685a      	ldr	r2, [r3, #4]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cfa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	3b01      	subs	r3, #1
 8007d18:	051a      	lsls	r2, r3, #20
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	430a      	orrs	r2, r1
 8007d20:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007d30:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	6899      	ldr	r1, [r3, #8]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007d3e:	025a      	lsls	r2, r3, #9
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	430a      	orrs	r2, r1
 8007d46:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	689a      	ldr	r2, [r3, #8]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6899      	ldr	r1, [r3, #8]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	695b      	ldr	r3, [r3, #20]
 8007d62:	029a      	lsls	r2, r3, #10
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	609a      	str	r2, [r3, #8]
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr
 8007d78:	40012300 	.word	0x40012300
 8007d7c:	0f000001 	.word	0x0f000001

08007d80 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d13c      	bne.n	8007e14 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	689b      	ldr	r3, [r3, #8]
 8007dac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d12b      	bne.n	8007e0c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d127      	bne.n	8007e0c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d119      	bne.n	8007e0c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	685a      	ldr	r2, [r3, #4]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f022 0220 	bic.w	r2, r2, #32
 8007de6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d105      	bne.n	8007e0c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f043 0201 	orr.w	r2, r3, #1
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff fd55 	bl	80078bc <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007e12:	e00e      	b.n	8007e32 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e18:	f003 0310 	and.w	r3, r3, #16
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff fd5f 	bl	80078e4 <HAL_ADC_ErrorCallback>
}
 8007e26:	e004      	b.n	8007e32 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	4798      	blx	r3
}
 8007e32:	bf00      	nop
 8007e34:	3710      	adds	r7, #16
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}

08007e3a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007e3a:	b580      	push	{r7, lr}
 8007e3c:	b084      	sub	sp, #16
 8007e3e:	af00      	add	r7, sp, #0
 8007e40:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e46:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f7ff fd41 	bl	80078d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e4e:	bf00      	nop
 8007e50:	3710      	adds	r7, #16
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b084      	sub	sp, #16
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e62:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2240      	movs	r2, #64	; 0x40
 8007e68:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6e:	f043 0204 	orr.w	r2, r3, #4
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff fd34 	bl	80078e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007e7c:	bf00      	nop
 8007e7e:	3710      	adds	r7, #16
 8007e80:	46bd      	mov	sp, r7
 8007e82:	bd80      	pop	{r7, pc}

08007e84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f003 0307 	and.w	r3, r3, #7
 8007e92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007e94:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8007e96:	68db      	ldr	r3, [r3, #12]
 8007e98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007e9a:	68ba      	ldr	r2, [r7, #8]
 8007e9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <__NVIC_SetPriorityGrouping+0x44>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007eb2:	4a04      	ldr	r2, [pc, #16]	; (8007ec4 <__NVIC_SetPriorityGrouping+0x40>)
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	60d3      	str	r3, [r2, #12]
}
 8007eb8:	bf00      	nop
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	e000ed00 	.word	0xe000ed00
 8007ec8:	05fa0000 	.word	0x05fa0000

08007ecc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ed0:	4b04      	ldr	r3, [pc, #16]	; (8007ee4 <__NVIC_GetPriorityGrouping+0x18>)
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	0a1b      	lsrs	r3, r3, #8
 8007ed6:	f003 0307 	and.w	r3, r3, #7
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr
 8007ee4:	e000ed00 	.word	0xe000ed00

08007ee8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	4603      	mov	r3, r0
 8007ef0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	db0b      	blt.n	8007f12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	f003 021f 	and.w	r2, r3, #31
 8007f00:	4907      	ldr	r1, [pc, #28]	; (8007f20 <__NVIC_EnableIRQ+0x38>)
 8007f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f06:	095b      	lsrs	r3, r3, #5
 8007f08:	2001      	movs	r0, #1
 8007f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8007f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
 8007f1e:	bf00      	nop
 8007f20:	e000e100 	.word	0xe000e100

08007f24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	db0a      	blt.n	8007f4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	b2da      	uxtb	r2, r3
 8007f3c:	490c      	ldr	r1, [pc, #48]	; (8007f70 <__NVIC_SetPriority+0x4c>)
 8007f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f42:	0112      	lsls	r2, r2, #4
 8007f44:	b2d2      	uxtb	r2, r2
 8007f46:	440b      	add	r3, r1
 8007f48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007f4c:	e00a      	b.n	8007f64 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	4908      	ldr	r1, [pc, #32]	; (8007f74 <__NVIC_SetPriority+0x50>)
 8007f54:	79fb      	ldrb	r3, [r7, #7]
 8007f56:	f003 030f 	and.w	r3, r3, #15
 8007f5a:	3b04      	subs	r3, #4
 8007f5c:	0112      	lsls	r2, r2, #4
 8007f5e:	b2d2      	uxtb	r2, r2
 8007f60:	440b      	add	r3, r1
 8007f62:	761a      	strb	r2, [r3, #24]
}
 8007f64:	bf00      	nop
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6e:	4770      	bx	lr
 8007f70:	e000e100 	.word	0xe000e100
 8007f74:	e000ed00 	.word	0xe000ed00

08007f78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b089      	sub	sp, #36	; 0x24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f003 0307 	and.w	r3, r3, #7
 8007f8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007f8c:	69fb      	ldr	r3, [r7, #28]
 8007f8e:	f1c3 0307 	rsb	r3, r3, #7
 8007f92:	2b04      	cmp	r3, #4
 8007f94:	bf28      	it	cs
 8007f96:	2304      	movcs	r3, #4
 8007f98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007f9a:	69fb      	ldr	r3, [r7, #28]
 8007f9c:	3304      	adds	r3, #4
 8007f9e:	2b06      	cmp	r3, #6
 8007fa0:	d902      	bls.n	8007fa8 <NVIC_EncodePriority+0x30>
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	3b03      	subs	r3, #3
 8007fa6:	e000      	b.n	8007faa <NVIC_EncodePriority+0x32>
 8007fa8:	2300      	movs	r3, #0
 8007faa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fac:	f04f 32ff 	mov.w	r2, #4294967295
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb6:	43da      	mvns	r2, r3
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	401a      	ands	r2, r3
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8007fca:	43d9      	mvns	r1, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007fd0:	4313      	orrs	r3, r2
         );
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	3724      	adds	r7, #36	; 0x24
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr

08007fde <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007fde:	b580      	push	{r7, lr}
 8007fe0:	b082      	sub	sp, #8
 8007fe2:	af00      	add	r7, sp, #0
 8007fe4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7ff ff4c 	bl	8007e84 <__NVIC_SetPriorityGrouping>
}
 8007fec:	bf00      	nop
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b086      	sub	sp, #24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008002:	2300      	movs	r3, #0
 8008004:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008006:	f7ff ff61 	bl	8007ecc <__NVIC_GetPriorityGrouping>
 800800a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	6978      	ldr	r0, [r7, #20]
 8008012:	f7ff ffb1 	bl	8007f78 <NVIC_EncodePriority>
 8008016:	4602      	mov	r2, r0
 8008018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800801c:	4611      	mov	r1, r2
 800801e:	4618      	mov	r0, r3
 8008020:	f7ff ff80 	bl	8007f24 <__NVIC_SetPriority>
}
 8008024:	bf00      	nop
 8008026:	3718      	adds	r7, #24
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b082      	sub	sp, #8
 8008030:	af00      	add	r7, sp, #0
 8008032:	4603      	mov	r3, r0
 8008034:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008036:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800803a:	4618      	mov	r0, r3
 800803c:	f7ff ff54 	bl	8007ee8 <__NVIC_EnableIRQ>
}
 8008040:	bf00      	nop
 8008042:	3708      	adds	r7, #8
 8008044:	46bd      	mov	sp, r7
 8008046:	bd80      	pop	{r7, pc}

08008048 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b086      	sub	sp, #24
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8008050:	2300      	movs	r3, #0
 8008052:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008054:	f7ff fa88 	bl	8007568 <HAL_GetTick>
 8008058:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e099      	b.n	8008198 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 0201 	bic.w	r2, r2, #1
 8008082:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008084:	e00f      	b.n	80080a6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008086:	f7ff fa6f 	bl	8007568 <HAL_GetTick>
 800808a:	4602      	mov	r2, r0
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	1ad3      	subs	r3, r2, r3
 8008090:	2b05      	cmp	r3, #5
 8008092:	d908      	bls.n	80080a6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2220      	movs	r2, #32
 8008098:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2203      	movs	r2, #3
 800809e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80080a2:	2303      	movs	r3, #3
 80080a4:	e078      	b.n	8008198 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f003 0301 	and.w	r3, r3, #1
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1e8      	bne.n	8008086 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	4b38      	ldr	r3, [pc, #224]	; (80081a0 <HAL_DMA_Init+0x158>)
 80080c0:	4013      	ands	r3, r2
 80080c2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	689b      	ldr	r3, [r3, #8]
 80080cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	691b      	ldr	r3, [r3, #16]
 80080d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80080de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80080ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	6a1b      	ldr	r3, [r3, #32]
 80080f0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4313      	orrs	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080fc:	2b04      	cmp	r3, #4
 80080fe:	d107      	bne.n	8008110 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008108:	4313      	orrs	r3, r2
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	697a      	ldr	r2, [r7, #20]
 8008116:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008120:	697b      	ldr	r3, [r7, #20]
 8008122:	f023 0307 	bic.w	r3, r3, #7
 8008126:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	4313      	orrs	r3, r2
 8008130:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	2b04      	cmp	r3, #4
 8008138:	d117      	bne.n	800816a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	4313      	orrs	r3, r2
 8008142:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008148:	2b00      	cmp	r3, #0
 800814a:	d00e      	beq.n	800816a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 fb15 	bl	800877c <DMA_CheckFifoParam>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d008      	beq.n	800816a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2240      	movs	r2, #64	; 0x40
 800815c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008166:	2301      	movs	r3, #1
 8008168:	e016      	b.n	8008198 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	697a      	ldr	r2, [r7, #20]
 8008170:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008172:	6878      	ldr	r0, [r7, #4]
 8008174:	f000 facc 	bl	8008710 <DMA_CalcBaseAndBitshift>
 8008178:	4603      	mov	r3, r0
 800817a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008180:	223f      	movs	r2, #63	; 0x3f
 8008182:	409a      	lsls	r2, r3
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008196:	2300      	movs	r3, #0
}
 8008198:	4618      	mov	r0, r3
 800819a:	3718      	adds	r7, #24
 800819c:	46bd      	mov	sp, r7
 800819e:	bd80      	pop	{r7, pc}
 80081a0:	f010803f 	.word	0xf010803f

080081a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b086      	sub	sp, #24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	60f8      	str	r0, [r7, #12]
 80081ac:	60b9      	str	r1, [r7, #8]
 80081ae:	607a      	str	r2, [r7, #4]
 80081b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d101      	bne.n	80081ca <HAL_DMA_Start_IT+0x26>
 80081c6:	2302      	movs	r3, #2
 80081c8:	e048      	b.n	800825c <HAL_DMA_Start_IT+0xb8>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d137      	bne.n	800824e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2202      	movs	r2, #2
 80081e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	68b9      	ldr	r1, [r7, #8]
 80081f2:	68f8      	ldr	r0, [r7, #12]
 80081f4:	f000 fa5e 	bl	80086b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081fc:	223f      	movs	r2, #63	; 0x3f
 80081fe:	409a      	lsls	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	681a      	ldr	r2, [r3, #0]
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f042 0216 	orr.w	r2, r2, #22
 8008212:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	695a      	ldr	r2, [r3, #20]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008222:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008228:	2b00      	cmp	r3, #0
 800822a:	d007      	beq.n	800823c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	681a      	ldr	r2, [r3, #0]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f042 0208 	orr.w	r2, r2, #8
 800823a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	681a      	ldr	r2, [r3, #0]
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f042 0201 	orr.w	r2, r2, #1
 800824a:	601a      	str	r2, [r3, #0]
 800824c:	e005      	b.n	800825a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2200      	movs	r2, #0
 8008252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008256:	2302      	movs	r3, #2
 8008258:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800825a:	7dfb      	ldrb	r3, [r7, #23]
}
 800825c:	4618      	mov	r0, r3
 800825e:	3718      	adds	r7, #24
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}

08008264 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b084      	sub	sp, #16
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008270:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8008272:	f7ff f979 	bl	8007568 <HAL_GetTick>
 8008276:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800827e:	b2db      	uxtb	r3, r3
 8008280:	2b02      	cmp	r3, #2
 8008282:	d008      	beq.n	8008296 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2280      	movs	r2, #128	; 0x80
 8008288:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2200      	movs	r2, #0
 800828e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e052      	b.n	800833c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	681a      	ldr	r2, [r3, #0]
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f022 0216 	bic.w	r2, r2, #22
 80082a4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	695a      	ldr	r2, [r3, #20]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082b4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d103      	bne.n	80082c6 <HAL_DMA_Abort+0x62>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d007      	beq.n	80082d6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	681a      	ldr	r2, [r3, #0]
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	f022 0208 	bic.w	r2, r2, #8
 80082d4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	681a      	ldr	r2, [r3, #0]
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f022 0201 	bic.w	r2, r2, #1
 80082e4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80082e6:	e013      	b.n	8008310 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80082e8:	f7ff f93e 	bl	8007568 <HAL_GetTick>
 80082ec:	4602      	mov	r2, r0
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	1ad3      	subs	r3, r2, r3
 80082f2:	2b05      	cmp	r3, #5
 80082f4:	d90c      	bls.n	8008310 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2220      	movs	r2, #32
 80082fa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2200      	movs	r2, #0
 8008300:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2203      	movs	r2, #3
 8008308:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800830c:	2303      	movs	r3, #3
 800830e:	e015      	b.n	800833c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	d1e4      	bne.n	80082e8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008322:	223f      	movs	r2, #63	; 0x3f
 8008324:	409a      	lsls	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2201      	movs	r2, #1
 8008336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800833a:	2300      	movs	r3, #0
}
 800833c:	4618      	mov	r0, r3
 800833e:	3710      	adds	r7, #16
 8008340:	46bd      	mov	sp, r7
 8008342:	bd80      	pop	{r7, pc}

08008344 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008352:	b2db      	uxtb	r3, r3
 8008354:	2b02      	cmp	r3, #2
 8008356:	d004      	beq.n	8008362 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2280      	movs	r2, #128	; 0x80
 800835c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e00c      	b.n	800837c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2205      	movs	r2, #5
 8008366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f022 0201 	bic.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b086      	sub	sp, #24
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8008394:	4b92      	ldr	r3, [pc, #584]	; (80085e0 <HAL_DMA_IRQHandler+0x258>)
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a92      	ldr	r2, [pc, #584]	; (80085e4 <HAL_DMA_IRQHandler+0x25c>)
 800839a:	fba2 2303 	umull	r2, r3, r2, r3
 800839e:	0a9b      	lsrs	r3, r3, #10
 80083a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80083a8:	693b      	ldr	r3, [r7, #16]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b2:	2208      	movs	r2, #8
 80083b4:	409a      	lsls	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	4013      	ands	r3, r2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d01a      	beq.n	80083f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0304 	and.w	r3, r3, #4
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d013      	beq.n	80083f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	681a      	ldr	r2, [r3, #0]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f022 0204 	bic.w	r2, r2, #4
 80083da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083e0:	2208      	movs	r2, #8
 80083e2:	409a      	lsls	r2, r3
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083ec:	f043 0201 	orr.w	r2, r3, #1
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083f8:	2201      	movs	r2, #1
 80083fa:	409a      	lsls	r2, r3
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	4013      	ands	r3, r2
 8008400:	2b00      	cmp	r3, #0
 8008402:	d012      	beq.n	800842a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	695b      	ldr	r3, [r3, #20]
 800840a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008416:	2201      	movs	r2, #1
 8008418:	409a      	lsls	r2, r3
 800841a:	693b      	ldr	r3, [r7, #16]
 800841c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008422:	f043 0202 	orr.w	r2, r3, #2
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800842e:	2204      	movs	r2, #4
 8008430:	409a      	lsls	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d012      	beq.n	8008460 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0302 	and.w	r3, r3, #2
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800844c:	2204      	movs	r2, #4
 800844e:	409a      	lsls	r2, r3
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008458:	f043 0204 	orr.w	r2, r3, #4
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008464:	2210      	movs	r2, #16
 8008466:	409a      	lsls	r2, r3
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	4013      	ands	r3, r2
 800846c:	2b00      	cmp	r3, #0
 800846e:	d043      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0308 	and.w	r3, r3, #8
 800847a:	2b00      	cmp	r3, #0
 800847c:	d03c      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008482:	2210      	movs	r2, #16
 8008484:	409a      	lsls	r2, r3
 8008486:	693b      	ldr	r3, [r7, #16]
 8008488:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008494:	2b00      	cmp	r3, #0
 8008496:	d018      	beq.n	80084ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d108      	bne.n	80084b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d024      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
 80084b6:	e01f      	b.n	80084f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01b      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	4798      	blx	r3
 80084c8:	e016      	b.n	80084f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d107      	bne.n	80084e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681a      	ldr	r2, [r3, #0]
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 0208 	bic.w	r2, r2, #8
 80084e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80084fc:	2220      	movs	r2, #32
 80084fe:	409a      	lsls	r2, r3
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4013      	ands	r3, r2
 8008504:	2b00      	cmp	r3, #0
 8008506:	f000 808e 	beq.w	8008626 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b00      	cmp	r3, #0
 8008516:	f000 8086 	beq.w	8008626 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851e:	2220      	movs	r2, #32
 8008520:	409a      	lsls	r2, r3
 8008522:	693b      	ldr	r3, [r7, #16]
 8008524:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b05      	cmp	r3, #5
 8008530:	d136      	bne.n	80085a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	681a      	ldr	r2, [r3, #0]
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f022 0216 	bic.w	r2, r2, #22
 8008540:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	695a      	ldr	r2, [r3, #20]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008550:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008556:	2b00      	cmp	r3, #0
 8008558:	d103      	bne.n	8008562 <HAL_DMA_IRQHandler+0x1da>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800855e:	2b00      	cmp	r3, #0
 8008560:	d007      	beq.n	8008572 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	681a      	ldr	r2, [r3, #0]
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f022 0208 	bic.w	r2, r2, #8
 8008570:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008576:	223f      	movs	r2, #63	; 0x3f
 8008578:	409a      	lsls	r2, r3
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	2201      	movs	r2, #1
 800858a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008592:	2b00      	cmp	r3, #0
 8008594:	d07d      	beq.n	8008692 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859a:	6878      	ldr	r0, [r7, #4]
 800859c:	4798      	blx	r3
        }
        return;
 800859e:	e078      	b.n	8008692 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d01c      	beq.n	80085e8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d108      	bne.n	80085ce <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d030      	beq.n	8008626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	4798      	blx	r3
 80085cc:	e02b      	b.n	8008626 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d027      	beq.n	8008626 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	4798      	blx	r3
 80085de:	e022      	b.n	8008626 <HAL_DMA_IRQHandler+0x29e>
 80085e0:	20000000 	.word	0x20000000
 80085e4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d10f      	bne.n	8008616 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	681a      	ldr	r2, [r3, #0]
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f022 0210 	bic.w	r2, r2, #16
 8008604:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2200      	movs	r2, #0
 800860a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800861a:	2b00      	cmp	r3, #0
 800861c:	d003      	beq.n	8008626 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800862a:	2b00      	cmp	r3, #0
 800862c:	d032      	beq.n	8008694 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008632:	f003 0301 	and.w	r3, r3, #1
 8008636:	2b00      	cmp	r3, #0
 8008638:	d022      	beq.n	8008680 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2205      	movs	r2, #5
 800863e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f022 0201 	bic.w	r2, r2, #1
 8008650:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	3301      	adds	r3, #1
 8008656:	60bb      	str	r3, [r7, #8]
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	429a      	cmp	r2, r3
 800865c:	d307      	bcc.n	800866e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0301 	and.w	r3, r3, #1
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1f2      	bne.n	8008652 <HAL_DMA_IRQHandler+0x2ca>
 800866c:	e000      	b.n	8008670 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800866e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008684:	2b00      	cmp	r3, #0
 8008686:	d005      	beq.n	8008694 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	4798      	blx	r3
 8008690:	e000      	b.n	8008694 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008692:	bf00      	nop
    }
  }
}
 8008694:	3718      	adds	r7, #24
 8008696:	46bd      	mov	sp, r7
 8008698:	bd80      	pop	{r7, pc}
 800869a:	bf00      	nop

0800869c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800869c:	b480      	push	{r7}
 800869e:	b083      	sub	sp, #12
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	370c      	adds	r7, #12
 80086ac:	46bd      	mov	sp, r7
 80086ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b2:	4770      	bx	lr

080086b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	60f8      	str	r0, [r7, #12]
 80086bc:	60b9      	str	r1, [r7, #8]
 80086be:	607a      	str	r2, [r7, #4]
 80086c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	681a      	ldr	r2, [r3, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80086d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	683a      	ldr	r2, [r7, #0]
 80086d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	2b40      	cmp	r3, #64	; 0x40
 80086e0:	d108      	bne.n	80086f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68ba      	ldr	r2, [r7, #8]
 80086f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80086f2:	e007      	b.n	8008704 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	68ba      	ldr	r2, [r7, #8]
 80086fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	60da      	str	r2, [r3, #12]
}
 8008704:	bf00      	nop
 8008706:	3714      	adds	r7, #20
 8008708:	46bd      	mov	sp, r7
 800870a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870e:	4770      	bx	lr

08008710 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	b2db      	uxtb	r3, r3
 800871e:	3b10      	subs	r3, #16
 8008720:	4a13      	ldr	r2, [pc, #76]	; (8008770 <DMA_CalcBaseAndBitshift+0x60>)
 8008722:	fba2 2303 	umull	r2, r3, r2, r3
 8008726:	091b      	lsrs	r3, r3, #4
 8008728:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800872a:	4a12      	ldr	r2, [pc, #72]	; (8008774 <DMA_CalcBaseAndBitshift+0x64>)
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	4413      	add	r3, r2
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2b03      	cmp	r3, #3
 800873c:	d908      	bls.n	8008750 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	461a      	mov	r2, r3
 8008744:	4b0c      	ldr	r3, [pc, #48]	; (8008778 <DMA_CalcBaseAndBitshift+0x68>)
 8008746:	4013      	ands	r3, r2
 8008748:	1d1a      	adds	r2, r3, #4
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	659a      	str	r2, [r3, #88]	; 0x58
 800874e:	e006      	b.n	800875e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	4b08      	ldr	r3, [pc, #32]	; (8008778 <DMA_CalcBaseAndBitshift+0x68>)
 8008758:	4013      	ands	r3, r2
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008762:	4618      	mov	r0, r3
 8008764:	3714      	adds	r7, #20
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	aaaaaaab 	.word	0xaaaaaaab
 8008774:	0801d72c 	.word	0x0801d72c
 8008778:	fffffc00 	.word	0xfffffc00

0800877c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008784:	2300      	movs	r3, #0
 8008786:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	699b      	ldr	r3, [r3, #24]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d11f      	bne.n	80087d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008796:	68bb      	ldr	r3, [r7, #8]
 8008798:	2b03      	cmp	r3, #3
 800879a:	d855      	bhi.n	8008848 <DMA_CheckFifoParam+0xcc>
 800879c:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <DMA_CheckFifoParam+0x28>)
 800879e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a2:	bf00      	nop
 80087a4:	080087b5 	.word	0x080087b5
 80087a8:	080087c7 	.word	0x080087c7
 80087ac:	080087b5 	.word	0x080087b5
 80087b0:	08008849 	.word	0x08008849
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d045      	beq.n	800884c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80087c0:	2301      	movs	r3, #1
 80087c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087c4:	e042      	b.n	800884c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087ce:	d13f      	bne.n	8008850 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80087d4:	e03c      	b.n	8008850 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087de:	d121      	bne.n	8008824 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2b03      	cmp	r3, #3
 80087e4:	d836      	bhi.n	8008854 <DMA_CheckFifoParam+0xd8>
 80087e6:	a201      	add	r2, pc, #4	; (adr r2, 80087ec <DMA_CheckFifoParam+0x70>)
 80087e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ec:	080087fd 	.word	0x080087fd
 80087f0:	08008803 	.word	0x08008803
 80087f4:	080087fd 	.word	0x080087fd
 80087f8:	08008815 	.word	0x08008815
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008800:	e02f      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008806:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d024      	beq.n	8008858 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008812:	e021      	b.n	8008858 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008818:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800881c:	d11e      	bne.n	800885c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008822:	e01b      	b.n	800885c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	2b02      	cmp	r3, #2
 8008828:	d902      	bls.n	8008830 <DMA_CheckFifoParam+0xb4>
 800882a:	2b03      	cmp	r3, #3
 800882c:	d003      	beq.n	8008836 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800882e:	e018      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	73fb      	strb	r3, [r7, #15]
      break;
 8008834:	e015      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d00e      	beq.n	8008860 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008842:	2301      	movs	r3, #1
 8008844:	73fb      	strb	r3, [r7, #15]
      break;
 8008846:	e00b      	b.n	8008860 <DMA_CheckFifoParam+0xe4>
      break;
 8008848:	bf00      	nop
 800884a:	e00a      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      break;
 800884c:	bf00      	nop
 800884e:	e008      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      break;
 8008850:	bf00      	nop
 8008852:	e006      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      break;
 8008854:	bf00      	nop
 8008856:	e004      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      break;
 8008858:	bf00      	nop
 800885a:	e002      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      break;   
 800885c:	bf00      	nop
 800885e:	e000      	b.n	8008862 <DMA_CheckFifoParam+0xe6>
      break;
 8008860:	bf00      	nop
    }
  } 
  
  return status; 
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3714      	adds	r7, #20
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008870:	b480      	push	{r7}
 8008872:	b089      	sub	sp, #36	; 0x24
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800887a:	2300      	movs	r3, #0
 800887c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800887e:	2300      	movs	r3, #0
 8008880:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8008882:	2300      	movs	r3, #0
 8008884:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8008886:	2300      	movs	r3, #0
 8008888:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800888a:	2300      	movs	r3, #0
 800888c:	61fb      	str	r3, [r7, #28]
 800888e:	e175      	b.n	8008b7c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008890:	2201      	movs	r2, #1
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	fa02 f303 	lsl.w	r3, r2, r3
 8008898:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800889a:	683b      	ldr	r3, [r7, #0]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	4013      	ands	r3, r2
 80088a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80088a4:	693a      	ldr	r2, [r7, #16]
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	f040 8164 	bne.w	8008b76 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d00b      	beq.n	80088ce <HAL_GPIO_Init+0x5e>
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	2b02      	cmp	r3, #2
 80088bc:	d007      	beq.n	80088ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80088c2:	2b11      	cmp	r3, #17
 80088c4:	d003      	beq.n	80088ce <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	685b      	ldr	r3, [r3, #4]
 80088ca:	2b12      	cmp	r3, #18
 80088cc:	d130      	bne.n	8008930 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	689b      	ldr	r3, [r3, #8]
 80088d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	005b      	lsls	r3, r3, #1
 80088d8:	2203      	movs	r2, #3
 80088da:	fa02 f303 	lsl.w	r3, r2, r3
 80088de:	43db      	mvns	r3, r3
 80088e0:	69ba      	ldr	r2, [r7, #24]
 80088e2:	4013      	ands	r3, r2
 80088e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	68da      	ldr	r2, [r3, #12]
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	005b      	lsls	r3, r3, #1
 80088ee:	fa02 f303 	lsl.w	r3, r2, r3
 80088f2:	69ba      	ldr	r2, [r7, #24]
 80088f4:	4313      	orrs	r3, r2
 80088f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	69ba      	ldr	r2, [r7, #24]
 80088fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008904:	2201      	movs	r2, #1
 8008906:	69fb      	ldr	r3, [r7, #28]
 8008908:	fa02 f303 	lsl.w	r3, r2, r3
 800890c:	43db      	mvns	r3, r3
 800890e:	69ba      	ldr	r2, [r7, #24]
 8008910:	4013      	ands	r3, r2
 8008912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8008914:	683b      	ldr	r3, [r7, #0]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	091b      	lsrs	r3, r3, #4
 800891a:	f003 0201 	and.w	r2, r3, #1
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	fa02 f303 	lsl.w	r3, r2, r3
 8008924:	69ba      	ldr	r2, [r7, #24]
 8008926:	4313      	orrs	r3, r2
 8008928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	69ba      	ldr	r2, [r7, #24]
 800892e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	68db      	ldr	r3, [r3, #12]
 8008934:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8008936:	69fb      	ldr	r3, [r7, #28]
 8008938:	005b      	lsls	r3, r3, #1
 800893a:	2203      	movs	r2, #3
 800893c:	fa02 f303 	lsl.w	r3, r2, r3
 8008940:	43db      	mvns	r3, r3
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	4013      	ands	r3, r2
 8008946:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	689a      	ldr	r2, [r3, #8]
 800894c:	69fb      	ldr	r3, [r7, #28]
 800894e:	005b      	lsls	r3, r3, #1
 8008950:	fa02 f303 	lsl.w	r3, r2, r3
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	4313      	orrs	r3, r2
 8008958:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	2b02      	cmp	r3, #2
 8008966:	d003      	beq.n	8008970 <HAL_GPIO_Init+0x100>
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	2b12      	cmp	r3, #18
 800896e:	d123      	bne.n	80089b8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	08da      	lsrs	r2, r3, #3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	3208      	adds	r2, #8
 8008978:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800897c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	220f      	movs	r2, #15
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	43db      	mvns	r3, r3
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	4013      	ands	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	691a      	ldr	r2, [r3, #16]
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	f003 0307 	and.w	r3, r3, #7
 800899e:	009b      	lsls	r3, r3, #2
 80089a0:	fa02 f303 	lsl.w	r3, r2, r3
 80089a4:	69ba      	ldr	r2, [r7, #24]
 80089a6:	4313      	orrs	r3, r2
 80089a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	08da      	lsrs	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3208      	adds	r2, #8
 80089b2:	69b9      	ldr	r1, [r7, #24]
 80089b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	2203      	movs	r2, #3
 80089c4:	fa02 f303 	lsl.w	r3, r2, r3
 80089c8:	43db      	mvns	r3, r3
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	4013      	ands	r3, r2
 80089ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80089d0:	683b      	ldr	r3, [r7, #0]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f003 0203 	and.w	r2, r3, #3
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	005b      	lsls	r3, r3, #1
 80089dc:	fa02 f303 	lsl.w	r3, r2, r3
 80089e0:	69ba      	ldr	r2, [r7, #24]
 80089e2:	4313      	orrs	r3, r2
 80089e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	69ba      	ldr	r2, [r7, #24]
 80089ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 80be 	beq.w	8008b76 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80089fa:	4b65      	ldr	r3, [pc, #404]	; (8008b90 <HAL_GPIO_Init+0x320>)
 80089fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089fe:	4a64      	ldr	r2, [pc, #400]	; (8008b90 <HAL_GPIO_Init+0x320>)
 8008a00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008a04:	6453      	str	r3, [r2, #68]	; 0x44
 8008a06:	4b62      	ldr	r3, [pc, #392]	; (8008b90 <HAL_GPIO_Init+0x320>)
 8008a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008a0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008a12:	4a60      	ldr	r2, [pc, #384]	; (8008b94 <HAL_GPIO_Init+0x324>)
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	089b      	lsrs	r3, r3, #2
 8008a18:	3302      	adds	r3, #2
 8008a1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008a20:	69fb      	ldr	r3, [r7, #28]
 8008a22:	f003 0303 	and.w	r3, r3, #3
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	220f      	movs	r2, #15
 8008a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a2e:	43db      	mvns	r3, r3
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	4013      	ands	r3, r2
 8008a34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4a57      	ldr	r2, [pc, #348]	; (8008b98 <HAL_GPIO_Init+0x328>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d037      	beq.n	8008aae <HAL_GPIO_Init+0x23e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	4a56      	ldr	r2, [pc, #344]	; (8008b9c <HAL_GPIO_Init+0x32c>)
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d031      	beq.n	8008aaa <HAL_GPIO_Init+0x23a>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	4a55      	ldr	r2, [pc, #340]	; (8008ba0 <HAL_GPIO_Init+0x330>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d02b      	beq.n	8008aa6 <HAL_GPIO_Init+0x236>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4a54      	ldr	r2, [pc, #336]	; (8008ba4 <HAL_GPIO_Init+0x334>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d025      	beq.n	8008aa2 <HAL_GPIO_Init+0x232>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	4a53      	ldr	r2, [pc, #332]	; (8008ba8 <HAL_GPIO_Init+0x338>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d01f      	beq.n	8008a9e <HAL_GPIO_Init+0x22e>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	4a52      	ldr	r2, [pc, #328]	; (8008bac <HAL_GPIO_Init+0x33c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d019      	beq.n	8008a9a <HAL_GPIO_Init+0x22a>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	4a51      	ldr	r2, [pc, #324]	; (8008bb0 <HAL_GPIO_Init+0x340>)
 8008a6a:	4293      	cmp	r3, r2
 8008a6c:	d013      	beq.n	8008a96 <HAL_GPIO_Init+0x226>
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a50      	ldr	r2, [pc, #320]	; (8008bb4 <HAL_GPIO_Init+0x344>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d00d      	beq.n	8008a92 <HAL_GPIO_Init+0x222>
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	4a4f      	ldr	r2, [pc, #316]	; (8008bb8 <HAL_GPIO_Init+0x348>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d007      	beq.n	8008a8e <HAL_GPIO_Init+0x21e>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	4a4e      	ldr	r2, [pc, #312]	; (8008bbc <HAL_GPIO_Init+0x34c>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d101      	bne.n	8008a8a <HAL_GPIO_Init+0x21a>
 8008a86:	2309      	movs	r3, #9
 8008a88:	e012      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008a8a:	230a      	movs	r3, #10
 8008a8c:	e010      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008a8e:	2308      	movs	r3, #8
 8008a90:	e00e      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008a92:	2307      	movs	r3, #7
 8008a94:	e00c      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008a96:	2306      	movs	r3, #6
 8008a98:	e00a      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008a9a:	2305      	movs	r3, #5
 8008a9c:	e008      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008a9e:	2304      	movs	r3, #4
 8008aa0:	e006      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	e004      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008aa6:	2302      	movs	r3, #2
 8008aa8:	e002      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e000      	b.n	8008ab0 <HAL_GPIO_Init+0x240>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	69fa      	ldr	r2, [r7, #28]
 8008ab2:	f002 0203 	and.w	r2, r2, #3
 8008ab6:	0092      	lsls	r2, r2, #2
 8008ab8:	4093      	lsls	r3, r2
 8008aba:	69ba      	ldr	r2, [r7, #24]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008ac0:	4934      	ldr	r1, [pc, #208]	; (8008b94 <HAL_GPIO_Init+0x324>)
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	089b      	lsrs	r3, r3, #2
 8008ac6:	3302      	adds	r3, #2
 8008ac8:	69ba      	ldr	r2, [r7, #24]
 8008aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008ace:	4b3c      	ldr	r3, [pc, #240]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	43db      	mvns	r3, r3
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	4013      	ands	r3, r2
 8008adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d003      	beq.n	8008af2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4313      	orrs	r3, r2
 8008af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008af2:	4a33      	ldr	r2, [pc, #204]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008af4:	69bb      	ldr	r3, [r7, #24]
 8008af6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008af8:	4b31      	ldr	r3, [pc, #196]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	43db      	mvns	r3, r3
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	4013      	ands	r3, r2
 8008b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	693b      	ldr	r3, [r7, #16]
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008b1c:	4a28      	ldr	r2, [pc, #160]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008b22:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b28:	693b      	ldr	r3, [r7, #16]
 8008b2a:	43db      	mvns	r3, r3
 8008b2c:	69ba      	ldr	r2, [r7, #24]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d003      	beq.n	8008b46 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008b3e:	69ba      	ldr	r2, [r7, #24]
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008b46:	4a1e      	ldr	r2, [pc, #120]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008b48:	69bb      	ldr	r3, [r7, #24]
 8008b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008b4c:	4b1c      	ldr	r3, [pc, #112]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	43db      	mvns	r3, r3
 8008b56:	69ba      	ldr	r2, [r7, #24]
 8008b58:	4013      	ands	r3, r2
 8008b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008b5c:	683b      	ldr	r3, [r7, #0]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008b70:	4a13      	ldr	r2, [pc, #76]	; (8008bc0 <HAL_GPIO_Init+0x350>)
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008b76:	69fb      	ldr	r3, [r7, #28]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	61fb      	str	r3, [r7, #28]
 8008b7c:	69fb      	ldr	r3, [r7, #28]
 8008b7e:	2b0f      	cmp	r3, #15
 8008b80:	f67f ae86 	bls.w	8008890 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008b84:	bf00      	nop
 8008b86:	3724      	adds	r7, #36	; 0x24
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8e:	4770      	bx	lr
 8008b90:	40023800 	.word	0x40023800
 8008b94:	40013800 	.word	0x40013800
 8008b98:	40020000 	.word	0x40020000
 8008b9c:	40020400 	.word	0x40020400
 8008ba0:	40020800 	.word	0x40020800
 8008ba4:	40020c00 	.word	0x40020c00
 8008ba8:	40021000 	.word	0x40021000
 8008bac:	40021400 	.word	0x40021400
 8008bb0:	40021800 	.word	0x40021800
 8008bb4:	40021c00 	.word	0x40021c00
 8008bb8:	40022000 	.word	0x40022000
 8008bbc:	40022400 	.word	0x40022400
 8008bc0:	40013c00 	.word	0x40013c00

08008bc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	887b      	ldrh	r3, [r7, #2]
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d002      	beq.n	8008be2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	73fb      	strb	r3, [r7, #15]
 8008be0:	e001      	b.n	8008be6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008be2:	2300      	movs	r3, #0
 8008be4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3714      	adds	r7, #20
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr

08008bf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008bf4:	b480      	push	{r7}
 8008bf6:	b083      	sub	sp, #12
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	460b      	mov	r3, r1
 8008bfe:	807b      	strh	r3, [r7, #2]
 8008c00:	4613      	mov	r3, r2
 8008c02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008c04:	787b      	ldrb	r3, [r7, #1]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c0a:	887a      	ldrh	r2, [r7, #2]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8008c10:	e003      	b.n	8008c1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8008c12:	887b      	ldrh	r3, [r7, #2]
 8008c14:	041a      	lsls	r2, r3, #16
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	619a      	str	r2, [r3, #24]
}
 8008c1a:	bf00      	nop
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	695a      	ldr	r2, [r3, #20]
 8008c36:	887b      	ldrh	r3, [r7, #2]
 8008c38:	4013      	ands	r3, r2
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d004      	beq.n	8008c48 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008c3e:	887b      	ldrh	r3, [r7, #2]
 8008c40:	041a      	lsls	r2, r3, #16
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8008c46:	e002      	b.n	8008c4e <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008c48:	887a      	ldrh	r2, [r7, #2]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	619a      	str	r2, [r3, #24]
}
 8008c4e:	bf00      	nop
 8008c50:	370c      	adds	r7, #12
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008c5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c5c:	b08f      	sub	sp, #60	; 0x3c
 8008c5e:	af0a      	add	r7, sp, #40	; 0x28
 8008c60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d101      	bne.n	8008c6c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	e116      	b.n	8008e9a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d106      	bne.n	8008c8c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f011 f8d6 	bl	8019e38 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2203      	movs	r2, #3
 8008c90:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d102      	bne.n	8008ca6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f006 fe95 	bl	800f9da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	603b      	str	r3, [r7, #0]
 8008cb6:	687e      	ldr	r6, [r7, #4]
 8008cb8:	466d      	mov	r5, sp
 8008cba:	f106 0410 	add.w	r4, r6, #16
 8008cbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008cc4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cc6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008cca:	e885 0003 	stmia.w	r5, {r0, r1}
 8008cce:	1d33      	adds	r3, r6, #4
 8008cd0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008cd2:	6838      	ldr	r0, [r7, #0]
 8008cd4:	f006 fd76 	bl	800f7c4 <USB_CoreInit>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d005      	beq.n	8008cea <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2202      	movs	r2, #2
 8008ce2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e0d7      	b.n	8008e9a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	2100      	movs	r1, #0
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f006 fe83 	bl	800f9fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	73fb      	strb	r3, [r7, #15]
 8008cfa:	e04a      	b.n	8008d92 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008cfc:	7bfa      	ldrb	r2, [r7, #15]
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	4613      	mov	r3, r2
 8008d02:	00db      	lsls	r3, r3, #3
 8008d04:	1a9b      	subs	r3, r3, r2
 8008d06:	009b      	lsls	r3, r3, #2
 8008d08:	440b      	add	r3, r1
 8008d0a:	333d      	adds	r3, #61	; 0x3d
 8008d0c:	2201      	movs	r2, #1
 8008d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008d10:	7bfa      	ldrb	r2, [r7, #15]
 8008d12:	6879      	ldr	r1, [r7, #4]
 8008d14:	4613      	mov	r3, r2
 8008d16:	00db      	lsls	r3, r3, #3
 8008d18:	1a9b      	subs	r3, r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	440b      	add	r3, r1
 8008d1e:	333c      	adds	r3, #60	; 0x3c
 8008d20:	7bfa      	ldrb	r2, [r7, #15]
 8008d22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008d24:	7bfa      	ldrb	r2, [r7, #15]
 8008d26:	7bfb      	ldrb	r3, [r7, #15]
 8008d28:	b298      	uxth	r0, r3
 8008d2a:	6879      	ldr	r1, [r7, #4]
 8008d2c:	4613      	mov	r3, r2
 8008d2e:	00db      	lsls	r3, r3, #3
 8008d30:	1a9b      	subs	r3, r3, r2
 8008d32:	009b      	lsls	r3, r3, #2
 8008d34:	440b      	add	r3, r1
 8008d36:	3342      	adds	r3, #66	; 0x42
 8008d38:	4602      	mov	r2, r0
 8008d3a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008d3c:	7bfa      	ldrb	r2, [r7, #15]
 8008d3e:	6879      	ldr	r1, [r7, #4]
 8008d40:	4613      	mov	r3, r2
 8008d42:	00db      	lsls	r3, r3, #3
 8008d44:	1a9b      	subs	r3, r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	440b      	add	r3, r1
 8008d4a:	333f      	adds	r3, #63	; 0x3f
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008d50:	7bfa      	ldrb	r2, [r7, #15]
 8008d52:	6879      	ldr	r1, [r7, #4]
 8008d54:	4613      	mov	r3, r2
 8008d56:	00db      	lsls	r3, r3, #3
 8008d58:	1a9b      	subs	r3, r3, r2
 8008d5a:	009b      	lsls	r3, r3, #2
 8008d5c:	440b      	add	r3, r1
 8008d5e:	3344      	adds	r3, #68	; 0x44
 8008d60:	2200      	movs	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008d64:	7bfa      	ldrb	r2, [r7, #15]
 8008d66:	6879      	ldr	r1, [r7, #4]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	00db      	lsls	r3, r3, #3
 8008d6c:	1a9b      	subs	r3, r3, r2
 8008d6e:	009b      	lsls	r3, r3, #2
 8008d70:	440b      	add	r3, r1
 8008d72:	3348      	adds	r3, #72	; 0x48
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008d78:	7bfa      	ldrb	r2, [r7, #15]
 8008d7a:	6879      	ldr	r1, [r7, #4]
 8008d7c:	4613      	mov	r3, r2
 8008d7e:	00db      	lsls	r3, r3, #3
 8008d80:	1a9b      	subs	r3, r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	440b      	add	r3, r1
 8008d86:	3350      	adds	r3, #80	; 0x50
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d8c:	7bfb      	ldrb	r3, [r7, #15]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	73fb      	strb	r3, [r7, #15]
 8008d92:	7bfa      	ldrb	r2, [r7, #15]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d3af      	bcc.n	8008cfc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	e044      	b.n	8008e2c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008da2:	7bfa      	ldrb	r2, [r7, #15]
 8008da4:	6879      	ldr	r1, [r7, #4]
 8008da6:	4613      	mov	r3, r2
 8008da8:	00db      	lsls	r3, r3, #3
 8008daa:	1a9b      	subs	r3, r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	440b      	add	r3, r1
 8008db0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008db4:	2200      	movs	r2, #0
 8008db6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008db8:	7bfa      	ldrb	r2, [r7, #15]
 8008dba:	6879      	ldr	r1, [r7, #4]
 8008dbc:	4613      	mov	r3, r2
 8008dbe:	00db      	lsls	r3, r3, #3
 8008dc0:	1a9b      	subs	r3, r3, r2
 8008dc2:	009b      	lsls	r3, r3, #2
 8008dc4:	440b      	add	r3, r1
 8008dc6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008dca:	7bfa      	ldrb	r2, [r7, #15]
 8008dcc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008dce:	7bfa      	ldrb	r2, [r7, #15]
 8008dd0:	6879      	ldr	r1, [r7, #4]
 8008dd2:	4613      	mov	r3, r2
 8008dd4:	00db      	lsls	r3, r3, #3
 8008dd6:	1a9b      	subs	r3, r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008de0:	2200      	movs	r2, #0
 8008de2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008de4:	7bfa      	ldrb	r2, [r7, #15]
 8008de6:	6879      	ldr	r1, [r7, #4]
 8008de8:	4613      	mov	r3, r2
 8008dea:	00db      	lsls	r3, r3, #3
 8008dec:	1a9b      	subs	r3, r3, r2
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	440b      	add	r3, r1
 8008df2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008df6:	2200      	movs	r2, #0
 8008df8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008dfa:	7bfa      	ldrb	r2, [r7, #15]
 8008dfc:	6879      	ldr	r1, [r7, #4]
 8008dfe:	4613      	mov	r3, r2
 8008e00:	00db      	lsls	r3, r3, #3
 8008e02:	1a9b      	subs	r3, r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	440b      	add	r3, r1
 8008e08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008e10:	7bfa      	ldrb	r2, [r7, #15]
 8008e12:	6879      	ldr	r1, [r7, #4]
 8008e14:	4613      	mov	r3, r2
 8008e16:	00db      	lsls	r3, r3, #3
 8008e18:	1a9b      	subs	r3, r3, r2
 8008e1a:	009b      	lsls	r3, r3, #2
 8008e1c:	440b      	add	r3, r1
 8008e1e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008e22:	2200      	movs	r2, #0
 8008e24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	73fb      	strb	r3, [r7, #15]
 8008e2c:	7bfa      	ldrb	r2, [r7, #15]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d3b5      	bcc.n	8008da2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	603b      	str	r3, [r7, #0]
 8008e3c:	687e      	ldr	r6, [r7, #4]
 8008e3e:	466d      	mov	r5, sp
 8008e40:	f106 0410 	add.w	r4, r6, #16
 8008e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008e50:	e885 0003 	stmia.w	r5, {r0, r1}
 8008e54:	1d33      	adds	r3, r6, #4
 8008e56:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008e58:	6838      	ldr	r0, [r7, #0]
 8008e5a:	f006 fdf9 	bl	800fa50 <USB_DevInit>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d005      	beq.n	8008e70 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2202      	movs	r2, #2
 8008e68:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	e014      	b.n	8008e9a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2200      	movs	r2, #0
 8008e74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d102      	bne.n	8008e8e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f881 	bl	8009f90 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4618      	mov	r0, r3
 8008e94:	f007 fe48 	bl	8010b28 <USB_DevDisconnect>

  return HAL_OK;
 8008e98:	2300      	movs	r3, #0
}
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	3714      	adds	r7, #20
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008ea2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008ea2:	b580      	push	{r7, lr}
 8008ea4:	b082      	sub	sp, #8
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d101      	bne.n	8008eb8 <HAL_PCD_Start+0x16>
 8008eb4:	2302      	movs	r3, #2
 8008eb6:	e012      	b.n	8008ede <HAL_PCD_Start+0x3c>
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2201      	movs	r2, #1
 8008ebc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DevConnect(hpcd->Instance);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f007 fe17 	bl	8010af8 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f006 fd72 	bl	800f9b8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008ee6:	b590      	push	{r4, r7, lr}
 8008ee8:	b08d      	sub	sp, #52	; 0x34
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ef4:	6a3b      	ldr	r3, [r7, #32]
 8008ef6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	4618      	mov	r0, r3
 8008efe:	f007 febe 	bl	8010c7e <USB_GetMode>
 8008f02:	4603      	mov	r3, r0
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	f040 83ca 	bne.w	800969e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f007 fe22 	bl	8010b58 <USB_ReadInterrupts>
 8008f14:	4603      	mov	r3, r0
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	f000 83c0 	beq.w	800969c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f007 fe19 	bl	8010b58 <USB_ReadInterrupts>
 8008f26:	4603      	mov	r3, r0
 8008f28:	f003 0302 	and.w	r3, r3, #2
 8008f2c:	2b02      	cmp	r3, #2
 8008f2e:	d107      	bne.n	8008f40 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	695a      	ldr	r2, [r3, #20]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	f002 0202 	and.w	r2, r2, #2
 8008f3e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f007 fe07 	bl	8010b58 <USB_ReadInterrupts>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	f003 0310 	and.w	r3, r3, #16
 8008f50:	2b10      	cmp	r3, #16
 8008f52:	d161      	bne.n	8009018 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	699a      	ldr	r2, [r3, #24]
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f022 0210 	bic.w	r2, r2, #16
 8008f62:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008f64:	6a3b      	ldr	r3, [r7, #32]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
 8008f68:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	f003 020f 	and.w	r2, r3, #15
 8008f70:	4613      	mov	r3, r2
 8008f72:	00db      	lsls	r3, r3, #3
 8008f74:	1a9b      	subs	r3, r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	4413      	add	r3, r2
 8008f80:	3304      	adds	r3, #4
 8008f82:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	0c5b      	lsrs	r3, r3, #17
 8008f88:	f003 030f 	and.w	r3, r3, #15
 8008f8c:	2b02      	cmp	r3, #2
 8008f8e:	d124      	bne.n	8008fda <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008f90:	69ba      	ldr	r2, [r7, #24]
 8008f92:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008f96:	4013      	ands	r3, r2
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d035      	beq.n	8009008 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008f9c:	697b      	ldr	r3, [r7, #20]
 8008f9e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008fa0:	69bb      	ldr	r3, [r7, #24]
 8008fa2:	091b      	lsrs	r3, r3, #4
 8008fa4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008fa6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	6a38      	ldr	r0, [r7, #32]
 8008fb0:	f007 fc7f 	bl	80108b2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	68da      	ldr	r2, [r3, #12]
 8008fb8:	69bb      	ldr	r3, [r7, #24]
 8008fba:	091b      	lsrs	r3, r3, #4
 8008fbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fc0:	441a      	add	r2, r3
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	699a      	ldr	r2, [r3, #24]
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	091b      	lsrs	r3, r3, #4
 8008fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008fd2:	441a      	add	r2, r3
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	619a      	str	r2, [r3, #24]
 8008fd8:	e016      	b.n	8009008 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	0c5b      	lsrs	r3, r3, #17
 8008fde:	f003 030f 	and.w	r3, r3, #15
 8008fe2:	2b06      	cmp	r3, #6
 8008fe4:	d110      	bne.n	8009008 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fec:	2208      	movs	r2, #8
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6a38      	ldr	r0, [r7, #32]
 8008ff2:	f007 fc5e 	bl	80108b2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	699a      	ldr	r2, [r3, #24]
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	091b      	lsrs	r3, r3, #4
 8008ffe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009002:	441a      	add	r2, r3
 8009004:	697b      	ldr	r3, [r7, #20]
 8009006:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699a      	ldr	r2, [r3, #24]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f042 0210 	orr.w	r2, r2, #16
 8009016:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4618      	mov	r0, r3
 800901e:	f007 fd9b 	bl	8010b58 <USB_ReadInterrupts>
 8009022:	4603      	mov	r3, r0
 8009024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009028:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800902c:	d16e      	bne.n	800910c <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800902e:	2300      	movs	r3, #0
 8009030:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	4618      	mov	r0, r3
 8009038:	f007 fda1 	bl	8010b7e <USB_ReadDevAllOutEpInterrupt>
 800903c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800903e:	e062      	b.n	8009106 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8009040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009042:	f003 0301 	and.w	r3, r3, #1
 8009046:	2b00      	cmp	r3, #0
 8009048:	d057      	beq.n	80090fa <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009050:	b2d2      	uxtb	r2, r2
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f007 fdc6 	bl	8010be6 <USB_ReadDevOutEPInterrupt>
 800905a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800905c:	693b      	ldr	r3, [r7, #16]
 800905e:	f003 0301 	and.w	r3, r3, #1
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00c      	beq.n	8009080 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8009066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009068:	015a      	lsls	r2, r3, #5
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	4413      	add	r3, r2
 800906e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009072:	461a      	mov	r2, r3
 8009074:	2301      	movs	r3, #1
 8009076:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8009078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 fdde 	bl	8009c3c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f003 0308 	and.w	r3, r3, #8
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00c      	beq.n	80090a4 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800908a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800908c:	015a      	lsls	r2, r3, #5
 800908e:	69fb      	ldr	r3, [r7, #28]
 8009090:	4413      	add	r3, r2
 8009092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009096:	461a      	mov	r2, r3
 8009098:	2308      	movs	r3, #8
 800909a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800909c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fed8 	bl	8009e54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	f003 0310 	and.w	r3, r3, #16
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d008      	beq.n	80090c0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80090ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090b0:	015a      	lsls	r2, r3, #5
 80090b2:	69fb      	ldr	r3, [r7, #28]
 80090b4:	4413      	add	r3, r2
 80090b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090ba:	461a      	mov	r2, r3
 80090bc:	2310      	movs	r3, #16
 80090be:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d008      	beq.n	80090dc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	015a      	lsls	r2, r3, #5
 80090ce:	69fb      	ldr	r3, [r7, #28]
 80090d0:	4413      	add	r3, r2
 80090d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090d6:	461a      	mov	r2, r3
 80090d8:	2320      	movs	r3, #32
 80090da:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80090dc:	693b      	ldr	r3, [r7, #16]
 80090de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d009      	beq.n	80090fa <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80090e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e8:	015a      	lsls	r2, r3, #5
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	4413      	add	r3, r2
 80090ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090f2:	461a      	mov	r2, r3
 80090f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80090f8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80090fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090fc:	3301      	adds	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	085b      	lsrs	r3, r3, #1
 8009104:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8009106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009108:	2b00      	cmp	r3, #0
 800910a:	d199      	bne.n	8009040 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	4618      	mov	r0, r3
 8009112:	f007 fd21 	bl	8010b58 <USB_ReadInterrupts>
 8009116:	4603      	mov	r3, r0
 8009118:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800911c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009120:	f040 80c0 	bne.w	80092a4 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	4618      	mov	r0, r3
 800912a:	f007 fd42 	bl	8010bb2 <USB_ReadDevAllInEpInterrupt>
 800912e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8009130:	2300      	movs	r3, #0
 8009132:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8009134:	e0b2      	b.n	800929c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8009136:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	f000 80a7 	beq.w	8009290 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009148:	b2d2      	uxtb	r2, r2
 800914a:	4611      	mov	r1, r2
 800914c:	4618      	mov	r0, r3
 800914e:	f007 fd68 	bl	8010c22 <USB_ReadDevInEPInterrupt>
 8009152:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	f003 0301 	and.w	r3, r3, #1
 800915a:	2b00      	cmp	r3, #0
 800915c:	d057      	beq.n	800920e <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800915e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009160:	f003 030f 	and.w	r3, r3, #15
 8009164:	2201      	movs	r2, #1
 8009166:	fa02 f303 	lsl.w	r3, r2, r3
 800916a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800916c:	69fb      	ldr	r3, [r7, #28]
 800916e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	43db      	mvns	r3, r3
 8009178:	69f9      	ldr	r1, [r7, #28]
 800917a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800917e:	4013      	ands	r3, r2
 8009180:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8009182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009184:	015a      	lsls	r2, r3, #5
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	4413      	add	r3, r2
 800918a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800918e:	461a      	mov	r2, r3
 8009190:	2301      	movs	r3, #1
 8009192:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	691b      	ldr	r3, [r3, #16]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d132      	bne.n	8009202 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800919c:	6879      	ldr	r1, [r7, #4]
 800919e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091a0:	4613      	mov	r3, r2
 80091a2:	00db      	lsls	r3, r3, #3
 80091a4:	1a9b      	subs	r3, r3, r2
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	440b      	add	r3, r1
 80091aa:	3348      	adds	r3, #72	; 0x48
 80091ac:	6819      	ldr	r1, [r3, #0]
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091b2:	4613      	mov	r3, r2
 80091b4:	00db      	lsls	r3, r3, #3
 80091b6:	1a9b      	subs	r3, r3, r2
 80091b8:	009b      	lsls	r3, r3, #2
 80091ba:	4403      	add	r3, r0
 80091bc:	3344      	adds	r3, #68	; 0x44
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	4419      	add	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091c6:	4613      	mov	r3, r2
 80091c8:	00db      	lsls	r3, r3, #3
 80091ca:	1a9b      	subs	r3, r3, r2
 80091cc:	009b      	lsls	r3, r3, #2
 80091ce:	4403      	add	r3, r0
 80091d0:	3348      	adds	r3, #72	; 0x48
 80091d2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d113      	bne.n	8009202 <HAL_PCD_IRQHandler+0x31c>
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091de:	4613      	mov	r3, r2
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	1a9b      	subs	r3, r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	440b      	add	r3, r1
 80091e8:	3350      	adds	r3, #80	; 0x50
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d108      	bne.n	8009202 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6818      	ldr	r0, [r3, #0]
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80091fa:	461a      	mov	r2, r3
 80091fc:	2101      	movs	r1, #1
 80091fe:	f007 fd71 	bl	8010ce4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8009202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009204:	b2db      	uxtb	r3, r3
 8009206:	4619      	mov	r1, r3
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	f010 fe98 	bl	8019f3e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	f003 0308 	and.w	r3, r3, #8
 8009214:	2b00      	cmp	r3, #0
 8009216:	d008      	beq.n	800922a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8009218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	69fb      	ldr	r3, [r7, #28]
 800921e:	4413      	add	r3, r2
 8009220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009224:	461a      	mov	r2, r3
 8009226:	2308      	movs	r3, #8
 8009228:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f003 0310 	and.w	r3, r3, #16
 8009230:	2b00      	cmp	r3, #0
 8009232:	d008      	beq.n	8009246 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	69fb      	ldr	r3, [r7, #28]
 800923a:	4413      	add	r3, r2
 800923c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009240:	461a      	mov	r2, r3
 8009242:	2310      	movs	r3, #16
 8009244:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	d008      	beq.n	8009262 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8009250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009252:	015a      	lsls	r2, r3, #5
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	4413      	add	r3, r2
 8009258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800925c:	461a      	mov	r2, r3
 800925e:	2340      	movs	r3, #64	; 0x40
 8009260:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	f003 0302 	and.w	r3, r3, #2
 8009268:	2b00      	cmp	r3, #0
 800926a:	d008      	beq.n	800927e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	015a      	lsls	r2, r3, #5
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	4413      	add	r3, r2
 8009274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009278:	461a      	mov	r2, r3
 800927a:	2302      	movs	r3, #2
 800927c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009284:	2b00      	cmp	r3, #0
 8009286:	d003      	beq.n	8009290 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8009288:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fc48 	bl	8009b20 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8009290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009292:	3301      	adds	r3, #1
 8009294:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8009296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009298:	085b      	lsrs	r3, r3, #1
 800929a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800929c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800929e:	2b00      	cmp	r3, #0
 80092a0:	f47f af49 	bne.w	8009136 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	4618      	mov	r0, r3
 80092aa:	f007 fc55 	bl	8010b58 <USB_ReadInterrupts>
 80092ae:	4603      	mov	r3, r0
 80092b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092b8:	d122      	bne.n	8009300 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80092ba:	69fb      	ldr	r3, [r7, #28]
 80092bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80092c0:	685b      	ldr	r3, [r3, #4]
 80092c2:	69fa      	ldr	r2, [r7, #28]
 80092c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d108      	bne.n	80092ea <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80092e0:	2100      	movs	r1, #0
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f011 f87a 	bl	801a3dc <HAL_PCDEx_LPM_Callback>
 80092e8:	e002      	b.n	80092f0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f010 fe9e 	bl	801a02c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	695a      	ldr	r2, [r3, #20]
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80092fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	4618      	mov	r0, r3
 8009306:	f007 fc27 	bl	8010b58 <USB_ReadInterrupts>
 800930a:	4603      	mov	r3, r0
 800930c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009314:	d112      	bne.n	800933c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800931c:	689b      	ldr	r3, [r3, #8]
 800931e:	f003 0301 	and.w	r3, r3, #1
 8009322:	2b01      	cmp	r3, #1
 8009324:	d102      	bne.n	800932c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f010 fe5a 	bl	8019fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	695a      	ldr	r2, [r3, #20]
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800933a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	4618      	mov	r0, r3
 8009342:	f007 fc09 	bl	8010b58 <USB_ReadInterrupts>
 8009346:	4603      	mov	r3, r0
 8009348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800934c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009350:	d121      	bne.n	8009396 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	695a      	ldr	r2, [r3, #20]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009360:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009368:	2b00      	cmp	r3, #0
 800936a:	d111      	bne.n	8009390 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800937a:	089b      	lsrs	r3, r3, #2
 800937c:	f003 020f 	and.w	r2, r3, #15
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009386:	2101      	movs	r1, #1
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f011 f827 	bl	801a3dc <HAL_PCDEx_LPM_Callback>
 800938e:	e002      	b.n	8009396 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f010 fe25 	bl	8019fe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4618      	mov	r0, r3
 800939c:	f007 fbdc 	bl	8010b58 <USB_ReadInterrupts>
 80093a0:	4603      	mov	r3, r0
 80093a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80093aa:	f040 80c7 	bne.w	800953c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80093ae:	69fb      	ldr	r3, [r7, #28]
 80093b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093bc:	f023 0301 	bic.w	r3, r3, #1
 80093c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2110      	movs	r1, #16
 80093c8:	4618      	mov	r0, r3
 80093ca:	f006 fcaf 	bl	800fd2c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80093ce:	2300      	movs	r3, #0
 80093d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80093d2:	e056      	b.n	8009482 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80093d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093d6:	015a      	lsls	r2, r3, #5
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	4413      	add	r3, r2
 80093dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093e0:	461a      	mov	r2, r3
 80093e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80093e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80093e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	69fb      	ldr	r3, [r7, #28]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	69fa      	ldr	r2, [r7, #28]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009402:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009406:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	4413      	add	r3, r2
 8009410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009418:	0151      	lsls	r1, r2, #5
 800941a:	69fa      	ldr	r2, [r7, #28]
 800941c:	440a      	add	r2, r1
 800941e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009422:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009426:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800942a:	015a      	lsls	r2, r3, #5
 800942c:	69fb      	ldr	r3, [r7, #28]
 800942e:	4413      	add	r3, r2
 8009430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009434:	461a      	mov	r2, r3
 8009436:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800943a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800943c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	69fb      	ldr	r3, [r7, #28]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	69fa      	ldr	r2, [r7, #28]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009456:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800945a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800945c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	69fb      	ldr	r3, [r7, #28]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	69fa      	ldr	r2, [r7, #28]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009476:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800947a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800947c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800947e:	3301      	adds	r3, #1
 8009480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	685b      	ldr	r3, [r3, #4]
 8009486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009488:	429a      	cmp	r2, r3
 800948a:	d3a3      	bcc.n	80093d4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800948c:	69fb      	ldr	r3, [r7, #28]
 800948e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009492:	69db      	ldr	r3, [r3, #28]
 8009494:	69fa      	ldr	r2, [r7, #28]
 8009496:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800949a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800949e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d016      	beq.n	80094d6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094b2:	69fa      	ldr	r2, [r7, #28]
 80094b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094b8:	f043 030b 	orr.w	r3, r3, #11
 80094bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094c8:	69fa      	ldr	r2, [r7, #28]
 80094ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094ce:	f043 030b 	orr.w	r3, r3, #11
 80094d2:	6453      	str	r3, [r2, #68]	; 0x44
 80094d4:	e015      	b.n	8009502 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094dc:	695a      	ldr	r2, [r3, #20]
 80094de:	69fb      	ldr	r3, [r7, #28]
 80094e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094e4:	4619      	mov	r1, r3
 80094e6:	f242 032b 	movw	r3, #8235	; 0x202b
 80094ea:	4313      	orrs	r3, r2
 80094ec:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	69fa      	ldr	r2, [r7, #28]
 80094f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094fc:	f043 030b 	orr.w	r3, r3, #11
 8009500:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8009502:	69fb      	ldr	r3, [r7, #28]
 8009504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	69fa      	ldr	r2, [r7, #28]
 800950c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009510:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009514:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009526:	461a      	mov	r2, r3
 8009528:	f007 fbdc 	bl	8010ce4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	695a      	ldr	r2, [r3, #20]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800953a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4618      	mov	r0, r3
 8009542:	f007 fb09 	bl	8010b58 <USB_ReadInterrupts>
 8009546:	4603      	mov	r3, r0
 8009548:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800954c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009550:	d124      	bne.n	800959c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4618      	mov	r0, r3
 8009558:	f007 fba0 	bl	8010c9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4618      	mov	r0, r3
 8009562:	f006 fc44 	bl	800fdee <USB_GetDevSpeed>
 8009566:	4603      	mov	r3, r0
 8009568:	461a      	mov	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681c      	ldr	r4, [r3, #0]
 8009572:	f001 f999 	bl	800a8a8 <HAL_RCC_GetHCLKFreq>
 8009576:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800957c:	b2db      	uxtb	r3, r3
 800957e:	461a      	mov	r2, r3
 8009580:	4620      	mov	r0, r4
 8009582:	f006 f977 	bl	800f874 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	f010 fd01 	bl	8019f8e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695a      	ldr	r2, [r3, #20]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800959a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f007 fad9 	bl	8010b58 <USB_ReadInterrupts>
 80095a6:	4603      	mov	r3, r0
 80095a8:	f003 0308 	and.w	r3, r3, #8
 80095ac:	2b08      	cmp	r3, #8
 80095ae:	d10a      	bne.n	80095c6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f010 fcde 	bl	8019f72 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	695a      	ldr	r2, [r3, #20]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f002 0208 	and.w	r2, r2, #8
 80095c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4618      	mov	r0, r3
 80095cc:	f007 fac4 	bl	8010b58 <USB_ReadInterrupts>
 80095d0:	4603      	mov	r3, r0
 80095d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80095d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095da:	d10f      	bne.n	80095fc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	b2db      	uxtb	r3, r3
 80095e4:	4619      	mov	r1, r3
 80095e6:	6878      	ldr	r0, [r7, #4]
 80095e8:	f010 fd40 	bl	801a06c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	695a      	ldr	r2, [r3, #20]
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80095fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4618      	mov	r0, r3
 8009602:	f007 faa9 	bl	8010b58 <USB_ReadInterrupts>
 8009606:	4603      	mov	r3, r0
 8009608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800960c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009610:	d10f      	bne.n	8009632 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009612:	2300      	movs	r3, #0
 8009614:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	b2db      	uxtb	r3, r3
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f010 fd13 	bl	801a048 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	695a      	ldr	r2, [r3, #20]
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009630:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4618      	mov	r0, r3
 8009638:	f007 fa8e 	bl	8010b58 <USB_ReadInterrupts>
 800963c:	4603      	mov	r3, r0
 800963e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009646:	d10a      	bne.n	800965e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f010 fd21 	bl	801a090 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	695a      	ldr	r2, [r3, #20]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800965c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f007 fa78 	bl	8010b58 <USB_ReadInterrupts>
 8009668:	4603      	mov	r3, r0
 800966a:	f003 0304 	and.w	r3, r3, #4
 800966e:	2b04      	cmp	r3, #4
 8009670:	d115      	bne.n	800969e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800967a:	69bb      	ldr	r3, [r7, #24]
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009684:	6878      	ldr	r0, [r7, #4]
 8009686:	f010 fd11 	bl	801a0ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6859      	ldr	r1, [r3, #4]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	430a      	orrs	r2, r1
 8009698:	605a      	str	r2, [r3, #4]
 800969a:	e000      	b.n	800969e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800969c:	bf00      	nop
    }
  }
}
 800969e:	3734      	adds	r7, #52	; 0x34
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd90      	pop	{r4, r7, pc}

080096a4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	460b      	mov	r3, r1
 80096ae:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <HAL_PCD_SetAddress+0x1a>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e013      	b.n	80096e6 <HAL_PCD_SetAddress+0x42>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	78fa      	ldrb	r2, [r7, #3]
 80096ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	78fa      	ldrb	r2, [r7, #3]
 80096d4:	4611      	mov	r1, r2
 80096d6:	4618      	mov	r0, r3
 80096d8:	f007 f9e8 	bl	8010aac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2200      	movs	r2, #0
 80096e0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80096e4:	2300      	movs	r3, #0
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3708      	adds	r7, #8
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80096ee:	b580      	push	{r7, lr}
 80096f0:	b084      	sub	sp, #16
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	4608      	mov	r0, r1
 80096f8:	4611      	mov	r1, r2
 80096fa:	461a      	mov	r2, r3
 80096fc:	4603      	mov	r3, r0
 80096fe:	70fb      	strb	r3, [r7, #3]
 8009700:	460b      	mov	r3, r1
 8009702:	803b      	strh	r3, [r7, #0]
 8009704:	4613      	mov	r3, r2
 8009706:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8009708:	2300      	movs	r3, #0
 800970a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800970c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009710:	2b00      	cmp	r3, #0
 8009712:	da0f      	bge.n	8009734 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009714:	78fb      	ldrb	r3, [r7, #3]
 8009716:	f003 020f 	and.w	r2, r3, #15
 800971a:	4613      	mov	r3, r2
 800971c:	00db      	lsls	r3, r3, #3
 800971e:	1a9b      	subs	r3, r3, r2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	3338      	adds	r3, #56	; 0x38
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	4413      	add	r3, r2
 8009728:	3304      	adds	r3, #4
 800972a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	2201      	movs	r2, #1
 8009730:	705a      	strb	r2, [r3, #1]
 8009732:	e00f      	b.n	8009754 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009734:	78fb      	ldrb	r3, [r7, #3]
 8009736:	f003 020f 	and.w	r2, r3, #15
 800973a:	4613      	mov	r3, r2
 800973c:	00db      	lsls	r3, r3, #3
 800973e:	1a9b      	subs	r3, r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009746:	687a      	ldr	r2, [r7, #4]
 8009748:	4413      	add	r3, r2
 800974a:	3304      	adds	r3, #4
 800974c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	2200      	movs	r2, #0
 8009752:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	f003 030f 	and.w	r3, r3, #15
 800975a:	b2da      	uxtb	r2, r3
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009760:	883a      	ldrh	r2, [r7, #0]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	78ba      	ldrb	r2, [r7, #2]
 800976a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	785b      	ldrb	r3, [r3, #1]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d004      	beq.n	800977e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	b29a      	uxth	r2, r3
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800977e:	78bb      	ldrb	r3, [r7, #2]
 8009780:	2b02      	cmp	r3, #2
 8009782:	d102      	bne.n	800978a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	2200      	movs	r2, #0
 8009788:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009790:	2b01      	cmp	r3, #1
 8009792:	d101      	bne.n	8009798 <HAL_PCD_EP_Open+0xaa>
 8009794:	2302      	movs	r3, #2
 8009796:	e00e      	b.n	80097b6 <HAL_PCD_EP_Open+0xc8>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2201      	movs	r2, #1
 800979c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	68f9      	ldr	r1, [r7, #12]
 80097a6:	4618      	mov	r0, r3
 80097a8:	f006 fb46 	bl	800fe38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80097b4:	7afb      	ldrb	r3, [r7, #11]
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b084      	sub	sp, #16
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
 80097c6:	460b      	mov	r3, r1
 80097c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80097ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	da0f      	bge.n	80097f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80097d2:	78fb      	ldrb	r3, [r7, #3]
 80097d4:	f003 020f 	and.w	r2, r3, #15
 80097d8:	4613      	mov	r3, r2
 80097da:	00db      	lsls	r3, r3, #3
 80097dc:	1a9b      	subs	r3, r3, r2
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	3338      	adds	r3, #56	; 0x38
 80097e2:	687a      	ldr	r2, [r7, #4]
 80097e4:	4413      	add	r3, r2
 80097e6:	3304      	adds	r3, #4
 80097e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	2201      	movs	r2, #1
 80097ee:	705a      	strb	r2, [r3, #1]
 80097f0:	e00f      	b.n	8009812 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097f2:	78fb      	ldrb	r3, [r7, #3]
 80097f4:	f003 020f 	and.w	r2, r3, #15
 80097f8:	4613      	mov	r3, r2
 80097fa:	00db      	lsls	r3, r3, #3
 80097fc:	1a9b      	subs	r3, r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	4413      	add	r3, r2
 8009808:	3304      	adds	r3, #4
 800980a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009812:	78fb      	ldrb	r3, [r7, #3]
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	b2da      	uxtb	r2, r3
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009824:	2b01      	cmp	r3, #1
 8009826:	d101      	bne.n	800982c <HAL_PCD_EP_Close+0x6e>
 8009828:	2302      	movs	r3, #2
 800982a:	e00e      	b.n	800984a <HAL_PCD_EP_Close+0x8c>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	68f9      	ldr	r1, [r7, #12]
 800983a:	4618      	mov	r0, r3
 800983c:	f006 fb84 	bl	800ff48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3710      	adds	r7, #16
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}

08009852 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009852:	b580      	push	{r7, lr}
 8009854:	b086      	sub	sp, #24
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
 800985e:	460b      	mov	r3, r1
 8009860:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009862:	7afb      	ldrb	r3, [r7, #11]
 8009864:	f003 020f 	and.w	r2, r3, #15
 8009868:	4613      	mov	r3, r2
 800986a:	00db      	lsls	r3, r3, #3
 800986c:	1a9b      	subs	r3, r3, r2
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009874:	68fa      	ldr	r2, [r7, #12]
 8009876:	4413      	add	r3, r2
 8009878:	3304      	adds	r3, #4
 800987a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	687a      	ldr	r2, [r7, #4]
 8009880:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	2200      	movs	r2, #0
 800988c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800988e:	697b      	ldr	r3, [r7, #20]
 8009890:	2200      	movs	r2, #0
 8009892:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009894:	7afb      	ldrb	r3, [r7, #11]
 8009896:	f003 030f 	and.w	r3, r3, #15
 800989a:	b2da      	uxtb	r2, r3
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	691b      	ldr	r3, [r3, #16]
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d102      	bne.n	80098ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80098a8:	687a      	ldr	r2, [r7, #4]
 80098aa:	697b      	ldr	r3, [r7, #20]
 80098ac:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80098ae:	7afb      	ldrb	r3, [r7, #11]
 80098b0:	f003 030f 	and.w	r3, r3, #15
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d109      	bne.n	80098cc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6818      	ldr	r0, [r3, #0]
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	691b      	ldr	r3, [r3, #16]
 80098c0:	b2db      	uxtb	r3, r3
 80098c2:	461a      	mov	r2, r3
 80098c4:	6979      	ldr	r1, [r7, #20]
 80098c6:	f006 fe67 	bl	8010598 <USB_EP0StartXfer>
 80098ca:	e008      	b.n	80098de <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6818      	ldr	r0, [r3, #0]
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	b2db      	uxtb	r3, r3
 80098d6:	461a      	mov	r2, r3
 80098d8:	6979      	ldr	r1, [r7, #20]
 80098da:	f006 fc11 	bl	8010100 <USB_EPStartXfer>
  }

  return HAL_OK;
 80098de:	2300      	movs	r3, #0
}
 80098e0:	4618      	mov	r0, r3
 80098e2:	3718      	adds	r7, #24
 80098e4:	46bd      	mov	sp, r7
 80098e6:	bd80      	pop	{r7, pc}

080098e8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
 80098f0:	460b      	mov	r3, r1
 80098f2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80098f4:	78fb      	ldrb	r3, [r7, #3]
 80098f6:	f003 020f 	and.w	r2, r3, #15
 80098fa:	6879      	ldr	r1, [r7, #4]
 80098fc:	4613      	mov	r3, r2
 80098fe:	00db      	lsls	r3, r3, #3
 8009900:	1a9b      	subs	r3, r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	440b      	add	r3, r1
 8009906:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800990a:	681b      	ldr	r3, [r3, #0]
}
 800990c:	4618      	mov	r0, r3
 800990e:	370c      	adds	r7, #12
 8009910:	46bd      	mov	sp, r7
 8009912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009916:	4770      	bx	lr

08009918 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	60f8      	str	r0, [r7, #12]
 8009920:	607a      	str	r2, [r7, #4]
 8009922:	603b      	str	r3, [r7, #0]
 8009924:	460b      	mov	r3, r1
 8009926:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009928:	7afb      	ldrb	r3, [r7, #11]
 800992a:	f003 020f 	and.w	r2, r3, #15
 800992e:	4613      	mov	r3, r2
 8009930:	00db      	lsls	r3, r3, #3
 8009932:	1a9b      	subs	r3, r3, r2
 8009934:	009b      	lsls	r3, r3, #2
 8009936:	3338      	adds	r3, #56	; 0x38
 8009938:	68fa      	ldr	r2, [r7, #12]
 800993a:	4413      	add	r3, r2
 800993c:	3304      	adds	r3, #4
 800993e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009940:	697b      	ldr	r3, [r7, #20]
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009946:	697b      	ldr	r3, [r7, #20]
 8009948:	683a      	ldr	r2, [r7, #0]
 800994a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800994c:	697b      	ldr	r3, [r7, #20]
 800994e:	2200      	movs	r2, #0
 8009950:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	2201      	movs	r2, #1
 8009956:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009958:	7afb      	ldrb	r3, [r7, #11]
 800995a:	f003 030f 	and.w	r3, r3, #15
 800995e:	b2da      	uxtb	r2, r3
 8009960:	697b      	ldr	r3, [r7, #20]
 8009962:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	691b      	ldr	r3, [r3, #16]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d102      	bne.n	8009972 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800996c:	687a      	ldr	r2, [r7, #4]
 800996e:	697b      	ldr	r3, [r7, #20]
 8009970:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009972:	7afb      	ldrb	r3, [r7, #11]
 8009974:	f003 030f 	and.w	r3, r3, #15
 8009978:	2b00      	cmp	r3, #0
 800997a:	d109      	bne.n	8009990 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6818      	ldr	r0, [r3, #0]
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	691b      	ldr	r3, [r3, #16]
 8009984:	b2db      	uxtb	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	6979      	ldr	r1, [r7, #20]
 800998a:	f006 fe05 	bl	8010598 <USB_EP0StartXfer>
 800998e:	e008      	b.n	80099a2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	6818      	ldr	r0, [r3, #0]
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	691b      	ldr	r3, [r3, #16]
 8009998:	b2db      	uxtb	r3, r3
 800999a:	461a      	mov	r2, r3
 800999c:	6979      	ldr	r1, [r7, #20]
 800999e:	f006 fbaf 	bl	8010100 <USB_EPStartXfer>
  }

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
 80099b4:	460b      	mov	r3, r1
 80099b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80099b8:	78fb      	ldrb	r3, [r7, #3]
 80099ba:	f003 020f 	and.w	r2, r3, #15
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d901      	bls.n	80099ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e050      	b.n	8009a6c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80099ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	da0f      	bge.n	80099f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80099d2:	78fb      	ldrb	r3, [r7, #3]
 80099d4:	f003 020f 	and.w	r2, r3, #15
 80099d8:	4613      	mov	r3, r2
 80099da:	00db      	lsls	r3, r3, #3
 80099dc:	1a9b      	subs	r3, r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	3338      	adds	r3, #56	; 0x38
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	4413      	add	r3, r2
 80099e6:	3304      	adds	r3, #4
 80099e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	705a      	strb	r2, [r3, #1]
 80099f0:	e00d      	b.n	8009a0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80099f2:	78fa      	ldrb	r2, [r7, #3]
 80099f4:	4613      	mov	r3, r2
 80099f6:	00db      	lsls	r3, r3, #3
 80099f8:	1a9b      	subs	r3, r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4413      	add	r3, r2
 8009a04:	3304      	adds	r3, #4
 8009a06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2201      	movs	r2, #1
 8009a12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009a14:	78fb      	ldrb	r3, [r7, #3]
 8009a16:	f003 030f 	and.w	r3, r3, #15
 8009a1a:	b2da      	uxtb	r2, r3
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009a26:	2b01      	cmp	r3, #1
 8009a28:	d101      	bne.n	8009a2e <HAL_PCD_EP_SetStall+0x82>
 8009a2a:	2302      	movs	r3, #2
 8009a2c:	e01e      	b.n	8009a6c <HAL_PCD_EP_SetStall+0xc0>
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	2201      	movs	r2, #1
 8009a32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68f9      	ldr	r1, [r7, #12]
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	f006 ff61 	bl	8010904 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009a42:	78fb      	ldrb	r3, [r7, #3]
 8009a44:	f003 030f 	and.w	r3, r3, #15
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d10a      	bne.n	8009a62 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6818      	ldr	r0, [r3, #0]
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	691b      	ldr	r3, [r3, #16]
 8009a54:	b2d9      	uxtb	r1, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	f007 f941 	bl	8010ce4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009a6a:	2300      	movs	r3, #0
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3710      	adds	r7, #16
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009a80:	78fb      	ldrb	r3, [r7, #3]
 8009a82:	f003 020f 	and.w	r2, r3, #15
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d901      	bls.n	8009a92 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e042      	b.n	8009b18 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009a92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	da0f      	bge.n	8009aba <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009a9a:	78fb      	ldrb	r3, [r7, #3]
 8009a9c:	f003 020f 	and.w	r2, r3, #15
 8009aa0:	4613      	mov	r3, r2
 8009aa2:	00db      	lsls	r3, r3, #3
 8009aa4:	1a9b      	subs	r3, r3, r2
 8009aa6:	009b      	lsls	r3, r3, #2
 8009aa8:	3338      	adds	r3, #56	; 0x38
 8009aaa:	687a      	ldr	r2, [r7, #4]
 8009aac:	4413      	add	r3, r2
 8009aae:	3304      	adds	r3, #4
 8009ab0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	705a      	strb	r2, [r3, #1]
 8009ab8:	e00f      	b.n	8009ada <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009aba:	78fb      	ldrb	r3, [r7, #3]
 8009abc:	f003 020f 	and.w	r2, r3, #15
 8009ac0:	4613      	mov	r3, r2
 8009ac2:	00db      	lsls	r3, r3, #3
 8009ac4:	1a9b      	subs	r3, r3, r2
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	4413      	add	r3, r2
 8009ad0:	3304      	adds	r3, #4
 8009ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2200      	movs	r2, #0
 8009ade:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	f003 030f 	and.w	r3, r3, #15
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d101      	bne.n	8009afa <HAL_PCD_EP_ClrStall+0x86>
 8009af6:	2302      	movs	r3, #2
 8009af8:	e00e      	b.n	8009b18 <HAL_PCD_EP_ClrStall+0xa4>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2201      	movs	r2, #1
 8009afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	68f9      	ldr	r1, [r7, #12]
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f006 ff69 	bl	80109e0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009b16:	2300      	movs	r3, #0
}
 8009b18:	4618      	mov	r0, r3
 8009b1a:	3710      	adds	r7, #16
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}

08009b20 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b08a      	sub	sp, #40	; 0x28
 8009b24:	af02      	add	r7, sp, #8
 8009b26:	6078      	str	r0, [r7, #4]
 8009b28:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8009b34:	683a      	ldr	r2, [r7, #0]
 8009b36:	4613      	mov	r3, r2
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	3338      	adds	r3, #56	; 0x38
 8009b40:	687a      	ldr	r2, [r7, #4]
 8009b42:	4413      	add	r3, r2
 8009b44:	3304      	adds	r3, #4
 8009b46:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	699a      	ldr	r2, [r3, #24]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	695b      	ldr	r3, [r3, #20]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d901      	bls.n	8009b58 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8009b54:	2301      	movs	r3, #1
 8009b56:	e06c      	b.n	8009c32 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	695a      	ldr	r2, [r3, #20]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	699b      	ldr	r3, [r3, #24]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	689b      	ldr	r3, [r3, #8]
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d902      	bls.n	8009b74 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	689b      	ldr	r3, [r3, #8]
 8009b72:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	3303      	adds	r3, #3
 8009b78:	089b      	lsrs	r3, r3, #2
 8009b7a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009b7c:	e02b      	b.n	8009bd6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	695a      	ldr	r2, [r3, #20]
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	699b      	ldr	r3, [r3, #24]
 8009b86:	1ad3      	subs	r3, r2, r3
 8009b88:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	429a      	cmp	r2, r3
 8009b92:	d902      	bls.n	8009b9a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	689b      	ldr	r3, [r3, #8]
 8009b98:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009b9a:	69fb      	ldr	r3, [r7, #28]
 8009b9c:	3303      	adds	r3, #3
 8009b9e:	089b      	lsrs	r3, r3, #2
 8009ba0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	68d9      	ldr	r1, [r3, #12]
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009bb2:	b2db      	uxtb	r3, r3
 8009bb4:	9300      	str	r3, [sp, #0]
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	6978      	ldr	r0, [r7, #20]
 8009bba:	f006 fe45 	bl	8010848 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	69fb      	ldr	r3, [r7, #28]
 8009bc4:	441a      	add	r2, r3
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	699a      	ldr	r2, [r3, #24]
 8009bce:	69fb      	ldr	r3, [r7, #28]
 8009bd0:	441a      	add	r2, r3
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	015a      	lsls	r2, r3, #5
 8009bda:	693b      	ldr	r3, [r7, #16]
 8009bdc:	4413      	add	r3, r2
 8009bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009be2:	699b      	ldr	r3, [r3, #24]
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	69ba      	ldr	r2, [r7, #24]
 8009be8:	429a      	cmp	r2, r3
 8009bea:	d809      	bhi.n	8009c00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	699a      	ldr	r2, [r3, #24]
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d203      	bcs.n	8009c00 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1be      	bne.n	8009b7e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	695a      	ldr	r2, [r3, #20]
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	699b      	ldr	r3, [r3, #24]
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d811      	bhi.n	8009c30 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	f003 030f 	and.w	r3, r3, #15
 8009c12:	2201      	movs	r2, #1
 8009c14:	fa02 f303 	lsl.w	r3, r2, r3
 8009c18:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	43db      	mvns	r3, r3
 8009c26:	6939      	ldr	r1, [r7, #16]
 8009c28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009c2c:	4013      	ands	r3, r2
 8009c2e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3720      	adds	r7, #32
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
 8009c44:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	333c      	adds	r3, #60	; 0x3c
 8009c54:	3304      	adds	r3, #4
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	693b      	ldr	r3, [r7, #16]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c66:	689b      	ldr	r3, [r3, #8]
 8009c68:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	2b01      	cmp	r3, #1
 8009c70:	f040 80a0 	bne.w	8009db4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	f003 0308 	and.w	r3, r3, #8
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d015      	beq.n	8009caa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	4a72      	ldr	r2, [pc, #456]	; (8009e4c <PCD_EP_OutXfrComplete_int+0x210>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	f240 80dd 	bls.w	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009c88:	68bb      	ldr	r3, [r7, #8]
 8009c8a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	f000 80d7 	beq.w	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	015a      	lsls	r2, r3, #5
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	4413      	add	r3, r2
 8009c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ca0:	461a      	mov	r2, r3
 8009ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ca6:	6093      	str	r3, [r2, #8]
 8009ca8:	e0cb      	b.n	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	f003 0320 	and.w	r3, r3, #32
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d009      	beq.n	8009cc8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cc0:	461a      	mov	r2, r3
 8009cc2:	2320      	movs	r3, #32
 8009cc4:	6093      	str	r3, [r2, #8]
 8009cc6:	e0bc      	b.n	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	f040 80b7 	bne.w	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	4a5d      	ldr	r2, [pc, #372]	; (8009e4c <PCD_EP_OutXfrComplete_int+0x210>)
 8009cd8:	4293      	cmp	r3, r2
 8009cda:	d90f      	bls.n	8009cfc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d00a      	beq.n	8009cfc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	015a      	lsls	r2, r3, #5
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	4413      	add	r3, r2
 8009cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009cf8:	6093      	str	r3, [r2, #8]
 8009cfa:	e0a2      	b.n	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009cfc:	6879      	ldr	r1, [r7, #4]
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	4613      	mov	r3, r2
 8009d02:	00db      	lsls	r3, r3, #3
 8009d04:	1a9b      	subs	r3, r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	440b      	add	r3, r1
 8009d0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009d0e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	0159      	lsls	r1, r3, #5
 8009d14:	693b      	ldr	r3, [r7, #16]
 8009d16:	440b      	add	r3, r1
 8009d18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d1c:	691b      	ldr	r3, [r3, #16]
 8009d1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009d22:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	4613      	mov	r3, r2
 8009d2a:	00db      	lsls	r3, r3, #3
 8009d2c:	1a9b      	subs	r3, r3, r2
 8009d2e:	009b      	lsls	r3, r3, #2
 8009d30:	4403      	add	r3, r0
 8009d32:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009d36:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009d38:	6879      	ldr	r1, [r7, #4]
 8009d3a:	683a      	ldr	r2, [r7, #0]
 8009d3c:	4613      	mov	r3, r2
 8009d3e:	00db      	lsls	r3, r3, #3
 8009d40:	1a9b      	subs	r3, r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009d4a:	6819      	ldr	r1, [r3, #0]
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	683a      	ldr	r2, [r7, #0]
 8009d50:	4613      	mov	r3, r2
 8009d52:	00db      	lsls	r3, r3, #3
 8009d54:	1a9b      	subs	r3, r3, r2
 8009d56:	009b      	lsls	r3, r3, #2
 8009d58:	4403      	add	r3, r0
 8009d5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4419      	add	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	683a      	ldr	r2, [r7, #0]
 8009d66:	4613      	mov	r3, r2
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	1a9b      	subs	r3, r3, r2
 8009d6c:	009b      	lsls	r3, r3, #2
 8009d6e:	4403      	add	r3, r0
 8009d70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009d74:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d114      	bne.n	8009da6 <PCD_EP_OutXfrComplete_int+0x16a>
 8009d7c:	6879      	ldr	r1, [r7, #4]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	4613      	mov	r3, r2
 8009d82:	00db      	lsls	r3, r3, #3
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	440b      	add	r3, r1
 8009d8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d108      	bne.n	8009da6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	6818      	ldr	r0, [r3, #0]
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009d9e:	461a      	mov	r2, r3
 8009da0:	2101      	movs	r1, #1
 8009da2:	f006 ff9f 	bl	8010ce4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	b2db      	uxtb	r3, r3
 8009daa:	4619      	mov	r1, r3
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f010 f8ab 	bl	8019f08 <HAL_PCD_DataOutStageCallback>
 8009db2:	e046      	b.n	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	4a26      	ldr	r2, [pc, #152]	; (8009e50 <PCD_EP_OutXfrComplete_int+0x214>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d124      	bne.n	8009e06 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d00a      	beq.n	8009ddc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	015a      	lsls	r2, r3, #5
 8009dca:	693b      	ldr	r3, [r7, #16]
 8009dcc:	4413      	add	r3, r2
 8009dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009dd8:	6093      	str	r3, [r2, #8]
 8009dda:	e032      	b.n	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009ddc:	68bb      	ldr	r3, [r7, #8]
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d008      	beq.n	8009df8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	015a      	lsls	r2, r3, #5
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	4413      	add	r3, r2
 8009dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009df2:	461a      	mov	r2, r3
 8009df4:	2320      	movs	r3, #32
 8009df6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	b2db      	uxtb	r3, r3
 8009dfc:	4619      	mov	r1, r3
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f010 f882 	bl	8019f08 <HAL_PCD_DataOutStageCallback>
 8009e04:	e01d      	b.n	8009e42 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d114      	bne.n	8009e36 <PCD_EP_OutXfrComplete_int+0x1fa>
 8009e0c:	6879      	ldr	r1, [r7, #4]
 8009e0e:	683a      	ldr	r2, [r7, #0]
 8009e10:	4613      	mov	r3, r2
 8009e12:	00db      	lsls	r3, r3, #3
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d108      	bne.n	8009e36 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6818      	ldr	r0, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e2e:	461a      	mov	r2, r3
 8009e30:	2100      	movs	r1, #0
 8009e32:	f006 ff57 	bl	8010ce4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	6878      	ldr	r0, [r7, #4]
 8009e3e:	f010 f863 	bl	8019f08 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3718      	adds	r7, #24
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}
 8009e4c:	4f54300a 	.word	0x4f54300a
 8009e50:	4f54310a 	.word	0x4f54310a

08009e54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b086      	sub	sp, #24
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009e68:	697b      	ldr	r3, [r7, #20]
 8009e6a:	333c      	adds	r3, #60	; 0x3c
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009e72:	683b      	ldr	r3, [r7, #0]
 8009e74:	015a      	lsls	r2, r3, #5
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	4413      	add	r3, r2
 8009e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009e7e:	689b      	ldr	r3, [r3, #8]
 8009e80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	4a15      	ldr	r2, [pc, #84]	; (8009edc <PCD_EP_OutSetupPacket_int+0x88>)
 8009e86:	4293      	cmp	r3, r2
 8009e88:	d90e      	bls.n	8009ea8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d009      	beq.n	8009ea8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009e94:	683b      	ldr	r3, [r7, #0]
 8009e96:	015a      	lsls	r2, r3, #5
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	4413      	add	r3, r2
 8009e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ea0:	461a      	mov	r2, r3
 8009ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ea6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f010 f81b 	bl	8019ee4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	4a0a      	ldr	r2, [pc, #40]	; (8009edc <PCD_EP_OutSetupPacket_int+0x88>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d90c      	bls.n	8009ed0 <PCD_EP_OutSetupPacket_int+0x7c>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d108      	bne.n	8009ed0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6818      	ldr	r0, [r3, #0]
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ec8:	461a      	mov	r2, r3
 8009eca:	2101      	movs	r1, #1
 8009ecc:	f006 ff0a 	bl	8010ce4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3718      	adds	r7, #24
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	4f54300a 	.word	0x4f54300a

08009ee0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
 8009eec:	4613      	mov	r3, r2
 8009eee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ef6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009ef8:	78fb      	ldrb	r3, [r7, #3]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d107      	bne.n	8009f0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009efe:	883b      	ldrh	r3, [r7, #0]
 8009f00:	0419      	lsls	r1, r3, #16
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68ba      	ldr	r2, [r7, #8]
 8009f08:	430a      	orrs	r2, r1
 8009f0a:	629a      	str	r2, [r3, #40]	; 0x28
 8009f0c:	e028      	b.n	8009f60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f14:	0c1b      	lsrs	r3, r3, #16
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	4413      	add	r3, r2
 8009f1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73fb      	strb	r3, [r7, #15]
 8009f20:	e00d      	b.n	8009f3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681a      	ldr	r2, [r3, #0]
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	3340      	adds	r3, #64	; 0x40
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	4413      	add	r3, r2
 8009f2e:	685b      	ldr	r3, [r3, #4]
 8009f30:	0c1b      	lsrs	r3, r3, #16
 8009f32:	68ba      	ldr	r2, [r7, #8]
 8009f34:	4413      	add	r3, r2
 8009f36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009f38:	7bfb      	ldrb	r3, [r7, #15]
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	73fb      	strb	r3, [r7, #15]
 8009f3e:	7bfa      	ldrb	r2, [r7, #15]
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	3b01      	subs	r3, #1
 8009f44:	429a      	cmp	r2, r3
 8009f46:	d3ec      	bcc.n	8009f22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009f48:	883b      	ldrh	r3, [r7, #0]
 8009f4a:	0418      	lsls	r0, r3, #16
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6819      	ldr	r1, [r3, #0]
 8009f50:	78fb      	ldrb	r3, [r7, #3]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	4302      	orrs	r2, r0
 8009f58:	3340      	adds	r3, #64	; 0x40
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	440b      	add	r3, r1
 8009f5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3714      	adds	r7, #20
 8009f66:	46bd      	mov	sp, r7
 8009f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6c:	4770      	bx	lr

08009f6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	b083      	sub	sp, #12
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
 8009f76:	460b      	mov	r3, r1
 8009f78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	887a      	ldrh	r2, [r7, #2]
 8009f80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009f82:	2300      	movs	r3, #0
}
 8009f84:	4618      	mov	r0, r3
 8009f86:	370c      	adds	r7, #12
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr

08009f90 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009f90:	b480      	push	{r7}
 8009f92:	b085      	sub	sp, #20
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	699b      	ldr	r3, [r3, #24]
 8009fb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fbe:	4b05      	ldr	r3, [pc, #20]	; (8009fd4 <HAL_PCDEx_ActivateLPM+0x44>)
 8009fc0:	4313      	orrs	r3, r2
 8009fc2:	68fa      	ldr	r2, [r7, #12]
 8009fc4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009fc6:	2300      	movs	r3, #0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3714      	adds	r7, #20
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd2:	4770      	bx	lr
 8009fd4:	10000003 	.word	0x10000003

08009fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b086      	sub	sp, #24
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d101      	bne.n	8009fee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8009fea:	2301      	movs	r3, #1
 8009fec:	e291      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 8087 	beq.w	800a10a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ffc:	4b96      	ldr	r3, [pc, #600]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 8009ffe:	689b      	ldr	r3, [r3, #8]
 800a000:	f003 030c 	and.w	r3, r3, #12
 800a004:	2b04      	cmp	r3, #4
 800a006:	d00c      	beq.n	800a022 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a008:	4b93      	ldr	r3, [pc, #588]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a00a:	689b      	ldr	r3, [r3, #8]
 800a00c:	f003 030c 	and.w	r3, r3, #12
 800a010:	2b08      	cmp	r3, #8
 800a012:	d112      	bne.n	800a03a <HAL_RCC_OscConfig+0x62>
 800a014:	4b90      	ldr	r3, [pc, #576]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a016:	685b      	ldr	r3, [r3, #4]
 800a018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a01c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a020:	d10b      	bne.n	800a03a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a022:	4b8d      	ldr	r3, [pc, #564]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d06c      	beq.n	800a108 <HAL_RCC_OscConfig+0x130>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d168      	bne.n	800a108 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800a036:	2301      	movs	r3, #1
 800a038:	e26b      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a042:	d106      	bne.n	800a052 <HAL_RCC_OscConfig+0x7a>
 800a044:	4b84      	ldr	r3, [pc, #528]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a83      	ldr	r2, [pc, #524]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a04a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	e02e      	b.n	800a0b0 <HAL_RCC_OscConfig+0xd8>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	685b      	ldr	r3, [r3, #4]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10c      	bne.n	800a074 <HAL_RCC_OscConfig+0x9c>
 800a05a:	4b7f      	ldr	r3, [pc, #508]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	4a7e      	ldr	r2, [pc, #504]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a064:	6013      	str	r3, [r2, #0]
 800a066:	4b7c      	ldr	r3, [pc, #496]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a7b      	ldr	r2, [pc, #492]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a06c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a070:	6013      	str	r3, [r2, #0]
 800a072:	e01d      	b.n	800a0b0 <HAL_RCC_OscConfig+0xd8>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a07c:	d10c      	bne.n	800a098 <HAL_RCC_OscConfig+0xc0>
 800a07e:	4b76      	ldr	r3, [pc, #472]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a75      	ldr	r2, [pc, #468]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a084:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a088:	6013      	str	r3, [r2, #0]
 800a08a:	4b73      	ldr	r3, [pc, #460]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a72      	ldr	r2, [pc, #456]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	e00b      	b.n	800a0b0 <HAL_RCC_OscConfig+0xd8>
 800a098:	4b6f      	ldr	r3, [pc, #444]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a6e      	ldr	r2, [pc, #440]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a09e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	4b6c      	ldr	r3, [pc, #432]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a6b      	ldr	r2, [pc, #428]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a0aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a0ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	685b      	ldr	r3, [r3, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d013      	beq.n	800a0e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0b8:	f7fd fa56 	bl	8007568 <HAL_GetTick>
 800a0bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0be:	e008      	b.n	800a0d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0c0:	f7fd fa52 	bl	8007568 <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	693b      	ldr	r3, [r7, #16]
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b64      	cmp	r3, #100	; 0x64
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e21f      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a0d2:	4b61      	ldr	r3, [pc, #388]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0f0      	beq.n	800a0c0 <HAL_RCC_OscConfig+0xe8>
 800a0de:	e014      	b.n	800a10a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0e0:	f7fd fa42 	bl	8007568 <HAL_GetTick>
 800a0e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a0e8:	f7fd fa3e 	bl	8007568 <HAL_GetTick>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b64      	cmp	r3, #100	; 0x64
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e20b      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a0fa:	4b57      	ldr	r3, [pc, #348]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a102:	2b00      	cmp	r3, #0
 800a104:	d1f0      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x110>
 800a106:	e000      	b.n	800a10a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f003 0302 	and.w	r3, r3, #2
 800a112:	2b00      	cmp	r3, #0
 800a114:	d069      	beq.n	800a1ea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800a116:	4b50      	ldr	r3, [pc, #320]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	f003 030c 	and.w	r3, r3, #12
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d00b      	beq.n	800a13a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a122:	4b4d      	ldr	r3, [pc, #308]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a124:	689b      	ldr	r3, [r3, #8]
 800a126:	f003 030c 	and.w	r3, r3, #12
 800a12a:	2b08      	cmp	r3, #8
 800a12c:	d11c      	bne.n	800a168 <HAL_RCC_OscConfig+0x190>
 800a12e:	4b4a      	ldr	r3, [pc, #296]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a136:	2b00      	cmp	r3, #0
 800a138:	d116      	bne.n	800a168 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a13a:	4b47      	ldr	r3, [pc, #284]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d005      	beq.n	800a152 <HAL_RCC_OscConfig+0x17a>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d001      	beq.n	800a152 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a14e:	2301      	movs	r3, #1
 800a150:	e1df      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a152:	4b41      	ldr	r3, [pc, #260]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	00db      	lsls	r3, r3, #3
 800a160:	493d      	ldr	r1, [pc, #244]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a162:	4313      	orrs	r3, r2
 800a164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a166:	e040      	b.n	800a1ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d023      	beq.n	800a1b8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a170:	4b39      	ldr	r3, [pc, #228]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	4a38      	ldr	r2, [pc, #224]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a176:	f043 0301 	orr.w	r3, r3, #1
 800a17a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a17c:	f7fd f9f4 	bl	8007568 <HAL_GetTick>
 800a180:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a182:	e008      	b.n	800a196 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a184:	f7fd f9f0 	bl	8007568 <HAL_GetTick>
 800a188:	4602      	mov	r2, r0
 800a18a:	693b      	ldr	r3, [r7, #16]
 800a18c:	1ad3      	subs	r3, r2, r3
 800a18e:	2b02      	cmp	r3, #2
 800a190:	d901      	bls.n	800a196 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800a192:	2303      	movs	r3, #3
 800a194:	e1bd      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a196:	4b30      	ldr	r3, [pc, #192]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0302 	and.w	r3, r3, #2
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0f0      	beq.n	800a184 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1a2:	4b2d      	ldr	r3, [pc, #180]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	00db      	lsls	r3, r3, #3
 800a1b0:	4929      	ldr	r1, [pc, #164]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	600b      	str	r3, [r1, #0]
 800a1b6:	e018      	b.n	800a1ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1b8:	4b27      	ldr	r3, [pc, #156]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a26      	ldr	r2, [pc, #152]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a1be:	f023 0301 	bic.w	r3, r3, #1
 800a1c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1c4:	f7fd f9d0 	bl	8007568 <HAL_GetTick>
 800a1c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1ca:	e008      	b.n	800a1de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a1cc:	f7fd f9cc 	bl	8007568 <HAL_GetTick>
 800a1d0:	4602      	mov	r2, r0
 800a1d2:	693b      	ldr	r3, [r7, #16]
 800a1d4:	1ad3      	subs	r3, r2, r3
 800a1d6:	2b02      	cmp	r3, #2
 800a1d8:	d901      	bls.n	800a1de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e199      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a1de:	4b1e      	ldr	r3, [pc, #120]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d1f0      	bne.n	800a1cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0308 	and.w	r3, r3, #8
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d038      	beq.n	800a268 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d019      	beq.n	800a232 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a1fe:	4b16      	ldr	r3, [pc, #88]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a200:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a202:	4a15      	ldr	r2, [pc, #84]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a204:	f043 0301 	orr.w	r3, r3, #1
 800a208:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a20a:	f7fd f9ad 	bl	8007568 <HAL_GetTick>
 800a20e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a210:	e008      	b.n	800a224 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a212:	f7fd f9a9 	bl	8007568 <HAL_GetTick>
 800a216:	4602      	mov	r2, r0
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	1ad3      	subs	r3, r2, r3
 800a21c:	2b02      	cmp	r3, #2
 800a21e:	d901      	bls.n	800a224 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800a220:	2303      	movs	r3, #3
 800a222:	e176      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a224:	4b0c      	ldr	r3, [pc, #48]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a226:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a228:	f003 0302 	and.w	r3, r3, #2
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d0f0      	beq.n	800a212 <HAL_RCC_OscConfig+0x23a>
 800a230:	e01a      	b.n	800a268 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a232:	4b09      	ldr	r3, [pc, #36]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a236:	4a08      	ldr	r2, [pc, #32]	; (800a258 <HAL_RCC_OscConfig+0x280>)
 800a238:	f023 0301 	bic.w	r3, r3, #1
 800a23c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a23e:	f7fd f993 	bl	8007568 <HAL_GetTick>
 800a242:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a244:	e00a      	b.n	800a25c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a246:	f7fd f98f 	bl	8007568 <HAL_GetTick>
 800a24a:	4602      	mov	r2, r0
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	1ad3      	subs	r3, r2, r3
 800a250:	2b02      	cmp	r3, #2
 800a252:	d903      	bls.n	800a25c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e15c      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
 800a258:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a25c:	4b91      	ldr	r3, [pc, #580]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a260:	f003 0302 	and.w	r3, r3, #2
 800a264:	2b00      	cmp	r3, #0
 800a266:	d1ee      	bne.n	800a246 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 0304 	and.w	r3, r3, #4
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 80a4 	beq.w	800a3be <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a276:	4b8b      	ldr	r3, [pc, #556]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d10d      	bne.n	800a29e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800a282:	4b88      	ldr	r3, [pc, #544]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	4a87      	ldr	r2, [pc, #540]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a28c:	6413      	str	r3, [r2, #64]	; 0x40
 800a28e:	4b85      	ldr	r3, [pc, #532]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a296:	60bb      	str	r3, [r7, #8]
 800a298:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a29a:	2301      	movs	r3, #1
 800a29c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a29e:	4b82      	ldr	r3, [pc, #520]	; (800a4a8 <HAL_RCC_OscConfig+0x4d0>)
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d118      	bne.n	800a2dc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800a2aa:	4b7f      	ldr	r3, [pc, #508]	; (800a4a8 <HAL_RCC_OscConfig+0x4d0>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	4a7e      	ldr	r2, [pc, #504]	; (800a4a8 <HAL_RCC_OscConfig+0x4d0>)
 800a2b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a2b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a2b6:	f7fd f957 	bl	8007568 <HAL_GetTick>
 800a2ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2bc:	e008      	b.n	800a2d0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a2be:	f7fd f953 	bl	8007568 <HAL_GetTick>
 800a2c2:	4602      	mov	r2, r0
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	1ad3      	subs	r3, r2, r3
 800a2c8:	2b64      	cmp	r3, #100	; 0x64
 800a2ca:	d901      	bls.n	800a2d0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800a2cc:	2303      	movs	r3, #3
 800a2ce:	e120      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a2d0:	4b75      	ldr	r3, [pc, #468]	; (800a4a8 <HAL_RCC_OscConfig+0x4d0>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d0f0      	beq.n	800a2be <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	689b      	ldr	r3, [r3, #8]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d106      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x31a>
 800a2e4:	4b6f      	ldr	r3, [pc, #444]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a2e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2e8:	4a6e      	ldr	r2, [pc, #440]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a2ea:	f043 0301 	orr.w	r3, r3, #1
 800a2ee:	6713      	str	r3, [r2, #112]	; 0x70
 800a2f0:	e02d      	b.n	800a34e <HAL_RCC_OscConfig+0x376>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	689b      	ldr	r3, [r3, #8]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d10c      	bne.n	800a314 <HAL_RCC_OscConfig+0x33c>
 800a2fa:	4b6a      	ldr	r3, [pc, #424]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a2fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2fe:	4a69      	ldr	r2, [pc, #420]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a300:	f023 0301 	bic.w	r3, r3, #1
 800a304:	6713      	str	r3, [r2, #112]	; 0x70
 800a306:	4b67      	ldr	r3, [pc, #412]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a30a:	4a66      	ldr	r2, [pc, #408]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a30c:	f023 0304 	bic.w	r3, r3, #4
 800a310:	6713      	str	r3, [r2, #112]	; 0x70
 800a312:	e01c      	b.n	800a34e <HAL_RCC_OscConfig+0x376>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	689b      	ldr	r3, [r3, #8]
 800a318:	2b05      	cmp	r3, #5
 800a31a:	d10c      	bne.n	800a336 <HAL_RCC_OscConfig+0x35e>
 800a31c:	4b61      	ldr	r3, [pc, #388]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a31e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a320:	4a60      	ldr	r2, [pc, #384]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a322:	f043 0304 	orr.w	r3, r3, #4
 800a326:	6713      	str	r3, [r2, #112]	; 0x70
 800a328:	4b5e      	ldr	r3, [pc, #376]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a32a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a32c:	4a5d      	ldr	r2, [pc, #372]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a32e:	f043 0301 	orr.w	r3, r3, #1
 800a332:	6713      	str	r3, [r2, #112]	; 0x70
 800a334:	e00b      	b.n	800a34e <HAL_RCC_OscConfig+0x376>
 800a336:	4b5b      	ldr	r3, [pc, #364]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a33a:	4a5a      	ldr	r2, [pc, #360]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a33c:	f023 0301 	bic.w	r3, r3, #1
 800a340:	6713      	str	r3, [r2, #112]	; 0x70
 800a342:	4b58      	ldr	r3, [pc, #352]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a346:	4a57      	ldr	r2, [pc, #348]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a348:	f023 0304 	bic.w	r3, r3, #4
 800a34c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	689b      	ldr	r3, [r3, #8]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d015      	beq.n	800a382 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a356:	f7fd f907 	bl	8007568 <HAL_GetTick>
 800a35a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a35c:	e00a      	b.n	800a374 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a35e:	f7fd f903 	bl	8007568 <HAL_GetTick>
 800a362:	4602      	mov	r2, r0
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	1ad3      	subs	r3, r2, r3
 800a368:	f241 3288 	movw	r2, #5000	; 0x1388
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d901      	bls.n	800a374 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800a370:	2303      	movs	r3, #3
 800a372:	e0ce      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a374:	4b4b      	ldr	r3, [pc, #300]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a378:	f003 0302 	and.w	r3, r3, #2
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0ee      	beq.n	800a35e <HAL_RCC_OscConfig+0x386>
 800a380:	e014      	b.n	800a3ac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a382:	f7fd f8f1 	bl	8007568 <HAL_GetTick>
 800a386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a388:	e00a      	b.n	800a3a0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a38a:	f7fd f8ed 	bl	8007568 <HAL_GetTick>
 800a38e:	4602      	mov	r2, r0
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	1ad3      	subs	r3, r2, r3
 800a394:	f241 3288 	movw	r2, #5000	; 0x1388
 800a398:	4293      	cmp	r3, r2
 800a39a:	d901      	bls.n	800a3a0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800a39c:	2303      	movs	r3, #3
 800a39e:	e0b8      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a3a0:	4b40      	ldr	r3, [pc, #256]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a3a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a3a4:	f003 0302 	and.w	r3, r3, #2
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d1ee      	bne.n	800a38a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a3ac:	7dfb      	ldrb	r3, [r7, #23]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d105      	bne.n	800a3be <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a3b2:	4b3c      	ldr	r3, [pc, #240]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b6:	4a3b      	ldr	r2, [pc, #236]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a3b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a3bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	f000 80a4 	beq.w	800a510 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a3c8:	4b36      	ldr	r3, [pc, #216]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a3ca:	689b      	ldr	r3, [r3, #8]
 800a3cc:	f003 030c 	and.w	r3, r3, #12
 800a3d0:	2b08      	cmp	r3, #8
 800a3d2:	d06b      	beq.n	800a4ac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	2b02      	cmp	r3, #2
 800a3da:	d149      	bne.n	800a470 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a3dc:	4b31      	ldr	r3, [pc, #196]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a30      	ldr	r2, [pc, #192]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a3e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a3e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a3e8:	f7fd f8be 	bl	8007568 <HAL_GetTick>
 800a3ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a3f0:	f7fd f8ba 	bl	8007568 <HAL_GetTick>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e087      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a402:	4b28      	ldr	r3, [pc, #160]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d1f0      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	69da      	ldr	r2, [r3, #28]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	431a      	orrs	r2, r3
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a41c:	019b      	lsls	r3, r3, #6
 800a41e:	431a      	orrs	r2, r3
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a424:	085b      	lsrs	r3, r3, #1
 800a426:	3b01      	subs	r3, #1
 800a428:	041b      	lsls	r3, r3, #16
 800a42a:	431a      	orrs	r2, r3
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a430:	061b      	lsls	r3, r3, #24
 800a432:	4313      	orrs	r3, r2
 800a434:	4a1b      	ldr	r2, [pc, #108]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a436:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a43a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a43c:	4b19      	ldr	r3, [pc, #100]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	4a18      	ldr	r2, [pc, #96]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a446:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a448:	f7fd f88e 	bl	8007568 <HAL_GetTick>
 800a44c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a44e:	e008      	b.n	800a462 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a450:	f7fd f88a 	bl	8007568 <HAL_GetTick>
 800a454:	4602      	mov	r2, r0
 800a456:	693b      	ldr	r3, [r7, #16]
 800a458:	1ad3      	subs	r3, r2, r3
 800a45a:	2b02      	cmp	r3, #2
 800a45c:	d901      	bls.n	800a462 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800a45e:	2303      	movs	r3, #3
 800a460:	e057      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a462:	4b10      	ldr	r3, [pc, #64]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d0f0      	beq.n	800a450 <HAL_RCC_OscConfig+0x478>
 800a46e:	e04f      	b.n	800a510 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a470:	4b0c      	ldr	r3, [pc, #48]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a0b      	ldr	r2, [pc, #44]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a476:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a47a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a47c:	f7fd f874 	bl	8007568 <HAL_GetTick>
 800a480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a482:	e008      	b.n	800a496 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a484:	f7fd f870 	bl	8007568 <HAL_GetTick>
 800a488:	4602      	mov	r2, r0
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	1ad3      	subs	r3, r2, r3
 800a48e:	2b02      	cmp	r3, #2
 800a490:	d901      	bls.n	800a496 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800a492:	2303      	movs	r3, #3
 800a494:	e03d      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a496:	4b03      	ldr	r3, [pc, #12]	; (800a4a4 <HAL_RCC_OscConfig+0x4cc>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d1f0      	bne.n	800a484 <HAL_RCC_OscConfig+0x4ac>
 800a4a2:	e035      	b.n	800a510 <HAL_RCC_OscConfig+0x538>
 800a4a4:	40023800 	.word	0x40023800
 800a4a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800a4ac:	4b1b      	ldr	r3, [pc, #108]	; (800a51c <HAL_RCC_OscConfig+0x544>)
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	699b      	ldr	r3, [r3, #24]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d028      	beq.n	800a50c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d121      	bne.n	800a50c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d11a      	bne.n	800a50c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4d6:	68fa      	ldr	r2, [r7, #12]
 800a4d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a4dc:	4013      	ands	r3, r2
 800a4de:	687a      	ldr	r2, [r7, #4]
 800a4e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a4e2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d111      	bne.n	800a50c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4f2:	085b      	lsrs	r3, r3, #1
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d107      	bne.n	800a50c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a506:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800a508:	429a      	cmp	r2, r3
 800a50a:	d001      	beq.n	800a510 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e000      	b.n	800a512 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	3718      	adds	r7, #24
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}
 800a51a:	bf00      	nop
 800a51c:	40023800 	.word	0x40023800

0800a520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b084      	sub	sp, #16
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800a52a:	2300      	movs	r3, #0
 800a52c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e0d0      	b.n	800a6da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a538:	4b6a      	ldr	r3, [pc, #424]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	f003 030f 	and.w	r3, r3, #15
 800a540:	683a      	ldr	r2, [r7, #0]
 800a542:	429a      	cmp	r2, r3
 800a544:	d910      	bls.n	800a568 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a546:	4b67      	ldr	r3, [pc, #412]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f023 020f 	bic.w	r2, r3, #15
 800a54e:	4965      	ldr	r1, [pc, #404]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	4313      	orrs	r3, r2
 800a554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a556:	4b63      	ldr	r3, [pc, #396]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f003 030f 	and.w	r3, r3, #15
 800a55e:	683a      	ldr	r2, [r7, #0]
 800a560:	429a      	cmp	r2, r3
 800a562:	d001      	beq.n	800a568 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a564:	2301      	movs	r3, #1
 800a566:	e0b8      	b.n	800a6da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 0302 	and.w	r3, r3, #2
 800a570:	2b00      	cmp	r3, #0
 800a572:	d020      	beq.n	800a5b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f003 0304 	and.w	r3, r3, #4
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d005      	beq.n	800a58c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a580:	4b59      	ldr	r3, [pc, #356]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	4a58      	ldr	r2, [pc, #352]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a586:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a58a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0308 	and.w	r3, r3, #8
 800a594:	2b00      	cmp	r3, #0
 800a596:	d005      	beq.n	800a5a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a598:	4b53      	ldr	r3, [pc, #332]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	4a52      	ldr	r2, [pc, #328]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a59e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a5a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5a4:	4b50      	ldr	r3, [pc, #320]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5a6:	689b      	ldr	r3, [r3, #8]
 800a5a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	689b      	ldr	r3, [r3, #8]
 800a5b0:	494d      	ldr	r1, [pc, #308]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f003 0301 	and.w	r3, r3, #1
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d040      	beq.n	800a644 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	685b      	ldr	r3, [r3, #4]
 800a5c6:	2b01      	cmp	r3, #1
 800a5c8:	d107      	bne.n	800a5da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a5ca:	4b47      	ldr	r3, [pc, #284]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d115      	bne.n	800a602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	e07f      	b.n	800a6da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d107      	bne.n	800a5f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a5e2:	4b41      	ldr	r3, [pc, #260]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d109      	bne.n	800a602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e073      	b.n	800a6da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5f2:	4b3d      	ldr	r3, [pc, #244]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	f003 0302 	and.w	r3, r3, #2
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d101      	bne.n	800a602 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800a5fe:	2301      	movs	r3, #1
 800a600:	e06b      	b.n	800a6da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a602:	4b39      	ldr	r3, [pc, #228]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a604:	689b      	ldr	r3, [r3, #8]
 800a606:	f023 0203 	bic.w	r2, r3, #3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	685b      	ldr	r3, [r3, #4]
 800a60e:	4936      	ldr	r1, [pc, #216]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a610:	4313      	orrs	r3, r2
 800a612:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a614:	f7fc ffa8 	bl	8007568 <HAL_GetTick>
 800a618:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a61a:	e00a      	b.n	800a632 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a61c:	f7fc ffa4 	bl	8007568 <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	f241 3288 	movw	r2, #5000	; 0x1388
 800a62a:	4293      	cmp	r3, r2
 800a62c:	d901      	bls.n	800a632 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e053      	b.n	800a6da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a632:	4b2d      	ldr	r3, [pc, #180]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a634:	689b      	ldr	r3, [r3, #8]
 800a636:	f003 020c 	and.w	r2, r3, #12
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	009b      	lsls	r3, r3, #2
 800a640:	429a      	cmp	r2, r3
 800a642:	d1eb      	bne.n	800a61c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a644:	4b27      	ldr	r3, [pc, #156]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	f003 030f 	and.w	r3, r3, #15
 800a64c:	683a      	ldr	r2, [r7, #0]
 800a64e:	429a      	cmp	r2, r3
 800a650:	d210      	bcs.n	800a674 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a652:	4b24      	ldr	r3, [pc, #144]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	f023 020f 	bic.w	r2, r3, #15
 800a65a:	4922      	ldr	r1, [pc, #136]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a65c:	683b      	ldr	r3, [r7, #0]
 800a65e:	4313      	orrs	r3, r2
 800a660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a662:	4b20      	ldr	r3, [pc, #128]	; (800a6e4 <HAL_RCC_ClockConfig+0x1c4>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	429a      	cmp	r2, r3
 800a66e:	d001      	beq.n	800a674 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e032      	b.n	800a6da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	f003 0304 	and.w	r3, r3, #4
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d008      	beq.n	800a692 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a680:	4b19      	ldr	r3, [pc, #100]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	68db      	ldr	r3, [r3, #12]
 800a68c:	4916      	ldr	r1, [pc, #88]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a68e:	4313      	orrs	r3, r2
 800a690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f003 0308 	and.w	r3, r3, #8
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d009      	beq.n	800a6b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a69e:	4b12      	ldr	r3, [pc, #72]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	691b      	ldr	r3, [r3, #16]
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	490e      	ldr	r1, [pc, #56]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a6b2:	f000 f821 	bl	800a6f8 <HAL_RCC_GetSysClockFreq>
 800a6b6:	4601      	mov	r1, r0
 800a6b8:	4b0b      	ldr	r3, [pc, #44]	; (800a6e8 <HAL_RCC_ClockConfig+0x1c8>)
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	091b      	lsrs	r3, r3, #4
 800a6be:	f003 030f 	and.w	r3, r3, #15
 800a6c2:	4a0a      	ldr	r2, [pc, #40]	; (800a6ec <HAL_RCC_ClockConfig+0x1cc>)
 800a6c4:	5cd3      	ldrb	r3, [r2, r3]
 800a6c6:	fa21 f303 	lsr.w	r3, r1, r3
 800a6ca:	4a09      	ldr	r2, [pc, #36]	; (800a6f0 <HAL_RCC_ClockConfig+0x1d0>)
 800a6cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a6ce:	4b09      	ldr	r3, [pc, #36]	; (800a6f4 <HAL_RCC_ClockConfig+0x1d4>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	f7fb f948 	bl	8005968 <HAL_InitTick>

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3710      	adds	r7, #16
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	40023c00 	.word	0x40023c00
 800a6e8:	40023800 	.word	0x40023800
 800a6ec:	0801d714 	.word	0x0801d714
 800a6f0:	20000000 	.word	0x20000000
 800a6f4:	20000004 	.word	0x20000004

0800a6f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a6fa:	b085      	sub	sp, #20
 800a6fc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800a6fe:	2300      	movs	r3, #0
 800a700:	607b      	str	r3, [r7, #4]
 800a702:	2300      	movs	r3, #0
 800a704:	60fb      	str	r3, [r7, #12]
 800a706:	2300      	movs	r3, #0
 800a708:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800a70a:	2300      	movs	r3, #0
 800a70c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a70e:	4b63      	ldr	r3, [pc, #396]	; (800a89c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a710:	689b      	ldr	r3, [r3, #8]
 800a712:	f003 030c 	and.w	r3, r3, #12
 800a716:	2b04      	cmp	r3, #4
 800a718:	d007      	beq.n	800a72a <HAL_RCC_GetSysClockFreq+0x32>
 800a71a:	2b08      	cmp	r3, #8
 800a71c:	d008      	beq.n	800a730 <HAL_RCC_GetSysClockFreq+0x38>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f040 80b4 	bne.w	800a88c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a724:	4b5e      	ldr	r3, [pc, #376]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a726:	60bb      	str	r3, [r7, #8]
      break;
 800a728:	e0b3      	b.n	800a892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a72a:	4b5e      	ldr	r3, [pc, #376]	; (800a8a4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800a72c:	60bb      	str	r3, [r7, #8]
      break;
 800a72e:	e0b0      	b.n	800a892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a730:	4b5a      	ldr	r3, [pc, #360]	; (800a89c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a732:	685b      	ldr	r3, [r3, #4]
 800a734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a738:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800a73a:	4b58      	ldr	r3, [pc, #352]	; (800a89c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a742:	2b00      	cmp	r3, #0
 800a744:	d04a      	beq.n	800a7dc <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a746:	4b55      	ldr	r3, [pc, #340]	; (800a89c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	099b      	lsrs	r3, r3, #6
 800a74c:	f04f 0400 	mov.w	r4, #0
 800a750:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a754:	f04f 0200 	mov.w	r2, #0
 800a758:	ea03 0501 	and.w	r5, r3, r1
 800a75c:	ea04 0602 	and.w	r6, r4, r2
 800a760:	4629      	mov	r1, r5
 800a762:	4632      	mov	r2, r6
 800a764:	f04f 0300 	mov.w	r3, #0
 800a768:	f04f 0400 	mov.w	r4, #0
 800a76c:	0154      	lsls	r4, r2, #5
 800a76e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a772:	014b      	lsls	r3, r1, #5
 800a774:	4619      	mov	r1, r3
 800a776:	4622      	mov	r2, r4
 800a778:	1b49      	subs	r1, r1, r5
 800a77a:	eb62 0206 	sbc.w	r2, r2, r6
 800a77e:	f04f 0300 	mov.w	r3, #0
 800a782:	f04f 0400 	mov.w	r4, #0
 800a786:	0194      	lsls	r4, r2, #6
 800a788:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a78c:	018b      	lsls	r3, r1, #6
 800a78e:	1a5b      	subs	r3, r3, r1
 800a790:	eb64 0402 	sbc.w	r4, r4, r2
 800a794:	f04f 0100 	mov.w	r1, #0
 800a798:	f04f 0200 	mov.w	r2, #0
 800a79c:	00e2      	lsls	r2, r4, #3
 800a79e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a7a2:	00d9      	lsls	r1, r3, #3
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4614      	mov	r4, r2
 800a7a8:	195b      	adds	r3, r3, r5
 800a7aa:	eb44 0406 	adc.w	r4, r4, r6
 800a7ae:	f04f 0100 	mov.w	r1, #0
 800a7b2:	f04f 0200 	mov.w	r2, #0
 800a7b6:	0262      	lsls	r2, r4, #9
 800a7b8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800a7bc:	0259      	lsls	r1, r3, #9
 800a7be:	460b      	mov	r3, r1
 800a7c0:	4614      	mov	r4, r2
 800a7c2:	4618      	mov	r0, r3
 800a7c4:	4621      	mov	r1, r4
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f04f 0400 	mov.w	r4, #0
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	4623      	mov	r3, r4
 800a7d0:	f7f6 fa52 	bl	8000c78 <__aeabi_uldivmod>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	460c      	mov	r4, r1
 800a7d8:	60fb      	str	r3, [r7, #12]
 800a7da:	e049      	b.n	800a870 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a7dc:	4b2f      	ldr	r3, [pc, #188]	; (800a89c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a7de:	685b      	ldr	r3, [r3, #4]
 800a7e0:	099b      	lsrs	r3, r3, #6
 800a7e2:	f04f 0400 	mov.w	r4, #0
 800a7e6:	f240 11ff 	movw	r1, #511	; 0x1ff
 800a7ea:	f04f 0200 	mov.w	r2, #0
 800a7ee:	ea03 0501 	and.w	r5, r3, r1
 800a7f2:	ea04 0602 	and.w	r6, r4, r2
 800a7f6:	4629      	mov	r1, r5
 800a7f8:	4632      	mov	r2, r6
 800a7fa:	f04f 0300 	mov.w	r3, #0
 800a7fe:	f04f 0400 	mov.w	r4, #0
 800a802:	0154      	lsls	r4, r2, #5
 800a804:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800a808:	014b      	lsls	r3, r1, #5
 800a80a:	4619      	mov	r1, r3
 800a80c:	4622      	mov	r2, r4
 800a80e:	1b49      	subs	r1, r1, r5
 800a810:	eb62 0206 	sbc.w	r2, r2, r6
 800a814:	f04f 0300 	mov.w	r3, #0
 800a818:	f04f 0400 	mov.w	r4, #0
 800a81c:	0194      	lsls	r4, r2, #6
 800a81e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800a822:	018b      	lsls	r3, r1, #6
 800a824:	1a5b      	subs	r3, r3, r1
 800a826:	eb64 0402 	sbc.w	r4, r4, r2
 800a82a:	f04f 0100 	mov.w	r1, #0
 800a82e:	f04f 0200 	mov.w	r2, #0
 800a832:	00e2      	lsls	r2, r4, #3
 800a834:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800a838:	00d9      	lsls	r1, r3, #3
 800a83a:	460b      	mov	r3, r1
 800a83c:	4614      	mov	r4, r2
 800a83e:	195b      	adds	r3, r3, r5
 800a840:	eb44 0406 	adc.w	r4, r4, r6
 800a844:	f04f 0100 	mov.w	r1, #0
 800a848:	f04f 0200 	mov.w	r2, #0
 800a84c:	02a2      	lsls	r2, r4, #10
 800a84e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800a852:	0299      	lsls	r1, r3, #10
 800a854:	460b      	mov	r3, r1
 800a856:	4614      	mov	r4, r2
 800a858:	4618      	mov	r0, r3
 800a85a:	4621      	mov	r1, r4
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	f04f 0400 	mov.w	r4, #0
 800a862:	461a      	mov	r2, r3
 800a864:	4623      	mov	r3, r4
 800a866:	f7f6 fa07 	bl	8000c78 <__aeabi_uldivmod>
 800a86a:	4603      	mov	r3, r0
 800a86c:	460c      	mov	r4, r1
 800a86e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800a872:	685b      	ldr	r3, [r3, #4]
 800a874:	0c1b      	lsrs	r3, r3, #16
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	3301      	adds	r3, #1
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800a880:	68fa      	ldr	r2, [r7, #12]
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	fbb2 f3f3 	udiv	r3, r2, r3
 800a888:	60bb      	str	r3, [r7, #8]
      break;
 800a88a:	e002      	b.n	800a892 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a88c:	4b04      	ldr	r3, [pc, #16]	; (800a8a0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800a88e:	60bb      	str	r3, [r7, #8]
      break;
 800a890:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a892:	68bb      	ldr	r3, [r7, #8]
}
 800a894:	4618      	mov	r0, r3
 800a896:	3714      	adds	r7, #20
 800a898:	46bd      	mov	sp, r7
 800a89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a89c:	40023800 	.word	0x40023800
 800a8a0:	00f42400 	.word	0x00f42400
 800a8a4:	007a1200 	.word	0x007a1200

0800a8a8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a8a8:	b480      	push	{r7}
 800a8aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a8ac:	4b03      	ldr	r3, [pc, #12]	; (800a8bc <HAL_RCC_GetHCLKFreq+0x14>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	20000000 	.word	0x20000000

0800a8c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a8c4:	f7ff fff0 	bl	800a8a8 <HAL_RCC_GetHCLKFreq>
 800a8c8:	4601      	mov	r1, r0
 800a8ca:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a8cc:	689b      	ldr	r3, [r3, #8]
 800a8ce:	0a9b      	lsrs	r3, r3, #10
 800a8d0:	f003 0307 	and.w	r3, r3, #7
 800a8d4:	4a03      	ldr	r2, [pc, #12]	; (800a8e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8d6:	5cd3      	ldrb	r3, [r2, r3]
 800a8d8:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	bd80      	pop	{r7, pc}
 800a8e0:	40023800 	.word	0x40023800
 800a8e4:	0801d724 	.word	0x0801d724

0800a8e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a8ec:	f7ff ffdc 	bl	800a8a8 <HAL_RCC_GetHCLKFreq>
 800a8f0:	4601      	mov	r1, r0
 800a8f2:	4b05      	ldr	r3, [pc, #20]	; (800a908 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a8f4:	689b      	ldr	r3, [r3, #8]
 800a8f6:	0b5b      	lsrs	r3, r3, #13
 800a8f8:	f003 0307 	and.w	r3, r3, #7
 800a8fc:	4a03      	ldr	r2, [pc, #12]	; (800a90c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8fe:	5cd3      	ldrb	r3, [r2, r3]
 800a900:	fa21 f303 	lsr.w	r3, r1, r3
}
 800a904:	4618      	mov	r0, r3
 800a906:	bd80      	pop	{r7, pc}
 800a908:	40023800 	.word	0x40023800
 800a90c:	0801d724 	.word	0x0801d724

0800a910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	220f      	movs	r2, #15
 800a91e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a920:	4b12      	ldr	r3, [pc, #72]	; (800a96c <HAL_RCC_GetClockConfig+0x5c>)
 800a922:	689b      	ldr	r3, [r3, #8]
 800a924:	f003 0203 	and.w	r2, r3, #3
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a92c:	4b0f      	ldr	r3, [pc, #60]	; (800a96c <HAL_RCC_GetClockConfig+0x5c>)
 800a92e:	689b      	ldr	r3, [r3, #8]
 800a930:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a938:	4b0c      	ldr	r3, [pc, #48]	; (800a96c <HAL_RCC_GetClockConfig+0x5c>)
 800a93a:	689b      	ldr	r3, [r3, #8]
 800a93c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800a944:	4b09      	ldr	r3, [pc, #36]	; (800a96c <HAL_RCC_GetClockConfig+0x5c>)
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	08db      	lsrs	r3, r3, #3
 800a94a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a952:	4b07      	ldr	r3, [pc, #28]	; (800a970 <HAL_RCC_GetClockConfig+0x60>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f003 020f 	and.w	r2, r3, #15
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	601a      	str	r2, [r3, #0]
}
 800a95e:	bf00      	nop
 800a960:	370c      	adds	r7, #12
 800a962:	46bd      	mov	sp, r7
 800a964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop
 800a96c:	40023800 	.word	0x40023800
 800a970:	40023c00 	.word	0x40023c00

0800a974 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a97c:	2300      	movs	r3, #0
 800a97e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800a980:	2300      	movs	r3, #0
 800a982:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800a984:	2300      	movs	r3, #0
 800a986:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800a988:	2300      	movs	r3, #0
 800a98a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d012      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800a99c:	4b69      	ldr	r3, [pc, #420]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a99e:	689b      	ldr	r3, [r3, #8]
 800a9a0:	4a68      	ldr	r2, [pc, #416]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9a2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800a9a6:	6093      	str	r3, [r2, #8]
 800a9a8:	4b66      	ldr	r3, [pc, #408]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9b0:	4964      	ldr	r1, [pc, #400]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d017      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a9ce:	4b5d      	ldr	r3, [pc, #372]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a9d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9dc:	4959      	ldr	r1, [pc, #356]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800a9de:	4313      	orrs	r3, r2
 800a9e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9ec:	d101      	bne.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d101      	bne.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d017      	beq.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800aa0a:	4b4e      	ldr	r3, [pc, #312]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa18:	494a      	ldr	r1, [pc, #296]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa28:	d101      	bne.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d101      	bne.n	800aa3a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800aa36:	2301      	movs	r3, #1
 800aa38:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800aa46:	2301      	movs	r3, #1
 800aa48:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f003 0320 	and.w	r3, r3, #32
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	f000 808b 	beq.w	800ab6e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800aa58:	4b3a      	ldr	r3, [pc, #232]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa5c:	4a39      	ldr	r2, [pc, #228]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa62:	6413      	str	r3, [r2, #64]	; 0x40
 800aa64:	4b37      	ldr	r3, [pc, #220]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aa66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aa6c:	60bb      	str	r3, [r7, #8]
 800aa6e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aa70:	4b35      	ldr	r3, [pc, #212]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a34      	ldr	r2, [pc, #208]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800aa76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aa7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa7c:	f7fc fd74 	bl	8007568 <HAL_GetTick>
 800aa80:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa82:	e008      	b.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800aa84:	f7fc fd70 	bl	8007568 <HAL_GetTick>
 800aa88:	4602      	mov	r2, r0
 800aa8a:	697b      	ldr	r3, [r7, #20]
 800aa8c:	1ad3      	subs	r3, r2, r3
 800aa8e:	2b64      	cmp	r3, #100	; 0x64
 800aa90:	d901      	bls.n	800aa96 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800aa92:	2303      	movs	r3, #3
 800aa94:	e31e      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800aa96:	4b2c      	ldr	r3, [pc, #176]	; (800ab48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d0f0      	beq.n	800aa84 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800aaa2:	4b28      	ldr	r3, [pc, #160]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaaa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d035      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	429a      	cmp	r2, r3
 800aabe:	d02e      	beq.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aac0:	4b20      	ldr	r3, [pc, #128]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aac2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aac8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800aaca:	4b1e      	ldr	r3, [pc, #120]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aacc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aace:	4a1d      	ldr	r2, [pc, #116]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aad4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800aad6:	4b1b      	ldr	r3, [pc, #108]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aada:	4a1a      	ldr	r2, [pc, #104]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aadc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800aae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800aae2:	4a18      	ldr	r2, [pc, #96]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800aae8:	4b16      	ldr	r3, [pc, #88]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800aaea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaec:	f003 0301 	and.w	r3, r3, #1
 800aaf0:	2b01      	cmp	r3, #1
 800aaf2:	d114      	bne.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aaf4:	f7fc fd38 	bl	8007568 <HAL_GetTick>
 800aaf8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800aafa:	e00a      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800aafc:	f7fc fd34 	bl	8007568 <HAL_GetTick>
 800ab00:	4602      	mov	r2, r0
 800ab02:	697b      	ldr	r3, [r7, #20]
 800ab04:	1ad3      	subs	r3, r2, r3
 800ab06:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d901      	bls.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800ab0e:	2303      	movs	r3, #3
 800ab10:	e2e0      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ab12:	4b0c      	ldr	r3, [pc, #48]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d0ee      	beq.n	800aafc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab2a:	d111      	bne.n	800ab50 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800ab38:	4b04      	ldr	r3, [pc, #16]	; (800ab4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800ab3a:	400b      	ands	r3, r1
 800ab3c:	4901      	ldr	r1, [pc, #4]	; (800ab44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800ab3e:	4313      	orrs	r3, r2
 800ab40:	608b      	str	r3, [r1, #8]
 800ab42:	e00b      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800ab44:	40023800 	.word	0x40023800
 800ab48:	40007000 	.word	0x40007000
 800ab4c:	0ffffcff 	.word	0x0ffffcff
 800ab50:	4bac      	ldr	r3, [pc, #688]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab52:	689b      	ldr	r3, [r3, #8]
 800ab54:	4aab      	ldr	r2, [pc, #684]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab56:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800ab5a:	6093      	str	r3, [r2, #8]
 800ab5c:	4ba9      	ldr	r3, [pc, #676]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab5e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab68:	49a6      	ldr	r1, [pc, #664]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab6a:	4313      	orrs	r3, r2
 800ab6c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 0310 	and.w	r3, r3, #16
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d010      	beq.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ab7a:	4ba2      	ldr	r3, [pc, #648]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ab80:	4aa0      	ldr	r2, [pc, #640]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ab86:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800ab8a:	4b9e      	ldr	r3, [pc, #632]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab8c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab94:	499b      	ldr	r1, [pc, #620]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ab96:	4313      	orrs	r3, r2
 800ab98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00a      	beq.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800aba8:	4b96      	ldr	r3, [pc, #600]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abae:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800abb6:	4993      	ldr	r1, [pc, #588]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abb8:	4313      	orrs	r3, r2
 800abba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00a      	beq.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800abca:	4b8e      	ldr	r3, [pc, #568]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abd0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800abd8:	498a      	ldr	r1, [pc, #552]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d00a      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800abec:	4b85      	ldr	r3, [pc, #532]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abfa:	4982      	ldr	r1, [pc, #520]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800abfc:	4313      	orrs	r3, r2
 800abfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00a      	beq.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ac0e:	4b7d      	ldr	r3, [pc, #500]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac1c:	4979      	ldr	r1, [pc, #484]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d00a      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ac30:	4b74      	ldr	r3, [pc, #464]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac36:	f023 0203 	bic.w	r2, r3, #3
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac3e:	4971      	ldr	r1, [pc, #452]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac40:	4313      	orrs	r3, r2
 800ac42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d00a      	beq.n	800ac68 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ac52:	4b6c      	ldr	r3, [pc, #432]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac58:	f023 020c 	bic.w	r2, r3, #12
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac60:	4968      	ldr	r1, [pc, #416]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac62:	4313      	orrs	r3, r2
 800ac64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00a      	beq.n	800ac8a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800ac74:	4b63      	ldr	r3, [pc, #396]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac7a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac82:	4960      	ldr	r1, [pc, #384]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac84:	4313      	orrs	r3, r2
 800ac86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ac96:	4b5b      	ldr	r3, [pc, #364]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ac98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac9c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aca4:	4957      	ldr	r1, [pc, #348]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800aca6:	4313      	orrs	r3, r2
 800aca8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00a      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800acb8:	4b52      	ldr	r3, [pc, #328]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acbe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800acc6:	494f      	ldr	r1, [pc, #316]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acc8:	4313      	orrs	r3, r2
 800acca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d00a      	beq.n	800acf0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800acda:	4b4a      	ldr	r3, [pc, #296]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ace0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ace8:	4946      	ldr	r1, [pc, #280]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acea:	4313      	orrs	r3, r2
 800acec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d00a      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800acfc:	4b41      	ldr	r3, [pc, #260]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800acfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad02:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad0a:	493e      	ldr	r1, [pc, #248]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad0c:	4313      	orrs	r3, r2
 800ad0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d00a      	beq.n	800ad34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800ad1e:	4b39      	ldr	r3, [pc, #228]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad2c:	4935      	ldr	r1, [pc, #212]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d00a      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ad40:	4b30      	ldr	r3, [pc, #192]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad46:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad4e:	492d      	ldr	r1, [pc, #180]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad50:	4313      	orrs	r3, r2
 800ad52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d011      	beq.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800ad62:	4b28      	ldr	r3, [pc, #160]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad68:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad70:	4924      	ldr	r1, [pc, #144]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad72:	4313      	orrs	r3, r2
 800ad74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ad80:	d101      	bne.n	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800ad82:	2301      	movs	r3, #1
 800ad84:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d00a      	beq.n	800ada8 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ad92:	4b1c      	ldr	r3, [pc, #112]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ad94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ada0:	4918      	ldr	r1, [pc, #96]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ada2:	4313      	orrs	r3, r2
 800ada4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d00b      	beq.n	800adcc <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800adb4:	4b13      	ldr	r3, [pc, #76]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800adc4:	490f      	ldr	r1, [pc, #60]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800adc6:	4313      	orrs	r3, r2
 800adc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800adcc:	69fb      	ldr	r3, [r7, #28]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d005      	beq.n	800adde <HAL_RCCEx_PeriphCLKConfig+0x46a>
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adda:	f040 80d8 	bne.w	800af8e <HAL_RCCEx_PeriphCLKConfig+0x61a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800adde:	4b09      	ldr	r3, [pc, #36]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a08      	ldr	r2, [pc, #32]	; (800ae04 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800ade4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ade8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800adea:	f7fc fbbd 	bl	8007568 <HAL_GetTick>
 800adee:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800adf0:	e00a      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x494>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800adf2:	f7fc fbb9 	bl	8007568 <HAL_GetTick>
 800adf6:	4602      	mov	r2, r0
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	1ad3      	subs	r3, r2, r3
 800adfc:	2b64      	cmp	r3, #100	; 0x64
 800adfe:	d903      	bls.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x494>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	e167      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800ae04:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ae08:	4bad      	ldr	r3, [pc, #692]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d1ee      	bne.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x47e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f003 0301 	and.w	r3, r3, #1
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d021      	beq.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d11d      	bne.n	800ae64 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ae28:	4ba5      	ldr	r3, [pc, #660]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae2e:	0c1b      	lsrs	r3, r3, #16
 800ae30:	f003 0303 	and.w	r3, r3, #3
 800ae34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ae36:	4ba2      	ldr	r3, [pc, #648]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae3c:	0e1b      	lsrs	r3, r3, #24
 800ae3e:	f003 030f 	and.w	r3, r3, #15
 800ae42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	019a      	lsls	r2, r3, #6
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	041b      	lsls	r3, r3, #16
 800ae4e:	431a      	orrs	r2, r3
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	061b      	lsls	r3, r3, #24
 800ae54:	431a      	orrs	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	071b      	lsls	r3, r3, #28
 800ae5c:	4998      	ldr	r1, [pc, #608]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae5e:	4313      	orrs	r3, r2
 800ae60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d004      	beq.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae78:	d00a      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x51c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d02e      	beq.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x570>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae8a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ae8e:	d129      	bne.n	800aee4 <HAL_RCCEx_PeriphCLKConfig+0x570>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ae90:	4b8b      	ldr	r3, [pc, #556]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800ae92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ae96:	0c1b      	lsrs	r3, r3, #16
 800ae98:	f003 0303 	and.w	r3, r3, #3
 800ae9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800ae9e:	4b88      	ldr	r3, [pc, #544]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aea4:	0f1b      	lsrs	r3, r3, #28
 800aea6:	f003 0307 	and.w	r3, r3, #7
 800aeaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	685b      	ldr	r3, [r3, #4]
 800aeb0:	019a      	lsls	r2, r3, #6
 800aeb2:	693b      	ldr	r3, [r7, #16]
 800aeb4:	041b      	lsls	r3, r3, #16
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68db      	ldr	r3, [r3, #12]
 800aebc:	061b      	lsls	r3, r3, #24
 800aebe:	431a      	orrs	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	071b      	lsls	r3, r3, #28
 800aec4:	497e      	ldr	r1, [pc, #504]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aec6:	4313      	orrs	r3, r2
 800aec8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800aecc:	4b7c      	ldr	r3, [pc, #496]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aed2:	f023 021f 	bic.w	r2, r3, #31
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeda:	3b01      	subs	r3, #1
 800aedc:	4978      	ldr	r1, [pc, #480]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aede:	4313      	orrs	r3, r2
 800aee0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d01d      	beq.n	800af2c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800aef0:	4b73      	ldr	r3, [pc, #460]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aef6:	0e1b      	lsrs	r3, r3, #24
 800aef8:	f003 030f 	and.w	r3, r3, #15
 800aefc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800aefe:	4b70      	ldr	r3, [pc, #448]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800af04:	0f1b      	lsrs	r3, r3, #28
 800af06:	f003 0307 	and.w	r3, r3, #7
 800af0a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	685b      	ldr	r3, [r3, #4]
 800af10:	019a      	lsls	r2, r3, #6
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	041b      	lsls	r3, r3, #16
 800af18:	431a      	orrs	r2, r3
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	061b      	lsls	r3, r3, #24
 800af1e:	431a      	orrs	r2, r3
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	071b      	lsls	r3, r3, #28
 800af24:	4966      	ldr	r1, [pc, #408]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af26:	4313      	orrs	r3, r2
 800af28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af34:	2b00      	cmp	r3, #0
 800af36:	d011      	beq.n	800af5c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	019a      	lsls	r2, r3, #6
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	041b      	lsls	r3, r3, #16
 800af44:	431a      	orrs	r2, r3
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	68db      	ldr	r3, [r3, #12]
 800af4a:	061b      	lsls	r3, r3, #24
 800af4c:	431a      	orrs	r2, r3
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	071b      	lsls	r3, r3, #28
 800af54:	495a      	ldr	r1, [pc, #360]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af56:	4313      	orrs	r3, r2
 800af58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800af5c:	4b58      	ldr	r3, [pc, #352]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	4a57      	ldr	r2, [pc, #348]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af68:	f7fc fafe 	bl	8007568 <HAL_GetTick>
 800af6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af6e:	e008      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x60e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800af70:	f7fc fafa 	bl	8007568 <HAL_GetTick>
 800af74:	4602      	mov	r2, r0
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	1ad3      	subs	r3, r2, r3
 800af7a:	2b64      	cmp	r3, #100	; 0x64
 800af7c:	d901      	bls.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x60e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e0a8      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800af82:	4b4f      	ldr	r3, [pc, #316]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d0f0      	beq.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800af8e:	69bb      	ldr	r3, [r7, #24]
 800af90:	2b01      	cmp	r3, #1
 800af92:	f040 809e 	bne.w	800b0d2 <HAL_RCCEx_PeriphCLKConfig+0x75e>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800af96:	4b4a      	ldr	r3, [pc, #296]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4a49      	ldr	r2, [pc, #292]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800af9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800afa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800afa2:	f7fc fae1 	bl	8007568 <HAL_GetTick>
 800afa6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800afa8:	e008      	b.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800afaa:	f7fc fadd 	bl	8007568 <HAL_GetTick>
 800afae:	4602      	mov	r2, r0
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	1ad3      	subs	r3, r2, r3
 800afb4:	2b64      	cmp	r3, #100	; 0x64
 800afb6:	d901      	bls.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800afb8:	2303      	movs	r3, #3
 800afba:	e08b      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800afbc:	4b40      	ldr	r3, [pc, #256]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800afc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afc8:	d0ef      	beq.n	800afaa <HAL_RCCEx_PeriphCLKConfig+0x636>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d003      	beq.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d009      	beq.n	800aff2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d02e      	beq.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d12a      	bne.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800aff2:	4b33      	ldr	r3, [pc, #204]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800aff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aff8:	0c1b      	lsrs	r3, r3, #16
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b000:	4b2f      	ldr	r3, [pc, #188]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b006:	0f1b      	lsrs	r3, r3, #28
 800b008:	f003 0307 	and.w	r3, r3, #7
 800b00c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	019a      	lsls	r2, r3, #6
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	041b      	lsls	r3, r3, #16
 800b018:	431a      	orrs	r2, r3
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	699b      	ldr	r3, [r3, #24]
 800b01e:	061b      	lsls	r3, r3, #24
 800b020:	431a      	orrs	r2, r3
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	071b      	lsls	r3, r3, #28
 800b026:	4926      	ldr	r1, [pc, #152]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b028:	4313      	orrs	r3, r2
 800b02a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800b02e:	4b24      	ldr	r3, [pc, #144]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b034:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b03c:	3b01      	subs	r3, #1
 800b03e:	021b      	lsls	r3, r3, #8
 800b040:	491f      	ldr	r1, [pc, #124]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b042:	4313      	orrs	r3, r2
 800b044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b050:	2b00      	cmp	r3, #0
 800b052:	d022      	beq.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x726>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b058:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b05c:	d11d      	bne.n	800b09a <HAL_RCCEx_PeriphCLKConfig+0x726>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800b05e:	4b18      	ldr	r3, [pc, #96]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b064:	0e1b      	lsrs	r3, r3, #24
 800b066:	f003 030f 	and.w	r3, r3, #15
 800b06a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800b06c:	4b14      	ldr	r3, [pc, #80]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b06e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b072:	0f1b      	lsrs	r3, r3, #28
 800b074:	f003 0307 	and.w	r3, r3, #7
 800b078:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	695b      	ldr	r3, [r3, #20]
 800b07e:	019a      	lsls	r2, r3, #6
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6a1b      	ldr	r3, [r3, #32]
 800b084:	041b      	lsls	r3, r3, #16
 800b086:	431a      	orrs	r2, r3
 800b088:	693b      	ldr	r3, [r7, #16]
 800b08a:	061b      	lsls	r3, r3, #24
 800b08c:	431a      	orrs	r2, r3
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	071b      	lsls	r3, r3, #28
 800b092:	490b      	ldr	r1, [pc, #44]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b094:	4313      	orrs	r3, r2
 800b096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800b09a:	4b09      	ldr	r3, [pc, #36]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	4a08      	ldr	r2, [pc, #32]	; (800b0c0 <HAL_RCCEx_PeriphCLKConfig+0x74c>)
 800b0a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0a6:	f7fc fa5f 	bl	8007568 <HAL_GetTick>
 800b0aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0ac:	e00a      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x750>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800b0ae:	f7fc fa5b 	bl	8007568 <HAL_GetTick>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	697b      	ldr	r3, [r7, #20]
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	2b64      	cmp	r3, #100	; 0x64
 800b0ba:	d903      	bls.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x750>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b0bc:	2303      	movs	r3, #3
 800b0be:	e009      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800b0c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800b0c4:	4b05      	ldr	r3, [pc, #20]	; (800b0dc <HAL_RCCEx_PeriphCLKConfig+0x768>)
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0d0:	d1ed      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x73a>
      }
    }
  }
  return HAL_OK;
 800b0d2:	2300      	movs	r3, #0
}
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	3720      	adds	r7, #32
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd80      	pop	{r7, pc}
 800b0dc:	40023800 	.word	0x40023800

0800b0e0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800b0e0:	b580      	push	{r7, lr}
 800b0e2:	b082      	sub	sp, #8
 800b0e4:	af00      	add	r7, sp, #0
 800b0e6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d101      	bne.n	800b0f2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800b0ee:	2301      	movs	r3, #1
 800b0f0:	e022      	b.n	800b138 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b0f8:	b2db      	uxtb	r3, r3
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d105      	bne.n	800b10a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2200      	movs	r2, #0
 800b102:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800b104:	6878      	ldr	r0, [r7, #4]
 800b106:	f7f9 ffd7 	bl	80050b8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	2203      	movs	r2, #3
 800b10e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800b112:	6878      	ldr	r0, [r7, #4]
 800b114:	f000 f814 	bl	800b140 <HAL_SD_InitCard>
 800b118:	4603      	mov	r3, r0
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d001      	beq.n	800b122 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e00a      	b.n	800b138 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	2200      	movs	r2, #0
 800b12c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2201      	movs	r2, #1
 800b132:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800b136:	2300      	movs	r3, #0
}
 800b138:	4618      	mov	r0, r3
 800b13a:	3708      	adds	r7, #8
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b140:	b5b0      	push	{r4, r5, r7, lr}
 800b142:	b08e      	sub	sp, #56	; 0x38
 800b144:	af04      	add	r7, sp, #16
 800b146:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800b148:	2300      	movs	r3, #0
 800b14a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800b14c:	2300      	movs	r3, #0
 800b14e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800b150:	2300      	movs	r3, #0
 800b152:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800b154:	2300      	movs	r3, #0
 800b156:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800b158:	2300      	movs	r3, #0
 800b15a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800b15c:	2376      	movs	r3, #118	; 0x76
 800b15e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681d      	ldr	r5, [r3, #0]
 800b164:	466c      	mov	r4, sp
 800b166:	f107 0314 	add.w	r3, r7, #20
 800b16a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b16e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b172:	f107 0308 	add.w	r3, r7, #8
 800b176:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b178:	4628      	mov	r0, r5
 800b17a:	f003 fdbb 	bl	800ecf4 <SDMMC_Init>
 800b17e:	4603      	mov	r3, r0
 800b180:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800b184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d001      	beq.n	800b190 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800b18c:	2301      	movs	r3, #1
 800b18e:	e03b      	b.n	800b208 <HAL_SD_InitCard+0xc8>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	685a      	ldr	r2, [r3, #4]
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b19e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	4618      	mov	r0, r3
 800b1a6:	f003 fdef 	bl	800ed88 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b1b8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800b1ba:	6878      	ldr	r0, [r7, #4]
 800b1bc:	f000 ffca 	bl	800c154 <SD_PowerON>
 800b1c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1c2:	6a3b      	ldr	r3, [r7, #32]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d00b      	beq.n	800b1e0 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1d4:	6a3b      	ldr	r3, [r7, #32]
 800b1d6:	431a      	orrs	r2, r3
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e013      	b.n	800b208 <HAL_SD_InitCard+0xc8>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fee9 	bl	800bfb8 <SD_InitCard>
 800b1e6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1e8:	6a3b      	ldr	r3, [r7, #32]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00b      	beq.n	800b206 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2201      	movs	r2, #1
 800b1f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b1fa:	6a3b      	ldr	r3, [r7, #32]
 800b1fc:	431a      	orrs	r2, r3
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b202:	2301      	movs	r3, #1
 800b204:	e000      	b.n	800b208 <HAL_SD_InitCard+0xc8>
  }

  return HAL_OK;
 800b206:	2300      	movs	r3, #0
}
 800b208:	4618      	mov	r0, r3
 800b20a:	3728      	adds	r7, #40	; 0x28
 800b20c:	46bd      	mov	sp, r7
 800b20e:	bdb0      	pop	{r4, r5, r7, pc}

0800b210 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b08c      	sub	sp, #48	; 0x30
 800b214:	af00      	add	r7, sp, #0
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d107      	bne.n	800b238 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e0cc      	b.n	800b3d2 <HAL_SD_ReadBlocks_DMA+0x1c2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b23e:	b2db      	uxtb	r3, r3
 800b240:	2b01      	cmp	r3, #1
 800b242:	f040 80c5 	bne.w	800b3d0 <HAL_SD_ReadBlocks_DMA+0x1c0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	2200      	movs	r2, #0
 800b24a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b24c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	441a      	add	r2, r3
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b256:	429a      	cmp	r2, r3
 800b258:	d907      	bls.n	800b26a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b25e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b266:	2301      	movs	r3, #1
 800b268:	e0b3      	b.n	800b3d2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2203      	movs	r2, #3
 800b26e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	2200      	movs	r2, #0
 800b278:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800b288:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b28e:	4a53      	ldr	r2, [pc, #332]	; (800b3dc <HAL_SD_ReadBlocks_DMA+0x1cc>)
 800b290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b296:	4a52      	ldr	r2, [pc, #328]	; (800b3e0 <HAL_SD_ReadBlocks_DMA+0x1d0>)
 800b298:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b29e:	2200      	movs	r2, #0
 800b2a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3380      	adds	r3, #128	; 0x80
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	025b      	lsls	r3, r3, #9
 800b2b4:	089b      	lsrs	r3, r3, #2
 800b2b6:	f7fc ff75 	bl	80081a4 <HAL_DMA_Start_IT>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d017      	beq.n	800b2f0 <HAL_SD_ReadBlocks_DMA+0xe0>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800b2ce:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	4a43      	ldr	r2, [pc, #268]	; (800b3e4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b2d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2dc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	e070      	b.n	800b3d2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	f042 0208 	orr.w	r2, r2, #8
 800b2fe:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b304:	2b01      	cmp	r3, #1
 800b306:	d002      	beq.n	800b30e <HAL_SD_ReadBlocks_DMA+0xfe>
      {
        add *= 512U;
 800b308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b30a:	025b      	lsls	r3, r3, #9
 800b30c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Set Block Size for Card */
      errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b316:	4618      	mov	r0, r3
 800b318:	f003 fdca 	bl	800eeb0 <SDMMC_CmdBlockLength>
 800b31c:	62f8      	str	r0, [r7, #44]	; 0x2c
      if(errorstate != HAL_SD_ERROR_NONE)
 800b31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b320:	2b00      	cmp	r3, #0
 800b322:	d00f      	beq.n	800b344 <HAL_SD_ReadBlocks_DMA+0x134>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4a2e      	ldr	r2, [pc, #184]	; (800b3e4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b32a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b332:	431a      	orrs	r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        return HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	e046      	b.n	800b3d2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b344:	f04f 33ff 	mov.w	r3, #4294967295
 800b348:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	025b      	lsls	r3, r3, #9
 800b34e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b350:	2390      	movs	r3, #144	; 0x90
 800b352:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b354:	2302      	movs	r3, #2
 800b356:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b358:	2300      	movs	r3, #0
 800b35a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b35c:	2301      	movs	r3, #1
 800b35e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	f107 0210 	add.w	r2, r7, #16
 800b368:	4611      	mov	r1, r2
 800b36a:	4618      	mov	r0, r3
 800b36c:	f003 fd74 	bl	800ee58 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	2b01      	cmp	r3, #1
 800b374:	d90a      	bls.n	800b38c <HAL_SD_ReadBlocks_DMA+0x17c>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2282      	movs	r2, #130	; 0x82
 800b37a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b382:	4618      	mov	r0, r3
 800b384:	f003 fdd8 	bl	800ef38 <SDMMC_CmdReadMultiBlock>
 800b388:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b38a:	e009      	b.n	800b3a0 <HAL_SD_ReadBlocks_DMA+0x190>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	2281      	movs	r2, #129	; 0x81
 800b390:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b398:	4618      	mov	r0, r3
 800b39a:	f003 fdab 	bl	800eef4 <SDMMC_CmdReadSingleBlock>
 800b39e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800b3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d012      	beq.n	800b3cc <HAL_SD_ReadBlocks_DMA+0x1bc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	4a0e      	ldr	r2, [pc, #56]	; (800b3e4 <HAL_SD_ReadBlocks_DMA+0x1d4>)
 800b3ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	2201      	movs	r2, #1
 800b3be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	2200      	movs	r2, #0
 800b3c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800b3c8:	2301      	movs	r3, #1
 800b3ca:	e002      	b.n	800b3d2 <HAL_SD_ReadBlocks_DMA+0x1c2>
      }

      return HAL_OK;
 800b3cc:	2300      	movs	r3, #0
 800b3ce:	e000      	b.n	800b3d2 <HAL_SD_ReadBlocks_DMA+0x1c2>
    }
  }
  else
  {
    return HAL_BUSY;
 800b3d0:	2302      	movs	r3, #2
  }
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3730      	adds	r7, #48	; 0x30
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	0800bdc7 	.word	0x0800bdc7
 800b3e0:	0800be39 	.word	0x0800be39
 800b3e4:	004005ff 	.word	0x004005ff

0800b3e8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800b3e8:	b580      	push	{r7, lr}
 800b3ea:	b08c      	sub	sp, #48	; 0x30
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	60f8      	str	r0, [r7, #12]
 800b3f0:	60b9      	str	r1, [r7, #8]
 800b3f2:	607a      	str	r2, [r7, #4]
 800b3f4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d107      	bne.n	800b410 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b404:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800b40c:	2301      	movs	r3, #1
 800b40e:	e0cf      	b.n	800b5b0 <HAL_SD_WriteBlocks_DMA+0x1c8>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b01      	cmp	r3, #1
 800b41a:	f040 80c8 	bne.w	800b5ae <HAL_SD_WriteBlocks_DMA+0x1c6>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	2200      	movs	r2, #0
 800b422:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800b424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	441a      	add	r2, r3
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b42e:	429a      	cmp	r2, r3
 800b430:	d907      	bls.n	800b442 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b436:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800b43e:	2301      	movs	r3, #1
 800b440:	e0b6      	b.n	800b5b0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2203      	movs	r2, #3
 800b446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800b44a:	68fb      	ldr	r3, [r7, #12]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2200      	movs	r2, #0
 800b450:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f042 021a 	orr.w	r2, r2, #26
 800b460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b466:	4a54      	ldr	r2, [pc, #336]	; (800b5b8 <HAL_SD_WriteBlocks_DMA+0x1d0>)
 800b468:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b46e:	4a53      	ldr	r2, [pc, #332]	; (800b5bc <HAL_SD_WriteBlocks_DMA+0x1d4>)
 800b470:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b476:	2200      	movs	r2, #0
 800b478:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b47e:	2b01      	cmp	r3, #1
 800b480:	d002      	beq.n	800b488 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800b482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b484:	025b      	lsls	r3, r3, #9
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800b490:	4618      	mov	r0, r3
 800b492:	f003 fd0d 	bl	800eeb0 <SDMMC_CmdBlockLength>
 800b496:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00f      	beq.n	800b4be <HAL_SD_WriteBlocks_DMA+0xd6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a47      	ldr	r2, [pc, #284]	; (800b5c0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b4a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4ac:	431a      	orrs	r2, r3
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2201      	movs	r2, #1
 800b4b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	e078      	b.n	800b5b0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d90a      	bls.n	800b4da <HAL_SD_WriteBlocks_DMA+0xf2>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	22a0      	movs	r2, #160	; 0xa0
 800b4c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f003 fd75 	bl	800efc0 <SDMMC_CmdWriteMultiBlock>
 800b4d6:	62f8      	str	r0, [r7, #44]	; 0x2c
 800b4d8:	e009      	b.n	800b4ee <HAL_SD_WriteBlocks_DMA+0x106>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	2290      	movs	r2, #144	; 0x90
 800b4de:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f003 fd48 	bl	800ef7c <SDMMC_CmdWriteSingleBlock>
 800b4ec:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800b4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d012      	beq.n	800b51a <HAL_SD_WriteBlocks_DMA+0x132>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	4a31      	ldr	r2, [pc, #196]	; (800b5c0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b4fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b502:	431a      	orrs	r2, r3
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2201      	movs	r2, #1
 800b50c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b516:	2301      	movs	r3, #1
 800b518:	e04a      	b.n	800b5b0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f042 0208 	orr.w	r2, r2, #8
 800b528:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	3380      	adds	r3, #128	; 0x80
 800b536:	461a      	mov	r2, r3
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	025b      	lsls	r3, r3, #9
 800b53c:	089b      	lsrs	r3, r3, #2
 800b53e:	f7fc fe31 	bl	80081a4 <HAL_DMA_Start_IT>
 800b542:	4603      	mov	r3, r0
 800b544:	2b00      	cmp	r3, #0
 800b546:	d01a      	beq.n	800b57e <HAL_SD_WriteBlocks_DMA+0x196>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f022 021a 	bic.w	r2, r2, #26
 800b556:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	4a18      	ldr	r2, [pc, #96]	; (800b5c0 <HAL_SD_WriteBlocks_DMA+0x1d8>)
 800b55e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b564:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	2201      	movs	r2, #1
 800b570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800b57a:	2301      	movs	r3, #1
 800b57c:	e018      	b.n	800b5b0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b57e:	f04f 33ff 	mov.w	r3, #4294967295
 800b582:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800b584:	683b      	ldr	r3, [r7, #0]
 800b586:	025b      	lsls	r3, r3, #9
 800b588:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800b58a:	2390      	movs	r3, #144	; 0x90
 800b58c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800b58e:	2300      	movs	r3, #0
 800b590:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b592:	2300      	movs	r3, #0
 800b594:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800b596:	2301      	movs	r3, #1
 800b598:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f107 0210 	add.w	r2, r7, #16
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f003 fc57 	bl	800ee58 <SDMMC_ConfigData>

      return HAL_OK;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	e000      	b.n	800b5b0 <HAL_SD_WriteBlocks_DMA+0x1c8>
    }
  }
  else
  {
    return HAL_BUSY;
 800b5ae:	2302      	movs	r3, #2
  }
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3730      	adds	r7, #48	; 0x30
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	0800bd9d 	.word	0x0800bd9d
 800b5bc:	0800be39 	.word	0x0800be39
 800b5c0:	004005ff 	.word	0x004005ff

0800b5c4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b084      	sub	sp, #16
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5d0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d008      	beq.n	800b5f2 <HAL_SD_IRQHandler+0x2e>
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	f003 0308 	and.w	r3, r3, #8
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d003      	beq.n	800b5f2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800b5ea:	6878      	ldr	r0, [r7, #4]
 800b5ec:	f000 ffc8 	bl	800c580 <SD_Read_IT>
 800b5f0:	e153      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	f000 808d 	beq.w	800b71c <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b60a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	4ba3      	ldr	r3, [pc, #652]	; (800b8a4 <HAL_SD_IRQHandler+0x2e0>)
 800b618:	400b      	ands	r3, r1
 800b61a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f022 0201 	bic.w	r2, r2, #1
 800b62a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f003 0308 	and.w	r3, r3, #8
 800b632:	2b00      	cmp	r3, #0
 800b634:	d039      	beq.n	800b6aa <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b636:	68fb      	ldr	r3, [r7, #12]
 800b638:	f003 0302 	and.w	r3, r3, #2
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d104      	bne.n	800b64a <HAL_SD_IRQHandler+0x86>
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	f003 0320 	and.w	r3, r3, #32
 800b646:	2b00      	cmp	r3, #0
 800b648:	d011      	beq.n	800b66e <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4618      	mov	r0, r3
 800b650:	f003 fcd8 	bl	800f004 <SDMMC_CmdStopTransfer>
 800b654:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	431a      	orrs	r2, r3
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 f921 	bl	800b8b0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	f240 523a 	movw	r2, #1338	; 0x53a
 800b676:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2201      	movs	r2, #1
 800b67c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2200      	movs	r2, #0
 800b684:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	f003 0301 	and.w	r3, r3, #1
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d104      	bne.n	800b69a <HAL_SD_IRQHandler+0xd6>
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f003 0302 	and.w	r3, r3, #2
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f005 fc5a 	bl	8010f54 <HAL_SD_RxCpltCallback>
 800b6a0:	e0fb      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f005 fc4c 	bl	8010f40 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b6a8:	e0f7      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	f000 80f2 	beq.w	800b89a <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f003 0320 	and.w	r3, r3, #32
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d011      	beq.n	800b6e4 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f003 fc9d 	bl	800f004 <SDMMC_CmdStopTransfer>
 800b6ca:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d008      	beq.n	800b6e4 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	431a      	orrs	r2, r3
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 f8e6 	bl	800b8b0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800b6e4:	68fb      	ldr	r3, [r7, #12]
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	f040 80d5 	bne.w	800b89a <HAL_SD_IRQHandler+0x2d6>
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f003 0302 	and.w	r3, r3, #2
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	f040 80cf 	bne.w	800b89a <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f022 0208 	bic.w	r2, r2, #8
 800b70a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800b714:	6878      	ldr	r0, [r7, #4]
 800b716:	f005 fc13 	bl	8010f40 <HAL_SD_TxCpltCallback>
}
 800b71a:	e0be      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b722:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b726:	2b00      	cmp	r3, #0
 800b728:	d008      	beq.n	800b73c <HAL_SD_IRQHandler+0x178>
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f003 0308 	and.w	r3, r3, #8
 800b730:	2b00      	cmp	r3, #0
 800b732:	d003      	beq.n	800b73c <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f000 ff74 	bl	800c622 <SD_Write_IT>
 800b73a:	e0ae      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b742:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800b746:	2b00      	cmp	r3, #0
 800b748:	f000 80a7 	beq.w	800b89a <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b752:	f003 0302 	and.w	r3, r3, #2
 800b756:	2b00      	cmp	r3, #0
 800b758:	d005      	beq.n	800b766 <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b75e:	f043 0202 	orr.w	r2, r3, #2
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76c:	f003 0308 	and.w	r3, r3, #8
 800b770:	2b00      	cmp	r3, #0
 800b772:	d005      	beq.n	800b780 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b778:	f043 0208 	orr.w	r2, r3, #8
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b786:	f003 0320 	and.w	r3, r3, #32
 800b78a:	2b00      	cmp	r3, #0
 800b78c:	d005      	beq.n	800b79a <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b792:	f043 0220 	orr.w	r2, r3, #32
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7a0:	f003 0310 	and.w	r3, r3, #16
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d005      	beq.n	800b7b4 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ac:	f043 0210 	orr.w	r2, r3, #16
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b7bc:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800b7cc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	f003 fc16 	bl	800f004 <SDMMC_CmdStopTransfer>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7de:	431a      	orrs	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f003 0308 	and.w	r3, r3, #8
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d00a      	beq.n	800b804 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2201      	movs	r2, #1
 800b7f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f000 f857 	bl	800b8b0 <HAL_SD_ErrorCallback>
}
 800b802:	e04a      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d045      	beq.n	800b89a <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f003 0310 	and.w	r3, r3, #16
 800b814:	2b00      	cmp	r3, #0
 800b816:	d104      	bne.n	800b822 <HAL_SD_IRQHandler+0x25e>
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f003 0320 	and.w	r3, r3, #32
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d011      	beq.n	800b846 <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b826:	4a20      	ldr	r2, [pc, #128]	; (800b8a8 <HAL_SD_IRQHandler+0x2e4>)
 800b828:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b82e:	4618      	mov	r0, r3
 800b830:	f7fc fd88 	bl	8008344 <HAL_DMA_Abort_IT>
 800b834:	4603      	mov	r3, r0
 800b836:	2b00      	cmp	r3, #0
 800b838:	d02f      	beq.n	800b89a <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b83e:	4618      	mov	r0, r3
 800b840:	f000 fb4c 	bl	800bedc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800b844:	e029      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d104      	bne.n	800b85a <HAL_SD_IRQHandler+0x296>
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f003 0302 	and.w	r3, r3, #2
 800b856:	2b00      	cmp	r3, #0
 800b858:	d011      	beq.n	800b87e <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b85e:	4a13      	ldr	r2, [pc, #76]	; (800b8ac <HAL_SD_IRQHandler+0x2e8>)
 800b860:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b866:	4618      	mov	r0, r3
 800b868:	f7fc fd6c 	bl	8008344 <HAL_DMA_Abort_IT>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d013      	beq.n	800b89a <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b876:	4618      	mov	r0, r3
 800b878:	f000 fb67 	bl	800bf4a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800b87c:	e00d      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2201      	movs	r2, #1
 800b888:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	2200      	movs	r2, #0
 800b890:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f005 fb4a 	bl	8010f2c <HAL_SD_AbortCallback>
}
 800b898:	e7ff      	b.n	800b89a <HAL_SD_IRQHandler+0x2d6>
 800b89a:	bf00      	nop
 800b89c:	3710      	adds	r7, #16
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}
 800b8a2:	bf00      	nop
 800b8a4:	ffff3ec5 	.word	0xffff3ec5
 800b8a8:	0800bedd 	.word	0x0800bedd
 800b8ac:	0800bf4b 	.word	0x0800bf4b

0800b8b0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800b8b8:	bf00      	nop
 800b8ba:	370c      	adds	r7, #12
 800b8bc:	46bd      	mov	sp, r7
 800b8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c2:	4770      	bx	lr

0800b8c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800b8c4:	b480      	push	{r7}
 800b8c6:	b083      	sub	sp, #12
 800b8c8:	af00      	add	r7, sp, #0
 800b8ca:	6078      	str	r0, [r7, #4]
 800b8cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8d2:	0f9b      	lsrs	r3, r3, #30
 800b8d4:	b2da      	uxtb	r2, r3
 800b8d6:	683b      	ldr	r3, [r7, #0]
 800b8d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8de:	0e9b      	lsrs	r3, r3, #26
 800b8e0:	b2db      	uxtb	r3, r3
 800b8e2:	f003 030f 	and.w	r3, r3, #15
 800b8e6:	b2da      	uxtb	r2, r3
 800b8e8:	683b      	ldr	r3, [r7, #0]
 800b8ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b8f0:	0e1b      	lsrs	r3, r3, #24
 800b8f2:	b2db      	uxtb	r3, r3
 800b8f4:	f003 0303 	and.w	r3, r3, #3
 800b8f8:	b2da      	uxtb	r2, r3
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b902:	0c1b      	lsrs	r3, r3, #16
 800b904:	b2da      	uxtb	r2, r3
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b90e:	0a1b      	lsrs	r3, r3, #8
 800b910:	b2da      	uxtb	r2, r3
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b91a:	b2da      	uxtb	r2, r3
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b924:	0d1b      	lsrs	r3, r3, #20
 800b926:	b29a      	uxth	r2, r3
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b930:	0c1b      	lsrs	r3, r3, #16
 800b932:	b2db      	uxtb	r3, r3
 800b934:	f003 030f 	and.w	r3, r3, #15
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b942:	0bdb      	lsrs	r3, r3, #15
 800b944:	b2db      	uxtb	r3, r3
 800b946:	f003 0301 	and.w	r3, r3, #1
 800b94a:	b2da      	uxtb	r2, r3
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b954:	0b9b      	lsrs	r3, r3, #14
 800b956:	b2db      	uxtb	r3, r3
 800b958:	f003 0301 	and.w	r3, r3, #1
 800b95c:	b2da      	uxtb	r2, r3
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b966:	0b5b      	lsrs	r3, r3, #13
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	f003 0301 	and.w	r3, r3, #1
 800b96e:	b2da      	uxtb	r2, r3
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b978:	0b1b      	lsrs	r3, r3, #12
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	f003 0301 	and.w	r3, r3, #1
 800b980:	b2da      	uxtb	r2, r3
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	2200      	movs	r2, #0
 800b98a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b990:	2b00      	cmp	r3, #0
 800b992:	d163      	bne.n	800ba5c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b998:	009a      	lsls	r2, r3, #2
 800b99a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800b99e:	4013      	ands	r3, r2
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b9a4:	0f92      	lsrs	r2, r2, #30
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9b0:	0edb      	lsrs	r3, r3, #27
 800b9b2:	b2db      	uxtb	r3, r3
 800b9b4:	f003 0307 	and.w	r3, r3, #7
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9c2:	0e1b      	lsrs	r3, r3, #24
 800b9c4:	b2db      	uxtb	r3, r3
 800b9c6:	f003 0307 	and.w	r3, r3, #7
 800b9ca:	b2da      	uxtb	r2, r3
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9d4:	0d5b      	lsrs	r3, r3, #21
 800b9d6:	b2db      	uxtb	r3, r3
 800b9d8:	f003 0307 	and.w	r3, r3, #7
 800b9dc:	b2da      	uxtb	r2, r3
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9e6:	0c9b      	lsrs	r3, r3, #18
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	f003 0307 	and.w	r3, r3, #7
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b9f8:	0bdb      	lsrs	r3, r3, #15
 800b9fa:	b2db      	uxtb	r3, r3
 800b9fc:	f003 0307 	and.w	r3, r3, #7
 800ba00:	b2da      	uxtb	r2, r3
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	7e1b      	ldrb	r3, [r3, #24]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	3302      	adds	r3, #2
 800ba1c:	2201      	movs	r2, #1
 800ba1e:	fa02 f303 	lsl.w	r3, r2, r3
 800ba22:	687a      	ldr	r2, [r7, #4]
 800ba24:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800ba26:	fb02 f203 	mul.w	r2, r2, r3
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	7a1b      	ldrb	r3, [r3, #8]
 800ba32:	b2db      	uxtb	r3, r3
 800ba34:	f003 030f 	and.w	r3, r3, #15
 800ba38:	2201      	movs	r2, #1
 800ba3a:	409a      	lsls	r2, r3
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800ba48:	0a52      	lsrs	r2, r2, #9
 800ba4a:	fb02 f203 	mul.w	r2, r2, r3
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba58:	661a      	str	r2, [r3, #96]	; 0x60
 800ba5a:	e031      	b.n	800bac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d11d      	bne.n	800baa0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ba68:	041b      	lsls	r3, r3, #16
 800ba6a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ba72:	0c1b      	lsrs	r3, r3, #16
 800ba74:	431a      	orrs	r2, r3
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800ba7a:	683b      	ldr	r3, [r7, #0]
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	3301      	adds	r3, #1
 800ba80:	029a      	lsls	r2, r3, #10
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ba94:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	661a      	str	r2, [r3, #96]	; 0x60
 800ba9e:	e00f      	b.n	800bac0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	681b      	ldr	r3, [r3, #0]
 800baa4:	4a58      	ldr	r2, [pc, #352]	; (800bc08 <HAL_SD_GetCardCSD+0x344>)
 800baa6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	2201      	movs	r2, #1
 800bab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e09d      	b.n	800bbfc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bac4:	0b9b      	lsrs	r3, r3, #14
 800bac6:	b2db      	uxtb	r3, r3
 800bac8:	f003 0301 	and.w	r3, r3, #1
 800bacc:	b2da      	uxtb	r2, r3
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bad6:	09db      	lsrs	r3, r3, #7
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bade:	b2da      	uxtb	r2, r3
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bae8:	b2db      	uxtb	r3, r3
 800baea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baee:	b2da      	uxtb	r2, r3
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800baf8:	0fdb      	lsrs	r3, r3, #31
 800bafa:	b2da      	uxtb	r2, r3
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb04:	0f5b      	lsrs	r3, r3, #29
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	f003 0303 	and.w	r3, r3, #3
 800bb0c:	b2da      	uxtb	r2, r3
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb16:	0e9b      	lsrs	r3, r3, #26
 800bb18:	b2db      	uxtb	r3, r3
 800bb1a:	f003 0307 	and.w	r3, r3, #7
 800bb1e:	b2da      	uxtb	r2, r3
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb28:	0d9b      	lsrs	r3, r3, #22
 800bb2a:	b2db      	uxtb	r3, r3
 800bb2c:	f003 030f 	and.w	r3, r3, #15
 800bb30:	b2da      	uxtb	r2, r3
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb3a:	0d5b      	lsrs	r3, r3, #21
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	f003 0301 	and.w	r3, r3, #1
 800bb42:	b2da      	uxtb	r2, r3
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	2200      	movs	r2, #0
 800bb4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb56:	0c1b      	lsrs	r3, r3, #16
 800bb58:	b2db      	uxtb	r3, r3
 800bb5a:	f003 0301 	and.w	r3, r3, #1
 800bb5e:	b2da      	uxtb	r2, r3
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb6a:	0bdb      	lsrs	r3, r3, #15
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	b2da      	uxtb	r2, r3
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb7e:	0b9b      	lsrs	r3, r3, #14
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	f003 0301 	and.w	r3, r3, #1
 800bb86:	b2da      	uxtb	r2, r3
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bb92:	0b5b      	lsrs	r3, r3, #13
 800bb94:	b2db      	uxtb	r3, r3
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	b2da      	uxtb	r2, r3
 800bb9c:	683b      	ldr	r3, [r7, #0]
 800bb9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bba6:	0b1b      	lsrs	r3, r3, #12
 800bba8:	b2db      	uxtb	r3, r3
 800bbaa:	f003 0301 	and.w	r3, r3, #1
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbba:	0a9b      	lsrs	r3, r3, #10
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	f003 0303 	and.w	r3, r3, #3
 800bbc2:	b2da      	uxtb	r2, r3
 800bbc4:	683b      	ldr	r3, [r7, #0]
 800bbc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbce:	0a1b      	lsrs	r3, r3, #8
 800bbd0:	b2db      	uxtb	r3, r3
 800bbd2:	f003 0303 	and.w	r3, r3, #3
 800bbd6:	b2da      	uxtb	r2, r3
 800bbd8:	683b      	ldr	r3, [r7, #0]
 800bbda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bbe2:	085b      	lsrs	r3, r3, #1
 800bbe4:	b2db      	uxtb	r3, r3
 800bbe6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbea:	b2da      	uxtb	r2, r3
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800bbf2:	683b      	ldr	r3, [r7, #0]
 800bbf4:	2201      	movs	r2, #1
 800bbf6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800bbfa:	2300      	movs	r3, #0
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr
 800bc08:	004005ff 	.word	0x004005ff

0800bc0c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b083      	sub	sp, #12
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bc2a:	683b      	ldr	r3, [r7, #0]
 800bc2c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bc3a:	683b      	ldr	r3, [r7, #0]
 800bc3c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bc42:	683b      	ldr	r3, [r7, #0]
 800bc44:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800bc56:	2300      	movs	r3, #0
}
 800bc58:	4618      	mov	r0, r3
 800bc5a:	370c      	adds	r7, #12
 800bc5c:	46bd      	mov	sp, r7
 800bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc62:	4770      	bx	lr

0800bc64 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800bc64:	b5b0      	push	{r4, r5, r7, lr}
 800bc66:	b08e      	sub	sp, #56	; 0x38
 800bc68:	af04      	add	r7, sp, #16
 800bc6a:	6078      	str	r0, [r7, #4]
 800bc6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2203      	movs	r2, #3
 800bc72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7a:	2b03      	cmp	r3, #3
 800bc7c:	d02e      	beq.n	800bcdc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc84:	d106      	bne.n	800bc94 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc8a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	639a      	str	r2, [r3, #56]	; 0x38
 800bc92:	e029      	b.n	800bce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc9a:	d10a      	bne.n	800bcb2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800bc9c:	6878      	ldr	r0, [r7, #4]
 800bc9e:	f000 fb0f 	bl	800c2c0 <SD_WideBus_Enable>
 800bca2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcaa:	431a      	orrs	r2, r3
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	639a      	str	r2, [r3, #56]	; 0x38
 800bcb0:	e01a      	b.n	800bce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800bcb2:	683b      	ldr	r3, [r7, #0]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d10a      	bne.n	800bcce <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 fb4c 	bl	800c356 <SD_WideBus_Disable>
 800bcbe:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	639a      	str	r2, [r3, #56]	; 0x38
 800bccc:	e00c      	b.n	800bce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	639a      	str	r2, [r3, #56]	; 0x38
 800bcda:	e005      	b.n	800bce8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bce0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d009      	beq.n	800bd04 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	4a18      	ldr	r2, [pc, #96]	; (800bd58 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800bcf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2201      	movs	r2, #1
 800bcfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800bd00:	2301      	movs	r3, #1
 800bd02:	e024      	b.n	800bd4e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	685b      	ldr	r3, [r3, #4]
 800bd08:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	689b      	ldr	r3, [r3, #8]
 800bd0e:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	68db      	ldr	r3, [r3, #12]
 800bd14:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	695b      	ldr	r3, [r3, #20]
 800bd1e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	699b      	ldr	r3, [r3, #24]
 800bd24:	623b      	str	r3, [r7, #32]
    (void)SDMMC_Init(hsd->Instance, Init);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681d      	ldr	r5, [r3, #0]
 800bd2a:	466c      	mov	r4, sp
 800bd2c:	f107 0318 	add.w	r3, r7, #24
 800bd30:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800bd34:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800bd38:	f107 030c 	add.w	r3, r7, #12
 800bd3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800bd3e:	4628      	mov	r0, r5
 800bd40:	f002 ffd8 	bl	800ecf4 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bd4c:	2300      	movs	r3, #0
}
 800bd4e:	4618      	mov	r0, r3
 800bd50:	3728      	adds	r7, #40	; 0x28
 800bd52:	46bd      	mov	sp, r7
 800bd54:	bdb0      	pop	{r4, r5, r7, pc}
 800bd56:	bf00      	nop
 800bd58:	004005ff 	.word	0x004005ff

0800bd5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800bd5c:	b580      	push	{r7, lr}
 800bd5e:	b086      	sub	sp, #24
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800bd64:	2300      	movs	r3, #0
 800bd66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800bd68:	f107 030c 	add.w	r3, r7, #12
 800bd6c:	4619      	mov	r1, r3
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fa7e 	bl	800c270 <SD_SendStatus>
 800bd74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800bd76:	697b      	ldr	r3, [r7, #20]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d005      	beq.n	800bd88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bd80:	697b      	ldr	r3, [r7, #20]
 800bd82:	431a      	orrs	r2, r3
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	0a5b      	lsrs	r3, r3, #9
 800bd8c:	f003 030f 	and.w	r3, r3, #15
 800bd90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800bd92:	693b      	ldr	r3, [r7, #16]
}
 800bd94:	4618      	mov	r0, r3
 800bd96:	3718      	adds	r7, #24
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}

0800bd9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bda8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bdb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800bdba:	bf00      	nop
 800bdbc:	3714      	adds	r7, #20
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdc4:	4770      	bx	lr

0800bdc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bdc6:	b580      	push	{r7, lr}
 800bdc8:	b084      	sub	sp, #16
 800bdca:	af00      	add	r7, sp, #0
 800bdcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bdd2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdd8:	2b82      	cmp	r3, #130	; 0x82
 800bdda:	d111      	bne.n	800be00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f003 f90f 	bl	800f004 <SDMMC_CmdStopTransfer>
 800bde6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d008      	beq.n	800be00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	431a      	orrs	r2, r3
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f7ff fd58 	bl	800b8b0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	f022 0208 	bic.w	r2, r2, #8
 800be0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f240 523a 	movw	r2, #1338	; 0x53a
 800be18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	2201      	movs	r2, #1
 800be1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2200      	movs	r2, #0
 800be26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800be28:	68f8      	ldr	r0, [r7, #12]
 800be2a:	f005 f893 	bl	8010f54 <HAL_SD_RxCpltCallback>
#endif
}
 800be2e:	bf00      	nop
 800be30:	3710      	adds	r7, #16
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
	...

0800be38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b086      	sub	sp, #24
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f7fc fc28 	bl	800869c <HAL_DMA_GetError>
 800be4c:	4603      	mov	r3, r0
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d03e      	beq.n	800bed0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800be5a:	697b      	ldr	r3, [r7, #20]
 800be5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	2b01      	cmp	r3, #1
 800be66:	d002      	beq.n	800be6e <SD_DMAError+0x36>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	2b01      	cmp	r3, #1
 800be6c:	d12d      	bne.n	800beca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800be6e:	697b      	ldr	r3, [r7, #20]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	4a19      	ldr	r2, [pc, #100]	; (800bed8 <SD_DMAError+0xa0>)
 800be74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800be84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800be92:	6978      	ldr	r0, [r7, #20]
 800be94:	f7ff ff62 	bl	800bd5c <HAL_SD_GetCardState>
 800be98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	2b06      	cmp	r3, #6
 800be9e:	d002      	beq.n	800bea6 <SD_DMAError+0x6e>
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	2b05      	cmp	r3, #5
 800bea4:	d10a      	bne.n	800bebc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4618      	mov	r0, r3
 800beac:	f003 f8aa 	bl	800f004 <SDMMC_CmdStopTransfer>
 800beb0:	4602      	mov	r2, r0
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beb6:	431a      	orrs	r2, r3
 800beb8:	697b      	ldr	r3, [r7, #20]
 800beba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800bebc:	697b      	ldr	r3, [r7, #20]
 800bebe:	2201      	movs	r2, #1
 800bec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	2200      	movs	r2, #0
 800bec8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800beca:	6978      	ldr	r0, [r7, #20]
 800becc:	f7ff fcf0 	bl	800b8b0 <HAL_SD_ErrorCallback>
#endif
  }
}
 800bed0:	bf00      	nop
 800bed2:	3718      	adds	r7, #24
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	004005ff 	.word	0x004005ff

0800bedc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b084      	sub	sp, #16
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bee8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f240 523a 	movw	r2, #1338	; 0x53a
 800bef2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bef4:	68f8      	ldr	r0, [r7, #12]
 800bef6:	f7ff ff31 	bl	800bd5c <HAL_SD_GetCardState>
 800befa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2201      	movs	r2, #1
 800bf00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	2200      	movs	r2, #0
 800bf08:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	2b06      	cmp	r3, #6
 800bf0e:	d002      	beq.n	800bf16 <SD_DMATxAbort+0x3a>
 800bf10:	68bb      	ldr	r3, [r7, #8]
 800bf12:	2b05      	cmp	r3, #5
 800bf14:	d10a      	bne.n	800bf2c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f003 f872 	bl	800f004 <SDMMC_CmdStopTransfer>
 800bf20:	4602      	mov	r2, r0
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf26:	431a      	orrs	r2, r3
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d103      	bne.n	800bf3c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bf34:	68f8      	ldr	r0, [r7, #12]
 800bf36:	f004 fff9 	bl	8010f2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bf3a:	e002      	b.n	800bf42 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bf3c:	68f8      	ldr	r0, [r7, #12]
 800bf3e:	f7ff fcb7 	bl	800b8b0 <HAL_SD_ErrorCallback>
}
 800bf42:	bf00      	nop
 800bf44:	3710      	adds	r7, #16
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b084      	sub	sp, #16
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf56:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800bf60:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800bf62:	68f8      	ldr	r0, [r7, #12]
 800bf64:	f7ff fefa 	bl	800bd5c <HAL_SD_GetCardState>
 800bf68:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	2201      	movs	r2, #1
 800bf6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	2200      	movs	r2, #0
 800bf76:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	2b06      	cmp	r3, #6
 800bf7c:	d002      	beq.n	800bf84 <SD_DMARxAbort+0x3a>
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b05      	cmp	r3, #5
 800bf82:	d10a      	bne.n	800bf9a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	4618      	mov	r0, r3
 800bf8a:	f003 f83b 	bl	800f004 <SDMMC_CmdStopTransfer>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf94:	431a      	orrs	r2, r3
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d103      	bne.n	800bfaa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800bfa2:	68f8      	ldr	r0, [r7, #12]
 800bfa4:	f004 ffc2 	bl	8010f2c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800bfa8:	e002      	b.n	800bfb0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f7ff fc80 	bl	800b8b0 <HAL_SD_ErrorCallback>
}
 800bfb0:	bf00      	nop
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800bfb8:	b5b0      	push	{r4, r5, r7, lr}
 800bfba:	b094      	sub	sp, #80	; 0x50
 800bfbc:	af04      	add	r7, sp, #16
 800bfbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4618      	mov	r0, r3
 800bfca:	f002 feec 	bl	800eda6 <SDMMC_GetPowerState>
 800bfce:	4603      	mov	r3, r0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d102      	bne.n	800bfda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800bfd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800bfd8:	e0b7      	b.n	800c14a <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d02f      	beq.n	800c042 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f003 f917 	bl	800f21a <SDMMC_CmdSendCID>
 800bfec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800bfee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <SD_InitCard+0x40>
    {
      return errorstate;
 800bff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff6:	e0a8      	b.n	800c14a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	2100      	movs	r1, #0
 800bffe:	4618      	mov	r0, r3
 800c000:	f002 ff17 	bl	800ee32 <SDMMC_GetResponse>
 800c004:	4602      	mov	r2, r0
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	2104      	movs	r1, #4
 800c010:	4618      	mov	r0, r3
 800c012:	f002 ff0e 	bl	800ee32 <SDMMC_GetResponse>
 800c016:	4602      	mov	r2, r0
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	2108      	movs	r1, #8
 800c022:	4618      	mov	r0, r3
 800c024:	f002 ff05 	bl	800ee32 <SDMMC_GetResponse>
 800c028:	4602      	mov	r2, r0
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	210c      	movs	r1, #12
 800c034:	4618      	mov	r0, r3
 800c036:	f002 fefc 	bl	800ee32 <SDMMC_GetResponse>
 800c03a:	4602      	mov	r2, r0
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c046:	2b03      	cmp	r3, #3
 800c048:	d00d      	beq.n	800c066 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	f107 020e 	add.w	r2, r7, #14
 800c052:	4611      	mov	r1, r2
 800c054:	4618      	mov	r0, r3
 800c056:	f003 f91d 	bl	800f294 <SDMMC_CmdSetRelAdd>
 800c05a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d001      	beq.n	800c066 <SD_InitCard+0xae>
    {
      return errorstate;
 800c062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c064:	e071      	b.n	800c14a <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c06a:	2b03      	cmp	r3, #3
 800c06c:	d036      	beq.n	800c0dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800c06e:	89fb      	ldrh	r3, [r7, #14]
 800c070:	461a      	mov	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681a      	ldr	r2, [r3, #0]
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c07e:	041b      	lsls	r3, r3, #16
 800c080:	4619      	mov	r1, r3
 800c082:	4610      	mov	r0, r2
 800c084:	f003 f8e7 	bl	800f256 <SDMMC_CmdSendCSD>
 800c088:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800c08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d001      	beq.n	800c094 <SD_InitCard+0xdc>
    {
      return errorstate;
 800c090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c092:	e05a      	b.n	800c14a <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2100      	movs	r1, #0
 800c09a:	4618      	mov	r0, r3
 800c09c:	f002 fec9 	bl	800ee32 <SDMMC_GetResponse>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	2104      	movs	r1, #4
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f002 fec0 	bl	800ee32 <SDMMC_GetResponse>
 800c0b2:	4602      	mov	r2, r0
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2108      	movs	r1, #8
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f002 feb7 	bl	800ee32 <SDMMC_GetResponse>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	210c      	movs	r1, #12
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f002 feae 	bl	800ee32 <SDMMC_GetResponse>
 800c0d6:	4602      	mov	r2, r0
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2104      	movs	r1, #4
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f002 fea5 	bl	800ee32 <SDMMC_GetResponse>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	0d1a      	lsrs	r2, r3, #20
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800c0f0:	f107 0310 	add.w	r3, r7, #16
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7ff fbe4 	bl	800b8c4 <HAL_SD_GetCardCSD>
 800c0fc:	4603      	mov	r3, r0
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d002      	beq.n	800c108 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c102:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c106:	e020      	b.n	800c14a <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	6819      	ldr	r1, [r3, #0]
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c110:	041b      	lsls	r3, r3, #16
 800c112:	f04f 0400 	mov.w	r4, #0
 800c116:	461a      	mov	r2, r3
 800c118:	4623      	mov	r3, r4
 800c11a:	4608      	mov	r0, r1
 800c11c:	f002 ff94 	bl	800f048 <SDMMC_CmdSelDesel>
 800c120:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800c122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c124:	2b00      	cmp	r3, #0
 800c126:	d001      	beq.n	800c12c <SD_InitCard+0x174>
  {
    return errorstate;
 800c128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c12a:	e00e      	b.n	800c14a <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681d      	ldr	r5, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	466c      	mov	r4, sp
 800c134:	f103 0210 	add.w	r2, r3, #16
 800c138:	ca07      	ldmia	r2, {r0, r1, r2}
 800c13a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c13e:	3304      	adds	r3, #4
 800c140:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c142:	4628      	mov	r0, r5
 800c144:	f002 fdd6 	bl	800ecf4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800c148:	2300      	movs	r3, #0
}
 800c14a:	4618      	mov	r0, r3
 800c14c:	3740      	adds	r7, #64	; 0x40
 800c14e:	46bd      	mov	sp, r7
 800c150:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800c154 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800c154:	b580      	push	{r7, lr}
 800c156:	b086      	sub	sp, #24
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c15c:	2300      	movs	r3, #0
 800c15e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800c160:	2300      	movs	r3, #0
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	2300      	movs	r3, #0
 800c166:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	4618      	mov	r0, r3
 800c16e:	f002 ff8e 	bl	800f08e <SDMMC_CmdGoIdleState>
 800c172:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d001      	beq.n	800c17e <SD_PowerON+0x2a>
  {
    return errorstate;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	e072      	b.n	800c264 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	4618      	mov	r0, r3
 800c184:	f002 ffa1 	bl	800f0ca <SDMMC_CmdOperCond>
 800c188:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d00d      	beq.n	800c1ac <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	2200      	movs	r2, #0
 800c194:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	4618      	mov	r0, r3
 800c19c:	f002 ff77 	bl	800f08e <SDMMC_CmdGoIdleState>
 800c1a0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2b00      	cmp	r3, #0
 800c1a6:	d004      	beq.n	800c1b2 <SD_PowerON+0x5e>
    {
      return errorstate;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	e05b      	b.n	800c264 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2201      	movs	r2, #1
 800c1b0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c1b6:	2b01      	cmp	r3, #1
 800c1b8:	d137      	bne.n	800c22a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f002 ffa1 	bl	800f108 <SDMMC_CmdAppCommand>
 800c1c6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d02d      	beq.n	800c22a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c1ce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c1d2:	e047      	b.n	800c264 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	2100      	movs	r1, #0
 800c1da:	4618      	mov	r0, r3
 800c1dc:	f002 ff94 	bl	800f108 <SDMMC_CmdAppCommand>
 800c1e0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1e2:	68fb      	ldr	r3, [r7, #12]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d001      	beq.n	800c1ec <SD_PowerON+0x98>
    {
      return errorstate;
 800c1e8:	68fb      	ldr	r3, [r7, #12]
 800c1ea:	e03b      	b.n	800c264 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	491e      	ldr	r1, [pc, #120]	; (800c26c <SD_PowerON+0x118>)
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f002 ffaa 	bl	800f14c <SDMMC_CmdAppOperCommand>
 800c1f8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d002      	beq.n	800c206 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800c200:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c204:	e02e      	b.n	800c264 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	2100      	movs	r1, #0
 800c20c:	4618      	mov	r0, r3
 800c20e:	f002 fe10 	bl	800ee32 <SDMMC_GetResponse>
 800c212:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	0fdb      	lsrs	r3, r3, #31
 800c218:	2b01      	cmp	r3, #1
 800c21a:	d101      	bne.n	800c220 <SD_PowerON+0xcc>
 800c21c:	2301      	movs	r3, #1
 800c21e:	e000      	b.n	800c222 <SD_PowerON+0xce>
 800c220:	2300      	movs	r3, #0
 800c222:	613b      	str	r3, [r7, #16]

    count++;
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	3301      	adds	r3, #1
 800c228:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c230:	4293      	cmp	r3, r2
 800c232:	d802      	bhi.n	800c23a <SD_PowerON+0xe6>
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d0cc      	beq.n	800c1d4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c240:	4293      	cmp	r3, r2
 800c242:	d902      	bls.n	800c24a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800c244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c248:	e00c      	b.n	800c264 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c250:	2b00      	cmp	r3, #0
 800c252:	d003      	beq.n	800c25c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	645a      	str	r2, [r3, #68]	; 0x44
 800c25a:	e002      	b.n	800c262 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800c262:	2300      	movs	r3, #0
}
 800c264:	4618      	mov	r0, r3
 800c266:	3718      	adds	r7, #24
 800c268:	46bd      	mov	sp, r7
 800c26a:	bd80      	pop	{r7, pc}
 800c26c:	c1100000 	.word	0xc1100000

0800c270 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
 800c278:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d102      	bne.n	800c286 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800c280:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c284:	e018      	b.n	800c2b8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	681a      	ldr	r2, [r3, #0]
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c28e:	041b      	lsls	r3, r3, #16
 800c290:	4619      	mov	r1, r3
 800c292:	4610      	mov	r0, r2
 800c294:	f003 f81f 	bl	800f2d6 <SDMMC_CmdSendStatus>
 800c298:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d001      	beq.n	800c2a4 <SD_SendStatus+0x34>
  {
    return errorstate;
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	e009      	b.n	800c2b8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	f002 fdc1 	bl	800ee32 <SDMMC_GetResponse>
 800c2b0:	4602      	mov	r2, r0
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	3710      	adds	r7, #16
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b086      	sub	sp, #24
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	60fb      	str	r3, [r7, #12]
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	2100      	movs	r1, #0
 800c2d6:	4618      	mov	r0, r3
 800c2d8:	f002 fdab 	bl	800ee32 <SDMMC_GetResponse>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2e6:	d102      	bne.n	800c2ee <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c2ec:	e02f      	b.n	800c34e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c2ee:	f107 030c 	add.w	r3, r7, #12
 800c2f2:	4619      	mov	r1, r3
 800c2f4:	6878      	ldr	r0, [r7, #4]
 800c2f6:	f000 f879 	bl	800c3ec <SD_FindSCR>
 800c2fa:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d001      	beq.n	800c306 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	e023      	b.n	800c34e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c306:	693b      	ldr	r3, [r7, #16]
 800c308:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800c30c:	2b00      	cmp	r3, #0
 800c30e:	d01c      	beq.n	800c34a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681a      	ldr	r2, [r3, #0]
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c318:	041b      	lsls	r3, r3, #16
 800c31a:	4619      	mov	r1, r3
 800c31c:	4610      	mov	r0, r2
 800c31e:	f002 fef3 	bl	800f108 <SDMMC_CmdAppCommand>
 800c322:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d001      	beq.n	800c32e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	e00f      	b.n	800c34e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2102      	movs	r1, #2
 800c334:	4618      	mov	r0, r3
 800c336:	f002 ff2d 	bl	800f194 <SDMMC_CmdBusWidth>
 800c33a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	e003      	b.n	800c34e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c346:	2300      	movs	r3, #0
 800c348:	e001      	b.n	800c34e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c34a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3718      	adds	r7, #24
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b086      	sub	sp, #24
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800c35e:	2300      	movs	r3, #0
 800c360:	60fb      	str	r3, [r7, #12]
 800c362:	2300      	movs	r3, #0
 800c364:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	2100      	movs	r1, #0
 800c36c:	4618      	mov	r0, r3
 800c36e:	f002 fd60 	bl	800ee32 <SDMMC_GetResponse>
 800c372:	4603      	mov	r3, r0
 800c374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c378:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c37c:	d102      	bne.n	800c384 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800c37e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800c382:	e02f      	b.n	800c3e4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800c384:	f107 030c 	add.w	r3, r7, #12
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 f82e 	bl	800c3ec <SD_FindSCR>
 800c390:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	e023      	b.n	800c3e4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800c39c:	693b      	ldr	r3, [r7, #16]
 800c39e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d01c      	beq.n	800c3e0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681a      	ldr	r2, [r3, #0]
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3ae:	041b      	lsls	r3, r3, #16
 800c3b0:	4619      	mov	r1, r3
 800c3b2:	4610      	mov	r0, r2
 800c3b4:	f002 fea8 	bl	800f108 <SDMMC_CmdAppCommand>
 800c3b8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d001      	beq.n	800c3c4 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	e00f      	b.n	800c3e4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2100      	movs	r1, #0
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f002 fee2 	bl	800f194 <SDMMC_CmdBusWidth>
 800c3d0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800c3d2:	697b      	ldr	r3, [r7, #20]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	e003      	b.n	800c3e4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800c3dc:	2300      	movs	r3, #0
 800c3de:	e001      	b.n	800c3e4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800c3e0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3718      	adds	r7, #24
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}

0800c3ec <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800c3ec:	b590      	push	{r4, r7, lr}
 800c3ee:	b08f      	sub	sp, #60	; 0x3c
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800c3f6:	f7fb f8b7 	bl	8007568 <HAL_GetTick>
 800c3fa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800c400:	2300      	movs	r3, #0
 800c402:	60bb      	str	r3, [r7, #8]
 800c404:	2300      	movs	r3, #0
 800c406:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2108      	movs	r1, #8
 800c412:	4618      	mov	r0, r3
 800c414:	f002 fd4c 	bl	800eeb0 <SDMMC_CmdBlockLength>
 800c418:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d001      	beq.n	800c424 <SD_FindSCR+0x38>
  {
    return errorstate;
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	e0a9      	b.n	800c578 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c42c:	041b      	lsls	r3, r3, #16
 800c42e:	4619      	mov	r1, r3
 800c430:	4610      	mov	r0, r2
 800c432:	f002 fe69 	bl	800f108 <SDMMC_CmdAppCommand>
 800c436:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <SD_FindSCR+0x56>
  {
    return errorstate;
 800c43e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c440:	e09a      	b.n	800c578 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800c442:	f04f 33ff 	mov.w	r3, #4294967295
 800c446:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800c448:	2308      	movs	r3, #8
 800c44a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800c44c:	2330      	movs	r3, #48	; 0x30
 800c44e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800c450:	2302      	movs	r3, #2
 800c452:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800c454:	2300      	movs	r3, #0
 800c456:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800c458:	2301      	movs	r3, #1
 800c45a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	f107 0210 	add.w	r2, r7, #16
 800c464:	4611      	mov	r1, r2
 800c466:	4618      	mov	r0, r3
 800c468:	f002 fcf6 	bl	800ee58 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4618      	mov	r0, r3
 800c472:	f002 feb1 	bl	800f1d8 <SDMMC_CmdSendSCR>
 800c476:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800c478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d022      	beq.n	800c4c4 <SD_FindSCR+0xd8>
  {
    return errorstate;
 800c47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c480:	e07a      	b.n	800c578 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c488:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d00e      	beq.n	800c4ae <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	6819      	ldr	r1, [r3, #0]
 800c494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	f107 0208 	add.w	r2, r7, #8
 800c49c:	18d4      	adds	r4, r2, r3
 800c49e:	4608      	mov	r0, r1
 800c4a0:	f002 fc54 	bl	800ed4c <SDMMC_ReadFIFO>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	6023      	str	r3, [r4, #0]
      index++;
 800c4a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4aa:	3301      	adds	r3, #1
 800c4ac:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800c4ae:	f7fb f85b 	bl	8007568 <HAL_GetTick>
 800c4b2:	4602      	mov	r2, r0
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c4b6:	1ad3      	subs	r3, r2, r3
 800c4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4bc:	d102      	bne.n	800c4c4 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800c4be:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c4c2:	e059      	b.n	800c578 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c4ca:	f240 432a 	movw	r3, #1066	; 0x42a
 800c4ce:	4013      	ands	r3, r2
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d0d6      	beq.n	800c482 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4da:	f003 0308 	and.w	r3, r3, #8
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d005      	beq.n	800c4ee <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	2208      	movs	r2, #8
 800c4e8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800c4ea:	2308      	movs	r3, #8
 800c4ec:	e044      	b.n	800c578 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4f4:	f003 0302 	and.w	r3, r3, #2
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d005      	beq.n	800c508 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2202      	movs	r2, #2
 800c502:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800c504:	2302      	movs	r3, #2
 800c506:	e037      	b.n	800c578 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c50e:	f003 0320 	and.w	r3, r3, #32
 800c512:	2b00      	cmp	r3, #0
 800c514:	d005      	beq.n	800c522 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	2220      	movs	r2, #32
 800c51c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800c51e:	2320      	movs	r3, #32
 800c520:	e02a      	b.n	800c578 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	f240 523a 	movw	r2, #1338	; 0x53a
 800c52a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	061a      	lsls	r2, r3, #24
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c538:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	0a1b      	lsrs	r3, r3, #8
 800c53e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c542:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	0e1b      	lsrs	r3, r3, #24
 800c548:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800c54a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c54c:	601a      	str	r2, [r3, #0]
    scr++;
 800c54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c550:	3304      	adds	r3, #4
 800c552:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c554:	68bb      	ldr	r3, [r7, #8]
 800c556:	061a      	lsls	r2, r3, #24
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	021b      	lsls	r3, r3, #8
 800c55c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c560:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	0a1b      	lsrs	r3, r3, #8
 800c566:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c56a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	0e1b      	lsrs	r3, r3, #24
 800c570:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800c572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c574:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800c576:	2300      	movs	r3, #0
}
 800c578:	4618      	mov	r0, r3
 800c57a:	373c      	adds	r7, #60	; 0x3c
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd90      	pop	{r4, r7, pc}

0800c580 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c58c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c592:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d03f      	beq.n	800c61a <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800c59a:	2300      	movs	r3, #0
 800c59c:	617b      	str	r3, [r7, #20]
 800c59e:	e033      	b.n	800c608 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	f002 fbd1 	bl	800ed4c <SDMMC_ReadFIFO>
 800c5aa:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	3301      	adds	r3, #1
 800c5b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	3b01      	subs	r3, #1
 800c5be:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	0a1b      	lsrs	r3, r3, #8
 800c5c4:	b2da      	uxtb	r2, r3
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	3b01      	subs	r3, #1
 800c5d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	0c1b      	lsrs	r3, r3, #16
 800c5da:	b2da      	uxtb	r2, r3
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	3301      	adds	r3, #1
 800c5e4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5e6:	693b      	ldr	r3, [r7, #16]
 800c5e8:	3b01      	subs	r3, #1
 800c5ea:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	0e1b      	lsrs	r3, r3, #24
 800c5f0:	b2da      	uxtb	r2, r3
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	701a      	strb	r2, [r3, #0]
      tmp++;
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	3301      	adds	r3, #1
 800c5fa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c5fc:	693b      	ldr	r3, [r7, #16]
 800c5fe:	3b01      	subs	r3, #1
 800c600:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	3301      	adds	r3, #1
 800c606:	617b      	str	r3, [r7, #20]
 800c608:	697b      	ldr	r3, [r7, #20]
 800c60a:	2b07      	cmp	r3, #7
 800c60c:	d9c8      	bls.n	800c5a0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800c61a:	bf00      	nop
 800c61c:	3718      	adds	r7, #24
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800c622:	b580      	push	{r7, lr}
 800c624:	b086      	sub	sp, #24
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6a1b      	ldr	r3, [r3, #32]
 800c62e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c634:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d043      	beq.n	800c6c4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800c63c:	2300      	movs	r3, #0
 800c63e:	617b      	str	r3, [r7, #20]
 800c640:	e037      	b.n	800c6b2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	3301      	adds	r3, #1
 800c64c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c64e:	693b      	ldr	r3, [r7, #16]
 800c650:	3b01      	subs	r3, #1
 800c652:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	021a      	lsls	r2, r3, #8
 800c65a:	68bb      	ldr	r3, [r7, #8]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	3301      	adds	r3, #1
 800c664:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	3b01      	subs	r3, #1
 800c66a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	781b      	ldrb	r3, [r3, #0]
 800c670:	041a      	lsls	r2, r3, #16
 800c672:	68bb      	ldr	r3, [r7, #8]
 800c674:	4313      	orrs	r3, r2
 800c676:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	3301      	adds	r3, #1
 800c67c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	3b01      	subs	r3, #1
 800c682:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	061a      	lsls	r2, r3, #24
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	4313      	orrs	r3, r2
 800c68e:	60bb      	str	r3, [r7, #8]
      tmp++;
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	3301      	adds	r3, #1
 800c694:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	3b01      	subs	r3, #1
 800c69a:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f107 0208 	add.w	r2, r7, #8
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f002 fb5d 	bl	800ed66 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800c6ac:	697b      	ldr	r3, [r7, #20]
 800c6ae:	3301      	adds	r3, #1
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	2b07      	cmp	r3, #7
 800c6b6:	d9c4      	bls.n	800c642 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	68fa      	ldr	r2, [r7, #12]
 800c6bc:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800c6c4:	bf00      	nop
 800c6c6:	3718      	adds	r7, #24
 800c6c8:	46bd      	mov	sp, r7
 800c6ca:	bd80      	pop	{r7, pc}

0800c6cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	b084      	sub	sp, #16
 800c6d0:	af00      	add	r7, sp, #0
 800c6d2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800c6da:	2301      	movs	r3, #1
 800c6dc:	e084      	b.n	800c7e8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2200      	movs	r2, #0
 800c6e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d106      	bne.n	800c6fe <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7f8 fdc7 	bl	800528c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	2202      	movs	r2, #2
 800c702:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	681a      	ldr	r2, [r3, #0]
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c714:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	68db      	ldr	r3, [r3, #12]
 800c71a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c71e:	d902      	bls.n	800c726 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800c720:	2300      	movs	r3, #0
 800c722:	60fb      	str	r3, [r7, #12]
 800c724:	e002      	b.n	800c72c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800c726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c72a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	68db      	ldr	r3, [r3, #12]
 800c730:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800c734:	d007      	beq.n	800c746 <HAL_SPI_Init+0x7a>
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	68db      	ldr	r3, [r3, #12]
 800c73a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c73e:	d002      	beq.n	800c746 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d10b      	bne.n	800c766 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c756:	d903      	bls.n	800c760 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	2202      	movs	r2, #2
 800c75c:	631a      	str	r2, [r3, #48]	; 0x30
 800c75e:	e002      	b.n	800c766 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2201      	movs	r2, #1
 800c764:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	685a      	ldr	r2, [r3, #4]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	431a      	orrs	r2, r3
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	691b      	ldr	r3, [r3, #16]
 800c774:	431a      	orrs	r2, r3
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	695b      	ldr	r3, [r3, #20]
 800c77a:	431a      	orrs	r2, r3
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c784:	431a      	orrs	r2, r3
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	431a      	orrs	r2, r3
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	6a1b      	ldr	r3, [r3, #32]
 800c790:	ea42 0103 	orr.w	r1, r2, r3
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	430a      	orrs	r2, r1
 800c79e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	699b      	ldr	r3, [r3, #24]
 800c7a4:	0c1b      	lsrs	r3, r3, #16
 800c7a6:	f003 0204 	and.w	r2, r3, #4
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ae:	431a      	orrs	r2, r3
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c7b4:	431a      	orrs	r2, r3
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	68db      	ldr	r3, [r3, #12]
 800c7ba:	ea42 0103 	orr.w	r1, r2, r3
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	68fa      	ldr	r2, [r7, #12]
 800c7c4:	430a      	orrs	r2, r1
 800c7c6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	69da      	ldr	r2, [r3, #28]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c7d6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	2201      	movs	r2, #1
 800c7e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800c7e6:	2300      	movs	r3, #0
}
 800c7e8:	4618      	mov	r0, r3
 800c7ea:	3710      	adds	r7, #16
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	4613      	mov	r3, r2
 800c7fc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	689b      	ldr	r3, [r3, #8]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d110      	bne.n	800c82c <HAL_SPI_Receive_DMA+0x3c>
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	685b      	ldr	r3, [r3, #4]
 800c80e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800c812:	d10b      	bne.n	800c82c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	2204      	movs	r2, #4
 800c818:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800c81c:	88fb      	ldrh	r3, [r7, #6]
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	68b9      	ldr	r1, [r7, #8]
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f000 f900 	bl	800ca28 <HAL_SPI_TransmitReceive_DMA>
 800c828:	4603      	mov	r3, r0
 800c82a:	e0f3      	b.n	800ca14 <HAL_SPI_Receive_DMA+0x224>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800c832:	2b01      	cmp	r3, #1
 800c834:	d101      	bne.n	800c83a <HAL_SPI_Receive_DMA+0x4a>
 800c836:	2302      	movs	r3, #2
 800c838:	e0ec      	b.n	800ca14 <HAL_SPI_Receive_DMA+0x224>
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	2201      	movs	r2, #1
 800c83e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800c848:	b2db      	uxtb	r3, r3
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d002      	beq.n	800c854 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 800c84e:	2302      	movs	r3, #2
 800c850:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c852:	e0da      	b.n	800ca0a <HAL_SPI_Receive_DMA+0x21a>
  }

  if ((pData == NULL) || (Size == 0U))
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d002      	beq.n	800c860 <HAL_SPI_Receive_DMA+0x70>
 800c85a:	88fb      	ldrh	r3, [r7, #6]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d102      	bne.n	800c866 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800c860:	2301      	movs	r3, #1
 800c862:	75fb      	strb	r3, [r7, #23]
    goto error;
 800c864:	e0d1      	b.n	800ca0a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	2204      	movs	r2, #4
 800c86a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	2200      	movs	r2, #0
 800c872:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	68ba      	ldr	r2, [r7, #8]
 800c878:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800c87a:	68fb      	ldr	r3, [r7, #12]
 800c87c:	88fa      	ldrh	r2, [r7, #6]
 800c87e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	88fa      	ldrh	r2, [r7, #6]
 800c886:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	2200      	movs	r2, #0
 800c894:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	2200      	movs	r2, #0
 800c89a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8aa:	d107      	bne.n	800c8bc <HAL_SPI_Receive_DMA+0xcc>
  {
    SPI_1LINE_RX(hspi);
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800c8ba:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	681b      	ldr	r3, [r3, #0]
 800c8c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c8ca:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	68db      	ldr	r3, [r3, #12]
 800c8d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800c8d4:	d908      	bls.n	800c8e8 <HAL_SPI_Receive_DMA+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	685a      	ldr	r2, [r3, #4]
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c8e4:	605a      	str	r2, [r3, #4]
 800c8e6:	e042      	b.n	800c96e <HAL_SPI_Receive_DMA+0x17e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c8e8:	68fb      	ldr	r3, [r7, #12]
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800c8f6:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8fc:	699b      	ldr	r3, [r3, #24]
 800c8fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c902:	d134      	bne.n	800c96e <HAL_SPI_Receive_DMA+0x17e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	685a      	ldr	r2, [r3, #4]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	681b      	ldr	r3, [r3, #0]
 800c90e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800c912:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c91a:	b29b      	uxth	r3, r3
 800c91c:	f003 0301 	and.w	r3, r3, #1
 800c920:	2b00      	cmp	r3, #0
 800c922:	d111      	bne.n	800c948 <HAL_SPI_Receive_DMA+0x158>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	685a      	ldr	r2, [r3, #4]
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c932:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	085b      	lsrs	r3, r3, #1
 800c93e:	b29a      	uxth	r2, r3
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800c946:	e012      	b.n	800c96e <HAL_SPI_Receive_DMA+0x17e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	685a      	ldr	r2, [r3, #4]
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	681b      	ldr	r3, [r3, #0]
 800c952:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c956:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c95e:	b29b      	uxth	r3, r3
 800c960:	085b      	lsrs	r3, r3, #1
 800c962:	b29b      	uxth	r3, r3
 800c964:	3301      	adds	r3, #1
 800c966:	b29a      	uxth	r2, r3
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c972:	4a2a      	ldr	r2, [pc, #168]	; (800ca1c <HAL_SPI_Receive_DMA+0x22c>)
 800c974:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c97a:	4a29      	ldr	r2, [pc, #164]	; (800ca20 <HAL_SPI_Receive_DMA+0x230>)
 800c97c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c982:	4a28      	ldr	r2, [pc, #160]	; (800ca24 <HAL_SPI_Receive_DMA+0x234>)
 800c984:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c98a:	2200      	movs	r2, #0
 800c98c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	330c      	adds	r3, #12
 800c998:	4619      	mov	r1, r3
 800c99a:	68fb      	ldr	r3, [r7, #12]
 800c99c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c99e:	461a      	mov	r2, r3
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	f7fb fbfc 	bl	80081a4 <HAL_DMA_Start_IT>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00c      	beq.n	800c9cc <HAL_SPI_Receive_DMA+0x1dc>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c9b6:	f043 0210 	orr.w	r2, r3, #16
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800c9ca:	e01e      	b.n	800ca0a <HAL_SPI_Receive_DMA+0x21a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9d6:	2b40      	cmp	r3, #64	; 0x40
 800c9d8:	d007      	beq.n	800c9ea <HAL_SPI_Receive_DMA+0x1fa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	681a      	ldr	r2, [r3, #0]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9e8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	685a      	ldr	r2, [r3, #4]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f042 0220 	orr.w	r2, r2, #32
 800c9f8:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	685a      	ldr	r2, [r3, #4]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f042 0201 	orr.w	r2, r2, #1
 800ca08:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ca12:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca14:	4618      	mov	r0, r3
 800ca16:	3718      	adds	r7, #24
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	0800d0a9 	.word	0x0800d0a9
 800ca20:	0800cf91 	.word	0x0800cf91
 800ca24:	0800d0e1 	.word	0x0800d0e1

0800ca28 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b086      	sub	sp, #24
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	60f8      	str	r0, [r7, #12]
 800ca30:	60b9      	str	r1, [r7, #8]
 800ca32:	607a      	str	r2, [r7, #4]
 800ca34:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d101      	bne.n	800ca48 <HAL_SPI_TransmitReceive_DMA+0x20>
 800ca44:	2302      	movs	r3, #2
 800ca46:	e16c      	b.n	800cd22 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	2201      	movs	r2, #1
 800ca4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca56:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	685b      	ldr	r3, [r3, #4]
 800ca5c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800ca5e:	7dbb      	ldrb	r3, [r7, #22]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d00d      	beq.n	800ca80 <HAL_SPI_TransmitReceive_DMA+0x58>
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ca6a:	d106      	bne.n	800ca7a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	689b      	ldr	r3, [r3, #8]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d102      	bne.n	800ca7a <HAL_SPI_TransmitReceive_DMA+0x52>
 800ca74:	7dbb      	ldrb	r3, [r7, #22]
 800ca76:	2b04      	cmp	r3, #4
 800ca78:	d002      	beq.n	800ca80 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800ca7a:	2302      	movs	r3, #2
 800ca7c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca7e:	e14b      	b.n	800cd18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800ca80:	68bb      	ldr	r3, [r7, #8]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d005      	beq.n	800ca92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800ca8c:	887b      	ldrh	r3, [r7, #2]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d102      	bne.n	800ca98 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800ca92:	2301      	movs	r3, #1
 800ca94:	75fb      	strb	r3, [r7, #23]
    goto error;
 800ca96:	e13f      	b.n	800cd18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800ca9e:	b2db      	uxtb	r3, r3
 800caa0:	2b04      	cmp	r3, #4
 800caa2:	d003      	beq.n	800caac <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2205      	movs	r2, #5
 800caa8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2200      	movs	r2, #0
 800cab0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	887a      	ldrh	r2, [r7, #2]
 800cabc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800cabe:	68fb      	ldr	r3, [r7, #12]
 800cac0:	887a      	ldrh	r2, [r7, #2]
 800cac2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	687a      	ldr	r2, [r7, #4]
 800cac8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	887a      	ldrh	r2, [r7, #2]
 800cace:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	887a      	ldrh	r2, [r7, #2]
 800cad6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	2200      	movs	r2, #0
 800cade:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	2200      	movs	r2, #0
 800cae4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800cae6:	68fb      	ldr	r3, [r7, #12]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	685a      	ldr	r2, [r3, #4]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800caf4:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800cafe:	d908      	bls.n	800cb12 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	685a      	ldr	r2, [r3, #4]
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb0e:	605a      	str	r2, [r3, #4]
 800cb10:	e06f      	b.n	800cbf2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	685a      	ldr	r2, [r3, #4]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800cb20:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb2c:	d126      	bne.n	800cb7c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800cb32:	f003 0301 	and.w	r3, r3, #1
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d10f      	bne.n	800cb5a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	685a      	ldr	r2, [r3, #4]
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800cb48:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	085b      	lsrs	r3, r3, #1
 800cb52:	b29a      	uxth	r2, r3
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	87da      	strh	r2, [r3, #62]	; 0x3e
 800cb58:	e010      	b.n	800cb7c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	685a      	ldr	r2, [r3, #4]
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cb68:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800cb6e:	b29b      	uxth	r3, r3
 800cb70:	085b      	lsrs	r3, r3, #1
 800cb72:	b29b      	uxth	r3, r3
 800cb74:	3301      	adds	r3, #1
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb80:	699b      	ldr	r3, [r3, #24]
 800cb82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cb86:	d134      	bne.n	800cbf2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	685a      	ldr	r2, [r3, #4]
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800cb96:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cb9e:	b29b      	uxth	r3, r3
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d111      	bne.n	800cbcc <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	685a      	ldr	r2, [r3, #4]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800cbb6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbbe:	b29b      	uxth	r3, r3
 800cbc0:	085b      	lsrs	r3, r3, #1
 800cbc2:	b29a      	uxth	r2, r3
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800cbca:	e012      	b.n	800cbf2 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	685a      	ldr	r2, [r3, #4]
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800cbda:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	085b      	lsrs	r3, r3, #1
 800cbe6:	b29b      	uxth	r3, r3
 800cbe8:	3301      	adds	r3, #1
 800cbea:	b29a      	uxth	r2, r3
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cbf8:	b2db      	uxtb	r3, r3
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	d108      	bne.n	800cc10 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc02:	4a4a      	ldr	r2, [pc, #296]	; (800cd2c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800cc04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc0a:	4a49      	ldr	r2, [pc, #292]	; (800cd30 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800cc0c:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc0e:	e007      	b.n	800cc20 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc14:	4a47      	ldr	r2, [pc, #284]	; (800cd34 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800cc16:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc1c:	4a46      	ldr	r2, [pc, #280]	; (800cd38 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800cc1e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc24:	4a45      	ldr	r2, [pc, #276]	; (800cd3c <HAL_SPI_TransmitReceive_DMA+0x314>)
 800cc26:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc2c:	2200      	movs	r2, #0
 800cc2e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	330c      	adds	r3, #12
 800cc3a:	4619      	mov	r1, r3
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc40:	461a      	mov	r2, r3
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800cc48:	b29b      	uxth	r3, r3
 800cc4a:	f7fb faab 	bl	80081a4 <HAL_DMA_Start_IT>
 800cc4e:	4603      	mov	r3, r0
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00c      	beq.n	800cc6e <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc58:	f043 0210 	orr.w	r2, r3, #16
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800cc6c:	e054      	b.n	800cd18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	685a      	ldr	r2, [r3, #4]
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f042 0201 	orr.w	r2, r2, #1
 800cc7c:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc82:	2200      	movs	r2, #0
 800cc84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc92:	2200      	movs	r2, #0
 800cc94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cca6:	4619      	mov	r1, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	330c      	adds	r3, #12
 800ccae:	461a      	mov	r2, r3
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	f7fb fa75 	bl	80081a4 <HAL_DMA_Start_IT>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d00c      	beq.n	800ccda <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ccc4:	f043 0210 	orr.w	r2, r3, #16
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800cccc:	2301      	movs	r3, #1
 800ccce:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 800ccd8:	e01e      	b.n	800cd18 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ccda:	68fb      	ldr	r3, [r7, #12]
 800ccdc:	681b      	ldr	r3, [r3, #0]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cce4:	2b40      	cmp	r3, #64	; 0x40
 800cce6:	d007      	beq.n	800ccf8 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ccf6:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f042 0220 	orr.w	r2, r2, #32
 800cd06:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	685a      	ldr	r2, [r3, #4]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f042 0202 	orr.w	r2, r2, #2
 800cd16:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800cd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}
 800cd2a:	bf00      	nop
 800cd2c:	0800d0a9 	.word	0x0800d0a9
 800cd30:	0800cf91 	.word	0x0800cf91
 800cd34:	0800d0c5 	.word	0x0800d0c5
 800cd38:	0800d017 	.word	0x0800d017
 800cd3c:	0800d0e1 	.word	0x0800d0e1

0800cd40 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b088      	sub	sp, #32
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	685b      	ldr	r3, [r3, #4]
 800cd4e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cd58:	69bb      	ldr	r3, [r7, #24]
 800cd5a:	099b      	lsrs	r3, r3, #6
 800cd5c:	f003 0301 	and.w	r3, r3, #1
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d10f      	bne.n	800cd84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cd64:	69bb      	ldr	r3, [r7, #24]
 800cd66:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d00a      	beq.n	800cd84 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	099b      	lsrs	r3, r3, #6
 800cd72:	f003 0301 	and.w	r3, r3, #1
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d004      	beq.n	800cd84 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	4798      	blx	r3
    return;
 800cd82:	e0d8      	b.n	800cf36 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800cd84:	69bb      	ldr	r3, [r7, #24]
 800cd86:	085b      	lsrs	r3, r3, #1
 800cd88:	f003 0301 	and.w	r3, r3, #1
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00a      	beq.n	800cda6 <HAL_SPI_IRQHandler+0x66>
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	09db      	lsrs	r3, r3, #7
 800cd94:	f003 0301 	and.w	r3, r3, #1
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d004      	beq.n	800cda6 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	4798      	blx	r3
    return;
 800cda4:	e0c7      	b.n	800cf36 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	095b      	lsrs	r3, r3, #5
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d10c      	bne.n	800cdcc <HAL_SPI_IRQHandler+0x8c>
 800cdb2:	69bb      	ldr	r3, [r7, #24]
 800cdb4:	099b      	lsrs	r3, r3, #6
 800cdb6:	f003 0301 	and.w	r3, r3, #1
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d106      	bne.n	800cdcc <HAL_SPI_IRQHandler+0x8c>
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	0a1b      	lsrs	r3, r3, #8
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	f000 80b5 	beq.w	800cf36 <HAL_SPI_IRQHandler+0x1f6>
 800cdcc:	69fb      	ldr	r3, [r7, #28]
 800cdce:	095b      	lsrs	r3, r3, #5
 800cdd0:	f003 0301 	and.w	r3, r3, #1
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 80ae 	beq.w	800cf36 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800cdda:	69bb      	ldr	r3, [r7, #24]
 800cddc:	099b      	lsrs	r3, r3, #6
 800cdde:	f003 0301 	and.w	r3, r3, #1
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d023      	beq.n	800ce2e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800cdec:	b2db      	uxtb	r3, r3
 800cdee:	2b03      	cmp	r3, #3
 800cdf0:	d011      	beq.n	800ce16 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cdf6:	f043 0204 	orr.w	r2, r3, #4
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800cdfe:	2300      	movs	r3, #0
 800ce00:	617b      	str	r3, [r7, #20]
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	68db      	ldr	r3, [r3, #12]
 800ce08:	617b      	str	r3, [r7, #20]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	689b      	ldr	r3, [r3, #8]
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	697b      	ldr	r3, [r7, #20]
 800ce14:	e00b      	b.n	800ce2e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ce16:	2300      	movs	r3, #0
 800ce18:	613b      	str	r3, [r7, #16]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	68db      	ldr	r3, [r3, #12]
 800ce20:	613b      	str	r3, [r7, #16]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	689b      	ldr	r3, [r3, #8]
 800ce28:	613b      	str	r3, [r7, #16]
 800ce2a:	693b      	ldr	r3, [r7, #16]
        return;
 800ce2c:	e083      	b.n	800cf36 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ce2e:	69bb      	ldr	r3, [r7, #24]
 800ce30:	095b      	lsrs	r3, r3, #5
 800ce32:	f003 0301 	and.w	r3, r3, #1
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d014      	beq.n	800ce64 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce3e:	f043 0201 	orr.w	r2, r3, #1
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ce46:	2300      	movs	r3, #0
 800ce48:	60fb      	str	r3, [r7, #12]
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	689b      	ldr	r3, [r3, #8]
 800ce50:	60fb      	str	r3, [r7, #12]
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce60:	601a      	str	r2, [r3, #0]
 800ce62:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ce64:	69bb      	ldr	r3, [r7, #24]
 800ce66:	0a1b      	lsrs	r3, r3, #8
 800ce68:	f003 0301 	and.w	r3, r3, #1
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d00c      	beq.n	800ce8a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce74:	f043 0208 	orr.w	r2, r3, #8
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	60bb      	str	r3, [r7, #8]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	689b      	ldr	r3, [r3, #8]
 800ce86:	60bb      	str	r3, [r7, #8]
 800ce88:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d050      	beq.n	800cf34 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	685a      	ldr	r2, [r3, #4]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800cea0:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2201      	movs	r2, #1
 800cea6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ceaa:	69fb      	ldr	r3, [r7, #28]
 800ceac:	f003 0302 	and.w	r3, r3, #2
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d104      	bne.n	800cebe <HAL_SPI_IRQHandler+0x17e>
 800ceb4:	69fb      	ldr	r3, [r7, #28]
 800ceb6:	f003 0301 	and.w	r3, r3, #1
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d034      	beq.n	800cf28 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	685a      	ldr	r2, [r3, #4]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f022 0203 	bic.w	r2, r2, #3
 800cecc:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d011      	beq.n	800cefa <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ceda:	4a18      	ldr	r2, [pc, #96]	; (800cf3c <HAL_SPI_IRQHandler+0x1fc>)
 800cedc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cee2:	4618      	mov	r0, r3
 800cee4:	f7fb fa2e 	bl	8008344 <HAL_DMA_Abort_IT>
 800cee8:	4603      	mov	r3, r0
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d005      	beq.n	800cefa <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d016      	beq.n	800cf30 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf06:	4a0d      	ldr	r2, [pc, #52]	; (800cf3c <HAL_SPI_IRQHandler+0x1fc>)
 800cf08:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7fb fa18 	bl	8008344 <HAL_DMA_Abort_IT>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d00a      	beq.n	800cf30 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cf1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800cf26:	e003      	b.n	800cf30 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f827 	bl	800cf7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800cf2e:	e000      	b.n	800cf32 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800cf30:	bf00      	nop
    return;
 800cf32:	bf00      	nop
 800cf34:	bf00      	nop
  }
}
 800cf36:	3720      	adds	r7, #32
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}
 800cf3c:	0800d121 	.word	0x0800d121

0800cf40 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf40:	b480      	push	{r7}
 800cf42:	b083      	sub	sp, #12
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr

0800cf54 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf54:	b480      	push	{r7}
 800cf56:	b083      	sub	sp, #12
 800cf58:	af00      	add	r7, sp, #0
 800cf5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800cf5c:	bf00      	nop
 800cf5e:	370c      	adds	r7, #12
 800cf60:	46bd      	mov	sp, r7
 800cf62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf66:	4770      	bx	lr

0800cf68 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800cf70:	bf00      	nop
 800cf72:	370c      	adds	r7, #12
 800cf74:	46bd      	mov	sp, r7
 800cf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf7a:	4770      	bx	lr

0800cf7c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800cf84:	bf00      	nop
 800cf86:	370c      	adds	r7, #12
 800cf88:	46bd      	mov	sp, r7
 800cf8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8e:	4770      	bx	lr

0800cf90 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf9c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cf9e:	f7fa fae3 	bl	8007568 <HAL_GetTick>
 800cfa2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cfb2:	d02a      	beq.n	800d00a <SPI_DMAReceiveCplt+0x7a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800cfb4:	68fb      	ldr	r3, [r7, #12]
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	685a      	ldr	r2, [r3, #4]
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	f022 0220 	bic.w	r2, r2, #32
 800cfc2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	685a      	ldr	r2, [r3, #4]
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f022 0203 	bic.w	r2, r2, #3
 800cfd2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800cfd4:	68ba      	ldr	r2, [r7, #8]
 800cfd6:	2164      	movs	r1, #100	; 0x64
 800cfd8:	68f8      	ldr	r0, [r7, #12]
 800cfda:	f000 f98d 	bl	800d2f8 <SPI_EndRxTransaction>
 800cfde:	4603      	mov	r3, r0
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d002      	beq.n	800cfea <SPI_DMAReceiveCplt+0x5a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	2220      	movs	r2, #32
 800cfe8:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	2200      	movs	r2, #0
 800cfee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800cff2:	68fb      	ldr	r3, [r7, #12]
 800cff4:	2201      	movs	r2, #1
 800cff6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d003      	beq.n	800d00a <SPI_DMAReceiveCplt+0x7a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d002:	68f8      	ldr	r0, [r7, #12]
 800d004:	f7ff ffba 	bl	800cf7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d008:	e002      	b.n	800d010 <SPI_DMAReceiveCplt+0x80>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800d00a:	68f8      	ldr	r0, [r7, #12]
 800d00c:	f7f9 fdc2 	bl	8006b94 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d010:	3710      	adds	r7, #16
 800d012:	46bd      	mov	sp, r7
 800d014:	bd80      	pop	{r7, pc}

0800d016 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d016:	b580      	push	{r7, lr}
 800d018:	b084      	sub	sp, #16
 800d01a:	af00      	add	r7, sp, #0
 800d01c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d022:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d024:	f7fa faa0 	bl	8007568 <HAL_GetTick>
 800d028:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d034:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d038:	d030      	beq.n	800d09c <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	685a      	ldr	r2, [r3, #4]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f022 0220 	bic.w	r2, r2, #32
 800d048:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	2164      	movs	r1, #100	; 0x64
 800d04e:	68f8      	ldr	r0, [r7, #12]
 800d050:	f000 f9aa 	bl	800d3a8 <SPI_EndRxTxTransaction>
 800d054:	4603      	mov	r3, r0
 800d056:	2b00      	cmp	r3, #0
 800d058:	d005      	beq.n	800d066 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d05e:	f043 0220 	orr.w	r2, r3, #32
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	685a      	ldr	r2, [r3, #4]
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	f022 0203 	bic.w	r2, r2, #3
 800d074:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	2200      	movs	r2, #0
 800d07a:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	2200      	movs	r2, #0
 800d080:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2201      	movs	r2, #1
 800d088:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d090:	2b00      	cmp	r3, #0
 800d092:	d003      	beq.n	800d09c <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f7ff ff71 	bl	800cf7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800d09a:	e002      	b.n	800d0a2 <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f7ff ff4f 	bl	800cf40 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0a2:	3710      	adds	r7, #16
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0b4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800d0b6:	68f8      	ldr	r0, [r7, #12]
 800d0b8:	f7ff ff4c 	bl	800cf54 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0bc:	bf00      	nop
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}

0800d0c4 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d0c4:	b580      	push	{r7, lr}
 800d0c6:	b084      	sub	sp, #16
 800d0c8:	af00      	add	r7, sp, #0
 800d0ca:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0d0:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800d0d2:	68f8      	ldr	r0, [r7, #12]
 800d0d4:	f7ff ff48 	bl	800cf68 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d0d8:	bf00      	nop
 800d0da:	3710      	adds	r7, #16
 800d0dc:	46bd      	mov	sp, r7
 800d0de:	bd80      	pop	{r7, pc}

0800d0e0 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ec:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	685a      	ldr	r2, [r3, #4]
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	f022 0203 	bic.w	r2, r2, #3
 800d0fc:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d102:	f043 0210 	orr.w	r2, r3, #16
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2201      	movs	r2, #1
 800d10e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d112:	68f8      	ldr	r0, [r7, #12]
 800d114:	f7ff ff32 	bl	800cf7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d118:	bf00      	nop
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d12c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	2200      	movs	r2, #0
 800d132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	2200      	movs	r2, #0
 800d13a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff ff1d 	bl	800cf7c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800d142:	bf00      	nop
 800d144:	3710      	adds	r7, #16
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}

0800d14a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b084      	sub	sp, #16
 800d14e:	af00      	add	r7, sp, #0
 800d150:	60f8      	str	r0, [r7, #12]
 800d152:	60b9      	str	r1, [r7, #8]
 800d154:	603b      	str	r3, [r7, #0]
 800d156:	4613      	mov	r3, r2
 800d158:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d15a:	e04c      	b.n	800d1f6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800d15c:	683b      	ldr	r3, [r7, #0]
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d162:	d048      	beq.n	800d1f6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d164:	f7fa fa00 	bl	8007568 <HAL_GetTick>
 800d168:	4602      	mov	r2, r0
 800d16a:	69bb      	ldr	r3, [r7, #24]
 800d16c:	1ad3      	subs	r3, r2, r3
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	429a      	cmp	r2, r3
 800d172:	d902      	bls.n	800d17a <SPI_WaitFlagStateUntilTimeout+0x30>
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d13d      	bne.n	800d1f6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d17a:	68fb      	ldr	r3, [r7, #12]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d188:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	685b      	ldr	r3, [r3, #4]
 800d18e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d192:	d111      	bne.n	800d1b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	689b      	ldr	r3, [r3, #8]
 800d198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d19c:	d004      	beq.n	800d1a8 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	689b      	ldr	r3, [r3, #8]
 800d1a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d1a6:	d107      	bne.n	800d1b8 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	68fb      	ldr	r3, [r7, #12]
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d1b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d1c0:	d10f      	bne.n	800d1e2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d1d0:	601a      	str	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	681a      	ldr	r2, [r3, #0]
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d1e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d1f2:	2303      	movs	r3, #3
 800d1f4:	e00f      	b.n	800d216 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	689a      	ldr	r2, [r3, #8]
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	4013      	ands	r3, r2
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	429a      	cmp	r2, r3
 800d204:	bf0c      	ite	eq
 800d206:	2301      	moveq	r3, #1
 800d208:	2300      	movne	r3, #0
 800d20a:	b2db      	uxtb	r3, r3
 800d20c:	461a      	mov	r2, r3
 800d20e:	79fb      	ldrb	r3, [r7, #7]
 800d210:	429a      	cmp	r2, r3
 800d212:	d1a3      	bne.n	800d15c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800d214:	2300      	movs	r3, #0
}
 800d216:	4618      	mov	r0, r3
 800d218:	3710      	adds	r7, #16
 800d21a:	46bd      	mov	sp, r7
 800d21c:	bd80      	pop	{r7, pc}

0800d21e <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d21e:	b580      	push	{r7, lr}
 800d220:	b084      	sub	sp, #16
 800d222:	af00      	add	r7, sp, #0
 800d224:	60f8      	str	r0, [r7, #12]
 800d226:	60b9      	str	r1, [r7, #8]
 800d228:	607a      	str	r2, [r7, #4]
 800d22a:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800d22c:	e057      	b.n	800d2de <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800d234:	d106      	bne.n	800d244 <SPI_WaitFifoStateUntilTimeout+0x26>
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d103      	bne.n	800d244 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	330c      	adds	r3, #12
 800d242:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d24a:	d048      	beq.n	800d2de <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800d24c:	f7fa f98c 	bl	8007568 <HAL_GetTick>
 800d250:	4602      	mov	r2, r0
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	1ad3      	subs	r3, r2, r3
 800d256:	683a      	ldr	r2, [r7, #0]
 800d258:	429a      	cmp	r2, r3
 800d25a:	d902      	bls.n	800d262 <SPI_WaitFifoStateUntilTimeout+0x44>
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d13d      	bne.n	800d2de <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	681b      	ldr	r3, [r3, #0]
 800d266:	685a      	ldr	r2, [r3, #4]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800d270:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d27a:	d111      	bne.n	800d2a0 <SPI_WaitFifoStateUntilTimeout+0x82>
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	689b      	ldr	r3, [r3, #8]
 800d280:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d284:	d004      	beq.n	800d290 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d28e:	d107      	bne.n	800d2a0 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	681a      	ldr	r2, [r3, #0]
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d29e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d2a8:	d10f      	bne.n	800d2ca <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	681b      	ldr	r3, [r3, #0]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800d2b8:	601a      	str	r2, [r3, #0]
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d2c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d2ca:	68fb      	ldr	r3, [r7, #12]
 800d2cc:	2201      	movs	r2, #1
 800d2ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800d2da:	2303      	movs	r3, #3
 800d2dc:	e008      	b.n	800d2f0 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	689a      	ldr	r2, [r3, #8]
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	4013      	ands	r3, r2
 800d2e8:	687a      	ldr	r2, [r7, #4]
 800d2ea:	429a      	cmp	r2, r3
 800d2ec:	d19f      	bne.n	800d22e <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800d2ee:	2300      	movs	r3, #0
}
 800d2f0:	4618      	mov	r0, r3
 800d2f2:	3710      	adds	r7, #16
 800d2f4:	46bd      	mov	sp, r7
 800d2f6:	bd80      	pop	{r7, pc}

0800d2f8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af02      	add	r7, sp, #8
 800d2fe:	60f8      	str	r0, [r7, #12]
 800d300:	60b9      	str	r1, [r7, #8]
 800d302:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	685b      	ldr	r3, [r3, #4]
 800d308:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d30c:	d111      	bne.n	800d332 <SPI_EndRxTransaction+0x3a>
 800d30e:	68fb      	ldr	r3, [r7, #12]
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d316:	d004      	beq.n	800d322 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d320:	d107      	bne.n	800d332 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	681a      	ldr	r2, [r3, #0]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d330:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	9300      	str	r3, [sp, #0]
 800d336:	68bb      	ldr	r3, [r7, #8]
 800d338:	2200      	movs	r2, #0
 800d33a:	2180      	movs	r1, #128	; 0x80
 800d33c:	68f8      	ldr	r0, [r7, #12]
 800d33e:	f7ff ff04 	bl	800d14a <SPI_WaitFlagStateUntilTimeout>
 800d342:	4603      	mov	r3, r0
 800d344:	2b00      	cmp	r3, #0
 800d346:	d007      	beq.n	800d358 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d34c:	f043 0220 	orr.w	r2, r3, #32
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d354:	2303      	movs	r3, #3
 800d356:	e023      	b.n	800d3a0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800d360:	d11d      	bne.n	800d39e <SPI_EndRxTransaction+0xa6>
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	689b      	ldr	r3, [r3, #8]
 800d366:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d36a:	d004      	beq.n	800d376 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	689b      	ldr	r3, [r3, #8]
 800d370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d374:	d113      	bne.n	800d39e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	9300      	str	r3, [sp, #0]
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2200      	movs	r2, #0
 800d37e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d382:	68f8      	ldr	r0, [r7, #12]
 800d384:	f7ff ff4b 	bl	800d21e <SPI_WaitFifoStateUntilTimeout>
 800d388:	4603      	mov	r3, r0
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d007      	beq.n	800d39e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d392:	f043 0220 	orr.w	r2, r3, #32
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800d39a:	2303      	movs	r3, #3
 800d39c:	e000      	b.n	800d3a0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800d39e:	2300      	movs	r3, #0
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3710      	adds	r7, #16
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b086      	sub	sp, #24
 800d3ac:	af02      	add	r7, sp, #8
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	68bb      	ldr	r3, [r7, #8]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f7ff ff2c 	bl	800d21e <SPI_WaitFifoStateUntilTimeout>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d007      	beq.n	800d3dc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3d0:	f043 0220 	orr.w	r2, r3, #32
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d3d8:	2303      	movs	r3, #3
 800d3da:	e027      	b.n	800d42c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	9300      	str	r3, [sp, #0]
 800d3e0:	68bb      	ldr	r3, [r7, #8]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2180      	movs	r1, #128	; 0x80
 800d3e6:	68f8      	ldr	r0, [r7, #12]
 800d3e8:	f7ff feaf 	bl	800d14a <SPI_WaitFlagStateUntilTimeout>
 800d3ec:	4603      	mov	r3, r0
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d007      	beq.n	800d402 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d3f6:	f043 0220 	orr.w	r2, r3, #32
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d3fe:	2303      	movs	r3, #3
 800d400:	e014      	b.n	800d42c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	9300      	str	r3, [sp, #0]
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2200      	movs	r2, #0
 800d40a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800d40e:	68f8      	ldr	r0, [r7, #12]
 800d410:	f7ff ff05 	bl	800d21e <SPI_WaitFifoStateUntilTimeout>
 800d414:	4603      	mov	r3, r0
 800d416:	2b00      	cmp	r3, #0
 800d418:	d007      	beq.n	800d42a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d41e:	f043 0220 	orr.w	r2, r3, #32
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800d426:	2303      	movs	r3, #3
 800d428:	e000      	b.n	800d42c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d42a:	2300      	movs	r3, #0
}
 800d42c:	4618      	mov	r0, r3
 800d42e:	3710      	adds	r7, #16
 800d430:	46bd      	mov	sp, r7
 800d432:	bd80      	pop	{r7, pc}

0800d434 <HAL_SPIEx_FlushRxFifo>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_FlushRxFifo(SPI_HandleTypeDef *hspi)
{
 800d434:	b480      	push	{r7}
 800d436:	b085      	sub	sp, #20
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  uint8_t  count = 0U;
 800d43c:	2300      	movs	r3, #0
 800d43e:	73fb      	strb	r3, [r7, #15]
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d440:	e00c      	b.n	800d45c <HAL_SPIEx_FlushRxFifo+0x28>
  {
    count++;
 800d442:	7bfb      	ldrb	r3, [r7, #15]
 800d444:	3301      	adds	r3, #1
 800d446:	73fb      	strb	r3, [r7, #15]
    tmpreg = hspi->Instance->DR;
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	68db      	ldr	r3, [r3, #12]
 800d44e:	60bb      	str	r3, [r7, #8]
    UNUSED(tmpreg); /* To avoid GCC warning */
 800d450:	68bb      	ldr	r3, [r7, #8]
    if (count == SPI_FIFO_SIZE)
 800d452:	7bfb      	ldrb	r3, [r7, #15]
 800d454:	2b04      	cmp	r3, #4
 800d456:	d101      	bne.n	800d45c <HAL_SPIEx_FlushRxFifo+0x28>
    {
      return HAL_TIMEOUT;
 800d458:	2303      	movs	r3, #3
 800d45a:	e007      	b.n	800d46c <HAL_SPIEx_FlushRxFifo+0x38>
  while ((hspi->Instance->SR & SPI_FLAG_FRLVL) !=  SPI_FRLVL_EMPTY)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	689b      	ldr	r3, [r3, #8]
 800d462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1eb      	bne.n	800d442 <HAL_SPIEx_FlushRxFifo+0xe>
    }
  }
  return HAL_OK;
 800d46a:	2300      	movs	r3, #0
}
 800d46c:	4618      	mov	r0, r3
 800d46e:	3714      	adds	r7, #20
 800d470:	46bd      	mov	sp, r7
 800d472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d476:	4770      	bx	lr

0800d478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b082      	sub	sp, #8
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d101      	bne.n	800d48a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d486:	2301      	movs	r3, #1
 800d488:	e01d      	b.n	800d4c6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d490:	b2db      	uxtb	r3, r3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d106      	bne.n	800d4a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2200      	movs	r2, #0
 800d49a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f815 	bl	800d4ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2202      	movs	r2, #2
 800d4a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	681a      	ldr	r2, [r3, #0]
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	3304      	adds	r3, #4
 800d4b4:	4619      	mov	r1, r3
 800d4b6:	4610      	mov	r0, r2
 800d4b8:	f000 f986 	bl	800d7c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d4c4:	2300      	movs	r3, #0
}
 800d4c6:	4618      	mov	r0, r3
 800d4c8:	3708      	adds	r7, #8
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	bd80      	pop	{r7, pc}

0800d4ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800d4ce:	b480      	push	{r7}
 800d4d0:	b083      	sub	sp, #12
 800d4d2:	af00      	add	r7, sp, #0
 800d4d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800d4d6:	bf00      	nop
 800d4d8:	370c      	adds	r7, #12
 800d4da:	46bd      	mov	sp, r7
 800d4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e0:	4770      	bx	lr
	...

0800d4e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d4e4:	b480      	push	{r7}
 800d4e6:	b085      	sub	sp, #20
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	68da      	ldr	r2, [r3, #12]
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	f042 0201 	orr.w	r2, r2, #1
 800d4fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	689a      	ldr	r2, [r3, #8]
 800d502:	4b0c      	ldr	r3, [pc, #48]	; (800d534 <HAL_TIM_Base_Start_IT+0x50>)
 800d504:	4013      	ands	r3, r2
 800d506:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2b06      	cmp	r3, #6
 800d50c:	d00b      	beq.n	800d526 <HAL_TIM_Base_Start_IT+0x42>
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d514:	d007      	beq.n	800d526 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	681b      	ldr	r3, [r3, #0]
 800d51a:	681a      	ldr	r2, [r3, #0]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	f042 0201 	orr.w	r2, r2, #1
 800d524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d526:	2300      	movs	r3, #0
}
 800d528:	4618      	mov	r0, r3
 800d52a:	3714      	adds	r7, #20
 800d52c:	46bd      	mov	sp, r7
 800d52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d532:	4770      	bx	lr
 800d534:	00010007 	.word	0x00010007

0800d538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	691b      	ldr	r3, [r3, #16]
 800d546:	f003 0302 	and.w	r3, r3, #2
 800d54a:	2b02      	cmp	r3, #2
 800d54c:	d122      	bne.n	800d594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	68db      	ldr	r3, [r3, #12]
 800d554:	f003 0302 	and.w	r3, r3, #2
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d11b      	bne.n	800d594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	f06f 0202 	mvn.w	r2, #2
 800d564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2201      	movs	r2, #1
 800d56a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	699b      	ldr	r3, [r3, #24]
 800d572:	f003 0303 	and.w	r3, r3, #3
 800d576:	2b00      	cmp	r3, #0
 800d578:	d003      	beq.n	800d582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f000 f905 	bl	800d78a <HAL_TIM_IC_CaptureCallback>
 800d580:	e005      	b.n	800d58e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 f8f7 	bl	800d776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	f000 f908 	bl	800d79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	2200      	movs	r2, #0
 800d592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	f003 0304 	and.w	r3, r3, #4
 800d59e:	2b04      	cmp	r3, #4
 800d5a0:	d122      	bne.n	800d5e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	68db      	ldr	r3, [r3, #12]
 800d5a8:	f003 0304 	and.w	r3, r3, #4
 800d5ac:	2b04      	cmp	r3, #4
 800d5ae:	d11b      	bne.n	800d5e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	f06f 0204 	mvn.w	r2, #4
 800d5b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2202      	movs	r2, #2
 800d5be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	699b      	ldr	r3, [r3, #24]
 800d5c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d003      	beq.n	800d5d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 f8db 	bl	800d78a <HAL_TIM_IC_CaptureCallback>
 800d5d4:	e005      	b.n	800d5e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f8cd 	bl	800d776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d5dc:	6878      	ldr	r0, [r7, #4]
 800d5de:	f000 f8de 	bl	800d79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	f003 0308 	and.w	r3, r3, #8
 800d5f2:	2b08      	cmp	r3, #8
 800d5f4:	d122      	bne.n	800d63c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	f003 0308 	and.w	r3, r3, #8
 800d600:	2b08      	cmp	r3, #8
 800d602:	d11b      	bne.n	800d63c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f06f 0208 	mvn.w	r2, #8
 800d60c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	2204      	movs	r2, #4
 800d612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	69db      	ldr	r3, [r3, #28]
 800d61a:	f003 0303 	and.w	r3, r3, #3
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d003      	beq.n	800d62a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d622:	6878      	ldr	r0, [r7, #4]
 800d624:	f000 f8b1 	bl	800d78a <HAL_TIM_IC_CaptureCallback>
 800d628:	e005      	b.n	800d636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f8a3 	bl	800d776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 f8b4 	bl	800d79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2200      	movs	r2, #0
 800d63a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	f003 0310 	and.w	r3, r3, #16
 800d646:	2b10      	cmp	r3, #16
 800d648:	d122      	bne.n	800d690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	68db      	ldr	r3, [r3, #12]
 800d650:	f003 0310 	and.w	r3, r3, #16
 800d654:	2b10      	cmp	r3, #16
 800d656:	d11b      	bne.n	800d690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	f06f 0210 	mvn.w	r2, #16
 800d660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2208      	movs	r2, #8
 800d666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	69db      	ldr	r3, [r3, #28]
 800d66e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d672:	2b00      	cmp	r3, #0
 800d674:	d003      	beq.n	800d67e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d676:	6878      	ldr	r0, [r7, #4]
 800d678:	f000 f887 	bl	800d78a <HAL_TIM_IC_CaptureCallback>
 800d67c:	e005      	b.n	800d68a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 f879 	bl	800d776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f88a 	bl	800d79e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2200      	movs	r2, #0
 800d68e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	691b      	ldr	r3, [r3, #16]
 800d696:	f003 0301 	and.w	r3, r3, #1
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d10e      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	f003 0301 	and.w	r3, r3, #1
 800d6a8:	2b01      	cmp	r3, #1
 800d6aa:	d107      	bne.n	800d6bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f06f 0201 	mvn.w	r2, #1
 800d6b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f7f7 fc2e 	bl	8004f18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6c6:	2b80      	cmp	r3, #128	; 0x80
 800d6c8:	d10e      	bne.n	800d6e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	681b      	ldr	r3, [r3, #0]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6d4:	2b80      	cmp	r3, #128	; 0x80
 800d6d6:	d107      	bne.n	800d6e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d6e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d6e2:	6878      	ldr	r0, [r7, #4]
 800d6e4:	f000 f91a 	bl	800d91c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	691b      	ldr	r3, [r3, #16]
 800d6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d6f6:	d10e      	bne.n	800d716 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	68db      	ldr	r3, [r3, #12]
 800d6fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d702:	2b80      	cmp	r3, #128	; 0x80
 800d704:	d107      	bne.n	800d716 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800d70e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f90d 	bl	800d930 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	691b      	ldr	r3, [r3, #16]
 800d71c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d720:	2b40      	cmp	r3, #64	; 0x40
 800d722:	d10e      	bne.n	800d742 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d72e:	2b40      	cmp	r3, #64	; 0x40
 800d730:	d107      	bne.n	800d742 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d73a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f000 f838 	bl	800d7b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	691b      	ldr	r3, [r3, #16]
 800d748:	f003 0320 	and.w	r3, r3, #32
 800d74c:	2b20      	cmp	r3, #32
 800d74e:	d10e      	bne.n	800d76e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68db      	ldr	r3, [r3, #12]
 800d756:	f003 0320 	and.w	r3, r3, #32
 800d75a:	2b20      	cmp	r3, #32
 800d75c:	d107      	bne.n	800d76e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	f06f 0220 	mvn.w	r2, #32
 800d766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f8cd 	bl	800d908 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d76e:	bf00      	nop
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d776:	b480      	push	{r7}
 800d778:	b083      	sub	sp, #12
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d77e:	bf00      	nop
 800d780:	370c      	adds	r7, #12
 800d782:	46bd      	mov	sp, r7
 800d784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d788:	4770      	bx	lr

0800d78a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d78a:	b480      	push	{r7}
 800d78c:	b083      	sub	sp, #12
 800d78e:	af00      	add	r7, sp, #0
 800d790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d792:	bf00      	nop
 800d794:	370c      	adds	r7, #12
 800d796:	46bd      	mov	sp, r7
 800d798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d79c:	4770      	bx	lr

0800d79e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d79e:	b480      	push	{r7}
 800d7a0:	b083      	sub	sp, #12
 800d7a2:	af00      	add	r7, sp, #0
 800d7a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d7a6:	bf00      	nop
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d7b2:	b480      	push	{r7}
 800d7b4:	b083      	sub	sp, #12
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d7ba:	bf00      	nop
 800d7bc:	370c      	adds	r7, #12
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr
	...

0800d7c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	4a40      	ldr	r2, [pc, #256]	; (800d8dc <TIM_Base_SetConfig+0x114>)
 800d7dc:	4293      	cmp	r3, r2
 800d7de:	d013      	beq.n	800d808 <TIM_Base_SetConfig+0x40>
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d7e6:	d00f      	beq.n	800d808 <TIM_Base_SetConfig+0x40>
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	4a3d      	ldr	r2, [pc, #244]	; (800d8e0 <TIM_Base_SetConfig+0x118>)
 800d7ec:	4293      	cmp	r3, r2
 800d7ee:	d00b      	beq.n	800d808 <TIM_Base_SetConfig+0x40>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	4a3c      	ldr	r2, [pc, #240]	; (800d8e4 <TIM_Base_SetConfig+0x11c>)
 800d7f4:	4293      	cmp	r3, r2
 800d7f6:	d007      	beq.n	800d808 <TIM_Base_SetConfig+0x40>
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	4a3b      	ldr	r2, [pc, #236]	; (800d8e8 <TIM_Base_SetConfig+0x120>)
 800d7fc:	4293      	cmp	r3, r2
 800d7fe:	d003      	beq.n	800d808 <TIM_Base_SetConfig+0x40>
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	4a3a      	ldr	r2, [pc, #232]	; (800d8ec <TIM_Base_SetConfig+0x124>)
 800d804:	4293      	cmp	r3, r2
 800d806:	d108      	bne.n	800d81a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d80e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d810:	683b      	ldr	r3, [r7, #0]
 800d812:	685b      	ldr	r3, [r3, #4]
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	4313      	orrs	r3, r2
 800d818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	4a2f      	ldr	r2, [pc, #188]	; (800d8dc <TIM_Base_SetConfig+0x114>)
 800d81e:	4293      	cmp	r3, r2
 800d820:	d02b      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d828:	d027      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	4a2c      	ldr	r2, [pc, #176]	; (800d8e0 <TIM_Base_SetConfig+0x118>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d023      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	4a2b      	ldr	r2, [pc, #172]	; (800d8e4 <TIM_Base_SetConfig+0x11c>)
 800d836:	4293      	cmp	r3, r2
 800d838:	d01f      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	4a2a      	ldr	r2, [pc, #168]	; (800d8e8 <TIM_Base_SetConfig+0x120>)
 800d83e:	4293      	cmp	r3, r2
 800d840:	d01b      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	4a29      	ldr	r2, [pc, #164]	; (800d8ec <TIM_Base_SetConfig+0x124>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d017      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	4a28      	ldr	r2, [pc, #160]	; (800d8f0 <TIM_Base_SetConfig+0x128>)
 800d84e:	4293      	cmp	r3, r2
 800d850:	d013      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	4a27      	ldr	r2, [pc, #156]	; (800d8f4 <TIM_Base_SetConfig+0x12c>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d00f      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	4a26      	ldr	r2, [pc, #152]	; (800d8f8 <TIM_Base_SetConfig+0x130>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d00b      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	4a25      	ldr	r2, [pc, #148]	; (800d8fc <TIM_Base_SetConfig+0x134>)
 800d866:	4293      	cmp	r3, r2
 800d868:	d007      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	4a24      	ldr	r2, [pc, #144]	; (800d900 <TIM_Base_SetConfig+0x138>)
 800d86e:	4293      	cmp	r3, r2
 800d870:	d003      	beq.n	800d87a <TIM_Base_SetConfig+0xb2>
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a23      	ldr	r2, [pc, #140]	; (800d904 <TIM_Base_SetConfig+0x13c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d108      	bne.n	800d88c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d880:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	68db      	ldr	r3, [r3, #12]
 800d886:	68fa      	ldr	r2, [r7, #12]
 800d888:	4313      	orrs	r3, r2
 800d88a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d892:	683b      	ldr	r3, [r7, #0]
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	4313      	orrs	r3, r2
 800d898:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68fa      	ldr	r2, [r7, #12]
 800d89e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	689a      	ldr	r2, [r3, #8]
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	4a0a      	ldr	r2, [pc, #40]	; (800d8dc <TIM_Base_SetConfig+0x114>)
 800d8b4:	4293      	cmp	r3, r2
 800d8b6:	d003      	beq.n	800d8c0 <TIM_Base_SetConfig+0xf8>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	4a0c      	ldr	r2, [pc, #48]	; (800d8ec <TIM_Base_SetConfig+0x124>)
 800d8bc:	4293      	cmp	r3, r2
 800d8be:	d103      	bne.n	800d8c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	691a      	ldr	r2, [r3, #16]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	615a      	str	r2, [r3, #20]
}
 800d8ce:	bf00      	nop
 800d8d0:	3714      	adds	r7, #20
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d8:	4770      	bx	lr
 800d8da:	bf00      	nop
 800d8dc:	40010000 	.word	0x40010000
 800d8e0:	40000400 	.word	0x40000400
 800d8e4:	40000800 	.word	0x40000800
 800d8e8:	40000c00 	.word	0x40000c00
 800d8ec:	40010400 	.word	0x40010400
 800d8f0:	40014000 	.word	0x40014000
 800d8f4:	40014400 	.word	0x40014400
 800d8f8:	40014800 	.word	0x40014800
 800d8fc:	40001800 	.word	0x40001800
 800d900:	40001c00 	.word	0x40001c00
 800d904:	40002000 	.word	0x40002000

0800d908 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d908:	b480      	push	{r7}
 800d90a:	b083      	sub	sp, #12
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d910:	bf00      	nop
 800d912:	370c      	adds	r7, #12
 800d914:	46bd      	mov	sp, r7
 800d916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91a:	4770      	bx	lr

0800d91c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d91c:	b480      	push	{r7}
 800d91e:	b083      	sub	sp, #12
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d924:	bf00      	nop
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr

0800d930 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d930:	b480      	push	{r7}
 800d932:	b083      	sub	sp, #12
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d938:	bf00      	nop
 800d93a:	370c      	adds	r7, #12
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d101      	bne.n	800d956 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d952:	2301      	movs	r3, #1
 800d954:	e040      	b.n	800d9d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d106      	bne.n	800d96c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f7f7 fe1a 	bl	80055a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2224      	movs	r2, #36	; 0x24
 800d970:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	681a      	ldr	r2, [r3, #0]
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	f022 0201 	bic.w	r2, r2, #1
 800d980:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d982:	6878      	ldr	r0, [r7, #4]
 800d984:	f000 fc3a 	bl	800e1fc <UART_SetConfig>
 800d988:	4603      	mov	r3, r0
 800d98a:	2b01      	cmp	r3, #1
 800d98c:	d101      	bne.n	800d992 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800d98e:	2301      	movs	r3, #1
 800d990:	e022      	b.n	800d9d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d996:	2b00      	cmp	r3, #0
 800d998:	d002      	beq.n	800d9a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 fed8 	bl	800e750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	681b      	ldr	r3, [r3, #0]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	681b      	ldr	r3, [r3, #0]
 800d9aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800d9ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	689a      	ldr	r2, [r3, #8]
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800d9be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	681a      	ldr	r2, [r3, #0]
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	f042 0201 	orr.w	r2, r2, #1
 800d9ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 ff5f 	bl	800e894 <UART_CheckIdleState>
 800d9d6:	4603      	mov	r3, r0
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b08a      	sub	sp, #40	; 0x28
 800d9e4:	af02      	add	r7, sp, #8
 800d9e6:	60f8      	str	r0, [r7, #12]
 800d9e8:	60b9      	str	r1, [r7, #8]
 800d9ea:	603b      	str	r3, [r7, #0]
 800d9ec:	4613      	mov	r3, r2
 800d9ee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d9f4:	2b20      	cmp	r3, #32
 800d9f6:	d17f      	bne.n	800daf8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800d9f8:	68bb      	ldr	r3, [r7, #8]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d002      	beq.n	800da04 <HAL_UART_Transmit+0x24>
 800d9fe:	88fb      	ldrh	r3, [r7, #6]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d101      	bne.n	800da08 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800da04:	2301      	movs	r3, #1
 800da06:	e078      	b.n	800dafa <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d101      	bne.n	800da16 <HAL_UART_Transmit+0x36>
 800da12:	2302      	movs	r3, #2
 800da14:	e071      	b.n	800dafa <HAL_UART_Transmit+0x11a>
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	2201      	movs	r2, #1
 800da1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800da1e:	68fb      	ldr	r3, [r7, #12]
 800da20:	2200      	movs	r2, #0
 800da22:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	2221      	movs	r2, #33	; 0x21
 800da28:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800da2a:	f7f9 fd9d 	bl	8007568 <HAL_GetTick>
 800da2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	88fa      	ldrh	r2, [r7, #6]
 800da34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	88fa      	ldrh	r2, [r7, #6]
 800da3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	689b      	ldr	r3, [r3, #8]
 800da44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800da48:	d108      	bne.n	800da5c <HAL_UART_Transmit+0x7c>
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	691b      	ldr	r3, [r3, #16]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d104      	bne.n	800da5c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800da52:	2300      	movs	r3, #0
 800da54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800da56:	68bb      	ldr	r3, [r7, #8]
 800da58:	61bb      	str	r3, [r7, #24]
 800da5a:	e003      	b.n	800da64 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da60:	2300      	movs	r3, #0
 800da62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	2200      	movs	r2, #0
 800da68:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800da6c:	e02c      	b.n	800dac8 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	697b      	ldr	r3, [r7, #20]
 800da74:	2200      	movs	r2, #0
 800da76:	2180      	movs	r1, #128	; 0x80
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f000 ff3a 	bl	800e8f2 <UART_WaitOnFlagUntilTimeout>
 800da7e:	4603      	mov	r3, r0
 800da80:	2b00      	cmp	r3, #0
 800da82:	d001      	beq.n	800da88 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 800da84:	2303      	movs	r3, #3
 800da86:	e038      	b.n	800dafa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800da88:	69fb      	ldr	r3, [r7, #28]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10b      	bne.n	800daa6 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da8e:	69bb      	ldr	r3, [r7, #24]
 800da90:	881b      	ldrh	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800da9c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800da9e:	69bb      	ldr	r3, [r7, #24]
 800daa0:	3302      	adds	r3, #2
 800daa2:	61bb      	str	r3, [r7, #24]
 800daa4:	e007      	b.n	800dab6 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800daa6:	69fb      	ldr	r3, [r7, #28]
 800daa8:	781a      	ldrb	r2, [r3, #0]
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	3301      	adds	r3, #1
 800dab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	3b01      	subs	r3, #1
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dace:	b29b      	uxth	r3, r3
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d1cc      	bne.n	800da6e <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	9300      	str	r3, [sp, #0]
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	2200      	movs	r2, #0
 800dadc:	2140      	movs	r1, #64	; 0x40
 800dade:	68f8      	ldr	r0, [r7, #12]
 800dae0:	f000 ff07 	bl	800e8f2 <UART_WaitOnFlagUntilTimeout>
 800dae4:	4603      	mov	r3, r0
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d001      	beq.n	800daee <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800daea:	2303      	movs	r3, #3
 800daec:	e005      	b.n	800dafa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2220      	movs	r2, #32
 800daf2:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800daf4:	2300      	movs	r3, #0
 800daf6:	e000      	b.n	800dafa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800daf8:	2302      	movs	r3, #2
  }
}
 800dafa:	4618      	mov	r0, r3
 800dafc:	3720      	adds	r7, #32
 800dafe:	46bd      	mov	sp, r7
 800db00:	bd80      	pop	{r7, pc}
	...

0800db04 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800db04:	b480      	push	{r7}
 800db06:	b085      	sub	sp, #20
 800db08:	af00      	add	r7, sp, #0
 800db0a:	60f8      	str	r0, [r7, #12]
 800db0c:	60b9      	str	r1, [r7, #8]
 800db0e:	4613      	mov	r3, r2
 800db10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db16:	2b20      	cmp	r3, #32
 800db18:	f040 808a 	bne.w	800dc30 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800db1c:	68bb      	ldr	r3, [r7, #8]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d002      	beq.n	800db28 <HAL_UART_Receive_IT+0x24>
 800db22:	88fb      	ldrh	r3, [r7, #6]
 800db24:	2b00      	cmp	r3, #0
 800db26:	d101      	bne.n	800db2c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800db28:	2301      	movs	r3, #1
 800db2a:	e082      	b.n	800dc32 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800db32:	2b01      	cmp	r3, #1
 800db34:	d101      	bne.n	800db3a <HAL_UART_Receive_IT+0x36>
 800db36:	2302      	movs	r3, #2
 800db38:	e07b      	b.n	800dc32 <HAL_UART_Receive_IT+0x12e>
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2201      	movs	r2, #1
 800db3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	68ba      	ldr	r2, [r7, #8]
 800db46:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	88fa      	ldrh	r2, [r7, #6]
 800db4c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	88fa      	ldrh	r2, [r7, #6]
 800db54:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	2200      	movs	r2, #0
 800db5c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db66:	d10e      	bne.n	800db86 <HAL_UART_Receive_IT+0x82>
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	691b      	ldr	r3, [r3, #16]
 800db6c:	2b00      	cmp	r3, #0
 800db6e:	d105      	bne.n	800db7c <HAL_UART_Receive_IT+0x78>
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	f240 12ff 	movw	r2, #511	; 0x1ff
 800db76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db7a:	e02d      	b.n	800dbd8 <HAL_UART_Receive_IT+0xd4>
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	22ff      	movs	r2, #255	; 0xff
 800db80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db84:	e028      	b.n	800dbd8 <HAL_UART_Receive_IT+0xd4>
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d10d      	bne.n	800dbaa <HAL_UART_Receive_IT+0xa6>
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	691b      	ldr	r3, [r3, #16]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d104      	bne.n	800dba0 <HAL_UART_Receive_IT+0x9c>
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	22ff      	movs	r2, #255	; 0xff
 800db9a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800db9e:	e01b      	b.n	800dbd8 <HAL_UART_Receive_IT+0xd4>
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	227f      	movs	r2, #127	; 0x7f
 800dba4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dba8:	e016      	b.n	800dbd8 <HAL_UART_Receive_IT+0xd4>
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dbb2:	d10d      	bne.n	800dbd0 <HAL_UART_Receive_IT+0xcc>
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	691b      	ldr	r3, [r3, #16]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d104      	bne.n	800dbc6 <HAL_UART_Receive_IT+0xc2>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	227f      	movs	r2, #127	; 0x7f
 800dbc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dbc4:	e008      	b.n	800dbd8 <HAL_UART_Receive_IT+0xd4>
 800dbc6:	68fb      	ldr	r3, [r7, #12]
 800dbc8:	223f      	movs	r2, #63	; 0x3f
 800dbca:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800dbce:	e003      	b.n	800dbd8 <HAL_UART_Receive_IT+0xd4>
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	2222      	movs	r2, #34	; 0x22
 800dbe2:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	681b      	ldr	r3, [r3, #0]
 800dbe8:	689a      	ldr	r2, [r3, #8]
 800dbea:	68fb      	ldr	r3, [r7, #12]
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	f042 0201 	orr.w	r2, r2, #1
 800dbf2:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dbfc:	d107      	bne.n	800dc0e <HAL_UART_Receive_IT+0x10a>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d103      	bne.n	800dc0e <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	4a0d      	ldr	r2, [pc, #52]	; (800dc40 <HAL_UART_Receive_IT+0x13c>)
 800dc0a:	661a      	str	r2, [r3, #96]	; 0x60
 800dc0c:	e002      	b.n	800dc14 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	4a0c      	ldr	r2, [pc, #48]	; (800dc44 <HAL_UART_Receive_IT+0x140>)
 800dc12:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	681a      	ldr	r2, [r3, #0]
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800dc2a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	e000      	b.n	800dc32 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800dc30:	2302      	movs	r3, #2
  }
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3714      	adds	r7, #20
 800dc36:	46bd      	mov	sp, r7
 800dc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3c:	4770      	bx	lr
 800dc3e:	bf00      	nop
 800dc40:	0800ec4f 	.word	0x0800ec4f
 800dc44:	0800eba9 	.word	0x0800eba9

0800dc48 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b084      	sub	sp, #16
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	60f8      	str	r0, [r7, #12]
 800dc50:	60b9      	str	r1, [r7, #8]
 800dc52:	4613      	mov	r3, r2
 800dc54:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc5a:	2b20      	cmp	r3, #32
 800dc5c:	d16c      	bne.n	800dd38 <HAL_UART_Receive_DMA+0xf0>
  {
    if ((pData == NULL) || (Size == 0U))
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <HAL_UART_Receive_DMA+0x22>
 800dc64:	88fb      	ldrh	r3, [r7, #6]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d101      	bne.n	800dc6e <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	e065      	b.n	800dd3a <HAL_UART_Receive_DMA+0xf2>
    }

    __HAL_LOCK(huart);
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dc74:	2b01      	cmp	r3, #1
 800dc76:	d101      	bne.n	800dc7c <HAL_UART_Receive_DMA+0x34>
 800dc78:	2302      	movs	r3, #2
 800dc7a:	e05e      	b.n	800dd3a <HAL_UART_Receive_DMA+0xf2>
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2201      	movs	r2, #1
 800dc80:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr = pData;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	68ba      	ldr	r2, [r7, #8]
 800dc88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize = Size;
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	88fa      	ldrh	r2, [r7, #6]
 800dc8e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2200      	movs	r2, #0
 800dc96:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2222      	movs	r2, #34	; 0x22
 800dc9c:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmarx != NULL)
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d02a      	beq.n	800dcfc <HAL_UART_Receive_DMA+0xb4>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcaa:	4a26      	ldr	r2, [pc, #152]	; (800dd44 <HAL_UART_Receive_DMA+0xfc>)
 800dcac:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcb2:	4a25      	ldr	r2, [pc, #148]	; (800dd48 <HAL_UART_Receive_DMA+0x100>)
 800dcb4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800dcb6:	68fb      	ldr	r3, [r7, #12]
 800dcb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcba:	4a24      	ldr	r2, [pc, #144]	; (800dd4c <HAL_UART_Receive_DMA+0x104>)
 800dcbc:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3324      	adds	r3, #36	; 0x24
 800dcd0:	4619      	mov	r1, r3
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	88fb      	ldrh	r3, [r7, #6]
 800dcda:	f7fa fa63 	bl	80081a4 <HAL_DMA_Start_IT>
 800dcde:	4603      	mov	r3, r0
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d00b      	beq.n	800dcfc <HAL_UART_Receive_DMA+0xb4>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	2210      	movs	r2, #16
 800dce8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	2200      	movs	r2, #0
 800dcee:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2220      	movs	r2, #32
 800dcf6:	675a      	str	r2, [r3, #116]	; 0x74

        return HAL_ERROR;
 800dcf8:	2301      	movs	r3, #1
 800dcfa:	e01e      	b.n	800dd3a <HAL_UART_Receive_DMA+0xf2>
      }
    }
    __HAL_UNLOCK(huart);
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	681a      	ldr	r2, [r3, #0]
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681b      	ldr	r3, [r3, #0]
 800dd0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dd12:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	681b      	ldr	r3, [r3, #0]
 800dd18:	689a      	ldr	r2, [r3, #8]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	f042 0201 	orr.w	r2, r2, #1
 800dd22:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	689a      	ldr	r2, [r3, #8]
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd32:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800dd34:	2300      	movs	r3, #0
 800dd36:	e000      	b.n	800dd3a <HAL_UART_Receive_DMA+0xf2>
  }
  else
  {
    return HAL_BUSY;
 800dd38:	2302      	movs	r3, #2
  }
}
 800dd3a:	4618      	mov	r0, r3
 800dd3c:	3710      	adds	r7, #16
 800dd3e:	46bd      	mov	sp, r7
 800dd40:	bd80      	pop	{r7, pc}
 800dd42:	bf00      	nop
 800dd44:	0800ea53 	.word	0x0800ea53
 800dd48:	0800eab7 	.word	0x0800eab7
 800dd4c:	0800ead3 	.word	0x0800ead3

0800dd50 <HAL_UART_DMAPause>:
  * @brief Pause the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
{
 800dd50:	b480      	push	{r7}
 800dd52:	b085      	sub	sp, #20
 800dd54:	af00      	add	r7, sp, #0
 800dd56:	6078      	str	r0, [r7, #4]
  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd5c:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd62:	60bb      	str	r3, [r7, #8]

  __HAL_LOCK(huart);
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800dd6a:	2b01      	cmp	r3, #1
 800dd6c:	d101      	bne.n	800dd72 <HAL_UART_DMAPause+0x22>
 800dd6e:	2302      	movs	r3, #2
 800dd70:	e03c      	b.n	800ddec <HAL_UART_DMAPause+0x9c>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2201      	movs	r2, #1
 800dd76:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	689b      	ldr	r3, [r3, #8]
 800dd80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd84:	2b80      	cmp	r3, #128	; 0x80
 800dd86:	d10a      	bne.n	800dd9e <HAL_UART_DMAPause+0x4e>
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b21      	cmp	r3, #33	; 0x21
 800dd8c:	d107      	bne.n	800dd9e <HAL_UART_DMAPause+0x4e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    /* Disable the UART DMA Tx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	689a      	ldr	r2, [r3, #8]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800dd9c:	609a      	str	r2, [r3, #8]
  }
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	689b      	ldr	r3, [r3, #8]
 800dda4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dda8:	2b40      	cmp	r3, #64	; 0x40
 800ddaa:	d11a      	bne.n	800dde2 <HAL_UART_DMAPause+0x92>
 800ddac:	68bb      	ldr	r3, [r7, #8]
 800ddae:	2b22      	cmp	r3, #34	; 0x22
 800ddb0:	d117      	bne.n	800dde2 <HAL_UART_DMAPause+0x92>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	681a      	ldr	r2, [r3, #0]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ddc0:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	689a      	ldr	r2, [r3, #8]
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	f022 0201 	bic.w	r2, r2, #1
 800ddd0:	609a      	str	r2, [r3, #8]

    /* Disable the UART DMA Rx request */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	689a      	ldr	r2, [r3, #8]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800dde0:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2200      	movs	r2, #0
 800dde6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800ddea:	2300      	movs	r3, #0
}
 800ddec:	4618      	mov	r0, r3
 800ddee:	3714      	adds	r7, #20
 800ddf0:	46bd      	mov	sp, r7
 800ddf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf6:	4770      	bx	lr

0800ddf8 <HAL_UART_DMAResume>:
  * @brief Resume the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
{
 800ddf8:	b480      	push	{r7}
 800ddfa:	b083      	sub	sp, #12
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(huart);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800de06:	2b01      	cmp	r3, #1
 800de08:	d101      	bne.n	800de0e <HAL_UART_DMAResume+0x16>
 800de0a:	2302      	movs	r3, #2
 800de0c:	e034      	b.n	800de78 <HAL_UART_DMAResume+0x80>
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2201      	movs	r2, #1
 800de12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de1a:	2b21      	cmp	r3, #33	; 0x21
 800de1c:	d107      	bne.n	800de2e <HAL_UART_DMAResume+0x36>
  {
    /* Enable the UART DMA Tx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	689a      	ldr	r2, [r3, #8]
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800de2c:	609a      	str	r2, [r3, #8]
  }
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de32:	2b22      	cmp	r3, #34	; 0x22
 800de34:	d11b      	bne.n	800de6e <HAL_UART_DMAResume+0x76>
  {
    /* Clear the Overrun flag before resuming the Rx transfer */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2208      	movs	r2, #8
 800de3c:	621a      	str	r2, [r3, #32]

    /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	681a      	ldr	r2, [r3, #0]
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800de4c:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	689a      	ldr	r2, [r3, #8]
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	f042 0201 	orr.w	r2, r2, #1
 800de5c:	609a      	str	r2, [r3, #8]

    /* Enable the UART DMA Rx request */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	689a      	ldr	r2, [r3, #8]
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800de6c:	609a      	str	r2, [r3, #8]
  }

  __HAL_UNLOCK(huart);
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	2200      	movs	r2, #0
 800de72:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	370c      	adds	r7, #12
 800de7c:	46bd      	mov	sp, r7
 800de7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de82:	4770      	bx	lr

0800de84 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800de84:	b580      	push	{r7, lr}
 800de86:	b084      	sub	sp, #16
 800de88:	af00      	add	r7, sp, #0
 800de8a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de90:	60fb      	str	r3, [r7, #12]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de96:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	689b      	ldr	r3, [r3, #8]
 800de9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dea2:	2b80      	cmp	r3, #128	; 0x80
 800dea4:	d126      	bne.n	800def4 <HAL_UART_DMAStop+0x70>
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2b21      	cmp	r3, #33	; 0x21
 800deaa:	d123      	bne.n	800def4 <HAL_UART_DMAStop+0x70>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	689a      	ldr	r2, [r3, #8]
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800deba:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d014      	beq.n	800deee <HAL_UART_DMAStop+0x6a>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dec8:	4618      	mov	r0, r3
 800deca:	f7fa f9cb 	bl	8008264 <HAL_DMA_Abort>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d00c      	beq.n	800deee <HAL_UART_DMAStop+0x6a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ded8:	4618      	mov	r0, r3
 800deda:	f7fa fbdf 	bl	800869c <HAL_DMA_GetError>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b20      	cmp	r3, #32
 800dee2:	d104      	bne.n	800deee <HAL_UART_DMAStop+0x6a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2210      	movs	r2, #16
 800dee8:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800deea:	2303      	movs	r3, #3
 800deec:	e031      	b.n	800df52 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f000 fd7a 	bl	800e9e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	689b      	ldr	r3, [r3, #8]
 800defa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800defe:	2b40      	cmp	r3, #64	; 0x40
 800df00:	d126      	bne.n	800df50 <HAL_UART_DMAStop+0xcc>
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	2b22      	cmp	r3, #34	; 0x22
 800df06:	d123      	bne.n	800df50 <HAL_UART_DMAStop+0xcc>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	689a      	ldr	r2, [r3, #8]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	681b      	ldr	r3, [r3, #0]
 800df12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800df16:	609a      	str	r2, [r3, #8]

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d014      	beq.n	800df4a <HAL_UART_DMAStop+0xc6>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df24:	4618      	mov	r0, r3
 800df26:	f7fa f99d 	bl	8008264 <HAL_DMA_Abort>
 800df2a:	4603      	mov	r3, r0
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00c      	beq.n	800df4a <HAL_UART_DMAStop+0xc6>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800df34:	4618      	mov	r0, r3
 800df36:	f7fa fbb1 	bl	800869c <HAL_DMA_GetError>
 800df3a:	4603      	mov	r3, r0
 800df3c:	2b20      	cmp	r3, #32
 800df3e:	d104      	bne.n	800df4a <HAL_UART_DMAStop+0xc6>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2210      	movs	r2, #16
 800df44:	67da      	str	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800df46:	2303      	movs	r3, #3
 800df48:	e003      	b.n	800df52 <HAL_UART_DMAStop+0xce>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 fd61 	bl	800ea12 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800df50:	2300      	movs	r3, #0
}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}
	...

0800df5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b088      	sub	sp, #32
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	69db      	ldr	r3, [r3, #28]
 800df6a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800df7c:	69fa      	ldr	r2, [r7, #28]
 800df7e:	f640 030f 	movw	r3, #2063	; 0x80f
 800df82:	4013      	ands	r3, r2
 800df84:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800df86:	693b      	ldr	r3, [r7, #16]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d113      	bne.n	800dfb4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800df8c:	69fb      	ldr	r3, [r7, #28]
 800df8e:	f003 0320 	and.w	r3, r3, #32
 800df92:	2b00      	cmp	r3, #0
 800df94:	d00e      	beq.n	800dfb4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800df96:	69bb      	ldr	r3, [r7, #24]
 800df98:	f003 0320 	and.w	r3, r3, #32
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d009      	beq.n	800dfb4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 8100 	beq.w	800e1aa <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dfae:	6878      	ldr	r0, [r7, #4]
 800dfb0:	4798      	blx	r3
      }
      return;
 800dfb2:	e0fa      	b.n	800e1aa <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dfb4:	693b      	ldr	r3, [r7, #16]
 800dfb6:	2b00      	cmp	r3, #0
 800dfb8:	f000 80d5 	beq.w	800e166 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	f003 0301 	and.w	r3, r3, #1
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d105      	bne.n	800dfd2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	f000 80ca 	beq.w	800e166 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	f003 0301 	and.w	r3, r3, #1
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d00e      	beq.n	800dffa <HAL_UART_IRQHandler+0x9e>
 800dfdc:	69bb      	ldr	r3, [r7, #24]
 800dfde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d009      	beq.n	800dffa <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2201      	movs	r2, #1
 800dfec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dff2:	f043 0201 	orr.w	r2, r3, #1
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	f003 0302 	and.w	r3, r3, #2
 800e000:	2b00      	cmp	r3, #0
 800e002:	d00e      	beq.n	800e022 <HAL_UART_IRQHandler+0xc6>
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d009      	beq.n	800e022 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2202      	movs	r2, #2
 800e014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e01a:	f043 0204 	orr.w	r2, r3, #4
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e022:	69fb      	ldr	r3, [r7, #28]
 800e024:	f003 0304 	and.w	r3, r3, #4
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d00e      	beq.n	800e04a <HAL_UART_IRQHandler+0xee>
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	f003 0301 	and.w	r3, r3, #1
 800e032:	2b00      	cmp	r3, #0
 800e034:	d009      	beq.n	800e04a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	2204      	movs	r2, #4
 800e03c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e042:	f043 0202 	orr.w	r2, r3, #2
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e04a:	69fb      	ldr	r3, [r7, #28]
 800e04c:	f003 0308 	and.w	r3, r3, #8
 800e050:	2b00      	cmp	r3, #0
 800e052:	d013      	beq.n	800e07c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e054:	69bb      	ldr	r3, [r7, #24]
 800e056:	f003 0320 	and.w	r3, r3, #32
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d104      	bne.n	800e068 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800e05e:	697b      	ldr	r3, [r7, #20]
 800e060:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800e064:	2b00      	cmp	r3, #0
 800e066:	d009      	beq.n	800e07c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	2208      	movs	r2, #8
 800e06e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e074:	f043 0208 	orr.w	r2, r3, #8
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e082:	2b00      	cmp	r3, #0
 800e084:	d00f      	beq.n	800e0a6 <HAL_UART_IRQHandler+0x14a>
 800e086:	69bb      	ldr	r3, [r7, #24]
 800e088:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d00a      	beq.n	800e0a6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e098:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e09e:	f043 0220 	orr.w	r2, r3, #32
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d07f      	beq.n	800e1ae <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	f003 0320 	and.w	r3, r3, #32
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	d00c      	beq.n	800e0d2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800e0b8:	69bb      	ldr	r3, [r7, #24]
 800e0ba:	f003 0320 	and.w	r3, r3, #32
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d007      	beq.n	800e0d2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	d003      	beq.n	800e0d2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e0d6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	689b      	ldr	r3, [r3, #8]
 800e0de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e0e2:	2b40      	cmp	r3, #64	; 0x40
 800e0e4:	d004      	beq.n	800e0f0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d031      	beq.n	800e154 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fc8e 	bl	800ea12 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	689b      	ldr	r3, [r3, #8]
 800e0fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e100:	2b40      	cmp	r3, #64	; 0x40
 800e102:	d123      	bne.n	800e14c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	689a      	ldr	r2, [r3, #8]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	681b      	ldr	r3, [r3, #0]
 800e10e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e112:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d013      	beq.n	800e144 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e120:	4a26      	ldr	r2, [pc, #152]	; (800e1bc <HAL_UART_IRQHandler+0x260>)
 800e122:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e128:	4618      	mov	r0, r3
 800e12a:	f7fa f90b 	bl	8008344 <HAL_DMA_Abort_IT>
 800e12e:	4603      	mov	r3, r0
 800e130:	2b00      	cmp	r3, #0
 800e132:	d016      	beq.n	800e162 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e13a:	687a      	ldr	r2, [r7, #4]
 800e13c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800e13e:	4610      	mov	r0, r2
 800e140:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e142:	e00e      	b.n	800e162 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e144:	6878      	ldr	r0, [r7, #4]
 800e146:	f000 f84f 	bl	800e1e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e14a:	e00a      	b.n	800e162 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 f84b 	bl	800e1e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e152:	e006      	b.n	800e162 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f847 	bl	800e1e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2200      	movs	r2, #0
 800e15e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800e160:	e025      	b.n	800e1ae <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e162:	bf00      	nop
    return;
 800e164:	e023      	b.n	800e1ae <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e166:	69fb      	ldr	r3, [r7, #28]
 800e168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d00d      	beq.n	800e18c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e170:	69bb      	ldr	r3, [r7, #24]
 800e172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e176:	2b00      	cmp	r3, #0
 800e178:	d008      	beq.n	800e18c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d017      	beq.n	800e1b2 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	4798      	blx	r3
    }
    return;
 800e18a:	e012      	b.n	800e1b2 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e192:	2b00      	cmp	r3, #0
 800e194:	d00e      	beq.n	800e1b4 <HAL_UART_IRQHandler+0x258>
 800e196:	69bb      	ldr	r3, [r7, #24]
 800e198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d009      	beq.n	800e1b4 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f000 fce8 	bl	800eb76 <UART_EndTransmit_IT>
    return;
 800e1a6:	bf00      	nop
 800e1a8:	e004      	b.n	800e1b4 <HAL_UART_IRQHandler+0x258>
      return;
 800e1aa:	bf00      	nop
 800e1ac:	e002      	b.n	800e1b4 <HAL_UART_IRQHandler+0x258>
    return;
 800e1ae:	bf00      	nop
 800e1b0:	e000      	b.n	800e1b4 <HAL_UART_IRQHandler+0x258>
    return;
 800e1b2:	bf00      	nop
  }

}
 800e1b4:	3720      	adds	r7, #32
 800e1b6:	46bd      	mov	sp, r7
 800e1b8:	bd80      	pop	{r7, pc}
 800e1ba:	bf00      	nop
 800e1bc:	0800eb4b 	.word	0x0800eb4b

0800e1c0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e1c0:	b480      	push	{r7}
 800e1c2:	b083      	sub	sp, #12
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr

0800e1d4 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b083      	sub	sp, #12
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e1dc:	bf00      	nop
 800e1de:	370c      	adds	r7, #12
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e6:	4770      	bx	lr

0800e1e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800e1e8:	b480      	push	{r7}
 800e1ea:	b083      	sub	sp, #12
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800e1f0:	bf00      	nop
 800e1f2:	370c      	adds	r7, #12
 800e1f4:	46bd      	mov	sp, r7
 800e1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1fa:	4770      	bx	lr

0800e1fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b088      	sub	sp, #32
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800e204:	2300      	movs	r3, #0
 800e206:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800e208:	2300      	movs	r3, #0
 800e20a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	689a      	ldr	r2, [r3, #8]
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	691b      	ldr	r3, [r3, #16]
 800e214:	431a      	orrs	r2, r3
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	695b      	ldr	r3, [r3, #20]
 800e21a:	431a      	orrs	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	69db      	ldr	r3, [r3, #28]
 800e220:	4313      	orrs	r3, r2
 800e222:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681a      	ldr	r2, [r3, #0]
 800e22a:	4bb1      	ldr	r3, [pc, #708]	; (800e4f0 <UART_SetConfig+0x2f4>)
 800e22c:	4013      	ands	r3, r2
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	6812      	ldr	r2, [r2, #0]
 800e232:	6939      	ldr	r1, [r7, #16]
 800e234:	430b      	orrs	r3, r1
 800e236:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	68da      	ldr	r2, [r3, #12]
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	430a      	orrs	r2, r1
 800e24c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	699b      	ldr	r3, [r3, #24]
 800e252:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6a1b      	ldr	r3, [r3, #32]
 800e258:	693a      	ldr	r2, [r7, #16]
 800e25a:	4313      	orrs	r3, r2
 800e25c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	681b      	ldr	r3, [r3, #0]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	693a      	ldr	r2, [r7, #16]
 800e26e:	430a      	orrs	r2, r1
 800e270:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	4a9f      	ldr	r2, [pc, #636]	; (800e4f4 <UART_SetConfig+0x2f8>)
 800e278:	4293      	cmp	r3, r2
 800e27a:	d121      	bne.n	800e2c0 <UART_SetConfig+0xc4>
 800e27c:	4b9e      	ldr	r3, [pc, #632]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e27e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e282:	f003 0303 	and.w	r3, r3, #3
 800e286:	2b03      	cmp	r3, #3
 800e288:	d816      	bhi.n	800e2b8 <UART_SetConfig+0xbc>
 800e28a:	a201      	add	r2, pc, #4	; (adr r2, 800e290 <UART_SetConfig+0x94>)
 800e28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e290:	0800e2a1 	.word	0x0800e2a1
 800e294:	0800e2ad 	.word	0x0800e2ad
 800e298:	0800e2a7 	.word	0x0800e2a7
 800e29c:	0800e2b3 	.word	0x0800e2b3
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	77fb      	strb	r3, [r7, #31]
 800e2a4:	e151      	b.n	800e54a <UART_SetConfig+0x34e>
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	77fb      	strb	r3, [r7, #31]
 800e2aa:	e14e      	b.n	800e54a <UART_SetConfig+0x34e>
 800e2ac:	2304      	movs	r3, #4
 800e2ae:	77fb      	strb	r3, [r7, #31]
 800e2b0:	e14b      	b.n	800e54a <UART_SetConfig+0x34e>
 800e2b2:	2308      	movs	r3, #8
 800e2b4:	77fb      	strb	r3, [r7, #31]
 800e2b6:	e148      	b.n	800e54a <UART_SetConfig+0x34e>
 800e2b8:	2310      	movs	r3, #16
 800e2ba:	77fb      	strb	r3, [r7, #31]
 800e2bc:	bf00      	nop
 800e2be:	e144      	b.n	800e54a <UART_SetConfig+0x34e>
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	4a8d      	ldr	r2, [pc, #564]	; (800e4fc <UART_SetConfig+0x300>)
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	d134      	bne.n	800e334 <UART_SetConfig+0x138>
 800e2ca:	4b8b      	ldr	r3, [pc, #556]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e2cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e2d0:	f003 030c 	and.w	r3, r3, #12
 800e2d4:	2b0c      	cmp	r3, #12
 800e2d6:	d829      	bhi.n	800e32c <UART_SetConfig+0x130>
 800e2d8:	a201      	add	r2, pc, #4	; (adr r2, 800e2e0 <UART_SetConfig+0xe4>)
 800e2da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2de:	bf00      	nop
 800e2e0:	0800e315 	.word	0x0800e315
 800e2e4:	0800e32d 	.word	0x0800e32d
 800e2e8:	0800e32d 	.word	0x0800e32d
 800e2ec:	0800e32d 	.word	0x0800e32d
 800e2f0:	0800e321 	.word	0x0800e321
 800e2f4:	0800e32d 	.word	0x0800e32d
 800e2f8:	0800e32d 	.word	0x0800e32d
 800e2fc:	0800e32d 	.word	0x0800e32d
 800e300:	0800e31b 	.word	0x0800e31b
 800e304:	0800e32d 	.word	0x0800e32d
 800e308:	0800e32d 	.word	0x0800e32d
 800e30c:	0800e32d 	.word	0x0800e32d
 800e310:	0800e327 	.word	0x0800e327
 800e314:	2300      	movs	r3, #0
 800e316:	77fb      	strb	r3, [r7, #31]
 800e318:	e117      	b.n	800e54a <UART_SetConfig+0x34e>
 800e31a:	2302      	movs	r3, #2
 800e31c:	77fb      	strb	r3, [r7, #31]
 800e31e:	e114      	b.n	800e54a <UART_SetConfig+0x34e>
 800e320:	2304      	movs	r3, #4
 800e322:	77fb      	strb	r3, [r7, #31]
 800e324:	e111      	b.n	800e54a <UART_SetConfig+0x34e>
 800e326:	2308      	movs	r3, #8
 800e328:	77fb      	strb	r3, [r7, #31]
 800e32a:	e10e      	b.n	800e54a <UART_SetConfig+0x34e>
 800e32c:	2310      	movs	r3, #16
 800e32e:	77fb      	strb	r3, [r7, #31]
 800e330:	bf00      	nop
 800e332:	e10a      	b.n	800e54a <UART_SetConfig+0x34e>
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4a71      	ldr	r2, [pc, #452]	; (800e500 <UART_SetConfig+0x304>)
 800e33a:	4293      	cmp	r3, r2
 800e33c:	d120      	bne.n	800e380 <UART_SetConfig+0x184>
 800e33e:	4b6e      	ldr	r3, [pc, #440]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e344:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e348:	2b10      	cmp	r3, #16
 800e34a:	d00f      	beq.n	800e36c <UART_SetConfig+0x170>
 800e34c:	2b10      	cmp	r3, #16
 800e34e:	d802      	bhi.n	800e356 <UART_SetConfig+0x15a>
 800e350:	2b00      	cmp	r3, #0
 800e352:	d005      	beq.n	800e360 <UART_SetConfig+0x164>
 800e354:	e010      	b.n	800e378 <UART_SetConfig+0x17c>
 800e356:	2b20      	cmp	r3, #32
 800e358:	d005      	beq.n	800e366 <UART_SetConfig+0x16a>
 800e35a:	2b30      	cmp	r3, #48	; 0x30
 800e35c:	d009      	beq.n	800e372 <UART_SetConfig+0x176>
 800e35e:	e00b      	b.n	800e378 <UART_SetConfig+0x17c>
 800e360:	2300      	movs	r3, #0
 800e362:	77fb      	strb	r3, [r7, #31]
 800e364:	e0f1      	b.n	800e54a <UART_SetConfig+0x34e>
 800e366:	2302      	movs	r3, #2
 800e368:	77fb      	strb	r3, [r7, #31]
 800e36a:	e0ee      	b.n	800e54a <UART_SetConfig+0x34e>
 800e36c:	2304      	movs	r3, #4
 800e36e:	77fb      	strb	r3, [r7, #31]
 800e370:	e0eb      	b.n	800e54a <UART_SetConfig+0x34e>
 800e372:	2308      	movs	r3, #8
 800e374:	77fb      	strb	r3, [r7, #31]
 800e376:	e0e8      	b.n	800e54a <UART_SetConfig+0x34e>
 800e378:	2310      	movs	r3, #16
 800e37a:	77fb      	strb	r3, [r7, #31]
 800e37c:	bf00      	nop
 800e37e:	e0e4      	b.n	800e54a <UART_SetConfig+0x34e>
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	4a5f      	ldr	r2, [pc, #380]	; (800e504 <UART_SetConfig+0x308>)
 800e386:	4293      	cmp	r3, r2
 800e388:	d120      	bne.n	800e3cc <UART_SetConfig+0x1d0>
 800e38a:	4b5b      	ldr	r3, [pc, #364]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e38c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e390:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e394:	2b40      	cmp	r3, #64	; 0x40
 800e396:	d00f      	beq.n	800e3b8 <UART_SetConfig+0x1bc>
 800e398:	2b40      	cmp	r3, #64	; 0x40
 800e39a:	d802      	bhi.n	800e3a2 <UART_SetConfig+0x1a6>
 800e39c:	2b00      	cmp	r3, #0
 800e39e:	d005      	beq.n	800e3ac <UART_SetConfig+0x1b0>
 800e3a0:	e010      	b.n	800e3c4 <UART_SetConfig+0x1c8>
 800e3a2:	2b80      	cmp	r3, #128	; 0x80
 800e3a4:	d005      	beq.n	800e3b2 <UART_SetConfig+0x1b6>
 800e3a6:	2bc0      	cmp	r3, #192	; 0xc0
 800e3a8:	d009      	beq.n	800e3be <UART_SetConfig+0x1c2>
 800e3aa:	e00b      	b.n	800e3c4 <UART_SetConfig+0x1c8>
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	77fb      	strb	r3, [r7, #31]
 800e3b0:	e0cb      	b.n	800e54a <UART_SetConfig+0x34e>
 800e3b2:	2302      	movs	r3, #2
 800e3b4:	77fb      	strb	r3, [r7, #31]
 800e3b6:	e0c8      	b.n	800e54a <UART_SetConfig+0x34e>
 800e3b8:	2304      	movs	r3, #4
 800e3ba:	77fb      	strb	r3, [r7, #31]
 800e3bc:	e0c5      	b.n	800e54a <UART_SetConfig+0x34e>
 800e3be:	2308      	movs	r3, #8
 800e3c0:	77fb      	strb	r3, [r7, #31]
 800e3c2:	e0c2      	b.n	800e54a <UART_SetConfig+0x34e>
 800e3c4:	2310      	movs	r3, #16
 800e3c6:	77fb      	strb	r3, [r7, #31]
 800e3c8:	bf00      	nop
 800e3ca:	e0be      	b.n	800e54a <UART_SetConfig+0x34e>
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	681b      	ldr	r3, [r3, #0]
 800e3d0:	4a4d      	ldr	r2, [pc, #308]	; (800e508 <UART_SetConfig+0x30c>)
 800e3d2:	4293      	cmp	r3, r2
 800e3d4:	d124      	bne.n	800e420 <UART_SetConfig+0x224>
 800e3d6:	4b48      	ldr	r3, [pc, #288]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e3d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e3dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3e4:	d012      	beq.n	800e40c <UART_SetConfig+0x210>
 800e3e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3ea:	d802      	bhi.n	800e3f2 <UART_SetConfig+0x1f6>
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d007      	beq.n	800e400 <UART_SetConfig+0x204>
 800e3f0:	e012      	b.n	800e418 <UART_SetConfig+0x21c>
 800e3f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e3f6:	d006      	beq.n	800e406 <UART_SetConfig+0x20a>
 800e3f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e3fc:	d009      	beq.n	800e412 <UART_SetConfig+0x216>
 800e3fe:	e00b      	b.n	800e418 <UART_SetConfig+0x21c>
 800e400:	2300      	movs	r3, #0
 800e402:	77fb      	strb	r3, [r7, #31]
 800e404:	e0a1      	b.n	800e54a <UART_SetConfig+0x34e>
 800e406:	2302      	movs	r3, #2
 800e408:	77fb      	strb	r3, [r7, #31]
 800e40a:	e09e      	b.n	800e54a <UART_SetConfig+0x34e>
 800e40c:	2304      	movs	r3, #4
 800e40e:	77fb      	strb	r3, [r7, #31]
 800e410:	e09b      	b.n	800e54a <UART_SetConfig+0x34e>
 800e412:	2308      	movs	r3, #8
 800e414:	77fb      	strb	r3, [r7, #31]
 800e416:	e098      	b.n	800e54a <UART_SetConfig+0x34e>
 800e418:	2310      	movs	r3, #16
 800e41a:	77fb      	strb	r3, [r7, #31]
 800e41c:	bf00      	nop
 800e41e:	e094      	b.n	800e54a <UART_SetConfig+0x34e>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a39      	ldr	r2, [pc, #228]	; (800e50c <UART_SetConfig+0x310>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d124      	bne.n	800e474 <UART_SetConfig+0x278>
 800e42a:	4b33      	ldr	r3, [pc, #204]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e42c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e430:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800e434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e438:	d012      	beq.n	800e460 <UART_SetConfig+0x264>
 800e43a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800e43e:	d802      	bhi.n	800e446 <UART_SetConfig+0x24a>
 800e440:	2b00      	cmp	r3, #0
 800e442:	d007      	beq.n	800e454 <UART_SetConfig+0x258>
 800e444:	e012      	b.n	800e46c <UART_SetConfig+0x270>
 800e446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e44a:	d006      	beq.n	800e45a <UART_SetConfig+0x25e>
 800e44c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800e450:	d009      	beq.n	800e466 <UART_SetConfig+0x26a>
 800e452:	e00b      	b.n	800e46c <UART_SetConfig+0x270>
 800e454:	2301      	movs	r3, #1
 800e456:	77fb      	strb	r3, [r7, #31]
 800e458:	e077      	b.n	800e54a <UART_SetConfig+0x34e>
 800e45a:	2302      	movs	r3, #2
 800e45c:	77fb      	strb	r3, [r7, #31]
 800e45e:	e074      	b.n	800e54a <UART_SetConfig+0x34e>
 800e460:	2304      	movs	r3, #4
 800e462:	77fb      	strb	r3, [r7, #31]
 800e464:	e071      	b.n	800e54a <UART_SetConfig+0x34e>
 800e466:	2308      	movs	r3, #8
 800e468:	77fb      	strb	r3, [r7, #31]
 800e46a:	e06e      	b.n	800e54a <UART_SetConfig+0x34e>
 800e46c:	2310      	movs	r3, #16
 800e46e:	77fb      	strb	r3, [r7, #31]
 800e470:	bf00      	nop
 800e472:	e06a      	b.n	800e54a <UART_SetConfig+0x34e>
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	4a25      	ldr	r2, [pc, #148]	; (800e510 <UART_SetConfig+0x314>)
 800e47a:	4293      	cmp	r3, r2
 800e47c:	d124      	bne.n	800e4c8 <UART_SetConfig+0x2cc>
 800e47e:	4b1e      	ldr	r3, [pc, #120]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e484:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800e488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e48c:	d012      	beq.n	800e4b4 <UART_SetConfig+0x2b8>
 800e48e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e492:	d802      	bhi.n	800e49a <UART_SetConfig+0x29e>
 800e494:	2b00      	cmp	r3, #0
 800e496:	d007      	beq.n	800e4a8 <UART_SetConfig+0x2ac>
 800e498:	e012      	b.n	800e4c0 <UART_SetConfig+0x2c4>
 800e49a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e49e:	d006      	beq.n	800e4ae <UART_SetConfig+0x2b2>
 800e4a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800e4a4:	d009      	beq.n	800e4ba <UART_SetConfig+0x2be>
 800e4a6:	e00b      	b.n	800e4c0 <UART_SetConfig+0x2c4>
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	77fb      	strb	r3, [r7, #31]
 800e4ac:	e04d      	b.n	800e54a <UART_SetConfig+0x34e>
 800e4ae:	2302      	movs	r3, #2
 800e4b0:	77fb      	strb	r3, [r7, #31]
 800e4b2:	e04a      	b.n	800e54a <UART_SetConfig+0x34e>
 800e4b4:	2304      	movs	r3, #4
 800e4b6:	77fb      	strb	r3, [r7, #31]
 800e4b8:	e047      	b.n	800e54a <UART_SetConfig+0x34e>
 800e4ba:	2308      	movs	r3, #8
 800e4bc:	77fb      	strb	r3, [r7, #31]
 800e4be:	e044      	b.n	800e54a <UART_SetConfig+0x34e>
 800e4c0:	2310      	movs	r3, #16
 800e4c2:	77fb      	strb	r3, [r7, #31]
 800e4c4:	bf00      	nop
 800e4c6:	e040      	b.n	800e54a <UART_SetConfig+0x34e>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	4a11      	ldr	r2, [pc, #68]	; (800e514 <UART_SetConfig+0x318>)
 800e4ce:	4293      	cmp	r3, r2
 800e4d0:	d139      	bne.n	800e546 <UART_SetConfig+0x34a>
 800e4d2:	4b09      	ldr	r3, [pc, #36]	; (800e4f8 <UART_SetConfig+0x2fc>)
 800e4d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e4d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800e4dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4e0:	d027      	beq.n	800e532 <UART_SetConfig+0x336>
 800e4e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e4e6:	d817      	bhi.n	800e518 <UART_SetConfig+0x31c>
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d01c      	beq.n	800e526 <UART_SetConfig+0x32a>
 800e4ec:	e027      	b.n	800e53e <UART_SetConfig+0x342>
 800e4ee:	bf00      	nop
 800e4f0:	efff69f3 	.word	0xefff69f3
 800e4f4:	40011000 	.word	0x40011000
 800e4f8:	40023800 	.word	0x40023800
 800e4fc:	40004400 	.word	0x40004400
 800e500:	40004800 	.word	0x40004800
 800e504:	40004c00 	.word	0x40004c00
 800e508:	40005000 	.word	0x40005000
 800e50c:	40011400 	.word	0x40011400
 800e510:	40007800 	.word	0x40007800
 800e514:	40007c00 	.word	0x40007c00
 800e518:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e51c:	d006      	beq.n	800e52c <UART_SetConfig+0x330>
 800e51e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800e522:	d009      	beq.n	800e538 <UART_SetConfig+0x33c>
 800e524:	e00b      	b.n	800e53e <UART_SetConfig+0x342>
 800e526:	2300      	movs	r3, #0
 800e528:	77fb      	strb	r3, [r7, #31]
 800e52a:	e00e      	b.n	800e54a <UART_SetConfig+0x34e>
 800e52c:	2302      	movs	r3, #2
 800e52e:	77fb      	strb	r3, [r7, #31]
 800e530:	e00b      	b.n	800e54a <UART_SetConfig+0x34e>
 800e532:	2304      	movs	r3, #4
 800e534:	77fb      	strb	r3, [r7, #31]
 800e536:	e008      	b.n	800e54a <UART_SetConfig+0x34e>
 800e538:	2308      	movs	r3, #8
 800e53a:	77fb      	strb	r3, [r7, #31]
 800e53c:	e005      	b.n	800e54a <UART_SetConfig+0x34e>
 800e53e:	2310      	movs	r3, #16
 800e540:	77fb      	strb	r3, [r7, #31]
 800e542:	bf00      	nop
 800e544:	e001      	b.n	800e54a <UART_SetConfig+0x34e>
 800e546:	2310      	movs	r3, #16
 800e548:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	69db      	ldr	r3, [r3, #28]
 800e54e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e552:	d17f      	bne.n	800e654 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800e554:	7ffb      	ldrb	r3, [r7, #31]
 800e556:	2b08      	cmp	r3, #8
 800e558:	d85c      	bhi.n	800e614 <UART_SetConfig+0x418>
 800e55a:	a201      	add	r2, pc, #4	; (adr r2, 800e560 <UART_SetConfig+0x364>)
 800e55c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e560:	0800e585 	.word	0x0800e585
 800e564:	0800e5a5 	.word	0x0800e5a5
 800e568:	0800e5c5 	.word	0x0800e5c5
 800e56c:	0800e615 	.word	0x0800e615
 800e570:	0800e5dd 	.word	0x0800e5dd
 800e574:	0800e615 	.word	0x0800e615
 800e578:	0800e615 	.word	0x0800e615
 800e57c:	0800e615 	.word	0x0800e615
 800e580:	0800e5fd 	.word	0x0800e5fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e584:	f7fc f99c 	bl	800a8c0 <HAL_RCC_GetPCLK1Freq>
 800e588:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	005a      	lsls	r2, r3, #1
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	685b      	ldr	r3, [r3, #4]
 800e592:	085b      	lsrs	r3, r3, #1
 800e594:	441a      	add	r2, r3
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	685b      	ldr	r3, [r3, #4]
 800e59a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	61bb      	str	r3, [r7, #24]
        break;
 800e5a2:	e03a      	b.n	800e61a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e5a4:	f7fc f9a0 	bl	800a8e8 <HAL_RCC_GetPCLK2Freq>
 800e5a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	005a      	lsls	r2, r3, #1
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	685b      	ldr	r3, [r3, #4]
 800e5b2:	085b      	lsrs	r3, r3, #1
 800e5b4:	441a      	add	r2, r3
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	685b      	ldr	r3, [r3, #4]
 800e5ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5be:	b29b      	uxth	r3, r3
 800e5c0:	61bb      	str	r3, [r7, #24]
        break;
 800e5c2:	e02a      	b.n	800e61a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	685b      	ldr	r3, [r3, #4]
 800e5c8:	085a      	lsrs	r2, r3, #1
 800e5ca:	4b5f      	ldr	r3, [pc, #380]	; (800e748 <UART_SetConfig+0x54c>)
 800e5cc:	4413      	add	r3, r2
 800e5ce:	687a      	ldr	r2, [r7, #4]
 800e5d0:	6852      	ldr	r2, [r2, #4]
 800e5d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5d6:	b29b      	uxth	r3, r3
 800e5d8:	61bb      	str	r3, [r7, #24]
        break;
 800e5da:	e01e      	b.n	800e61a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5dc:	f7fc f88c 	bl	800a6f8 <HAL_RCC_GetSysClockFreq>
 800e5e0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	005a      	lsls	r2, r3, #1
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	085b      	lsrs	r3, r3, #1
 800e5ec:	441a      	add	r2, r3
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	685b      	ldr	r3, [r3, #4]
 800e5f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	61bb      	str	r3, [r7, #24]
        break;
 800e5fa:	e00e      	b.n	800e61a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	685b      	ldr	r3, [r3, #4]
 800e600:	085b      	lsrs	r3, r3, #1
 800e602:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	685b      	ldr	r3, [r3, #4]
 800e60a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e60e:	b29b      	uxth	r3, r3
 800e610:	61bb      	str	r3, [r7, #24]
        break;
 800e612:	e002      	b.n	800e61a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800e614:	2301      	movs	r3, #1
 800e616:	75fb      	strb	r3, [r7, #23]
        break;
 800e618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e61a:	69bb      	ldr	r3, [r7, #24]
 800e61c:	2b0f      	cmp	r3, #15
 800e61e:	d916      	bls.n	800e64e <UART_SetConfig+0x452>
 800e620:	69bb      	ldr	r3, [r7, #24]
 800e622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e626:	d212      	bcs.n	800e64e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	b29b      	uxth	r3, r3
 800e62c:	f023 030f 	bic.w	r3, r3, #15
 800e630:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e632:	69bb      	ldr	r3, [r7, #24]
 800e634:	085b      	lsrs	r3, r3, #1
 800e636:	b29b      	uxth	r3, r3
 800e638:	f003 0307 	and.w	r3, r3, #7
 800e63c:	b29a      	uxth	r2, r3
 800e63e:	897b      	ldrh	r3, [r7, #10]
 800e640:	4313      	orrs	r3, r2
 800e642:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	897a      	ldrh	r2, [r7, #10]
 800e64a:	60da      	str	r2, [r3, #12]
 800e64c:	e070      	b.n	800e730 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e64e:	2301      	movs	r3, #1
 800e650:	75fb      	strb	r3, [r7, #23]
 800e652:	e06d      	b.n	800e730 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800e654:	7ffb      	ldrb	r3, [r7, #31]
 800e656:	2b08      	cmp	r3, #8
 800e658:	d859      	bhi.n	800e70e <UART_SetConfig+0x512>
 800e65a:	a201      	add	r2, pc, #4	; (adr r2, 800e660 <UART_SetConfig+0x464>)
 800e65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e660:	0800e685 	.word	0x0800e685
 800e664:	0800e6a3 	.word	0x0800e6a3
 800e668:	0800e6c1 	.word	0x0800e6c1
 800e66c:	0800e70f 	.word	0x0800e70f
 800e670:	0800e6d9 	.word	0x0800e6d9
 800e674:	0800e70f 	.word	0x0800e70f
 800e678:	0800e70f 	.word	0x0800e70f
 800e67c:	0800e70f 	.word	0x0800e70f
 800e680:	0800e6f7 	.word	0x0800e6f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e684:	f7fc f91c 	bl	800a8c0 <HAL_RCC_GetPCLK1Freq>
 800e688:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	685b      	ldr	r3, [r3, #4]
 800e68e:	085a      	lsrs	r2, r3, #1
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	441a      	add	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	fbb2 f3f3 	udiv	r3, r2, r3
 800e69c:	b29b      	uxth	r3, r3
 800e69e:	61bb      	str	r3, [r7, #24]
        break;
 800e6a0:	e038      	b.n	800e714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6a2:	f7fc f921 	bl	800a8e8 <HAL_RCC_GetPCLK2Freq>
 800e6a6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	685b      	ldr	r3, [r3, #4]
 800e6ac:	085a      	lsrs	r2, r3, #1
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	441a      	add	r2, r3
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	685b      	ldr	r3, [r3, #4]
 800e6b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	61bb      	str	r3, [r7, #24]
        break;
 800e6be:	e029      	b.n	800e714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	685b      	ldr	r3, [r3, #4]
 800e6c4:	085a      	lsrs	r2, r3, #1
 800e6c6:	4b21      	ldr	r3, [pc, #132]	; (800e74c <UART_SetConfig+0x550>)
 800e6c8:	4413      	add	r3, r2
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	6852      	ldr	r2, [r2, #4]
 800e6ce:	fbb3 f3f2 	udiv	r3, r3, r2
 800e6d2:	b29b      	uxth	r3, r3
 800e6d4:	61bb      	str	r3, [r7, #24]
        break;
 800e6d6:	e01d      	b.n	800e714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e6d8:	f7fc f80e 	bl	800a6f8 <HAL_RCC_GetSysClockFreq>
 800e6dc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	085a      	lsrs	r2, r3, #1
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	441a      	add	r2, r3
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800e6f0:	b29b      	uxth	r3, r3
 800e6f2:	61bb      	str	r3, [r7, #24]
        break;
 800e6f4:	e00e      	b.n	800e714 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	685b      	ldr	r3, [r3, #4]
 800e6fa:	085b      	lsrs	r3, r3, #1
 800e6fc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	fbb2 f3f3 	udiv	r3, r2, r3
 800e708:	b29b      	uxth	r3, r3
 800e70a:	61bb      	str	r3, [r7, #24]
        break;
 800e70c:	e002      	b.n	800e714 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800e70e:	2301      	movs	r3, #1
 800e710:	75fb      	strb	r3, [r7, #23]
        break;
 800e712:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	2b0f      	cmp	r3, #15
 800e718:	d908      	bls.n	800e72c <UART_SetConfig+0x530>
 800e71a:	69bb      	ldr	r3, [r7, #24]
 800e71c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e720:	d204      	bcs.n	800e72c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	69ba      	ldr	r2, [r7, #24]
 800e728:	60da      	str	r2, [r3, #12]
 800e72a:	e001      	b.n	800e730 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800e72c:	2301      	movs	r3, #1
 800e72e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	2200      	movs	r2, #0
 800e734:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800e73c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3720      	adds	r7, #32
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
 800e746:	bf00      	nop
 800e748:	01e84800 	.word	0x01e84800
 800e74c:	00f42400 	.word	0x00f42400

0800e750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e750:	b480      	push	{r7}
 800e752:	b083      	sub	sp, #12
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e75c:	f003 0301 	and.w	r3, r3, #1
 800e760:	2b00      	cmp	r3, #0
 800e762:	d00a      	beq.n	800e77a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	430a      	orrs	r2, r1
 800e778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e77e:	f003 0302 	and.w	r3, r3, #2
 800e782:	2b00      	cmp	r3, #0
 800e784:	d00a      	beq.n	800e79c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	685b      	ldr	r3, [r3, #4]
 800e78c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	681b      	ldr	r3, [r3, #0]
 800e798:	430a      	orrs	r2, r1
 800e79a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7a0:	f003 0304 	and.w	r3, r3, #4
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d00a      	beq.n	800e7be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	430a      	orrs	r2, r1
 800e7bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7c2:	f003 0308 	and.w	r3, r3, #8
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d00a      	beq.n	800e7e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	685b      	ldr	r3, [r3, #4]
 800e7d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	430a      	orrs	r2, r1
 800e7de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7e4:	f003 0310 	and.w	r3, r3, #16
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d00a      	beq.n	800e802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	689b      	ldr	r3, [r3, #8]
 800e7f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	430a      	orrs	r2, r1
 800e800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e806:	f003 0320 	and.w	r3, r3, #32
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d00a      	beq.n	800e824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	689b      	ldr	r3, [r3, #8]
 800e814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	430a      	orrs	r2, r1
 800e822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d01a      	beq.n	800e866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	685b      	ldr	r3, [r3, #4]
 800e836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	430a      	orrs	r2, r1
 800e844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e84a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e84e:	d10a      	bne.n	800e866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	685b      	ldr	r3, [r3, #4]
 800e856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	430a      	orrs	r2, r1
 800e864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e86a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00a      	beq.n	800e888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	685b      	ldr	r3, [r3, #4]
 800e878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	430a      	orrs	r2, r1
 800e886:	605a      	str	r2, [r3, #4]
  }
}
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b086      	sub	sp, #24
 800e898:	af02      	add	r7, sp, #8
 800e89a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800e8a2:	f7f8 fe61 	bl	8007568 <HAL_GetTick>
 800e8a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f003 0308 	and.w	r3, r3, #8
 800e8b2:	2b08      	cmp	r3, #8
 800e8b4:	d10e      	bne.n	800e8d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e8b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e8ba:	9300      	str	r3, [sp, #0]
 800e8bc:	68fb      	ldr	r3, [r7, #12]
 800e8be:	2200      	movs	r2, #0
 800e8c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	f000 f814 	bl	800e8f2 <UART_WaitOnFlagUntilTimeout>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d001      	beq.n	800e8d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e8d0:	2303      	movs	r3, #3
 800e8d2:	e00a      	b.n	800e8ea <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2220      	movs	r2, #32
 800e8d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2220      	movs	r2, #32
 800e8de:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800e8e8:	2300      	movs	r3, #0
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3710      	adds	r7, #16
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b084      	sub	sp, #16
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	60f8      	str	r0, [r7, #12]
 800e8fa:	60b9      	str	r1, [r7, #8]
 800e8fc:	603b      	str	r3, [r7, #0]
 800e8fe:	4613      	mov	r3, r2
 800e900:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e902:	e05d      	b.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e904:	69bb      	ldr	r3, [r7, #24]
 800e906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e90a:	d059      	beq.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e90c:	f7f8 fe2c 	bl	8007568 <HAL_GetTick>
 800e910:	4602      	mov	r2, r0
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	1ad3      	subs	r3, r2, r3
 800e916:	69ba      	ldr	r2, [r7, #24]
 800e918:	429a      	cmp	r2, r3
 800e91a:	d302      	bcc.n	800e922 <UART_WaitOnFlagUntilTimeout+0x30>
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d11b      	bne.n	800e95a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681a      	ldr	r2, [r3, #0]
 800e928:	68fb      	ldr	r3, [r7, #12]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e930:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689a      	ldr	r2, [r3, #8]
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	f022 0201 	bic.w	r2, r2, #1
 800e940:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	2220      	movs	r2, #32
 800e946:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800e948:	68fb      	ldr	r3, [r7, #12]
 800e94a:	2220      	movs	r2, #32
 800e94c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	2200      	movs	r2, #0
 800e952:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800e956:	2303      	movs	r3, #3
 800e958:	e042      	b.n	800e9e0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f003 0304 	and.w	r3, r3, #4
 800e964:	2b00      	cmp	r3, #0
 800e966:	d02b      	beq.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	69db      	ldr	r3, [r3, #28]
 800e96e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e976:	d123      	bne.n	800e9c0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e980:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800e990:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689a      	ldr	r2, [r3, #8]
 800e998:	68fb      	ldr	r3, [r7, #12]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f022 0201 	bic.w	r2, r2, #1
 800e9a0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	2220      	movs	r2, #32
 800e9a6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	2220      	movs	r2, #32
 800e9ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	2220      	movs	r2, #32
 800e9b2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e9b4:	68fb      	ldr	r3, [r7, #12]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800e9bc:	2303      	movs	r3, #3
 800e9be:	e00f      	b.n	800e9e0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	69da      	ldr	r2, [r3, #28]
 800e9c6:	68bb      	ldr	r3, [r7, #8]
 800e9c8:	4013      	ands	r3, r2
 800e9ca:	68ba      	ldr	r2, [r7, #8]
 800e9cc:	429a      	cmp	r2, r3
 800e9ce:	bf0c      	ite	eq
 800e9d0:	2301      	moveq	r3, #1
 800e9d2:	2300      	movne	r3, #0
 800e9d4:	b2db      	uxtb	r3, r3
 800e9d6:	461a      	mov	r2, r3
 800e9d8:	79fb      	ldrb	r3, [r7, #7]
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d092      	beq.n	800e904 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e9de:	2300      	movs	r3, #0
}
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	3710      	adds	r7, #16
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	bd80      	pop	{r7, pc}

0800e9e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b083      	sub	sp, #12
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800e9fe:	601a      	str	r2, [r3, #0]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2220      	movs	r2, #32
 800ea04:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ea06:	bf00      	nop
 800ea08:	370c      	adds	r7, #12
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea10:	4770      	bx	lr

0800ea12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ea12:	b480      	push	{r7}
 800ea14:	b083      	sub	sp, #12
 800ea16:	af00      	add	r7, sp, #0
 800ea18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ea28:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	689a      	ldr	r2, [r3, #8]
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	f022 0201 	bic.w	r2, r2, #1
 800ea38:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2220      	movs	r2, #32
 800ea3e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	661a      	str	r2, [r3, #96]	; 0x60
}
 800ea46:	bf00      	nop
 800ea48:	370c      	adds	r7, #12
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr

0800ea52 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ea52:	b580      	push	{r7, lr}
 800ea54:	b084      	sub	sp, #16
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea5e:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	69db      	ldr	r3, [r3, #28]
 800ea64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea68:	d01e      	beq.n	800eaa8 <UART_DMAReceiveCplt+0x56>
  {
    huart->RxXferCount = 0U;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	2200      	movs	r2, #0
 800ea6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681a      	ldr	r2, [r3, #0]
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	681b      	ldr	r3, [r3, #0]
 800ea7c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ea80:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	689a      	ldr	r2, [r3, #8]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f022 0201 	bic.w	r2, r2, #1
 800ea90:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ea92:	68fb      	ldr	r3, [r7, #12]
 800ea94:	681b      	ldr	r3, [r3, #0]
 800ea96:	689a      	ldr	r2, [r3, #8]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaa0:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	2220      	movs	r2, #32
 800eaa6:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800eaa8:	68f8      	ldr	r0, [r7, #12]
 800eaaa:	f7f8 fca5 	bl	80073f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eaae:	bf00      	nop
 800eab0:	3710      	adds	r7, #16
 800eab2:	46bd      	mov	sp, r7
 800eab4:	bd80      	pop	{r7, pc}

0800eab6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800eab6:	b580      	push	{r7, lr}
 800eab8:	b084      	sub	sp, #16
 800eaba:	af00      	add	r7, sp, #0
 800eabc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eac2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800eac4:	68f8      	ldr	r0, [r7, #12]
 800eac6:	f7ff fb85 	bl	800e1d4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eaca:	bf00      	nop
 800eacc:	3710      	adds	r7, #16
 800eace:	46bd      	mov	sp, r7
 800ead0:	bd80      	pop	{r7, pc}

0800ead2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b086      	sub	sp, #24
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eade:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800eae0:	697b      	ldr	r3, [r7, #20]
 800eae2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eae4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800eae6:	697b      	ldr	r3, [r7, #20]
 800eae8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800eaec:	697b      	ldr	r3, [r7, #20]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	689b      	ldr	r3, [r3, #8]
 800eaf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eaf6:	2b80      	cmp	r3, #128	; 0x80
 800eaf8:	d109      	bne.n	800eb0e <UART_DMAError+0x3c>
 800eafa:	693b      	ldr	r3, [r7, #16]
 800eafc:	2b21      	cmp	r3, #33	; 0x21
 800eafe:	d106      	bne.n	800eb0e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	2200      	movs	r2, #0
 800eb04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800eb08:	6978      	ldr	r0, [r7, #20]
 800eb0a:	f7ff ff6d 	bl	800e9e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	689b      	ldr	r3, [r3, #8]
 800eb14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb18:	2b40      	cmp	r3, #64	; 0x40
 800eb1a:	d109      	bne.n	800eb30 <UART_DMAError+0x5e>
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	2b22      	cmp	r3, #34	; 0x22
 800eb20:	d106      	bne.n	800eb30 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800eb22:	697b      	ldr	r3, [r7, #20]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800eb2a:	6978      	ldr	r0, [r7, #20]
 800eb2c:	f7ff ff71 	bl	800ea12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800eb30:	697b      	ldr	r3, [r7, #20]
 800eb32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800eb34:	f043 0210 	orr.w	r2, r3, #16
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	67da      	str	r2, [r3, #124]	; 0x7c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb3c:	6978      	ldr	r0, [r7, #20]
 800eb3e:	f7ff fb53 	bl	800e1e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb42:	bf00      	nop
 800eb44:	3718      	adds	r7, #24
 800eb46:	46bd      	mov	sp, r7
 800eb48:	bd80      	pop	{r7, pc}

0800eb4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800eb4a:	b580      	push	{r7, lr}
 800eb4c:	b084      	sub	sp, #16
 800eb4e:	af00      	add	r7, sp, #0
 800eb50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2200      	movs	r2, #0
 800eb5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	2200      	movs	r2, #0
 800eb64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800eb68:	68f8      	ldr	r0, [r7, #12]
 800eb6a:	f7ff fb3d 	bl	800e1e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eb6e:	bf00      	nop
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}

0800eb76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800eb76:	b580      	push	{r7, lr}
 800eb78:	b082      	sub	sp, #8
 800eb7a:	af00      	add	r7, sp, #0
 800eb7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	681a      	ldr	r2, [r3, #0]
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eb8c:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	2220      	movs	r2, #32
 800eb92:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	2200      	movs	r2, #0
 800eb98:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800eb9a:	6878      	ldr	r0, [r7, #4]
 800eb9c:	f7ff fb10 	bl	800e1c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800eba0:	bf00      	nop
 800eba2:	3708      	adds	r7, #8
 800eba4:	46bd      	mov	sp, r7
 800eba6:	bd80      	pop	{r7, pc}

0800eba8 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ebb6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ebbc:	2b22      	cmp	r3, #34	; 0x22
 800ebbe:	d13a      	bne.n	800ec36 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc6:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800ebc8:	89bb      	ldrh	r3, [r7, #12]
 800ebca:	b2d9      	uxtb	r1, r3
 800ebcc:	89fb      	ldrh	r3, [r7, #14]
 800ebce:	b2da      	uxtb	r2, r3
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebd4:	400a      	ands	r2, r1
 800ebd6:	b2d2      	uxtb	r2, r2
 800ebd8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ebde:	1c5a      	adds	r2, r3, #1
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebea:	b29b      	uxth	r3, r3
 800ebec:	3b01      	subs	r3, #1
 800ebee:	b29a      	uxth	r2, r3
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d121      	bne.n	800ec46 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	681a      	ldr	r2, [r3, #0]
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ec10:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	689a      	ldr	r2, [r3, #8]
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f022 0201 	bic.w	r2, r2, #1
 800ec20:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2220      	movs	r2, #32
 800ec26:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ec2e:	6878      	ldr	r0, [r7, #4]
 800ec30:	f7f8 fbe2 	bl	80073f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ec34:	e007      	b.n	800ec46 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	699a      	ldr	r2, [r3, #24]
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	f042 0208 	orr.w	r2, r2, #8
 800ec44:	619a      	str	r2, [r3, #24]
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}

0800ec4e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800ec4e:	b580      	push	{r7, lr}
 800ec50:	b084      	sub	sp, #16
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ec5c:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec62:	2b22      	cmp	r3, #34	; 0x22
 800ec64:	d13a      	bne.n	800ecdc <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec6c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec72:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800ec74:	89ba      	ldrh	r2, [r7, #12]
 800ec76:	89fb      	ldrh	r3, [r7, #14]
 800ec78:	4013      	ands	r3, r2
 800ec7a:	b29a      	uxth	r2, r3
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec84:	1c9a      	adds	r2, r3, #2
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ec90:	b29b      	uxth	r3, r3
 800ec92:	3b01      	subs	r3, #1
 800ec94:	b29a      	uxth	r2, r3
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800eca2:	b29b      	uxth	r3, r3
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d121      	bne.n	800ecec <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ecb6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	689a      	ldr	r2, [r3, #8]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	f022 0201 	bic.w	r2, r2, #1
 800ecc6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	2220      	movs	r2, #32
 800eccc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f7f8 fb8f 	bl	80073f8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ecda:	e007      	b.n	800ecec <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	699a      	ldr	r2, [r3, #24]
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f042 0208 	orr.w	r2, r2, #8
 800ecea:	619a      	str	r2, [r3, #24]
}
 800ecec:	bf00      	nop
 800ecee:	3710      	adds	r7, #16
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ecf4:	b084      	sub	sp, #16
 800ecf6:	b480      	push	{r7}
 800ecf8:	b085      	sub	sp, #20
 800ecfa:	af00      	add	r7, sp, #0
 800ecfc:	6078      	str	r0, [r7, #4]
 800ecfe:	f107 001c 	add.w	r0, r7, #28
 800ed02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800ed06:	2300      	movs	r3, #0
 800ed08:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800ed0a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800ed0c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800ed0e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800ed10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800ed12:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800ed14:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800ed16:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800ed18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800ed1a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800ed1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800ed1e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	4313      	orrs	r3, r2
 800ed24:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	685a      	ldr	r2, [r3, #4]
 800ed2a:	4b07      	ldr	r3, [pc, #28]	; (800ed48 <SDMMC_Init+0x54>)
 800ed2c:	4013      	ands	r3, r2
 800ed2e:	68fa      	ldr	r2, [r7, #12]
 800ed30:	431a      	orrs	r2, r3
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3714      	adds	r7, #20
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	b004      	add	sp, #16
 800ed44:	4770      	bx	lr
 800ed46:	bf00      	nop
 800ed48:	ffff8100 	.word	0xffff8100

0800ed4c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ed4c:	b480      	push	{r7}
 800ed4e:	b083      	sub	sp, #12
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ed5a:	4618      	mov	r0, r3
 800ed5c:	370c      	adds	r7, #12
 800ed5e:	46bd      	mov	sp, r7
 800ed60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed64:	4770      	bx	lr

0800ed66 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ed66:	b480      	push	{r7}
 800ed68:	b083      	sub	sp, #12
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
 800ed6e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ed7a:	2300      	movs	r3, #0
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	370c      	adds	r7, #12
 800ed80:	46bd      	mov	sp, r7
 800ed82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed86:	4770      	bx	lr

0800ed88 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b082      	sub	sp, #8
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2203      	movs	r2, #3
 800ed94:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800ed96:	2002      	movs	r0, #2
 800ed98:	f7f8 fbf2 	bl	8007580 <HAL_Delay>
  
  return HAL_OK;
 800ed9c:	2300      	movs	r3, #0
}
 800ed9e:	4618      	mov	r0, r3
 800eda0:	3708      	adds	r7, #8
 800eda2:	46bd      	mov	sp, r7
 800eda4:	bd80      	pop	{r7, pc}

0800eda6 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800eda6:	b480      	push	{r7}
 800eda8:	b083      	sub	sp, #12
 800edaa:	af00      	add	r7, sp, #0
 800edac:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	f003 0303 	and.w	r3, r3, #3
}
 800edb6:	4618      	mov	r0, r3
 800edb8:	370c      	adds	r7, #12
 800edba:	46bd      	mov	sp, r7
 800edbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc0:	4770      	bx	lr
	...

0800edc4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b085      	sub	sp, #20
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800edce:	2300      	movs	r3, #0
 800edd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800edda:	683b      	ldr	r3, [r7, #0]
 800eddc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800edde:	683b      	ldr	r3, [r7, #0]
 800ede0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ede2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ede4:	683b      	ldr	r3, [r7, #0]
 800ede6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ede8:	431a      	orrs	r2, r3
                       Command->CPSM);
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800edee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	4313      	orrs	r3, r2
 800edf4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	68da      	ldr	r2, [r3, #12]
 800edfa:	4b06      	ldr	r3, [pc, #24]	; (800ee14 <SDMMC_SendCommand+0x50>)
 800edfc:	4013      	ands	r3, r2
 800edfe:	68fa      	ldr	r2, [r7, #12]
 800ee00:	431a      	orrs	r2, r3
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ee06:	2300      	movs	r3, #0
}
 800ee08:	4618      	mov	r0, r3
 800ee0a:	3714      	adds	r7, #20
 800ee0c:	46bd      	mov	sp, r7
 800ee0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee12:	4770      	bx	lr
 800ee14:	fffff000 	.word	0xfffff000

0800ee18 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ee18:	b480      	push	{r7}
 800ee1a:	b083      	sub	sp, #12
 800ee1c:	af00      	add	r7, sp, #0
 800ee1e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	691b      	ldr	r3, [r3, #16]
 800ee24:	b2db      	uxtb	r3, r3
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	370c      	adds	r7, #12
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee30:	4770      	bx	lr

0800ee32 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ee32:	b480      	push	{r7}
 800ee34:	b085      	sub	sp, #20
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
 800ee3a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	3314      	adds	r3, #20
 800ee40:	461a      	mov	r2, r3
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	4413      	add	r3, r2
 800ee46:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
}  
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	3714      	adds	r7, #20
 800ee50:	46bd      	mov	sp, r7
 800ee52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee56:	4770      	bx	lr

0800ee58 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ee62:	2300      	movs	r3, #0
 800ee64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ee66:	683b      	ldr	r3, [r7, #0]
 800ee68:	681a      	ldr	r2, [r3, #0]
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	685a      	ldr	r2, [r3, #4]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ee7e:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ee80:	683b      	ldr	r3, [r7, #0]
 800ee82:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ee84:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ee8a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ee8c:	68fa      	ldr	r2, [r7, #12]
 800ee8e:	4313      	orrs	r3, r2
 800ee90:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee96:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	431a      	orrs	r2, r3
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800eea2:	2300      	movs	r3, #0

}
 800eea4:	4618      	mov	r0, r3
 800eea6:	3714      	adds	r7, #20
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeae:	4770      	bx	lr

0800eeb0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b088      	sub	sp, #32
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	6078      	str	r0, [r7, #4]
 800eeb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800eeba:	683b      	ldr	r3, [r7, #0]
 800eebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800eebe:	2310      	movs	r3, #16
 800eec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800eec2:	2340      	movs	r3, #64	; 0x40
 800eec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800eec6:	2300      	movs	r3, #0
 800eec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800eeca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800eece:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800eed0:	f107 0308 	add.w	r3, r7, #8
 800eed4:	4619      	mov	r1, r3
 800eed6:	6878      	ldr	r0, [r7, #4]
 800eed8:	f7ff ff74 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800eedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800eee0:	2110      	movs	r1, #16
 800eee2:	6878      	ldr	r0, [r7, #4]
 800eee4:	f000 fa42 	bl	800f36c <SDMMC_GetCmdResp1>
 800eee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800eeea:	69fb      	ldr	r3, [r7, #28]
}
 800eeec:	4618      	mov	r0, r3
 800eeee:	3720      	adds	r7, #32
 800eef0:	46bd      	mov	sp, r7
 800eef2:	bd80      	pop	{r7, pc}

0800eef4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b088      	sub	sp, #32
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800eefe:	683b      	ldr	r3, [r7, #0]
 800ef00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ef02:	2311      	movs	r3, #17
 800ef04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef06:	2340      	movs	r3, #64	; 0x40
 800ef08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef0a:	2300      	movs	r3, #0
 800ef0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef14:	f107 0308 	add.w	r3, r7, #8
 800ef18:	4619      	mov	r1, r3
 800ef1a:	6878      	ldr	r0, [r7, #4]
 800ef1c:	f7ff ff52 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ef20:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef24:	2111      	movs	r1, #17
 800ef26:	6878      	ldr	r0, [r7, #4]
 800ef28:	f000 fa20 	bl	800f36c <SDMMC_GetCmdResp1>
 800ef2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef2e:	69fb      	ldr	r3, [r7, #28]
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3720      	adds	r7, #32
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b088      	sub	sp, #32
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ef46:	2312      	movs	r3, #18
 800ef48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef4a:	2340      	movs	r3, #64	; 0x40
 800ef4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef4e:	2300      	movs	r3, #0
 800ef50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef58:	f107 0308 	add.w	r3, r7, #8
 800ef5c:	4619      	mov	r1, r3
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f7ff ff30 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ef64:	f241 3288 	movw	r2, #5000	; 0x1388
 800ef68:	2112      	movs	r1, #18
 800ef6a:	6878      	ldr	r0, [r7, #4]
 800ef6c:	f000 f9fe 	bl	800f36c <SDMMC_GetCmdResp1>
 800ef70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ef72:	69fb      	ldr	r3, [r7, #28]
}
 800ef74:	4618      	mov	r0, r3
 800ef76:	3720      	adds	r7, #32
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}

0800ef7c <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ef7c:	b580      	push	{r7, lr}
 800ef7e:	b088      	sub	sp, #32
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ef8a:	2318      	movs	r3, #24
 800ef8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ef8e:	2340      	movs	r3, #64	; 0x40
 800ef90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ef92:	2300      	movs	r3, #0
 800ef94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ef96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ef9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ef9c:	f107 0308 	add.w	r3, r7, #8
 800efa0:	4619      	mov	r1, r3
 800efa2:	6878      	ldr	r0, [r7, #4]
 800efa4:	f7ff ff0e 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800efa8:	f241 3288 	movw	r2, #5000	; 0x1388
 800efac:	2118      	movs	r1, #24
 800efae:	6878      	ldr	r0, [r7, #4]
 800efb0:	f000 f9dc 	bl	800f36c <SDMMC_GetCmdResp1>
 800efb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800efb6:	69fb      	ldr	r3, [r7, #28]
}
 800efb8:	4618      	mov	r0, r3
 800efba:	3720      	adds	r7, #32
 800efbc:	46bd      	mov	sp, r7
 800efbe:	bd80      	pop	{r7, pc}

0800efc0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800efc0:	b580      	push	{r7, lr}
 800efc2:	b088      	sub	sp, #32
 800efc4:	af00      	add	r7, sp, #0
 800efc6:	6078      	str	r0, [r7, #4]
 800efc8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800efce:	2319      	movs	r3, #25
 800efd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800efd2:	2340      	movs	r3, #64	; 0x40
 800efd4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800efd6:	2300      	movs	r3, #0
 800efd8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800efda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efde:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800efe0:	f107 0308 	add.w	r3, r7, #8
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7ff feec 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800efec:	f241 3288 	movw	r2, #5000	; 0x1388
 800eff0:	2119      	movs	r1, #25
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 f9ba 	bl	800f36c <SDMMC_GetCmdResp1>
 800eff8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800effa:	69fb      	ldr	r3, [r7, #28]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3720      	adds	r7, #32
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b088      	sub	sp, #32
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800f00c:	2300      	movs	r3, #0
 800f00e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800f010:	230c      	movs	r3, #12
 800f012:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f014:	2340      	movs	r3, #64	; 0x40
 800f016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f018:	2300      	movs	r3, #0
 800f01a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f01c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f020:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f022:	f107 0308 	add.w	r3, r7, #8
 800f026:	4619      	mov	r1, r3
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f7ff fecb 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800f02e:	4a05      	ldr	r2, [pc, #20]	; (800f044 <SDMMC_CmdStopTransfer+0x40>)
 800f030:	210c      	movs	r1, #12
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 f99a 	bl	800f36c <SDMMC_GetCmdResp1>
 800f038:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f03a:	69fb      	ldr	r3, [r7, #28]
}
 800f03c:	4618      	mov	r0, r3
 800f03e:	3720      	adds	r7, #32
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}
 800f044:	05f5e100 	.word	0x05f5e100

0800f048 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b08a      	sub	sp, #40	; 0x28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	60f8      	str	r0, [r7, #12]
 800f050:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800f058:	2307      	movs	r3, #7
 800f05a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f05c:	2340      	movs	r3, #64	; 0x40
 800f05e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f060:	2300      	movs	r3, #0
 800f062:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f064:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f068:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f06a:	f107 0310 	add.w	r3, r7, #16
 800f06e:	4619      	mov	r1, r3
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f7ff fea7 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800f076:	f241 3288 	movw	r2, #5000	; 0x1388
 800f07a:	2107      	movs	r1, #7
 800f07c:	68f8      	ldr	r0, [r7, #12]
 800f07e:	f000 f975 	bl	800f36c <SDMMC_GetCmdResp1>
 800f082:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800f084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f086:	4618      	mov	r0, r3
 800f088:	3728      	adds	r7, #40	; 0x28
 800f08a:	46bd      	mov	sp, r7
 800f08c:	bd80      	pop	{r7, pc}

0800f08e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800f08e:	b580      	push	{r7, lr}
 800f090:	b088      	sub	sp, #32
 800f092:	af00      	add	r7, sp, #0
 800f094:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800f096:	2300      	movs	r3, #0
 800f098:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800f09a:	2300      	movs	r3, #0
 800f09c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800f09e:	2300      	movs	r3, #0
 800f0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0ac:	f107 0308 	add.w	r3, r7, #8
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f7ff fe86 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f000 f92f 	bl	800f31c <SDMMC_GetCmdError>
 800f0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0c0:	69fb      	ldr	r3, [r7, #28]
}
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	3720      	adds	r7, #32
 800f0c6:	46bd      	mov	sp, r7
 800f0c8:	bd80      	pop	{r7, pc}

0800f0ca <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800f0ca:	b580      	push	{r7, lr}
 800f0cc:	b088      	sub	sp, #32
 800f0ce:	af00      	add	r7, sp, #0
 800f0d0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800f0d2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800f0d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800f0d8:	2308      	movs	r3, #8
 800f0da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f0dc:	2340      	movs	r3, #64	; 0x40
 800f0de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f0e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f0e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f0ea:	f107 0308 	add.w	r3, r7, #8
 800f0ee:	4619      	mov	r1, r3
 800f0f0:	6878      	ldr	r0, [r7, #4]
 800f0f2:	f7ff fe67 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800f0f6:	6878      	ldr	r0, [r7, #4]
 800f0f8:	f000 fb18 	bl	800f72c <SDMMC_GetCmdResp7>
 800f0fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f0fe:	69fb      	ldr	r3, [r7, #28]
}
 800f100:	4618      	mov	r0, r3
 800f102:	3720      	adds	r7, #32
 800f104:	46bd      	mov	sp, r7
 800f106:	bd80      	pop	{r7, pc}

0800f108 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b088      	sub	sp, #32
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	6078      	str	r0, [r7, #4]
 800f110:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800f116:	2337      	movs	r3, #55	; 0x37
 800f118:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f11a:	2340      	movs	r3, #64	; 0x40
 800f11c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f11e:	2300      	movs	r3, #0
 800f120:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f122:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f126:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f128:	f107 0308 	add.w	r3, r7, #8
 800f12c:	4619      	mov	r1, r3
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f7ff fe48 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800f134:	f241 3288 	movw	r2, #5000	; 0x1388
 800f138:	2137      	movs	r1, #55	; 0x37
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 f916 	bl	800f36c <SDMMC_GetCmdResp1>
 800f140:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f142:	69fb      	ldr	r3, [r7, #28]
}
 800f144:	4618      	mov	r0, r3
 800f146:	3720      	adds	r7, #32
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b088      	sub	sp, #32
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800f156:	683a      	ldr	r2, [r7, #0]
 800f158:	4b0d      	ldr	r3, [pc, #52]	; (800f190 <SDMMC_CmdAppOperCommand+0x44>)
 800f15a:	4313      	orrs	r3, r2
 800f15c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800f15e:	2329      	movs	r3, #41	; 0x29
 800f160:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f162:	2340      	movs	r3, #64	; 0x40
 800f164:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f166:	2300      	movs	r3, #0
 800f168:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f16a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f16e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f170:	f107 0308 	add.w	r3, r7, #8
 800f174:	4619      	mov	r1, r3
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f7ff fe24 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 fa27 	bl	800f5d0 <SDMMC_GetCmdResp3>
 800f182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f184:	69fb      	ldr	r3, [r7, #28]
}
 800f186:	4618      	mov	r0, r3
 800f188:	3720      	adds	r7, #32
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	80100000 	.word	0x80100000

0800f194 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b088      	sub	sp, #32
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800f1a2:	2306      	movs	r3, #6
 800f1a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1a6:	2340      	movs	r3, #64	; 0x40
 800f1a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1b4:	f107 0308 	add.w	r3, r7, #8
 800f1b8:	4619      	mov	r1, r3
 800f1ba:	6878      	ldr	r0, [r7, #4]
 800f1bc:	f7ff fe02 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800f1c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800f1c4:	2106      	movs	r1, #6
 800f1c6:	6878      	ldr	r0, [r7, #4]
 800f1c8:	f000 f8d0 	bl	800f36c <SDMMC_GetCmdResp1>
 800f1cc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f1ce:	69fb      	ldr	r3, [r7, #28]
}
 800f1d0:	4618      	mov	r0, r3
 800f1d2:	3720      	adds	r7, #32
 800f1d4:	46bd      	mov	sp, r7
 800f1d6:	bd80      	pop	{r7, pc}

0800f1d8 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b088      	sub	sp, #32
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800f1e4:	2333      	movs	r3, #51	; 0x33
 800f1e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f1e8:	2340      	movs	r3, #64	; 0x40
 800f1ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f1f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f1f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f1f6:	f107 0308 	add.w	r3, r7, #8
 800f1fa:	4619      	mov	r1, r3
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f7ff fde1 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800f202:	f241 3288 	movw	r2, #5000	; 0x1388
 800f206:	2133      	movs	r1, #51	; 0x33
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	f000 f8af 	bl	800f36c <SDMMC_GetCmdResp1>
 800f20e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f210:	69fb      	ldr	r3, [r7, #28]
}
 800f212:	4618      	mov	r0, r3
 800f214:	3720      	adds	r7, #32
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}

0800f21a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800f21a:	b580      	push	{r7, lr}
 800f21c:	b088      	sub	sp, #32
 800f21e:	af00      	add	r7, sp, #0
 800f220:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800f222:	2300      	movs	r3, #0
 800f224:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800f226:	2302      	movs	r3, #2
 800f228:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f22a:	23c0      	movs	r3, #192	; 0xc0
 800f22c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f22e:	2300      	movs	r3, #0
 800f230:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f236:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f238:	f107 0308 	add.w	r3, r7, #8
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f7ff fdc0 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 f97d 	bl	800f544 <SDMMC_GetCmdResp2>
 800f24a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f24c:	69fb      	ldr	r3, [r7, #28]
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3720      	adds	r7, #32
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}

0800f256 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f256:	b580      	push	{r7, lr}
 800f258:	b088      	sub	sp, #32
 800f25a:	af00      	add	r7, sp, #0
 800f25c:	6078      	str	r0, [r7, #4]
 800f25e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800f264:	2309      	movs	r3, #9
 800f266:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800f268:	23c0      	movs	r3, #192	; 0xc0
 800f26a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f26c:	2300      	movs	r3, #0
 800f26e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f274:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f276:	f107 0308 	add.w	r3, r7, #8
 800f27a:	4619      	mov	r1, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f7ff fda1 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800f282:	6878      	ldr	r0, [r7, #4]
 800f284:	f000 f95e 	bl	800f544 <SDMMC_GetCmdResp2>
 800f288:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f28a:	69fb      	ldr	r3, [r7, #28]
}
 800f28c:	4618      	mov	r0, r3
 800f28e:	3720      	adds	r7, #32
 800f290:	46bd      	mov	sp, r7
 800f292:	bd80      	pop	{r7, pc}

0800f294 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800f294:	b580      	push	{r7, lr}
 800f296:	b088      	sub	sp, #32
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
 800f29c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800f29e:	2300      	movs	r3, #0
 800f2a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800f2a2:	2303      	movs	r3, #3
 800f2a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2a6:	2340      	movs	r3, #64	; 0x40
 800f2a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2b4:	f107 0308 	add.w	r3, r7, #8
 800f2b8:	4619      	mov	r1, r3
 800f2ba:	6878      	ldr	r0, [r7, #4]
 800f2bc:	f7ff fd82 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800f2c0:	683a      	ldr	r2, [r7, #0]
 800f2c2:	2103      	movs	r1, #3
 800f2c4:	6878      	ldr	r0, [r7, #4]
 800f2c6:	f000 f9bd 	bl	800f644 <SDMMC_GetCmdResp6>
 800f2ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f2cc:	69fb      	ldr	r3, [r7, #28]
}
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	3720      	adds	r7, #32
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b088      	sub	sp, #32
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800f2e4:	230d      	movs	r3, #13
 800f2e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800f2e8:	2340      	movs	r3, #64	; 0x40
 800f2ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800f2ec:	2300      	movs	r3, #0
 800f2ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800f2f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f2f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800f2f6:	f107 0308 	add.w	r3, r7, #8
 800f2fa:	4619      	mov	r1, r3
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f7ff fd61 	bl	800edc4 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800f302:	f241 3288 	movw	r2, #5000	; 0x1388
 800f306:	210d      	movs	r1, #13
 800f308:	6878      	ldr	r0, [r7, #4]
 800f30a:	f000 f82f 	bl	800f36c <SDMMC_GetCmdResp1>
 800f30e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800f310:	69fb      	ldr	r3, [r7, #28]
}
 800f312:	4618      	mov	r0, r3
 800f314:	3720      	adds	r7, #32
 800f316:	46bd      	mov	sp, r7
 800f318:	bd80      	pop	{r7, pc}
	...

0800f31c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800f31c:	b490      	push	{r4, r7}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f324:	4b0f      	ldr	r3, [pc, #60]	; (800f364 <SDMMC_GetCmdError+0x48>)
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	4a0f      	ldr	r2, [pc, #60]	; (800f368 <SDMMC_GetCmdError+0x4c>)
 800f32a:	fba2 2303 	umull	r2, r3, r2, r3
 800f32e:	0a5b      	lsrs	r3, r3, #9
 800f330:	f241 3288 	movw	r2, #5000	; 0x1388
 800f334:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f338:	4623      	mov	r3, r4
 800f33a:	1e5c      	subs	r4, r3, #1
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d102      	bne.n	800f346 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f340:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f344:	e009      	b.n	800f35a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f34a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d0f2      	beq.n	800f338 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	22c5      	movs	r2, #197	; 0xc5
 800f356:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800f358:	2300      	movs	r3, #0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	3708      	adds	r7, #8
 800f35e:	46bd      	mov	sp, r7
 800f360:	bc90      	pop	{r4, r7}
 800f362:	4770      	bx	lr
 800f364:	20000000 	.word	0x20000000
 800f368:	10624dd3 	.word	0x10624dd3

0800f36c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800f36c:	b590      	push	{r4, r7, lr}
 800f36e:	b087      	sub	sp, #28
 800f370:	af00      	add	r7, sp, #0
 800f372:	60f8      	str	r0, [r7, #12]
 800f374:	460b      	mov	r3, r1
 800f376:	607a      	str	r2, [r7, #4]
 800f378:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800f37a:	4b6f      	ldr	r3, [pc, #444]	; (800f538 <SDMMC_GetCmdResp1+0x1cc>)
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a6f      	ldr	r2, [pc, #444]	; (800f53c <SDMMC_GetCmdResp1+0x1d0>)
 800f380:	fba2 2303 	umull	r2, r3, r2, r3
 800f384:	0a5b      	lsrs	r3, r3, #9
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f38c:	4623      	mov	r3, r4
 800f38e:	1e5c      	subs	r4, r3, #1
 800f390:	2b00      	cmp	r3, #0
 800f392:	d102      	bne.n	800f39a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f394:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f398:	e0c9      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDMMCx->STA;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f39e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d0f0      	beq.n	800f38c <SDMMC_GetCmdResp1+0x20>
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d1eb      	bne.n	800f38c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3b8:	f003 0304 	and.w	r3, r3, #4
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <SDMMC_GetCmdResp1+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f3c0:	68fb      	ldr	r3, [r7, #12]
 800f3c2:	2204      	movs	r2, #4
 800f3c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f3c6:	2304      	movs	r3, #4
 800f3c8:	e0b1      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f3ce:	f003 0301 	and.w	r3, r3, #1
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d004      	beq.n	800f3e0 <SDMMC_GetCmdResp1+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	2201      	movs	r2, #1
 800f3da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3dc:	2301      	movs	r3, #1
 800f3de:	e0a6      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f3e0:	68fb      	ldr	r3, [r7, #12]
 800f3e2:	22c5      	movs	r2, #197	; 0xc5
 800f3e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f3e6:	68f8      	ldr	r0, [r7, #12]
 800f3e8:	f7ff fd16 	bl	800ee18 <SDMMC_GetCommandResponse>
 800f3ec:	4603      	mov	r3, r0
 800f3ee:	461a      	mov	r2, r3
 800f3f0:	7afb      	ldrb	r3, [r7, #11]
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d001      	beq.n	800f3fa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f3f6:	2301      	movs	r3, #1
 800f3f8:	e099      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f3fa:	2100      	movs	r1, #0
 800f3fc:	68f8      	ldr	r0, [r7, #12]
 800f3fe:	f7ff fd18 	bl	800ee32 <SDMMC_GetResponse>
 800f402:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800f404:	693a      	ldr	r2, [r7, #16]
 800f406:	4b4e      	ldr	r3, [pc, #312]	; (800f540 <SDMMC_GetCmdResp1+0x1d4>)
 800f408:	4013      	ands	r3, r2
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d101      	bne.n	800f412 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800f40e:	2300      	movs	r3, #0
 800f410:	e08d      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	2b00      	cmp	r3, #0
 800f416:	da02      	bge.n	800f41e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800f418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800f41c:	e087      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800f41e:	693b      	ldr	r3, [r7, #16]
 800f420:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f424:	2b00      	cmp	r3, #0
 800f426:	d001      	beq.n	800f42c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800f428:	2340      	movs	r3, #64	; 0x40
 800f42a:	e080      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800f42c:	693b      	ldr	r3, [r7, #16]
 800f42e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800f432:	2b00      	cmp	r3, #0
 800f434:	d001      	beq.n	800f43a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800f436:	2380      	movs	r3, #128	; 0x80
 800f438:	e079      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800f43a:	693b      	ldr	r3, [r7, #16]
 800f43c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800f440:	2b00      	cmp	r3, #0
 800f442:	d002      	beq.n	800f44a <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800f444:	f44f 7380 	mov.w	r3, #256	; 0x100
 800f448:	e071      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800f44a:	693b      	ldr	r3, [r7, #16]
 800f44c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800f450:	2b00      	cmp	r3, #0
 800f452:	d002      	beq.n	800f45a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800f454:	f44f 7300 	mov.w	r3, #512	; 0x200
 800f458:	e069      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f460:	2b00      	cmp	r3, #0
 800f462:	d002      	beq.n	800f46a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800f464:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f468:	e061      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f470:	2b00      	cmp	r3, #0
 800f472:	d002      	beq.n	800f47a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800f474:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800f478:	e059      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f480:	2b00      	cmp	r3, #0
 800f482:	d002      	beq.n	800f48a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f488:	e051      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800f48a:	693b      	ldr	r3, [r7, #16]
 800f48c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f490:	2b00      	cmp	r3, #0
 800f492:	d002      	beq.n	800f49a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f498:	e049      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800f49a:	693b      	ldr	r3, [r7, #16]
 800f49c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	d002      	beq.n	800f4aa <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800f4a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f4a8:	e041      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800f4aa:	693b      	ldr	r3, [r7, #16]
 800f4ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	d002      	beq.n	800f4ba <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 800f4b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f4b8:	e039      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d002      	beq.n	800f4ca <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800f4c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800f4c8:	e031      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800f4ca:	693b      	ldr	r3, [r7, #16]
 800f4cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d002      	beq.n	800f4da <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800f4d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800f4d8:	e029      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800f4da:	693b      	ldr	r3, [r7, #16]
 800f4dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d002      	beq.n	800f4ea <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800f4e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f4e8:	e021      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f4f0:	2b00      	cmp	r3, #0
 800f4f2:	d002      	beq.n	800f4fa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800f4f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f4f8:	e019      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800f4fa:	693b      	ldr	r3, [r7, #16]
 800f4fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800f504:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f508:	e011      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800f50a:	693b      	ldr	r3, [r7, #16]
 800f50c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f510:	2b00      	cmp	r3, #0
 800f512:	d002      	beq.n	800f51a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800f514:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800f518:	e009      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800f51a:	693b      	ldr	r3, [r7, #16]
 800f51c:	f003 0308 	and.w	r3, r3, #8
 800f520:	2b00      	cmp	r3, #0
 800f522:	d002      	beq.n	800f52a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800f524:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800f528:	e001      	b.n	800f52e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f52a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f52e:	4618      	mov	r0, r3
 800f530:	371c      	adds	r7, #28
 800f532:	46bd      	mov	sp, r7
 800f534:	bd90      	pop	{r4, r7, pc}
 800f536:	bf00      	nop
 800f538:	20000000 	.word	0x20000000
 800f53c:	10624dd3 	.word	0x10624dd3
 800f540:	fdffe008 	.word	0xfdffe008

0800f544 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800f544:	b490      	push	{r4, r7}
 800f546:	b084      	sub	sp, #16
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f54c:	4b1e      	ldr	r3, [pc, #120]	; (800f5c8 <SDMMC_GetCmdResp2+0x84>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	4a1e      	ldr	r2, [pc, #120]	; (800f5cc <SDMMC_GetCmdResp2+0x88>)
 800f552:	fba2 2303 	umull	r2, r3, r2, r3
 800f556:	0a5b      	lsrs	r3, r3, #9
 800f558:	f241 3288 	movw	r2, #5000	; 0x1388
 800f55c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f560:	4623      	mov	r3, r4
 800f562:	1e5c      	subs	r4, r3, #1
 800f564:	2b00      	cmp	r3, #0
 800f566:	d102      	bne.n	800f56e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f568:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f56c:	e026      	b.n	800f5bc <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDMMCx->STA;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f572:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	d0f0      	beq.n	800f560 <SDMMC_GetCmdResp2+0x1c>
 800f57e:	68fb      	ldr	r3, [r7, #12]
 800f580:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f584:	2b00      	cmp	r3, #0
 800f586:	d1eb      	bne.n	800f560 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f58c:	f003 0304 	and.w	r3, r3, #4
 800f590:	2b00      	cmp	r3, #0
 800f592:	d004      	beq.n	800f59e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2204      	movs	r2, #4
 800f598:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f59a:	2304      	movs	r3, #4
 800f59c:	e00e      	b.n	800f5bc <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5a2:	f003 0301 	and.w	r3, r3, #1
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d004      	beq.n	800f5b4 <SDMMC_GetCmdResp2+0x70>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	2201      	movs	r2, #1
 800f5ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f5b0:	2301      	movs	r3, #1
 800f5b2:	e003      	b.n	800f5bc <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	22c5      	movs	r2, #197	; 0xc5
 800f5b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800f5ba:	2300      	movs	r3, #0
}
 800f5bc:	4618      	mov	r0, r3
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bc90      	pop	{r4, r7}
 800f5c4:	4770      	bx	lr
 800f5c6:	bf00      	nop
 800f5c8:	20000000 	.word	0x20000000
 800f5cc:	10624dd3 	.word	0x10624dd3

0800f5d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800f5d0:	b490      	push	{r4, r7}
 800f5d2:	b084      	sub	sp, #16
 800f5d4:	af00      	add	r7, sp, #0
 800f5d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f5d8:	4b18      	ldr	r3, [pc, #96]	; (800f63c <SDMMC_GetCmdResp3+0x6c>)
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	4a18      	ldr	r2, [pc, #96]	; (800f640 <SDMMC_GetCmdResp3+0x70>)
 800f5de:	fba2 2303 	umull	r2, r3, r2, r3
 800f5e2:	0a5b      	lsrs	r3, r3, #9
 800f5e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800f5e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f5ec:	4623      	mov	r3, r4
 800f5ee:	1e5c      	subs	r4, r3, #1
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d102      	bne.n	800f5fa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f5f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f5f8:	e01b      	b.n	800f632 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDMMCx->STA;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f5fe:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f606:	2b00      	cmp	r3, #0
 800f608:	d0f0      	beq.n	800f5ec <SDMMC_GetCmdResp3+0x1c>
 800f60a:	68fb      	ldr	r3, [r7, #12]
 800f60c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f610:	2b00      	cmp	r3, #0
 800f612:	d1eb      	bne.n	800f5ec <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f618:	f003 0304 	and.w	r3, r3, #4
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d004      	beq.n	800f62a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2204      	movs	r2, #4
 800f624:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f626:	2304      	movs	r3, #4
 800f628:	e003      	b.n	800f632 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	22c5      	movs	r2, #197	; 0xc5
 800f62e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f630:	2300      	movs	r3, #0
}
 800f632:	4618      	mov	r0, r3
 800f634:	3710      	adds	r7, #16
 800f636:	46bd      	mov	sp, r7
 800f638:	bc90      	pop	{r4, r7}
 800f63a:	4770      	bx	lr
 800f63c:	20000000 	.word	0x20000000
 800f640:	10624dd3 	.word	0x10624dd3

0800f644 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800f644:	b590      	push	{r4, r7, lr}
 800f646:	b087      	sub	sp, #28
 800f648:	af00      	add	r7, sp, #0
 800f64a:	60f8      	str	r0, [r7, #12]
 800f64c:	460b      	mov	r3, r1
 800f64e:	607a      	str	r2, [r7, #4]
 800f650:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f652:	4b34      	ldr	r3, [pc, #208]	; (800f724 <SDMMC_GetCmdResp6+0xe0>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	4a34      	ldr	r2, [pc, #208]	; (800f728 <SDMMC_GetCmdResp6+0xe4>)
 800f658:	fba2 2303 	umull	r2, r3, r2, r3
 800f65c:	0a5b      	lsrs	r3, r3, #9
 800f65e:	f241 3288 	movw	r2, #5000	; 0x1388
 800f662:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f666:	4623      	mov	r3, r4
 800f668:	1e5c      	subs	r4, r3, #1
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d102      	bne.n	800f674 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f66e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f672:	e052      	b.n	800f71a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDMMCx->STA;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f678:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f680:	2b00      	cmp	r3, #0
 800f682:	d0f0      	beq.n	800f666 <SDMMC_GetCmdResp6+0x22>
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d1eb      	bne.n	800f666 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f68e:	68fb      	ldr	r3, [r7, #12]
 800f690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f692:	f003 0304 	and.w	r3, r3, #4
 800f696:	2b00      	cmp	r3, #0
 800f698:	d004      	beq.n	800f6a4 <SDMMC_GetCmdResp6+0x60>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f69a:	68fb      	ldr	r3, [r7, #12]
 800f69c:	2204      	movs	r2, #4
 800f69e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f6a0:	2304      	movs	r3, #4
 800f6a2:	e03a      	b.n	800f71a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6a8:	f003 0301 	and.w	r3, r3, #1
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d004      	beq.n	800f6ba <SDMMC_GetCmdResp6+0x76>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2201      	movs	r2, #1
 800f6b4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6b6:	2301      	movs	r3, #1
 800f6b8:	e02f      	b.n	800f71a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f7ff fbac 	bl	800ee18 <SDMMC_GetCommandResponse>
 800f6c0:	4603      	mov	r3, r0
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	7afb      	ldrb	r3, [r7, #11]
 800f6c6:	4293      	cmp	r3, r2
 800f6c8:	d001      	beq.n	800f6ce <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	e025      	b.n	800f71a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	22c5      	movs	r2, #197	; 0xc5
 800f6d2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800f6d4:	2100      	movs	r1, #0
 800f6d6:	68f8      	ldr	r0, [r7, #12]
 800f6d8:	f7ff fbab 	bl	800ee32 <SDMMC_GetResponse>
 800f6dc:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d106      	bne.n	800f6f6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	0c1b      	lsrs	r3, r3, #16
 800f6ec:	b29a      	uxth	r2, r3
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	e011      	b.n	800f71a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d002      	beq.n	800f706 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800f700:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f704:	e009      	b.n	800f71a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800f706:	693b      	ldr	r3, [r7, #16]
 800f708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d002      	beq.n	800f716 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800f710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800f714:	e001      	b.n	800f71a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800f716:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	371c      	adds	r7, #28
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd90      	pop	{r4, r7, pc}
 800f722:	bf00      	nop
 800f724:	20000000 	.word	0x20000000
 800f728:	10624dd3 	.word	0x10624dd3

0800f72c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800f72c:	b490      	push	{r4, r7}
 800f72e:	b084      	sub	sp, #16
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800f734:	4b21      	ldr	r3, [pc, #132]	; (800f7bc <SDMMC_GetCmdResp7+0x90>)
 800f736:	681b      	ldr	r3, [r3, #0]
 800f738:	4a21      	ldr	r2, [pc, #132]	; (800f7c0 <SDMMC_GetCmdResp7+0x94>)
 800f73a:	fba2 2303 	umull	r2, r3, r2, r3
 800f73e:	0a5b      	lsrs	r3, r3, #9
 800f740:	f241 3288 	movw	r2, #5000	; 0x1388
 800f744:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800f748:	4623      	mov	r3, r4
 800f74a:	1e5c      	subs	r4, r3, #1
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d102      	bne.n	800f756 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800f750:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f754:	e02c      	b.n	800f7b0 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDMMCx->STA;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f75a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800f762:	2b00      	cmp	r3, #0
 800f764:	d0f0      	beq.n	800f748 <SDMMC_GetCmdResp7+0x1c>
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1eb      	bne.n	800f748 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f774:	f003 0304 	and.w	r3, r3, #4
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d004      	beq.n	800f786 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	2204      	movs	r2, #4
 800f780:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800f782:	2304      	movs	r3, #4
 800f784:	e014      	b.n	800f7b0 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f78a:	f003 0301 	and.w	r3, r3, #1
 800f78e:	2b00      	cmp	r3, #0
 800f790:	d004      	beq.n	800f79c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	2201      	movs	r2, #1
 800f796:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800f798:	2301      	movs	r3, #1
 800f79a:	e009      	b.n	800f7b0 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d002      	beq.n	800f7ae <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	2240      	movs	r2, #64	; 0x40
 800f7ac:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800f7ae:	2300      	movs	r3, #0
  
}
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	3710      	adds	r7, #16
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	bc90      	pop	{r4, r7}
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	20000000 	.word	0x20000000
 800f7c0:	10624dd3 	.word	0x10624dd3

0800f7c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f7c4:	b084      	sub	sp, #16
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b084      	sub	sp, #16
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
 800f7ce:	f107 001c 	add.w	r0, r7, #28
 800f7d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d120      	bne.n	800f81e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800f7dc:	687b      	ldr	r3, [r7, #4]
 800f7de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	68da      	ldr	r2, [r3, #12]
 800f7ec:	4b20      	ldr	r3, [pc, #128]	; (800f870 <USB_CoreInit+0xac>)
 800f7ee:	4013      	ands	r3, r2
 800f7f0:	687a      	ldr	r2, [r7, #4]
 800f7f2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	68db      	ldr	r3, [r3, #12]
 800f7f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800f800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f802:	2b01      	cmp	r3, #1
 800f804:	d105      	bne.n	800f812 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	68db      	ldr	r3, [r3, #12]
 800f80a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800f812:	6878      	ldr	r0, [r7, #4]
 800f814:	f001 fac4 	bl	8010da0 <USB_CoreReset>
 800f818:	4603      	mov	r3, r0
 800f81a:	73fb      	strb	r3, [r7, #15]
 800f81c:	e010      	b.n	800f840 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	68db      	ldr	r3, [r3, #12]
 800f822:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800f82a:	6878      	ldr	r0, [r7, #4]
 800f82c:	f001 fab8 	bl	8010da0 <USB_CoreReset>
 800f830:	4603      	mov	r3, r0
 800f832:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f838:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800f840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f842:	2b01      	cmp	r3, #1
 800f844:	d10b      	bne.n	800f85e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	689b      	ldr	r3, [r3, #8]
 800f84a:	f043 0206 	orr.w	r2, r3, #6
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	689b      	ldr	r3, [r3, #8]
 800f856:	f043 0220 	orr.w	r2, r3, #32
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800f85e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f860:	4618      	mov	r0, r3
 800f862:	3710      	adds	r7, #16
 800f864:	46bd      	mov	sp, r7
 800f866:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f86a:	b004      	add	sp, #16
 800f86c:	4770      	bx	lr
 800f86e:	bf00      	nop
 800f870:	ffbdffbf 	.word	0xffbdffbf

0800f874 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800f874:	b480      	push	{r7}
 800f876:	b087      	sub	sp, #28
 800f878:	af00      	add	r7, sp, #0
 800f87a:	60f8      	str	r0, [r7, #12]
 800f87c:	60b9      	str	r1, [r7, #8]
 800f87e:	4613      	mov	r3, r2
 800f880:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800f882:	79fb      	ldrb	r3, [r7, #7]
 800f884:	2b02      	cmp	r3, #2
 800f886:	d165      	bne.n	800f954 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	4a41      	ldr	r2, [pc, #260]	; (800f990 <USB_SetTurnaroundTime+0x11c>)
 800f88c:	4293      	cmp	r3, r2
 800f88e:	d906      	bls.n	800f89e <USB_SetTurnaroundTime+0x2a>
 800f890:	68bb      	ldr	r3, [r7, #8]
 800f892:	4a40      	ldr	r2, [pc, #256]	; (800f994 <USB_SetTurnaroundTime+0x120>)
 800f894:	4293      	cmp	r3, r2
 800f896:	d802      	bhi.n	800f89e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800f898:	230f      	movs	r3, #15
 800f89a:	617b      	str	r3, [r7, #20]
 800f89c:	e062      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	4a3c      	ldr	r2, [pc, #240]	; (800f994 <USB_SetTurnaroundTime+0x120>)
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d906      	bls.n	800f8b4 <USB_SetTurnaroundTime+0x40>
 800f8a6:	68bb      	ldr	r3, [r7, #8]
 800f8a8:	4a3b      	ldr	r2, [pc, #236]	; (800f998 <USB_SetTurnaroundTime+0x124>)
 800f8aa:	4293      	cmp	r3, r2
 800f8ac:	d802      	bhi.n	800f8b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800f8ae:	230e      	movs	r3, #14
 800f8b0:	617b      	str	r3, [r7, #20]
 800f8b2:	e057      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800f8b4:	68bb      	ldr	r3, [r7, #8]
 800f8b6:	4a38      	ldr	r2, [pc, #224]	; (800f998 <USB_SetTurnaroundTime+0x124>)
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	d906      	bls.n	800f8ca <USB_SetTurnaroundTime+0x56>
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	4a37      	ldr	r2, [pc, #220]	; (800f99c <USB_SetTurnaroundTime+0x128>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d802      	bhi.n	800f8ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800f8c4:	230d      	movs	r3, #13
 800f8c6:	617b      	str	r3, [r7, #20]
 800f8c8:	e04c      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800f8ca:	68bb      	ldr	r3, [r7, #8]
 800f8cc:	4a33      	ldr	r2, [pc, #204]	; (800f99c <USB_SetTurnaroundTime+0x128>)
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d906      	bls.n	800f8e0 <USB_SetTurnaroundTime+0x6c>
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	4a32      	ldr	r2, [pc, #200]	; (800f9a0 <USB_SetTurnaroundTime+0x12c>)
 800f8d6:	4293      	cmp	r3, r2
 800f8d8:	d802      	bhi.n	800f8e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800f8da:	230c      	movs	r3, #12
 800f8dc:	617b      	str	r3, [r7, #20]
 800f8de:	e041      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800f8e0:	68bb      	ldr	r3, [r7, #8]
 800f8e2:	4a2f      	ldr	r2, [pc, #188]	; (800f9a0 <USB_SetTurnaroundTime+0x12c>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d906      	bls.n	800f8f6 <USB_SetTurnaroundTime+0x82>
 800f8e8:	68bb      	ldr	r3, [r7, #8]
 800f8ea:	4a2e      	ldr	r2, [pc, #184]	; (800f9a4 <USB_SetTurnaroundTime+0x130>)
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d802      	bhi.n	800f8f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800f8f0:	230b      	movs	r3, #11
 800f8f2:	617b      	str	r3, [r7, #20]
 800f8f4:	e036      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800f8f6:	68bb      	ldr	r3, [r7, #8]
 800f8f8:	4a2a      	ldr	r2, [pc, #168]	; (800f9a4 <USB_SetTurnaroundTime+0x130>)
 800f8fa:	4293      	cmp	r3, r2
 800f8fc:	d906      	bls.n	800f90c <USB_SetTurnaroundTime+0x98>
 800f8fe:	68bb      	ldr	r3, [r7, #8]
 800f900:	4a29      	ldr	r2, [pc, #164]	; (800f9a8 <USB_SetTurnaroundTime+0x134>)
 800f902:	4293      	cmp	r3, r2
 800f904:	d802      	bhi.n	800f90c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800f906:	230a      	movs	r3, #10
 800f908:	617b      	str	r3, [r7, #20]
 800f90a:	e02b      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800f90c:	68bb      	ldr	r3, [r7, #8]
 800f90e:	4a26      	ldr	r2, [pc, #152]	; (800f9a8 <USB_SetTurnaroundTime+0x134>)
 800f910:	4293      	cmp	r3, r2
 800f912:	d906      	bls.n	800f922 <USB_SetTurnaroundTime+0xae>
 800f914:	68bb      	ldr	r3, [r7, #8]
 800f916:	4a25      	ldr	r2, [pc, #148]	; (800f9ac <USB_SetTurnaroundTime+0x138>)
 800f918:	4293      	cmp	r3, r2
 800f91a:	d802      	bhi.n	800f922 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800f91c:	2309      	movs	r3, #9
 800f91e:	617b      	str	r3, [r7, #20]
 800f920:	e020      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800f922:	68bb      	ldr	r3, [r7, #8]
 800f924:	4a21      	ldr	r2, [pc, #132]	; (800f9ac <USB_SetTurnaroundTime+0x138>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d906      	bls.n	800f938 <USB_SetTurnaroundTime+0xc4>
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	4a20      	ldr	r2, [pc, #128]	; (800f9b0 <USB_SetTurnaroundTime+0x13c>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d802      	bhi.n	800f938 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800f932:	2308      	movs	r3, #8
 800f934:	617b      	str	r3, [r7, #20]
 800f936:	e015      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800f938:	68bb      	ldr	r3, [r7, #8]
 800f93a:	4a1d      	ldr	r2, [pc, #116]	; (800f9b0 <USB_SetTurnaroundTime+0x13c>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d906      	bls.n	800f94e <USB_SetTurnaroundTime+0xda>
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	4a1c      	ldr	r2, [pc, #112]	; (800f9b4 <USB_SetTurnaroundTime+0x140>)
 800f944:	4293      	cmp	r3, r2
 800f946:	d802      	bhi.n	800f94e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800f948:	2307      	movs	r3, #7
 800f94a:	617b      	str	r3, [r7, #20]
 800f94c:	e00a      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800f94e:	2306      	movs	r3, #6
 800f950:	617b      	str	r3, [r7, #20]
 800f952:	e007      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800f954:	79fb      	ldrb	r3, [r7, #7]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d102      	bne.n	800f960 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800f95a:	2309      	movs	r3, #9
 800f95c:	617b      	str	r3, [r7, #20]
 800f95e:	e001      	b.n	800f964 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800f960:	2309      	movs	r3, #9
 800f962:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	68db      	ldr	r3, [r3, #12]
 800f968:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f96c:	68fb      	ldr	r3, [r7, #12]
 800f96e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	68da      	ldr	r2, [r3, #12]
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	029b      	lsls	r3, r3, #10
 800f978:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f97c:	431a      	orrs	r2, r3
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f982:	2300      	movs	r3, #0
}
 800f984:	4618      	mov	r0, r3
 800f986:	371c      	adds	r7, #28
 800f988:	46bd      	mov	sp, r7
 800f98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f98e:	4770      	bx	lr
 800f990:	00d8acbf 	.word	0x00d8acbf
 800f994:	00e4e1bf 	.word	0x00e4e1bf
 800f998:	00f423ff 	.word	0x00f423ff
 800f99c:	0106737f 	.word	0x0106737f
 800f9a0:	011a499f 	.word	0x011a499f
 800f9a4:	01312cff 	.word	0x01312cff
 800f9a8:	014ca43f 	.word	0x014ca43f
 800f9ac:	016e35ff 	.word	0x016e35ff
 800f9b0:	01a6ab1f 	.word	0x01a6ab1f
 800f9b4:	01e847ff 	.word	0x01e847ff

0800f9b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f9b8:	b480      	push	{r7}
 800f9ba:	b083      	sub	sp, #12
 800f9bc:	af00      	add	r7, sp, #0
 800f9be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	689b      	ldr	r3, [r3, #8]
 800f9c4:	f043 0201 	orr.w	r2, r3, #1
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f9cc:	2300      	movs	r3, #0
}
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	370c      	adds	r7, #12
 800f9d2:	46bd      	mov	sp, r7
 800f9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d8:	4770      	bx	lr

0800f9da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f9da:	b480      	push	{r7}
 800f9dc:	b083      	sub	sp, #12
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	689b      	ldr	r3, [r3, #8]
 800f9e6:	f023 0201 	bic.w	r2, r3, #1
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f9ee:	2300      	movs	r3, #0
}
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	370c      	adds	r7, #12
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr

0800f9fc <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b082      	sub	sp, #8
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	460b      	mov	r3, r1
 800fa06:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800fa14:	78fb      	ldrb	r3, [r7, #3]
 800fa16:	2b01      	cmp	r3, #1
 800fa18:	d106      	bne.n	800fa28 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800fa22:	687b      	ldr	r3, [r7, #4]
 800fa24:	60da      	str	r2, [r3, #12]
 800fa26:	e00b      	b.n	800fa40 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800fa28:	78fb      	ldrb	r3, [r7, #3]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d106      	bne.n	800fa3c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60da      	str	r2, [r3, #12]
 800fa3a:	e001      	b.n	800fa40 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e003      	b.n	800fa48 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800fa40:	2032      	movs	r0, #50	; 0x32
 800fa42:	f7f7 fd9d 	bl	8007580 <HAL_Delay>

  return HAL_OK;
 800fa46:	2300      	movs	r3, #0
}
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}

0800fa50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fa50:	b084      	sub	sp, #16
 800fa52:	b580      	push	{r7, lr}
 800fa54:	b086      	sub	sp, #24
 800fa56:	af00      	add	r7, sp, #0
 800fa58:	6078      	str	r0, [r7, #4]
 800fa5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800fa5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800fa62:	2300      	movs	r3, #0
 800fa64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	613b      	str	r3, [r7, #16]
 800fa6e:	e009      	b.n	800fa84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800fa70:	687a      	ldr	r2, [r7, #4]
 800fa72:	693b      	ldr	r3, [r7, #16]
 800fa74:	3340      	adds	r3, #64	; 0x40
 800fa76:	009b      	lsls	r3, r3, #2
 800fa78:	4413      	add	r3, r2
 800fa7a:	2200      	movs	r2, #0
 800fa7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800fa7e:	693b      	ldr	r3, [r7, #16]
 800fa80:	3301      	adds	r3, #1
 800fa82:	613b      	str	r3, [r7, #16]
 800fa84:	693b      	ldr	r3, [r7, #16]
 800fa86:	2b0e      	cmp	r3, #14
 800fa88:	d9f2      	bls.n	800fa70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800fa8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d11c      	bne.n	800faca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	68fa      	ldr	r2, [r7, #12]
 800fa9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fa9e:	f043 0302 	orr.w	r3, r3, #2
 800faa2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800faa8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	681b      	ldr	r3, [r3, #0]
 800fac0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	601a      	str	r2, [r3, #0]
 800fac8:	e005      	b.n	800fad6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800face:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fadc:	461a      	mov	r2, r3
 800fade:	2300      	movs	r3, #0
 800fae0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fae8:	4619      	mov	r1, r3
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faf0:	461a      	mov	r2, r3
 800faf2:	680b      	ldr	r3, [r1, #0]
 800faf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800faf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faf8:	2b01      	cmp	r3, #1
 800fafa:	d10c      	bne.n	800fb16 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d104      	bne.n	800fb0c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fb02:	2100      	movs	r1, #0
 800fb04:	6878      	ldr	r0, [r7, #4]
 800fb06:	f000 f959 	bl	800fdbc <USB_SetDevSpeed>
 800fb0a:	e018      	b.n	800fb3e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fb0c:	2101      	movs	r1, #1
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f954 	bl	800fdbc <USB_SetDevSpeed>
 800fb14:	e013      	b.n	800fb3e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 800fb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb18:	2b03      	cmp	r3, #3
 800fb1a:	d10c      	bne.n	800fb36 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800fb1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb1e:	2b00      	cmp	r3, #0
 800fb20:	d104      	bne.n	800fb2c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800fb22:	2100      	movs	r1, #0
 800fb24:	6878      	ldr	r0, [r7, #4]
 800fb26:	f000 f949 	bl	800fdbc <USB_SetDevSpeed>
 800fb2a:	e008      	b.n	800fb3e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800fb2c:	2101      	movs	r1, #1
 800fb2e:	6878      	ldr	r0, [r7, #4]
 800fb30:	f000 f944 	bl	800fdbc <USB_SetDevSpeed>
 800fb34:	e003      	b.n	800fb3e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800fb36:	2103      	movs	r1, #3
 800fb38:	6878      	ldr	r0, [r7, #4]
 800fb3a:	f000 f93f 	bl	800fdbc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fb3e:	2110      	movs	r1, #16
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f000 f8f3 	bl	800fd2c <USB_FlushTxFifo>
 800fb46:	4603      	mov	r3, r0
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	d001      	beq.n	800fb50 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 800fb4c:	2301      	movs	r3, #1
 800fb4e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 f911 	bl	800fd78 <USB_FlushRxFifo>
 800fb56:	4603      	mov	r3, r0
 800fb58:	2b00      	cmp	r3, #0
 800fb5a:	d001      	beq.n	800fb60 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 800fb5c:	2301      	movs	r3, #1
 800fb5e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800fb60:	68fb      	ldr	r3, [r7, #12]
 800fb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb66:	461a      	mov	r2, r3
 800fb68:	2300      	movs	r3, #0
 800fb6a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb72:	461a      	mov	r2, r3
 800fb74:	2300      	movs	r3, #0
 800fb76:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fb7e:	461a      	mov	r2, r3
 800fb80:	2300      	movs	r3, #0
 800fb82:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fb84:	2300      	movs	r3, #0
 800fb86:	613b      	str	r3, [r7, #16]
 800fb88:	e043      	b.n	800fc12 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fb8a:	693b      	ldr	r3, [r7, #16]
 800fb8c:	015a      	lsls	r2, r3, #5
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	4413      	add	r3, r2
 800fb92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fb9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fba0:	d118      	bne.n	800fbd4 <USB_DevInit+0x184>
    {
      if (i == 0U)
 800fba2:	693b      	ldr	r3, [r7, #16]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10a      	bne.n	800fbbe <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	015a      	lsls	r2, r3, #5
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	4413      	add	r3, r2
 800fbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbb4:	461a      	mov	r2, r3
 800fbb6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fbba:	6013      	str	r3, [r2, #0]
 800fbbc:	e013      	b.n	800fbe6 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800fbbe:	693b      	ldr	r3, [r7, #16]
 800fbc0:	015a      	lsls	r2, r3, #5
 800fbc2:	68fb      	ldr	r3, [r7, #12]
 800fbc4:	4413      	add	r3, r2
 800fbc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbca:	461a      	mov	r2, r3
 800fbcc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fbd0:	6013      	str	r3, [r2, #0]
 800fbd2:	e008      	b.n	800fbe6 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800fbd4:	693b      	ldr	r3, [r7, #16]
 800fbd6:	015a      	lsls	r2, r3, #5
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	4413      	add	r3, r2
 800fbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	015a      	lsls	r2, r3, #5
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	4413      	add	r3, r2
 800fbee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fbf2:	461a      	mov	r2, r3
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	015a      	lsls	r2, r3, #5
 800fbfc:	68fb      	ldr	r3, [r7, #12]
 800fbfe:	4413      	add	r3, r2
 800fc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fc04:	461a      	mov	r2, r3
 800fc06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fc0a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	3301      	adds	r3, #1
 800fc10:	613b      	str	r3, [r7, #16]
 800fc12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc14:	693a      	ldr	r2, [r7, #16]
 800fc16:	429a      	cmp	r2, r3
 800fc18:	d3b7      	bcc.n	800fb8a <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fc1a:	2300      	movs	r3, #0
 800fc1c:	613b      	str	r3, [r7, #16]
 800fc1e:	e043      	b.n	800fca8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	015a      	lsls	r2, r3, #5
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	4413      	add	r3, r2
 800fc28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fc32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fc36:	d118      	bne.n	800fc6a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 800fc38:	693b      	ldr	r3, [r7, #16]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d10a      	bne.n	800fc54 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800fc3e:	693b      	ldr	r3, [r7, #16]
 800fc40:	015a      	lsls	r2, r3, #5
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	4413      	add	r3, r2
 800fc46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc4a:	461a      	mov	r2, r3
 800fc4c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800fc50:	6013      	str	r3, [r2, #0]
 800fc52:	e013      	b.n	800fc7c <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800fc54:	693b      	ldr	r3, [r7, #16]
 800fc56:	015a      	lsls	r2, r3, #5
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	4413      	add	r3, r2
 800fc5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc60:	461a      	mov	r2, r3
 800fc62:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800fc66:	6013      	str	r3, [r2, #0]
 800fc68:	e008      	b.n	800fc7c <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800fc6a:	693b      	ldr	r3, [r7, #16]
 800fc6c:	015a      	lsls	r2, r3, #5
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	4413      	add	r3, r2
 800fc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc76:	461a      	mov	r2, r3
 800fc78:	2300      	movs	r3, #0
 800fc7a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800fc7c:	693b      	ldr	r3, [r7, #16]
 800fc7e:	015a      	lsls	r2, r3, #5
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	4413      	add	r3, r2
 800fc84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc88:	461a      	mov	r2, r3
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800fc8e:	693b      	ldr	r3, [r7, #16]
 800fc90:	015a      	lsls	r2, r3, #5
 800fc92:	68fb      	ldr	r3, [r7, #12]
 800fc94:	4413      	add	r3, r2
 800fc96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc9a:	461a      	mov	r2, r3
 800fc9c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800fca0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	3301      	adds	r3, #1
 800fca6:	613b      	str	r3, [r7, #16]
 800fca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcaa:	693a      	ldr	r2, [r7, #16]
 800fcac:	429a      	cmp	r2, r3
 800fcae:	d3b7      	bcc.n	800fc20 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcb6:	691b      	ldr	r3, [r3, #16]
 800fcb8:	68fa      	ldr	r2, [r7, #12]
 800fcba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fcbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fcc2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800fcd0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800fcd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d105      	bne.n	800fce4 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	699b      	ldr	r3, [r3, #24]
 800fcdc:	f043 0210 	orr.w	r2, r3, #16
 800fce0:	687b      	ldr	r3, [r7, #4]
 800fce2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	699a      	ldr	r2, [r3, #24]
 800fce8:	4b0e      	ldr	r3, [pc, #56]	; (800fd24 <USB_DevInit+0x2d4>)
 800fcea:	4313      	orrs	r3, r2
 800fcec:	687a      	ldr	r2, [r7, #4]
 800fcee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800fcf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d005      	beq.n	800fd02 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	699b      	ldr	r3, [r3, #24]
 800fcfa:	f043 0208 	orr.w	r2, r3, #8
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800fd02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd04:	2b01      	cmp	r3, #1
 800fd06:	d105      	bne.n	800fd14 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	699a      	ldr	r2, [r3, #24]
 800fd0c:	4b06      	ldr	r3, [pc, #24]	; (800fd28 <USB_DevInit+0x2d8>)
 800fd0e:	4313      	orrs	r3, r2
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800fd14:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd16:	4618      	mov	r0, r3
 800fd18:	3718      	adds	r7, #24
 800fd1a:	46bd      	mov	sp, r7
 800fd1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fd20:	b004      	add	sp, #16
 800fd22:	4770      	bx	lr
 800fd24:	803c3800 	.word	0x803c3800
 800fd28:	40000004 	.word	0x40000004

0800fd2c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b085      	sub	sp, #20
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
 800fd34:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800fd36:	2300      	movs	r3, #0
 800fd38:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800fd3a:	683b      	ldr	r3, [r7, #0]
 800fd3c:	019b      	lsls	r3, r3, #6
 800fd3e:	f043 0220 	orr.w	r2, r3, #32
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	3301      	adds	r3, #1
 800fd4a:	60fb      	str	r3, [r7, #12]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	4a09      	ldr	r2, [pc, #36]	; (800fd74 <USB_FlushTxFifo+0x48>)
 800fd50:	4293      	cmp	r3, r2
 800fd52:	d901      	bls.n	800fd58 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800fd54:	2303      	movs	r3, #3
 800fd56:	e006      	b.n	800fd66 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	691b      	ldr	r3, [r3, #16]
 800fd5c:	f003 0320 	and.w	r3, r3, #32
 800fd60:	2b20      	cmp	r3, #32
 800fd62:	d0f0      	beq.n	800fd46 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800fd64:	2300      	movs	r3, #0
}
 800fd66:	4618      	mov	r0, r3
 800fd68:	3714      	adds	r7, #20
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	00030d40 	.word	0x00030d40

0800fd78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b085      	sub	sp, #20
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800fd80:	2300      	movs	r3, #0
 800fd82:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	2210      	movs	r2, #16
 800fd88:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	60fb      	str	r3, [r7, #12]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	4a09      	ldr	r2, [pc, #36]	; (800fdb8 <USB_FlushRxFifo+0x40>)
 800fd94:	4293      	cmp	r3, r2
 800fd96:	d901      	bls.n	800fd9c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800fd98:	2303      	movs	r3, #3
 800fd9a:	e006      	b.n	800fdaa <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	691b      	ldr	r3, [r3, #16]
 800fda0:	f003 0310 	and.w	r3, r3, #16
 800fda4:	2b10      	cmp	r3, #16
 800fda6:	d0f0      	beq.n	800fd8a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3714      	adds	r7, #20
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb4:	4770      	bx	lr
 800fdb6:	bf00      	nop
 800fdb8:	00030d40 	.word	0x00030d40

0800fdbc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	b085      	sub	sp, #20
 800fdc0:	af00      	add	r7, sp, #0
 800fdc2:	6078      	str	r0, [r7, #4]
 800fdc4:	460b      	mov	r3, r1
 800fdc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800fdcc:	68fb      	ldr	r3, [r7, #12]
 800fdce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fdd2:	681a      	ldr	r2, [r3, #0]
 800fdd4:	78fb      	ldrb	r3, [r7, #3]
 800fdd6:	68f9      	ldr	r1, [r7, #12]
 800fdd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fddc:	4313      	orrs	r3, r2
 800fdde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800fde0:	2300      	movs	r3, #0
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3714      	adds	r7, #20
 800fde6:	46bd      	mov	sp, r7
 800fde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdec:	4770      	bx	lr

0800fdee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800fdee:	b480      	push	{r7}
 800fdf0:	b087      	sub	sp, #28
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800fdfa:	693b      	ldr	r3, [r7, #16]
 800fdfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe00:	689b      	ldr	r3, [r3, #8]
 800fe02:	f003 0306 	and.w	r3, r3, #6
 800fe06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800fe08:	68fb      	ldr	r3, [r7, #12]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d102      	bne.n	800fe14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800fe0e:	2300      	movs	r3, #0
 800fe10:	75fb      	strb	r3, [r7, #23]
 800fe12:	e00a      	b.n	800fe2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	d002      	beq.n	800fe20 <USB_GetDevSpeed+0x32>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2b06      	cmp	r3, #6
 800fe1e:	d102      	bne.n	800fe26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800fe20:	2302      	movs	r3, #2
 800fe22:	75fb      	strb	r3, [r7, #23]
 800fe24:	e001      	b.n	800fe2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800fe26:	230f      	movs	r3, #15
 800fe28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800fe2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	371c      	adds	r7, #28
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr

0800fe38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b085      	sub	sp, #20
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	781b      	ldrb	r3, [r3, #0]
 800fe4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800fe4c:	683b      	ldr	r3, [r7, #0]
 800fe4e:	785b      	ldrb	r3, [r3, #1]
 800fe50:	2b01      	cmp	r3, #1
 800fe52:	d139      	bne.n	800fec8 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fe5a:	69da      	ldr	r2, [r3, #28]
 800fe5c:	683b      	ldr	r3, [r7, #0]
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	f003 030f 	and.w	r3, r3, #15
 800fe64:	2101      	movs	r1, #1
 800fe66:	fa01 f303 	lsl.w	r3, r1, r3
 800fe6a:	b29b      	uxth	r3, r3
 800fe6c:	68f9      	ldr	r1, [r7, #12]
 800fe6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fe72:	4313      	orrs	r3, r2
 800fe74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800fe76:	68bb      	ldr	r3, [r7, #8]
 800fe78:	015a      	lsls	r2, r3, #5
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	4413      	add	r3, r2
 800fe7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe88:	2b00      	cmp	r3, #0
 800fe8a:	d153      	bne.n	800ff34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fe8c:	68bb      	ldr	r3, [r7, #8]
 800fe8e:	015a      	lsls	r2, r3, #5
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	4413      	add	r3, r2
 800fe94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	689b      	ldr	r3, [r3, #8]
 800fe9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800fea2:	683b      	ldr	r3, [r7, #0]
 800fea4:	78db      	ldrb	r3, [r3, #3]
 800fea6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800fea8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800feaa:	68bb      	ldr	r3, [r7, #8]
 800feac:	059b      	lsls	r3, r3, #22
 800feae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800feb0:	431a      	orrs	r2, r3
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	0159      	lsls	r1, r3, #5
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	440b      	add	r3, r1
 800feba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800febe:	4619      	mov	r1, r3
 800fec0:	4b20      	ldr	r3, [pc, #128]	; (800ff44 <USB_ActivateEndpoint+0x10c>)
 800fec2:	4313      	orrs	r3, r2
 800fec4:	600b      	str	r3, [r1, #0]
 800fec6:	e035      	b.n	800ff34 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fece:	69da      	ldr	r2, [r3, #28]
 800fed0:	683b      	ldr	r3, [r7, #0]
 800fed2:	781b      	ldrb	r3, [r3, #0]
 800fed4:	f003 030f 	and.w	r3, r3, #15
 800fed8:	2101      	movs	r1, #1
 800feda:	fa01 f303 	lsl.w	r3, r1, r3
 800fede:	041b      	lsls	r3, r3, #16
 800fee0:	68f9      	ldr	r1, [r7, #12]
 800fee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fee6:	4313      	orrs	r3, r2
 800fee8:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800feea:	68bb      	ldr	r3, [r7, #8]
 800feec:	015a      	lsls	r2, r3, #5
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	4413      	add	r3, r2
 800fef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d119      	bne.n	800ff34 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ff00:	68bb      	ldr	r3, [r7, #8]
 800ff02:	015a      	lsls	r2, r3, #5
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	4413      	add	r3, r2
 800ff08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff0c:	681a      	ldr	r2, [r3, #0]
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	689b      	ldr	r3, [r3, #8]
 800ff12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	78db      	ldrb	r3, [r3, #3]
 800ff1a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ff1c:	430b      	orrs	r3, r1
 800ff1e:	431a      	orrs	r2, r3
 800ff20:	68bb      	ldr	r3, [r7, #8]
 800ff22:	0159      	lsls	r1, r3, #5
 800ff24:	68fb      	ldr	r3, [r7, #12]
 800ff26:	440b      	add	r3, r1
 800ff28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ff2c:	4619      	mov	r1, r3
 800ff2e:	4b05      	ldr	r3, [pc, #20]	; (800ff44 <USB_ActivateEndpoint+0x10c>)
 800ff30:	4313      	orrs	r3, r2
 800ff32:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ff34:	2300      	movs	r3, #0
}
 800ff36:	4618      	mov	r0, r3
 800ff38:	3714      	adds	r7, #20
 800ff3a:	46bd      	mov	sp, r7
 800ff3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff40:	4770      	bx	lr
 800ff42:	bf00      	nop
 800ff44:	10008000 	.word	0x10008000

0800ff48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	b085      	sub	sp, #20
 800ff4c:	af00      	add	r7, sp, #0
 800ff4e:	6078      	str	r0, [r7, #4]
 800ff50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ff56:	683b      	ldr	r3, [r7, #0]
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ff5c:	683b      	ldr	r3, [r7, #0]
 800ff5e:	785b      	ldrb	r3, [r3, #1]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d161      	bne.n	8010028 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	015a      	lsls	r2, r3, #5
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	4413      	add	r3, r2
 800ff6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ff76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ff7a:	d11f      	bne.n	800ffbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ff7c:	68bb      	ldr	r3, [r7, #8]
 800ff7e:	015a      	lsls	r2, r3, #5
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	4413      	add	r3, r2
 800ff84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	68ba      	ldr	r2, [r7, #8]
 800ff8c:	0151      	lsls	r1, r2, #5
 800ff8e:	68fa      	ldr	r2, [r7, #12]
 800ff90:	440a      	add	r2, r1
 800ff92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ff96:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ff9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	015a      	lsls	r2, r3, #5
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68ba      	ldr	r2, [r7, #8]
 800ffac:	0151      	lsls	r1, r2, #5
 800ffae:	68fa      	ldr	r2, [r7, #12]
 800ffb0:	440a      	add	r2, r1
 800ffb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ffb6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ffba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	f003 030f 	and.w	r3, r3, #15
 800ffcc:	2101      	movs	r1, #1
 800ffce:	fa01 f303 	lsl.w	r3, r1, r3
 800ffd2:	b29b      	uxth	r3, r3
 800ffd4:	43db      	mvns	r3, r3
 800ffd6:	68f9      	ldr	r1, [r7, #12]
 800ffd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ffdc:	4013      	ands	r3, r2
 800ffde:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffe6:	69da      	ldr	r2, [r3, #28]
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	f003 030f 	and.w	r3, r3, #15
 800fff0:	2101      	movs	r1, #1
 800fff2:	fa01 f303 	lsl.w	r3, r1, r3
 800fff6:	b29b      	uxth	r3, r3
 800fff8:	43db      	mvns	r3, r3
 800fffa:	68f9      	ldr	r1, [r7, #12]
 800fffc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010000:	4013      	ands	r3, r2
 8010002:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010004:	68bb      	ldr	r3, [r7, #8]
 8010006:	015a      	lsls	r2, r3, #5
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	4413      	add	r3, r2
 801000c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010010:	681a      	ldr	r2, [r3, #0]
 8010012:	68bb      	ldr	r3, [r7, #8]
 8010014:	0159      	lsls	r1, r3, #5
 8010016:	68fb      	ldr	r3, [r7, #12]
 8010018:	440b      	add	r3, r1
 801001a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801001e:	4619      	mov	r1, r3
 8010020:	4b35      	ldr	r3, [pc, #212]	; (80100f8 <USB_DeactivateEndpoint+0x1b0>)
 8010022:	4013      	ands	r3, r2
 8010024:	600b      	str	r3, [r1, #0]
 8010026:	e060      	b.n	80100ea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010028:	68bb      	ldr	r3, [r7, #8]
 801002a:	015a      	lsls	r2, r3, #5
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	4413      	add	r3, r2
 8010030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801003a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801003e:	d11f      	bne.n	8010080 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	015a      	lsls	r2, r3, #5
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	4413      	add	r3, r2
 8010048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	68ba      	ldr	r2, [r7, #8]
 8010050:	0151      	lsls	r1, r2, #5
 8010052:	68fa      	ldr	r2, [r7, #12]
 8010054:	440a      	add	r2, r1
 8010056:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801005a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801005e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010060:	68bb      	ldr	r3, [r7, #8]
 8010062:	015a      	lsls	r2, r3, #5
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	4413      	add	r3, r2
 8010068:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	68ba      	ldr	r2, [r7, #8]
 8010070:	0151      	lsls	r1, r2, #5
 8010072:	68fa      	ldr	r2, [r7, #12]
 8010074:	440a      	add	r2, r1
 8010076:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801007a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801007e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010086:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	f003 030f 	and.w	r3, r3, #15
 8010090:	2101      	movs	r1, #1
 8010092:	fa01 f303 	lsl.w	r3, r1, r3
 8010096:	041b      	lsls	r3, r3, #16
 8010098:	43db      	mvns	r3, r3
 801009a:	68f9      	ldr	r1, [r7, #12]
 801009c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100a0:	4013      	ands	r3, r2
 80100a2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80100aa:	69da      	ldr	r2, [r3, #28]
 80100ac:	683b      	ldr	r3, [r7, #0]
 80100ae:	781b      	ldrb	r3, [r3, #0]
 80100b0:	f003 030f 	and.w	r3, r3, #15
 80100b4:	2101      	movs	r1, #1
 80100b6:	fa01 f303 	lsl.w	r3, r1, r3
 80100ba:	041b      	lsls	r3, r3, #16
 80100bc:	43db      	mvns	r3, r3
 80100be:	68f9      	ldr	r1, [r7, #12]
 80100c0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80100c4:	4013      	ands	r3, r2
 80100c6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80100c8:	68bb      	ldr	r3, [r7, #8]
 80100ca:	015a      	lsls	r2, r3, #5
 80100cc:	68fb      	ldr	r3, [r7, #12]
 80100ce:	4413      	add	r3, r2
 80100d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100d4:	681a      	ldr	r2, [r3, #0]
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	0159      	lsls	r1, r3, #5
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	440b      	add	r3, r1
 80100de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e2:	4619      	mov	r1, r3
 80100e4:	4b05      	ldr	r3, [pc, #20]	; (80100fc <USB_DeactivateEndpoint+0x1b4>)
 80100e6:	4013      	ands	r3, r2
 80100e8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80100ea:	2300      	movs	r3, #0
}
 80100ec:	4618      	mov	r0, r3
 80100ee:	3714      	adds	r7, #20
 80100f0:	46bd      	mov	sp, r7
 80100f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f6:	4770      	bx	lr
 80100f8:	ec337800 	.word	0xec337800
 80100fc:	eff37800 	.word	0xeff37800

08010100 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b08a      	sub	sp, #40	; 0x28
 8010104:	af02      	add	r7, sp, #8
 8010106:	60f8      	str	r0, [r7, #12]
 8010108:	60b9      	str	r1, [r7, #8]
 801010a:	4613      	mov	r3, r2
 801010c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	781b      	ldrb	r3, [r3, #0]
 8010116:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	785b      	ldrb	r3, [r3, #1]
 801011c:	2b01      	cmp	r3, #1
 801011e:	f040 8163 	bne.w	80103e8 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010122:	68bb      	ldr	r3, [r7, #8]
 8010124:	695b      	ldr	r3, [r3, #20]
 8010126:	2b00      	cmp	r3, #0
 8010128:	d132      	bne.n	8010190 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801012a:	69bb      	ldr	r3, [r7, #24]
 801012c:	015a      	lsls	r2, r3, #5
 801012e:	69fb      	ldr	r3, [r7, #28]
 8010130:	4413      	add	r3, r2
 8010132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010136:	691a      	ldr	r2, [r3, #16]
 8010138:	69bb      	ldr	r3, [r7, #24]
 801013a:	0159      	lsls	r1, r3, #5
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	440b      	add	r3, r1
 8010140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010144:	4619      	mov	r1, r3
 8010146:	4ba5      	ldr	r3, [pc, #660]	; (80103dc <USB_EPStartXfer+0x2dc>)
 8010148:	4013      	ands	r3, r2
 801014a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 801014c:	69bb      	ldr	r3, [r7, #24]
 801014e:	015a      	lsls	r2, r3, #5
 8010150:	69fb      	ldr	r3, [r7, #28]
 8010152:	4413      	add	r3, r2
 8010154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010158:	691b      	ldr	r3, [r3, #16]
 801015a:	69ba      	ldr	r2, [r7, #24]
 801015c:	0151      	lsls	r1, r2, #5
 801015e:	69fa      	ldr	r2, [r7, #28]
 8010160:	440a      	add	r2, r1
 8010162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010166:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801016a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801016c:	69bb      	ldr	r3, [r7, #24]
 801016e:	015a      	lsls	r2, r3, #5
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	4413      	add	r3, r2
 8010174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010178:	691a      	ldr	r2, [r3, #16]
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	0159      	lsls	r1, r3, #5
 801017e:	69fb      	ldr	r3, [r7, #28]
 8010180:	440b      	add	r3, r1
 8010182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010186:	4619      	mov	r1, r3
 8010188:	4b95      	ldr	r3, [pc, #596]	; (80103e0 <USB_EPStartXfer+0x2e0>)
 801018a:	4013      	ands	r3, r2
 801018c:	610b      	str	r3, [r1, #16]
 801018e:	e074      	b.n	801027a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010190:	69bb      	ldr	r3, [r7, #24]
 8010192:	015a      	lsls	r2, r3, #5
 8010194:	69fb      	ldr	r3, [r7, #28]
 8010196:	4413      	add	r3, r2
 8010198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801019c:	691a      	ldr	r2, [r3, #16]
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	0159      	lsls	r1, r3, #5
 80101a2:	69fb      	ldr	r3, [r7, #28]
 80101a4:	440b      	add	r3, r1
 80101a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101aa:	4619      	mov	r1, r3
 80101ac:	4b8c      	ldr	r3, [pc, #560]	; (80103e0 <USB_EPStartXfer+0x2e0>)
 80101ae:	4013      	ands	r3, r2
 80101b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80101b2:	69bb      	ldr	r3, [r7, #24]
 80101b4:	015a      	lsls	r2, r3, #5
 80101b6:	69fb      	ldr	r3, [r7, #28]
 80101b8:	4413      	add	r3, r2
 80101ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101be:	691a      	ldr	r2, [r3, #16]
 80101c0:	69bb      	ldr	r3, [r7, #24]
 80101c2:	0159      	lsls	r1, r3, #5
 80101c4:	69fb      	ldr	r3, [r7, #28]
 80101c6:	440b      	add	r3, r1
 80101c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101cc:	4619      	mov	r1, r3
 80101ce:	4b83      	ldr	r3, [pc, #524]	; (80103dc <USB_EPStartXfer+0x2dc>)
 80101d0:	4013      	ands	r3, r2
 80101d2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80101d4:	69bb      	ldr	r3, [r7, #24]
 80101d6:	015a      	lsls	r2, r3, #5
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	4413      	add	r3, r2
 80101dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80101e0:	691a      	ldr	r2, [r3, #16]
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	6959      	ldr	r1, [r3, #20]
 80101e6:	68bb      	ldr	r3, [r7, #8]
 80101e8:	689b      	ldr	r3, [r3, #8]
 80101ea:	440b      	add	r3, r1
 80101ec:	1e59      	subs	r1, r3, #1
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	689b      	ldr	r3, [r3, #8]
 80101f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80101f6:	04d9      	lsls	r1, r3, #19
 80101f8:	4b7a      	ldr	r3, [pc, #488]	; (80103e4 <USB_EPStartXfer+0x2e4>)
 80101fa:	400b      	ands	r3, r1
 80101fc:	69b9      	ldr	r1, [r7, #24]
 80101fe:	0148      	lsls	r0, r1, #5
 8010200:	69f9      	ldr	r1, [r7, #28]
 8010202:	4401      	add	r1, r0
 8010204:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8010208:	4313      	orrs	r3, r2
 801020a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 801020c:	69bb      	ldr	r3, [r7, #24]
 801020e:	015a      	lsls	r2, r3, #5
 8010210:	69fb      	ldr	r3, [r7, #28]
 8010212:	4413      	add	r3, r2
 8010214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010218:	691a      	ldr	r2, [r3, #16]
 801021a:	68bb      	ldr	r3, [r7, #8]
 801021c:	695b      	ldr	r3, [r3, #20]
 801021e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010222:	69b9      	ldr	r1, [r7, #24]
 8010224:	0148      	lsls	r0, r1, #5
 8010226:	69f9      	ldr	r1, [r7, #28]
 8010228:	4401      	add	r1, r0
 801022a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801022e:	4313      	orrs	r3, r2
 8010230:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	78db      	ldrb	r3, [r3, #3]
 8010236:	2b01      	cmp	r3, #1
 8010238:	d11f      	bne.n	801027a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801023a:	69bb      	ldr	r3, [r7, #24]
 801023c:	015a      	lsls	r2, r3, #5
 801023e:	69fb      	ldr	r3, [r7, #28]
 8010240:	4413      	add	r3, r2
 8010242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010246:	691b      	ldr	r3, [r3, #16]
 8010248:	69ba      	ldr	r2, [r7, #24]
 801024a:	0151      	lsls	r1, r2, #5
 801024c:	69fa      	ldr	r2, [r7, #28]
 801024e:	440a      	add	r2, r1
 8010250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010254:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8010258:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 801025a:	69bb      	ldr	r3, [r7, #24]
 801025c:	015a      	lsls	r2, r3, #5
 801025e:	69fb      	ldr	r3, [r7, #28]
 8010260:	4413      	add	r3, r2
 8010262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010266:	691b      	ldr	r3, [r3, #16]
 8010268:	69ba      	ldr	r2, [r7, #24]
 801026a:	0151      	lsls	r1, r2, #5
 801026c:	69fa      	ldr	r2, [r7, #28]
 801026e:	440a      	add	r2, r1
 8010270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010274:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8010278:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801027a:	79fb      	ldrb	r3, [r7, #7]
 801027c:	2b01      	cmp	r3, #1
 801027e:	d14b      	bne.n	8010318 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010280:	68bb      	ldr	r3, [r7, #8]
 8010282:	691b      	ldr	r3, [r3, #16]
 8010284:	2b00      	cmp	r3, #0
 8010286:	d009      	beq.n	801029c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010288:	69bb      	ldr	r3, [r7, #24]
 801028a:	015a      	lsls	r2, r3, #5
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	4413      	add	r3, r2
 8010290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010294:	461a      	mov	r2, r3
 8010296:	68bb      	ldr	r3, [r7, #8]
 8010298:	691b      	ldr	r3, [r3, #16]
 801029a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	78db      	ldrb	r3, [r3, #3]
 80102a0:	2b01      	cmp	r3, #1
 80102a2:	d128      	bne.n	80102f6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80102a4:	69fb      	ldr	r3, [r7, #28]
 80102a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102aa:	689b      	ldr	r3, [r3, #8]
 80102ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80102b0:	2b00      	cmp	r3, #0
 80102b2:	d110      	bne.n	80102d6 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80102b4:	69bb      	ldr	r3, [r7, #24]
 80102b6:	015a      	lsls	r2, r3, #5
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	4413      	add	r3, r2
 80102bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	69ba      	ldr	r2, [r7, #24]
 80102c4:	0151      	lsls	r1, r2, #5
 80102c6:	69fa      	ldr	r2, [r7, #28]
 80102c8:	440a      	add	r2, r1
 80102ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80102d2:	6013      	str	r3, [r2, #0]
 80102d4:	e00f      	b.n	80102f6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80102d6:	69bb      	ldr	r3, [r7, #24]
 80102d8:	015a      	lsls	r2, r3, #5
 80102da:	69fb      	ldr	r3, [r7, #28]
 80102dc:	4413      	add	r3, r2
 80102de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	69ba      	ldr	r2, [r7, #24]
 80102e6:	0151      	lsls	r1, r2, #5
 80102e8:	69fa      	ldr	r2, [r7, #28]
 80102ea:	440a      	add	r2, r1
 80102ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80102f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80102f4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80102f6:	69bb      	ldr	r3, [r7, #24]
 80102f8:	015a      	lsls	r2, r3, #5
 80102fa:	69fb      	ldr	r3, [r7, #28]
 80102fc:	4413      	add	r3, r2
 80102fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	69ba      	ldr	r2, [r7, #24]
 8010306:	0151      	lsls	r1, r2, #5
 8010308:	69fa      	ldr	r2, [r7, #28]
 801030a:	440a      	add	r2, r1
 801030c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010310:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010314:	6013      	str	r3, [r2, #0]
 8010316:	e133      	b.n	8010580 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8010318:	69bb      	ldr	r3, [r7, #24]
 801031a:	015a      	lsls	r2, r3, #5
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	4413      	add	r3, r2
 8010320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	69ba      	ldr	r2, [r7, #24]
 8010328:	0151      	lsls	r1, r2, #5
 801032a:	69fa      	ldr	r2, [r7, #28]
 801032c:	440a      	add	r2, r1
 801032e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010332:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010336:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8010338:	68bb      	ldr	r3, [r7, #8]
 801033a:	78db      	ldrb	r3, [r3, #3]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d015      	beq.n	801036c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8010340:	68bb      	ldr	r3, [r7, #8]
 8010342:	695b      	ldr	r3, [r3, #20]
 8010344:	2b00      	cmp	r3, #0
 8010346:	f000 811b 	beq.w	8010580 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801034a:	69fb      	ldr	r3, [r7, #28]
 801034c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	781b      	ldrb	r3, [r3, #0]
 8010356:	f003 030f 	and.w	r3, r3, #15
 801035a:	2101      	movs	r1, #1
 801035c:	fa01 f303 	lsl.w	r3, r1, r3
 8010360:	69f9      	ldr	r1, [r7, #28]
 8010362:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010366:	4313      	orrs	r3, r2
 8010368:	634b      	str	r3, [r1, #52]	; 0x34
 801036a:	e109      	b.n	8010580 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801036c:	69fb      	ldr	r3, [r7, #28]
 801036e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010372:	689b      	ldr	r3, [r3, #8]
 8010374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010378:	2b00      	cmp	r3, #0
 801037a:	d110      	bne.n	801039e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801037c:	69bb      	ldr	r3, [r7, #24]
 801037e:	015a      	lsls	r2, r3, #5
 8010380:	69fb      	ldr	r3, [r7, #28]
 8010382:	4413      	add	r3, r2
 8010384:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	69ba      	ldr	r2, [r7, #24]
 801038c:	0151      	lsls	r1, r2, #5
 801038e:	69fa      	ldr	r2, [r7, #28]
 8010390:	440a      	add	r2, r1
 8010392:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010396:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801039a:	6013      	str	r3, [r2, #0]
 801039c:	e00f      	b.n	80103be <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	015a      	lsls	r2, r3, #5
 80103a2:	69fb      	ldr	r3, [r7, #28]
 80103a4:	4413      	add	r3, r2
 80103a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	69ba      	ldr	r2, [r7, #24]
 80103ae:	0151      	lsls	r1, r2, #5
 80103b0:	69fa      	ldr	r2, [r7, #28]
 80103b2:	440a      	add	r2, r1
 80103b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80103b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80103bc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80103be:	68bb      	ldr	r3, [r7, #8]
 80103c0:	68d9      	ldr	r1, [r3, #12]
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	781a      	ldrb	r2, [r3, #0]
 80103c6:	68bb      	ldr	r3, [r7, #8]
 80103c8:	695b      	ldr	r3, [r3, #20]
 80103ca:	b298      	uxth	r0, r3
 80103cc:	79fb      	ldrb	r3, [r7, #7]
 80103ce:	9300      	str	r3, [sp, #0]
 80103d0:	4603      	mov	r3, r0
 80103d2:	68f8      	ldr	r0, [r7, #12]
 80103d4:	f000 fa38 	bl	8010848 <USB_WritePacket>
 80103d8:	e0d2      	b.n	8010580 <USB_EPStartXfer+0x480>
 80103da:	bf00      	nop
 80103dc:	e007ffff 	.word	0xe007ffff
 80103e0:	fff80000 	.word	0xfff80000
 80103e4:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80103e8:	69bb      	ldr	r3, [r7, #24]
 80103ea:	015a      	lsls	r2, r3, #5
 80103ec:	69fb      	ldr	r3, [r7, #28]
 80103ee:	4413      	add	r3, r2
 80103f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f4:	691a      	ldr	r2, [r3, #16]
 80103f6:	69bb      	ldr	r3, [r7, #24]
 80103f8:	0159      	lsls	r1, r3, #5
 80103fa:	69fb      	ldr	r3, [r7, #28]
 80103fc:	440b      	add	r3, r1
 80103fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010402:	4619      	mov	r1, r3
 8010404:	4b61      	ldr	r3, [pc, #388]	; (801058c <USB_EPStartXfer+0x48c>)
 8010406:	4013      	ands	r3, r2
 8010408:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801040a:	69bb      	ldr	r3, [r7, #24]
 801040c:	015a      	lsls	r2, r3, #5
 801040e:	69fb      	ldr	r3, [r7, #28]
 8010410:	4413      	add	r3, r2
 8010412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010416:	691a      	ldr	r2, [r3, #16]
 8010418:	69bb      	ldr	r3, [r7, #24]
 801041a:	0159      	lsls	r1, r3, #5
 801041c:	69fb      	ldr	r3, [r7, #28]
 801041e:	440b      	add	r3, r1
 8010420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010424:	4619      	mov	r1, r3
 8010426:	4b5a      	ldr	r3, [pc, #360]	; (8010590 <USB_EPStartXfer+0x490>)
 8010428:	4013      	ands	r3, r2
 801042a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 801042c:	68bb      	ldr	r3, [r7, #8]
 801042e:	695b      	ldr	r3, [r3, #20]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d123      	bne.n	801047c <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	015a      	lsls	r2, r3, #5
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	4413      	add	r3, r2
 801043c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010440:	691a      	ldr	r2, [r3, #16]
 8010442:	68bb      	ldr	r3, [r7, #8]
 8010444:	689b      	ldr	r3, [r3, #8]
 8010446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801044a:	69b9      	ldr	r1, [r7, #24]
 801044c:	0148      	lsls	r0, r1, #5
 801044e:	69f9      	ldr	r1, [r7, #28]
 8010450:	4401      	add	r1, r0
 8010452:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8010456:	4313      	orrs	r3, r2
 8010458:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801045a:	69bb      	ldr	r3, [r7, #24]
 801045c:	015a      	lsls	r2, r3, #5
 801045e:	69fb      	ldr	r3, [r7, #28]
 8010460:	4413      	add	r3, r2
 8010462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010466:	691b      	ldr	r3, [r3, #16]
 8010468:	69ba      	ldr	r2, [r7, #24]
 801046a:	0151      	lsls	r1, r2, #5
 801046c:	69fa      	ldr	r2, [r7, #28]
 801046e:	440a      	add	r2, r1
 8010470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010474:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010478:	6113      	str	r3, [r2, #16]
 801047a:	e033      	b.n	80104e4 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 801047c:	68bb      	ldr	r3, [r7, #8]
 801047e:	695a      	ldr	r2, [r3, #20]
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	689b      	ldr	r3, [r3, #8]
 8010484:	4413      	add	r3, r2
 8010486:	1e5a      	subs	r2, r3, #1
 8010488:	68bb      	ldr	r3, [r7, #8]
 801048a:	689b      	ldr	r3, [r3, #8]
 801048c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010490:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8010492:	69bb      	ldr	r3, [r7, #24]
 8010494:	015a      	lsls	r2, r3, #5
 8010496:	69fb      	ldr	r3, [r7, #28]
 8010498:	4413      	add	r3, r2
 801049a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801049e:	691a      	ldr	r2, [r3, #16]
 80104a0:	8afb      	ldrh	r3, [r7, #22]
 80104a2:	04d9      	lsls	r1, r3, #19
 80104a4:	4b3b      	ldr	r3, [pc, #236]	; (8010594 <USB_EPStartXfer+0x494>)
 80104a6:	400b      	ands	r3, r1
 80104a8:	69b9      	ldr	r1, [r7, #24]
 80104aa:	0148      	lsls	r0, r1, #5
 80104ac:	69f9      	ldr	r1, [r7, #28]
 80104ae:	4401      	add	r1, r0
 80104b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80104b4:	4313      	orrs	r3, r2
 80104b6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80104b8:	69bb      	ldr	r3, [r7, #24]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	69fb      	ldr	r3, [r7, #28]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104c4:	691a      	ldr	r2, [r3, #16]
 80104c6:	68bb      	ldr	r3, [r7, #8]
 80104c8:	689b      	ldr	r3, [r3, #8]
 80104ca:	8af9      	ldrh	r1, [r7, #22]
 80104cc:	fb01 f303 	mul.w	r3, r1, r3
 80104d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80104d4:	69b9      	ldr	r1, [r7, #24]
 80104d6:	0148      	lsls	r0, r1, #5
 80104d8:	69f9      	ldr	r1, [r7, #28]
 80104da:	4401      	add	r1, r0
 80104dc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80104e0:	4313      	orrs	r3, r2
 80104e2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80104e4:	79fb      	ldrb	r3, [r7, #7]
 80104e6:	2b01      	cmp	r3, #1
 80104e8:	d10d      	bne.n	8010506 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80104ea:	68bb      	ldr	r3, [r7, #8]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d009      	beq.n	8010506 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	68d9      	ldr	r1, [r3, #12]
 80104f6:	69bb      	ldr	r3, [r7, #24]
 80104f8:	015a      	lsls	r2, r3, #5
 80104fa:	69fb      	ldr	r3, [r7, #28]
 80104fc:	4413      	add	r3, r2
 80104fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010502:	460a      	mov	r2, r1
 8010504:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8010506:	68bb      	ldr	r3, [r7, #8]
 8010508:	78db      	ldrb	r3, [r3, #3]
 801050a:	2b01      	cmp	r3, #1
 801050c:	d128      	bne.n	8010560 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801050e:	69fb      	ldr	r3, [r7, #28]
 8010510:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010514:	689b      	ldr	r3, [r3, #8]
 8010516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801051a:	2b00      	cmp	r3, #0
 801051c:	d110      	bne.n	8010540 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801051e:	69bb      	ldr	r3, [r7, #24]
 8010520:	015a      	lsls	r2, r3, #5
 8010522:	69fb      	ldr	r3, [r7, #28]
 8010524:	4413      	add	r3, r2
 8010526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801052a:	681b      	ldr	r3, [r3, #0]
 801052c:	69ba      	ldr	r2, [r7, #24]
 801052e:	0151      	lsls	r1, r2, #5
 8010530:	69fa      	ldr	r2, [r7, #28]
 8010532:	440a      	add	r2, r1
 8010534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010538:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801053c:	6013      	str	r3, [r2, #0]
 801053e:	e00f      	b.n	8010560 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	015a      	lsls	r2, r3, #5
 8010544:	69fb      	ldr	r3, [r7, #28]
 8010546:	4413      	add	r3, r2
 8010548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	69ba      	ldr	r2, [r7, #24]
 8010550:	0151      	lsls	r1, r2, #5
 8010552:	69fa      	ldr	r2, [r7, #28]
 8010554:	440a      	add	r2, r1
 8010556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801055a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801055e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010560:	69bb      	ldr	r3, [r7, #24]
 8010562:	015a      	lsls	r2, r3, #5
 8010564:	69fb      	ldr	r3, [r7, #28]
 8010566:	4413      	add	r3, r2
 8010568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	69ba      	ldr	r2, [r7, #24]
 8010570:	0151      	lsls	r1, r2, #5
 8010572:	69fa      	ldr	r2, [r7, #28]
 8010574:	440a      	add	r2, r1
 8010576:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801057a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801057e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010580:	2300      	movs	r3, #0
}
 8010582:	4618      	mov	r0, r3
 8010584:	3720      	adds	r7, #32
 8010586:	46bd      	mov	sp, r7
 8010588:	bd80      	pop	{r7, pc}
 801058a:	bf00      	nop
 801058c:	fff80000 	.word	0xfff80000
 8010590:	e007ffff 	.word	0xe007ffff
 8010594:	1ff80000 	.word	0x1ff80000

08010598 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010598:	b480      	push	{r7}
 801059a:	b087      	sub	sp, #28
 801059c:	af00      	add	r7, sp, #0
 801059e:	60f8      	str	r0, [r7, #12]
 80105a0:	60b9      	str	r1, [r7, #8]
 80105a2:	4613      	mov	r3, r2
 80105a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80105aa:	68bb      	ldr	r3, [r7, #8]
 80105ac:	781b      	ldrb	r3, [r3, #0]
 80105ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	785b      	ldrb	r3, [r3, #1]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	f040 80cd 	bne.w	8010754 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80105ba:	68bb      	ldr	r3, [r7, #8]
 80105bc:	695b      	ldr	r3, [r3, #20]
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d132      	bne.n	8010628 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80105c2:	693b      	ldr	r3, [r7, #16]
 80105c4:	015a      	lsls	r2, r3, #5
 80105c6:	697b      	ldr	r3, [r7, #20]
 80105c8:	4413      	add	r3, r2
 80105ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105ce:	691a      	ldr	r2, [r3, #16]
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	0159      	lsls	r1, r3, #5
 80105d4:	697b      	ldr	r3, [r7, #20]
 80105d6:	440b      	add	r3, r1
 80105d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105dc:	4619      	mov	r1, r3
 80105de:	4b98      	ldr	r3, [pc, #608]	; (8010840 <USB_EP0StartXfer+0x2a8>)
 80105e0:	4013      	ands	r3, r2
 80105e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80105e4:	693b      	ldr	r3, [r7, #16]
 80105e6:	015a      	lsls	r2, r3, #5
 80105e8:	697b      	ldr	r3, [r7, #20]
 80105ea:	4413      	add	r3, r2
 80105ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80105f0:	691b      	ldr	r3, [r3, #16]
 80105f2:	693a      	ldr	r2, [r7, #16]
 80105f4:	0151      	lsls	r1, r2, #5
 80105f6:	697a      	ldr	r2, [r7, #20]
 80105f8:	440a      	add	r2, r1
 80105fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80105fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010602:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010604:	693b      	ldr	r3, [r7, #16]
 8010606:	015a      	lsls	r2, r3, #5
 8010608:	697b      	ldr	r3, [r7, #20]
 801060a:	4413      	add	r3, r2
 801060c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010610:	691a      	ldr	r2, [r3, #16]
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	0159      	lsls	r1, r3, #5
 8010616:	697b      	ldr	r3, [r7, #20]
 8010618:	440b      	add	r3, r1
 801061a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801061e:	4619      	mov	r1, r3
 8010620:	4b88      	ldr	r3, [pc, #544]	; (8010844 <USB_EP0StartXfer+0x2ac>)
 8010622:	4013      	ands	r3, r2
 8010624:	610b      	str	r3, [r1, #16]
 8010626:	e04e      	b.n	80106c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010628:	693b      	ldr	r3, [r7, #16]
 801062a:	015a      	lsls	r2, r3, #5
 801062c:	697b      	ldr	r3, [r7, #20]
 801062e:	4413      	add	r3, r2
 8010630:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010634:	691a      	ldr	r2, [r3, #16]
 8010636:	693b      	ldr	r3, [r7, #16]
 8010638:	0159      	lsls	r1, r3, #5
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	440b      	add	r3, r1
 801063e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010642:	4619      	mov	r1, r3
 8010644:	4b7f      	ldr	r3, [pc, #508]	; (8010844 <USB_EP0StartXfer+0x2ac>)
 8010646:	4013      	ands	r3, r2
 8010648:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801064a:	693b      	ldr	r3, [r7, #16]
 801064c:	015a      	lsls	r2, r3, #5
 801064e:	697b      	ldr	r3, [r7, #20]
 8010650:	4413      	add	r3, r2
 8010652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010656:	691a      	ldr	r2, [r3, #16]
 8010658:	693b      	ldr	r3, [r7, #16]
 801065a:	0159      	lsls	r1, r3, #5
 801065c:	697b      	ldr	r3, [r7, #20]
 801065e:	440b      	add	r3, r1
 8010660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010664:	4619      	mov	r1, r3
 8010666:	4b76      	ldr	r3, [pc, #472]	; (8010840 <USB_EP0StartXfer+0x2a8>)
 8010668:	4013      	ands	r3, r2
 801066a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	695a      	ldr	r2, [r3, #20]
 8010670:	68bb      	ldr	r3, [r7, #8]
 8010672:	689b      	ldr	r3, [r3, #8]
 8010674:	429a      	cmp	r2, r3
 8010676:	d903      	bls.n	8010680 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	689a      	ldr	r2, [r3, #8]
 801067c:	68bb      	ldr	r3, [r7, #8]
 801067e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010680:	693b      	ldr	r3, [r7, #16]
 8010682:	015a      	lsls	r2, r3, #5
 8010684:	697b      	ldr	r3, [r7, #20]
 8010686:	4413      	add	r3, r2
 8010688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801068c:	691b      	ldr	r3, [r3, #16]
 801068e:	693a      	ldr	r2, [r7, #16]
 8010690:	0151      	lsls	r1, r2, #5
 8010692:	697a      	ldr	r2, [r7, #20]
 8010694:	440a      	add	r2, r1
 8010696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801069a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801069e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80106a0:	693b      	ldr	r3, [r7, #16]
 80106a2:	015a      	lsls	r2, r3, #5
 80106a4:	697b      	ldr	r3, [r7, #20]
 80106a6:	4413      	add	r3, r2
 80106a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106ac:	691a      	ldr	r2, [r3, #16]
 80106ae:	68bb      	ldr	r3, [r7, #8]
 80106b0:	695b      	ldr	r3, [r3, #20]
 80106b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80106b6:	6939      	ldr	r1, [r7, #16]
 80106b8:	0148      	lsls	r0, r1, #5
 80106ba:	6979      	ldr	r1, [r7, #20]
 80106bc:	4401      	add	r1, r0
 80106be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80106c2:	4313      	orrs	r3, r2
 80106c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80106c6:	79fb      	ldrb	r3, [r7, #7]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d11e      	bne.n	801070a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80106cc:	68bb      	ldr	r3, [r7, #8]
 80106ce:	691b      	ldr	r3, [r3, #16]
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d009      	beq.n	80106e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80106d4:	693b      	ldr	r3, [r7, #16]
 80106d6:	015a      	lsls	r2, r3, #5
 80106d8:	697b      	ldr	r3, [r7, #20]
 80106da:	4413      	add	r3, r2
 80106dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106e0:	461a      	mov	r2, r3
 80106e2:	68bb      	ldr	r3, [r7, #8]
 80106e4:	691b      	ldr	r3, [r3, #16]
 80106e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80106e8:	693b      	ldr	r3, [r7, #16]
 80106ea:	015a      	lsls	r2, r3, #5
 80106ec:	697b      	ldr	r3, [r7, #20]
 80106ee:	4413      	add	r3, r2
 80106f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	0151      	lsls	r1, r2, #5
 80106fa:	697a      	ldr	r2, [r7, #20]
 80106fc:	440a      	add	r2, r1
 80106fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010702:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010706:	6013      	str	r3, [r2, #0]
 8010708:	e092      	b.n	8010830 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801070a:	693b      	ldr	r3, [r7, #16]
 801070c:	015a      	lsls	r2, r3, #5
 801070e:	697b      	ldr	r3, [r7, #20]
 8010710:	4413      	add	r3, r2
 8010712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010716:	681b      	ldr	r3, [r3, #0]
 8010718:	693a      	ldr	r2, [r7, #16]
 801071a:	0151      	lsls	r1, r2, #5
 801071c:	697a      	ldr	r2, [r7, #20]
 801071e:	440a      	add	r2, r1
 8010720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010724:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8010728:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	695b      	ldr	r3, [r3, #20]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d07e      	beq.n	8010830 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8010732:	697b      	ldr	r3, [r7, #20]
 8010734:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010738:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	781b      	ldrb	r3, [r3, #0]
 801073e:	f003 030f 	and.w	r3, r3, #15
 8010742:	2101      	movs	r1, #1
 8010744:	fa01 f303 	lsl.w	r3, r1, r3
 8010748:	6979      	ldr	r1, [r7, #20]
 801074a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801074e:	4313      	orrs	r3, r2
 8010750:	634b      	str	r3, [r1, #52]	; 0x34
 8010752:	e06d      	b.n	8010830 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	015a      	lsls	r2, r3, #5
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	4413      	add	r3, r2
 801075c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010760:	691a      	ldr	r2, [r3, #16]
 8010762:	693b      	ldr	r3, [r7, #16]
 8010764:	0159      	lsls	r1, r3, #5
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	440b      	add	r3, r1
 801076a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801076e:	4619      	mov	r1, r3
 8010770:	4b34      	ldr	r3, [pc, #208]	; (8010844 <USB_EP0StartXfer+0x2ac>)
 8010772:	4013      	ands	r3, r2
 8010774:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8010776:	693b      	ldr	r3, [r7, #16]
 8010778:	015a      	lsls	r2, r3, #5
 801077a:	697b      	ldr	r3, [r7, #20]
 801077c:	4413      	add	r3, r2
 801077e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010782:	691a      	ldr	r2, [r3, #16]
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	0159      	lsls	r1, r3, #5
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	440b      	add	r3, r1
 801078c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010790:	4619      	mov	r1, r3
 8010792:	4b2b      	ldr	r3, [pc, #172]	; (8010840 <USB_EP0StartXfer+0x2a8>)
 8010794:	4013      	ands	r3, r2
 8010796:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	695b      	ldr	r3, [r3, #20]
 801079c:	2b00      	cmp	r3, #0
 801079e:	d003      	beq.n	80107a8 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	689a      	ldr	r2, [r3, #8]
 80107a4:	68bb      	ldr	r3, [r7, #8]
 80107a6:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	015a      	lsls	r2, r3, #5
 80107ac:	697b      	ldr	r3, [r7, #20]
 80107ae:	4413      	add	r3, r2
 80107b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107b4:	691b      	ldr	r3, [r3, #16]
 80107b6:	693a      	ldr	r2, [r7, #16]
 80107b8:	0151      	lsls	r1, r2, #5
 80107ba:	697a      	ldr	r2, [r7, #20]
 80107bc:	440a      	add	r2, r1
 80107be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80107c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80107c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80107c8:	693b      	ldr	r3, [r7, #16]
 80107ca:	015a      	lsls	r2, r3, #5
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	4413      	add	r3, r2
 80107d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80107d4:	691a      	ldr	r2, [r3, #16]
 80107d6:	68bb      	ldr	r3, [r7, #8]
 80107d8:	689b      	ldr	r3, [r3, #8]
 80107da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80107de:	6939      	ldr	r1, [r7, #16]
 80107e0:	0148      	lsls	r0, r1, #5
 80107e2:	6979      	ldr	r1, [r7, #20]
 80107e4:	4401      	add	r1, r0
 80107e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80107ea:	4313      	orrs	r3, r2
 80107ec:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	2b01      	cmp	r3, #1
 80107f2:	d10d      	bne.n	8010810 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80107f4:	68bb      	ldr	r3, [r7, #8]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d009      	beq.n	8010810 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80107fc:	68bb      	ldr	r3, [r7, #8]
 80107fe:	68d9      	ldr	r1, [r3, #12]
 8010800:	693b      	ldr	r3, [r7, #16]
 8010802:	015a      	lsls	r2, r3, #5
 8010804:	697b      	ldr	r3, [r7, #20]
 8010806:	4413      	add	r3, r2
 8010808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801080c:	460a      	mov	r2, r1
 801080e:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8010810:	693b      	ldr	r3, [r7, #16]
 8010812:	015a      	lsls	r2, r3, #5
 8010814:	697b      	ldr	r3, [r7, #20]
 8010816:	4413      	add	r3, r2
 8010818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801081c:	681b      	ldr	r3, [r3, #0]
 801081e:	693a      	ldr	r2, [r7, #16]
 8010820:	0151      	lsls	r1, r2, #5
 8010822:	697a      	ldr	r2, [r7, #20]
 8010824:	440a      	add	r2, r1
 8010826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801082a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801082e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010830:	2300      	movs	r3, #0
}
 8010832:	4618      	mov	r0, r3
 8010834:	371c      	adds	r7, #28
 8010836:	46bd      	mov	sp, r7
 8010838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801083c:	4770      	bx	lr
 801083e:	bf00      	nop
 8010840:	e007ffff 	.word	0xe007ffff
 8010844:	fff80000 	.word	0xfff80000

08010848 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8010848:	b480      	push	{r7}
 801084a:	b089      	sub	sp, #36	; 0x24
 801084c:	af00      	add	r7, sp, #0
 801084e:	60f8      	str	r0, [r7, #12]
 8010850:	60b9      	str	r1, [r7, #8]
 8010852:	4611      	mov	r1, r2
 8010854:	461a      	mov	r2, r3
 8010856:	460b      	mov	r3, r1
 8010858:	71fb      	strb	r3, [r7, #7]
 801085a:	4613      	mov	r3, r2
 801085c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801085e:	68fb      	ldr	r3, [r7, #12]
 8010860:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8010862:	68bb      	ldr	r3, [r7, #8]
 8010864:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8010866:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801086a:	2b00      	cmp	r3, #0
 801086c:	d11a      	bne.n	80108a4 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801086e:	88bb      	ldrh	r3, [r7, #4]
 8010870:	3303      	adds	r3, #3
 8010872:	089b      	lsrs	r3, r3, #2
 8010874:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8010876:	2300      	movs	r3, #0
 8010878:	61bb      	str	r3, [r7, #24]
 801087a:	e00f      	b.n	801089c <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801087c:	79fb      	ldrb	r3, [r7, #7]
 801087e:	031a      	lsls	r2, r3, #12
 8010880:	697b      	ldr	r3, [r7, #20]
 8010882:	4413      	add	r3, r2
 8010884:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010888:	461a      	mov	r2, r3
 801088a:	69fb      	ldr	r3, [r7, #28]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8010890:	69fb      	ldr	r3, [r7, #28]
 8010892:	3304      	adds	r3, #4
 8010894:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8010896:	69bb      	ldr	r3, [r7, #24]
 8010898:	3301      	adds	r3, #1
 801089a:	61bb      	str	r3, [r7, #24]
 801089c:	69ba      	ldr	r2, [r7, #24]
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d3eb      	bcc.n	801087c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80108a4:	2300      	movs	r3, #0
}
 80108a6:	4618      	mov	r0, r3
 80108a8:	3724      	adds	r7, #36	; 0x24
 80108aa:	46bd      	mov	sp, r7
 80108ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b0:	4770      	bx	lr

080108b2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80108b2:	b480      	push	{r7}
 80108b4:	b089      	sub	sp, #36	; 0x24
 80108b6:	af00      	add	r7, sp, #0
 80108b8:	60f8      	str	r0, [r7, #12]
 80108ba:	60b9      	str	r1, [r7, #8]
 80108bc:	4613      	mov	r3, r2
 80108be:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80108c0:	68fb      	ldr	r3, [r7, #12]
 80108c2:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80108c4:	68bb      	ldr	r3, [r7, #8]
 80108c6:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80108c8:	88fb      	ldrh	r3, [r7, #6]
 80108ca:	3303      	adds	r3, #3
 80108cc:	089b      	lsrs	r3, r3, #2
 80108ce:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80108d0:	2300      	movs	r3, #0
 80108d2:	61bb      	str	r3, [r7, #24]
 80108d4:	e00b      	b.n	80108ee <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80108d6:	697b      	ldr	r3, [r7, #20]
 80108d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80108dc:	681a      	ldr	r2, [r3, #0]
 80108de:	69fb      	ldr	r3, [r7, #28]
 80108e0:	601a      	str	r2, [r3, #0]
    pDest++;
 80108e2:	69fb      	ldr	r3, [r7, #28]
 80108e4:	3304      	adds	r3, #4
 80108e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80108e8:	69bb      	ldr	r3, [r7, #24]
 80108ea:	3301      	adds	r3, #1
 80108ec:	61bb      	str	r3, [r7, #24]
 80108ee:	69ba      	ldr	r2, [r7, #24]
 80108f0:	693b      	ldr	r3, [r7, #16]
 80108f2:	429a      	cmp	r2, r3
 80108f4:	d3ef      	bcc.n	80108d6 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80108f6:	69fb      	ldr	r3, [r7, #28]
}
 80108f8:	4618      	mov	r0, r3
 80108fa:	3724      	adds	r7, #36	; 0x24
 80108fc:	46bd      	mov	sp, r7
 80108fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010902:	4770      	bx	lr

08010904 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010904:	b480      	push	{r7}
 8010906:	b085      	sub	sp, #20
 8010908:	af00      	add	r7, sp, #0
 801090a:	6078      	str	r0, [r7, #4]
 801090c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010912:	683b      	ldr	r3, [r7, #0]
 8010914:	781b      	ldrb	r3, [r3, #0]
 8010916:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010918:	683b      	ldr	r3, [r7, #0]
 801091a:	785b      	ldrb	r3, [r3, #1]
 801091c:	2b01      	cmp	r3, #1
 801091e:	d12c      	bne.n	801097a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8010920:	68bb      	ldr	r3, [r7, #8]
 8010922:	015a      	lsls	r2, r3, #5
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	4413      	add	r3, r2
 8010928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	db12      	blt.n	8010958 <USB_EPSetStall+0x54>
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d00f      	beq.n	8010958 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8010938:	68bb      	ldr	r3, [r7, #8]
 801093a:	015a      	lsls	r2, r3, #5
 801093c:	68fb      	ldr	r3, [r7, #12]
 801093e:	4413      	add	r3, r2
 8010940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	68ba      	ldr	r2, [r7, #8]
 8010948:	0151      	lsls	r1, r2, #5
 801094a:	68fa      	ldr	r2, [r7, #12]
 801094c:	440a      	add	r2, r1
 801094e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010952:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010956:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	015a      	lsls	r2, r3, #5
 801095c:	68fb      	ldr	r3, [r7, #12]
 801095e:	4413      	add	r3, r2
 8010960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	68ba      	ldr	r2, [r7, #8]
 8010968:	0151      	lsls	r1, r2, #5
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	440a      	add	r2, r1
 801096e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010976:	6013      	str	r3, [r2, #0]
 8010978:	e02b      	b.n	80109d2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	015a      	lsls	r2, r3, #5
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	4413      	add	r3, r2
 8010982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	2b00      	cmp	r3, #0
 801098a:	db12      	blt.n	80109b2 <USB_EPSetStall+0xae>
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	2b00      	cmp	r3, #0
 8010990:	d00f      	beq.n	80109b2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010992:	68bb      	ldr	r3, [r7, #8]
 8010994:	015a      	lsls	r2, r3, #5
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	4413      	add	r3, r2
 801099a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801099e:	681b      	ldr	r3, [r3, #0]
 80109a0:	68ba      	ldr	r2, [r7, #8]
 80109a2:	0151      	lsls	r1, r2, #5
 80109a4:	68fa      	ldr	r2, [r7, #12]
 80109a6:	440a      	add	r2, r1
 80109a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80109b0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80109b2:	68bb      	ldr	r3, [r7, #8]
 80109b4:	015a      	lsls	r2, r3, #5
 80109b6:	68fb      	ldr	r3, [r7, #12]
 80109b8:	4413      	add	r3, r2
 80109ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	68ba      	ldr	r2, [r7, #8]
 80109c2:	0151      	lsls	r1, r2, #5
 80109c4:	68fa      	ldr	r2, [r7, #12]
 80109c6:	440a      	add	r2, r1
 80109c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80109cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80109d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80109d2:	2300      	movs	r3, #0
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3714      	adds	r7, #20
 80109d8:	46bd      	mov	sp, r7
 80109da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109de:	4770      	bx	lr

080109e0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	781b      	ldrb	r3, [r3, #0]
 80109f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	785b      	ldrb	r3, [r3, #1]
 80109f8:	2b01      	cmp	r3, #1
 80109fa:	d128      	bne.n	8010a4e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	015a      	lsls	r2, r3, #5
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	4413      	add	r3, r2
 8010a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	68ba      	ldr	r2, [r7, #8]
 8010a0c:	0151      	lsls	r1, r2, #5
 8010a0e:	68fa      	ldr	r2, [r7, #12]
 8010a10:	440a      	add	r2, r1
 8010a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a16:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010a1a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010a1c:	683b      	ldr	r3, [r7, #0]
 8010a1e:	78db      	ldrb	r3, [r3, #3]
 8010a20:	2b03      	cmp	r3, #3
 8010a22:	d003      	beq.n	8010a2c <USB_EPClearStall+0x4c>
 8010a24:	683b      	ldr	r3, [r7, #0]
 8010a26:	78db      	ldrb	r3, [r3, #3]
 8010a28:	2b02      	cmp	r3, #2
 8010a2a:	d138      	bne.n	8010a9e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010a2c:	68bb      	ldr	r3, [r7, #8]
 8010a2e:	015a      	lsls	r2, r3, #5
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	4413      	add	r3, r2
 8010a34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	68ba      	ldr	r2, [r7, #8]
 8010a3c:	0151      	lsls	r1, r2, #5
 8010a3e:	68fa      	ldr	r2, [r7, #12]
 8010a40:	440a      	add	r2, r1
 8010a42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a4a:	6013      	str	r3, [r2, #0]
 8010a4c:	e027      	b.n	8010a9e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8010a4e:	68bb      	ldr	r3, [r7, #8]
 8010a50:	015a      	lsls	r2, r3, #5
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	4413      	add	r3, r2
 8010a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	68ba      	ldr	r2, [r7, #8]
 8010a5e:	0151      	lsls	r1, r2, #5
 8010a60:	68fa      	ldr	r2, [r7, #12]
 8010a62:	440a      	add	r2, r1
 8010a64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a68:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8010a6c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	78db      	ldrb	r3, [r3, #3]
 8010a72:	2b03      	cmp	r3, #3
 8010a74:	d003      	beq.n	8010a7e <USB_EPClearStall+0x9e>
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	78db      	ldrb	r3, [r3, #3]
 8010a7a:	2b02      	cmp	r3, #2
 8010a7c:	d10f      	bne.n	8010a9e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8010a7e:	68bb      	ldr	r3, [r7, #8]
 8010a80:	015a      	lsls	r2, r3, #5
 8010a82:	68fb      	ldr	r3, [r7, #12]
 8010a84:	4413      	add	r3, r2
 8010a86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	68ba      	ldr	r2, [r7, #8]
 8010a8e:	0151      	lsls	r1, r2, #5
 8010a90:	68fa      	ldr	r2, [r7, #12]
 8010a92:	440a      	add	r2, r1
 8010a94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010a9c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8010a9e:	2300      	movs	r3, #0
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	3714      	adds	r7, #20
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aaa:	4770      	bx	lr

08010aac <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8010aac:	b480      	push	{r7}
 8010aae:	b085      	sub	sp, #20
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	6078      	str	r0, [r7, #4]
 8010ab4:	460b      	mov	r3, r1
 8010ab6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	68fa      	ldr	r2, [r7, #12]
 8010ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010aca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8010ace:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010ad0:	68fb      	ldr	r3, [r7, #12]
 8010ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ad6:	681a      	ldr	r2, [r3, #0]
 8010ad8:	78fb      	ldrb	r3, [r7, #3]
 8010ada:	011b      	lsls	r3, r3, #4
 8010adc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010ae0:	68f9      	ldr	r1, [r7, #12]
 8010ae2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010ae6:	4313      	orrs	r3, r2
 8010ae8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8010aea:	2300      	movs	r3, #0
}
 8010aec:	4618      	mov	r0, r3
 8010aee:	3714      	adds	r7, #20
 8010af0:	46bd      	mov	sp, r7
 8010af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010af6:	4770      	bx	lr

08010af8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b084      	sub	sp, #16
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b0a:	685b      	ldr	r3, [r3, #4]
 8010b0c:	68fa      	ldr	r2, [r7, #12]
 8010b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b12:	f023 0302 	bic.w	r3, r3, #2
 8010b16:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010b18:	2003      	movs	r0, #3
 8010b1a:	f7f6 fd31 	bl	8007580 <HAL_Delay>

  return HAL_OK;
 8010b1e:	2300      	movs	r3, #0
}
 8010b20:	4618      	mov	r0, r3
 8010b22:	3710      	adds	r7, #16
 8010b24:	46bd      	mov	sp, r7
 8010b26:	bd80      	pop	{r7, pc}

08010b28 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b084      	sub	sp, #16
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b3a:	685b      	ldr	r3, [r3, #4]
 8010b3c:	68fa      	ldr	r2, [r7, #12]
 8010b3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010b42:	f043 0302 	orr.w	r3, r3, #2
 8010b46:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8010b48:	2003      	movs	r0, #3
 8010b4a:	f7f6 fd19 	bl	8007580 <HAL_Delay>

  return HAL_OK;
 8010b4e:	2300      	movs	r3, #0
}
 8010b50:	4618      	mov	r0, r3
 8010b52:	3710      	adds	r7, #16
 8010b54:	46bd      	mov	sp, r7
 8010b56:	bd80      	pop	{r7, pc}

08010b58 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8010b58:	b480      	push	{r7}
 8010b5a:	b085      	sub	sp, #20
 8010b5c:	af00      	add	r7, sp, #0
 8010b5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	695b      	ldr	r3, [r3, #20]
 8010b64:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	699b      	ldr	r3, [r3, #24]
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	4013      	ands	r3, r2
 8010b6e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010b70:	68fb      	ldr	r3, [r7, #12]
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr

08010b7e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b7e:	b480      	push	{r7}
 8010b80:	b085      	sub	sp, #20
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b90:	699b      	ldr	r3, [r3, #24]
 8010b92:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010b9a:	69db      	ldr	r3, [r3, #28]
 8010b9c:	68ba      	ldr	r2, [r7, #8]
 8010b9e:	4013      	ands	r3, r2
 8010ba0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	0c1b      	lsrs	r3, r3, #16
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3714      	adds	r7, #20
 8010baa:	46bd      	mov	sp, r7
 8010bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bb0:	4770      	bx	lr

08010bb2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010bb2:	b480      	push	{r7}
 8010bb4:	b085      	sub	sp, #20
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bc4:	699b      	ldr	r3, [r3, #24]
 8010bc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010bc8:	68fb      	ldr	r3, [r7, #12]
 8010bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010bce:	69db      	ldr	r3, [r3, #28]
 8010bd0:	68ba      	ldr	r2, [r7, #8]
 8010bd2:	4013      	ands	r3, r2
 8010bd4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8010bd6:	68bb      	ldr	r3, [r7, #8]
 8010bd8:	b29b      	uxth	r3, r3
}
 8010bda:	4618      	mov	r0, r3
 8010bdc:	3714      	adds	r7, #20
 8010bde:	46bd      	mov	sp, r7
 8010be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010be4:	4770      	bx	lr

08010be6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010be6:	b480      	push	{r7}
 8010be8:	b085      	sub	sp, #20
 8010bea:	af00      	add	r7, sp, #0
 8010bec:	6078      	str	r0, [r7, #4]
 8010bee:	460b      	mov	r3, r1
 8010bf0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8010bf6:	78fb      	ldrb	r3, [r7, #3]
 8010bf8:	015a      	lsls	r2, r3, #5
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	4413      	add	r3, r2
 8010bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010c02:	689b      	ldr	r3, [r3, #8]
 8010c04:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c0c:	695b      	ldr	r3, [r3, #20]
 8010c0e:	68ba      	ldr	r2, [r7, #8]
 8010c10:	4013      	ands	r3, r2
 8010c12:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010c14:	68bb      	ldr	r3, [r7, #8]
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3714      	adds	r7, #20
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c20:	4770      	bx	lr

08010c22 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8010c22:	b480      	push	{r7}
 8010c24:	b087      	sub	sp, #28
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	460b      	mov	r3, r1
 8010c2c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010c32:	697b      	ldr	r3, [r7, #20]
 8010c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c38:	691b      	ldr	r3, [r3, #16]
 8010c3a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010c3c:	697b      	ldr	r3, [r7, #20]
 8010c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010c44:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8010c46:	78fb      	ldrb	r3, [r7, #3]
 8010c48:	f003 030f 	and.w	r3, r3, #15
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8010c52:	01db      	lsls	r3, r3, #7
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	693a      	ldr	r2, [r7, #16]
 8010c58:	4313      	orrs	r3, r2
 8010c5a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010c5c:	78fb      	ldrb	r3, [r7, #3]
 8010c5e:	015a      	lsls	r2, r3, #5
 8010c60:	697b      	ldr	r3, [r7, #20]
 8010c62:	4413      	add	r3, r2
 8010c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010c68:	689b      	ldr	r3, [r3, #8]
 8010c6a:	693a      	ldr	r2, [r7, #16]
 8010c6c:	4013      	ands	r3, r2
 8010c6e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010c70:	68bb      	ldr	r3, [r7, #8]
}
 8010c72:	4618      	mov	r0, r3
 8010c74:	371c      	adds	r7, #28
 8010c76:	46bd      	mov	sp, r7
 8010c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7c:	4770      	bx	lr

08010c7e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010c7e:	b480      	push	{r7}
 8010c80:	b083      	sub	sp, #12
 8010c82:	af00      	add	r7, sp, #0
 8010c84:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	695b      	ldr	r3, [r3, #20]
 8010c8a:	f003 0301 	and.w	r3, r3, #1
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	370c      	adds	r7, #12
 8010c92:	46bd      	mov	sp, r7
 8010c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c98:	4770      	bx	lr
	...

08010c9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010c9c:	b480      	push	{r7}
 8010c9e:	b085      	sub	sp, #20
 8010ca0:	af00      	add	r7, sp, #0
 8010ca2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8010ca8:	68fb      	ldr	r3, [r7, #12]
 8010caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	68fb      	ldr	r3, [r7, #12]
 8010cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	4b09      	ldr	r3, [pc, #36]	; (8010ce0 <USB_ActivateSetup+0x44>)
 8010cba:	4013      	ands	r3, r2
 8010cbc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010cbe:	68fb      	ldr	r3, [r7, #12]
 8010cc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cc4:	685b      	ldr	r3, [r3, #4]
 8010cc6:	68fa      	ldr	r2, [r7, #12]
 8010cc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010cd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010cd2:	2300      	movs	r3, #0
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	3714      	adds	r7, #20
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr
 8010ce0:	fffff800 	.word	0xfffff800

08010ce4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8010ce4:	b480      	push	{r7}
 8010ce6:	b087      	sub	sp, #28
 8010ce8:	af00      	add	r7, sp, #0
 8010cea:	60f8      	str	r0, [r7, #12]
 8010cec:	460b      	mov	r3, r1
 8010cee:	607a      	str	r2, [r7, #4]
 8010cf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	333c      	adds	r3, #60	; 0x3c
 8010cfa:	3304      	adds	r3, #4
 8010cfc:	681b      	ldr	r3, [r3, #0]
 8010cfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	4a26      	ldr	r2, [pc, #152]	; (8010d9c <USB_EP0_OutStart+0xb8>)
 8010d04:	4293      	cmp	r3, r2
 8010d06:	d90a      	bls.n	8010d1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010d08:	697b      	ldr	r3, [r7, #20]
 8010d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d0e:	681b      	ldr	r3, [r3, #0]
 8010d10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d18:	d101      	bne.n	8010d1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	e037      	b.n	8010d8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8010d1e:	697b      	ldr	r3, [r7, #20]
 8010d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d24:	461a      	mov	r2, r3
 8010d26:	2300      	movs	r3, #0
 8010d28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8010d2a:	697b      	ldr	r3, [r7, #20]
 8010d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d30:	691b      	ldr	r3, [r3, #16]
 8010d32:	697a      	ldr	r2, [r7, #20]
 8010d34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010d3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d44:	691b      	ldr	r3, [r3, #16]
 8010d46:	697a      	ldr	r2, [r7, #20]
 8010d48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d4c:	f043 0318 	orr.w	r3, r3, #24
 8010d50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010d52:	697b      	ldr	r3, [r7, #20]
 8010d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	697a      	ldr	r2, [r7, #20]
 8010d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010d64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8010d66:	7afb      	ldrb	r3, [r7, #11]
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d10f      	bne.n	8010d8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010d6c:	697b      	ldr	r3, [r7, #20]
 8010d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d72:	461a      	mov	r2, r3
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8010d78:	697b      	ldr	r3, [r7, #20]
 8010d7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	697a      	ldr	r2, [r7, #20]
 8010d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010d86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8010d8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010d8c:	2300      	movs	r3, #0
}
 8010d8e:	4618      	mov	r0, r3
 8010d90:	371c      	adds	r7, #28
 8010d92:	46bd      	mov	sp, r7
 8010d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d98:	4770      	bx	lr
 8010d9a:	bf00      	nop
 8010d9c:	4f54300a 	.word	0x4f54300a

08010da0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010da0:	b480      	push	{r7}
 8010da2:	b085      	sub	sp, #20
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8010da8:	2300      	movs	r3, #0
 8010daa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	3301      	adds	r3, #1
 8010db0:	60fb      	str	r3, [r7, #12]
 8010db2:	68fb      	ldr	r3, [r7, #12]
 8010db4:	4a13      	ldr	r2, [pc, #76]	; (8010e04 <USB_CoreReset+0x64>)
 8010db6:	4293      	cmp	r3, r2
 8010db8:	d901      	bls.n	8010dbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010dba:	2303      	movs	r3, #3
 8010dbc:	e01b      	b.n	8010df6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	691b      	ldr	r3, [r3, #16]
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	daf2      	bge.n	8010dac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	691b      	ldr	r3, [r3, #16]
 8010dce:	f043 0201 	orr.w	r2, r3, #1
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	60fb      	str	r3, [r7, #12]
 8010ddc:	68fb      	ldr	r3, [r7, #12]
 8010dde:	4a09      	ldr	r2, [pc, #36]	; (8010e04 <USB_CoreReset+0x64>)
 8010de0:	4293      	cmp	r3, r2
 8010de2:	d901      	bls.n	8010de8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010de4:	2303      	movs	r3, #3
 8010de6:	e006      	b.n	8010df6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	691b      	ldr	r3, [r3, #16]
 8010dec:	f003 0301 	and.w	r3, r3, #1
 8010df0:	2b01      	cmp	r3, #1
 8010df2:	d0f0      	beq.n	8010dd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8010df4:	2300      	movs	r3, #0
}
 8010df6:	4618      	mov	r0, r3
 8010df8:	3714      	adds	r7, #20
 8010dfa:	46bd      	mov	sp, r7
 8010dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e00:	4770      	bx	lr
 8010e02:	bf00      	nop
 8010e04:	00030d40 	.word	0x00030d40

08010e08 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8010e0c:	4904      	ldr	r1, [pc, #16]	; (8010e20 <MX_FATFS_Init+0x18>)
 8010e0e:	4805      	ldr	r0, [pc, #20]	; (8010e24 <MX_FATFS_Init+0x1c>)
 8010e10:	f004 fdaa 	bl	8015968 <FATFS_LinkDriver>
 8010e14:	4603      	mov	r3, r0
 8010e16:	461a      	mov	r2, r3
 8010e18:	4b03      	ldr	r3, [pc, #12]	; (8010e28 <MX_FATFS_Init+0x20>)
 8010e1a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8010e1c:	bf00      	nop
 8010e1e:	bd80      	pop	{r7, pc}
 8010e20:	2001c6ec 	.word	0x2001c6ec
 8010e24:	0801d734 	.word	0x0801d734
 8010e28:	2001c6e8 	.word	0x2001c6e8

08010e2c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8010e2c:	b480      	push	{r7}
 8010e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8010e30:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr

08010e3c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8010e3c:	b580      	push	{r7, lr}
 8010e3e:	b082      	sub	sp, #8
 8010e40:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8010e42:	2300      	movs	r3, #0
 8010e44:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8010e46:	f000 f896 	bl	8010f76 <BSP_SD_IsDetected>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	2b01      	cmp	r3, #1
 8010e4e:	d001      	beq.n	8010e54 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8010e50:	2302      	movs	r3, #2
 8010e52:	e012      	b.n	8010e7a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8010e54:	480b      	ldr	r0, [pc, #44]	; (8010e84 <BSP_SD_Init+0x48>)
 8010e56:	f7fa f943 	bl	800b0e0 <HAL_SD_Init>
 8010e5a:	4603      	mov	r3, r0
 8010e5c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d109      	bne.n	8010e78 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010e64:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010e68:	4806      	ldr	r0, [pc, #24]	; (8010e84 <BSP_SD_Init+0x48>)
 8010e6a:	f7fa fefb 	bl	800bc64 <HAL_SD_ConfigWideBusOperation>
 8010e6e:	4603      	mov	r3, r0
 8010e70:	2b00      	cmp	r3, #0
 8010e72:	d001      	beq.n	8010e78 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8010e74:	2301      	movs	r3, #1
 8010e76:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8010e78:	79fb      	ldrb	r3, [r7, #7]
}
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	3708      	adds	r7, #8
 8010e7e:	46bd      	mov	sp, r7
 8010e80:	bd80      	pop	{r7, pc}
 8010e82:	bf00      	nop
 8010e84:	2000b9f8 	.word	0x2000b9f8

08010e88 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b086      	sub	sp, #24
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	60f8      	str	r0, [r7, #12]
 8010e90:	60b9      	str	r1, [r7, #8]
 8010e92:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010e94:	2300      	movs	r3, #0
 8010e96:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	68ba      	ldr	r2, [r7, #8]
 8010e9c:	68f9      	ldr	r1, [r7, #12]
 8010e9e:	4806      	ldr	r0, [pc, #24]	; (8010eb8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8010ea0:	f7fa f9b6 	bl	800b210 <HAL_SD_ReadBlocks_DMA>
 8010ea4:	4603      	mov	r3, r0
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d001      	beq.n	8010eae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8010eae:	7dfb      	ldrb	r3, [r7, #23]
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3718      	adds	r7, #24
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}
 8010eb8:	2000b9f8 	.word	0x2000b9f8

08010ebc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b086      	sub	sp, #24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	68ba      	ldr	r2, [r7, #8]
 8010ed0:	68f9      	ldr	r1, [r7, #12]
 8010ed2:	4806      	ldr	r0, [pc, #24]	; (8010eec <BSP_SD_WriteBlocks_DMA+0x30>)
 8010ed4:	f7fa fa88 	bl	800b3e8 <HAL_SD_WriteBlocks_DMA>
 8010ed8:	4603      	mov	r3, r0
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d001      	beq.n	8010ee2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8010ede:	2301      	movs	r3, #1
 8010ee0:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 8010ee2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	3718      	adds	r7, #24
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	2000b9f8 	.word	0x2000b9f8

08010ef0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8010ef0:	b580      	push	{r7, lr}
 8010ef2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010ef4:	4805      	ldr	r0, [pc, #20]	; (8010f0c <BSP_SD_GetCardState+0x1c>)
 8010ef6:	f7fa ff31 	bl	800bd5c <HAL_SD_GetCardState>
 8010efa:	4603      	mov	r3, r0
 8010efc:	2b04      	cmp	r3, #4
 8010efe:	bf14      	ite	ne
 8010f00:	2301      	movne	r3, #1
 8010f02:	2300      	moveq	r3, #0
 8010f04:	b2db      	uxtb	r3, r3
}
 8010f06:	4618      	mov	r0, r3
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	2000b9f8 	.word	0x2000b9f8

08010f10 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8010f18:	6879      	ldr	r1, [r7, #4]
 8010f1a:	4803      	ldr	r0, [pc, #12]	; (8010f28 <BSP_SD_GetCardInfo+0x18>)
 8010f1c:	f7fa fe76 	bl	800bc0c <HAL_SD_GetCardInfo>
}
 8010f20:	bf00      	nop
 8010f22:	3708      	adds	r7, #8
 8010f24:	46bd      	mov	sp, r7
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	2000b9f8 	.word	0x2000b9f8

08010f2c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8010f2c:	b580      	push	{r7, lr}
 8010f2e:	b082      	sub	sp, #8
 8010f30:	af00      	add	r7, sp, #0
 8010f32:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8010f34:	f000 f818 	bl	8010f68 <BSP_SD_AbortCallback>
}
 8010f38:	bf00      	nop
 8010f3a:	3708      	adds	r7, #8
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}

08010f40 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010f40:	b580      	push	{r7, lr}
 8010f42:	b082      	sub	sp, #8
 8010f44:	af00      	add	r7, sp, #0
 8010f46:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8010f48:	f000 f9b4 	bl	80112b4 <BSP_SD_WriteCpltCallback>
}
 8010f4c:	bf00      	nop
 8010f4e:	3708      	adds	r7, #8
 8010f50:	46bd      	mov	sp, r7
 8010f52:	bd80      	pop	{r7, pc}

08010f54 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b082      	sub	sp, #8
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8010f5c:	f000 f9bc 	bl	80112d8 <BSP_SD_ReadCpltCallback>
}
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}

08010f68 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	af00      	add	r7, sp, #0

}
 8010f6c:	bf00      	nop
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr

08010f76 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8010f76:	b580      	push	{r7, lr}
 8010f78:	b082      	sub	sp, #8
 8010f7a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8010f80:	f000 f80c 	bl	8010f9c <BSP_PlatformIsDetected>
 8010f84:	4603      	mov	r3, r0
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d101      	bne.n	8010f8e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8010f8e:	79fb      	ldrb	r3, [r7, #7]
 8010f90:	b2db      	uxtb	r3, r3
}
 8010f92:	4618      	mov	r0, r3
 8010f94:	3708      	adds	r7, #8
 8010f96:	46bd      	mov	sp, r7
 8010f98:	bd80      	pop	{r7, pc}
	...

08010f9c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8010f9c:	b580      	push	{r7, lr}
 8010f9e:	b082      	sub	sp, #8
 8010fa0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8010fa6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8010faa:	4806      	ldr	r0, [pc, #24]	; (8010fc4 <BSP_PlatformIsDetected+0x28>)
 8010fac:	f7f7 fe0a 	bl	8008bc4 <HAL_GPIO_ReadPin>
 8010fb0:	4603      	mov	r3, r0
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d001      	beq.n	8010fba <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8010fba:	79fb      	ldrb	r3, [r7, #7]
}  
 8010fbc:	4618      	mov	r0, r3
 8010fbe:	3708      	adds	r7, #8
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	40020800 	.word	0x40020800

08010fc8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripherial is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8010fd0:	f004 fdb4 	bl	8015b3c <osKernelGetTickCount>
 8010fd4:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8010fd6:	e006      	b.n	8010fe6 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8010fd8:	f7ff ff8a 	bl	8010ef0 <BSP_SD_GetCardState>
 8010fdc:	4603      	mov	r3, r0
 8010fde:	2b00      	cmp	r3, #0
 8010fe0:	d101      	bne.n	8010fe6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	e009      	b.n	8010ffa <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8010fe6:	f004 fda9 	bl	8015b3c <osKernelGetTickCount>
 8010fea:	4602      	mov	r2, r0
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	1ad3      	subs	r3, r2, r3
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	429a      	cmp	r2, r3
 8010ff4:	d8f0      	bhi.n	8010fd8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8010ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010ffa:	4618      	mov	r0, r3
 8010ffc:	3710      	adds	r7, #16
 8010ffe:	46bd      	mov	sp, r7
 8011000:	bd80      	pop	{r7, pc}
	...

08011004 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8011004:	b580      	push	{r7, lr}
 8011006:	b082      	sub	sp, #8
 8011008:	af00      	add	r7, sp, #0
 801100a:	4603      	mov	r3, r0
 801100c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801100e:	4b0b      	ldr	r3, [pc, #44]	; (801103c <SD_CheckStatus+0x38>)
 8011010:	2201      	movs	r2, #1
 8011012:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011014:	f7ff ff6c 	bl	8010ef0 <BSP_SD_GetCardState>
 8011018:	4603      	mov	r3, r0
 801101a:	2b00      	cmp	r3, #0
 801101c:	d107      	bne.n	801102e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801101e:	4b07      	ldr	r3, [pc, #28]	; (801103c <SD_CheckStatus+0x38>)
 8011020:	781b      	ldrb	r3, [r3, #0]
 8011022:	b2db      	uxtb	r3, r3
 8011024:	f023 0301 	bic.w	r3, r3, #1
 8011028:	b2da      	uxtb	r2, r3
 801102a:	4b04      	ldr	r3, [pc, #16]	; (801103c <SD_CheckStatus+0x38>)
 801102c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801102e:	4b03      	ldr	r3, [pc, #12]	; (801103c <SD_CheckStatus+0x38>)
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	b2db      	uxtb	r3, r3
}
 8011034:	4618      	mov	r0, r3
 8011036:	3708      	adds	r7, #8
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	20000009 	.word	0x20000009

08011040 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b082      	sub	sp, #8
 8011044:	af00      	add	r7, sp, #0
 8011046:	4603      	mov	r3, r0
 8011048:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 801104a:	4b1c      	ldr	r3, [pc, #112]	; (80110bc <SD_initialize+0x7c>)
 801104c:	2201      	movs	r2, #1
 801104e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8011050:	f004 fd1c 	bl	8015a8c <osKernelGetState>
 8011054:	4603      	mov	r3, r0
 8011056:	2b02      	cmp	r3, #2
 8011058:	d129      	bne.n	80110ae <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 801105a:	f7ff feef 	bl	8010e3c <BSP_SD_Init>
 801105e:	4603      	mov	r3, r0
 8011060:	2b00      	cmp	r3, #0
 8011062:	d107      	bne.n	8011074 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8011064:	79fb      	ldrb	r3, [r7, #7]
 8011066:	4618      	mov	r0, r3
 8011068:	f7ff ffcc 	bl	8011004 <SD_CheckStatus>
 801106c:	4603      	mov	r3, r0
 801106e:	461a      	mov	r2, r3
 8011070:	4b12      	ldr	r3, [pc, #72]	; (80110bc <SD_initialize+0x7c>)
 8011072:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8011074:	4b11      	ldr	r3, [pc, #68]	; (80110bc <SD_initialize+0x7c>)
 8011076:	781b      	ldrb	r3, [r3, #0]
 8011078:	b2db      	uxtb	r3, r3
 801107a:	2b01      	cmp	r3, #1
 801107c:	d017      	beq.n	80110ae <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 801107e:	4b10      	ldr	r3, [pc, #64]	; (80110c0 <SD_initialize+0x80>)
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	2b00      	cmp	r3, #0
 8011084:	d107      	bne.n	8011096 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8011086:	2200      	movs	r2, #0
 8011088:	2102      	movs	r1, #2
 801108a:	200a      	movs	r0, #10
 801108c:	f005 f976 	bl	801637c <osMessageQueueNew>
 8011090:	4602      	mov	r2, r0
 8011092:	4b0b      	ldr	r3, [pc, #44]	; (80110c0 <SD_initialize+0x80>)
 8011094:	601a      	str	r2, [r3, #0]
#endif
      }

      if (SDQueueID == NULL)
 8011096:	4b0a      	ldr	r3, [pc, #40]	; (80110c0 <SD_initialize+0x80>)
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d107      	bne.n	80110ae <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 801109e:	4b07      	ldr	r3, [pc, #28]	; (80110bc <SD_initialize+0x7c>)
 80110a0:	781b      	ldrb	r3, [r3, #0]
 80110a2:	b2db      	uxtb	r3, r3
 80110a4:	f043 0301 	orr.w	r3, r3, #1
 80110a8:	b2da      	uxtb	r2, r3
 80110aa:	4b04      	ldr	r3, [pc, #16]	; (80110bc <SD_initialize+0x7c>)
 80110ac:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 80110ae:	4b03      	ldr	r3, [pc, #12]	; (80110bc <SD_initialize+0x7c>)
 80110b0:	781b      	ldrb	r3, [r3, #0]
 80110b2:	b2db      	uxtb	r3, r3
}
 80110b4:	4618      	mov	r0, r3
 80110b6:	3708      	adds	r7, #8
 80110b8:	46bd      	mov	sp, r7
 80110ba:	bd80      	pop	{r7, pc}
 80110bc:	20000009 	.word	0x20000009
 80110c0:	20000338 	.word	0x20000338

080110c4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	4603      	mov	r3, r0
 80110cc:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80110ce:	79fb      	ldrb	r3, [r7, #7]
 80110d0:	4618      	mov	r0, r3
 80110d2:	f7ff ff97 	bl	8011004 <SD_CheckStatus>
 80110d6:	4603      	mov	r3, r0
}
 80110d8:	4618      	mov	r0, r3
 80110da:	3708      	adds	r7, #8
 80110dc:	46bd      	mov	sp, r7
 80110de:	bd80      	pop	{r7, pc}

080110e0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b088      	sub	sp, #32
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	60b9      	str	r1, [r7, #8]
 80110e8:	607a      	str	r2, [r7, #4]
 80110ea:	603b      	str	r3, [r7, #0]
 80110ec:	4603      	mov	r3, r0
 80110ee:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80110f0:	2301      	movs	r3, #1
 80110f2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80110f4:	f247 5030 	movw	r0, #30000	; 0x7530
 80110f8:	f7ff ff66 	bl	8010fc8 <SD_CheckStatusWithTimeout>
 80110fc:	4603      	mov	r3, r0
 80110fe:	2b00      	cmp	r3, #0
 8011100:	da01      	bge.n	8011106 <SD_read+0x26>
  {
    return res;
 8011102:	7ffb      	ldrb	r3, [r7, #31]
 8011104:	e02f      	b.n	8011166 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8011106:	683a      	ldr	r2, [r7, #0]
 8011108:	6879      	ldr	r1, [r7, #4]
 801110a:	68b8      	ldr	r0, [r7, #8]
 801110c:	f7ff febc 	bl	8010e88 <BSP_SD_ReadBlocks_DMA>
 8011110:	4603      	mov	r3, r0
 8011112:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8011114:	7fbb      	ldrb	r3, [r7, #30]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d124      	bne.n	8011164 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 801111a:	4b15      	ldr	r3, [pc, #84]	; (8011170 <SD_read+0x90>)
 801111c:	6818      	ldr	r0, [r3, #0]
 801111e:	f107 0112 	add.w	r1, r7, #18
 8011122:	f247 5330 	movw	r3, #30000	; 0x7530
 8011126:	2200      	movs	r2, #0
 8011128:	f005 fa22 	bl	8016570 <osMessageQueueGet>
 801112c:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 801112e:	69bb      	ldr	r3, [r7, #24]
 8011130:	2b00      	cmp	r3, #0
 8011132:	d117      	bne.n	8011164 <SD_read+0x84>
 8011134:	8a7b      	ldrh	r3, [r7, #18]
 8011136:	2b01      	cmp	r3, #1
 8011138:	d114      	bne.n	8011164 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 801113a:	f004 fcff 	bl	8015b3c <osKernelGetTickCount>
 801113e:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8011140:	e007      	b.n	8011152 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8011142:	f7ff fed5 	bl	8010ef0 <BSP_SD_GetCardState>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d102      	bne.n	8011152 <SD_read+0x72>
              {
                res = RES_OK;
 801114c:	2300      	movs	r3, #0
 801114e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8011150:	e008      	b.n	8011164 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8011152:	f004 fcf3 	bl	8015b3c <osKernelGetTickCount>
 8011156:	4602      	mov	r2, r0
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	1ad3      	subs	r3, r2, r3
 801115c:	f247 522f 	movw	r2, #29999	; 0x752f
 8011160:	4293      	cmp	r3, r2
 8011162:	d9ee      	bls.n	8011142 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8011164:	7ffb      	ldrb	r3, [r7, #31]
}
 8011166:	4618      	mov	r0, r3
 8011168:	3720      	adds	r7, #32
 801116a:	46bd      	mov	sp, r7
 801116c:	bd80      	pop	{r7, pc}
 801116e:	bf00      	nop
 8011170:	20000338 	.word	0x20000338

08011174 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b088      	sub	sp, #32
 8011178:	af00      	add	r7, sp, #0
 801117a:	60b9      	str	r1, [r7, #8]
 801117c:	607a      	str	r2, [r7, #4]
 801117e:	603b      	str	r3, [r7, #0]
 8011180:	4603      	mov	r3, r0
 8011182:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8011184:	2301      	movs	r3, #1
 8011186:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8011188:	f247 5030 	movw	r0, #30000	; 0x7530
 801118c:	f7ff ff1c 	bl	8010fc8 <SD_CheckStatusWithTimeout>
 8011190:	4603      	mov	r3, r0
 8011192:	2b00      	cmp	r3, #0
 8011194:	da01      	bge.n	801119a <SD_write+0x26>
  {
    return res;
 8011196:	7ffb      	ldrb	r3, [r7, #31]
 8011198:	e02d      	b.n	80111f6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 801119a:	683a      	ldr	r2, [r7, #0]
 801119c:	6879      	ldr	r1, [r7, #4]
 801119e:	68b8      	ldr	r0, [r7, #8]
 80111a0:	f7ff fe8c 	bl	8010ebc <BSP_SD_WriteBlocks_DMA>
 80111a4:	4603      	mov	r3, r0
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d124      	bne.n	80111f4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 80111aa:	4b15      	ldr	r3, [pc, #84]	; (8011200 <SD_write+0x8c>)
 80111ac:	6818      	ldr	r0, [r3, #0]
 80111ae:	f107 0112 	add.w	r1, r7, #18
 80111b2:	f247 5330 	movw	r3, #30000	; 0x7530
 80111b6:	2200      	movs	r2, #0
 80111b8:	f005 f9da 	bl	8016570 <osMessageQueueGet>
 80111bc:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d117      	bne.n	80111f4 <SD_write+0x80>
 80111c4:	8a7b      	ldrh	r3, [r7, #18]
 80111c6:	2b02      	cmp	r3, #2
 80111c8:	d114      	bne.n	80111f4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 80111ca:	f004 fcb7 	bl	8015b3c <osKernelGetTickCount>
 80111ce:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80111d0:	e007      	b.n	80111e2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80111d2:	f7ff fe8d 	bl	8010ef0 <BSP_SD_GetCardState>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d102      	bne.n	80111e2 <SD_write+0x6e>
          {
            res = RES_OK;
 80111dc:	2300      	movs	r3, #0
 80111de:	77fb      	strb	r3, [r7, #31]
            break;
 80111e0:	e008      	b.n	80111f4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 80111e2:	f004 fcab 	bl	8015b3c <osKernelGetTickCount>
 80111e6:	4602      	mov	r2, r0
 80111e8:	697b      	ldr	r3, [r7, #20]
 80111ea:	1ad3      	subs	r3, r2, r3
 80111ec:	f247 522f 	movw	r2, #29999	; 0x752f
 80111f0:	4293      	cmp	r3, r2
 80111f2:	d9ee      	bls.n	80111d2 <SD_write+0x5e>
    }

  }
#endif

  return res;
 80111f4:	7ffb      	ldrb	r3, [r7, #31]
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3720      	adds	r7, #32
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
 80111fe:	bf00      	nop
 8011200:	20000338 	.word	0x20000338

08011204 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b08c      	sub	sp, #48	; 0x30
 8011208:	af00      	add	r7, sp, #0
 801120a:	4603      	mov	r3, r0
 801120c:	603a      	str	r2, [r7, #0]
 801120e:	71fb      	strb	r3, [r7, #7]
 8011210:	460b      	mov	r3, r1
 8011212:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8011214:	2301      	movs	r3, #1
 8011216:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801121a:	4b25      	ldr	r3, [pc, #148]	; (80112b0 <SD_ioctl+0xac>)
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	b2db      	uxtb	r3, r3
 8011220:	f003 0301 	and.w	r3, r3, #1
 8011224:	2b00      	cmp	r3, #0
 8011226:	d001      	beq.n	801122c <SD_ioctl+0x28>
 8011228:	2303      	movs	r3, #3
 801122a:	e03c      	b.n	80112a6 <SD_ioctl+0xa2>

  switch (cmd)
 801122c:	79bb      	ldrb	r3, [r7, #6]
 801122e:	2b03      	cmp	r3, #3
 8011230:	d834      	bhi.n	801129c <SD_ioctl+0x98>
 8011232:	a201      	add	r2, pc, #4	; (adr r2, 8011238 <SD_ioctl+0x34>)
 8011234:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011238:	08011249 	.word	0x08011249
 801123c:	08011251 	.word	0x08011251
 8011240:	08011269 	.word	0x08011269
 8011244:	08011283 	.word	0x08011283
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8011248:	2300      	movs	r3, #0
 801124a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801124e:	e028      	b.n	80112a2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8011250:	f107 030c 	add.w	r3, r7, #12
 8011254:	4618      	mov	r0, r3
 8011256:	f7ff fe5b 	bl	8010f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 801125a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801125c:	683b      	ldr	r3, [r7, #0]
 801125e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011260:	2300      	movs	r3, #0
 8011262:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011266:	e01c      	b.n	80112a2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011268:	f107 030c 	add.w	r3, r7, #12
 801126c:	4618      	mov	r0, r3
 801126e:	f7ff fe4f 	bl	8010f10 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8011272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011274:	b29a      	uxth	r2, r3
 8011276:	683b      	ldr	r3, [r7, #0]
 8011278:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 801127a:	2300      	movs	r3, #0
 801127c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8011280:	e00f      	b.n	80112a2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8011282:	f107 030c 	add.w	r3, r7, #12
 8011286:	4618      	mov	r0, r3
 8011288:	f7ff fe42 	bl	8010f10 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 801128c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801128e:	0a5a      	lsrs	r2, r3, #9
 8011290:	683b      	ldr	r3, [r7, #0]
 8011292:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801129a:	e002      	b.n	80112a2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 801129c:	2304      	movs	r3, #4
 801129e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80112a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80112a6:	4618      	mov	r0, r3
 80112a8:	3730      	adds	r7, #48	; 0x30
 80112aa:	46bd      	mov	sp, r7
 80112ac:	bd80      	pop	{r7, pc}
 80112ae:	bf00      	nop
 80112b0:	20000009 	.word	0x20000009

080112b4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b082      	sub	sp, #8
 80112b8:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 80112ba:	2302      	movs	r3, #2
 80112bc:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80112be:	4b05      	ldr	r3, [pc, #20]	; (80112d4 <BSP_SD_WriteCpltCallback+0x20>)
 80112c0:	6818      	ldr	r0, [r3, #0]
 80112c2:	1db9      	adds	r1, r7, #6
 80112c4:	2300      	movs	r3, #0
 80112c6:	2200      	movs	r2, #0
 80112c8:	f005 f8de 	bl	8016488 <osMessageQueuePut>
#endif
}
 80112cc:	bf00      	nop
 80112ce:	3708      	adds	r7, #8
 80112d0:	46bd      	mov	sp, r7
 80112d2:	bd80      	pop	{r7, pc}
 80112d4:	20000338 	.word	0x20000338

080112d8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80112d8:	b580      	push	{r7, lr}
 80112da:	b082      	sub	sp, #8
 80112dc:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 80112de:	2301      	movs	r3, #1
 80112e0:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
 80112e2:	4b05      	ldr	r3, [pc, #20]	; (80112f8 <BSP_SD_ReadCpltCallback+0x20>)
 80112e4:	6818      	ldr	r0, [r3, #0]
 80112e6:	1db9      	adds	r1, r7, #6
 80112e8:	2300      	movs	r3, #0
 80112ea:	2200      	movs	r2, #0
 80112ec:	f005 f8cc 	bl	8016488 <osMessageQueuePut>
#endif
}
 80112f0:	bf00      	nop
 80112f2:	3708      	adds	r7, #8
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	20000338 	.word	0x20000338

080112fc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80112fc:	b580      	push	{r7, lr}
 80112fe:	b084      	sub	sp, #16
 8011300:	af00      	add	r7, sp, #0
 8011302:	6078      	str	r0, [r7, #4]
 8011304:	460b      	mov	r3, r1
 8011306:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011308:	f44f 7007 	mov.w	r0, #540	; 0x21c
 801130c:	f009 f910 	bl	801a530 <malloc>
 8011310:	4603      	mov	r3, r0
 8011312:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011314:	68fb      	ldr	r3, [r7, #12]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d105      	bne.n	8011326 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	2200      	movs	r2, #0
 801131e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8011322:	2302      	movs	r3, #2
 8011324:	e066      	b.n	80113f4 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	68fa      	ldr	r2, [r7, #12]
 801132a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	7c1b      	ldrb	r3, [r3, #16]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d119      	bne.n	801136a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8011336:	f44f 7300 	mov.w	r3, #512	; 0x200
 801133a:	2202      	movs	r2, #2
 801133c:	2181      	movs	r1, #129	; 0x81
 801133e:	6878      	ldr	r0, [r7, #4]
 8011340:	f008 ff29 	bl	801a196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	2201      	movs	r2, #1
 8011348:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801134a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801134e:	2202      	movs	r2, #2
 8011350:	2101      	movs	r1, #1
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f008 ff1f 	bl	801a196 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	2201      	movs	r2, #1
 801135c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	2210      	movs	r2, #16
 8011364:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8011368:	e016      	b.n	8011398 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801136a:	2340      	movs	r3, #64	; 0x40
 801136c:	2202      	movs	r2, #2
 801136e:	2181      	movs	r1, #129	; 0x81
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f008 ff10 	bl	801a196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2201      	movs	r2, #1
 801137a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801137c:	2340      	movs	r3, #64	; 0x40
 801137e:	2202      	movs	r2, #2
 8011380:	2101      	movs	r1, #1
 8011382:	6878      	ldr	r0, [r7, #4]
 8011384:	f008 ff07 	bl	801a196 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2201      	movs	r2, #1
 801138c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	2210      	movs	r2, #16
 8011394:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011398:	2308      	movs	r3, #8
 801139a:	2203      	movs	r2, #3
 801139c:	2182      	movs	r1, #130	; 0x82
 801139e:	6878      	ldr	r0, [r7, #4]
 80113a0:	f008 fef9 	bl	801a196 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2201      	movs	r2, #1
 80113a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	2200      	movs	r2, #0
 80113ba:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	2200      	movs	r2, #0
 80113c2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	7c1b      	ldrb	r3, [r3, #16]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d109      	bne.n	80113e2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80113d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80113d8:	2101      	movs	r1, #1
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f008 ffca 	bl	801a374 <USBD_LL_PrepareReceive>
 80113e0:	e007      	b.n	80113f2 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80113e8:	2340      	movs	r3, #64	; 0x40
 80113ea:	2101      	movs	r1, #1
 80113ec:	6878      	ldr	r0, [r7, #4]
 80113ee:	f008 ffc1 	bl	801a374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80113f2:	2300      	movs	r3, #0
}
 80113f4:	4618      	mov	r0, r3
 80113f6:	3710      	adds	r7, #16
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b084      	sub	sp, #16
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
 8011404:	460b      	mov	r3, r1
 8011406:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8011408:	2300      	movs	r3, #0
 801140a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801140c:	2181      	movs	r1, #129	; 0x81
 801140e:	6878      	ldr	r0, [r7, #4]
 8011410:	f008 fee7 	bl	801a1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	2200      	movs	r2, #0
 8011418:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801141a:	2101      	movs	r1, #1
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f008 fee0 	bl	801a1e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2200      	movs	r2, #0
 8011426:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801142a:	2182      	movs	r1, #130	; 0x82
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f008 fed8 	bl	801a1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2200      	movs	r2, #0
 8011436:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	2200      	movs	r2, #0
 801143e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011448:	2b00      	cmp	r3, #0
 801144a:	d00e      	beq.n	801146a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011452:	685b      	ldr	r3, [r3, #4]
 8011454:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801145c:	4618      	mov	r0, r3
 801145e:	f009 f86f 	bl	801a540 <free>
    pdev->pClassData = NULL;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2200      	movs	r2, #0
 8011466:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 801146a:	7bfb      	ldrb	r3, [r7, #15]
}
 801146c:	4618      	mov	r0, r3
 801146e:	3710      	adds	r7, #16
 8011470:	46bd      	mov	sp, r7
 8011472:	bd80      	pop	{r7, pc}

08011474 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b086      	sub	sp, #24
 8011478:	af00      	add	r7, sp, #0
 801147a:	6078      	str	r0, [r7, #4]
 801147c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011484:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8011486:	2300      	movs	r3, #0
 8011488:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 801148a:	2300      	movs	r3, #0
 801148c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 801148e:	2300      	movs	r3, #0
 8011490:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	781b      	ldrb	r3, [r3, #0]
 8011496:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801149a:	2b00      	cmp	r3, #0
 801149c:	d03a      	beq.n	8011514 <USBD_CDC_Setup+0xa0>
 801149e:	2b20      	cmp	r3, #32
 80114a0:	f040 8097 	bne.w	80115d2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80114a4:	683b      	ldr	r3, [r7, #0]
 80114a6:	88db      	ldrh	r3, [r3, #6]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d029      	beq.n	8011500 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	781b      	ldrb	r3, [r3, #0]
 80114b0:	b25b      	sxtb	r3, r3
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	da11      	bge.n	80114da <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80114bc:	689b      	ldr	r3, [r3, #8]
 80114be:	683a      	ldr	r2, [r7, #0]
 80114c0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80114c2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80114c4:	683a      	ldr	r2, [r7, #0]
 80114c6:	88d2      	ldrh	r2, [r2, #6]
 80114c8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80114ca:	6939      	ldr	r1, [r7, #16]
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	88db      	ldrh	r3, [r3, #6]
 80114d0:	461a      	mov	r2, r3
 80114d2:	6878      	ldr	r0, [r7, #4]
 80114d4:	f001 fac7 	bl	8012a66 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80114d8:	e082      	b.n	80115e0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80114da:	683b      	ldr	r3, [r7, #0]
 80114dc:	785a      	ldrb	r2, [r3, #1]
 80114de:	693b      	ldr	r3, [r7, #16]
 80114e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80114e4:	683b      	ldr	r3, [r7, #0]
 80114e6:	88db      	ldrh	r3, [r3, #6]
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80114f0:	6939      	ldr	r1, [r7, #16]
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	88db      	ldrh	r3, [r3, #6]
 80114f6:	461a      	mov	r2, r3
 80114f8:	6878      	ldr	r0, [r7, #4]
 80114fa:	f001 fae0 	bl	8012abe <USBD_CtlPrepareRx>
    break;
 80114fe:	e06f      	b.n	80115e0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011506:	689b      	ldr	r3, [r3, #8]
 8011508:	683a      	ldr	r2, [r7, #0]
 801150a:	7850      	ldrb	r0, [r2, #1]
 801150c:	2200      	movs	r2, #0
 801150e:	6839      	ldr	r1, [r7, #0]
 8011510:	4798      	blx	r3
    break;
 8011512:	e065      	b.n	80115e0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011514:	683b      	ldr	r3, [r7, #0]
 8011516:	785b      	ldrb	r3, [r3, #1]
 8011518:	2b0b      	cmp	r3, #11
 801151a:	d84f      	bhi.n	80115bc <USBD_CDC_Setup+0x148>
 801151c:	a201      	add	r2, pc, #4	; (adr r2, 8011524 <USBD_CDC_Setup+0xb0>)
 801151e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011522:	bf00      	nop
 8011524:	08011555 	.word	0x08011555
 8011528:	080115cb 	.word	0x080115cb
 801152c:	080115bd 	.word	0x080115bd
 8011530:	080115bd 	.word	0x080115bd
 8011534:	080115bd 	.word	0x080115bd
 8011538:	080115bd 	.word	0x080115bd
 801153c:	080115bd 	.word	0x080115bd
 8011540:	080115bd 	.word	0x080115bd
 8011544:	080115bd 	.word	0x080115bd
 8011548:	080115bd 	.word	0x080115bd
 801154c:	0801157d 	.word	0x0801157d
 8011550:	080115a5 	.word	0x080115a5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801155a:	2b03      	cmp	r3, #3
 801155c:	d107      	bne.n	801156e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801155e:	f107 030c 	add.w	r3, r7, #12
 8011562:	2202      	movs	r2, #2
 8011564:	4619      	mov	r1, r3
 8011566:	6878      	ldr	r0, [r7, #4]
 8011568:	f001 fa7d 	bl	8012a66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 801156c:	e030      	b.n	80115d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 801156e:	6839      	ldr	r1, [r7, #0]
 8011570:	6878      	ldr	r0, [r7, #4]
 8011572:	f001 fa07 	bl	8012984 <USBD_CtlError>
        ret = USBD_FAIL;
 8011576:	2303      	movs	r3, #3
 8011578:	75fb      	strb	r3, [r7, #23]
      break;
 801157a:	e029      	b.n	80115d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011582:	2b03      	cmp	r3, #3
 8011584:	d107      	bne.n	8011596 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011586:	f107 030f 	add.w	r3, r7, #15
 801158a:	2201      	movs	r2, #1
 801158c:	4619      	mov	r1, r3
 801158e:	6878      	ldr	r0, [r7, #4]
 8011590:	f001 fa69 	bl	8012a66 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8011594:	e01c      	b.n	80115d0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8011596:	6839      	ldr	r1, [r7, #0]
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f001 f9f3 	bl	8012984 <USBD_CtlError>
        ret = USBD_FAIL;
 801159e:	2303      	movs	r3, #3
 80115a0:	75fb      	strb	r3, [r7, #23]
      break;
 80115a2:	e015      	b.n	80115d0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80115aa:	2b03      	cmp	r3, #3
 80115ac:	d00f      	beq.n	80115ce <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80115ae:	6839      	ldr	r1, [r7, #0]
 80115b0:	6878      	ldr	r0, [r7, #4]
 80115b2:	f001 f9e7 	bl	8012984 <USBD_CtlError>
        ret = USBD_FAIL;
 80115b6:	2303      	movs	r3, #3
 80115b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80115ba:	e008      	b.n	80115ce <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80115bc:	6839      	ldr	r1, [r7, #0]
 80115be:	6878      	ldr	r0, [r7, #4]
 80115c0:	f001 f9e0 	bl	8012984 <USBD_CtlError>
      ret = USBD_FAIL;
 80115c4:	2303      	movs	r3, #3
 80115c6:	75fb      	strb	r3, [r7, #23]
      break;
 80115c8:	e002      	b.n	80115d0 <USBD_CDC_Setup+0x15c>
      break;
 80115ca:	bf00      	nop
 80115cc:	e008      	b.n	80115e0 <USBD_CDC_Setup+0x16c>
      break;
 80115ce:	bf00      	nop
    }
    break;
 80115d0:	e006      	b.n	80115e0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80115d2:	6839      	ldr	r1, [r7, #0]
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f001 f9d5 	bl	8012984 <USBD_CtlError>
    ret = USBD_FAIL;
 80115da:	2303      	movs	r3, #3
 80115dc:	75fb      	strb	r3, [r7, #23]
    break;
 80115de:	bf00      	nop
  }

  return (uint8_t)ret;
 80115e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	3718      	adds	r7, #24
 80115e6:	46bd      	mov	sp, r7
 80115e8:	bd80      	pop	{r7, pc}
 80115ea:	bf00      	nop

080115ec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80115ec:	b580      	push	{r7, lr}
 80115ee:	b084      	sub	sp, #16
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	460b      	mov	r3, r1
 80115f6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80115fe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011606:	2b00      	cmp	r3, #0
 8011608:	d101      	bne.n	801160e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 801160a:	2303      	movs	r3, #3
 801160c:	e049      	b.n	80116a2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011614:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8011616:	78fa      	ldrb	r2, [r7, #3]
 8011618:	6879      	ldr	r1, [r7, #4]
 801161a:	4613      	mov	r3, r2
 801161c:	009b      	lsls	r3, r3, #2
 801161e:	4413      	add	r3, r2
 8011620:	009b      	lsls	r3, r3, #2
 8011622:	440b      	add	r3, r1
 8011624:	3318      	adds	r3, #24
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	2b00      	cmp	r3, #0
 801162a:	d029      	beq.n	8011680 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801162c:	78fa      	ldrb	r2, [r7, #3]
 801162e:	6879      	ldr	r1, [r7, #4]
 8011630:	4613      	mov	r3, r2
 8011632:	009b      	lsls	r3, r3, #2
 8011634:	4413      	add	r3, r2
 8011636:	009b      	lsls	r3, r3, #2
 8011638:	440b      	add	r3, r1
 801163a:	3318      	adds	r3, #24
 801163c:	681a      	ldr	r2, [r3, #0]
 801163e:	78f9      	ldrb	r1, [r7, #3]
 8011640:	68f8      	ldr	r0, [r7, #12]
 8011642:	460b      	mov	r3, r1
 8011644:	00db      	lsls	r3, r3, #3
 8011646:	1a5b      	subs	r3, r3, r1
 8011648:	009b      	lsls	r3, r3, #2
 801164a:	4403      	add	r3, r0
 801164c:	3344      	adds	r3, #68	; 0x44
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	fbb2 f1f3 	udiv	r1, r2, r3
 8011654:	fb03 f301 	mul.w	r3, r3, r1
 8011658:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 801165a:	2b00      	cmp	r3, #0
 801165c:	d110      	bne.n	8011680 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 801165e:	78fa      	ldrb	r2, [r7, #3]
 8011660:	6879      	ldr	r1, [r7, #4]
 8011662:	4613      	mov	r3, r2
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	4413      	add	r3, r2
 8011668:	009b      	lsls	r3, r3, #2
 801166a:	440b      	add	r3, r1
 801166c:	3318      	adds	r3, #24
 801166e:	2200      	movs	r2, #0
 8011670:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011672:	78f9      	ldrb	r1, [r7, #3]
 8011674:	2300      	movs	r3, #0
 8011676:	2200      	movs	r2, #0
 8011678:	6878      	ldr	r0, [r7, #4]
 801167a:	f008 fe5a 	bl	801a332 <USBD_LL_Transmit>
 801167e:	e00f      	b.n	80116a0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	2200      	movs	r2, #0
 8011684:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8011688:	687b      	ldr	r3, [r7, #4]
 801168a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801168e:	691b      	ldr	r3, [r3, #16]
 8011690:	68ba      	ldr	r2, [r7, #8]
 8011692:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801169c:	78fa      	ldrb	r2, [r7, #3]
 801169e:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}

080116aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80116aa:	b580      	push	{r7, lr}
 80116ac:	b084      	sub	sp, #16
 80116ae:	af00      	add	r7, sp, #0
 80116b0:	6078      	str	r0, [r7, #4]
 80116b2:	460b      	mov	r3, r1
 80116b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80116c4:	2b00      	cmp	r3, #0
 80116c6:	d101      	bne.n	80116cc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80116c8:	2303      	movs	r3, #3
 80116ca:	e015      	b.n	80116f8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80116cc:	78fb      	ldrb	r3, [r7, #3]
 80116ce:	4619      	mov	r1, r3
 80116d0:	6878      	ldr	r0, [r7, #4]
 80116d2:	f008 fe70 	bl	801a3b6 <USBD_LL_GetRxDataSize>
 80116d6:	4602      	mov	r2, r0
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80116de:	687b      	ldr	r3, [r7, #4]
 80116e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80116e4:	68db      	ldr	r3, [r3, #12]
 80116e6:	68fa      	ldr	r2, [r7, #12]
 80116e8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80116ec:	68fa      	ldr	r2, [r7, #12]
 80116ee:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80116f2:	4611      	mov	r1, r2
 80116f4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80116f6:	2300      	movs	r3, #0
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	3710      	adds	r7, #16
 80116fc:	46bd      	mov	sp, r7
 80116fe:	bd80      	pop	{r7, pc}

08011700 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
 8011706:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801170e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8011716:	2b00      	cmp	r3, #0
 8011718:	d015      	beq.n	8011746 <USBD_CDC_EP0_RxReady+0x46>
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011720:	2bff      	cmp	r3, #255	; 0xff
 8011722:	d010      	beq.n	8011746 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801172a:	689b      	ldr	r3, [r3, #8]
 801172c:	68fa      	ldr	r2, [r7, #12]
 801172e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8011732:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8011734:	68fa      	ldr	r2, [r7, #12]
 8011736:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 801173a:	b292      	uxth	r2, r2
 801173c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	22ff      	movs	r2, #255	; 0xff
 8011742:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8011746:	2300      	movs	r3, #0
}
 8011748:	4618      	mov	r0, r3
 801174a:	3710      	adds	r7, #16
 801174c:	46bd      	mov	sp, r7
 801174e:	bd80      	pop	{r7, pc}

08011750 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8011750:	b480      	push	{r7}
 8011752:	b083      	sub	sp, #12
 8011754:	af00      	add	r7, sp, #0
 8011756:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2243      	movs	r2, #67	; 0x43
 801175c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 801175e:	4b03      	ldr	r3, [pc, #12]	; (801176c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8011760:	4618      	mov	r0, r3
 8011762:	370c      	adds	r7, #12
 8011764:	46bd      	mov	sp, r7
 8011766:	f85d 7b04 	ldr.w	r7, [sp], #4
 801176a:	4770      	bx	lr
 801176c:	20000094 	.word	0x20000094

08011770 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8011770:	b480      	push	{r7}
 8011772:	b083      	sub	sp, #12
 8011774:	af00      	add	r7, sp, #0
 8011776:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	2243      	movs	r2, #67	; 0x43
 801177c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 801177e:	4b03      	ldr	r3, [pc, #12]	; (801178c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8011780:	4618      	mov	r0, r3
 8011782:	370c      	adds	r7, #12
 8011784:	46bd      	mov	sp, r7
 8011786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801178a:	4770      	bx	lr
 801178c:	20000050 	.word	0x20000050

08011790 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8011790:	b480      	push	{r7}
 8011792:	b083      	sub	sp, #12
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2243      	movs	r2, #67	; 0x43
 801179c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 801179e:	4b03      	ldr	r3, [pc, #12]	; (80117ac <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	370c      	adds	r7, #12
 80117a4:	46bd      	mov	sp, r7
 80117a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117aa:	4770      	bx	lr
 80117ac:	200000d8 	.word	0x200000d8

080117b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80117b0:	b480      	push	{r7}
 80117b2:	b083      	sub	sp, #12
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	220a      	movs	r2, #10
 80117bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80117be:	4b03      	ldr	r3, [pc, #12]	; (80117cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80117c0:	4618      	mov	r0, r3
 80117c2:	370c      	adds	r7, #12
 80117c4:	46bd      	mov	sp, r7
 80117c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ca:	4770      	bx	lr
 80117cc:	2000000c 	.word	0x2000000c

080117d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80117d0:	b480      	push	{r7}
 80117d2:	b083      	sub	sp, #12
 80117d4:	af00      	add	r7, sp, #0
 80117d6:	6078      	str	r0, [r7, #4]
 80117d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80117da:	683b      	ldr	r3, [r7, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d101      	bne.n	80117e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80117e0:	2303      	movs	r3, #3
 80117e2:	e004      	b.n	80117ee <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	683a      	ldr	r2, [r7, #0]
 80117e8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80117ec:	2300      	movs	r3, #0
}
 80117ee:	4618      	mov	r0, r3
 80117f0:	370c      	adds	r7, #12
 80117f2:	46bd      	mov	sp, r7
 80117f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117f8:	4770      	bx	lr

080117fa <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80117fa:	b480      	push	{r7}
 80117fc:	b087      	sub	sp, #28
 80117fe:	af00      	add	r7, sp, #0
 8011800:	60f8      	str	r0, [r7, #12]
 8011802:	60b9      	str	r1, [r7, #8]
 8011804:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011806:	68fb      	ldr	r3, [r7, #12]
 8011808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801180c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	68ba      	ldr	r2, [r7, #8]
 8011812:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011816:	697b      	ldr	r3, [r7, #20]
 8011818:	687a      	ldr	r2, [r7, #4]
 801181a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801181e:	2300      	movs	r3, #0
}
 8011820:	4618      	mov	r0, r3
 8011822:	371c      	adds	r7, #28
 8011824:	46bd      	mov	sp, r7
 8011826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801182a:	4770      	bx	lr

0801182c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801182c:	b480      	push	{r7}
 801182e:	b085      	sub	sp, #20
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
 8011834:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801183c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 801183e:	68fb      	ldr	r3, [r7, #12]
 8011840:	683a      	ldr	r2, [r7, #0]
 8011842:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011846:	2300      	movs	r3, #0
}
 8011848:	4618      	mov	r0, r3
 801184a:	3714      	adds	r7, #20
 801184c:	46bd      	mov	sp, r7
 801184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011852:	4770      	bx	lr

08011854 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011854:	b580      	push	{r7, lr}
 8011856:	b084      	sub	sp, #16
 8011858:	af00      	add	r7, sp, #0
 801185a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801185c:	687b      	ldr	r3, [r7, #4]
 801185e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011862:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8011864:	2301      	movs	r3, #1
 8011866:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801186e:	2b00      	cmp	r3, #0
 8011870:	d101      	bne.n	8011876 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011872:	2303      	movs	r3, #3
 8011874:	e01a      	b.n	80118ac <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8011876:	68bb      	ldr	r3, [r7, #8]
 8011878:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801187c:	2b00      	cmp	r3, #0
 801187e:	d114      	bne.n	80118aa <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011880:	68bb      	ldr	r3, [r7, #8]
 8011882:	2201      	movs	r2, #1
 8011884:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8011888:	68bb      	ldr	r3, [r7, #8]
 801188a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 8011892:	68bb      	ldr	r3, [r7, #8]
 8011894:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011898:	68bb      	ldr	r3, [r7, #8]
 801189a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 801189e:	2181      	movs	r1, #129	; 0x81
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f008 fd46 	bl	801a332 <USBD_LL_Transmit>

    ret = USBD_OK;
 80118a6:	2300      	movs	r3, #0
 80118a8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80118aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80118ac:	4618      	mov	r0, r3
 80118ae:	3710      	adds	r7, #16
 80118b0:	46bd      	mov	sp, r7
 80118b2:	bd80      	pop	{r7, pc}

080118b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80118b4:	b580      	push	{r7, lr}
 80118b6:	b084      	sub	sp, #16
 80118b8:	af00      	add	r7, sp, #0
 80118ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118c2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d101      	bne.n	80118d2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80118ce:	2303      	movs	r3, #3
 80118d0:	e016      	b.n	8011900 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	7c1b      	ldrb	r3, [r3, #16]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d109      	bne.n	80118ee <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80118e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80118e4:	2101      	movs	r1, #1
 80118e6:	6878      	ldr	r0, [r7, #4]
 80118e8:	f008 fd44 	bl	801a374 <USBD_LL_PrepareReceive>
 80118ec:	e007      	b.n	80118fe <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80118f4:	2340      	movs	r3, #64	; 0x40
 80118f6:	2101      	movs	r1, #1
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f008 fd3b 	bl	801a374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80118fe:	2300      	movs	r3, #0
}
 8011900:	4618      	mov	r0, r3
 8011902:	3710      	adds	r7, #16
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}

08011908 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011908:	b580      	push	{r7, lr}
 801190a:	b086      	sub	sp, #24
 801190c:	af00      	add	r7, sp, #0
 801190e:	60f8      	str	r0, [r7, #12]
 8011910:	60b9      	str	r1, [r7, #8]
 8011912:	4613      	mov	r3, r2
 8011914:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d101      	bne.n	8011920 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 801191c:	2303      	movs	r3, #3
 801191e:	e025      	b.n	801196c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011926:	2b00      	cmp	r3, #0
 8011928:	d003      	beq.n	8011932 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	2200      	movs	r2, #0
 801192e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8011938:	2b00      	cmp	r3, #0
 801193a:	d003      	beq.n	8011944 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	2200      	movs	r2, #0
 8011940:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011944:	68bb      	ldr	r3, [r7, #8]
 8011946:	2b00      	cmp	r3, #0
 8011948:	d003      	beq.n	8011952 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	68ba      	ldr	r2, [r7, #8]
 801194e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	2201      	movs	r2, #1
 8011956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	79fa      	ldrb	r2, [r7, #7]
 801195e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011960:	68f8      	ldr	r0, [r7, #12]
 8011962:	f008 fbb1 	bl	801a0c8 <USBD_LL_Init>
 8011966:	4603      	mov	r3, r0
 8011968:	75fb      	strb	r3, [r7, #23]

  return ret;
 801196a:	7dfb      	ldrb	r3, [r7, #23]
}
 801196c:	4618      	mov	r0, r3
 801196e:	3718      	adds	r7, #24
 8011970:	46bd      	mov	sp, r7
 8011972:	bd80      	pop	{r7, pc}

08011974 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b084      	sub	sp, #16
 8011978:	af00      	add	r7, sp, #0
 801197a:	6078      	str	r0, [r7, #4]
 801197c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801197e:	2300      	movs	r3, #0
 8011980:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011982:	683b      	ldr	r3, [r7, #0]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d101      	bne.n	801198c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8011988:	2303      	movs	r3, #3
 801198a:	e010      	b.n	80119ae <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	683a      	ldr	r2, [r7, #0]
 8011990:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801199a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801199c:	f107 020e 	add.w	r2, r7, #14
 80119a0:	4610      	mov	r0, r2
 80119a2:	4798      	blx	r3
 80119a4:	4602      	mov	r2, r0
 80119a6:	687b      	ldr	r3, [r7, #4]
 80119a8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80119ac:	2300      	movs	r3, #0
}
 80119ae:	4618      	mov	r0, r3
 80119b0:	3710      	adds	r7, #16
 80119b2:	46bd      	mov	sp, r7
 80119b4:	bd80      	pop	{r7, pc}

080119b6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80119b6:	b580      	push	{r7, lr}
 80119b8:	b082      	sub	sp, #8
 80119ba:	af00      	add	r7, sp, #0
 80119bc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80119be:	6878      	ldr	r0, [r7, #4]
 80119c0:	f008 fbce 	bl	801a160 <USBD_LL_Start>
 80119c4:	4603      	mov	r3, r0
}
 80119c6:	4618      	mov	r0, r3
 80119c8:	3708      	adds	r7, #8
 80119ca:	46bd      	mov	sp, r7
 80119cc:	bd80      	pop	{r7, pc}

080119ce <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80119ce:	b480      	push	{r7}
 80119d0:	b083      	sub	sp, #12
 80119d2:	af00      	add	r7, sp, #0
 80119d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80119d6:	2300      	movs	r3, #0
}
 80119d8:	4618      	mov	r0, r3
 80119da:	370c      	adds	r7, #12
 80119dc:	46bd      	mov	sp, r7
 80119de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e2:	4770      	bx	lr

080119e4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b084      	sub	sp, #16
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
 80119ec:	460b      	mov	r3, r1
 80119ee:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80119f0:	2303      	movs	r3, #3
 80119f2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d009      	beq.n	8011a12 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	78fa      	ldrb	r2, [r7, #3]
 8011a08:	4611      	mov	r1, r2
 8011a0a:	6878      	ldr	r0, [r7, #4]
 8011a0c:	4798      	blx	r3
 8011a0e:	4603      	mov	r3, r0
 8011a10:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8011a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3710      	adds	r7, #16
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}

08011a1c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011a1c:	b580      	push	{r7, lr}
 8011a1e:	b082      	sub	sp, #8
 8011a20:	af00      	add	r7, sp, #0
 8011a22:	6078      	str	r0, [r7, #4]
 8011a24:	460b      	mov	r3, r1
 8011a26:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d007      	beq.n	8011a42 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011a38:	685b      	ldr	r3, [r3, #4]
 8011a3a:	78fa      	ldrb	r2, [r7, #3]
 8011a3c:	4611      	mov	r1, r2
 8011a3e:	6878      	ldr	r0, [r7, #4]
 8011a40:	4798      	blx	r3
  }

  return USBD_OK;
 8011a42:	2300      	movs	r3, #0
}
 8011a44:	4618      	mov	r0, r3
 8011a46:	3708      	adds	r7, #8
 8011a48:	46bd      	mov	sp, r7
 8011a4a:	bd80      	pop	{r7, pc}

08011a4c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
 8011a54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011a5c:	6839      	ldr	r1, [r7, #0]
 8011a5e:	4618      	mov	r0, r3
 8011a60:	f000 ff56 	bl	8012910 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	2201      	movs	r2, #1
 8011a68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011a72:	461a      	mov	r2, r3
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011a80:	f003 031f 	and.w	r3, r3, #31
 8011a84:	2b01      	cmp	r3, #1
 8011a86:	d00e      	beq.n	8011aa6 <USBD_LL_SetupStage+0x5a>
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d302      	bcc.n	8011a92 <USBD_LL_SetupStage+0x46>
 8011a8c:	2b02      	cmp	r3, #2
 8011a8e:	d014      	beq.n	8011aba <USBD_LL_SetupStage+0x6e>
 8011a90:	e01d      	b.n	8011ace <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011a98:	4619      	mov	r1, r3
 8011a9a:	6878      	ldr	r0, [r7, #4]
 8011a9c:	f000 fa18 	bl	8011ed0 <USBD_StdDevReq>
 8011aa0:	4603      	mov	r3, r0
 8011aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8011aa4:	e020      	b.n	8011ae8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011aac:	4619      	mov	r1, r3
 8011aae:	6878      	ldr	r0, [r7, #4]
 8011ab0:	f000 fa7c 	bl	8011fac <USBD_StdItfReq>
 8011ab4:	4603      	mov	r3, r0
 8011ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8011ab8:	e016      	b.n	8011ae8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011aba:	687b      	ldr	r3, [r7, #4]
 8011abc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f000 fab8 	bl	8012038 <USBD_StdEPReq>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	73fb      	strb	r3, [r7, #15]
      break;
 8011acc:	e00c      	b.n	8011ae8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011ace:	687b      	ldr	r3, [r7, #4]
 8011ad0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011ad4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011ad8:	b2db      	uxtb	r3, r3
 8011ada:	4619      	mov	r1, r3
 8011adc:	6878      	ldr	r0, [r7, #4]
 8011ade:	f008 fb9f 	bl	801a220 <USBD_LL_StallEP>
 8011ae2:	4603      	mov	r3, r0
 8011ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8011ae6:	bf00      	nop
  }

  return ret;
 8011ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aea:	4618      	mov	r0, r3
 8011aec:	3710      	adds	r7, #16
 8011aee:	46bd      	mov	sp, r7
 8011af0:	bd80      	pop	{r7, pc}

08011af2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011af2:	b580      	push	{r7, lr}
 8011af4:	b086      	sub	sp, #24
 8011af6:	af00      	add	r7, sp, #0
 8011af8:	60f8      	str	r0, [r7, #12]
 8011afa:	460b      	mov	r3, r1
 8011afc:	607a      	str	r2, [r7, #4]
 8011afe:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011b00:	7afb      	ldrb	r3, [r7, #11]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d137      	bne.n	8011b76 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011b0c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011b14:	2b03      	cmp	r3, #3
 8011b16:	d14a      	bne.n	8011bae <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8011b18:	693b      	ldr	r3, [r7, #16]
 8011b1a:	689a      	ldr	r2, [r3, #8]
 8011b1c:	693b      	ldr	r3, [r7, #16]
 8011b1e:	68db      	ldr	r3, [r3, #12]
 8011b20:	429a      	cmp	r2, r3
 8011b22:	d913      	bls.n	8011b4c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011b24:	693b      	ldr	r3, [r7, #16]
 8011b26:	689a      	ldr	r2, [r3, #8]
 8011b28:	693b      	ldr	r3, [r7, #16]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	1ad2      	subs	r2, r2, r3
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011b32:	693b      	ldr	r3, [r7, #16]
 8011b34:	68da      	ldr	r2, [r3, #12]
 8011b36:	693b      	ldr	r3, [r7, #16]
 8011b38:	689b      	ldr	r3, [r3, #8]
 8011b3a:	4293      	cmp	r3, r2
 8011b3c:	bf28      	it	cs
 8011b3e:	4613      	movcs	r3, r2
 8011b40:	461a      	mov	r2, r3
 8011b42:	6879      	ldr	r1, [r7, #4]
 8011b44:	68f8      	ldr	r0, [r7, #12]
 8011b46:	f000 ffd7 	bl	8012af8 <USBD_CtlContinueRx>
 8011b4a:	e030      	b.n	8011bae <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b52:	691b      	ldr	r3, [r3, #16]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d00a      	beq.n	8011b6e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011b58:	68fb      	ldr	r3, [r7, #12]
 8011b5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8011b5e:	2b03      	cmp	r3, #3
 8011b60:	d105      	bne.n	8011b6e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8011b62:	68fb      	ldr	r3, [r7, #12]
 8011b64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b68:	691b      	ldr	r3, [r3, #16]
 8011b6a:	68f8      	ldr	r0, [r7, #12]
 8011b6c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8011b6e:	68f8      	ldr	r0, [r7, #12]
 8011b70:	f000 ffd3 	bl	8012b1a <USBD_CtlSendStatus>
 8011b74:	e01b      	b.n	8011bae <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8011b76:	68fb      	ldr	r3, [r7, #12]
 8011b78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b7c:	699b      	ldr	r3, [r3, #24]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d013      	beq.n	8011baa <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8011b88:	2b03      	cmp	r3, #3
 8011b8a:	d10e      	bne.n	8011baa <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8011b8c:	68fb      	ldr	r3, [r7, #12]
 8011b8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011b92:	699b      	ldr	r3, [r3, #24]
 8011b94:	7afa      	ldrb	r2, [r7, #11]
 8011b96:	4611      	mov	r1, r2
 8011b98:	68f8      	ldr	r0, [r7, #12]
 8011b9a:	4798      	blx	r3
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011ba0:	7dfb      	ldrb	r3, [r7, #23]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d003      	beq.n	8011bae <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8011ba6:	7dfb      	ldrb	r3, [r7, #23]
 8011ba8:	e002      	b.n	8011bb0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011baa:	2303      	movs	r3, #3
 8011bac:	e000      	b.n	8011bb0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3718      	adds	r7, #24
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b086      	sub	sp, #24
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	460b      	mov	r3, r1
 8011bc2:	607a      	str	r2, [r7, #4]
 8011bc4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8011bc6:	7afb      	ldrb	r3, [r7, #11]
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d16a      	bne.n	8011ca2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	3314      	adds	r3, #20
 8011bd0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011bd8:	2b02      	cmp	r3, #2
 8011bda:	d155      	bne.n	8011c88 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8011bdc:	693b      	ldr	r3, [r7, #16]
 8011bde:	689a      	ldr	r2, [r3, #8]
 8011be0:	693b      	ldr	r3, [r7, #16]
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d914      	bls.n	8011c12 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011be8:	693b      	ldr	r3, [r7, #16]
 8011bea:	689a      	ldr	r2, [r3, #8]
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	68db      	ldr	r3, [r3, #12]
 8011bf0:	1ad2      	subs	r2, r2, r3
 8011bf2:	693b      	ldr	r3, [r7, #16]
 8011bf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011bf6:	693b      	ldr	r3, [r7, #16]
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	6879      	ldr	r1, [r7, #4]
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f000 ff4c 	bl	8012a9c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c04:	2300      	movs	r3, #0
 8011c06:	2200      	movs	r2, #0
 8011c08:	2100      	movs	r1, #0
 8011c0a:	68f8      	ldr	r0, [r7, #12]
 8011c0c:	f008 fbb2 	bl	801a374 <USBD_LL_PrepareReceive>
 8011c10:	e03a      	b.n	8011c88 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011c12:	693b      	ldr	r3, [r7, #16]
 8011c14:	68da      	ldr	r2, [r3, #12]
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	689b      	ldr	r3, [r3, #8]
 8011c1a:	429a      	cmp	r2, r3
 8011c1c:	d11c      	bne.n	8011c58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011c1e:	693b      	ldr	r3, [r7, #16]
 8011c20:	685a      	ldr	r2, [r3, #4]
 8011c22:	693b      	ldr	r3, [r7, #16]
 8011c24:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011c26:	429a      	cmp	r2, r3
 8011c28:	d316      	bcc.n	8011c58 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	685a      	ldr	r2, [r3, #4]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011c34:	429a      	cmp	r2, r3
 8011c36:	d20f      	bcs.n	8011c58 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011c38:	2200      	movs	r2, #0
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	68f8      	ldr	r0, [r7, #12]
 8011c3e:	f000 ff2d 	bl	8012a9c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	2200      	movs	r2, #0
 8011c46:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	2200      	movs	r2, #0
 8011c4e:	2100      	movs	r1, #0
 8011c50:	68f8      	ldr	r0, [r7, #12]
 8011c52:	f008 fb8f 	bl	801a374 <USBD_LL_PrepareReceive>
 8011c56:	e017      	b.n	8011c88 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011c58:	68fb      	ldr	r3, [r7, #12]
 8011c5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c5e:	68db      	ldr	r3, [r3, #12]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d00a      	beq.n	8011c7a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011c64:	68fb      	ldr	r3, [r7, #12]
 8011c66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8011c6a:	2b03      	cmp	r3, #3
 8011c6c:	d105      	bne.n	8011c7a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	68f8      	ldr	r0, [r7, #12]
 8011c78:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011c7a:	2180      	movs	r1, #128	; 0x80
 8011c7c:	68f8      	ldr	r0, [r7, #12]
 8011c7e:	f008 facf 	bl	801a220 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011c82:	68f8      	ldr	r0, [r7, #12]
 8011c84:	f000 ff5c 	bl	8012b40 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011c8e:	2b01      	cmp	r3, #1
 8011c90:	d123      	bne.n	8011cda <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8011c92:	68f8      	ldr	r0, [r7, #12]
 8011c94:	f7ff fe9b 	bl	80119ce <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	2200      	movs	r2, #0
 8011c9c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011ca0:	e01b      	b.n	8011cda <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca8:	695b      	ldr	r3, [r3, #20]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d013      	beq.n	8011cd6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8011cb4:	2b03      	cmp	r3, #3
 8011cb6:	d10e      	bne.n	8011cd6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8011cb8:	68fb      	ldr	r3, [r7, #12]
 8011cba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cbe:	695b      	ldr	r3, [r3, #20]
 8011cc0:	7afa      	ldrb	r2, [r7, #11]
 8011cc2:	4611      	mov	r1, r2
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	4798      	blx	r3
 8011cc8:	4603      	mov	r3, r0
 8011cca:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8011ccc:	7dfb      	ldrb	r3, [r7, #23]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d003      	beq.n	8011cda <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8011cd2:	7dfb      	ldrb	r3, [r7, #23]
 8011cd4:	e002      	b.n	8011cdc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8011cd6:	2303      	movs	r3, #3
 8011cd8:	e000      	b.n	8011cdc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8011cda:	2300      	movs	r3, #0
}
 8011cdc:	4618      	mov	r0, r3
 8011cde:	3718      	adds	r7, #24
 8011ce0:	46bd      	mov	sp, r7
 8011ce2:	bd80      	pop	{r7, pc}

08011ce4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	b082      	sub	sp, #8
 8011ce8:	af00      	add	r7, sp, #0
 8011cea:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	2201      	movs	r2, #1
 8011cf0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	2200      	movs	r2, #0
 8011d06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d009      	beq.n	8011d28 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011d1a:	685b      	ldr	r3, [r3, #4]
 8011d1c:	687a      	ldr	r2, [r7, #4]
 8011d1e:	6852      	ldr	r2, [r2, #4]
 8011d20:	b2d2      	uxtb	r2, r2
 8011d22:	4611      	mov	r1, r2
 8011d24:	6878      	ldr	r0, [r7, #4]
 8011d26:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011d28:	2340      	movs	r3, #64	; 0x40
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	2100      	movs	r1, #0
 8011d2e:	6878      	ldr	r0, [r7, #4]
 8011d30:	f008 fa31 	bl	801a196 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2201      	movs	r2, #1
 8011d38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	2240      	movs	r2, #64	; 0x40
 8011d40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8011d44:	2340      	movs	r3, #64	; 0x40
 8011d46:	2200      	movs	r2, #0
 8011d48:	2180      	movs	r1, #128	; 0x80
 8011d4a:	6878      	ldr	r0, [r7, #4]
 8011d4c:	f008 fa23 	bl	801a196 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	2201      	movs	r2, #1
 8011d54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	2240      	movs	r2, #64	; 0x40
 8011d5a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8011d5c:	2300      	movs	r3, #0
}
 8011d5e:	4618      	mov	r0, r3
 8011d60:	3708      	adds	r7, #8
 8011d62:	46bd      	mov	sp, r7
 8011d64:	bd80      	pop	{r7, pc}

08011d66 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8011d66:	b480      	push	{r7}
 8011d68:	b083      	sub	sp, #12
 8011d6a:	af00      	add	r7, sp, #0
 8011d6c:	6078      	str	r0, [r7, #4]
 8011d6e:	460b      	mov	r3, r1
 8011d70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	78fa      	ldrb	r2, [r7, #3]
 8011d76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8011d78:	2300      	movs	r3, #0
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	370c      	adds	r7, #12
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d84:	4770      	bx	lr

08011d86 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8011d86:	b480      	push	{r7}
 8011d88:	b083      	sub	sp, #12
 8011d8a:	af00      	add	r7, sp, #0
 8011d8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	2204      	movs	r2, #4
 8011d9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8011db0:	b480      	push	{r7}
 8011db2:	b083      	sub	sp, #12
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dbe:	2b04      	cmp	r3, #4
 8011dc0:	d105      	bne.n	8011dce <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8011dce:	2300      	movs	r3, #0
}
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	370c      	adds	r7, #12
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dda:	4770      	bx	lr

08011ddc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011dea:	2b03      	cmp	r3, #3
 8011dec:	d10b      	bne.n	8011e06 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011df4:	69db      	ldr	r3, [r3, #28]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d005      	beq.n	8011e06 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e00:	69db      	ldr	r3, [r3, #28]
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8011e06:	2300      	movs	r3, #0
}
 8011e08:	4618      	mov	r0, r3
 8011e0a:	3708      	adds	r7, #8
 8011e0c:	46bd      	mov	sp, r7
 8011e0e:	bd80      	pop	{r7, pc}

08011e10 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8011e10:	b480      	push	{r7}
 8011e12:	b083      	sub	sp, #12
 8011e14:	af00      	add	r7, sp, #0
 8011e16:	6078      	str	r0, [r7, #4]
 8011e18:	460b      	mov	r3, r1
 8011e1a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011e1c:	2300      	movs	r3, #0
}
 8011e1e:	4618      	mov	r0, r3
 8011e20:	370c      	adds	r7, #12
 8011e22:	46bd      	mov	sp, r7
 8011e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e28:	4770      	bx	lr

08011e2a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8011e2a:	b480      	push	{r7}
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	6078      	str	r0, [r7, #4]
 8011e32:	460b      	mov	r3, r1
 8011e34:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8011e36:	2300      	movs	r3, #0
}
 8011e38:	4618      	mov	r0, r3
 8011e3a:	370c      	adds	r7, #12
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e42:	4770      	bx	lr

08011e44 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8011e44:	b480      	push	{r7}
 8011e46:	b083      	sub	sp, #12
 8011e48:	af00      	add	r7, sp, #0
 8011e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011e4c:	2300      	movs	r3, #0
}
 8011e4e:	4618      	mov	r0, r3
 8011e50:	370c      	adds	r7, #12
 8011e52:	46bd      	mov	sp, r7
 8011e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e58:	4770      	bx	lr

08011e5a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8011e5a:	b580      	push	{r7, lr}
 8011e5c:	b082      	sub	sp, #8
 8011e5e:	af00      	add	r7, sp, #0
 8011e60:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011e62:	687b      	ldr	r3, [r7, #4]
 8011e64:	2201      	movs	r2, #1
 8011e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d009      	beq.n	8011e88 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011e7a:	685b      	ldr	r3, [r3, #4]
 8011e7c:	687a      	ldr	r2, [r7, #4]
 8011e7e:	6852      	ldr	r2, [r2, #4]
 8011e80:	b2d2      	uxtb	r2, r2
 8011e82:	4611      	mov	r1, r2
 8011e84:	6878      	ldr	r0, [r7, #4]
 8011e86:	4798      	blx	r3
  }

  return USBD_OK;
 8011e88:	2300      	movs	r3, #0
}
 8011e8a:	4618      	mov	r0, r3
 8011e8c:	3708      	adds	r7, #8
 8011e8e:	46bd      	mov	sp, r7
 8011e90:	bd80      	pop	{r7, pc}

08011e92 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8011e92:	b480      	push	{r7}
 8011e94:	b087      	sub	sp, #28
 8011e96:	af00      	add	r7, sp, #0
 8011e98:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8011e9e:	697b      	ldr	r3, [r7, #20]
 8011ea0:	781b      	ldrb	r3, [r3, #0]
 8011ea2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8011ea4:	697b      	ldr	r3, [r7, #20]
 8011ea6:	3301      	adds	r3, #1
 8011ea8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8011eaa:	697b      	ldr	r3, [r7, #20]
 8011eac:	781b      	ldrb	r3, [r3, #0]
 8011eae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8011eb0:	8a3b      	ldrh	r3, [r7, #16]
 8011eb2:	021b      	lsls	r3, r3, #8
 8011eb4:	b21a      	sxth	r2, r3
 8011eb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8011eba:	4313      	orrs	r3, r2
 8011ebc:	b21b      	sxth	r3, r3
 8011ebe:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8011ec0:	89fb      	ldrh	r3, [r7, #14]
}
 8011ec2:	4618      	mov	r0, r3
 8011ec4:	371c      	adds	r7, #28
 8011ec6:	46bd      	mov	sp, r7
 8011ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ecc:	4770      	bx	lr
	...

08011ed0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011ed0:	b580      	push	{r7, lr}
 8011ed2:	b084      	sub	sp, #16
 8011ed4:	af00      	add	r7, sp, #0
 8011ed6:	6078      	str	r0, [r7, #4]
 8011ed8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011eda:	2300      	movs	r3, #0
 8011edc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011ede:	683b      	ldr	r3, [r7, #0]
 8011ee0:	781b      	ldrb	r3, [r3, #0]
 8011ee2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011ee6:	2b20      	cmp	r3, #32
 8011ee8:	d004      	beq.n	8011ef4 <USBD_StdDevReq+0x24>
 8011eea:	2b40      	cmp	r3, #64	; 0x40
 8011eec:	d002      	beq.n	8011ef4 <USBD_StdDevReq+0x24>
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d00a      	beq.n	8011f08 <USBD_StdDevReq+0x38>
 8011ef2:	e050      	b.n	8011f96 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011efa:	689b      	ldr	r3, [r3, #8]
 8011efc:	6839      	ldr	r1, [r7, #0]
 8011efe:	6878      	ldr	r0, [r7, #4]
 8011f00:	4798      	blx	r3
 8011f02:	4603      	mov	r3, r0
 8011f04:	73fb      	strb	r3, [r7, #15]
    break;
 8011f06:	e04b      	b.n	8011fa0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8011f08:	683b      	ldr	r3, [r7, #0]
 8011f0a:	785b      	ldrb	r3, [r3, #1]
 8011f0c:	2b09      	cmp	r3, #9
 8011f0e:	d83c      	bhi.n	8011f8a <USBD_StdDevReq+0xba>
 8011f10:	a201      	add	r2, pc, #4	; (adr r2, 8011f18 <USBD_StdDevReq+0x48>)
 8011f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f16:	bf00      	nop
 8011f18:	08011f6d 	.word	0x08011f6d
 8011f1c:	08011f81 	.word	0x08011f81
 8011f20:	08011f8b 	.word	0x08011f8b
 8011f24:	08011f77 	.word	0x08011f77
 8011f28:	08011f8b 	.word	0x08011f8b
 8011f2c:	08011f4b 	.word	0x08011f4b
 8011f30:	08011f41 	.word	0x08011f41
 8011f34:	08011f8b 	.word	0x08011f8b
 8011f38:	08011f63 	.word	0x08011f63
 8011f3c:	08011f55 	.word	0x08011f55
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8011f40:	6839      	ldr	r1, [r7, #0]
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f000 f9ce 	bl	80122e4 <USBD_GetDescriptor>
      break;
 8011f48:	e024      	b.n	8011f94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8011f4a:	6839      	ldr	r1, [r7, #0]
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f000 fb5d 	bl	801260c <USBD_SetAddress>
      break;
 8011f52:	e01f      	b.n	8011f94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8011f54:	6839      	ldr	r1, [r7, #0]
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f000 fb9a 	bl	8012690 <USBD_SetConfig>
 8011f5c:	4603      	mov	r3, r0
 8011f5e:	73fb      	strb	r3, [r7, #15]
      break;
 8011f60:	e018      	b.n	8011f94 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8011f62:	6839      	ldr	r1, [r7, #0]
 8011f64:	6878      	ldr	r0, [r7, #4]
 8011f66:	f000 fc37 	bl	80127d8 <USBD_GetConfig>
      break;
 8011f6a:	e013      	b.n	8011f94 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8011f6c:	6839      	ldr	r1, [r7, #0]
 8011f6e:	6878      	ldr	r0, [r7, #4]
 8011f70:	f000 fc66 	bl	8012840 <USBD_GetStatus>
      break;
 8011f74:	e00e      	b.n	8011f94 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8011f76:	6839      	ldr	r1, [r7, #0]
 8011f78:	6878      	ldr	r0, [r7, #4]
 8011f7a:	f000 fc94 	bl	80128a6 <USBD_SetFeature>
      break;
 8011f7e:	e009      	b.n	8011f94 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8011f80:	6839      	ldr	r1, [r7, #0]
 8011f82:	6878      	ldr	r0, [r7, #4]
 8011f84:	f000 fca3 	bl	80128ce <USBD_ClrFeature>
      break;
 8011f88:	e004      	b.n	8011f94 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8011f8a:	6839      	ldr	r1, [r7, #0]
 8011f8c:	6878      	ldr	r0, [r7, #4]
 8011f8e:	f000 fcf9 	bl	8012984 <USBD_CtlError>
      break;
 8011f92:	bf00      	nop
    }
    break;
 8011f94:	e004      	b.n	8011fa0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8011f96:	6839      	ldr	r1, [r7, #0]
 8011f98:	6878      	ldr	r0, [r7, #4]
 8011f9a:	f000 fcf3 	bl	8012984 <USBD_CtlError>
    break;
 8011f9e:	bf00      	nop
  }

  return ret;
 8011fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8011fa2:	4618      	mov	r0, r3
 8011fa4:	3710      	adds	r7, #16
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	bd80      	pop	{r7, pc}
 8011faa:	bf00      	nop

08011fac <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011fac:	b580      	push	{r7, lr}
 8011fae:	b084      	sub	sp, #16
 8011fb0:	af00      	add	r7, sp, #0
 8011fb2:	6078      	str	r0, [r7, #4]
 8011fb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011fba:	683b      	ldr	r3, [r7, #0]
 8011fbc:	781b      	ldrb	r3, [r3, #0]
 8011fbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011fc2:	2b20      	cmp	r3, #32
 8011fc4:	d003      	beq.n	8011fce <USBD_StdItfReq+0x22>
 8011fc6:	2b40      	cmp	r3, #64	; 0x40
 8011fc8:	d001      	beq.n	8011fce <USBD_StdItfReq+0x22>
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d12a      	bne.n	8012024 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fd4:	3b01      	subs	r3, #1
 8011fd6:	2b02      	cmp	r3, #2
 8011fd8:	d81d      	bhi.n	8012016 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8011fda:	683b      	ldr	r3, [r7, #0]
 8011fdc:	889b      	ldrh	r3, [r3, #4]
 8011fde:	b2db      	uxtb	r3, r3
 8011fe0:	2b01      	cmp	r3, #1
 8011fe2:	d813      	bhi.n	801200c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fea:	689b      	ldr	r3, [r3, #8]
 8011fec:	6839      	ldr	r1, [r7, #0]
 8011fee:	6878      	ldr	r0, [r7, #4]
 8011ff0:	4798      	blx	r3
 8011ff2:	4603      	mov	r3, r0
 8011ff4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8011ff6:	683b      	ldr	r3, [r7, #0]
 8011ff8:	88db      	ldrh	r3, [r3, #6]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d110      	bne.n	8012020 <USBD_StdItfReq+0x74>
 8011ffe:	7bfb      	ldrb	r3, [r7, #15]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d10d      	bne.n	8012020 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8012004:	6878      	ldr	r0, [r7, #4]
 8012006:	f000 fd88 	bl	8012b1a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801200a:	e009      	b.n	8012020 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 801200c:	6839      	ldr	r1, [r7, #0]
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f000 fcb8 	bl	8012984 <USBD_CtlError>
      break;
 8012014:	e004      	b.n	8012020 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8012016:	6839      	ldr	r1, [r7, #0]
 8012018:	6878      	ldr	r0, [r7, #4]
 801201a:	f000 fcb3 	bl	8012984 <USBD_CtlError>
      break;
 801201e:	e000      	b.n	8012022 <USBD_StdItfReq+0x76>
      break;
 8012020:	bf00      	nop
    }
    break;
 8012022:	e004      	b.n	801202e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8012024:	6839      	ldr	r1, [r7, #0]
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f000 fcac 	bl	8012984 <USBD_CtlError>
    break;
 801202c:	bf00      	nop
  }

  return ret;
 801202e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012030:	4618      	mov	r0, r3
 8012032:	3710      	adds	r7, #16
 8012034:	46bd      	mov	sp, r7
 8012036:	bd80      	pop	{r7, pc}

08012038 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012038:	b580      	push	{r7, lr}
 801203a:	b084      	sub	sp, #16
 801203c:	af00      	add	r7, sp, #0
 801203e:	6078      	str	r0, [r7, #4]
 8012040:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8012042:	2300      	movs	r3, #0
 8012044:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	889b      	ldrh	r3, [r3, #4]
 801204a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801204c:	683b      	ldr	r3, [r7, #0]
 801204e:	781b      	ldrb	r3, [r3, #0]
 8012050:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8012054:	2b20      	cmp	r3, #32
 8012056:	d004      	beq.n	8012062 <USBD_StdEPReq+0x2a>
 8012058:	2b40      	cmp	r3, #64	; 0x40
 801205a:	d002      	beq.n	8012062 <USBD_StdEPReq+0x2a>
 801205c:	2b00      	cmp	r3, #0
 801205e:	d00a      	beq.n	8012076 <USBD_StdEPReq+0x3e>
 8012060:	e135      	b.n	80122ce <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012068:	689b      	ldr	r3, [r3, #8]
 801206a:	6839      	ldr	r1, [r7, #0]
 801206c:	6878      	ldr	r0, [r7, #4]
 801206e:	4798      	blx	r3
 8012070:	4603      	mov	r3, r0
 8012072:	73fb      	strb	r3, [r7, #15]
    break;
 8012074:	e130      	b.n	80122d8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8012076:	683b      	ldr	r3, [r7, #0]
 8012078:	785b      	ldrb	r3, [r3, #1]
 801207a:	2b01      	cmp	r3, #1
 801207c:	d03e      	beq.n	80120fc <USBD_StdEPReq+0xc4>
 801207e:	2b03      	cmp	r3, #3
 8012080:	d002      	beq.n	8012088 <USBD_StdEPReq+0x50>
 8012082:	2b00      	cmp	r3, #0
 8012084:	d077      	beq.n	8012176 <USBD_StdEPReq+0x13e>
 8012086:	e11c      	b.n	80122c2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801208e:	2b02      	cmp	r3, #2
 8012090:	d002      	beq.n	8012098 <USBD_StdEPReq+0x60>
 8012092:	2b03      	cmp	r3, #3
 8012094:	d015      	beq.n	80120c2 <USBD_StdEPReq+0x8a>
 8012096:	e02b      	b.n	80120f0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012098:	7bbb      	ldrb	r3, [r7, #14]
 801209a:	2b00      	cmp	r3, #0
 801209c:	d00c      	beq.n	80120b8 <USBD_StdEPReq+0x80>
 801209e:	7bbb      	ldrb	r3, [r7, #14]
 80120a0:	2b80      	cmp	r3, #128	; 0x80
 80120a2:	d009      	beq.n	80120b8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80120a4:	7bbb      	ldrb	r3, [r7, #14]
 80120a6:	4619      	mov	r1, r3
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f008 f8b9 	bl	801a220 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80120ae:	2180      	movs	r1, #128	; 0x80
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f008 f8b5 	bl	801a220 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80120b6:	e020      	b.n	80120fa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80120b8:	6839      	ldr	r1, [r7, #0]
 80120ba:	6878      	ldr	r0, [r7, #4]
 80120bc:	f000 fc62 	bl	8012984 <USBD_CtlError>
        break;
 80120c0:	e01b      	b.n	80120fa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80120c2:	683b      	ldr	r3, [r7, #0]
 80120c4:	885b      	ldrh	r3, [r3, #2]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d10e      	bne.n	80120e8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80120ca:	7bbb      	ldrb	r3, [r7, #14]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d00b      	beq.n	80120e8 <USBD_StdEPReq+0xb0>
 80120d0:	7bbb      	ldrb	r3, [r7, #14]
 80120d2:	2b80      	cmp	r3, #128	; 0x80
 80120d4:	d008      	beq.n	80120e8 <USBD_StdEPReq+0xb0>
 80120d6:	683b      	ldr	r3, [r7, #0]
 80120d8:	88db      	ldrh	r3, [r3, #6]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d104      	bne.n	80120e8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80120de:	7bbb      	ldrb	r3, [r7, #14]
 80120e0:	4619      	mov	r1, r3
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f008 f89c 	bl	801a220 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80120e8:	6878      	ldr	r0, [r7, #4]
 80120ea:	f000 fd16 	bl	8012b1a <USBD_CtlSendStatus>

        break;
 80120ee:	e004      	b.n	80120fa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80120f0:	6839      	ldr	r1, [r7, #0]
 80120f2:	6878      	ldr	r0, [r7, #4]
 80120f4:	f000 fc46 	bl	8012984 <USBD_CtlError>
        break;
 80120f8:	bf00      	nop
      }
      break;
 80120fa:	e0e7      	b.n	80122cc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012102:	2b02      	cmp	r3, #2
 8012104:	d002      	beq.n	801210c <USBD_StdEPReq+0xd4>
 8012106:	2b03      	cmp	r3, #3
 8012108:	d015      	beq.n	8012136 <USBD_StdEPReq+0xfe>
 801210a:	e02d      	b.n	8012168 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801210c:	7bbb      	ldrb	r3, [r7, #14]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d00c      	beq.n	801212c <USBD_StdEPReq+0xf4>
 8012112:	7bbb      	ldrb	r3, [r7, #14]
 8012114:	2b80      	cmp	r3, #128	; 0x80
 8012116:	d009      	beq.n	801212c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8012118:	7bbb      	ldrb	r3, [r7, #14]
 801211a:	4619      	mov	r1, r3
 801211c:	6878      	ldr	r0, [r7, #4]
 801211e:	f008 f87f 	bl	801a220 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012122:	2180      	movs	r1, #128	; 0x80
 8012124:	6878      	ldr	r0, [r7, #4]
 8012126:	f008 f87b 	bl	801a220 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801212a:	e023      	b.n	8012174 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 801212c:	6839      	ldr	r1, [r7, #0]
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f000 fc28 	bl	8012984 <USBD_CtlError>
        break;
 8012134:	e01e      	b.n	8012174 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8012136:	683b      	ldr	r3, [r7, #0]
 8012138:	885b      	ldrh	r3, [r3, #2]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d119      	bne.n	8012172 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 801213e:	7bbb      	ldrb	r3, [r7, #14]
 8012140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012144:	2b00      	cmp	r3, #0
 8012146:	d004      	beq.n	8012152 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012148:	7bbb      	ldrb	r3, [r7, #14]
 801214a:	4619      	mov	r1, r3
 801214c:	6878      	ldr	r0, [r7, #4]
 801214e:	f008 f886 	bl	801a25e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8012152:	6878      	ldr	r0, [r7, #4]
 8012154:	f000 fce1 	bl	8012b1a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801215e:	689b      	ldr	r3, [r3, #8]
 8012160:	6839      	ldr	r1, [r7, #0]
 8012162:	6878      	ldr	r0, [r7, #4]
 8012164:	4798      	blx	r3
        }
        break;
 8012166:	e004      	b.n	8012172 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8012168:	6839      	ldr	r1, [r7, #0]
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f000 fc0a 	bl	8012984 <USBD_CtlError>
        break;
 8012170:	e000      	b.n	8012174 <USBD_StdEPReq+0x13c>
        break;
 8012172:	bf00      	nop
      }
      break;
 8012174:	e0aa      	b.n	80122cc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801217c:	2b02      	cmp	r3, #2
 801217e:	d002      	beq.n	8012186 <USBD_StdEPReq+0x14e>
 8012180:	2b03      	cmp	r3, #3
 8012182:	d032      	beq.n	80121ea <USBD_StdEPReq+0x1b2>
 8012184:	e097      	b.n	80122b6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012186:	7bbb      	ldrb	r3, [r7, #14]
 8012188:	2b00      	cmp	r3, #0
 801218a:	d007      	beq.n	801219c <USBD_StdEPReq+0x164>
 801218c:	7bbb      	ldrb	r3, [r7, #14]
 801218e:	2b80      	cmp	r3, #128	; 0x80
 8012190:	d004      	beq.n	801219c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8012192:	6839      	ldr	r1, [r7, #0]
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f000 fbf5 	bl	8012984 <USBD_CtlError>
          break;
 801219a:	e091      	b.n	80122c0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801219c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	da0b      	bge.n	80121bc <USBD_StdEPReq+0x184>
 80121a4:	7bbb      	ldrb	r3, [r7, #14]
 80121a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80121aa:	4613      	mov	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	4413      	add	r3, r2
 80121b0:	009b      	lsls	r3, r3, #2
 80121b2:	3310      	adds	r3, #16
 80121b4:	687a      	ldr	r2, [r7, #4]
 80121b6:	4413      	add	r3, r2
 80121b8:	3304      	adds	r3, #4
 80121ba:	e00b      	b.n	80121d4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80121bc:	7bbb      	ldrb	r3, [r7, #14]
 80121be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80121c2:	4613      	mov	r3, r2
 80121c4:	009b      	lsls	r3, r3, #2
 80121c6:	4413      	add	r3, r2
 80121c8:	009b      	lsls	r3, r3, #2
 80121ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80121ce:	687a      	ldr	r2, [r7, #4]
 80121d0:	4413      	add	r3, r2
 80121d2:	3304      	adds	r3, #4
 80121d4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	2200      	movs	r2, #0
 80121da:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80121dc:	68bb      	ldr	r3, [r7, #8]
 80121de:	2202      	movs	r2, #2
 80121e0:	4619      	mov	r1, r3
 80121e2:	6878      	ldr	r0, [r7, #4]
 80121e4:	f000 fc3f 	bl	8012a66 <USBD_CtlSendData>
        break;
 80121e8:	e06a      	b.n	80122c0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80121ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	da11      	bge.n	8012216 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80121f2:	7bbb      	ldrb	r3, [r7, #14]
 80121f4:	f003 020f 	and.w	r2, r3, #15
 80121f8:	6879      	ldr	r1, [r7, #4]
 80121fa:	4613      	mov	r3, r2
 80121fc:	009b      	lsls	r3, r3, #2
 80121fe:	4413      	add	r3, r2
 8012200:	009b      	lsls	r3, r3, #2
 8012202:	440b      	add	r3, r1
 8012204:	3324      	adds	r3, #36	; 0x24
 8012206:	881b      	ldrh	r3, [r3, #0]
 8012208:	2b00      	cmp	r3, #0
 801220a:	d117      	bne.n	801223c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 801220c:	6839      	ldr	r1, [r7, #0]
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f000 fbb8 	bl	8012984 <USBD_CtlError>
            break;
 8012214:	e054      	b.n	80122c0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8012216:	7bbb      	ldrb	r3, [r7, #14]
 8012218:	f003 020f 	and.w	r2, r3, #15
 801221c:	6879      	ldr	r1, [r7, #4]
 801221e:	4613      	mov	r3, r2
 8012220:	009b      	lsls	r3, r3, #2
 8012222:	4413      	add	r3, r2
 8012224:	009b      	lsls	r3, r3, #2
 8012226:	440b      	add	r3, r1
 8012228:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 801222c:	881b      	ldrh	r3, [r3, #0]
 801222e:	2b00      	cmp	r3, #0
 8012230:	d104      	bne.n	801223c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8012232:	6839      	ldr	r1, [r7, #0]
 8012234:	6878      	ldr	r0, [r7, #4]
 8012236:	f000 fba5 	bl	8012984 <USBD_CtlError>
            break;
 801223a:	e041      	b.n	80122c0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801223c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012240:	2b00      	cmp	r3, #0
 8012242:	da0b      	bge.n	801225c <USBD_StdEPReq+0x224>
 8012244:	7bbb      	ldrb	r3, [r7, #14]
 8012246:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801224a:	4613      	mov	r3, r2
 801224c:	009b      	lsls	r3, r3, #2
 801224e:	4413      	add	r3, r2
 8012250:	009b      	lsls	r3, r3, #2
 8012252:	3310      	adds	r3, #16
 8012254:	687a      	ldr	r2, [r7, #4]
 8012256:	4413      	add	r3, r2
 8012258:	3304      	adds	r3, #4
 801225a:	e00b      	b.n	8012274 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 801225c:	7bbb      	ldrb	r3, [r7, #14]
 801225e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012262:	4613      	mov	r3, r2
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	4413      	add	r3, r2
 8012268:	009b      	lsls	r3, r3, #2
 801226a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	4413      	add	r3, r2
 8012272:	3304      	adds	r3, #4
 8012274:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8012276:	7bbb      	ldrb	r3, [r7, #14]
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <USBD_StdEPReq+0x24a>
 801227c:	7bbb      	ldrb	r3, [r7, #14]
 801227e:	2b80      	cmp	r3, #128	; 0x80
 8012280:	d103      	bne.n	801228a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8012282:	68bb      	ldr	r3, [r7, #8]
 8012284:	2200      	movs	r2, #0
 8012286:	601a      	str	r2, [r3, #0]
 8012288:	e00e      	b.n	80122a8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 801228a:	7bbb      	ldrb	r3, [r7, #14]
 801228c:	4619      	mov	r1, r3
 801228e:	6878      	ldr	r0, [r7, #4]
 8012290:	f008 f804 	bl	801a29c <USBD_LL_IsStallEP>
 8012294:	4603      	mov	r3, r0
 8012296:	2b00      	cmp	r3, #0
 8012298:	d003      	beq.n	80122a2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 801229a:	68bb      	ldr	r3, [r7, #8]
 801229c:	2201      	movs	r2, #1
 801229e:	601a      	str	r2, [r3, #0]
 80122a0:	e002      	b.n	80122a8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80122a2:	68bb      	ldr	r3, [r7, #8]
 80122a4:	2200      	movs	r2, #0
 80122a6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	2202      	movs	r2, #2
 80122ac:	4619      	mov	r1, r3
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 fbd9 	bl	8012a66 <USBD_CtlSendData>
          break;
 80122b4:	e004      	b.n	80122c0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80122b6:	6839      	ldr	r1, [r7, #0]
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 fb63 	bl	8012984 <USBD_CtlError>
        break;
 80122be:	bf00      	nop
      }
      break;
 80122c0:	e004      	b.n	80122cc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80122c2:	6839      	ldr	r1, [r7, #0]
 80122c4:	6878      	ldr	r0, [r7, #4]
 80122c6:	f000 fb5d 	bl	8012984 <USBD_CtlError>
      break;
 80122ca:	bf00      	nop
    }
    break;
 80122cc:	e004      	b.n	80122d8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80122ce:	6839      	ldr	r1, [r7, #0]
 80122d0:	6878      	ldr	r0, [r7, #4]
 80122d2:	f000 fb57 	bl	8012984 <USBD_CtlError>
    break;
 80122d6:	bf00      	nop
  }

  return ret;
 80122d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3710      	adds	r7, #16
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}
	...

080122e4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80122e4:	b580      	push	{r7, lr}
 80122e6:	b084      	sub	sp, #16
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
 80122ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80122ee:	2300      	movs	r3, #0
 80122f0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80122f2:	2300      	movs	r3, #0
 80122f4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80122f6:	2300      	movs	r3, #0
 80122f8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80122fa:	683b      	ldr	r3, [r7, #0]
 80122fc:	885b      	ldrh	r3, [r3, #2]
 80122fe:	0a1b      	lsrs	r3, r3, #8
 8012300:	b29b      	uxth	r3, r3
 8012302:	3b01      	subs	r3, #1
 8012304:	2b0e      	cmp	r3, #14
 8012306:	f200 8152 	bhi.w	80125ae <USBD_GetDescriptor+0x2ca>
 801230a:	a201      	add	r2, pc, #4	; (adr r2, 8012310 <USBD_GetDescriptor+0x2c>)
 801230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012310:	08012381 	.word	0x08012381
 8012314:	08012399 	.word	0x08012399
 8012318:	080123d9 	.word	0x080123d9
 801231c:	080125af 	.word	0x080125af
 8012320:	080125af 	.word	0x080125af
 8012324:	0801254f 	.word	0x0801254f
 8012328:	0801257b 	.word	0x0801257b
 801232c:	080125af 	.word	0x080125af
 8012330:	080125af 	.word	0x080125af
 8012334:	080125af 	.word	0x080125af
 8012338:	080125af 	.word	0x080125af
 801233c:	080125af 	.word	0x080125af
 8012340:	080125af 	.word	0x080125af
 8012344:	080125af 	.word	0x080125af
 8012348:	0801234d 	.word	0x0801234d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
  case USB_DESC_TYPE_BOS:
    if (pdev->pDesc->GetBOSDescriptor != NULL)
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012352:	69db      	ldr	r3, [r3, #28]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d00b      	beq.n	8012370 <USBD_GetDescriptor+0x8c>
    {
      pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801235e:	69db      	ldr	r3, [r3, #28]
 8012360:	687a      	ldr	r2, [r7, #4]
 8012362:	7c12      	ldrb	r2, [r2, #16]
 8012364:	f107 0108 	add.w	r1, r7, #8
 8012368:	4610      	mov	r0, r2
 801236a:	4798      	blx	r3
 801236c:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801236e:	e126      	b.n	80125be <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 8012370:	6839      	ldr	r1, [r7, #0]
 8012372:	6878      	ldr	r0, [r7, #4]
 8012374:	f000 fb06 	bl	8012984 <USBD_CtlError>
      err++;
 8012378:	7afb      	ldrb	r3, [r7, #11]
 801237a:	3301      	adds	r3, #1
 801237c:	72fb      	strb	r3, [r7, #11]
    break;
 801237e:	e11e      	b.n	80125be <USBD_GetDescriptor+0x2da>
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012386:	681b      	ldr	r3, [r3, #0]
 8012388:	687a      	ldr	r2, [r7, #4]
 801238a:	7c12      	ldrb	r2, [r2, #16]
 801238c:	f107 0108 	add.w	r1, r7, #8
 8012390:	4610      	mov	r0, r2
 8012392:	4798      	blx	r3
 8012394:	60f8      	str	r0, [r7, #12]
    break;
 8012396:	e112      	b.n	80125be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	7c1b      	ldrb	r3, [r3, #16]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d10d      	bne.n	80123bc <USBD_GetDescriptor+0xd8>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80123a8:	f107 0208 	add.w	r2, r7, #8
 80123ac:	4610      	mov	r0, r2
 80123ae:	4798      	blx	r3
 80123b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	3301      	adds	r3, #1
 80123b6:	2202      	movs	r2, #2
 80123b8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80123ba:	e100      	b.n	80125be <USBD_GetDescriptor+0x2da>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80123c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123c4:	f107 0208 	add.w	r2, r7, #8
 80123c8:	4610      	mov	r0, r2
 80123ca:	4798      	blx	r3
 80123cc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	3301      	adds	r3, #1
 80123d2:	2202      	movs	r2, #2
 80123d4:	701a      	strb	r2, [r3, #0]
    break;
 80123d6:	e0f2      	b.n	80125be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80123d8:	683b      	ldr	r3, [r7, #0]
 80123da:	885b      	ldrh	r3, [r3, #2]
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	2b05      	cmp	r3, #5
 80123e0:	f200 80ac 	bhi.w	801253c <USBD_GetDescriptor+0x258>
 80123e4:	a201      	add	r2, pc, #4	; (adr r2, 80123ec <USBD_GetDescriptor+0x108>)
 80123e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80123ea:	bf00      	nop
 80123ec:	08012405 	.word	0x08012405
 80123f0:	08012439 	.word	0x08012439
 80123f4:	0801246d 	.word	0x0801246d
 80123f8:	080124a1 	.word	0x080124a1
 80123fc:	080124d5 	.word	0x080124d5
 8012400:	08012509 	.word	0x08012509
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801240a:	685b      	ldr	r3, [r3, #4]
 801240c:	2b00      	cmp	r3, #0
 801240e:	d00b      	beq.n	8012428 <USBD_GetDescriptor+0x144>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	687a      	ldr	r2, [r7, #4]
 801241a:	7c12      	ldrb	r2, [r2, #16]
 801241c:	f107 0108 	add.w	r1, r7, #8
 8012420:	4610      	mov	r0, r2
 8012422:	4798      	blx	r3
 8012424:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012426:	e091      	b.n	801254c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012428:	6839      	ldr	r1, [r7, #0]
 801242a:	6878      	ldr	r0, [r7, #4]
 801242c:	f000 faaa 	bl	8012984 <USBD_CtlError>
        err++;
 8012430:	7afb      	ldrb	r3, [r7, #11]
 8012432:	3301      	adds	r3, #1
 8012434:	72fb      	strb	r3, [r7, #11]
      break;
 8012436:	e089      	b.n	801254c <USBD_GetDescriptor+0x268>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801243e:	689b      	ldr	r3, [r3, #8]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d00b      	beq.n	801245c <USBD_GetDescriptor+0x178>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801244a:	689b      	ldr	r3, [r3, #8]
 801244c:	687a      	ldr	r2, [r7, #4]
 801244e:	7c12      	ldrb	r2, [r2, #16]
 8012450:	f107 0108 	add.w	r1, r7, #8
 8012454:	4610      	mov	r0, r2
 8012456:	4798      	blx	r3
 8012458:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801245a:	e077      	b.n	801254c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 801245c:	6839      	ldr	r1, [r7, #0]
 801245e:	6878      	ldr	r0, [r7, #4]
 8012460:	f000 fa90 	bl	8012984 <USBD_CtlError>
        err++;
 8012464:	7afb      	ldrb	r3, [r7, #11]
 8012466:	3301      	adds	r3, #1
 8012468:	72fb      	strb	r3, [r7, #11]
      break;
 801246a:	e06f      	b.n	801254c <USBD_GetDescriptor+0x268>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012472:	68db      	ldr	r3, [r3, #12]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d00b      	beq.n	8012490 <USBD_GetDescriptor+0x1ac>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801247e:	68db      	ldr	r3, [r3, #12]
 8012480:	687a      	ldr	r2, [r7, #4]
 8012482:	7c12      	ldrb	r2, [r2, #16]
 8012484:	f107 0108 	add.w	r1, r7, #8
 8012488:	4610      	mov	r0, r2
 801248a:	4798      	blx	r3
 801248c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801248e:	e05d      	b.n	801254c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 8012490:	6839      	ldr	r1, [r7, #0]
 8012492:	6878      	ldr	r0, [r7, #4]
 8012494:	f000 fa76 	bl	8012984 <USBD_CtlError>
        err++;
 8012498:	7afb      	ldrb	r3, [r7, #11]
 801249a:	3301      	adds	r3, #1
 801249c:	72fb      	strb	r3, [r7, #11]
      break;
 801249e:	e055      	b.n	801254c <USBD_GetDescriptor+0x268>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124a6:	691b      	ldr	r3, [r3, #16]
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d00b      	beq.n	80124c4 <USBD_GetDescriptor+0x1e0>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124b2:	691b      	ldr	r3, [r3, #16]
 80124b4:	687a      	ldr	r2, [r7, #4]
 80124b6:	7c12      	ldrb	r2, [r2, #16]
 80124b8:	f107 0108 	add.w	r1, r7, #8
 80124bc:	4610      	mov	r0, r2
 80124be:	4798      	blx	r3
 80124c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80124c2:	e043      	b.n	801254c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80124c4:	6839      	ldr	r1, [r7, #0]
 80124c6:	6878      	ldr	r0, [r7, #4]
 80124c8:	f000 fa5c 	bl	8012984 <USBD_CtlError>
        err++;
 80124cc:	7afb      	ldrb	r3, [r7, #11]
 80124ce:	3301      	adds	r3, #1
 80124d0:	72fb      	strb	r3, [r7, #11]
      break;
 80124d2:	e03b      	b.n	801254c <USBD_GetDescriptor+0x268>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124da:	695b      	ldr	r3, [r3, #20]
 80124dc:	2b00      	cmp	r3, #0
 80124de:	d00b      	beq.n	80124f8 <USBD_GetDescriptor+0x214>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80124e0:	687b      	ldr	r3, [r7, #4]
 80124e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80124e6:	695b      	ldr	r3, [r3, #20]
 80124e8:	687a      	ldr	r2, [r7, #4]
 80124ea:	7c12      	ldrb	r2, [r2, #16]
 80124ec:	f107 0108 	add.w	r1, r7, #8
 80124f0:	4610      	mov	r0, r2
 80124f2:	4798      	blx	r3
 80124f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80124f6:	e029      	b.n	801254c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 80124f8:	6839      	ldr	r1, [r7, #0]
 80124fa:	6878      	ldr	r0, [r7, #4]
 80124fc:	f000 fa42 	bl	8012984 <USBD_CtlError>
        err++;
 8012500:	7afb      	ldrb	r3, [r7, #11]
 8012502:	3301      	adds	r3, #1
 8012504:	72fb      	strb	r3, [r7, #11]
      break;
 8012506:	e021      	b.n	801254c <USBD_GetDescriptor+0x268>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801250e:	699b      	ldr	r3, [r3, #24]
 8012510:	2b00      	cmp	r3, #0
 8012512:	d00b      	beq.n	801252c <USBD_GetDescriptor+0x248>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801251a:	699b      	ldr	r3, [r3, #24]
 801251c:	687a      	ldr	r2, [r7, #4]
 801251e:	7c12      	ldrb	r2, [r2, #16]
 8012520:	f107 0108 	add.w	r1, r7, #8
 8012524:	4610      	mov	r0, r2
 8012526:	4798      	blx	r3
 8012528:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801252a:	e00f      	b.n	801254c <USBD_GetDescriptor+0x268>
        USBD_CtlError(pdev, req);
 801252c:	6839      	ldr	r1, [r7, #0]
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f000 fa28 	bl	8012984 <USBD_CtlError>
        err++;
 8012534:	7afb      	ldrb	r3, [r7, #11]
 8012536:	3301      	adds	r3, #1
 8012538:	72fb      	strb	r3, [r7, #11]
      break;
 801253a:	e007      	b.n	801254c <USBD_GetDescriptor+0x268>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801253c:	6839      	ldr	r1, [r7, #0]
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f000 fa20 	bl	8012984 <USBD_CtlError>
      err++;
 8012544:	7afb      	ldrb	r3, [r7, #11]
 8012546:	3301      	adds	r3, #1
 8012548:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801254a:	bf00      	nop
    }
    break;
 801254c:	e037      	b.n	80125be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	7c1b      	ldrb	r3, [r3, #16]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d109      	bne.n	801256a <USBD_GetDescriptor+0x286>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801255c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801255e:	f107 0208 	add.w	r2, r7, #8
 8012562:	4610      	mov	r0, r2
 8012564:	4798      	blx	r3
 8012566:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8012568:	e029      	b.n	80125be <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 801256a:	6839      	ldr	r1, [r7, #0]
 801256c:	6878      	ldr	r0, [r7, #4]
 801256e:	f000 fa09 	bl	8012984 <USBD_CtlError>
      err++;
 8012572:	7afb      	ldrb	r3, [r7, #11]
 8012574:	3301      	adds	r3, #1
 8012576:	72fb      	strb	r3, [r7, #11]
    break;
 8012578:	e021      	b.n	80125be <USBD_GetDescriptor+0x2da>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	7c1b      	ldrb	r3, [r3, #16]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d10d      	bne.n	801259e <USBD_GetDescriptor+0x2ba>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801258a:	f107 0208 	add.w	r2, r7, #8
 801258e:	4610      	mov	r0, r2
 8012590:	4798      	blx	r3
 8012592:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	3301      	adds	r3, #1
 8012598:	2207      	movs	r2, #7
 801259a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 801259c:	e00f      	b.n	80125be <USBD_GetDescriptor+0x2da>
      USBD_CtlError(pdev, req);
 801259e:	6839      	ldr	r1, [r7, #0]
 80125a0:	6878      	ldr	r0, [r7, #4]
 80125a2:	f000 f9ef 	bl	8012984 <USBD_CtlError>
      err++;
 80125a6:	7afb      	ldrb	r3, [r7, #11]
 80125a8:	3301      	adds	r3, #1
 80125aa:	72fb      	strb	r3, [r7, #11]
    break;
 80125ac:	e007      	b.n	80125be <USBD_GetDescriptor+0x2da>

  default:
    USBD_CtlError(pdev, req);
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 f9e7 	bl	8012984 <USBD_CtlError>
    err++;
 80125b6:	7afb      	ldrb	r3, [r7, #11]
 80125b8:	3301      	adds	r3, #1
 80125ba:	72fb      	strb	r3, [r7, #11]
    break;
 80125bc:	bf00      	nop
  }

  if (err != 0U)
 80125be:	7afb      	ldrb	r3, [r7, #11]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d11e      	bne.n	8012602 <USBD_GetDescriptor+0x31e>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80125c4:	683b      	ldr	r3, [r7, #0]
 80125c6:	88db      	ldrh	r3, [r3, #6]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d016      	beq.n	80125fa <USBD_GetDescriptor+0x316>
    {
      if (len != 0U)
 80125cc:	893b      	ldrh	r3, [r7, #8]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d00e      	beq.n	80125f0 <USBD_GetDescriptor+0x30c>
      {
        len = MIN(len, req->wLength);
 80125d2:	683b      	ldr	r3, [r7, #0]
 80125d4:	88da      	ldrh	r2, [r3, #6]
 80125d6:	893b      	ldrh	r3, [r7, #8]
 80125d8:	4293      	cmp	r3, r2
 80125da:	bf28      	it	cs
 80125dc:	4613      	movcs	r3, r2
 80125de:	b29b      	uxth	r3, r3
 80125e0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80125e2:	893b      	ldrh	r3, [r7, #8]
 80125e4:	461a      	mov	r2, r3
 80125e6:	68f9      	ldr	r1, [r7, #12]
 80125e8:	6878      	ldr	r0, [r7, #4]
 80125ea:	f000 fa3c 	bl	8012a66 <USBD_CtlSendData>
 80125ee:	e009      	b.n	8012604 <USBD_GetDescriptor+0x320>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80125f0:	6839      	ldr	r1, [r7, #0]
 80125f2:	6878      	ldr	r0, [r7, #4]
 80125f4:	f000 f9c6 	bl	8012984 <USBD_CtlError>
 80125f8:	e004      	b.n	8012604 <USBD_GetDescriptor+0x320>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80125fa:	6878      	ldr	r0, [r7, #4]
 80125fc:	f000 fa8d 	bl	8012b1a <USBD_CtlSendStatus>
 8012600:	e000      	b.n	8012604 <USBD_GetDescriptor+0x320>
    return;
 8012602:	bf00      	nop
    }
  }
}
 8012604:	3710      	adds	r7, #16
 8012606:	46bd      	mov	sp, r7
 8012608:	bd80      	pop	{r7, pc}
 801260a:	bf00      	nop

0801260c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b084      	sub	sp, #16
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012616:	683b      	ldr	r3, [r7, #0]
 8012618:	889b      	ldrh	r3, [r3, #4]
 801261a:	2b00      	cmp	r3, #0
 801261c:	d130      	bne.n	8012680 <USBD_SetAddress+0x74>
 801261e:	683b      	ldr	r3, [r7, #0]
 8012620:	88db      	ldrh	r3, [r3, #6]
 8012622:	2b00      	cmp	r3, #0
 8012624:	d12c      	bne.n	8012680 <USBD_SetAddress+0x74>
 8012626:	683b      	ldr	r3, [r7, #0]
 8012628:	885b      	ldrh	r3, [r3, #2]
 801262a:	2b7f      	cmp	r3, #127	; 0x7f
 801262c:	d828      	bhi.n	8012680 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	885b      	ldrh	r3, [r3, #2]
 8012632:	b2db      	uxtb	r3, r3
 8012634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012638:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012640:	2b03      	cmp	r3, #3
 8012642:	d104      	bne.n	801264e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8012644:	6839      	ldr	r1, [r7, #0]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	f000 f99c 	bl	8012984 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801264c:	e01c      	b.n	8012688 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	7bfa      	ldrb	r2, [r7, #15]
 8012652:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012656:	7bfb      	ldrb	r3, [r7, #15]
 8012658:	4619      	mov	r1, r3
 801265a:	6878      	ldr	r0, [r7, #4]
 801265c:	f007 fe4a 	bl	801a2f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012660:	6878      	ldr	r0, [r7, #4]
 8012662:	f000 fa5a 	bl	8012b1a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012666:	7bfb      	ldrb	r3, [r7, #15]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d004      	beq.n	8012676 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2202      	movs	r2, #2
 8012670:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012674:	e008      	b.n	8012688 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	2201      	movs	r2, #1
 801267a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801267e:	e003      	b.n	8012688 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012680:	6839      	ldr	r1, [r7, #0]
 8012682:	6878      	ldr	r0, [r7, #4]
 8012684:	f000 f97e 	bl	8012984 <USBD_CtlError>
  }
}
 8012688:	bf00      	nop
 801268a:	3710      	adds	r7, #16
 801268c:	46bd      	mov	sp, r7
 801268e:	bd80      	pop	{r7, pc}

08012690 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012690:	b580      	push	{r7, lr}
 8012692:	b084      	sub	sp, #16
 8012694:	af00      	add	r7, sp, #0
 8012696:	6078      	str	r0, [r7, #4]
 8012698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801269a:	2300      	movs	r3, #0
 801269c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 801269e:	683b      	ldr	r3, [r7, #0]
 80126a0:	885b      	ldrh	r3, [r3, #2]
 80126a2:	b2da      	uxtb	r2, r3
 80126a4:	4b4b      	ldr	r3, [pc, #300]	; (80127d4 <USBD_SetConfig+0x144>)
 80126a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80126a8:	4b4a      	ldr	r3, [pc, #296]	; (80127d4 <USBD_SetConfig+0x144>)
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	2b01      	cmp	r3, #1
 80126ae:	d905      	bls.n	80126bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80126b0:	6839      	ldr	r1, [r7, #0]
 80126b2:	6878      	ldr	r0, [r7, #4]
 80126b4:	f000 f966 	bl	8012984 <USBD_CtlError>
    return USBD_FAIL;
 80126b8:	2303      	movs	r3, #3
 80126ba:	e087      	b.n	80127cc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126c2:	2b02      	cmp	r3, #2
 80126c4:	d002      	beq.n	80126cc <USBD_SetConfig+0x3c>
 80126c6:	2b03      	cmp	r3, #3
 80126c8:	d025      	beq.n	8012716 <USBD_SetConfig+0x86>
 80126ca:	e071      	b.n	80127b0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80126cc:	4b41      	ldr	r3, [pc, #260]	; (80127d4 <USBD_SetConfig+0x144>)
 80126ce:	781b      	ldrb	r3, [r3, #0]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d01c      	beq.n	801270e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80126d4:	4b3f      	ldr	r3, [pc, #252]	; (80127d4 <USBD_SetConfig+0x144>)
 80126d6:	781b      	ldrb	r3, [r3, #0]
 80126d8:	461a      	mov	r2, r3
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80126de:	4b3d      	ldr	r3, [pc, #244]	; (80127d4 <USBD_SetConfig+0x144>)
 80126e0:	781b      	ldrb	r3, [r3, #0]
 80126e2:	4619      	mov	r1, r3
 80126e4:	6878      	ldr	r0, [r7, #4]
 80126e6:	f7ff f97d 	bl	80119e4 <USBD_SetClassConfig>
 80126ea:	4603      	mov	r3, r0
 80126ec:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80126ee:	7bfb      	ldrb	r3, [r7, #15]
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d004      	beq.n	80126fe <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80126f4:	6839      	ldr	r1, [r7, #0]
 80126f6:	6878      	ldr	r0, [r7, #4]
 80126f8:	f000 f944 	bl	8012984 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80126fc:	e065      	b.n	80127ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f000 fa0b 	bl	8012b1a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	2203      	movs	r2, #3
 8012708:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801270c:	e05d      	b.n	80127ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801270e:	6878      	ldr	r0, [r7, #4]
 8012710:	f000 fa03 	bl	8012b1a <USBD_CtlSendStatus>
    break;
 8012714:	e059      	b.n	80127ca <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8012716:	4b2f      	ldr	r3, [pc, #188]	; (80127d4 <USBD_SetConfig+0x144>)
 8012718:	781b      	ldrb	r3, [r3, #0]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d112      	bne.n	8012744 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	2202      	movs	r2, #2
 8012722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8012726:	4b2b      	ldr	r3, [pc, #172]	; (80127d4 <USBD_SetConfig+0x144>)
 8012728:	781b      	ldrb	r3, [r3, #0]
 801272a:	461a      	mov	r2, r3
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012730:	4b28      	ldr	r3, [pc, #160]	; (80127d4 <USBD_SetConfig+0x144>)
 8012732:	781b      	ldrb	r3, [r3, #0]
 8012734:	4619      	mov	r1, r3
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f7ff f970 	bl	8011a1c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 f9ec 	bl	8012b1a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8012742:	e042      	b.n	80127ca <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8012744:	4b23      	ldr	r3, [pc, #140]	; (80127d4 <USBD_SetConfig+0x144>)
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	461a      	mov	r2, r3
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	685b      	ldr	r3, [r3, #4]
 801274e:	429a      	cmp	r2, r3
 8012750:	d02a      	beq.n	80127a8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	b2db      	uxtb	r3, r3
 8012758:	4619      	mov	r1, r3
 801275a:	6878      	ldr	r0, [r7, #4]
 801275c:	f7ff f95e 	bl	8011a1c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8012760:	4b1c      	ldr	r3, [pc, #112]	; (80127d4 <USBD_SetConfig+0x144>)
 8012762:	781b      	ldrb	r3, [r3, #0]
 8012764:	461a      	mov	r2, r3
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801276a:	4b1a      	ldr	r3, [pc, #104]	; (80127d4 <USBD_SetConfig+0x144>)
 801276c:	781b      	ldrb	r3, [r3, #0]
 801276e:	4619      	mov	r1, r3
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7ff f937 	bl	80119e4 <USBD_SetClassConfig>
 8012776:	4603      	mov	r3, r0
 8012778:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801277a:	7bfb      	ldrb	r3, [r7, #15]
 801277c:	2b00      	cmp	r3, #0
 801277e:	d00f      	beq.n	80127a0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f000 f8fe 	bl	8012984 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012788:	687b      	ldr	r3, [r7, #4]
 801278a:	685b      	ldr	r3, [r3, #4]
 801278c:	b2db      	uxtb	r3, r3
 801278e:	4619      	mov	r1, r3
 8012790:	6878      	ldr	r0, [r7, #4]
 8012792:	f7ff f943 	bl	8011a1c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2202      	movs	r2, #2
 801279a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801279e:	e014      	b.n	80127ca <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f000 f9ba 	bl	8012b1a <USBD_CtlSendStatus>
    break;
 80127a6:	e010      	b.n	80127ca <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80127a8:	6878      	ldr	r0, [r7, #4]
 80127aa:	f000 f9b6 	bl	8012b1a <USBD_CtlSendStatus>
    break;
 80127ae:	e00c      	b.n	80127ca <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80127b0:	6839      	ldr	r1, [r7, #0]
 80127b2:	6878      	ldr	r0, [r7, #4]
 80127b4:	f000 f8e6 	bl	8012984 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80127b8:	4b06      	ldr	r3, [pc, #24]	; (80127d4 <USBD_SetConfig+0x144>)
 80127ba:	781b      	ldrb	r3, [r3, #0]
 80127bc:	4619      	mov	r1, r3
 80127be:	6878      	ldr	r0, [r7, #4]
 80127c0:	f7ff f92c 	bl	8011a1c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80127c4:	2303      	movs	r3, #3
 80127c6:	73fb      	strb	r3, [r7, #15]
    break;
 80127c8:	bf00      	nop
  }

  return ret;
 80127ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3710      	adds	r7, #16
 80127d0:	46bd      	mov	sp, r7
 80127d2:	bd80      	pop	{r7, pc}
 80127d4:	2000033c 	.word	0x2000033c

080127d8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80127e2:	683b      	ldr	r3, [r7, #0]
 80127e4:	88db      	ldrh	r3, [r3, #6]
 80127e6:	2b01      	cmp	r3, #1
 80127e8:	d004      	beq.n	80127f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80127ea:	6839      	ldr	r1, [r7, #0]
 80127ec:	6878      	ldr	r0, [r7, #4]
 80127ee:	f000 f8c9 	bl	8012984 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80127f2:	e021      	b.n	8012838 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	db17      	blt.n	801282e <USBD_GetConfig+0x56>
 80127fe:	2b02      	cmp	r3, #2
 8012800:	dd02      	ble.n	8012808 <USBD_GetConfig+0x30>
 8012802:	2b03      	cmp	r3, #3
 8012804:	d00b      	beq.n	801281e <USBD_GetConfig+0x46>
 8012806:	e012      	b.n	801282e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	2200      	movs	r2, #0
 801280c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	3308      	adds	r3, #8
 8012812:	2201      	movs	r2, #1
 8012814:	4619      	mov	r1, r3
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 f925 	bl	8012a66 <USBD_CtlSendData>
      break;
 801281c:	e00c      	b.n	8012838 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	3304      	adds	r3, #4
 8012822:	2201      	movs	r2, #1
 8012824:	4619      	mov	r1, r3
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f000 f91d 	bl	8012a66 <USBD_CtlSendData>
      break;
 801282c:	e004      	b.n	8012838 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801282e:	6839      	ldr	r1, [r7, #0]
 8012830:	6878      	ldr	r0, [r7, #4]
 8012832:	f000 f8a7 	bl	8012984 <USBD_CtlError>
      break;
 8012836:	bf00      	nop
}
 8012838:	bf00      	nop
 801283a:	3708      	adds	r7, #8
 801283c:	46bd      	mov	sp, r7
 801283e:	bd80      	pop	{r7, pc}

08012840 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012840:	b580      	push	{r7, lr}
 8012842:	b082      	sub	sp, #8
 8012844:	af00      	add	r7, sp, #0
 8012846:	6078      	str	r0, [r7, #4]
 8012848:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012850:	3b01      	subs	r3, #1
 8012852:	2b02      	cmp	r3, #2
 8012854:	d81e      	bhi.n	8012894 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	88db      	ldrh	r3, [r3, #6]
 801285a:	2b02      	cmp	r3, #2
 801285c:	d004      	beq.n	8012868 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801285e:	6839      	ldr	r1, [r7, #0]
 8012860:	6878      	ldr	r0, [r7, #4]
 8012862:	f000 f88f 	bl	8012984 <USBD_CtlError>
      break;
 8012866:	e01a      	b.n	801289e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2201      	movs	r2, #1
 801286c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012874:	2b00      	cmp	r3, #0
 8012876:	d005      	beq.n	8012884 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	68db      	ldr	r3, [r3, #12]
 801287c:	f043 0202 	orr.w	r2, r3, #2
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	330c      	adds	r3, #12
 8012888:	2202      	movs	r2, #2
 801288a:	4619      	mov	r1, r3
 801288c:	6878      	ldr	r0, [r7, #4]
 801288e:	f000 f8ea 	bl	8012a66 <USBD_CtlSendData>
    break;
 8012892:	e004      	b.n	801289e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8012894:	6839      	ldr	r1, [r7, #0]
 8012896:	6878      	ldr	r0, [r7, #4]
 8012898:	f000 f874 	bl	8012984 <USBD_CtlError>
    break;
 801289c:	bf00      	nop
  }
}
 801289e:	bf00      	nop
 80128a0:	3708      	adds	r7, #8
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}

080128a6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128a6:	b580      	push	{r7, lr}
 80128a8:	b082      	sub	sp, #8
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
 80128ae:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80128b0:	683b      	ldr	r3, [r7, #0]
 80128b2:	885b      	ldrh	r3, [r3, #2]
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d106      	bne.n	80128c6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	2201      	movs	r2, #1
 80128bc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 f92a 	bl	8012b1a <USBD_CtlSendStatus>
  }
}
 80128c6:	bf00      	nop
 80128c8:	3708      	adds	r7, #8
 80128ca:	46bd      	mov	sp, r7
 80128cc:	bd80      	pop	{r7, pc}

080128ce <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b082      	sub	sp, #8
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
 80128d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80128de:	3b01      	subs	r3, #1
 80128e0:	2b02      	cmp	r3, #2
 80128e2:	d80b      	bhi.n	80128fc <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	885b      	ldrh	r3, [r3, #2]
 80128e8:	2b01      	cmp	r3, #1
 80128ea:	d10c      	bne.n	8012906 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2200      	movs	r2, #0
 80128f0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f000 f910 	bl	8012b1a <USBD_CtlSendStatus>
      }
      break;
 80128fa:	e004      	b.n	8012906 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80128fc:	6839      	ldr	r1, [r7, #0]
 80128fe:	6878      	ldr	r0, [r7, #4]
 8012900:	f000 f840 	bl	8012984 <USBD_CtlError>
      break;
 8012904:	e000      	b.n	8012908 <USBD_ClrFeature+0x3a>
      break;
 8012906:	bf00      	nop
  }
}
 8012908:	bf00      	nop
 801290a:	3708      	adds	r7, #8
 801290c:	46bd      	mov	sp, r7
 801290e:	bd80      	pop	{r7, pc}

08012910 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012910:	b580      	push	{r7, lr}
 8012912:	b084      	sub	sp, #16
 8012914:	af00      	add	r7, sp, #0
 8012916:	6078      	str	r0, [r7, #4]
 8012918:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801291a:	683b      	ldr	r3, [r7, #0]
 801291c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	781a      	ldrb	r2, [r3, #0]
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	3301      	adds	r3, #1
 801292a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	781a      	ldrb	r2, [r3, #0]
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	3301      	adds	r3, #1
 8012938:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801293a:	68f8      	ldr	r0, [r7, #12]
 801293c:	f7ff faa9 	bl	8011e92 <SWAPBYTE>
 8012940:	4603      	mov	r3, r0
 8012942:	461a      	mov	r2, r3
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	3301      	adds	r3, #1
 801294c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	3301      	adds	r3, #1
 8012952:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012954:	68f8      	ldr	r0, [r7, #12]
 8012956:	f7ff fa9c 	bl	8011e92 <SWAPBYTE>
 801295a:	4603      	mov	r3, r0
 801295c:	461a      	mov	r2, r3
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	3301      	adds	r3, #1
 8012966:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012968:	68fb      	ldr	r3, [r7, #12]
 801296a:	3301      	adds	r3, #1
 801296c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f7ff fa8f 	bl	8011e92 <SWAPBYTE>
 8012974:	4603      	mov	r3, r0
 8012976:	461a      	mov	r2, r3
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	80da      	strh	r2, [r3, #6]
}
 801297c:	bf00      	nop
 801297e:	3710      	adds	r7, #16
 8012980:	46bd      	mov	sp, r7
 8012982:	bd80      	pop	{r7, pc}

08012984 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b082      	sub	sp, #8
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
 801298c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801298e:	2180      	movs	r1, #128	; 0x80
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f007 fc45 	bl	801a220 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012996:	2100      	movs	r1, #0
 8012998:	6878      	ldr	r0, [r7, #4]
 801299a:	f007 fc41 	bl	801a220 <USBD_LL_StallEP>
}
 801299e:	bf00      	nop
 80129a0:	3708      	adds	r7, #8
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}

080129a6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80129a6:	b580      	push	{r7, lr}
 80129a8:	b086      	sub	sp, #24
 80129aa:	af00      	add	r7, sp, #0
 80129ac:	60f8      	str	r0, [r7, #12]
 80129ae:	60b9      	str	r1, [r7, #8]
 80129b0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80129b2:	2300      	movs	r3, #0
 80129b4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80129b6:	68fb      	ldr	r3, [r7, #12]
 80129b8:	2b00      	cmp	r3, #0
 80129ba:	d036      	beq.n	8012a2a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80129c0:	6938      	ldr	r0, [r7, #16]
 80129c2:	f000 f836 	bl	8012a32 <USBD_GetLen>
 80129c6:	4603      	mov	r3, r0
 80129c8:	3301      	adds	r3, #1
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	005b      	lsls	r3, r3, #1
 80129ce:	b29a      	uxth	r2, r3
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80129d4:	7dfb      	ldrb	r3, [r7, #23]
 80129d6:	68ba      	ldr	r2, [r7, #8]
 80129d8:	4413      	add	r3, r2
 80129da:	687a      	ldr	r2, [r7, #4]
 80129dc:	7812      	ldrb	r2, [r2, #0]
 80129de:	701a      	strb	r2, [r3, #0]
  idx++;
 80129e0:	7dfb      	ldrb	r3, [r7, #23]
 80129e2:	3301      	adds	r3, #1
 80129e4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80129e6:	7dfb      	ldrb	r3, [r7, #23]
 80129e8:	68ba      	ldr	r2, [r7, #8]
 80129ea:	4413      	add	r3, r2
 80129ec:	2203      	movs	r2, #3
 80129ee:	701a      	strb	r2, [r3, #0]
  idx++;
 80129f0:	7dfb      	ldrb	r3, [r7, #23]
 80129f2:	3301      	adds	r3, #1
 80129f4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80129f6:	e013      	b.n	8012a20 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80129f8:	7dfb      	ldrb	r3, [r7, #23]
 80129fa:	68ba      	ldr	r2, [r7, #8]
 80129fc:	4413      	add	r3, r2
 80129fe:	693a      	ldr	r2, [r7, #16]
 8012a00:	7812      	ldrb	r2, [r2, #0]
 8012a02:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8012a04:	693b      	ldr	r3, [r7, #16]
 8012a06:	3301      	adds	r3, #1
 8012a08:	613b      	str	r3, [r7, #16]
    idx++;
 8012a0a:	7dfb      	ldrb	r3, [r7, #23]
 8012a0c:	3301      	adds	r3, #1
 8012a0e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8012a10:	7dfb      	ldrb	r3, [r7, #23]
 8012a12:	68ba      	ldr	r2, [r7, #8]
 8012a14:	4413      	add	r3, r2
 8012a16:	2200      	movs	r2, #0
 8012a18:	701a      	strb	r2, [r3, #0]
    idx++;
 8012a1a:	7dfb      	ldrb	r3, [r7, #23]
 8012a1c:	3301      	adds	r3, #1
 8012a1e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	781b      	ldrb	r3, [r3, #0]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d1e7      	bne.n	80129f8 <USBD_GetString+0x52>
 8012a28:	e000      	b.n	8012a2c <USBD_GetString+0x86>
    return;
 8012a2a:	bf00      	nop
  }
}
 8012a2c:	3718      	adds	r7, #24
 8012a2e:	46bd      	mov	sp, r7
 8012a30:	bd80      	pop	{r7, pc}

08012a32 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8012a32:	b480      	push	{r7}
 8012a34:	b085      	sub	sp, #20
 8012a36:	af00      	add	r7, sp, #0
 8012a38:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8012a3a:	2300      	movs	r3, #0
 8012a3c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8012a42:	e005      	b.n	8012a50 <USBD_GetLen+0x1e>
  {
    len++;
 8012a44:	7bfb      	ldrb	r3, [r7, #15]
 8012a46:	3301      	adds	r3, #1
 8012a48:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8012a4a:	68bb      	ldr	r3, [r7, #8]
 8012a4c:	3301      	adds	r3, #1
 8012a4e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	781b      	ldrb	r3, [r3, #0]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d1f5      	bne.n	8012a44 <USBD_GetLen+0x12>
  }

  return len;
 8012a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3714      	adds	r7, #20
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a64:	4770      	bx	lr

08012a66 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8012a66:	b580      	push	{r7, lr}
 8012a68:	b084      	sub	sp, #16
 8012a6a:	af00      	add	r7, sp, #0
 8012a6c:	60f8      	str	r0, [r7, #12]
 8012a6e:	60b9      	str	r1, [r7, #8]
 8012a70:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	2202      	movs	r2, #2
 8012a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8012a7a:	68fb      	ldr	r3, [r7, #12]
 8012a7c:	687a      	ldr	r2, [r7, #4]
 8012a7e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8012a80:	68fb      	ldr	r3, [r7, #12]
 8012a82:	687a      	ldr	r2, [r7, #4]
 8012a84:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	68ba      	ldr	r2, [r7, #8]
 8012a8a:	2100      	movs	r1, #0
 8012a8c:	68f8      	ldr	r0, [r7, #12]
 8012a8e:	f007 fc50 	bl	801a332 <USBD_LL_Transmit>

  return USBD_OK;
 8012a92:	2300      	movs	r3, #0
}
 8012a94:	4618      	mov	r0, r3
 8012a96:	3710      	adds	r7, #16
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}

08012a9c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8012a9c:	b580      	push	{r7, lr}
 8012a9e:	b084      	sub	sp, #16
 8012aa0:	af00      	add	r7, sp, #0
 8012aa2:	60f8      	str	r0, [r7, #12]
 8012aa4:	60b9      	str	r1, [r7, #8]
 8012aa6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	68ba      	ldr	r2, [r7, #8]
 8012aac:	2100      	movs	r1, #0
 8012aae:	68f8      	ldr	r0, [r7, #12]
 8012ab0:	f007 fc3f 	bl	801a332 <USBD_LL_Transmit>

  return USBD_OK;
 8012ab4:	2300      	movs	r3, #0
}
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	3710      	adds	r7, #16
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}

08012abe <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8012abe:	b580      	push	{r7, lr}
 8012ac0:	b084      	sub	sp, #16
 8012ac2:	af00      	add	r7, sp, #0
 8012ac4:	60f8      	str	r0, [r7, #12]
 8012ac6:	60b9      	str	r1, [r7, #8]
 8012ac8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	2203      	movs	r2, #3
 8012ace:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	687a      	ldr	r2, [r7, #4]
 8012ad6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	687a      	ldr	r2, [r7, #4]
 8012ade:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	68ba      	ldr	r2, [r7, #8]
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	68f8      	ldr	r0, [r7, #12]
 8012aea:	f007 fc43 	bl	801a374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012aee:	2300      	movs	r3, #0
}
 8012af0:	4618      	mov	r0, r3
 8012af2:	3710      	adds	r7, #16
 8012af4:	46bd      	mov	sp, r7
 8012af6:	bd80      	pop	{r7, pc}

08012af8 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8012af8:	b580      	push	{r7, lr}
 8012afa:	b084      	sub	sp, #16
 8012afc:	af00      	add	r7, sp, #0
 8012afe:	60f8      	str	r0, [r7, #12]
 8012b00:	60b9      	str	r1, [r7, #8]
 8012b02:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8012b04:	687b      	ldr	r3, [r7, #4]
 8012b06:	68ba      	ldr	r2, [r7, #8]
 8012b08:	2100      	movs	r1, #0
 8012b0a:	68f8      	ldr	r0, [r7, #12]
 8012b0c:	f007 fc32 	bl	801a374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b10:	2300      	movs	r3, #0
}
 8012b12:	4618      	mov	r0, r3
 8012b14:	3710      	adds	r7, #16
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bd80      	pop	{r7, pc}

08012b1a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8012b1a:	b580      	push	{r7, lr}
 8012b1c:	b082      	sub	sp, #8
 8012b1e:	af00      	add	r7, sp, #0
 8012b20:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	2204      	movs	r2, #4
 8012b26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	2200      	movs	r2, #0
 8012b2e:	2100      	movs	r1, #0
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f007 fbfe 	bl	801a332 <USBD_LL_Transmit>

  return USBD_OK;
 8012b36:	2300      	movs	r3, #0
}
 8012b38:	4618      	mov	r0, r3
 8012b3a:	3708      	adds	r7, #8
 8012b3c:	46bd      	mov	sp, r7
 8012b3e:	bd80      	pop	{r7, pc}

08012b40 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b082      	sub	sp, #8
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	2205      	movs	r2, #5
 8012b4c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012b50:	2300      	movs	r3, #0
 8012b52:	2200      	movs	r2, #0
 8012b54:	2100      	movs	r1, #0
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f007 fc0c 	bl	801a374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8012b5c:	2300      	movs	r3, #0
}
 8012b5e:	4618      	mov	r0, r3
 8012b60:	3708      	adds	r7, #8
 8012b62:	46bd      	mov	sp, r7
 8012b64:	bd80      	pop	{r7, pc}
	...

08012b68 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b084      	sub	sp, #16
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	4603      	mov	r3, r0
 8012b70:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8012b72:	79fb      	ldrb	r3, [r7, #7]
 8012b74:	4a08      	ldr	r2, [pc, #32]	; (8012b98 <disk_status+0x30>)
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	4413      	add	r3, r2
 8012b7a:	685b      	ldr	r3, [r3, #4]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	79fa      	ldrb	r2, [r7, #7]
 8012b80:	4905      	ldr	r1, [pc, #20]	; (8012b98 <disk_status+0x30>)
 8012b82:	440a      	add	r2, r1
 8012b84:	7a12      	ldrb	r2, [r2, #8]
 8012b86:	4610      	mov	r0, r2
 8012b88:	4798      	blx	r3
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8012b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3710      	adds	r7, #16
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}
 8012b98:	20000368 	.word	0x20000368

08012b9c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8012b9c:	b580      	push	{r7, lr}
 8012b9e:	b084      	sub	sp, #16
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8012ba6:	2300      	movs	r3, #0
 8012ba8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8012baa:	79fb      	ldrb	r3, [r7, #7]
 8012bac:	4a0d      	ldr	r2, [pc, #52]	; (8012be4 <disk_initialize+0x48>)
 8012bae:	5cd3      	ldrb	r3, [r2, r3]
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d111      	bne.n	8012bd8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8012bb4:	79fb      	ldrb	r3, [r7, #7]
 8012bb6:	4a0b      	ldr	r2, [pc, #44]	; (8012be4 <disk_initialize+0x48>)
 8012bb8:	2101      	movs	r1, #1
 8012bba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8012bbc:	79fb      	ldrb	r3, [r7, #7]
 8012bbe:	4a09      	ldr	r2, [pc, #36]	; (8012be4 <disk_initialize+0x48>)
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	4413      	add	r3, r2
 8012bc4:	685b      	ldr	r3, [r3, #4]
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	79fa      	ldrb	r2, [r7, #7]
 8012bca:	4906      	ldr	r1, [pc, #24]	; (8012be4 <disk_initialize+0x48>)
 8012bcc:	440a      	add	r2, r1
 8012bce:	7a12      	ldrb	r2, [r2, #8]
 8012bd0:	4610      	mov	r0, r2
 8012bd2:	4798      	blx	r3
 8012bd4:	4603      	mov	r3, r0
 8012bd6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8012bd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bda:	4618      	mov	r0, r3
 8012bdc:	3710      	adds	r7, #16
 8012bde:	46bd      	mov	sp, r7
 8012be0:	bd80      	pop	{r7, pc}
 8012be2:	bf00      	nop
 8012be4:	20000368 	.word	0x20000368

08012be8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8012be8:	b590      	push	{r4, r7, lr}
 8012bea:	b087      	sub	sp, #28
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	60b9      	str	r1, [r7, #8]
 8012bf0:	607a      	str	r2, [r7, #4]
 8012bf2:	603b      	str	r3, [r7, #0]
 8012bf4:	4603      	mov	r3, r0
 8012bf6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8012bf8:	7bfb      	ldrb	r3, [r7, #15]
 8012bfa:	4a0a      	ldr	r2, [pc, #40]	; (8012c24 <disk_read+0x3c>)
 8012bfc:	009b      	lsls	r3, r3, #2
 8012bfe:	4413      	add	r3, r2
 8012c00:	685b      	ldr	r3, [r3, #4]
 8012c02:	689c      	ldr	r4, [r3, #8]
 8012c04:	7bfb      	ldrb	r3, [r7, #15]
 8012c06:	4a07      	ldr	r2, [pc, #28]	; (8012c24 <disk_read+0x3c>)
 8012c08:	4413      	add	r3, r2
 8012c0a:	7a18      	ldrb	r0, [r3, #8]
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	68b9      	ldr	r1, [r7, #8]
 8012c12:	47a0      	blx	r4
 8012c14:	4603      	mov	r3, r0
 8012c16:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	371c      	adds	r7, #28
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	bd90      	pop	{r4, r7, pc}
 8012c22:	bf00      	nop
 8012c24:	20000368 	.word	0x20000368

08012c28 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8012c28:	b590      	push	{r4, r7, lr}
 8012c2a:	b087      	sub	sp, #28
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	60b9      	str	r1, [r7, #8]
 8012c30:	607a      	str	r2, [r7, #4]
 8012c32:	603b      	str	r3, [r7, #0]
 8012c34:	4603      	mov	r3, r0
 8012c36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8012c38:	7bfb      	ldrb	r3, [r7, #15]
 8012c3a:	4a0a      	ldr	r2, [pc, #40]	; (8012c64 <disk_write+0x3c>)
 8012c3c:	009b      	lsls	r3, r3, #2
 8012c3e:	4413      	add	r3, r2
 8012c40:	685b      	ldr	r3, [r3, #4]
 8012c42:	68dc      	ldr	r4, [r3, #12]
 8012c44:	7bfb      	ldrb	r3, [r7, #15]
 8012c46:	4a07      	ldr	r2, [pc, #28]	; (8012c64 <disk_write+0x3c>)
 8012c48:	4413      	add	r3, r2
 8012c4a:	7a18      	ldrb	r0, [r3, #8]
 8012c4c:	683b      	ldr	r3, [r7, #0]
 8012c4e:	687a      	ldr	r2, [r7, #4]
 8012c50:	68b9      	ldr	r1, [r7, #8]
 8012c52:	47a0      	blx	r4
 8012c54:	4603      	mov	r3, r0
 8012c56:	75fb      	strb	r3, [r7, #23]
  return res;
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	371c      	adds	r7, #28
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd90      	pop	{r4, r7, pc}
 8012c62:	bf00      	nop
 8012c64:	20000368 	.word	0x20000368

08012c68 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	4603      	mov	r3, r0
 8012c70:	603a      	str	r2, [r7, #0]
 8012c72:	71fb      	strb	r3, [r7, #7]
 8012c74:	460b      	mov	r3, r1
 8012c76:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8012c78:	79fb      	ldrb	r3, [r7, #7]
 8012c7a:	4a09      	ldr	r2, [pc, #36]	; (8012ca0 <disk_ioctl+0x38>)
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	4413      	add	r3, r2
 8012c80:	685b      	ldr	r3, [r3, #4]
 8012c82:	691b      	ldr	r3, [r3, #16]
 8012c84:	79fa      	ldrb	r2, [r7, #7]
 8012c86:	4906      	ldr	r1, [pc, #24]	; (8012ca0 <disk_ioctl+0x38>)
 8012c88:	440a      	add	r2, r1
 8012c8a:	7a10      	ldrb	r0, [r2, #8]
 8012c8c:	79b9      	ldrb	r1, [r7, #6]
 8012c8e:	683a      	ldr	r2, [r7, #0]
 8012c90:	4798      	blx	r3
 8012c92:	4603      	mov	r3, r0
 8012c94:	73fb      	strb	r3, [r7, #15]
  return res;
 8012c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c98:	4618      	mov	r0, r3
 8012c9a:	3710      	adds	r7, #16
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	bd80      	pop	{r7, pc}
 8012ca0:	20000368 	.word	0x20000368

08012ca4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b085      	sub	sp, #20
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	3301      	adds	r3, #1
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8012cb4:	89fb      	ldrh	r3, [r7, #14]
 8012cb6:	021b      	lsls	r3, r3, #8
 8012cb8:	b21a      	sxth	r2, r3
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	781b      	ldrb	r3, [r3, #0]
 8012cbe:	b21b      	sxth	r3, r3
 8012cc0:	4313      	orrs	r3, r2
 8012cc2:	b21b      	sxth	r3, r3
 8012cc4:	81fb      	strh	r3, [r7, #14]
	return rv;
 8012cc6:	89fb      	ldrh	r3, [r7, #14]
}
 8012cc8:	4618      	mov	r0, r3
 8012cca:	3714      	adds	r7, #20
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b085      	sub	sp, #20
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	3303      	adds	r3, #3
 8012ce0:	781b      	ldrb	r3, [r3, #0]
 8012ce2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	021b      	lsls	r3, r3, #8
 8012ce8:	687a      	ldr	r2, [r7, #4]
 8012cea:	3202      	adds	r2, #2
 8012cec:	7812      	ldrb	r2, [r2, #0]
 8012cee:	4313      	orrs	r3, r2
 8012cf0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	021b      	lsls	r3, r3, #8
 8012cf6:	687a      	ldr	r2, [r7, #4]
 8012cf8:	3201      	adds	r2, #1
 8012cfa:	7812      	ldrb	r2, [r2, #0]
 8012cfc:	4313      	orrs	r3, r2
 8012cfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	021b      	lsls	r3, r3, #8
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	7812      	ldrb	r2, [r2, #0]
 8012d08:	4313      	orrs	r3, r2
 8012d0a:	60fb      	str	r3, [r7, #12]
	return rv;
 8012d0c:	68fb      	ldr	r3, [r7, #12]
}
 8012d0e:	4618      	mov	r0, r3
 8012d10:	3714      	adds	r7, #20
 8012d12:	46bd      	mov	sp, r7
 8012d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d18:	4770      	bx	lr

08012d1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8012d1a:	b480      	push	{r7}
 8012d1c:	b083      	sub	sp, #12
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	6078      	str	r0, [r7, #4]
 8012d22:	460b      	mov	r3, r1
 8012d24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	1c5a      	adds	r2, r3, #1
 8012d2a:	607a      	str	r2, [r7, #4]
 8012d2c:	887a      	ldrh	r2, [r7, #2]
 8012d2e:	b2d2      	uxtb	r2, r2
 8012d30:	701a      	strb	r2, [r3, #0]
 8012d32:	887b      	ldrh	r3, [r7, #2]
 8012d34:	0a1b      	lsrs	r3, r3, #8
 8012d36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	1c5a      	adds	r2, r3, #1
 8012d3c:	607a      	str	r2, [r7, #4]
 8012d3e:	887a      	ldrh	r2, [r7, #2]
 8012d40:	b2d2      	uxtb	r2, r2
 8012d42:	701a      	strb	r2, [r3, #0]
}
 8012d44:	bf00      	nop
 8012d46:	370c      	adds	r7, #12
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d4e:	4770      	bx	lr

08012d50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8012d50:	b480      	push	{r7}
 8012d52:	b083      	sub	sp, #12
 8012d54:	af00      	add	r7, sp, #0
 8012d56:	6078      	str	r0, [r7, #4]
 8012d58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	1c5a      	adds	r2, r3, #1
 8012d5e:	607a      	str	r2, [r7, #4]
 8012d60:	683a      	ldr	r2, [r7, #0]
 8012d62:	b2d2      	uxtb	r2, r2
 8012d64:	701a      	strb	r2, [r3, #0]
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	0a1b      	lsrs	r3, r3, #8
 8012d6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d6c:	687b      	ldr	r3, [r7, #4]
 8012d6e:	1c5a      	adds	r2, r3, #1
 8012d70:	607a      	str	r2, [r7, #4]
 8012d72:	683a      	ldr	r2, [r7, #0]
 8012d74:	b2d2      	uxtb	r2, r2
 8012d76:	701a      	strb	r2, [r3, #0]
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	0a1b      	lsrs	r3, r3, #8
 8012d7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	1c5a      	adds	r2, r3, #1
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	b2d2      	uxtb	r2, r2
 8012d88:	701a      	strb	r2, [r3, #0]
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	0a1b      	lsrs	r3, r3, #8
 8012d8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	1c5a      	adds	r2, r3, #1
 8012d94:	607a      	str	r2, [r7, #4]
 8012d96:	683a      	ldr	r2, [r7, #0]
 8012d98:	b2d2      	uxtb	r2, r2
 8012d9a:	701a      	strb	r2, [r3, #0]
}
 8012d9c:	bf00      	nop
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr

08012da8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8012da8:	b480      	push	{r7}
 8012daa:	b087      	sub	sp, #28
 8012dac:	af00      	add	r7, sp, #0
 8012dae:	60f8      	str	r0, [r7, #12]
 8012db0:	60b9      	str	r1, [r7, #8]
 8012db2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8012db8:	68bb      	ldr	r3, [r7, #8]
 8012dba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d00d      	beq.n	8012dde <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8012dc2:	693a      	ldr	r2, [r7, #16]
 8012dc4:	1c53      	adds	r3, r2, #1
 8012dc6:	613b      	str	r3, [r7, #16]
 8012dc8:	697b      	ldr	r3, [r7, #20]
 8012dca:	1c59      	adds	r1, r3, #1
 8012dcc:	6179      	str	r1, [r7, #20]
 8012dce:	7812      	ldrb	r2, [r2, #0]
 8012dd0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	3b01      	subs	r3, #1
 8012dd6:	607b      	str	r3, [r7, #4]
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	2b00      	cmp	r3, #0
 8012ddc:	d1f1      	bne.n	8012dc2 <mem_cpy+0x1a>
	}
}
 8012dde:	bf00      	nop
 8012de0:	371c      	adds	r7, #28
 8012de2:	46bd      	mov	sp, r7
 8012de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de8:	4770      	bx	lr

08012dea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8012dea:	b480      	push	{r7}
 8012dec:	b087      	sub	sp, #28
 8012dee:	af00      	add	r7, sp, #0
 8012df0:	60f8      	str	r0, [r7, #12]
 8012df2:	60b9      	str	r1, [r7, #8]
 8012df4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8012df6:	68fb      	ldr	r3, [r7, #12]
 8012df8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8012dfa:	697b      	ldr	r3, [r7, #20]
 8012dfc:	1c5a      	adds	r2, r3, #1
 8012dfe:	617a      	str	r2, [r7, #20]
 8012e00:	68ba      	ldr	r2, [r7, #8]
 8012e02:	b2d2      	uxtb	r2, r2
 8012e04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	3b01      	subs	r3, #1
 8012e0a:	607b      	str	r3, [r7, #4]
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d1f3      	bne.n	8012dfa <mem_set+0x10>
}
 8012e12:	bf00      	nop
 8012e14:	371c      	adds	r7, #28
 8012e16:	46bd      	mov	sp, r7
 8012e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1c:	4770      	bx	lr

08012e1e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8012e1e:	b480      	push	{r7}
 8012e20:	b089      	sub	sp, #36	; 0x24
 8012e22:	af00      	add	r7, sp, #0
 8012e24:	60f8      	str	r0, [r7, #12]
 8012e26:	60b9      	str	r1, [r7, #8]
 8012e28:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	61fb      	str	r3, [r7, #28]
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8012e32:	2300      	movs	r3, #0
 8012e34:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8012e36:	69fb      	ldr	r3, [r7, #28]
 8012e38:	1c5a      	adds	r2, r3, #1
 8012e3a:	61fa      	str	r2, [r7, #28]
 8012e3c:	781b      	ldrb	r3, [r3, #0]
 8012e3e:	4619      	mov	r1, r3
 8012e40:	69bb      	ldr	r3, [r7, #24]
 8012e42:	1c5a      	adds	r2, r3, #1
 8012e44:	61ba      	str	r2, [r7, #24]
 8012e46:	781b      	ldrb	r3, [r3, #0]
 8012e48:	1acb      	subs	r3, r1, r3
 8012e4a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	3b01      	subs	r3, #1
 8012e50:	607b      	str	r3, [r7, #4]
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d002      	beq.n	8012e5e <mem_cmp+0x40>
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d0eb      	beq.n	8012e36 <mem_cmp+0x18>

	return r;
 8012e5e:	697b      	ldr	r3, [r7, #20]
}
 8012e60:	4618      	mov	r0, r3
 8012e62:	3724      	adds	r7, #36	; 0x24
 8012e64:	46bd      	mov	sp, r7
 8012e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e6a:	4770      	bx	lr

08012e6c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8012e6c:	b480      	push	{r7}
 8012e6e:	b083      	sub	sp, #12
 8012e70:	af00      	add	r7, sp, #0
 8012e72:	6078      	str	r0, [r7, #4]
 8012e74:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012e76:	e002      	b.n	8012e7e <chk_chr+0x12>
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	3301      	adds	r3, #1
 8012e7c:	607b      	str	r3, [r7, #4]
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d005      	beq.n	8012e92 <chk_chr+0x26>
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	781b      	ldrb	r3, [r3, #0]
 8012e8a:	461a      	mov	r2, r3
 8012e8c:	683b      	ldr	r3, [r7, #0]
 8012e8e:	4293      	cmp	r3, r2
 8012e90:	d1f2      	bne.n	8012e78 <chk_chr+0xc>
	return *str;
 8012e92:	687b      	ldr	r3, [r7, #4]
 8012e94:	781b      	ldrb	r3, [r3, #0]
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	370c      	adds	r7, #12
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ea0:	4770      	bx	lr

08012ea2 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8012ea2:	b580      	push	{r7, lr}
 8012ea4:	b082      	sub	sp, #8
 8012ea6:	af00      	add	r7, sp, #0
 8012ea8:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d009      	beq.n	8012ec4 <lock_fs+0x22>
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	68db      	ldr	r3, [r3, #12]
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	f002 fd8d 	bl	80159d4 <ff_req_grant>
 8012eba:	4603      	mov	r3, r0
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d001      	beq.n	8012ec4 <lock_fs+0x22>
 8012ec0:	2301      	movs	r3, #1
 8012ec2:	e000      	b.n	8012ec6 <lock_fs+0x24>
 8012ec4:	2300      	movs	r3, #0
}
 8012ec6:	4618      	mov	r0, r3
 8012ec8:	3708      	adds	r7, #8
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	bd80      	pop	{r7, pc}

08012ece <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8012ece:	b580      	push	{r7, lr}
 8012ed0:	b082      	sub	sp, #8
 8012ed2:	af00      	add	r7, sp, #0
 8012ed4:	6078      	str	r0, [r7, #4]
 8012ed6:	460b      	mov	r3, r1
 8012ed8:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d00d      	beq.n	8012efc <unlock_fs+0x2e>
 8012ee0:	78fb      	ldrb	r3, [r7, #3]
 8012ee2:	2b0c      	cmp	r3, #12
 8012ee4:	d00a      	beq.n	8012efc <unlock_fs+0x2e>
 8012ee6:	78fb      	ldrb	r3, [r7, #3]
 8012ee8:	2b0b      	cmp	r3, #11
 8012eea:	d007      	beq.n	8012efc <unlock_fs+0x2e>
 8012eec:	78fb      	ldrb	r3, [r7, #3]
 8012eee:	2b0f      	cmp	r3, #15
 8012ef0:	d004      	beq.n	8012efc <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	68db      	ldr	r3, [r3, #12]
 8012ef6:	4618      	mov	r0, r3
 8012ef8:	f002 fd81 	bl	80159fe <ff_rel_grant>
	}
}
 8012efc:	bf00      	nop
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}

08012f04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012f04:	b480      	push	{r7}
 8012f06:	b085      	sub	sp, #20
 8012f08:	af00      	add	r7, sp, #0
 8012f0a:	6078      	str	r0, [r7, #4]
 8012f0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012f0e:	2300      	movs	r3, #0
 8012f10:	60bb      	str	r3, [r7, #8]
 8012f12:	68bb      	ldr	r3, [r7, #8]
 8012f14:	60fb      	str	r3, [r7, #12]
 8012f16:	e029      	b.n	8012f6c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012f18:	4a27      	ldr	r2, [pc, #156]	; (8012fb8 <chk_lock+0xb4>)
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	011b      	lsls	r3, r3, #4
 8012f1e:	4413      	add	r3, r2
 8012f20:	681b      	ldr	r3, [r3, #0]
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d01d      	beq.n	8012f62 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f26:	4a24      	ldr	r2, [pc, #144]	; (8012fb8 <chk_lock+0xb4>)
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	011b      	lsls	r3, r3, #4
 8012f2c:	4413      	add	r3, r2
 8012f2e:	681a      	ldr	r2, [r3, #0]
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	429a      	cmp	r2, r3
 8012f36:	d116      	bne.n	8012f66 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012f38:	4a1f      	ldr	r2, [pc, #124]	; (8012fb8 <chk_lock+0xb4>)
 8012f3a:	68fb      	ldr	r3, [r7, #12]
 8012f3c:	011b      	lsls	r3, r3, #4
 8012f3e:	4413      	add	r3, r2
 8012f40:	3304      	adds	r3, #4
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012f48:	429a      	cmp	r2, r3
 8012f4a:	d10c      	bne.n	8012f66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f4c:	4a1a      	ldr	r2, [pc, #104]	; (8012fb8 <chk_lock+0xb4>)
 8012f4e:	68fb      	ldr	r3, [r7, #12]
 8012f50:	011b      	lsls	r3, r3, #4
 8012f52:	4413      	add	r3, r2
 8012f54:	3308      	adds	r3, #8
 8012f56:	681a      	ldr	r2, [r3, #0]
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d102      	bne.n	8012f66 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8012f60:	e007      	b.n	8012f72 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8012f62:	2301      	movs	r3, #1
 8012f64:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8012f66:	68fb      	ldr	r3, [r7, #12]
 8012f68:	3301      	adds	r3, #1
 8012f6a:	60fb      	str	r3, [r7, #12]
 8012f6c:	68fb      	ldr	r3, [r7, #12]
 8012f6e:	2b01      	cmp	r3, #1
 8012f70:	d9d2      	bls.n	8012f18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2b02      	cmp	r3, #2
 8012f76:	d109      	bne.n	8012f8c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d102      	bne.n	8012f84 <chk_lock+0x80>
 8012f7e:	683b      	ldr	r3, [r7, #0]
 8012f80:	2b02      	cmp	r3, #2
 8012f82:	d101      	bne.n	8012f88 <chk_lock+0x84>
 8012f84:	2300      	movs	r3, #0
 8012f86:	e010      	b.n	8012faa <chk_lock+0xa6>
 8012f88:	2312      	movs	r3, #18
 8012f8a:	e00e      	b.n	8012faa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d108      	bne.n	8012fa4 <chk_lock+0xa0>
 8012f92:	4a09      	ldr	r2, [pc, #36]	; (8012fb8 <chk_lock+0xb4>)
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	011b      	lsls	r3, r3, #4
 8012f98:	4413      	add	r3, r2
 8012f9a:	330c      	adds	r3, #12
 8012f9c:	881b      	ldrh	r3, [r3, #0]
 8012f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012fa2:	d101      	bne.n	8012fa8 <chk_lock+0xa4>
 8012fa4:	2310      	movs	r3, #16
 8012fa6:	e000      	b.n	8012faa <chk_lock+0xa6>
 8012fa8:	2300      	movs	r3, #0
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3714      	adds	r7, #20
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr
 8012fb6:	bf00      	nop
 8012fb8:	20000348 	.word	0x20000348

08012fbc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8012fbc:	b480      	push	{r7}
 8012fbe:	b083      	sub	sp, #12
 8012fc0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	607b      	str	r3, [r7, #4]
 8012fc6:	e002      	b.n	8012fce <enq_lock+0x12>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	3301      	adds	r3, #1
 8012fcc:	607b      	str	r3, [r7, #4]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	2b01      	cmp	r3, #1
 8012fd2:	d806      	bhi.n	8012fe2 <enq_lock+0x26>
 8012fd4:	4a09      	ldr	r2, [pc, #36]	; (8012ffc <enq_lock+0x40>)
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	011b      	lsls	r3, r3, #4
 8012fda:	4413      	add	r3, r2
 8012fdc:	681b      	ldr	r3, [r3, #0]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d1f2      	bne.n	8012fc8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2b02      	cmp	r3, #2
 8012fe6:	bf14      	ite	ne
 8012fe8:	2301      	movne	r3, #1
 8012fea:	2300      	moveq	r3, #0
 8012fec:	b2db      	uxtb	r3, r3
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	370c      	adds	r7, #12
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff8:	4770      	bx	lr
 8012ffa:	bf00      	nop
 8012ffc:	20000348 	.word	0x20000348

08013000 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8013000:	b480      	push	{r7}
 8013002:	b085      	sub	sp, #20
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
 8013008:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801300a:	2300      	movs	r3, #0
 801300c:	60fb      	str	r3, [r7, #12]
 801300e:	e01f      	b.n	8013050 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8013010:	4a41      	ldr	r2, [pc, #260]	; (8013118 <inc_lock+0x118>)
 8013012:	68fb      	ldr	r3, [r7, #12]
 8013014:	011b      	lsls	r3, r3, #4
 8013016:	4413      	add	r3, r2
 8013018:	681a      	ldr	r2, [r3, #0]
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	429a      	cmp	r2, r3
 8013020:	d113      	bne.n	801304a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8013022:	4a3d      	ldr	r2, [pc, #244]	; (8013118 <inc_lock+0x118>)
 8013024:	68fb      	ldr	r3, [r7, #12]
 8013026:	011b      	lsls	r3, r3, #4
 8013028:	4413      	add	r3, r2
 801302a:	3304      	adds	r3, #4
 801302c:	681a      	ldr	r2, [r3, #0]
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8013032:	429a      	cmp	r2, r3
 8013034:	d109      	bne.n	801304a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8013036:	4a38      	ldr	r2, [pc, #224]	; (8013118 <inc_lock+0x118>)
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	011b      	lsls	r3, r3, #4
 801303c:	4413      	add	r3, r2
 801303e:	3308      	adds	r3, #8
 8013040:	681a      	ldr	r2, [r3, #0]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8013046:	429a      	cmp	r2, r3
 8013048:	d006      	beq.n	8013058 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	3301      	adds	r3, #1
 801304e:	60fb      	str	r3, [r7, #12]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2b01      	cmp	r3, #1
 8013054:	d9dc      	bls.n	8013010 <inc_lock+0x10>
 8013056:	e000      	b.n	801305a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8013058:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2b02      	cmp	r3, #2
 801305e:	d132      	bne.n	80130c6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013060:	2300      	movs	r3, #0
 8013062:	60fb      	str	r3, [r7, #12]
 8013064:	e002      	b.n	801306c <inc_lock+0x6c>
 8013066:	68fb      	ldr	r3, [r7, #12]
 8013068:	3301      	adds	r3, #1
 801306a:	60fb      	str	r3, [r7, #12]
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	2b01      	cmp	r3, #1
 8013070:	d806      	bhi.n	8013080 <inc_lock+0x80>
 8013072:	4a29      	ldr	r2, [pc, #164]	; (8013118 <inc_lock+0x118>)
 8013074:	68fb      	ldr	r3, [r7, #12]
 8013076:	011b      	lsls	r3, r3, #4
 8013078:	4413      	add	r3, r2
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d1f2      	bne.n	8013066 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	2b02      	cmp	r3, #2
 8013084:	d101      	bne.n	801308a <inc_lock+0x8a>
 8013086:	2300      	movs	r3, #0
 8013088:	e040      	b.n	801310c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801308a:	687b      	ldr	r3, [r7, #4]
 801308c:	681a      	ldr	r2, [r3, #0]
 801308e:	4922      	ldr	r1, [pc, #136]	; (8013118 <inc_lock+0x118>)
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	011b      	lsls	r3, r3, #4
 8013094:	440b      	add	r3, r1
 8013096:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	689a      	ldr	r2, [r3, #8]
 801309c:	491e      	ldr	r1, [pc, #120]	; (8013118 <inc_lock+0x118>)
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	011b      	lsls	r3, r3, #4
 80130a2:	440b      	add	r3, r1
 80130a4:	3304      	adds	r3, #4
 80130a6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	695a      	ldr	r2, [r3, #20]
 80130ac:	491a      	ldr	r1, [pc, #104]	; (8013118 <inc_lock+0x118>)
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	011b      	lsls	r3, r3, #4
 80130b2:	440b      	add	r3, r1
 80130b4:	3308      	adds	r3, #8
 80130b6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80130b8:	4a17      	ldr	r2, [pc, #92]	; (8013118 <inc_lock+0x118>)
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	011b      	lsls	r3, r3, #4
 80130be:	4413      	add	r3, r2
 80130c0:	330c      	adds	r3, #12
 80130c2:	2200      	movs	r2, #0
 80130c4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80130c6:	683b      	ldr	r3, [r7, #0]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d009      	beq.n	80130e0 <inc_lock+0xe0>
 80130cc:	4a12      	ldr	r2, [pc, #72]	; (8013118 <inc_lock+0x118>)
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	011b      	lsls	r3, r3, #4
 80130d2:	4413      	add	r3, r2
 80130d4:	330c      	adds	r3, #12
 80130d6:	881b      	ldrh	r3, [r3, #0]
 80130d8:	2b00      	cmp	r3, #0
 80130da:	d001      	beq.n	80130e0 <inc_lock+0xe0>
 80130dc:	2300      	movs	r3, #0
 80130de:	e015      	b.n	801310c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d108      	bne.n	80130f8 <inc_lock+0xf8>
 80130e6:	4a0c      	ldr	r2, [pc, #48]	; (8013118 <inc_lock+0x118>)
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	011b      	lsls	r3, r3, #4
 80130ec:	4413      	add	r3, r2
 80130ee:	330c      	adds	r3, #12
 80130f0:	881b      	ldrh	r3, [r3, #0]
 80130f2:	3301      	adds	r3, #1
 80130f4:	b29a      	uxth	r2, r3
 80130f6:	e001      	b.n	80130fc <inc_lock+0xfc>
 80130f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130fc:	4906      	ldr	r1, [pc, #24]	; (8013118 <inc_lock+0x118>)
 80130fe:	68fb      	ldr	r3, [r7, #12]
 8013100:	011b      	lsls	r3, r3, #4
 8013102:	440b      	add	r3, r1
 8013104:	330c      	adds	r3, #12
 8013106:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	3301      	adds	r3, #1
}
 801310c:	4618      	mov	r0, r3
 801310e:	3714      	adds	r7, #20
 8013110:	46bd      	mov	sp, r7
 8013112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013116:	4770      	bx	lr
 8013118:	20000348 	.word	0x20000348

0801311c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801311c:	b480      	push	{r7}
 801311e:	b085      	sub	sp, #20
 8013120:	af00      	add	r7, sp, #0
 8013122:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	3b01      	subs	r3, #1
 8013128:	607b      	str	r3, [r7, #4]
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2b01      	cmp	r3, #1
 801312e:	d825      	bhi.n	801317c <dec_lock+0x60>
		n = Files[i].ctr;
 8013130:	4a17      	ldr	r2, [pc, #92]	; (8013190 <dec_lock+0x74>)
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	011b      	lsls	r3, r3, #4
 8013136:	4413      	add	r3, r2
 8013138:	330c      	adds	r3, #12
 801313a:	881b      	ldrh	r3, [r3, #0]
 801313c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801313e:	89fb      	ldrh	r3, [r7, #14]
 8013140:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013144:	d101      	bne.n	801314a <dec_lock+0x2e>
 8013146:	2300      	movs	r3, #0
 8013148:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801314a:	89fb      	ldrh	r3, [r7, #14]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d002      	beq.n	8013156 <dec_lock+0x3a>
 8013150:	89fb      	ldrh	r3, [r7, #14]
 8013152:	3b01      	subs	r3, #1
 8013154:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8013156:	4a0e      	ldr	r2, [pc, #56]	; (8013190 <dec_lock+0x74>)
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	011b      	lsls	r3, r3, #4
 801315c:	4413      	add	r3, r2
 801315e:	330c      	adds	r3, #12
 8013160:	89fa      	ldrh	r2, [r7, #14]
 8013162:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8013164:	89fb      	ldrh	r3, [r7, #14]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d105      	bne.n	8013176 <dec_lock+0x5a>
 801316a:	4a09      	ldr	r2, [pc, #36]	; (8013190 <dec_lock+0x74>)
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	011b      	lsls	r3, r3, #4
 8013170:	4413      	add	r3, r2
 8013172:	2200      	movs	r2, #0
 8013174:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8013176:	2300      	movs	r3, #0
 8013178:	737b      	strb	r3, [r7, #13]
 801317a:	e001      	b.n	8013180 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 801317c:	2302      	movs	r3, #2
 801317e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8013180:	7b7b      	ldrb	r3, [r7, #13]
}
 8013182:	4618      	mov	r0, r3
 8013184:	3714      	adds	r7, #20
 8013186:	46bd      	mov	sp, r7
 8013188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801318c:	4770      	bx	lr
 801318e:	bf00      	nop
 8013190:	20000348 	.word	0x20000348

08013194 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8013194:	b480      	push	{r7}
 8013196:	b085      	sub	sp, #20
 8013198:	af00      	add	r7, sp, #0
 801319a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 801319c:	2300      	movs	r3, #0
 801319e:	60fb      	str	r3, [r7, #12]
 80131a0:	e010      	b.n	80131c4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80131a2:	4a0d      	ldr	r2, [pc, #52]	; (80131d8 <clear_lock+0x44>)
 80131a4:	68fb      	ldr	r3, [r7, #12]
 80131a6:	011b      	lsls	r3, r3, #4
 80131a8:	4413      	add	r3, r2
 80131aa:	681b      	ldr	r3, [r3, #0]
 80131ac:	687a      	ldr	r2, [r7, #4]
 80131ae:	429a      	cmp	r2, r3
 80131b0:	d105      	bne.n	80131be <clear_lock+0x2a>
 80131b2:	4a09      	ldr	r2, [pc, #36]	; (80131d8 <clear_lock+0x44>)
 80131b4:	68fb      	ldr	r3, [r7, #12]
 80131b6:	011b      	lsls	r3, r3, #4
 80131b8:	4413      	add	r3, r2
 80131ba:	2200      	movs	r2, #0
 80131bc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	3301      	adds	r3, #1
 80131c2:	60fb      	str	r3, [r7, #12]
 80131c4:	68fb      	ldr	r3, [r7, #12]
 80131c6:	2b01      	cmp	r3, #1
 80131c8:	d9eb      	bls.n	80131a2 <clear_lock+0xe>
	}
}
 80131ca:	bf00      	nop
 80131cc:	3714      	adds	r7, #20
 80131ce:	46bd      	mov	sp, r7
 80131d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131d4:	4770      	bx	lr
 80131d6:	bf00      	nop
 80131d8:	20000348 	.word	0x20000348

080131dc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80131dc:	b580      	push	{r7, lr}
 80131de:	b086      	sub	sp, #24
 80131e0:	af00      	add	r7, sp, #0
 80131e2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80131e4:	2300      	movs	r3, #0
 80131e6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80131e8:	687b      	ldr	r3, [r7, #4]
 80131ea:	78db      	ldrb	r3, [r3, #3]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d034      	beq.n	801325a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	7858      	ldrb	r0, [r3, #1]
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013200:	2301      	movs	r3, #1
 8013202:	697a      	ldr	r2, [r7, #20]
 8013204:	f7ff fd10 	bl	8012c28 <disk_write>
 8013208:	4603      	mov	r3, r0
 801320a:	2b00      	cmp	r3, #0
 801320c:	d002      	beq.n	8013214 <sync_window+0x38>
			res = FR_DISK_ERR;
 801320e:	2301      	movs	r3, #1
 8013210:	73fb      	strb	r3, [r7, #15]
 8013212:	e022      	b.n	801325a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	2200      	movs	r2, #0
 8013218:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801321e:	697a      	ldr	r2, [r7, #20]
 8013220:	1ad2      	subs	r2, r2, r3
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	69db      	ldr	r3, [r3, #28]
 8013226:	429a      	cmp	r2, r3
 8013228:	d217      	bcs.n	801325a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	789b      	ldrb	r3, [r3, #2]
 801322e:	613b      	str	r3, [r7, #16]
 8013230:	e010      	b.n	8013254 <sync_window+0x78>
					wsect += fs->fsize;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	69db      	ldr	r3, [r3, #28]
 8013236:	697a      	ldr	r2, [r7, #20]
 8013238:	4413      	add	r3, r2
 801323a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	7858      	ldrb	r0, [r3, #1]
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013246:	2301      	movs	r3, #1
 8013248:	697a      	ldr	r2, [r7, #20]
 801324a:	f7ff fced 	bl	8012c28 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801324e:	693b      	ldr	r3, [r7, #16]
 8013250:	3b01      	subs	r3, #1
 8013252:	613b      	str	r3, [r7, #16]
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	2b01      	cmp	r3, #1
 8013258:	d8eb      	bhi.n	8013232 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 801325a:	7bfb      	ldrb	r3, [r7, #15]
}
 801325c:	4618      	mov	r0, r3
 801325e:	3718      	adds	r7, #24
 8013260:	46bd      	mov	sp, r7
 8013262:	bd80      	pop	{r7, pc}

08013264 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8013264:	b580      	push	{r7, lr}
 8013266:	b084      	sub	sp, #16
 8013268:	af00      	add	r7, sp, #0
 801326a:	6078      	str	r0, [r7, #4]
 801326c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 801326e:	2300      	movs	r3, #0
 8013270:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013276:	683a      	ldr	r2, [r7, #0]
 8013278:	429a      	cmp	r2, r3
 801327a:	d01b      	beq.n	80132b4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 801327c:	6878      	ldr	r0, [r7, #4]
 801327e:	f7ff ffad 	bl	80131dc <sync_window>
 8013282:	4603      	mov	r3, r0
 8013284:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8013286:	7bfb      	ldrb	r3, [r7, #15]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d113      	bne.n	80132b4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	7858      	ldrb	r0, [r3, #1]
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013296:	2301      	movs	r3, #1
 8013298:	683a      	ldr	r2, [r7, #0]
 801329a:	f7ff fca5 	bl	8012be8 <disk_read>
 801329e:	4603      	mov	r3, r0
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d004      	beq.n	80132ae <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80132a4:	f04f 33ff 	mov.w	r3, #4294967295
 80132a8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80132aa:	2301      	movs	r3, #1
 80132ac:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	683a      	ldr	r2, [r7, #0]
 80132b2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80132b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80132b6:	4618      	mov	r0, r3
 80132b8:	3710      	adds	r7, #16
 80132ba:	46bd      	mov	sp, r7
 80132bc:	bd80      	pop	{r7, pc}
	...

080132c0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b084      	sub	sp, #16
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80132c8:	6878      	ldr	r0, [r7, #4]
 80132ca:	f7ff ff87 	bl	80131dc <sync_window>
 80132ce:	4603      	mov	r3, r0
 80132d0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80132d2:	7bfb      	ldrb	r3, [r7, #15]
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d158      	bne.n	801338a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	2b03      	cmp	r3, #3
 80132de:	d148      	bne.n	8013372 <sync_fs+0xb2>
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	791b      	ldrb	r3, [r3, #4]
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d144      	bne.n	8013372 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	3334      	adds	r3, #52	; 0x34
 80132ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80132f0:	2100      	movs	r1, #0
 80132f2:	4618      	mov	r0, r3
 80132f4:	f7ff fd79 	bl	8012dea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	3334      	adds	r3, #52	; 0x34
 80132fc:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013300:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8013304:	4618      	mov	r0, r3
 8013306:	f7ff fd08 	bl	8012d1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	3334      	adds	r3, #52	; 0x34
 801330e:	4921      	ldr	r1, [pc, #132]	; (8013394 <sync_fs+0xd4>)
 8013310:	4618      	mov	r0, r3
 8013312:	f7ff fd1d 	bl	8012d50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	3334      	adds	r3, #52	; 0x34
 801331a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801331e:	491e      	ldr	r1, [pc, #120]	; (8013398 <sync_fs+0xd8>)
 8013320:	4618      	mov	r0, r3
 8013322:	f7ff fd15 	bl	8012d50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	3334      	adds	r3, #52	; 0x34
 801332a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	695b      	ldr	r3, [r3, #20]
 8013332:	4619      	mov	r1, r3
 8013334:	4610      	mov	r0, r2
 8013336:	f7ff fd0b 	bl	8012d50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	3334      	adds	r3, #52	; 0x34
 801333e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	691b      	ldr	r3, [r3, #16]
 8013346:	4619      	mov	r1, r3
 8013348:	4610      	mov	r0, r2
 801334a:	f7ff fd01 	bl	8012d50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6a1b      	ldr	r3, [r3, #32]
 8013352:	1c5a      	adds	r2, r3, #1
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	7858      	ldrb	r0, [r3, #1]
 801335c:	687b      	ldr	r3, [r7, #4]
 801335e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013366:	2301      	movs	r3, #1
 8013368:	f7ff fc5e 	bl	8012c28 <disk_write>
			fs->fsi_flag = 0;
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	2200      	movs	r2, #0
 8013370:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	785b      	ldrb	r3, [r3, #1]
 8013376:	2200      	movs	r2, #0
 8013378:	2100      	movs	r1, #0
 801337a:	4618      	mov	r0, r3
 801337c:	f7ff fc74 	bl	8012c68 <disk_ioctl>
 8013380:	4603      	mov	r3, r0
 8013382:	2b00      	cmp	r3, #0
 8013384:	d001      	beq.n	801338a <sync_fs+0xca>
 8013386:	2301      	movs	r3, #1
 8013388:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 801338a:	7bfb      	ldrb	r3, [r7, #15]
}
 801338c:	4618      	mov	r0, r3
 801338e:	3710      	adds	r7, #16
 8013390:	46bd      	mov	sp, r7
 8013392:	bd80      	pop	{r7, pc}
 8013394:	41615252 	.word	0x41615252
 8013398:	61417272 	.word	0x61417272

0801339c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 801339c:	b480      	push	{r7}
 801339e:	b083      	sub	sp, #12
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80133a6:	683b      	ldr	r3, [r7, #0]
 80133a8:	3b02      	subs	r3, #2
 80133aa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	699b      	ldr	r3, [r3, #24]
 80133b0:	3b02      	subs	r3, #2
 80133b2:	683a      	ldr	r2, [r7, #0]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d301      	bcc.n	80133bc <clust2sect+0x20>
 80133b8:	2300      	movs	r3, #0
 80133ba:	e008      	b.n	80133ce <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	895b      	ldrh	r3, [r3, #10]
 80133c0:	461a      	mov	r2, r3
 80133c2:	683b      	ldr	r3, [r7, #0]
 80133c4:	fb03 f202 	mul.w	r2, r3, r2
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133cc:	4413      	add	r3, r2
}
 80133ce:	4618      	mov	r0, r3
 80133d0:	370c      	adds	r7, #12
 80133d2:	46bd      	mov	sp, r7
 80133d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d8:	4770      	bx	lr

080133da <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80133da:	b580      	push	{r7, lr}
 80133dc:	b086      	sub	sp, #24
 80133de:	af00      	add	r7, sp, #0
 80133e0:	6078      	str	r0, [r7, #4]
 80133e2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	681b      	ldr	r3, [r3, #0]
 80133e8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80133ea:	683b      	ldr	r3, [r7, #0]
 80133ec:	2b01      	cmp	r3, #1
 80133ee:	d904      	bls.n	80133fa <get_fat+0x20>
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	699b      	ldr	r3, [r3, #24]
 80133f4:	683a      	ldr	r2, [r7, #0]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d302      	bcc.n	8013400 <get_fat+0x26>
		val = 1;	/* Internal error */
 80133fa:	2301      	movs	r3, #1
 80133fc:	617b      	str	r3, [r7, #20]
 80133fe:	e08c      	b.n	801351a <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8013400:	f04f 33ff 	mov.w	r3, #4294967295
 8013404:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	2b02      	cmp	r3, #2
 801340c:	d045      	beq.n	801349a <get_fat+0xc0>
 801340e:	2b03      	cmp	r3, #3
 8013410:	d05d      	beq.n	80134ce <get_fat+0xf4>
 8013412:	2b01      	cmp	r3, #1
 8013414:	d177      	bne.n	8013506 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8013416:	683b      	ldr	r3, [r7, #0]
 8013418:	60fb      	str	r3, [r7, #12]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	085b      	lsrs	r3, r3, #1
 801341e:	68fa      	ldr	r2, [r7, #12]
 8013420:	4413      	add	r3, r2
 8013422:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	0a5b      	lsrs	r3, r3, #9
 801342c:	4413      	add	r3, r2
 801342e:	4619      	mov	r1, r3
 8013430:	6938      	ldr	r0, [r7, #16]
 8013432:	f7ff ff17 	bl	8013264 <move_window>
 8013436:	4603      	mov	r3, r0
 8013438:	2b00      	cmp	r3, #0
 801343a:	d167      	bne.n	801350c <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	1c5a      	adds	r2, r3, #1
 8013440:	60fa      	str	r2, [r7, #12]
 8013442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013446:	693a      	ldr	r2, [r7, #16]
 8013448:	4413      	add	r3, r2
 801344a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801344e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013450:	693b      	ldr	r3, [r7, #16]
 8013452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	0a5b      	lsrs	r3, r3, #9
 8013458:	4413      	add	r3, r2
 801345a:	4619      	mov	r1, r3
 801345c:	6938      	ldr	r0, [r7, #16]
 801345e:	f7ff ff01 	bl	8013264 <move_window>
 8013462:	4603      	mov	r3, r0
 8013464:	2b00      	cmp	r3, #0
 8013466:	d153      	bne.n	8013510 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8013468:	68fb      	ldr	r3, [r7, #12]
 801346a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801346e:	693a      	ldr	r2, [r7, #16]
 8013470:	4413      	add	r3, r2
 8013472:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8013476:	021b      	lsls	r3, r3, #8
 8013478:	461a      	mov	r2, r3
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	4313      	orrs	r3, r2
 801347e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	f003 0301 	and.w	r3, r3, #1
 8013486:	2b00      	cmp	r3, #0
 8013488:	d002      	beq.n	8013490 <get_fat+0xb6>
 801348a:	68bb      	ldr	r3, [r7, #8]
 801348c:	091b      	lsrs	r3, r3, #4
 801348e:	e002      	b.n	8013496 <get_fat+0xbc>
 8013490:	68bb      	ldr	r3, [r7, #8]
 8013492:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8013496:	617b      	str	r3, [r7, #20]
			break;
 8013498:	e03f      	b.n	801351a <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801349a:	693b      	ldr	r3, [r7, #16]
 801349c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	0a1b      	lsrs	r3, r3, #8
 80134a2:	4413      	add	r3, r2
 80134a4:	4619      	mov	r1, r3
 80134a6:	6938      	ldr	r0, [r7, #16]
 80134a8:	f7ff fedc 	bl	8013264 <move_window>
 80134ac:	4603      	mov	r3, r0
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d130      	bne.n	8013514 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80134b8:	683b      	ldr	r3, [r7, #0]
 80134ba:	005b      	lsls	r3, r3, #1
 80134bc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80134c0:	4413      	add	r3, r2
 80134c2:	4618      	mov	r0, r3
 80134c4:	f7ff fbee 	bl	8012ca4 <ld_word>
 80134c8:	4603      	mov	r3, r0
 80134ca:	617b      	str	r3, [r7, #20]
			break;
 80134cc:	e025      	b.n	801351a <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80134ce:	693b      	ldr	r3, [r7, #16]
 80134d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	09db      	lsrs	r3, r3, #7
 80134d6:	4413      	add	r3, r2
 80134d8:	4619      	mov	r1, r3
 80134da:	6938      	ldr	r0, [r7, #16]
 80134dc:	f7ff fec2 	bl	8013264 <move_window>
 80134e0:	4603      	mov	r3, r0
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d118      	bne.n	8013518 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80134e6:	693b      	ldr	r3, [r7, #16]
 80134e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80134ec:	683b      	ldr	r3, [r7, #0]
 80134ee:	009b      	lsls	r3, r3, #2
 80134f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80134f4:	4413      	add	r3, r2
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7ff fbec 	bl	8012cd4 <ld_dword>
 80134fc:	4603      	mov	r3, r0
 80134fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8013502:	617b      	str	r3, [r7, #20]
			break;
 8013504:	e009      	b.n	801351a <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8013506:	2301      	movs	r3, #1
 8013508:	617b      	str	r3, [r7, #20]
 801350a:	e006      	b.n	801351a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801350c:	bf00      	nop
 801350e:	e004      	b.n	801351a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8013510:	bf00      	nop
 8013512:	e002      	b.n	801351a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8013514:	bf00      	nop
 8013516:	e000      	b.n	801351a <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8013518:	bf00      	nop
		}
	}

	return val;
 801351a:	697b      	ldr	r3, [r7, #20]
}
 801351c:	4618      	mov	r0, r3
 801351e:	3718      	adds	r7, #24
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}

08013524 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8013524:	b590      	push	{r4, r7, lr}
 8013526:	b089      	sub	sp, #36	; 0x24
 8013528:	af00      	add	r7, sp, #0
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8013530:	2302      	movs	r3, #2
 8013532:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	2b01      	cmp	r3, #1
 8013538:	f240 80d6 	bls.w	80136e8 <put_fat+0x1c4>
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	699b      	ldr	r3, [r3, #24]
 8013540:	68ba      	ldr	r2, [r7, #8]
 8013542:	429a      	cmp	r2, r3
 8013544:	f080 80d0 	bcs.w	80136e8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8013548:	68fb      	ldr	r3, [r7, #12]
 801354a:	781b      	ldrb	r3, [r3, #0]
 801354c:	2b02      	cmp	r3, #2
 801354e:	d073      	beq.n	8013638 <put_fat+0x114>
 8013550:	2b03      	cmp	r3, #3
 8013552:	f000 8091 	beq.w	8013678 <put_fat+0x154>
 8013556:	2b01      	cmp	r3, #1
 8013558:	f040 80c6 	bne.w	80136e8 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	61bb      	str	r3, [r7, #24]
 8013560:	69bb      	ldr	r3, [r7, #24]
 8013562:	085b      	lsrs	r3, r3, #1
 8013564:	69ba      	ldr	r2, [r7, #24]
 8013566:	4413      	add	r3, r2
 8013568:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801356a:	68fb      	ldr	r3, [r7, #12]
 801356c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801356e:	69bb      	ldr	r3, [r7, #24]
 8013570:	0a5b      	lsrs	r3, r3, #9
 8013572:	4413      	add	r3, r2
 8013574:	4619      	mov	r1, r3
 8013576:	68f8      	ldr	r0, [r7, #12]
 8013578:	f7ff fe74 	bl	8013264 <move_window>
 801357c:	4603      	mov	r3, r0
 801357e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8013580:	7ffb      	ldrb	r3, [r7, #31]
 8013582:	2b00      	cmp	r3, #0
 8013584:	f040 80a9 	bne.w	80136da <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801358e:	69bb      	ldr	r3, [r7, #24]
 8013590:	1c59      	adds	r1, r3, #1
 8013592:	61b9      	str	r1, [r7, #24]
 8013594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013598:	4413      	add	r3, r2
 801359a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	f003 0301 	and.w	r3, r3, #1
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00d      	beq.n	80135c2 <put_fat+0x9e>
 80135a6:	697b      	ldr	r3, [r7, #20]
 80135a8:	781b      	ldrb	r3, [r3, #0]
 80135aa:	b25b      	sxtb	r3, r3
 80135ac:	f003 030f 	and.w	r3, r3, #15
 80135b0:	b25a      	sxtb	r2, r3
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	b2db      	uxtb	r3, r3
 80135b6:	011b      	lsls	r3, r3, #4
 80135b8:	b25b      	sxtb	r3, r3
 80135ba:	4313      	orrs	r3, r2
 80135bc:	b25b      	sxtb	r3, r3
 80135be:	b2db      	uxtb	r3, r3
 80135c0:	e001      	b.n	80135c6 <put_fat+0xa2>
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	b2db      	uxtb	r3, r3
 80135c6:	697a      	ldr	r2, [r7, #20]
 80135c8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	2201      	movs	r2, #1
 80135ce:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80135d0:	68fb      	ldr	r3, [r7, #12]
 80135d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80135d4:	69bb      	ldr	r3, [r7, #24]
 80135d6:	0a5b      	lsrs	r3, r3, #9
 80135d8:	4413      	add	r3, r2
 80135da:	4619      	mov	r1, r3
 80135dc:	68f8      	ldr	r0, [r7, #12]
 80135de:	f7ff fe41 	bl	8013264 <move_window>
 80135e2:	4603      	mov	r3, r0
 80135e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80135e6:	7ffb      	ldrb	r3, [r7, #31]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d178      	bne.n	80136de <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80135ec:	68fb      	ldr	r3, [r7, #12]
 80135ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80135f8:	4413      	add	r3, r2
 80135fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80135fc:	68bb      	ldr	r3, [r7, #8]
 80135fe:	f003 0301 	and.w	r3, r3, #1
 8013602:	2b00      	cmp	r3, #0
 8013604:	d003      	beq.n	801360e <put_fat+0xea>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	091b      	lsrs	r3, r3, #4
 801360a:	b2db      	uxtb	r3, r3
 801360c:	e00e      	b.n	801362c <put_fat+0x108>
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	781b      	ldrb	r3, [r3, #0]
 8013612:	b25b      	sxtb	r3, r3
 8013614:	f023 030f 	bic.w	r3, r3, #15
 8013618:	b25a      	sxtb	r2, r3
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	0a1b      	lsrs	r3, r3, #8
 801361e:	b25b      	sxtb	r3, r3
 8013620:	f003 030f 	and.w	r3, r3, #15
 8013624:	b25b      	sxtb	r3, r3
 8013626:	4313      	orrs	r3, r2
 8013628:	b25b      	sxtb	r3, r3
 801362a:	b2db      	uxtb	r3, r3
 801362c:	697a      	ldr	r2, [r7, #20]
 801362e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8013630:	68fb      	ldr	r3, [r7, #12]
 8013632:	2201      	movs	r2, #1
 8013634:	70da      	strb	r2, [r3, #3]
			break;
 8013636:	e057      	b.n	80136e8 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801363c:	68bb      	ldr	r3, [r7, #8]
 801363e:	0a1b      	lsrs	r3, r3, #8
 8013640:	4413      	add	r3, r2
 8013642:	4619      	mov	r1, r3
 8013644:	68f8      	ldr	r0, [r7, #12]
 8013646:	f7ff fe0d 	bl	8013264 <move_window>
 801364a:	4603      	mov	r3, r0
 801364c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801364e:	7ffb      	ldrb	r3, [r7, #31]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d146      	bne.n	80136e2 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	005b      	lsls	r3, r3, #1
 801365e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8013662:	4413      	add	r3, r2
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	b292      	uxth	r2, r2
 8013668:	4611      	mov	r1, r2
 801366a:	4618      	mov	r0, r3
 801366c:	f7ff fb55 	bl	8012d1a <st_word>
			fs->wflag = 1;
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	2201      	movs	r2, #1
 8013674:	70da      	strb	r2, [r3, #3]
			break;
 8013676:	e037      	b.n	80136e8 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801367c:	68bb      	ldr	r3, [r7, #8]
 801367e:	09db      	lsrs	r3, r3, #7
 8013680:	4413      	add	r3, r2
 8013682:	4619      	mov	r1, r3
 8013684:	68f8      	ldr	r0, [r7, #12]
 8013686:	f7ff fded 	bl	8013264 <move_window>
 801368a:	4603      	mov	r3, r0
 801368c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801368e:	7ffb      	ldrb	r3, [r7, #31]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d128      	bne.n	80136e6 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8013694:	687b      	ldr	r3, [r7, #4]
 8013696:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	009b      	lsls	r3, r3, #2
 80136a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80136a8:	4413      	add	r3, r2
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7ff fb12 	bl	8012cd4 <ld_dword>
 80136b0:	4603      	mov	r3, r0
 80136b2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80136b6:	4323      	orrs	r3, r4
 80136b8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	009b      	lsls	r3, r3, #2
 80136c4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80136c8:	4413      	add	r3, r2
 80136ca:	6879      	ldr	r1, [r7, #4]
 80136cc:	4618      	mov	r0, r3
 80136ce:	f7ff fb3f 	bl	8012d50 <st_dword>
			fs->wflag = 1;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2201      	movs	r2, #1
 80136d6:	70da      	strb	r2, [r3, #3]
			break;
 80136d8:	e006      	b.n	80136e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80136da:	bf00      	nop
 80136dc:	e004      	b.n	80136e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80136de:	bf00      	nop
 80136e0:	e002      	b.n	80136e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80136e2:	bf00      	nop
 80136e4:	e000      	b.n	80136e8 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80136e6:	bf00      	nop
		}
	}
	return res;
 80136e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80136ea:	4618      	mov	r0, r3
 80136ec:	3724      	adds	r7, #36	; 0x24
 80136ee:	46bd      	mov	sp, r7
 80136f0:	bd90      	pop	{r4, r7, pc}

080136f2 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80136f2:	b580      	push	{r7, lr}
 80136f4:	b088      	sub	sp, #32
 80136f6:	af00      	add	r7, sp, #0
 80136f8:	60f8      	str	r0, [r7, #12]
 80136fa:	60b9      	str	r1, [r7, #8]
 80136fc:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80136fe:	2300      	movs	r3, #0
 8013700:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8013708:	68bb      	ldr	r3, [r7, #8]
 801370a:	2b01      	cmp	r3, #1
 801370c:	d904      	bls.n	8013718 <remove_chain+0x26>
 801370e:	69bb      	ldr	r3, [r7, #24]
 8013710:	699b      	ldr	r3, [r3, #24]
 8013712:	68ba      	ldr	r2, [r7, #8]
 8013714:	429a      	cmp	r2, r3
 8013716:	d301      	bcc.n	801371c <remove_chain+0x2a>
 8013718:	2302      	movs	r3, #2
 801371a:	e04b      	b.n	80137b4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d00c      	beq.n	801373c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8013722:	f04f 32ff 	mov.w	r2, #4294967295
 8013726:	6879      	ldr	r1, [r7, #4]
 8013728:	69b8      	ldr	r0, [r7, #24]
 801372a:	f7ff fefb 	bl	8013524 <put_fat>
 801372e:	4603      	mov	r3, r0
 8013730:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8013732:	7ffb      	ldrb	r3, [r7, #31]
 8013734:	2b00      	cmp	r3, #0
 8013736:	d001      	beq.n	801373c <remove_chain+0x4a>
 8013738:	7ffb      	ldrb	r3, [r7, #31]
 801373a:	e03b      	b.n	80137b4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 801373c:	68b9      	ldr	r1, [r7, #8]
 801373e:	68f8      	ldr	r0, [r7, #12]
 8013740:	f7ff fe4b 	bl	80133da <get_fat>
 8013744:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8013746:	697b      	ldr	r3, [r7, #20]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d031      	beq.n	80137b0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	2b01      	cmp	r3, #1
 8013750:	d101      	bne.n	8013756 <remove_chain+0x64>
 8013752:	2302      	movs	r3, #2
 8013754:	e02e      	b.n	80137b4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8013756:	697b      	ldr	r3, [r7, #20]
 8013758:	f1b3 3fff 	cmp.w	r3, #4294967295
 801375c:	d101      	bne.n	8013762 <remove_chain+0x70>
 801375e:	2301      	movs	r3, #1
 8013760:	e028      	b.n	80137b4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8013762:	2200      	movs	r2, #0
 8013764:	68b9      	ldr	r1, [r7, #8]
 8013766:	69b8      	ldr	r0, [r7, #24]
 8013768:	f7ff fedc 	bl	8013524 <put_fat>
 801376c:	4603      	mov	r3, r0
 801376e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8013770:	7ffb      	ldrb	r3, [r7, #31]
 8013772:	2b00      	cmp	r3, #0
 8013774:	d001      	beq.n	801377a <remove_chain+0x88>
 8013776:	7ffb      	ldrb	r3, [r7, #31]
 8013778:	e01c      	b.n	80137b4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	695a      	ldr	r2, [r3, #20]
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	699b      	ldr	r3, [r3, #24]
 8013782:	3b02      	subs	r3, #2
 8013784:	429a      	cmp	r2, r3
 8013786:	d20b      	bcs.n	80137a0 <remove_chain+0xae>
			fs->free_clst++;
 8013788:	69bb      	ldr	r3, [r7, #24]
 801378a:	695b      	ldr	r3, [r3, #20]
 801378c:	1c5a      	adds	r2, r3, #1
 801378e:	69bb      	ldr	r3, [r7, #24]
 8013790:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8013792:	69bb      	ldr	r3, [r7, #24]
 8013794:	791b      	ldrb	r3, [r3, #4]
 8013796:	f043 0301 	orr.w	r3, r3, #1
 801379a:	b2da      	uxtb	r2, r3
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80137a4:	69bb      	ldr	r3, [r7, #24]
 80137a6:	699b      	ldr	r3, [r3, #24]
 80137a8:	68ba      	ldr	r2, [r7, #8]
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d3c6      	bcc.n	801373c <remove_chain+0x4a>
 80137ae:	e000      	b.n	80137b2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80137b0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80137b2:	2300      	movs	r3, #0
}
 80137b4:	4618      	mov	r0, r3
 80137b6:	3720      	adds	r7, #32
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}

080137bc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80137bc:	b580      	push	{r7, lr}
 80137be:	b088      	sub	sp, #32
 80137c0:	af00      	add	r7, sp, #0
 80137c2:	6078      	str	r0, [r7, #4]
 80137c4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	681b      	ldr	r3, [r3, #0]
 80137ca:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80137cc:	683b      	ldr	r3, [r7, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d10d      	bne.n	80137ee <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80137d2:	693b      	ldr	r3, [r7, #16]
 80137d4:	691b      	ldr	r3, [r3, #16]
 80137d6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80137d8:	69bb      	ldr	r3, [r7, #24]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d004      	beq.n	80137e8 <create_chain+0x2c>
 80137de:	693b      	ldr	r3, [r7, #16]
 80137e0:	699b      	ldr	r3, [r3, #24]
 80137e2:	69ba      	ldr	r2, [r7, #24]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d31b      	bcc.n	8013820 <create_chain+0x64>
 80137e8:	2301      	movs	r3, #1
 80137ea:	61bb      	str	r3, [r7, #24]
 80137ec:	e018      	b.n	8013820 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80137ee:	6839      	ldr	r1, [r7, #0]
 80137f0:	6878      	ldr	r0, [r7, #4]
 80137f2:	f7ff fdf2 	bl	80133da <get_fat>
 80137f6:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	2b01      	cmp	r3, #1
 80137fc:	d801      	bhi.n	8013802 <create_chain+0x46>
 80137fe:	2301      	movs	r3, #1
 8013800:	e070      	b.n	80138e4 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013808:	d101      	bne.n	801380e <create_chain+0x52>
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	e06a      	b.n	80138e4 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	699b      	ldr	r3, [r3, #24]
 8013812:	68fa      	ldr	r2, [r7, #12]
 8013814:	429a      	cmp	r2, r3
 8013816:	d201      	bcs.n	801381c <create_chain+0x60>
 8013818:	68fb      	ldr	r3, [r7, #12]
 801381a:	e063      	b.n	80138e4 <create_chain+0x128>
		scl = clst;
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8013824:	69fb      	ldr	r3, [r7, #28]
 8013826:	3301      	adds	r3, #1
 8013828:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801382a:	693b      	ldr	r3, [r7, #16]
 801382c:	699b      	ldr	r3, [r3, #24]
 801382e:	69fa      	ldr	r2, [r7, #28]
 8013830:	429a      	cmp	r2, r3
 8013832:	d307      	bcc.n	8013844 <create_chain+0x88>
				ncl = 2;
 8013834:	2302      	movs	r3, #2
 8013836:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8013838:	69fa      	ldr	r2, [r7, #28]
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	429a      	cmp	r2, r3
 801383e:	d901      	bls.n	8013844 <create_chain+0x88>
 8013840:	2300      	movs	r3, #0
 8013842:	e04f      	b.n	80138e4 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8013844:	69f9      	ldr	r1, [r7, #28]
 8013846:	6878      	ldr	r0, [r7, #4]
 8013848:	f7ff fdc7 	bl	80133da <get_fat>
 801384c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	2b00      	cmp	r3, #0
 8013852:	d00e      	beq.n	8013872 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8013854:	68fb      	ldr	r3, [r7, #12]
 8013856:	2b01      	cmp	r3, #1
 8013858:	d003      	beq.n	8013862 <create_chain+0xa6>
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013860:	d101      	bne.n	8013866 <create_chain+0xaa>
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	e03e      	b.n	80138e4 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8013866:	69fa      	ldr	r2, [r7, #28]
 8013868:	69bb      	ldr	r3, [r7, #24]
 801386a:	429a      	cmp	r2, r3
 801386c:	d1da      	bne.n	8013824 <create_chain+0x68>
 801386e:	2300      	movs	r3, #0
 8013870:	e038      	b.n	80138e4 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8013872:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8013874:	f04f 32ff 	mov.w	r2, #4294967295
 8013878:	69f9      	ldr	r1, [r7, #28]
 801387a:	6938      	ldr	r0, [r7, #16]
 801387c:	f7ff fe52 	bl	8013524 <put_fat>
 8013880:	4603      	mov	r3, r0
 8013882:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8013884:	7dfb      	ldrb	r3, [r7, #23]
 8013886:	2b00      	cmp	r3, #0
 8013888:	d109      	bne.n	801389e <create_chain+0xe2>
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d006      	beq.n	801389e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8013890:	69fa      	ldr	r2, [r7, #28]
 8013892:	6839      	ldr	r1, [r7, #0]
 8013894:	6938      	ldr	r0, [r7, #16]
 8013896:	f7ff fe45 	bl	8013524 <put_fat>
 801389a:	4603      	mov	r3, r0
 801389c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801389e:	7dfb      	ldrb	r3, [r7, #23]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d116      	bne.n	80138d2 <create_chain+0x116>
		fs->last_clst = ncl;
 80138a4:	693b      	ldr	r3, [r7, #16]
 80138a6:	69fa      	ldr	r2, [r7, #28]
 80138a8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80138aa:	693b      	ldr	r3, [r7, #16]
 80138ac:	695a      	ldr	r2, [r3, #20]
 80138ae:	693b      	ldr	r3, [r7, #16]
 80138b0:	699b      	ldr	r3, [r3, #24]
 80138b2:	3b02      	subs	r3, #2
 80138b4:	429a      	cmp	r2, r3
 80138b6:	d804      	bhi.n	80138c2 <create_chain+0x106>
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	695b      	ldr	r3, [r3, #20]
 80138bc:	1e5a      	subs	r2, r3, #1
 80138be:	693b      	ldr	r3, [r7, #16]
 80138c0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80138c2:	693b      	ldr	r3, [r7, #16]
 80138c4:	791b      	ldrb	r3, [r3, #4]
 80138c6:	f043 0301 	orr.w	r3, r3, #1
 80138ca:	b2da      	uxtb	r2, r3
 80138cc:	693b      	ldr	r3, [r7, #16]
 80138ce:	711a      	strb	r2, [r3, #4]
 80138d0:	e007      	b.n	80138e2 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80138d2:	7dfb      	ldrb	r3, [r7, #23]
 80138d4:	2b01      	cmp	r3, #1
 80138d6:	d102      	bne.n	80138de <create_chain+0x122>
 80138d8:	f04f 33ff 	mov.w	r3, #4294967295
 80138dc:	e000      	b.n	80138e0 <create_chain+0x124>
 80138de:	2301      	movs	r3, #1
 80138e0:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80138e2:	69fb      	ldr	r3, [r7, #28]
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3720      	adds	r7, #32
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80138ec:	b480      	push	{r7}
 80138ee:	b087      	sub	sp, #28
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
 80138f4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80138fc:	687b      	ldr	r3, [r7, #4]
 80138fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013900:	3304      	adds	r3, #4
 8013902:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013904:	683b      	ldr	r3, [r7, #0]
 8013906:	0a5b      	lsrs	r3, r3, #9
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	8952      	ldrh	r2, [r2, #10]
 801390c:	fbb3 f3f2 	udiv	r3, r3, r2
 8013910:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013912:	693b      	ldr	r3, [r7, #16]
 8013914:	1d1a      	adds	r2, r3, #4
 8013916:	613a      	str	r2, [r7, #16]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801391c:	68bb      	ldr	r3, [r7, #8]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d101      	bne.n	8013926 <clmt_clust+0x3a>
 8013922:	2300      	movs	r3, #0
 8013924:	e010      	b.n	8013948 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8013926:	697a      	ldr	r2, [r7, #20]
 8013928:	68bb      	ldr	r3, [r7, #8]
 801392a:	429a      	cmp	r2, r3
 801392c:	d307      	bcc.n	801393e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801392e:	697a      	ldr	r2, [r7, #20]
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	1ad3      	subs	r3, r2, r3
 8013934:	617b      	str	r3, [r7, #20]
 8013936:	693b      	ldr	r3, [r7, #16]
 8013938:	3304      	adds	r3, #4
 801393a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801393c:	e7e9      	b.n	8013912 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801393e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8013940:	693b      	ldr	r3, [r7, #16]
 8013942:	681a      	ldr	r2, [r3, #0]
 8013944:	697b      	ldr	r3, [r7, #20]
 8013946:	4413      	add	r3, r2
}
 8013948:	4618      	mov	r0, r3
 801394a:	371c      	adds	r7, #28
 801394c:	46bd      	mov	sp, r7
 801394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013952:	4770      	bx	lr

08013954 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b086      	sub	sp, #24
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
 801395c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8013964:	683b      	ldr	r3, [r7, #0]
 8013966:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801396a:	d204      	bcs.n	8013976 <dir_sdi+0x22>
 801396c:	683b      	ldr	r3, [r7, #0]
 801396e:	f003 031f 	and.w	r3, r3, #31
 8013972:	2b00      	cmp	r3, #0
 8013974:	d001      	beq.n	801397a <dir_sdi+0x26>
		return FR_INT_ERR;
 8013976:	2302      	movs	r3, #2
 8013978:	e063      	b.n	8013a42 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	683a      	ldr	r2, [r7, #0]
 801397e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	689b      	ldr	r3, [r3, #8]
 8013984:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8013986:	697b      	ldr	r3, [r7, #20]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d106      	bne.n	801399a <dir_sdi+0x46>
 801398c:	693b      	ldr	r3, [r7, #16]
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	2b02      	cmp	r3, #2
 8013992:	d902      	bls.n	801399a <dir_sdi+0x46>
		clst = fs->dirbase;
 8013994:	693b      	ldr	r3, [r7, #16]
 8013996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013998:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801399a:	697b      	ldr	r3, [r7, #20]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d10c      	bne.n	80139ba <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80139a0:	683b      	ldr	r3, [r7, #0]
 80139a2:	095b      	lsrs	r3, r3, #5
 80139a4:	693a      	ldr	r2, [r7, #16]
 80139a6:	8912      	ldrh	r2, [r2, #8]
 80139a8:	4293      	cmp	r3, r2
 80139aa:	d301      	bcc.n	80139b0 <dir_sdi+0x5c>
 80139ac:	2302      	movs	r3, #2
 80139ae:	e048      	b.n	8013a42 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80139b0:	693b      	ldr	r3, [r7, #16]
 80139b2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	61da      	str	r2, [r3, #28]
 80139b8:	e029      	b.n	8013a0e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	895b      	ldrh	r3, [r3, #10]
 80139be:	025b      	lsls	r3, r3, #9
 80139c0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80139c2:	e019      	b.n	80139f8 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	6979      	ldr	r1, [r7, #20]
 80139c8:	4618      	mov	r0, r3
 80139ca:	f7ff fd06 	bl	80133da <get_fat>
 80139ce:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80139d0:	697b      	ldr	r3, [r7, #20]
 80139d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80139d6:	d101      	bne.n	80139dc <dir_sdi+0x88>
 80139d8:	2301      	movs	r3, #1
 80139da:	e032      	b.n	8013a42 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80139dc:	697b      	ldr	r3, [r7, #20]
 80139de:	2b01      	cmp	r3, #1
 80139e0:	d904      	bls.n	80139ec <dir_sdi+0x98>
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	699b      	ldr	r3, [r3, #24]
 80139e6:	697a      	ldr	r2, [r7, #20]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d301      	bcc.n	80139f0 <dir_sdi+0x9c>
 80139ec:	2302      	movs	r3, #2
 80139ee:	e028      	b.n	8013a42 <dir_sdi+0xee>
			ofs -= csz;
 80139f0:	683a      	ldr	r2, [r7, #0]
 80139f2:	68fb      	ldr	r3, [r7, #12]
 80139f4:	1ad3      	subs	r3, r2, r3
 80139f6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80139f8:	683a      	ldr	r2, [r7, #0]
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	429a      	cmp	r2, r3
 80139fe:	d2e1      	bcs.n	80139c4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8013a00:	6979      	ldr	r1, [r7, #20]
 8013a02:	6938      	ldr	r0, [r7, #16]
 8013a04:	f7ff fcca 	bl	801339c <clust2sect>
 8013a08:	4602      	mov	r2, r0
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	697a      	ldr	r2, [r7, #20]
 8013a12:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	69db      	ldr	r3, [r3, #28]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d101      	bne.n	8013a20 <dir_sdi+0xcc>
 8013a1c:	2302      	movs	r3, #2
 8013a1e:	e010      	b.n	8013a42 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	69da      	ldr	r2, [r3, #28]
 8013a24:	683b      	ldr	r3, [r7, #0]
 8013a26:	0a5b      	lsrs	r3, r3, #9
 8013a28:	441a      	add	r2, r3
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013a34:	683b      	ldr	r3, [r7, #0]
 8013a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a3a:	441a      	add	r2, r3
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013a40:	2300      	movs	r3, #0
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3718      	adds	r7, #24
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}

08013a4a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8013a4a:	b580      	push	{r7, lr}
 8013a4c:	b086      	sub	sp, #24
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	6078      	str	r0, [r7, #4]
 8013a52:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	695b      	ldr	r3, [r3, #20]
 8013a5e:	3320      	adds	r3, #32
 8013a60:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	69db      	ldr	r3, [r3, #28]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d003      	beq.n	8013a72 <dir_next+0x28>
 8013a6a:	68bb      	ldr	r3, [r7, #8]
 8013a6c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8013a70:	d301      	bcc.n	8013a76 <dir_next+0x2c>
 8013a72:	2304      	movs	r3, #4
 8013a74:	e0aa      	b.n	8013bcc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8013a76:	68bb      	ldr	r3, [r7, #8]
 8013a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	f040 8098 	bne.w	8013bb2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	69db      	ldr	r3, [r3, #28]
 8013a86:	1c5a      	adds	r2, r3, #1
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	699b      	ldr	r3, [r3, #24]
 8013a90:	2b00      	cmp	r3, #0
 8013a92:	d10b      	bne.n	8013aac <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8013a94:	68bb      	ldr	r3, [r7, #8]
 8013a96:	095b      	lsrs	r3, r3, #5
 8013a98:	68fa      	ldr	r2, [r7, #12]
 8013a9a:	8912      	ldrh	r2, [r2, #8]
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	f0c0 8088 	bcc.w	8013bb2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2200      	movs	r2, #0
 8013aa6:	61da      	str	r2, [r3, #28]
 8013aa8:	2304      	movs	r3, #4
 8013aaa:	e08f      	b.n	8013bcc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8013aac:	68bb      	ldr	r3, [r7, #8]
 8013aae:	0a5b      	lsrs	r3, r3, #9
 8013ab0:	68fa      	ldr	r2, [r7, #12]
 8013ab2:	8952      	ldrh	r2, [r2, #10]
 8013ab4:	3a01      	subs	r2, #1
 8013ab6:	4013      	ands	r3, r2
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d17a      	bne.n	8013bb2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8013abc:	687a      	ldr	r2, [r7, #4]
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	699b      	ldr	r3, [r3, #24]
 8013ac2:	4619      	mov	r1, r3
 8013ac4:	4610      	mov	r0, r2
 8013ac6:	f7ff fc88 	bl	80133da <get_fat>
 8013aca:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8013acc:	697b      	ldr	r3, [r7, #20]
 8013ace:	2b01      	cmp	r3, #1
 8013ad0:	d801      	bhi.n	8013ad6 <dir_next+0x8c>
 8013ad2:	2302      	movs	r3, #2
 8013ad4:	e07a      	b.n	8013bcc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8013ad6:	697b      	ldr	r3, [r7, #20]
 8013ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013adc:	d101      	bne.n	8013ae2 <dir_next+0x98>
 8013ade:	2301      	movs	r3, #1
 8013ae0:	e074      	b.n	8013bcc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	699b      	ldr	r3, [r3, #24]
 8013ae6:	697a      	ldr	r2, [r7, #20]
 8013ae8:	429a      	cmp	r2, r3
 8013aea:	d358      	bcc.n	8013b9e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8013aec:	683b      	ldr	r3, [r7, #0]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d104      	bne.n	8013afc <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8013af2:	687b      	ldr	r3, [r7, #4]
 8013af4:	2200      	movs	r2, #0
 8013af6:	61da      	str	r2, [r3, #28]
 8013af8:	2304      	movs	r3, #4
 8013afa:	e067      	b.n	8013bcc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8013afc:	687a      	ldr	r2, [r7, #4]
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	699b      	ldr	r3, [r3, #24]
 8013b02:	4619      	mov	r1, r3
 8013b04:	4610      	mov	r0, r2
 8013b06:	f7ff fe59 	bl	80137bc <create_chain>
 8013b0a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8013b0c:	697b      	ldr	r3, [r7, #20]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	d101      	bne.n	8013b16 <dir_next+0xcc>
 8013b12:	2307      	movs	r3, #7
 8013b14:	e05a      	b.n	8013bcc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	2b01      	cmp	r3, #1
 8013b1a:	d101      	bne.n	8013b20 <dir_next+0xd6>
 8013b1c:	2302      	movs	r3, #2
 8013b1e:	e055      	b.n	8013bcc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8013b20:	697b      	ldr	r3, [r7, #20]
 8013b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b26:	d101      	bne.n	8013b2c <dir_next+0xe2>
 8013b28:	2301      	movs	r3, #1
 8013b2a:	e04f      	b.n	8013bcc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8013b2c:	68f8      	ldr	r0, [r7, #12]
 8013b2e:	f7ff fb55 	bl	80131dc <sync_window>
 8013b32:	4603      	mov	r3, r0
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d001      	beq.n	8013b3c <dir_next+0xf2>
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e047      	b.n	8013bcc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	3334      	adds	r3, #52	; 0x34
 8013b40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013b44:	2100      	movs	r1, #0
 8013b46:	4618      	mov	r0, r3
 8013b48:	f7ff f94f 	bl	8012dea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	613b      	str	r3, [r7, #16]
 8013b50:	6979      	ldr	r1, [r7, #20]
 8013b52:	68f8      	ldr	r0, [r7, #12]
 8013b54:	f7ff fc22 	bl	801339c <clust2sect>
 8013b58:	4602      	mov	r2, r0
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	631a      	str	r2, [r3, #48]	; 0x30
 8013b5e:	e012      	b.n	8013b86 <dir_next+0x13c>
						fs->wflag = 1;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	2201      	movs	r2, #1
 8013b64:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8013b66:	68f8      	ldr	r0, [r7, #12]
 8013b68:	f7ff fb38 	bl	80131dc <sync_window>
 8013b6c:	4603      	mov	r3, r0
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d001      	beq.n	8013b76 <dir_next+0x12c>
 8013b72:	2301      	movs	r3, #1
 8013b74:	e02a      	b.n	8013bcc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013b76:	693b      	ldr	r3, [r7, #16]
 8013b78:	3301      	adds	r3, #1
 8013b7a:	613b      	str	r3, [r7, #16]
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013b80:	1c5a      	adds	r2, r3, #1
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	631a      	str	r2, [r3, #48]	; 0x30
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	895b      	ldrh	r3, [r3, #10]
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	4293      	cmp	r3, r2
 8013b90:	d3e6      	bcc.n	8013b60 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013b96:	693b      	ldr	r3, [r7, #16]
 8013b98:	1ad2      	subs	r2, r2, r3
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	697a      	ldr	r2, [r7, #20]
 8013ba2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8013ba4:	6979      	ldr	r1, [r7, #20]
 8013ba6:	68f8      	ldr	r0, [r7, #12]
 8013ba8:	f7ff fbf8 	bl	801339c <clust2sect>
 8013bac:	4602      	mov	r2, r0
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	68ba      	ldr	r2, [r7, #8]
 8013bb6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8013bbe:	68bb      	ldr	r3, [r7, #8]
 8013bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013bc4:	441a      	add	r2, r3
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8013bca:	2300      	movs	r3, #0
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3718      	adds	r7, #24
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}

08013bd4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8013bd4:	b580      	push	{r7, lr}
 8013bd6:	b086      	sub	sp, #24
 8013bd8:	af00      	add	r7, sp, #0
 8013bda:	6078      	str	r0, [r7, #4]
 8013bdc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8013be4:	2100      	movs	r1, #0
 8013be6:	6878      	ldr	r0, [r7, #4]
 8013be8:	f7ff feb4 	bl	8013954 <dir_sdi>
 8013bec:	4603      	mov	r3, r0
 8013bee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8013bf0:	7dfb      	ldrb	r3, [r7, #23]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d12b      	bne.n	8013c4e <dir_alloc+0x7a>
		n = 0;
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8013bfa:	687b      	ldr	r3, [r7, #4]
 8013bfc:	69db      	ldr	r3, [r3, #28]
 8013bfe:	4619      	mov	r1, r3
 8013c00:	68f8      	ldr	r0, [r7, #12]
 8013c02:	f7ff fb2f 	bl	8013264 <move_window>
 8013c06:	4603      	mov	r3, r0
 8013c08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013c0a:	7dfb      	ldrb	r3, [r7, #23]
 8013c0c:	2b00      	cmp	r3, #0
 8013c0e:	d11d      	bne.n	8013c4c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6a1b      	ldr	r3, [r3, #32]
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	2be5      	cmp	r3, #229	; 0xe5
 8013c18:	d004      	beq.n	8013c24 <dir_alloc+0x50>
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	6a1b      	ldr	r3, [r3, #32]
 8013c1e:	781b      	ldrb	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d107      	bne.n	8013c34 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	3301      	adds	r3, #1
 8013c28:	613b      	str	r3, [r7, #16]
 8013c2a:	693a      	ldr	r2, [r7, #16]
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d102      	bne.n	8013c38 <dir_alloc+0x64>
 8013c32:	e00c      	b.n	8013c4e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8013c34:	2300      	movs	r3, #0
 8013c36:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8013c38:	2101      	movs	r1, #1
 8013c3a:	6878      	ldr	r0, [r7, #4]
 8013c3c:	f7ff ff05 	bl	8013a4a <dir_next>
 8013c40:	4603      	mov	r3, r0
 8013c42:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8013c44:	7dfb      	ldrb	r3, [r7, #23]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d0d7      	beq.n	8013bfa <dir_alloc+0x26>
 8013c4a:	e000      	b.n	8013c4e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8013c4c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8013c4e:	7dfb      	ldrb	r3, [r7, #23]
 8013c50:	2b04      	cmp	r3, #4
 8013c52:	d101      	bne.n	8013c58 <dir_alloc+0x84>
 8013c54:	2307      	movs	r3, #7
 8013c56:	75fb      	strb	r3, [r7, #23]
	return res;
 8013c58:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3718      	adds	r7, #24
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}

08013c62 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8013c62:	b580      	push	{r7, lr}
 8013c64:	b084      	sub	sp, #16
 8013c66:	af00      	add	r7, sp, #0
 8013c68:	6078      	str	r0, [r7, #4]
 8013c6a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8013c6c:	683b      	ldr	r3, [r7, #0]
 8013c6e:	331a      	adds	r3, #26
 8013c70:	4618      	mov	r0, r3
 8013c72:	f7ff f817 	bl	8012ca4 <ld_word>
 8013c76:	4603      	mov	r3, r0
 8013c78:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	781b      	ldrb	r3, [r3, #0]
 8013c7e:	2b03      	cmp	r3, #3
 8013c80:	d109      	bne.n	8013c96 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013c82:	683b      	ldr	r3, [r7, #0]
 8013c84:	3314      	adds	r3, #20
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7ff f80c 	bl	8012ca4 <ld_word>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	041b      	lsls	r3, r3, #16
 8013c90:	68fa      	ldr	r2, [r7, #12]
 8013c92:	4313      	orrs	r3, r2
 8013c94:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8013c96:	68fb      	ldr	r3, [r7, #12]
}
 8013c98:	4618      	mov	r0, r3
 8013c9a:	3710      	adds	r7, #16
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	bd80      	pop	{r7, pc}

08013ca0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8013ca0:	b580      	push	{r7, lr}
 8013ca2:	b084      	sub	sp, #16
 8013ca4:	af00      	add	r7, sp, #0
 8013ca6:	60f8      	str	r0, [r7, #12]
 8013ca8:	60b9      	str	r1, [r7, #8]
 8013caa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	331a      	adds	r3, #26
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	b292      	uxth	r2, r2
 8013cb4:	4611      	mov	r1, r2
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	f7ff f82f 	bl	8012d1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	781b      	ldrb	r3, [r3, #0]
 8013cc0:	2b03      	cmp	r3, #3
 8013cc2:	d109      	bne.n	8013cd8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8013cc4:	68bb      	ldr	r3, [r7, #8]
 8013cc6:	f103 0214 	add.w	r2, r3, #20
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	0c1b      	lsrs	r3, r3, #16
 8013cce:	b29b      	uxth	r3, r3
 8013cd0:	4619      	mov	r1, r3
 8013cd2:	4610      	mov	r0, r2
 8013cd4:	f7ff f821 	bl	8012d1a <st_word>
	}
}
 8013cd8:	bf00      	nop
 8013cda:	3710      	adds	r7, #16
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd80      	pop	{r7, pc}

08013ce0 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8013ce0:	b580      	push	{r7, lr}
 8013ce2:	b086      	sub	sp, #24
 8013ce4:	af00      	add	r7, sp, #0
 8013ce6:	6078      	str	r0, [r7, #4]
 8013ce8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8013cea:	2304      	movs	r3, #4
 8013cec:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	681b      	ldr	r3, [r3, #0]
 8013cf2:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 8013cf4:	e03c      	b.n	8013d70 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	69db      	ldr	r3, [r3, #28]
 8013cfa:	4619      	mov	r1, r3
 8013cfc:	6938      	ldr	r0, [r7, #16]
 8013cfe:	f7ff fab1 	bl	8013264 <move_window>
 8013d02:	4603      	mov	r3, r0
 8013d04:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013d06:	7dfb      	ldrb	r3, [r7, #23]
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d136      	bne.n	8013d7a <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6a1b      	ldr	r3, [r3, #32]
 8013d10:	781b      	ldrb	r3, [r3, #0]
 8013d12:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 8013d14:	7bfb      	ldrb	r3, [r7, #15]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d102      	bne.n	8013d20 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8013d1a:	2304      	movs	r3, #4
 8013d1c:	75fb      	strb	r3, [r7, #23]
 8013d1e:	e031      	b.n	8013d84 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	6a1b      	ldr	r3, [r3, #32]
 8013d24:	330b      	adds	r3, #11
 8013d26:	781b      	ldrb	r3, [r3, #0]
 8013d28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013d2c:	73bb      	strb	r3, [r7, #14]
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	7bba      	ldrb	r2, [r7, #14]
 8013d32:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 8013d34:	7bfb      	ldrb	r3, [r7, #15]
 8013d36:	2be5      	cmp	r3, #229	; 0xe5
 8013d38:	d011      	beq.n	8013d5e <dir_read+0x7e>
 8013d3a:	7bfb      	ldrb	r3, [r7, #15]
 8013d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8013d3e:	d00e      	beq.n	8013d5e <dir_read+0x7e>
 8013d40:	7bbb      	ldrb	r3, [r7, #14]
 8013d42:	2b0f      	cmp	r3, #15
 8013d44:	d00b      	beq.n	8013d5e <dir_read+0x7e>
 8013d46:	7bbb      	ldrb	r3, [r7, #14]
 8013d48:	f023 0320 	bic.w	r3, r3, #32
 8013d4c:	2b08      	cmp	r3, #8
 8013d4e:	bf0c      	ite	eq
 8013d50:	2301      	moveq	r3, #1
 8013d52:	2300      	movne	r3, #0
 8013d54:	b2db      	uxtb	r3, r3
 8013d56:	461a      	mov	r2, r3
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d00f      	beq.n	8013d7e <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8013d5e:	2100      	movs	r1, #0
 8013d60:	6878      	ldr	r0, [r7, #4]
 8013d62:	f7ff fe72 	bl	8013a4a <dir_next>
 8013d66:	4603      	mov	r3, r0
 8013d68:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013d6a:	7dfb      	ldrb	r3, [r7, #23]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d108      	bne.n	8013d82 <dir_read+0xa2>
	while (dp->sect) {
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	69db      	ldr	r3, [r3, #28]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d1be      	bne.n	8013cf6 <dir_read+0x16>
 8013d78:	e004      	b.n	8013d84 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013d7a:	bf00      	nop
 8013d7c:	e002      	b.n	8013d84 <dir_read+0xa4>
				break;
 8013d7e:	bf00      	nop
 8013d80:	e000      	b.n	8013d84 <dir_read+0xa4>
		if (res != FR_OK) break;
 8013d82:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8013d84:	7dfb      	ldrb	r3, [r7, #23]
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d002      	beq.n	8013d90 <dir_read+0xb0>
 8013d8a:	687b      	ldr	r3, [r7, #4]
 8013d8c:	2200      	movs	r2, #0
 8013d8e:	61da      	str	r2, [r3, #28]
	return res;
 8013d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d92:	4618      	mov	r0, r3
 8013d94:	3718      	adds	r7, #24
 8013d96:	46bd      	mov	sp, r7
 8013d98:	bd80      	pop	{r7, pc}

08013d9a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013d9a:	b580      	push	{r7, lr}
 8013d9c:	b086      	sub	sp, #24
 8013d9e:	af00      	add	r7, sp, #0
 8013da0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	681b      	ldr	r3, [r3, #0]
 8013da6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013da8:	2100      	movs	r1, #0
 8013daa:	6878      	ldr	r0, [r7, #4]
 8013dac:	f7ff fdd2 	bl	8013954 <dir_sdi>
 8013db0:	4603      	mov	r3, r0
 8013db2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8013db4:	7dfb      	ldrb	r3, [r7, #23]
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d001      	beq.n	8013dbe <dir_find+0x24>
 8013dba:	7dfb      	ldrb	r3, [r7, #23]
 8013dbc:	e03e      	b.n	8013e3c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	69db      	ldr	r3, [r3, #28]
 8013dc2:	4619      	mov	r1, r3
 8013dc4:	6938      	ldr	r0, [r7, #16]
 8013dc6:	f7ff fa4d 	bl	8013264 <move_window>
 8013dca:	4603      	mov	r3, r0
 8013dcc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013dce:	7dfb      	ldrb	r3, [r7, #23]
 8013dd0:	2b00      	cmp	r3, #0
 8013dd2:	d12f      	bne.n	8013e34 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8013dd4:	687b      	ldr	r3, [r7, #4]
 8013dd6:	6a1b      	ldr	r3, [r3, #32]
 8013dd8:	781b      	ldrb	r3, [r3, #0]
 8013dda:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8013ddc:	7bfb      	ldrb	r3, [r7, #15]
 8013dde:	2b00      	cmp	r3, #0
 8013de0:	d102      	bne.n	8013de8 <dir_find+0x4e>
 8013de2:	2304      	movs	r3, #4
 8013de4:	75fb      	strb	r3, [r7, #23]
 8013de6:	e028      	b.n	8013e3a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6a1b      	ldr	r3, [r3, #32]
 8013dec:	330b      	adds	r3, #11
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013df4:	b2da      	uxtb	r2, r3
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6a1b      	ldr	r3, [r3, #32]
 8013dfe:	330b      	adds	r3, #11
 8013e00:	781b      	ldrb	r3, [r3, #0]
 8013e02:	f003 0308 	and.w	r3, r3, #8
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d10a      	bne.n	8013e20 <dir_find+0x86>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	6a18      	ldr	r0, [r3, #32]
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	3324      	adds	r3, #36	; 0x24
 8013e12:	220b      	movs	r2, #11
 8013e14:	4619      	mov	r1, r3
 8013e16:	f7ff f802 	bl	8012e1e <mem_cmp>
 8013e1a:	4603      	mov	r3, r0
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d00b      	beq.n	8013e38 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8013e20:	2100      	movs	r1, #0
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f7ff fe11 	bl	8013a4a <dir_next>
 8013e28:	4603      	mov	r3, r0
 8013e2a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8013e2c:	7dfb      	ldrb	r3, [r7, #23]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d0c5      	beq.n	8013dbe <dir_find+0x24>
 8013e32:	e002      	b.n	8013e3a <dir_find+0xa0>
		if (res != FR_OK) break;
 8013e34:	bf00      	nop
 8013e36:	e000      	b.n	8013e3a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8013e38:	bf00      	nop

	return res;
 8013e3a:	7dfb      	ldrb	r3, [r7, #23]
}
 8013e3c:	4618      	mov	r0, r3
 8013e3e:	3718      	adds	r7, #24
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b084      	sub	sp, #16
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	681b      	ldr	r3, [r3, #0]
 8013e50:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8013e52:	2101      	movs	r1, #1
 8013e54:	6878      	ldr	r0, [r7, #4]
 8013e56:	f7ff febd 	bl	8013bd4 <dir_alloc>
 8013e5a:	4603      	mov	r3, r0
 8013e5c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013e5e:	7bfb      	ldrb	r3, [r7, #15]
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	d11c      	bne.n	8013e9e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	69db      	ldr	r3, [r3, #28]
 8013e68:	4619      	mov	r1, r3
 8013e6a:	68b8      	ldr	r0, [r7, #8]
 8013e6c:	f7ff f9fa 	bl	8013264 <move_window>
 8013e70:	4603      	mov	r3, r0
 8013e72:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8013e74:	7bfb      	ldrb	r3, [r7, #15]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d111      	bne.n	8013e9e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	6a1b      	ldr	r3, [r3, #32]
 8013e7e:	2220      	movs	r2, #32
 8013e80:	2100      	movs	r1, #0
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7fe ffb1 	bl	8012dea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	6a18      	ldr	r0, [r3, #32]
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	3324      	adds	r3, #36	; 0x24
 8013e90:	220b      	movs	r2, #11
 8013e92:	4619      	mov	r1, r3
 8013e94:	f7fe ff88 	bl	8012da8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8013e98:	68bb      	ldr	r3, [r7, #8]
 8013e9a:	2201      	movs	r2, #1
 8013e9c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8013e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ea0:	4618      	mov	r0, r3
 8013ea2:	3710      	adds	r7, #16
 8013ea4:	46bd      	mov	sp, r7
 8013ea6:	bd80      	pop	{r7, pc}

08013ea8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b086      	sub	sp, #24
 8013eac:	af00      	add	r7, sp, #0
 8013eae:	6078      	str	r0, [r7, #4]
 8013eb0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8013eb2:	683b      	ldr	r3, [r7, #0]
 8013eb4:	2200      	movs	r2, #0
 8013eb6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	69db      	ldr	r3, [r3, #28]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d04e      	beq.n	8013f5e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8013ec0:	2300      	movs	r3, #0
 8013ec2:	613b      	str	r3, [r7, #16]
 8013ec4:	693b      	ldr	r3, [r7, #16]
 8013ec6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8013ec8:	e021      	b.n	8013f0e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	6a1a      	ldr	r2, [r3, #32]
 8013ece:	697b      	ldr	r3, [r7, #20]
 8013ed0:	1c59      	adds	r1, r3, #1
 8013ed2:	6179      	str	r1, [r7, #20]
 8013ed4:	4413      	add	r3, r2
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8013eda:	7bfb      	ldrb	r3, [r7, #15]
 8013edc:	2b20      	cmp	r3, #32
 8013ede:	d100      	bne.n	8013ee2 <get_fileinfo+0x3a>
 8013ee0:	e015      	b.n	8013f0e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013ee2:	7bfb      	ldrb	r3, [r7, #15]
 8013ee4:	2b05      	cmp	r3, #5
 8013ee6:	d101      	bne.n	8013eec <get_fileinfo+0x44>
 8013ee8:	23e5      	movs	r3, #229	; 0xe5
 8013eea:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8013eec:	697b      	ldr	r3, [r7, #20]
 8013eee:	2b09      	cmp	r3, #9
 8013ef0:	d106      	bne.n	8013f00 <get_fileinfo+0x58>
 8013ef2:	693b      	ldr	r3, [r7, #16]
 8013ef4:	1c5a      	adds	r2, r3, #1
 8013ef6:	613a      	str	r2, [r7, #16]
 8013ef8:	683a      	ldr	r2, [r7, #0]
 8013efa:	4413      	add	r3, r2
 8013efc:	222e      	movs	r2, #46	; 0x2e
 8013efe:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8013f00:	693b      	ldr	r3, [r7, #16]
 8013f02:	1c5a      	adds	r2, r3, #1
 8013f04:	613a      	str	r2, [r7, #16]
 8013f06:	683a      	ldr	r2, [r7, #0]
 8013f08:	4413      	add	r3, r2
 8013f0a:	7bfa      	ldrb	r2, [r7, #15]
 8013f0c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8013f0e:	697b      	ldr	r3, [r7, #20]
 8013f10:	2b0a      	cmp	r3, #10
 8013f12:	d9da      	bls.n	8013eca <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8013f14:	683a      	ldr	r2, [r7, #0]
 8013f16:	693b      	ldr	r3, [r7, #16]
 8013f18:	4413      	add	r3, r2
 8013f1a:	3309      	adds	r3, #9
 8013f1c:	2200      	movs	r2, #0
 8013f1e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	6a1b      	ldr	r3, [r3, #32]
 8013f24:	7ada      	ldrb	r2, [r3, #11]
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6a1b      	ldr	r3, [r3, #32]
 8013f2e:	331c      	adds	r3, #28
 8013f30:	4618      	mov	r0, r3
 8013f32:	f7fe fecf 	bl	8012cd4 <ld_dword>
 8013f36:	4602      	mov	r2, r0
 8013f38:	683b      	ldr	r3, [r7, #0]
 8013f3a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	6a1b      	ldr	r3, [r3, #32]
 8013f40:	3316      	adds	r3, #22
 8013f42:	4618      	mov	r0, r3
 8013f44:	f7fe fec6 	bl	8012cd4 <ld_dword>
 8013f48:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013f4a:	68bb      	ldr	r3, [r7, #8]
 8013f4c:	b29a      	uxth	r2, r3
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	80da      	strh	r2, [r3, #6]
 8013f52:	68bb      	ldr	r3, [r7, #8]
 8013f54:	0c1b      	lsrs	r3, r3, #16
 8013f56:	b29a      	uxth	r2, r3
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	809a      	strh	r2, [r3, #4]
 8013f5c:	e000      	b.n	8013f60 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013f5e:	bf00      	nop
}
 8013f60:	3718      	adds	r7, #24
 8013f62:	46bd      	mov	sp, r7
 8013f64:	bd80      	pop	{r7, pc}
	...

08013f68 <get_achar>:

static
WCHAR get_achar (		/* Get a character and advances ptr 1 or 2 */
	const TCHAR** ptr	/* Pointer to pointer to the SBCS/DBCS/Unicode string */
)
{
 8013f68:	b480      	push	{r7}
 8013f6a:	b085      	sub	sp, #20
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
#if !_LFN_UNICODE
	WCHAR chr;

	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	1c59      	adds	r1, r3, #1
 8013f76:	687a      	ldr	r2, [r7, #4]
 8013f78:	6011      	str	r1, [r2, #0]
 8013f7a:	781b      	ldrb	r3, [r3, #0]
 8013f7c:	81fb      	strh	r3, [r7, #14]
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8013f7e:	89fb      	ldrh	r3, [r7, #14]
 8013f80:	2b60      	cmp	r3, #96	; 0x60
 8013f82:	d905      	bls.n	8013f90 <get_achar+0x28>
 8013f84:	89fb      	ldrh	r3, [r7, #14]
 8013f86:	2b7a      	cmp	r3, #122	; 0x7a
 8013f88:	d802      	bhi.n	8013f90 <get_achar+0x28>
 8013f8a:	89fb      	ldrh	r3, [r7, #14]
 8013f8c:	3b20      	subs	r3, #32
 8013f8e:	81fb      	strh	r3, [r7, #14]
#ifdef _EXCVT
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8013f90:	89fb      	ldrh	r3, [r7, #14]
 8013f92:	2b7f      	cmp	r3, #127	; 0x7f
 8013f94:	d904      	bls.n	8013fa0 <get_achar+0x38>
 8013f96:	89fb      	ldrh	r3, [r7, #14]
 8013f98:	3b80      	subs	r3, #128	; 0x80
 8013f9a:	4a05      	ldr	r2, [pc, #20]	; (8013fb0 <get_achar+0x48>)
 8013f9c:	5cd3      	ldrb	r3, [r2, r3]
 8013f9e:	81fb      	strh	r3, [r7, #14]
#else
	if (IsDBCS1(chr) && IsDBCS2(**ptr)) {		/* Get DBC 2nd byte if needed */
		chr = chr << 8 | (BYTE)*(*ptr)++;
	}
#endif
	return chr;
 8013fa0:	89fb      	ldrh	r3, [r7, #14]
#else
	return ff_wtoupper(*(*ptr)++);			/* Get a word and to upper */
#endif
}
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	3714      	adds	r7, #20
 8013fa6:	46bd      	mov	sp, r7
 8013fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013fac:	4770      	bx	lr
 8013fae:	bf00      	nop
 8013fb0:	0801d748 	.word	0x0801d748

08013fb4 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8013fb4:	b580      	push	{r7, lr}
 8013fb6:	b08a      	sub	sp, #40	; 0x28
 8013fb8:	af00      	add	r7, sp, #0
 8013fba:	60f8      	str	r0, [r7, #12]
 8013fbc:	60b9      	str	r1, [r7, #8]
 8013fbe:	607a      	str	r2, [r7, #4]
 8013fc0:	603b      	str	r3, [r7, #0]
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 8013fc2:	e009      	b.n	8013fd8 <pattern_matching+0x24>
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 8013fc4:	f107 0308 	add.w	r3, r7, #8
 8013fc8:	4618      	mov	r0, r3
 8013fca:	f7ff ffcd 	bl	8013f68 <get_achar>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d101      	bne.n	8013fd8 <pattern_matching+0x24>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	e064      	b.n	80140a2 <pattern_matching+0xee>
	while (skip--) {				/* Pre-skip name chars */
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	1e5a      	subs	r2, r3, #1
 8013fdc:	607a      	str	r2, [r7, #4]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d1f0      	bne.n	8013fc4 <pattern_matching+0x10>
	}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8013fe2:	68fb      	ldr	r3, [r7, #12]
 8013fe4:	781b      	ldrb	r3, [r3, #0]
 8013fe6:	2b00      	cmp	r3, #0
 8013fe8:	d104      	bne.n	8013ff4 <pattern_matching+0x40>
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	2b00      	cmp	r3, #0
 8013fee:	d001      	beq.n	8013ff4 <pattern_matching+0x40>
 8013ff0:	2301      	movs	r3, #1
 8013ff2:	e056      	b.n	80140a2 <pattern_matching+0xee>

	do {
		pp = pat; np = nam;			/* Top of pattern and name to match */
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	617b      	str	r3, [r7, #20]
 8013ff8:	68bb      	ldr	r3, [r7, #8]
 8013ffa:	613b      	str	r3, [r7, #16]
		for (;;) {
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	781b      	ldrb	r3, [r3, #0]
 8014000:	2b3f      	cmp	r3, #63	; 0x3f
 8014002:	d003      	beq.n	801400c <pattern_matching+0x58>
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	781b      	ldrb	r3, [r3, #0]
 8014008:	2b2a      	cmp	r3, #42	; 0x2a
 801400a:	d126      	bne.n	801405a <pattern_matching+0xa6>
				nm = nx = 0;
 801400c:	2300      	movs	r3, #0
 801400e:	61fb      	str	r3, [r7, #28]
 8014010:	69fb      	ldr	r3, [r7, #28]
 8014012:	623b      	str	r3, [r7, #32]
				do {				/* Analyze the wildcard chars */
					if (*pp++ == '?') nm++; else nx = 1;
 8014014:	697b      	ldr	r3, [r7, #20]
 8014016:	1c5a      	adds	r2, r3, #1
 8014018:	617a      	str	r2, [r7, #20]
 801401a:	781b      	ldrb	r3, [r3, #0]
 801401c:	2b3f      	cmp	r3, #63	; 0x3f
 801401e:	d103      	bne.n	8014028 <pattern_matching+0x74>
 8014020:	6a3b      	ldr	r3, [r7, #32]
 8014022:	3301      	adds	r3, #1
 8014024:	623b      	str	r3, [r7, #32]
 8014026:	e001      	b.n	801402c <pattern_matching+0x78>
 8014028:	2301      	movs	r3, #1
 801402a:	61fb      	str	r3, [r7, #28]
				} while (*pp == '?' || *pp == '*');
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	2b3f      	cmp	r3, #63	; 0x3f
 8014032:	d0ef      	beq.n	8014014 <pattern_matching+0x60>
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	2b2a      	cmp	r3, #42	; 0x2a
 801403a:	d0eb      	beq.n	8014014 <pattern_matching+0x60>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 801403c:	6978      	ldr	r0, [r7, #20]
 801403e:	6939      	ldr	r1, [r7, #16]
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	6a3a      	ldr	r2, [r7, #32]
 8014044:	f7ff ffb6 	bl	8013fb4 <pattern_matching>
 8014048:	4603      	mov	r3, r0
 801404a:	2b00      	cmp	r3, #0
 801404c:	d001      	beq.n	8014052 <pattern_matching+0x9e>
 801404e:	2301      	movs	r3, #1
 8014050:	e027      	b.n	80140a2 <pattern_matching+0xee>
				nc = *np; break;	/* Branch mismatched */
 8014052:	693b      	ldr	r3, [r7, #16]
 8014054:	781b      	ldrb	r3, [r3, #0]
 8014056:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014058:	e017      	b.n	801408a <pattern_matching+0xd6>
			}
			pc = get_achar(&pp);	/* Get a pattern char */
 801405a:	f107 0314 	add.w	r3, r7, #20
 801405e:	4618      	mov	r0, r3
 8014060:	f7ff ff82 	bl	8013f68 <get_achar>
 8014064:	4603      	mov	r3, r0
 8014066:	837b      	strh	r3, [r7, #26]
			nc = get_achar(&np);	/* Get a name char */
 8014068:	f107 0310 	add.w	r3, r7, #16
 801406c:	4618      	mov	r0, r3
 801406e:	f7ff ff7b 	bl	8013f68 <get_achar>
 8014072:	4603      	mov	r3, r0
 8014074:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (pc != nc) break;	/* Branch mismatched? */
 8014076:	8b7a      	ldrh	r2, [r7, #26]
 8014078:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801407a:	429a      	cmp	r2, r3
 801407c:	d104      	bne.n	8014088 <pattern_matching+0xd4>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801407e:	8b7b      	ldrh	r3, [r7, #26]
 8014080:	2b00      	cmp	r3, #0
 8014082:	d1bb      	bne.n	8013ffc <pattern_matching+0x48>
 8014084:	2301      	movs	r3, #1
 8014086:	e00c      	b.n	80140a2 <pattern_matching+0xee>
			if (pc != nc) break;	/* Branch mismatched? */
 8014088:	bf00      	nop
		}
		get_achar(&nam);			/* nam++ */
 801408a:	f107 0308 	add.w	r3, r7, #8
 801408e:	4618      	mov	r0, r3
 8014090:	f7ff ff6a 	bl	8013f68 <get_achar>
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 8014094:	683b      	ldr	r3, [r7, #0]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d002      	beq.n	80140a0 <pattern_matching+0xec>
 801409a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801409c:	2b00      	cmp	r3, #0
 801409e:	d1a9      	bne.n	8013ff4 <pattern_matching+0x40>

	return 0;
 80140a0:	2300      	movs	r3, #0
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	3728      	adds	r7, #40	; 0x28
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd80      	pop	{r7, pc}
	...

080140ac <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80140ac:	b580      	push	{r7, lr}
 80140ae:	b088      	sub	sp, #32
 80140b0:	af00      	add	r7, sp, #0
 80140b2:	6078      	str	r0, [r7, #4]
 80140b4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80140b6:	683b      	ldr	r3, [r7, #0]
 80140b8:	681b      	ldr	r3, [r3, #0]
 80140ba:	60fb      	str	r3, [r7, #12]
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	3324      	adds	r3, #36	; 0x24
 80140c0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80140c2:	220b      	movs	r2, #11
 80140c4:	2120      	movs	r1, #32
 80140c6:	68b8      	ldr	r0, [r7, #8]
 80140c8:	f7fe fe8f 	bl	8012dea <mem_set>
	si = i = 0; ni = 8;
 80140cc:	2300      	movs	r3, #0
 80140ce:	613b      	str	r3, [r7, #16]
 80140d0:	693b      	ldr	r3, [r7, #16]
 80140d2:	617b      	str	r3, [r7, #20]
 80140d4:	2308      	movs	r3, #8
 80140d6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	1c5a      	adds	r2, r3, #1
 80140dc:	617a      	str	r2, [r7, #20]
 80140de:	68fa      	ldr	r2, [r7, #12]
 80140e0:	4413      	add	r3, r2
 80140e2:	781b      	ldrb	r3, [r3, #0]
 80140e4:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80140e6:	7ffb      	ldrb	r3, [r7, #31]
 80140e8:	2b20      	cmp	r3, #32
 80140ea:	d94e      	bls.n	801418a <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80140ec:	7ffb      	ldrb	r3, [r7, #31]
 80140ee:	2b2f      	cmp	r3, #47	; 0x2f
 80140f0:	d006      	beq.n	8014100 <create_name+0x54>
 80140f2:	7ffb      	ldrb	r3, [r7, #31]
 80140f4:	2b5c      	cmp	r3, #92	; 0x5c
 80140f6:	d110      	bne.n	801411a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80140f8:	e002      	b.n	8014100 <create_name+0x54>
 80140fa:	697b      	ldr	r3, [r7, #20]
 80140fc:	3301      	adds	r3, #1
 80140fe:	617b      	str	r3, [r7, #20]
 8014100:	68fa      	ldr	r2, [r7, #12]
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	4413      	add	r3, r2
 8014106:	781b      	ldrb	r3, [r3, #0]
 8014108:	2b2f      	cmp	r3, #47	; 0x2f
 801410a:	d0f6      	beq.n	80140fa <create_name+0x4e>
 801410c:	68fa      	ldr	r2, [r7, #12]
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	4413      	add	r3, r2
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	2b5c      	cmp	r3, #92	; 0x5c
 8014116:	d0f0      	beq.n	80140fa <create_name+0x4e>
			break;
 8014118:	e038      	b.n	801418c <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801411a:	7ffb      	ldrb	r3, [r7, #31]
 801411c:	2b2e      	cmp	r3, #46	; 0x2e
 801411e:	d003      	beq.n	8014128 <create_name+0x7c>
 8014120:	693a      	ldr	r2, [r7, #16]
 8014122:	69bb      	ldr	r3, [r7, #24]
 8014124:	429a      	cmp	r2, r3
 8014126:	d30c      	bcc.n	8014142 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8014128:	69bb      	ldr	r3, [r7, #24]
 801412a:	2b0b      	cmp	r3, #11
 801412c:	d002      	beq.n	8014134 <create_name+0x88>
 801412e:	7ffb      	ldrb	r3, [r7, #31]
 8014130:	2b2e      	cmp	r3, #46	; 0x2e
 8014132:	d001      	beq.n	8014138 <create_name+0x8c>
 8014134:	2306      	movs	r3, #6
 8014136:	e044      	b.n	80141c2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8014138:	2308      	movs	r3, #8
 801413a:	613b      	str	r3, [r7, #16]
 801413c:	230b      	movs	r3, #11
 801413e:	61bb      	str	r3, [r7, #24]
			continue;
 8014140:	e022      	b.n	8014188 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8014142:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014146:	2b00      	cmp	r3, #0
 8014148:	da04      	bge.n	8014154 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801414a:	7ffb      	ldrb	r3, [r7, #31]
 801414c:	3b80      	subs	r3, #128	; 0x80
 801414e:	4a1f      	ldr	r2, [pc, #124]	; (80141cc <create_name+0x120>)
 8014150:	5cd3      	ldrb	r3, [r2, r3]
 8014152:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8014154:	7ffb      	ldrb	r3, [r7, #31]
 8014156:	4619      	mov	r1, r3
 8014158:	481d      	ldr	r0, [pc, #116]	; (80141d0 <create_name+0x124>)
 801415a:	f7fe fe87 	bl	8012e6c <chk_chr>
 801415e:	4603      	mov	r3, r0
 8014160:	2b00      	cmp	r3, #0
 8014162:	d001      	beq.n	8014168 <create_name+0xbc>
 8014164:	2306      	movs	r3, #6
 8014166:	e02c      	b.n	80141c2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8014168:	7ffb      	ldrb	r3, [r7, #31]
 801416a:	2b60      	cmp	r3, #96	; 0x60
 801416c:	d905      	bls.n	801417a <create_name+0xce>
 801416e:	7ffb      	ldrb	r3, [r7, #31]
 8014170:	2b7a      	cmp	r3, #122	; 0x7a
 8014172:	d802      	bhi.n	801417a <create_name+0xce>
 8014174:	7ffb      	ldrb	r3, [r7, #31]
 8014176:	3b20      	subs	r3, #32
 8014178:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801417a:	693b      	ldr	r3, [r7, #16]
 801417c:	1c5a      	adds	r2, r3, #1
 801417e:	613a      	str	r2, [r7, #16]
 8014180:	68ba      	ldr	r2, [r7, #8]
 8014182:	4413      	add	r3, r2
 8014184:	7ffa      	ldrb	r2, [r7, #31]
 8014186:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8014188:	e7a6      	b.n	80140d8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 801418a:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 801418c:	68fa      	ldr	r2, [r7, #12]
 801418e:	697b      	ldr	r3, [r7, #20]
 8014190:	441a      	add	r2, r3
 8014192:	683b      	ldr	r3, [r7, #0]
 8014194:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8014196:	693b      	ldr	r3, [r7, #16]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d101      	bne.n	80141a0 <create_name+0xf4>
 801419c:	2306      	movs	r3, #6
 801419e:	e010      	b.n	80141c2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80141a0:	68bb      	ldr	r3, [r7, #8]
 80141a2:	781b      	ldrb	r3, [r3, #0]
 80141a4:	2be5      	cmp	r3, #229	; 0xe5
 80141a6:	d102      	bne.n	80141ae <create_name+0x102>
 80141a8:	68bb      	ldr	r3, [r7, #8]
 80141aa:	2205      	movs	r2, #5
 80141ac:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80141ae:	7ffb      	ldrb	r3, [r7, #31]
 80141b0:	2b20      	cmp	r3, #32
 80141b2:	d801      	bhi.n	80141b8 <create_name+0x10c>
 80141b4:	2204      	movs	r2, #4
 80141b6:	e000      	b.n	80141ba <create_name+0x10e>
 80141b8:	2200      	movs	r2, #0
 80141ba:	68bb      	ldr	r3, [r7, #8]
 80141bc:	330b      	adds	r3, #11
 80141be:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80141c0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80141c2:	4618      	mov	r0, r3
 80141c4:	3720      	adds	r7, #32
 80141c6:	46bd      	mov	sp, r7
 80141c8:	bd80      	pop	{r7, pc}
 80141ca:	bf00      	nop
 80141cc:	0801d748 	.word	0x0801d748
 80141d0:	0801d508 	.word	0x0801d508

080141d4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80141d4:	b580      	push	{r7, lr}
 80141d6:	b086      	sub	sp, #24
 80141d8:	af00      	add	r7, sp, #0
 80141da:	6078      	str	r0, [r7, #4]
 80141dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80141e2:	693b      	ldr	r3, [r7, #16]
 80141e4:	681b      	ldr	r3, [r3, #0]
 80141e6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80141e8:	e002      	b.n	80141f0 <follow_path+0x1c>
 80141ea:	683b      	ldr	r3, [r7, #0]
 80141ec:	3301      	adds	r3, #1
 80141ee:	603b      	str	r3, [r7, #0]
 80141f0:	683b      	ldr	r3, [r7, #0]
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	2b2f      	cmp	r3, #47	; 0x2f
 80141f6:	d0f8      	beq.n	80141ea <follow_path+0x16>
 80141f8:	683b      	ldr	r3, [r7, #0]
 80141fa:	781b      	ldrb	r3, [r3, #0]
 80141fc:	2b5c      	cmp	r3, #92	; 0x5c
 80141fe:	d0f4      	beq.n	80141ea <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8014200:	693b      	ldr	r3, [r7, #16]
 8014202:	2200      	movs	r2, #0
 8014204:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8014206:	683b      	ldr	r3, [r7, #0]
 8014208:	781b      	ldrb	r3, [r3, #0]
 801420a:	2b1f      	cmp	r3, #31
 801420c:	d80a      	bhi.n	8014224 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	2280      	movs	r2, #128	; 0x80
 8014212:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8014216:	2100      	movs	r1, #0
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f7ff fb9b 	bl	8013954 <dir_sdi>
 801421e:	4603      	mov	r3, r0
 8014220:	75fb      	strb	r3, [r7, #23]
 8014222:	e043      	b.n	80142ac <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8014224:	463b      	mov	r3, r7
 8014226:	4619      	mov	r1, r3
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f7ff ff3f 	bl	80140ac <create_name>
 801422e:	4603      	mov	r3, r0
 8014230:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8014232:	7dfb      	ldrb	r3, [r7, #23]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d134      	bne.n	80142a2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8014238:	6878      	ldr	r0, [r7, #4]
 801423a:	f7ff fdae 	bl	8013d9a <dir_find>
 801423e:	4603      	mov	r3, r0
 8014240:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014248:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 801424a:	7dfb      	ldrb	r3, [r7, #23]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00a      	beq.n	8014266 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8014250:	7dfb      	ldrb	r3, [r7, #23]
 8014252:	2b04      	cmp	r3, #4
 8014254:	d127      	bne.n	80142a6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8014256:	7afb      	ldrb	r3, [r7, #11]
 8014258:	f003 0304 	and.w	r3, r3, #4
 801425c:	2b00      	cmp	r3, #0
 801425e:	d122      	bne.n	80142a6 <follow_path+0xd2>
 8014260:	2305      	movs	r3, #5
 8014262:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8014264:	e01f      	b.n	80142a6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8014266:	7afb      	ldrb	r3, [r7, #11]
 8014268:	f003 0304 	and.w	r3, r3, #4
 801426c:	2b00      	cmp	r3, #0
 801426e:	d11c      	bne.n	80142aa <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8014270:	693b      	ldr	r3, [r7, #16]
 8014272:	799b      	ldrb	r3, [r3, #6]
 8014274:	f003 0310 	and.w	r3, r3, #16
 8014278:	2b00      	cmp	r3, #0
 801427a:	d102      	bne.n	8014282 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801427c:	2305      	movs	r3, #5
 801427e:	75fb      	strb	r3, [r7, #23]
 8014280:	e014      	b.n	80142ac <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	695b      	ldr	r3, [r3, #20]
 801428c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014290:	4413      	add	r3, r2
 8014292:	4619      	mov	r1, r3
 8014294:	68f8      	ldr	r0, [r7, #12]
 8014296:	f7ff fce4 	bl	8013c62 <ld_clust>
 801429a:	4602      	mov	r2, r0
 801429c:	693b      	ldr	r3, [r7, #16]
 801429e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80142a0:	e7c0      	b.n	8014224 <follow_path+0x50>
			if (res != FR_OK) break;
 80142a2:	bf00      	nop
 80142a4:	e002      	b.n	80142ac <follow_path+0xd8>
				break;
 80142a6:	bf00      	nop
 80142a8:	e000      	b.n	80142ac <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80142aa:	bf00      	nop
			}
		}
	}

	return res;
 80142ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80142ae:	4618      	mov	r0, r3
 80142b0:	3718      	adds	r7, #24
 80142b2:	46bd      	mov	sp, r7
 80142b4:	bd80      	pop	{r7, pc}

080142b6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80142b6:	b480      	push	{r7}
 80142b8:	b087      	sub	sp, #28
 80142ba:	af00      	add	r7, sp, #0
 80142bc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80142be:	f04f 33ff 	mov.w	r3, #4294967295
 80142c2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	681b      	ldr	r3, [r3, #0]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d031      	beq.n	8014330 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	617b      	str	r3, [r7, #20]
 80142d2:	e002      	b.n	80142da <get_ldnumber+0x24>
 80142d4:	697b      	ldr	r3, [r7, #20]
 80142d6:	3301      	adds	r3, #1
 80142d8:	617b      	str	r3, [r7, #20]
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	781b      	ldrb	r3, [r3, #0]
 80142de:	2b20      	cmp	r3, #32
 80142e0:	d903      	bls.n	80142ea <get_ldnumber+0x34>
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	781b      	ldrb	r3, [r3, #0]
 80142e6:	2b3a      	cmp	r3, #58	; 0x3a
 80142e8:	d1f4      	bne.n	80142d4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	781b      	ldrb	r3, [r3, #0]
 80142ee:	2b3a      	cmp	r3, #58	; 0x3a
 80142f0:	d11c      	bne.n	801432c <get_ldnumber+0x76>
			tp = *path;
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80142f8:	68fb      	ldr	r3, [r7, #12]
 80142fa:	1c5a      	adds	r2, r3, #1
 80142fc:	60fa      	str	r2, [r7, #12]
 80142fe:	781b      	ldrb	r3, [r3, #0]
 8014300:	3b30      	subs	r3, #48	; 0x30
 8014302:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8014304:	68bb      	ldr	r3, [r7, #8]
 8014306:	2b09      	cmp	r3, #9
 8014308:	d80e      	bhi.n	8014328 <get_ldnumber+0x72>
 801430a:	68fa      	ldr	r2, [r7, #12]
 801430c:	697b      	ldr	r3, [r7, #20]
 801430e:	429a      	cmp	r2, r3
 8014310:	d10a      	bne.n	8014328 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8014312:	68bb      	ldr	r3, [r7, #8]
 8014314:	2b00      	cmp	r3, #0
 8014316:	d107      	bne.n	8014328 <get_ldnumber+0x72>
					vol = (int)i;
 8014318:	68bb      	ldr	r3, [r7, #8]
 801431a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801431c:	697b      	ldr	r3, [r7, #20]
 801431e:	3301      	adds	r3, #1
 8014320:	617b      	str	r3, [r7, #20]
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	697a      	ldr	r2, [r7, #20]
 8014326:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8014328:	693b      	ldr	r3, [r7, #16]
 801432a:	e002      	b.n	8014332 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801432c:	2300      	movs	r3, #0
 801432e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8014330:	693b      	ldr	r3, [r7, #16]
}
 8014332:	4618      	mov	r0, r3
 8014334:	371c      	adds	r7, #28
 8014336:	46bd      	mov	sp, r7
 8014338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433c:	4770      	bx	lr
	...

08014340 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b082      	sub	sp, #8
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
 8014348:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	2200      	movs	r2, #0
 801434e:	70da      	strb	r2, [r3, #3]
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	f04f 32ff 	mov.w	r2, #4294967295
 8014356:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8014358:	6839      	ldr	r1, [r7, #0]
 801435a:	6878      	ldr	r0, [r7, #4]
 801435c:	f7fe ff82 	bl	8013264 <move_window>
 8014360:	4603      	mov	r3, r0
 8014362:	2b00      	cmp	r3, #0
 8014364:	d001      	beq.n	801436a <check_fs+0x2a>
 8014366:	2304      	movs	r3, #4
 8014368:	e038      	b.n	80143dc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	3334      	adds	r3, #52	; 0x34
 801436e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014372:	4618      	mov	r0, r3
 8014374:	f7fe fc96 	bl	8012ca4 <ld_word>
 8014378:	4603      	mov	r3, r0
 801437a:	461a      	mov	r2, r3
 801437c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014380:	429a      	cmp	r2, r3
 8014382:	d001      	beq.n	8014388 <check_fs+0x48>
 8014384:	2303      	movs	r3, #3
 8014386:	e029      	b.n	80143dc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801438e:	2be9      	cmp	r3, #233	; 0xe9
 8014390:	d009      	beq.n	80143a6 <check_fs+0x66>
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014398:	2beb      	cmp	r3, #235	; 0xeb
 801439a:	d11e      	bne.n	80143da <check_fs+0x9a>
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80143a2:	2b90      	cmp	r3, #144	; 0x90
 80143a4:	d119      	bne.n	80143da <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	3334      	adds	r3, #52	; 0x34
 80143aa:	3336      	adds	r3, #54	; 0x36
 80143ac:	4618      	mov	r0, r3
 80143ae:	f7fe fc91 	bl	8012cd4 <ld_dword>
 80143b2:	4603      	mov	r3, r0
 80143b4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80143b8:	4a0a      	ldr	r2, [pc, #40]	; (80143e4 <check_fs+0xa4>)
 80143ba:	4293      	cmp	r3, r2
 80143bc:	d101      	bne.n	80143c2 <check_fs+0x82>
 80143be:	2300      	movs	r3, #0
 80143c0:	e00c      	b.n	80143dc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	3334      	adds	r3, #52	; 0x34
 80143c6:	3352      	adds	r3, #82	; 0x52
 80143c8:	4618      	mov	r0, r3
 80143ca:	f7fe fc83 	bl	8012cd4 <ld_dword>
 80143ce:	4602      	mov	r2, r0
 80143d0:	4b05      	ldr	r3, [pc, #20]	; (80143e8 <check_fs+0xa8>)
 80143d2:	429a      	cmp	r2, r3
 80143d4:	d101      	bne.n	80143da <check_fs+0x9a>
 80143d6:	2300      	movs	r3, #0
 80143d8:	e000      	b.n	80143dc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80143da:	2302      	movs	r3, #2
}
 80143dc:	4618      	mov	r0, r3
 80143de:	3708      	adds	r7, #8
 80143e0:	46bd      	mov	sp, r7
 80143e2:	bd80      	pop	{r7, pc}
 80143e4:	00544146 	.word	0x00544146
 80143e8:	33544146 	.word	0x33544146

080143ec <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b096      	sub	sp, #88	; 0x58
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	60f8      	str	r0, [r7, #12]
 80143f4:	60b9      	str	r1, [r7, #8]
 80143f6:	4613      	mov	r3, r2
 80143f8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80143fa:	68bb      	ldr	r3, [r7, #8]
 80143fc:	2200      	movs	r2, #0
 80143fe:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8014400:	68f8      	ldr	r0, [r7, #12]
 8014402:	f7ff ff58 	bl	80142b6 <get_ldnumber>
 8014406:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8014408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801440a:	2b00      	cmp	r3, #0
 801440c:	da01      	bge.n	8014412 <find_volume+0x26>
 801440e:	230b      	movs	r3, #11
 8014410:	e236      	b.n	8014880 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8014412:	4aac      	ldr	r2, [pc, #688]	; (80146c4 <find_volume+0x2d8>)
 8014414:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801441a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801441e:	2b00      	cmp	r3, #0
 8014420:	d101      	bne.n	8014426 <find_volume+0x3a>
 8014422:	230c      	movs	r3, #12
 8014424:	e22c      	b.n	8014880 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 8014426:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014428:	f7fe fd3b 	bl	8012ea2 <lock_fs>
 801442c:	4603      	mov	r3, r0
 801442e:	2b00      	cmp	r3, #0
 8014430:	d101      	bne.n	8014436 <find_volume+0x4a>
 8014432:	230f      	movs	r3, #15
 8014434:	e224      	b.n	8014880 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 8014436:	68bb      	ldr	r3, [r7, #8]
 8014438:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801443a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801443c:	79fb      	ldrb	r3, [r7, #7]
 801443e:	f023 0301 	bic.w	r3, r3, #1
 8014442:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8014444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d01a      	beq.n	8014482 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801444c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801444e:	785b      	ldrb	r3, [r3, #1]
 8014450:	4618      	mov	r0, r3
 8014452:	f7fe fb89 	bl	8012b68 <disk_status>
 8014456:	4603      	mov	r3, r0
 8014458:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801445c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014460:	f003 0301 	and.w	r3, r3, #1
 8014464:	2b00      	cmp	r3, #0
 8014466:	d10c      	bne.n	8014482 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8014468:	79fb      	ldrb	r3, [r7, #7]
 801446a:	2b00      	cmp	r3, #0
 801446c:	d007      	beq.n	801447e <find_volume+0x92>
 801446e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014472:	f003 0304 	and.w	r3, r3, #4
 8014476:	2b00      	cmp	r3, #0
 8014478:	d001      	beq.n	801447e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801447a:	230a      	movs	r3, #10
 801447c:	e200      	b.n	8014880 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 801447e:	2300      	movs	r3, #0
 8014480:	e1fe      	b.n	8014880 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8014482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014484:	2200      	movs	r2, #0
 8014486:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8014488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801448a:	b2da      	uxtb	r2, r3
 801448c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801448e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8014490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014492:	785b      	ldrb	r3, [r3, #1]
 8014494:	4618      	mov	r0, r3
 8014496:	f7fe fb81 	bl	8012b9c <disk_initialize>
 801449a:	4603      	mov	r3, r0
 801449c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80144a0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144a4:	f003 0301 	and.w	r3, r3, #1
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d001      	beq.n	80144b0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80144ac:	2303      	movs	r3, #3
 80144ae:	e1e7      	b.n	8014880 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80144b0:	79fb      	ldrb	r3, [r7, #7]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d007      	beq.n	80144c6 <find_volume+0xda>
 80144b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80144ba:	f003 0304 	and.w	r3, r3, #4
 80144be:	2b00      	cmp	r3, #0
 80144c0:	d001      	beq.n	80144c6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80144c2:	230a      	movs	r3, #10
 80144c4:	e1dc      	b.n	8014880 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80144c6:	2300      	movs	r3, #0
 80144c8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80144ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80144cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80144ce:	f7ff ff37 	bl	8014340 <check_fs>
 80144d2:	4603      	mov	r3, r0
 80144d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80144d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80144dc:	2b02      	cmp	r3, #2
 80144de:	d14b      	bne.n	8014578 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80144e0:	2300      	movs	r3, #0
 80144e2:	643b      	str	r3, [r7, #64]	; 0x40
 80144e4:	e01f      	b.n	8014526 <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80144e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80144e8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80144ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80144ee:	011b      	lsls	r3, r3, #4
 80144f0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80144f4:	4413      	add	r3, r2
 80144f6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80144f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80144fa:	3304      	adds	r3, #4
 80144fc:	781b      	ldrb	r3, [r3, #0]
 80144fe:	2b00      	cmp	r3, #0
 8014500:	d006      	beq.n	8014510 <find_volume+0x124>
 8014502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014504:	3308      	adds	r3, #8
 8014506:	4618      	mov	r0, r3
 8014508:	f7fe fbe4 	bl	8012cd4 <ld_dword>
 801450c:	4602      	mov	r2, r0
 801450e:	e000      	b.n	8014512 <find_volume+0x126>
 8014510:	2200      	movs	r2, #0
 8014512:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801451a:	440b      	add	r3, r1
 801451c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8014520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014522:	3301      	adds	r3, #1
 8014524:	643b      	str	r3, [r7, #64]	; 0x40
 8014526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014528:	2b03      	cmp	r3, #3
 801452a:	d9dc      	bls.n	80144e6 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801452c:	2300      	movs	r3, #0
 801452e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8014530:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014532:	2b00      	cmp	r3, #0
 8014534:	d002      	beq.n	801453c <find_volume+0x150>
 8014536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014538:	3b01      	subs	r3, #1
 801453a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801453c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801453e:	009b      	lsls	r3, r3, #2
 8014540:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8014544:	4413      	add	r3, r2
 8014546:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801454a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801454c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801454e:	2b00      	cmp	r3, #0
 8014550:	d005      	beq.n	801455e <find_volume+0x172>
 8014552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8014554:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8014556:	f7ff fef3 	bl	8014340 <check_fs>
 801455a:	4603      	mov	r3, r0
 801455c:	e000      	b.n	8014560 <find_volume+0x174>
 801455e:	2303      	movs	r3, #3
 8014560:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8014564:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014568:	2b01      	cmp	r3, #1
 801456a:	d905      	bls.n	8014578 <find_volume+0x18c>
 801456c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801456e:	3301      	adds	r3, #1
 8014570:	643b      	str	r3, [r7, #64]	; 0x40
 8014572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014574:	2b03      	cmp	r3, #3
 8014576:	d9e1      	bls.n	801453c <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8014578:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801457c:	2b04      	cmp	r3, #4
 801457e:	d101      	bne.n	8014584 <find_volume+0x198>
 8014580:	2301      	movs	r3, #1
 8014582:	e17d      	b.n	8014880 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8014584:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014588:	2b01      	cmp	r3, #1
 801458a:	d901      	bls.n	8014590 <find_volume+0x1a4>
 801458c:	230d      	movs	r3, #13
 801458e:	e177      	b.n	8014880 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8014590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014592:	3334      	adds	r3, #52	; 0x34
 8014594:	330b      	adds	r3, #11
 8014596:	4618      	mov	r0, r3
 8014598:	f7fe fb84 	bl	8012ca4 <ld_word>
 801459c:	4603      	mov	r3, r0
 801459e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80145a2:	d001      	beq.n	80145a8 <find_volume+0x1bc>
 80145a4:	230d      	movs	r3, #13
 80145a6:	e16b      	b.n	8014880 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80145a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145aa:	3334      	adds	r3, #52	; 0x34
 80145ac:	3316      	adds	r3, #22
 80145ae:	4618      	mov	r0, r3
 80145b0:	f7fe fb78 	bl	8012ca4 <ld_word>
 80145b4:	4603      	mov	r3, r0
 80145b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80145b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d106      	bne.n	80145cc <find_volume+0x1e0>
 80145be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145c0:	3334      	adds	r3, #52	; 0x34
 80145c2:	3324      	adds	r3, #36	; 0x24
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7fe fb85 	bl	8012cd4 <ld_dword>
 80145ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80145cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80145d0:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80145d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145d4:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80145d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80145dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145de:	789b      	ldrb	r3, [r3, #2]
 80145e0:	2b01      	cmp	r3, #1
 80145e2:	d005      	beq.n	80145f0 <find_volume+0x204>
 80145e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145e6:	789b      	ldrb	r3, [r3, #2]
 80145e8:	2b02      	cmp	r3, #2
 80145ea:	d001      	beq.n	80145f0 <find_volume+0x204>
 80145ec:	230d      	movs	r3, #13
 80145ee:	e147      	b.n	8014880 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80145f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80145f2:	789b      	ldrb	r3, [r3, #2]
 80145f4:	461a      	mov	r2, r3
 80145f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80145f8:	fb02 f303 	mul.w	r3, r2, r3
 80145fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80145fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8014604:	b29a      	uxth	r2, r3
 8014606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014608:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801460a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801460c:	895b      	ldrh	r3, [r3, #10]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d008      	beq.n	8014624 <find_volume+0x238>
 8014612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014614:	895b      	ldrh	r3, [r3, #10]
 8014616:	461a      	mov	r2, r3
 8014618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801461a:	895b      	ldrh	r3, [r3, #10]
 801461c:	3b01      	subs	r3, #1
 801461e:	4013      	ands	r3, r2
 8014620:	2b00      	cmp	r3, #0
 8014622:	d001      	beq.n	8014628 <find_volume+0x23c>
 8014624:	230d      	movs	r3, #13
 8014626:	e12b      	b.n	8014880 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8014628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801462a:	3334      	adds	r3, #52	; 0x34
 801462c:	3311      	adds	r3, #17
 801462e:	4618      	mov	r0, r3
 8014630:	f7fe fb38 	bl	8012ca4 <ld_word>
 8014634:	4603      	mov	r3, r0
 8014636:	461a      	mov	r2, r3
 8014638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801463c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801463e:	891b      	ldrh	r3, [r3, #8]
 8014640:	f003 030f 	and.w	r3, r3, #15
 8014644:	b29b      	uxth	r3, r3
 8014646:	2b00      	cmp	r3, #0
 8014648:	d001      	beq.n	801464e <find_volume+0x262>
 801464a:	230d      	movs	r3, #13
 801464c:	e118      	b.n	8014880 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801464e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014650:	3334      	adds	r3, #52	; 0x34
 8014652:	3313      	adds	r3, #19
 8014654:	4618      	mov	r0, r3
 8014656:	f7fe fb25 	bl	8012ca4 <ld_word>
 801465a:	4603      	mov	r3, r0
 801465c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801465e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014660:	2b00      	cmp	r3, #0
 8014662:	d106      	bne.n	8014672 <find_volume+0x286>
 8014664:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014666:	3334      	adds	r3, #52	; 0x34
 8014668:	3320      	adds	r3, #32
 801466a:	4618      	mov	r0, r3
 801466c:	f7fe fb32 	bl	8012cd4 <ld_dword>
 8014670:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8014672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014674:	3334      	adds	r3, #52	; 0x34
 8014676:	330e      	adds	r3, #14
 8014678:	4618      	mov	r0, r3
 801467a:	f7fe fb13 	bl	8012ca4 <ld_word>
 801467e:	4603      	mov	r3, r0
 8014680:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8014682:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014684:	2b00      	cmp	r3, #0
 8014686:	d101      	bne.n	801468c <find_volume+0x2a0>
 8014688:	230d      	movs	r3, #13
 801468a:	e0f9      	b.n	8014880 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801468c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801468e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014690:	4413      	add	r3, r2
 8014692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014694:	8912      	ldrh	r2, [r2, #8]
 8014696:	0912      	lsrs	r2, r2, #4
 8014698:	b292      	uxth	r2, r2
 801469a:	4413      	add	r3, r2
 801469c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801469e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a2:	429a      	cmp	r2, r3
 80146a4:	d201      	bcs.n	80146aa <find_volume+0x2be>
 80146a6:	230d      	movs	r3, #13
 80146a8:	e0ea      	b.n	8014880 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80146aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80146ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146ae:	1ad3      	subs	r3, r2, r3
 80146b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80146b2:	8952      	ldrh	r2, [r2, #10]
 80146b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80146b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80146ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d103      	bne.n	80146c8 <find_volume+0x2dc>
 80146c0:	230d      	movs	r3, #13
 80146c2:	e0dd      	b.n	8014880 <find_volume+0x494>
 80146c4:	20000340 	.word	0x20000340
		fmt = FS_FAT32;
 80146c8:	2303      	movs	r3, #3
 80146ca:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80146ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146d0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80146d4:	4293      	cmp	r3, r2
 80146d6:	d802      	bhi.n	80146de <find_volume+0x2f2>
 80146d8:	2302      	movs	r3, #2
 80146da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80146de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146e0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80146e4:	4293      	cmp	r3, r2
 80146e6:	d802      	bhi.n	80146ee <find_volume+0x302>
 80146e8:	2301      	movs	r3, #1
 80146ea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80146ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146f0:	1c9a      	adds	r2, r3, #2
 80146f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f4:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80146f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146f8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80146fa:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80146fc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80146fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014700:	441a      	add	r2, r3
 8014702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014704:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8014706:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801470a:	441a      	add	r2, r3
 801470c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801470e:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8014710:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014714:	2b03      	cmp	r3, #3
 8014716:	d11e      	bne.n	8014756 <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471a:	3334      	adds	r3, #52	; 0x34
 801471c:	332a      	adds	r3, #42	; 0x2a
 801471e:	4618      	mov	r0, r3
 8014720:	f7fe fac0 	bl	8012ca4 <ld_word>
 8014724:	4603      	mov	r3, r0
 8014726:	2b00      	cmp	r3, #0
 8014728:	d001      	beq.n	801472e <find_volume+0x342>
 801472a:	230d      	movs	r3, #13
 801472c:	e0a8      	b.n	8014880 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801472e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014730:	891b      	ldrh	r3, [r3, #8]
 8014732:	2b00      	cmp	r3, #0
 8014734:	d001      	beq.n	801473a <find_volume+0x34e>
 8014736:	230d      	movs	r3, #13
 8014738:	e0a2      	b.n	8014880 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801473a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801473c:	3334      	adds	r3, #52	; 0x34
 801473e:	332c      	adds	r3, #44	; 0x2c
 8014740:	4618      	mov	r0, r3
 8014742:	f7fe fac7 	bl	8012cd4 <ld_dword>
 8014746:	4602      	mov	r2, r0
 8014748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801474a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801474e:	699b      	ldr	r3, [r3, #24]
 8014750:	009b      	lsls	r3, r3, #2
 8014752:	647b      	str	r3, [r7, #68]	; 0x44
 8014754:	e01f      	b.n	8014796 <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8014756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014758:	891b      	ldrh	r3, [r3, #8]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d101      	bne.n	8014762 <find_volume+0x376>
 801475e:	230d      	movs	r3, #13
 8014760:	e08e      	b.n	8014880 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8014762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014764:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014768:	441a      	add	r2, r3
 801476a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801476c:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801476e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014772:	2b02      	cmp	r3, #2
 8014774:	d103      	bne.n	801477e <find_volume+0x392>
 8014776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014778:	699b      	ldr	r3, [r3, #24]
 801477a:	005b      	lsls	r3, r3, #1
 801477c:	e00a      	b.n	8014794 <find_volume+0x3a8>
 801477e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014780:	699a      	ldr	r2, [r3, #24]
 8014782:	4613      	mov	r3, r2
 8014784:	005b      	lsls	r3, r3, #1
 8014786:	4413      	add	r3, r2
 8014788:	085a      	lsrs	r2, r3, #1
 801478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801478c:	699b      	ldr	r3, [r3, #24]
 801478e:	f003 0301 	and.w	r3, r3, #1
 8014792:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014794:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014798:	69da      	ldr	r2, [r3, #28]
 801479a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801479c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80147a0:	0a5b      	lsrs	r3, r3, #9
 80147a2:	429a      	cmp	r2, r3
 80147a4:	d201      	bcs.n	80147aa <find_volume+0x3be>
 80147a6:	230d      	movs	r3, #13
 80147a8:	e06a      	b.n	8014880 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80147aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ac:	f04f 32ff 	mov.w	r2, #4294967295
 80147b0:	615a      	str	r2, [r3, #20]
 80147b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b4:	695a      	ldr	r2, [r3, #20]
 80147b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147b8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80147ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147bc:	2280      	movs	r2, #128	; 0x80
 80147be:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80147c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80147c4:	2b03      	cmp	r3, #3
 80147c6:	d149      	bne.n	801485c <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80147c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ca:	3334      	adds	r3, #52	; 0x34
 80147cc:	3330      	adds	r3, #48	; 0x30
 80147ce:	4618      	mov	r0, r3
 80147d0:	f7fe fa68 	bl	8012ca4 <ld_word>
 80147d4:	4603      	mov	r3, r0
 80147d6:	2b01      	cmp	r3, #1
 80147d8:	d140      	bne.n	801485c <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 80147da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80147dc:	3301      	adds	r3, #1
 80147de:	4619      	mov	r1, r3
 80147e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80147e2:	f7fe fd3f 	bl	8013264 <move_window>
 80147e6:	4603      	mov	r3, r0
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d137      	bne.n	801485c <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 80147ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147ee:	2200      	movs	r2, #0
 80147f0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80147f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80147f4:	3334      	adds	r3, #52	; 0x34
 80147f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80147fa:	4618      	mov	r0, r3
 80147fc:	f7fe fa52 	bl	8012ca4 <ld_word>
 8014800:	4603      	mov	r3, r0
 8014802:	461a      	mov	r2, r3
 8014804:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014808:	429a      	cmp	r2, r3
 801480a:	d127      	bne.n	801485c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801480c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801480e:	3334      	adds	r3, #52	; 0x34
 8014810:	4618      	mov	r0, r3
 8014812:	f7fe fa5f 	bl	8012cd4 <ld_dword>
 8014816:	4602      	mov	r2, r0
 8014818:	4b1b      	ldr	r3, [pc, #108]	; (8014888 <find_volume+0x49c>)
 801481a:	429a      	cmp	r2, r3
 801481c:	d11e      	bne.n	801485c <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014820:	3334      	adds	r3, #52	; 0x34
 8014822:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8014826:	4618      	mov	r0, r3
 8014828:	f7fe fa54 	bl	8012cd4 <ld_dword>
 801482c:	4602      	mov	r2, r0
 801482e:	4b17      	ldr	r3, [pc, #92]	; (801488c <find_volume+0x4a0>)
 8014830:	429a      	cmp	r2, r3
 8014832:	d113      	bne.n	801485c <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8014834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014836:	3334      	adds	r3, #52	; 0x34
 8014838:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801483c:	4618      	mov	r0, r3
 801483e:	f7fe fa49 	bl	8012cd4 <ld_dword>
 8014842:	4602      	mov	r2, r0
 8014844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014846:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8014848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801484a:	3334      	adds	r3, #52	; 0x34
 801484c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8014850:	4618      	mov	r0, r3
 8014852:	f7fe fa3f 	bl	8012cd4 <ld_dword>
 8014856:	4602      	mov	r2, r0
 8014858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485a:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801485e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8014862:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8014864:	4b0a      	ldr	r3, [pc, #40]	; (8014890 <find_volume+0x4a4>)
 8014866:	881b      	ldrh	r3, [r3, #0]
 8014868:	3301      	adds	r3, #1
 801486a:	b29a      	uxth	r2, r3
 801486c:	4b08      	ldr	r3, [pc, #32]	; (8014890 <find_volume+0x4a4>)
 801486e:	801a      	strh	r2, [r3, #0]
 8014870:	4b07      	ldr	r3, [pc, #28]	; (8014890 <find_volume+0x4a4>)
 8014872:	881a      	ldrh	r2, [r3, #0]
 8014874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014876:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8014878:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801487a:	f7fe fc8b 	bl	8013194 <clear_lock>
#endif
	return FR_OK;
 801487e:	2300      	movs	r3, #0
}
 8014880:	4618      	mov	r0, r3
 8014882:	3758      	adds	r7, #88	; 0x58
 8014884:	46bd      	mov	sp, r7
 8014886:	bd80      	pop	{r7, pc}
 8014888:	41615252 	.word	0x41615252
 801488c:	61417272 	.word	0x61417272
 8014890:	20000344 	.word	0x20000344

08014894 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8014894:	b580      	push	{r7, lr}
 8014896:	b084      	sub	sp, #16
 8014898:	af00      	add	r7, sp, #0
 801489a:	6078      	str	r0, [r7, #4]
 801489c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801489e:	2309      	movs	r3, #9
 80148a0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2b00      	cmp	r3, #0
 80148a6:	d02e      	beq.n	8014906 <validate+0x72>
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d02a      	beq.n	8014906 <validate+0x72>
 80148b0:	687b      	ldr	r3, [r7, #4]
 80148b2:	681b      	ldr	r3, [r3, #0]
 80148b4:	781b      	ldrb	r3, [r3, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d025      	beq.n	8014906 <validate+0x72>
 80148ba:	687b      	ldr	r3, [r7, #4]
 80148bc:	889a      	ldrh	r2, [r3, #4]
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	88db      	ldrh	r3, [r3, #6]
 80148c4:	429a      	cmp	r2, r3
 80148c6:	d11e      	bne.n	8014906 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	681b      	ldr	r3, [r3, #0]
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7fe fae8 	bl	8012ea2 <lock_fs>
 80148d2:	4603      	mov	r3, r0
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d014      	beq.n	8014902 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80148d8:	687b      	ldr	r3, [r7, #4]
 80148da:	681b      	ldr	r3, [r3, #0]
 80148dc:	785b      	ldrb	r3, [r3, #1]
 80148de:	4618      	mov	r0, r3
 80148e0:	f7fe f942 	bl	8012b68 <disk_status>
 80148e4:	4603      	mov	r3, r0
 80148e6:	f003 0301 	and.w	r3, r3, #1
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d102      	bne.n	80148f4 <validate+0x60>
				res = FR_OK;
 80148ee:	2300      	movs	r3, #0
 80148f0:	73fb      	strb	r3, [r7, #15]
 80148f2:	e008      	b.n	8014906 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2100      	movs	r1, #0
 80148fa:	4618      	mov	r0, r3
 80148fc:	f7fe fae7 	bl	8012ece <unlock_fs>
 8014900:	e001      	b.n	8014906 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8014902:	230f      	movs	r3, #15
 8014904:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014906:	7bfb      	ldrb	r3, [r7, #15]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d102      	bne.n	8014912 <validate+0x7e>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	e000      	b.n	8014914 <validate+0x80>
 8014912:	2300      	movs	r3, #0
 8014914:	683a      	ldr	r2, [r7, #0]
 8014916:	6013      	str	r3, [r2, #0]
	return res;
 8014918:	7bfb      	ldrb	r3, [r7, #15]
}
 801491a:	4618      	mov	r0, r3
 801491c:	3710      	adds	r7, #16
 801491e:	46bd      	mov	sp, r7
 8014920:	bd80      	pop	{r7, pc}
	...

08014924 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014924:	b580      	push	{r7, lr}
 8014926:	b088      	sub	sp, #32
 8014928:	af00      	add	r7, sp, #0
 801492a:	60f8      	str	r0, [r7, #12]
 801492c:	60b9      	str	r1, [r7, #8]
 801492e:	4613      	mov	r3, r2
 8014930:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014932:	68bb      	ldr	r3, [r7, #8]
 8014934:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8014936:	f107 0310 	add.w	r3, r7, #16
 801493a:	4618      	mov	r0, r3
 801493c:	f7ff fcbb 	bl	80142b6 <get_ldnumber>
 8014940:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	2b00      	cmp	r3, #0
 8014946:	da01      	bge.n	801494c <f_mount+0x28>
 8014948:	230b      	movs	r3, #11
 801494a:	e048      	b.n	80149de <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801494c:	4a26      	ldr	r2, [pc, #152]	; (80149e8 <f_mount+0xc4>)
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014954:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8014956:	69bb      	ldr	r3, [r7, #24]
 8014958:	2b00      	cmp	r3, #0
 801495a:	d00f      	beq.n	801497c <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801495c:	69b8      	ldr	r0, [r7, #24]
 801495e:	f7fe fc19 	bl	8013194 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8014962:	69bb      	ldr	r3, [r7, #24]
 8014964:	68db      	ldr	r3, [r3, #12]
 8014966:	4618      	mov	r0, r3
 8014968:	f001 f828 	bl	80159bc <ff_del_syncobj>
 801496c:	4603      	mov	r3, r0
 801496e:	2b00      	cmp	r3, #0
 8014970:	d101      	bne.n	8014976 <f_mount+0x52>
 8014972:	2302      	movs	r3, #2
 8014974:	e033      	b.n	80149de <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8014976:	69bb      	ldr	r3, [r7, #24]
 8014978:	2200      	movs	r2, #0
 801497a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d00f      	beq.n	80149a2 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	2200      	movs	r2, #0
 8014986:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8014988:	69fb      	ldr	r3, [r7, #28]
 801498a:	b2da      	uxtb	r2, r3
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	330c      	adds	r3, #12
 8014990:	4619      	mov	r1, r3
 8014992:	4610      	mov	r0, r2
 8014994:	f000 fff7 	bl	8015986 <ff_cre_syncobj>
 8014998:	4603      	mov	r3, r0
 801499a:	2b00      	cmp	r3, #0
 801499c:	d101      	bne.n	80149a2 <f_mount+0x7e>
 801499e:	2302      	movs	r3, #2
 80149a0:	e01d      	b.n	80149de <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80149a2:	68fa      	ldr	r2, [r7, #12]
 80149a4:	4910      	ldr	r1, [pc, #64]	; (80149e8 <f_mount+0xc4>)
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d002      	beq.n	80149b8 <f_mount+0x94>
 80149b2:	79fb      	ldrb	r3, [r7, #7]
 80149b4:	2b01      	cmp	r3, #1
 80149b6:	d001      	beq.n	80149bc <f_mount+0x98>
 80149b8:	2300      	movs	r3, #0
 80149ba:	e010      	b.n	80149de <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80149bc:	f107 010c 	add.w	r1, r7, #12
 80149c0:	f107 0308 	add.w	r3, r7, #8
 80149c4:	2200      	movs	r2, #0
 80149c6:	4618      	mov	r0, r3
 80149c8:	f7ff fd10 	bl	80143ec <find_volume>
 80149cc:	4603      	mov	r3, r0
 80149ce:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	7dfa      	ldrb	r2, [r7, #23]
 80149d4:	4611      	mov	r1, r2
 80149d6:	4618      	mov	r0, r3
 80149d8:	f7fe fa79 	bl	8012ece <unlock_fs>
 80149dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3720      	adds	r7, #32
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	20000340 	.word	0x20000340

080149ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b09a      	sub	sp, #104	; 0x68
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	4613      	mov	r3, r2
 80149f8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d101      	bne.n	8014a04 <f_open+0x18>
 8014a00:	2309      	movs	r3, #9
 8014a02:	e1b4      	b.n	8014d6e <f_open+0x382>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8014a04:	79fb      	ldrb	r3, [r7, #7]
 8014a06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014a0a:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014a0c:	79fa      	ldrb	r2, [r7, #7]
 8014a0e:	f107 0114 	add.w	r1, r7, #20
 8014a12:	f107 0308 	add.w	r3, r7, #8
 8014a16:	4618      	mov	r0, r3
 8014a18:	f7ff fce8 	bl	80143ec <find_volume>
 8014a1c:	4603      	mov	r3, r0
 8014a1e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8014a22:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	f040 8191 	bne.w	8014d4e <f_open+0x362>
		dj.obj.fs = fs;
 8014a2c:	697b      	ldr	r3, [r7, #20]
 8014a2e:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014a30:	68ba      	ldr	r2, [r7, #8]
 8014a32:	f107 0318 	add.w	r3, r7, #24
 8014a36:	4611      	mov	r1, r2
 8014a38:	4618      	mov	r0, r3
 8014a3a:	f7ff fbcb 	bl	80141d4 <follow_path>
 8014a3e:	4603      	mov	r3, r0
 8014a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8014a44:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d11a      	bne.n	8014a82 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014a4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014a50:	b25b      	sxtb	r3, r3
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	da03      	bge.n	8014a5e <f_open+0x72>
				res = FR_INVALID_NAME;
 8014a56:	2306      	movs	r3, #6
 8014a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014a5c:	e011      	b.n	8014a82 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014a5e:	79fb      	ldrb	r3, [r7, #7]
 8014a60:	f023 0301 	bic.w	r3, r3, #1
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	bf14      	ite	ne
 8014a68:	2301      	movne	r3, #1
 8014a6a:	2300      	moveq	r3, #0
 8014a6c:	b2db      	uxtb	r3, r3
 8014a6e:	461a      	mov	r2, r3
 8014a70:	f107 0318 	add.w	r3, r7, #24
 8014a74:	4611      	mov	r1, r2
 8014a76:	4618      	mov	r0, r3
 8014a78:	f7fe fa44 	bl	8012f04 <chk_lock>
 8014a7c:	4603      	mov	r3, r0
 8014a7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8014a82:	79fb      	ldrb	r3, [r7, #7]
 8014a84:	f003 031c 	and.w	r3, r3, #28
 8014a88:	2b00      	cmp	r3, #0
 8014a8a:	d07f      	beq.n	8014b8c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8014a8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d017      	beq.n	8014ac4 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8014a94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014a98:	2b04      	cmp	r3, #4
 8014a9a:	d10e      	bne.n	8014aba <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8014a9c:	f7fe fa8e 	bl	8012fbc <enq_lock>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	d006      	beq.n	8014ab4 <f_open+0xc8>
 8014aa6:	f107 0318 	add.w	r3, r7, #24
 8014aaa:	4618      	mov	r0, r3
 8014aac:	f7ff f9ca 	bl	8013e44 <dir_register>
 8014ab0:	4603      	mov	r3, r0
 8014ab2:	e000      	b.n	8014ab6 <f_open+0xca>
 8014ab4:	2312      	movs	r3, #18
 8014ab6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8014aba:	79fb      	ldrb	r3, [r7, #7]
 8014abc:	f043 0308 	orr.w	r3, r3, #8
 8014ac0:	71fb      	strb	r3, [r7, #7]
 8014ac2:	e010      	b.n	8014ae6 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8014ac4:	7fbb      	ldrb	r3, [r7, #30]
 8014ac6:	f003 0311 	and.w	r3, r3, #17
 8014aca:	2b00      	cmp	r3, #0
 8014acc:	d003      	beq.n	8014ad6 <f_open+0xea>
					res = FR_DENIED;
 8014ace:	2307      	movs	r3, #7
 8014ad0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014ad4:	e007      	b.n	8014ae6 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8014ad6:	79fb      	ldrb	r3, [r7, #7]
 8014ad8:	f003 0304 	and.w	r3, r3, #4
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d002      	beq.n	8014ae6 <f_open+0xfa>
 8014ae0:	2308      	movs	r3, #8
 8014ae2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8014ae6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d168      	bne.n	8014bc0 <f_open+0x1d4>
 8014aee:	79fb      	ldrb	r3, [r7, #7]
 8014af0:	f003 0308 	and.w	r3, r3, #8
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	d063      	beq.n	8014bc0 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014af8:	f7fc f998 	bl	8010e2c <get_fattime>
 8014afc:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b00:	330e      	adds	r3, #14
 8014b02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014b04:	4618      	mov	r0, r3
 8014b06:	f7fe f923 	bl	8012d50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0c:	3316      	adds	r3, #22
 8014b0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014b10:	4618      	mov	r0, r3
 8014b12:	f7fe f91d 	bl	8012d50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8014b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b18:	330b      	adds	r3, #11
 8014b1a:	2220      	movs	r2, #32
 8014b1c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b22:	4611      	mov	r1, r2
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7ff f89c 	bl	8013c62 <ld_clust>
 8014b2a:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014b30:	2200      	movs	r2, #0
 8014b32:	4618      	mov	r0, r3
 8014b34:	f7ff f8b4 	bl	8013ca0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b3a:	331c      	adds	r3, #28
 8014b3c:	2100      	movs	r1, #0
 8014b3e:	4618      	mov	r0, r3
 8014b40:	f7fe f906 	bl	8012d50 <st_dword>
					fs->wflag = 1;
 8014b44:	697b      	ldr	r3, [r7, #20]
 8014b46:	2201      	movs	r2, #1
 8014b48:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d037      	beq.n	8014bc0 <f_open+0x1d4>
						dw = fs->winsect;
 8014b50:	697b      	ldr	r3, [r7, #20]
 8014b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014b54:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8014b56:	f107 0318 	add.w	r3, r7, #24
 8014b5a:	2200      	movs	r2, #0
 8014b5c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014b5e:	4618      	mov	r0, r3
 8014b60:	f7fe fdc7 	bl	80136f2 <remove_chain>
 8014b64:	4603      	mov	r3, r0
 8014b66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014b6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d126      	bne.n	8014bc0 <f_open+0x1d4>
							res = move_window(fs, dw);
 8014b72:	697b      	ldr	r3, [r7, #20]
 8014b74:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014b76:	4618      	mov	r0, r3
 8014b78:	f7fe fb74 	bl	8013264 <move_window>
 8014b7c:	4603      	mov	r3, r0
 8014b7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8014b82:	697b      	ldr	r3, [r7, #20]
 8014b84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014b86:	3a01      	subs	r2, #1
 8014b88:	611a      	str	r2, [r3, #16]
 8014b8a:	e019      	b.n	8014bc0 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8014b8c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014b90:	2b00      	cmp	r3, #0
 8014b92:	d115      	bne.n	8014bc0 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8014b94:	7fbb      	ldrb	r3, [r7, #30]
 8014b96:	f003 0310 	and.w	r3, r3, #16
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d003      	beq.n	8014ba6 <f_open+0x1ba>
					res = FR_NO_FILE;
 8014b9e:	2304      	movs	r3, #4
 8014ba0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014ba4:	e00c      	b.n	8014bc0 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8014ba6:	79fb      	ldrb	r3, [r7, #7]
 8014ba8:	f003 0302 	and.w	r3, r3, #2
 8014bac:	2b00      	cmp	r3, #0
 8014bae:	d007      	beq.n	8014bc0 <f_open+0x1d4>
 8014bb0:	7fbb      	ldrb	r3, [r7, #30]
 8014bb2:	f003 0301 	and.w	r3, r3, #1
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d002      	beq.n	8014bc0 <f_open+0x1d4>
						res = FR_DENIED;
 8014bba:	2307      	movs	r3, #7
 8014bbc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8014bc0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d128      	bne.n	8014c1a <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8014bc8:	79fb      	ldrb	r3, [r7, #7]
 8014bca:	f003 0308 	and.w	r3, r3, #8
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d003      	beq.n	8014bda <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8014bd2:	79fb      	ldrb	r3, [r7, #7]
 8014bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bd8:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014bde:	68fb      	ldr	r3, [r7, #12]
 8014be0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8014be2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014be4:	68fb      	ldr	r3, [r7, #12]
 8014be6:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014be8:	79fb      	ldrb	r3, [r7, #7]
 8014bea:	f023 0301 	bic.w	r3, r3, #1
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	bf14      	ite	ne
 8014bf2:	2301      	movne	r3, #1
 8014bf4:	2300      	moveq	r3, #0
 8014bf6:	b2db      	uxtb	r3, r3
 8014bf8:	461a      	mov	r2, r3
 8014bfa:	f107 0318 	add.w	r3, r7, #24
 8014bfe:	4611      	mov	r1, r2
 8014c00:	4618      	mov	r0, r3
 8014c02:	f7fe f9fd 	bl	8013000 <inc_lock>
 8014c06:	4602      	mov	r2, r0
 8014c08:	68fb      	ldr	r3, [r7, #12]
 8014c0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014c0c:	68fb      	ldr	r3, [r7, #12]
 8014c0e:	691b      	ldr	r3, [r3, #16]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d102      	bne.n	8014c1a <f_open+0x22e>
 8014c14:	2302      	movs	r3, #2
 8014c16:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014c1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014c1e:	2b00      	cmp	r3, #0
 8014c20:	f040 8095 	bne.w	8014d4e <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014c28:	4611      	mov	r1, r2
 8014c2a:	4618      	mov	r0, r3
 8014c2c:	f7ff f819 	bl	8013c62 <ld_clust>
 8014c30:	4602      	mov	r2, r0
 8014c32:	68fb      	ldr	r3, [r7, #12]
 8014c34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8014c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c38:	331c      	adds	r3, #28
 8014c3a:	4618      	mov	r0, r3
 8014c3c:	f7fe f84a 	bl	8012cd4 <ld_dword>
 8014c40:	4602      	mov	r2, r0
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	2200      	movs	r2, #0
 8014c4a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014c4c:	697a      	ldr	r2, [r7, #20]
 8014c4e:	68fb      	ldr	r3, [r7, #12]
 8014c50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	88da      	ldrh	r2, [r3, #6]
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	79fa      	ldrb	r2, [r7, #7]
 8014c5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014c60:	68fb      	ldr	r3, [r7, #12]
 8014c62:	2200      	movs	r2, #0
 8014c64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8014c66:	68fb      	ldr	r3, [r7, #12]
 8014c68:	2200      	movs	r2, #0
 8014c6a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014c6c:	68fb      	ldr	r3, [r7, #12]
 8014c6e:	2200      	movs	r2, #0
 8014c70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	3330      	adds	r3, #48	; 0x30
 8014c76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014c7a:	2100      	movs	r1, #0
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7fe f8b4 	bl	8012dea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8014c82:	79fb      	ldrb	r3, [r7, #7]
 8014c84:	f003 0320 	and.w	r3, r3, #32
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d060      	beq.n	8014d4e <f_open+0x362>
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	68db      	ldr	r3, [r3, #12]
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d05c      	beq.n	8014d4e <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	68da      	ldr	r2, [r3, #12]
 8014c98:	68fb      	ldr	r3, [r7, #12]
 8014c9a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8014c9c:	697b      	ldr	r3, [r7, #20]
 8014c9e:	895b      	ldrh	r3, [r3, #10]
 8014ca0:	025b      	lsls	r3, r3, #9
 8014ca2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	689b      	ldr	r3, [r3, #8]
 8014ca8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	68db      	ldr	r3, [r3, #12]
 8014cae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014cb0:	e016      	b.n	8014ce0 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014cb6:	4618      	mov	r0, r3
 8014cb8:	f7fe fb8f 	bl	80133da <get_fat>
 8014cbc:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8014cbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014cc0:	2b01      	cmp	r3, #1
 8014cc2:	d802      	bhi.n	8014cca <f_open+0x2de>
 8014cc4:	2302      	movs	r3, #2
 8014cc6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8014cca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8014ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014cd0:	d102      	bne.n	8014cd8 <f_open+0x2ec>
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014cd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cdc:	1ad3      	subs	r3, r2, r3
 8014cde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014ce0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d103      	bne.n	8014cf0 <f_open+0x304>
 8014ce8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8014cea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d8e0      	bhi.n	8014cb2 <f_open+0x2c6>
				}
				fp->clust = clst;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014cf4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014cf6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d127      	bne.n	8014d4e <f_open+0x362>
 8014cfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d022      	beq.n	8014d4e <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014d08:	697b      	ldr	r3, [r7, #20]
 8014d0a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014d0c:	4618      	mov	r0, r3
 8014d0e:	f7fe fb45 	bl	801339c <clust2sect>
 8014d12:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d103      	bne.n	8014d22 <f_open+0x336>
						res = FR_INT_ERR;
 8014d1a:	2302      	movs	r3, #2
 8014d1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014d20:	e015      	b.n	8014d4e <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8014d22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014d24:	0a5a      	lsrs	r2, r3, #9
 8014d26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014d28:	441a      	add	r2, r3
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014d2e:	697b      	ldr	r3, [r7, #20]
 8014d30:	7858      	ldrb	r0, [r3, #1]
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	6a1a      	ldr	r2, [r3, #32]
 8014d3c:	2301      	movs	r3, #1
 8014d3e:	f7fd ff53 	bl	8012be8 <disk_read>
 8014d42:	4603      	mov	r3, r0
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d002      	beq.n	8014d4e <f_open+0x362>
 8014d48:	2301      	movs	r3, #1
 8014d4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014d4e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	d002      	beq.n	8014d5c <f_open+0x370>
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8014d62:	4611      	mov	r1, r2
 8014d64:	4618      	mov	r0, r3
 8014d66:	f7fe f8b2 	bl	8012ece <unlock_fs>
 8014d6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3768      	adds	r7, #104	; 0x68
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}

08014d76 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014d76:	b580      	push	{r7, lr}
 8014d78:	b08c      	sub	sp, #48	; 0x30
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	60f8      	str	r0, [r7, #12]
 8014d7e:	60b9      	str	r1, [r7, #8]
 8014d80:	607a      	str	r2, [r7, #4]
 8014d82:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8014d84:	68bb      	ldr	r3, [r7, #8]
 8014d86:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	2200      	movs	r2, #0
 8014d8c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	f107 0210 	add.w	r2, r7, #16
 8014d94:	4611      	mov	r1, r2
 8014d96:	4618      	mov	r0, r3
 8014d98:	f7ff fd7c 	bl	8014894 <validate>
 8014d9c:	4603      	mov	r3, r0
 8014d9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014da2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d107      	bne.n	8014dba <f_write+0x44>
 8014daa:	68fb      	ldr	r3, [r7, #12]
 8014dac:	7d5b      	ldrb	r3, [r3, #21]
 8014dae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014db2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014db6:	2b00      	cmp	r3, #0
 8014db8:	d009      	beq.n	8014dce <f_write+0x58>
 8014dba:	693b      	ldr	r3, [r7, #16]
 8014dbc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8014dc0:	4611      	mov	r1, r2
 8014dc2:	4618      	mov	r0, r3
 8014dc4:	f7fe f883 	bl	8012ece <unlock_fs>
 8014dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8014dcc:	e173      	b.n	80150b6 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8014dce:	68fb      	ldr	r3, [r7, #12]
 8014dd0:	7d1b      	ldrb	r3, [r3, #20]
 8014dd2:	f003 0302 	and.w	r3, r3, #2
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d106      	bne.n	8014de8 <f_write+0x72>
 8014dda:	693b      	ldr	r3, [r7, #16]
 8014ddc:	2107      	movs	r1, #7
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fe f875 	bl	8012ece <unlock_fs>
 8014de4:	2307      	movs	r3, #7
 8014de6:	e166      	b.n	80150b6 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	699a      	ldr	r2, [r3, #24]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	441a      	add	r2, r3
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	699b      	ldr	r3, [r3, #24]
 8014df4:	429a      	cmp	r2, r3
 8014df6:	f080 814b 	bcs.w	8015090 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	699b      	ldr	r3, [r3, #24]
 8014dfe:	43db      	mvns	r3, r3
 8014e00:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8014e02:	e145      	b.n	8015090 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	699b      	ldr	r3, [r3, #24]
 8014e08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	f040 8101 	bne.w	8015014 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	699b      	ldr	r3, [r3, #24]
 8014e16:	0a5b      	lsrs	r3, r3, #9
 8014e18:	693a      	ldr	r2, [r7, #16]
 8014e1a:	8952      	ldrh	r2, [r2, #10]
 8014e1c:	3a01      	subs	r2, #1
 8014e1e:	4013      	ands	r3, r2
 8014e20:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8014e22:	69bb      	ldr	r3, [r7, #24]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d14d      	bne.n	8014ec4 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8014e28:	68fb      	ldr	r3, [r7, #12]
 8014e2a:	699b      	ldr	r3, [r3, #24]
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	d10c      	bne.n	8014e4a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8014e30:	68fb      	ldr	r3, [r7, #12]
 8014e32:	689b      	ldr	r3, [r3, #8]
 8014e34:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8014e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d11a      	bne.n	8014e72 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	2100      	movs	r1, #0
 8014e40:	4618      	mov	r0, r3
 8014e42:	f7fe fcbb 	bl	80137bc <create_chain>
 8014e46:	62b8      	str	r0, [r7, #40]	; 0x28
 8014e48:	e013      	b.n	8014e72 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e4e:	2b00      	cmp	r3, #0
 8014e50:	d007      	beq.n	8014e62 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8014e52:	68fb      	ldr	r3, [r7, #12]
 8014e54:	699b      	ldr	r3, [r3, #24]
 8014e56:	4619      	mov	r1, r3
 8014e58:	68f8      	ldr	r0, [r7, #12]
 8014e5a:	f7fe fd47 	bl	80138ec <clmt_clust>
 8014e5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8014e60:	e007      	b.n	8014e72 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014e62:	68fa      	ldr	r2, [r7, #12]
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	69db      	ldr	r3, [r3, #28]
 8014e68:	4619      	mov	r1, r3
 8014e6a:	4610      	mov	r0, r2
 8014e6c:	f7fe fca6 	bl	80137bc <create_chain>
 8014e70:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e74:	2b00      	cmp	r3, #0
 8014e76:	f000 8110 	beq.w	801509a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8014e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e7c:	2b01      	cmp	r3, #1
 8014e7e:	d109      	bne.n	8014e94 <f_write+0x11e>
 8014e80:	68fb      	ldr	r3, [r7, #12]
 8014e82:	2202      	movs	r2, #2
 8014e84:	755a      	strb	r2, [r3, #21]
 8014e86:	693b      	ldr	r3, [r7, #16]
 8014e88:	2102      	movs	r1, #2
 8014e8a:	4618      	mov	r0, r3
 8014e8c:	f7fe f81f 	bl	8012ece <unlock_fs>
 8014e90:	2302      	movs	r3, #2
 8014e92:	e110      	b.n	80150b6 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8014e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e9a:	d109      	bne.n	8014eb0 <f_write+0x13a>
 8014e9c:	68fb      	ldr	r3, [r7, #12]
 8014e9e:	2201      	movs	r2, #1
 8014ea0:	755a      	strb	r2, [r3, #21]
 8014ea2:	693b      	ldr	r3, [r7, #16]
 8014ea4:	2101      	movs	r1, #1
 8014ea6:	4618      	mov	r0, r3
 8014ea8:	f7fe f811 	bl	8012ece <unlock_fs>
 8014eac:	2301      	movs	r3, #1
 8014eae:	e102      	b.n	80150b6 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014eb4:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8014eb6:	68fb      	ldr	r3, [r7, #12]
 8014eb8:	689b      	ldr	r3, [r3, #8]
 8014eba:	2b00      	cmp	r3, #0
 8014ebc:	d102      	bne.n	8014ec4 <f_write+0x14e>
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ec2:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	7d1b      	ldrb	r3, [r3, #20]
 8014ec8:	b25b      	sxtb	r3, r3
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	da1d      	bge.n	8014f0a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014ece:	693b      	ldr	r3, [r7, #16]
 8014ed0:	7858      	ldrb	r0, [r3, #1]
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	6a1a      	ldr	r2, [r3, #32]
 8014edc:	2301      	movs	r3, #1
 8014ede:	f7fd fea3 	bl	8012c28 <disk_write>
 8014ee2:	4603      	mov	r3, r0
 8014ee4:	2b00      	cmp	r3, #0
 8014ee6:	d009      	beq.n	8014efc <f_write+0x186>
 8014ee8:	68fb      	ldr	r3, [r7, #12]
 8014eea:	2201      	movs	r2, #1
 8014eec:	755a      	strb	r2, [r3, #21]
 8014eee:	693b      	ldr	r3, [r7, #16]
 8014ef0:	2101      	movs	r1, #1
 8014ef2:	4618      	mov	r0, r3
 8014ef4:	f7fd ffeb 	bl	8012ece <unlock_fs>
 8014ef8:	2301      	movs	r3, #1
 8014efa:	e0dc      	b.n	80150b6 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	7d1b      	ldrb	r3, [r3, #20]
 8014f00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014f04:	b2da      	uxtb	r2, r3
 8014f06:	68fb      	ldr	r3, [r7, #12]
 8014f08:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8014f0a:	693a      	ldr	r2, [r7, #16]
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	69db      	ldr	r3, [r3, #28]
 8014f10:	4619      	mov	r1, r3
 8014f12:	4610      	mov	r0, r2
 8014f14:	f7fe fa42 	bl	801339c <clust2sect>
 8014f18:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	2b00      	cmp	r3, #0
 8014f1e:	d109      	bne.n	8014f34 <f_write+0x1be>
 8014f20:	68fb      	ldr	r3, [r7, #12]
 8014f22:	2202      	movs	r2, #2
 8014f24:	755a      	strb	r2, [r3, #21]
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	2102      	movs	r1, #2
 8014f2a:	4618      	mov	r0, r3
 8014f2c:	f7fd ffcf 	bl	8012ece <unlock_fs>
 8014f30:	2302      	movs	r3, #2
 8014f32:	e0c0      	b.n	80150b6 <f_write+0x340>
			sect += csect;
 8014f34:	697a      	ldr	r2, [r7, #20]
 8014f36:	69bb      	ldr	r3, [r7, #24]
 8014f38:	4413      	add	r3, r2
 8014f3a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	0a5b      	lsrs	r3, r3, #9
 8014f40:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014f42:	6a3b      	ldr	r3, [r7, #32]
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d041      	beq.n	8014fcc <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014f48:	69ba      	ldr	r2, [r7, #24]
 8014f4a:	6a3b      	ldr	r3, [r7, #32]
 8014f4c:	4413      	add	r3, r2
 8014f4e:	693a      	ldr	r2, [r7, #16]
 8014f50:	8952      	ldrh	r2, [r2, #10]
 8014f52:	4293      	cmp	r3, r2
 8014f54:	d905      	bls.n	8014f62 <f_write+0x1ec>
					cc = fs->csize - csect;
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	895b      	ldrh	r3, [r3, #10]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	69bb      	ldr	r3, [r7, #24]
 8014f5e:	1ad3      	subs	r3, r2, r3
 8014f60:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014f62:	693b      	ldr	r3, [r7, #16]
 8014f64:	7858      	ldrb	r0, [r3, #1]
 8014f66:	6a3b      	ldr	r3, [r7, #32]
 8014f68:	697a      	ldr	r2, [r7, #20]
 8014f6a:	69f9      	ldr	r1, [r7, #28]
 8014f6c:	f7fd fe5c 	bl	8012c28 <disk_write>
 8014f70:	4603      	mov	r3, r0
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d009      	beq.n	8014f8a <f_write+0x214>
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	2201      	movs	r2, #1
 8014f7a:	755a      	strb	r2, [r3, #21]
 8014f7c:	693b      	ldr	r3, [r7, #16]
 8014f7e:	2101      	movs	r1, #1
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7fd ffa4 	bl	8012ece <unlock_fs>
 8014f86:	2301      	movs	r3, #1
 8014f88:	e095      	b.n	80150b6 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8014f8a:	68fb      	ldr	r3, [r7, #12]
 8014f8c:	6a1a      	ldr	r2, [r3, #32]
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	1ad3      	subs	r3, r2, r3
 8014f92:	6a3a      	ldr	r2, [r7, #32]
 8014f94:	429a      	cmp	r2, r3
 8014f96:	d915      	bls.n	8014fc4 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8014f98:	68fb      	ldr	r3, [r7, #12]
 8014f9a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8014f9e:	68fb      	ldr	r3, [r7, #12]
 8014fa0:	6a1a      	ldr	r2, [r3, #32]
 8014fa2:	697b      	ldr	r3, [r7, #20]
 8014fa4:	1ad3      	subs	r3, r2, r3
 8014fa6:	025b      	lsls	r3, r3, #9
 8014fa8:	69fa      	ldr	r2, [r7, #28]
 8014faa:	4413      	add	r3, r2
 8014fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8014fb0:	4619      	mov	r1, r3
 8014fb2:	f7fd fef9 	bl	8012da8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014fb6:	68fb      	ldr	r3, [r7, #12]
 8014fb8:	7d1b      	ldrb	r3, [r3, #20]
 8014fba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014fbe:	b2da      	uxtb	r2, r3
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014fc4:	6a3b      	ldr	r3, [r7, #32]
 8014fc6:	025b      	lsls	r3, r3, #9
 8014fc8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8014fca:	e044      	b.n	8015056 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	6a1b      	ldr	r3, [r3, #32]
 8014fd0:	697a      	ldr	r2, [r7, #20]
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d01b      	beq.n	801500e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 8014fd6:	68fb      	ldr	r3, [r7, #12]
 8014fd8:	699a      	ldr	r2, [r3, #24]
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014fde:	429a      	cmp	r2, r3
 8014fe0:	d215      	bcs.n	801500e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8014fe2:	693b      	ldr	r3, [r7, #16]
 8014fe4:	7858      	ldrb	r0, [r3, #1]
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014fec:	2301      	movs	r3, #1
 8014fee:	697a      	ldr	r2, [r7, #20]
 8014ff0:	f7fd fdfa 	bl	8012be8 <disk_read>
 8014ff4:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	d009      	beq.n	801500e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	2201      	movs	r2, #1
 8014ffe:	755a      	strb	r2, [r3, #21]
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	2101      	movs	r1, #1
 8015004:	4618      	mov	r0, r3
 8015006:	f7fd ff62 	bl	8012ece <unlock_fs>
 801500a:	2301      	movs	r3, #1
 801500c:	e053      	b.n	80150b6 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	697a      	ldr	r2, [r7, #20]
 8015012:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8015014:	68fb      	ldr	r3, [r7, #12]
 8015016:	699b      	ldr	r3, [r3, #24]
 8015018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801501c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8015020:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8015022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	429a      	cmp	r2, r3
 8015028:	d901      	bls.n	801502e <f_write+0x2b8>
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801502e:	68fb      	ldr	r3, [r7, #12]
 8015030:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	699b      	ldr	r3, [r3, #24]
 8015038:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801503c:	4413      	add	r3, r2
 801503e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015040:	69f9      	ldr	r1, [r7, #28]
 8015042:	4618      	mov	r0, r3
 8015044:	f7fd feb0 	bl	8012da8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8015048:	68fb      	ldr	r3, [r7, #12]
 801504a:	7d1b      	ldrb	r3, [r3, #20]
 801504c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015050:	b2da      	uxtb	r2, r3
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8015056:	69fa      	ldr	r2, [r7, #28]
 8015058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801505a:	4413      	add	r3, r2
 801505c:	61fb      	str	r3, [r7, #28]
 801505e:	68fb      	ldr	r3, [r7, #12]
 8015060:	699a      	ldr	r2, [r3, #24]
 8015062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015064:	441a      	add	r2, r3
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	619a      	str	r2, [r3, #24]
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	68da      	ldr	r2, [r3, #12]
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	699b      	ldr	r3, [r3, #24]
 8015072:	429a      	cmp	r2, r3
 8015074:	bf38      	it	cc
 8015076:	461a      	movcc	r2, r3
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	60da      	str	r2, [r3, #12]
 801507c:	683b      	ldr	r3, [r7, #0]
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015082:	441a      	add	r2, r3
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	601a      	str	r2, [r3, #0]
 8015088:	687a      	ldr	r2, [r7, #4]
 801508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508c:	1ad3      	subs	r3, r2, r3
 801508e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2b00      	cmp	r3, #0
 8015094:	f47f aeb6 	bne.w	8014e04 <f_write+0x8e>
 8015098:	e000      	b.n	801509c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801509a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	7d1b      	ldrb	r3, [r3, #20]
 80150a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80150a4:	b2da      	uxtb	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80150aa:	693b      	ldr	r3, [r7, #16]
 80150ac:	2100      	movs	r1, #0
 80150ae:	4618      	mov	r0, r3
 80150b0:	f7fd ff0d 	bl	8012ece <unlock_fs>
 80150b4:	2300      	movs	r3, #0
}
 80150b6:	4618      	mov	r0, r3
 80150b8:	3730      	adds	r7, #48	; 0x30
 80150ba:	46bd      	mov	sp, r7
 80150bc:	bd80      	pop	{r7, pc}

080150be <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80150be:	b580      	push	{r7, lr}
 80150c0:	b086      	sub	sp, #24
 80150c2:	af00      	add	r7, sp, #0
 80150c4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80150c6:	687b      	ldr	r3, [r7, #4]
 80150c8:	f107 0208 	add.w	r2, r7, #8
 80150cc:	4611      	mov	r1, r2
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7ff fbe0 	bl	8014894 <validate>
 80150d4:	4603      	mov	r3, r0
 80150d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80150d8:	7dfb      	ldrb	r3, [r7, #23]
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d16d      	bne.n	80151ba <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	7d1b      	ldrb	r3, [r3, #20]
 80150e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d067      	beq.n	80151ba <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	7d1b      	ldrb	r3, [r3, #20]
 80150ee:	b25b      	sxtb	r3, r3
 80150f0:	2b00      	cmp	r3, #0
 80150f2:	da1a      	bge.n	801512a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80150f4:	68bb      	ldr	r3, [r7, #8]
 80150f6:	7858      	ldrb	r0, [r3, #1]
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6a1a      	ldr	r2, [r3, #32]
 8015102:	2301      	movs	r3, #1
 8015104:	f7fd fd90 	bl	8012c28 <disk_write>
 8015108:	4603      	mov	r3, r0
 801510a:	2b00      	cmp	r3, #0
 801510c:	d006      	beq.n	801511c <f_sync+0x5e>
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	2101      	movs	r1, #1
 8015112:	4618      	mov	r0, r3
 8015114:	f7fd fedb 	bl	8012ece <unlock_fs>
 8015118:	2301      	movs	r3, #1
 801511a:	e055      	b.n	80151c8 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	7d1b      	ldrb	r3, [r3, #20]
 8015120:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015124:	b2da      	uxtb	r2, r3
 8015126:	687b      	ldr	r3, [r7, #4]
 8015128:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801512a:	f7fb fe7f 	bl	8010e2c <get_fattime>
 801512e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8015130:	68ba      	ldr	r2, [r7, #8]
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015136:	4619      	mov	r1, r3
 8015138:	4610      	mov	r0, r2
 801513a:	f7fe f893 	bl	8013264 <move_window>
 801513e:	4603      	mov	r3, r0
 8015140:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8015142:	7dfb      	ldrb	r3, [r7, #23]
 8015144:	2b00      	cmp	r3, #0
 8015146:	d138      	bne.n	80151ba <f_sync+0xfc>
					dir = fp->dir_ptr;
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801514c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801514e:	68fb      	ldr	r3, [r7, #12]
 8015150:	330b      	adds	r3, #11
 8015152:	781a      	ldrb	r2, [r3, #0]
 8015154:	68fb      	ldr	r3, [r7, #12]
 8015156:	330b      	adds	r3, #11
 8015158:	f042 0220 	orr.w	r2, r2, #32
 801515c:	b2d2      	uxtb	r2, r2
 801515e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6818      	ldr	r0, [r3, #0]
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	689b      	ldr	r3, [r3, #8]
 8015168:	461a      	mov	r2, r3
 801516a:	68f9      	ldr	r1, [r7, #12]
 801516c:	f7fe fd98 	bl	8013ca0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	f103 021c 	add.w	r2, r3, #28
 8015176:	687b      	ldr	r3, [r7, #4]
 8015178:	68db      	ldr	r3, [r3, #12]
 801517a:	4619      	mov	r1, r3
 801517c:	4610      	mov	r0, r2
 801517e:	f7fd fde7 	bl	8012d50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	3316      	adds	r3, #22
 8015186:	6939      	ldr	r1, [r7, #16]
 8015188:	4618      	mov	r0, r3
 801518a:	f7fd fde1 	bl	8012d50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	3312      	adds	r3, #18
 8015192:	2100      	movs	r1, #0
 8015194:	4618      	mov	r0, r3
 8015196:	f7fd fdc0 	bl	8012d1a <st_word>
					fs->wflag = 1;
 801519a:	68bb      	ldr	r3, [r7, #8]
 801519c:	2201      	movs	r2, #1
 801519e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80151a0:	68bb      	ldr	r3, [r7, #8]
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7fe f88c 	bl	80132c0 <sync_fs>
 80151a8:	4603      	mov	r3, r0
 80151aa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	7d1b      	ldrb	r3, [r3, #20]
 80151b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80151b4:	b2da      	uxtb	r2, r3
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80151ba:	68bb      	ldr	r3, [r7, #8]
 80151bc:	7dfa      	ldrb	r2, [r7, #23]
 80151be:	4611      	mov	r1, r2
 80151c0:	4618      	mov	r0, r3
 80151c2:	f7fd fe84 	bl	8012ece <unlock_fs>
 80151c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80151c8:	4618      	mov	r0, r3
 80151ca:	3718      	adds	r7, #24
 80151cc:	46bd      	mov	sp, r7
 80151ce:	bd80      	pop	{r7, pc}

080151d0 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80151d0:	b580      	push	{r7, lr}
 80151d2:	b090      	sub	sp, #64	; 0x40
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	6078      	str	r0, [r7, #4]
 80151d8:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f107 0208 	add.w	r2, r7, #8
 80151e0:	4611      	mov	r1, r2
 80151e2:	4618      	mov	r0, r3
 80151e4:	f7ff fb56 	bl	8014894 <validate>
 80151e8:	4603      	mov	r3, r0
 80151ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80151ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	d103      	bne.n	80151fe <f_lseek+0x2e>
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	7d5b      	ldrb	r3, [r3, #21]
 80151fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80151fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015202:	2b00      	cmp	r3, #0
 8015204:	d009      	beq.n	801521a <f_lseek+0x4a>
 8015206:	68bb      	ldr	r3, [r7, #8]
 8015208:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 801520c:	4611      	mov	r1, r2
 801520e:	4618      	mov	r0, r3
 8015210:	f7fd fe5d 	bl	8012ece <unlock_fs>
 8015214:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8015218:	e229      	b.n	801566e <f_lseek+0x49e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801521e:	2b00      	cmp	r3, #0
 8015220:	f000 80ea 	beq.w	80153f8 <f_lseek+0x228>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8015224:	683b      	ldr	r3, [r7, #0]
 8015226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801522a:	d164      	bne.n	80152f6 <f_lseek+0x126>
			tbl = fp->cltbl;
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015230:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8015232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015234:	1d1a      	adds	r2, r3, #4
 8015236:	627a      	str	r2, [r7, #36]	; 0x24
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	617b      	str	r3, [r7, #20]
 801523c:	2302      	movs	r3, #2
 801523e:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8015240:	687b      	ldr	r3, [r7, #4]
 8015242:	689b      	ldr	r3, [r3, #8]
 8015244:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8015246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015248:	2b00      	cmp	r3, #0
 801524a:	d044      	beq.n	80152d6 <f_lseek+0x106>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 801524c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801524e:	613b      	str	r3, [r7, #16]
 8015250:	2300      	movs	r3, #0
 8015252:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015256:	3302      	adds	r3, #2
 8015258:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 801525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801525c:	60fb      	str	r3, [r7, #12]
 801525e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015260:	3301      	adds	r3, #1
 8015262:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015268:	4618      	mov	r0, r3
 801526a:	f7fe f8b6 	bl	80133da <get_fat>
 801526e:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8015270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015272:	2b01      	cmp	r3, #1
 8015274:	d809      	bhi.n	801528a <f_lseek+0xba>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	2202      	movs	r2, #2
 801527a:	755a      	strb	r2, [r3, #21]
 801527c:	68bb      	ldr	r3, [r7, #8]
 801527e:	2102      	movs	r1, #2
 8015280:	4618      	mov	r0, r3
 8015282:	f7fd fe24 	bl	8012ece <unlock_fs>
 8015286:	2302      	movs	r3, #2
 8015288:	e1f1      	b.n	801566e <f_lseek+0x49e>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801528a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015290:	d109      	bne.n	80152a6 <f_lseek+0xd6>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	2201      	movs	r2, #1
 8015296:	755a      	strb	r2, [r3, #21]
 8015298:	68bb      	ldr	r3, [r7, #8]
 801529a:	2101      	movs	r1, #1
 801529c:	4618      	mov	r0, r3
 801529e:	f7fd fe16 	bl	8012ece <unlock_fs>
 80152a2:	2301      	movs	r3, #1
 80152a4:	e1e3      	b.n	801566e <f_lseek+0x49e>
					} while (cl == pcl + 1);
 80152a6:	68fb      	ldr	r3, [r7, #12]
 80152a8:	3301      	adds	r3, #1
 80152aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152ac:	429a      	cmp	r2, r3
 80152ae:	d0d4      	beq.n	801525a <f_lseek+0x8a>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 80152b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152b2:	697b      	ldr	r3, [r7, #20]
 80152b4:	429a      	cmp	r2, r3
 80152b6:	d809      	bhi.n	80152cc <f_lseek+0xfc>
						*tbl++ = ncl; *tbl++ = tcl;
 80152b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152ba:	1d1a      	adds	r2, r3, #4
 80152bc:	627a      	str	r2, [r7, #36]	; 0x24
 80152be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152c0:	601a      	str	r2, [r3, #0]
 80152c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152c4:	1d1a      	adds	r2, r3, #4
 80152c6:	627a      	str	r2, [r7, #36]	; 0x24
 80152c8:	693a      	ldr	r2, [r7, #16]
 80152ca:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	699b      	ldr	r3, [r3, #24]
 80152d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d3ba      	bcc.n	801524c <f_lseek+0x7c>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80152da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152dc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 80152de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80152e0:	697b      	ldr	r3, [r7, #20]
 80152e2:	429a      	cmp	r2, r3
 80152e4:	d803      	bhi.n	80152ee <f_lseek+0x11e>
				*tbl = 0;		/* Terminate table */
 80152e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152e8:	2200      	movs	r2, #0
 80152ea:	601a      	str	r2, [r3, #0]
 80152ec:	e1b6      	b.n	801565c <f_lseek+0x48c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80152ee:	2311      	movs	r3, #17
 80152f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80152f4:	e1b2      	b.n	801565c <f_lseek+0x48c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	68db      	ldr	r3, [r3, #12]
 80152fa:	683a      	ldr	r2, [r7, #0]
 80152fc:	429a      	cmp	r2, r3
 80152fe:	d902      	bls.n	8015306 <f_lseek+0x136>
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	683a      	ldr	r2, [r7, #0]
 801530a:	619a      	str	r2, [r3, #24]
			if (ofs) {
 801530c:	683b      	ldr	r3, [r7, #0]
 801530e:	2b00      	cmp	r3, #0
 8015310:	f000 81a4 	beq.w	801565c <f_lseek+0x48c>
				fp->clust = clmt_clust(fp, ofs - 1);
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	3b01      	subs	r3, #1
 8015318:	4619      	mov	r1, r3
 801531a:	6878      	ldr	r0, [r7, #4]
 801531c:	f7fe fae6 	bl	80138ec <clmt_clust>
 8015320:	4602      	mov	r2, r0
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8015326:	68ba      	ldr	r2, [r7, #8]
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	69db      	ldr	r3, [r3, #28]
 801532c:	4619      	mov	r1, r3
 801532e:	4610      	mov	r0, r2
 8015330:	f7fe f834 	bl	801339c <clust2sect>
 8015334:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8015336:	69bb      	ldr	r3, [r7, #24]
 8015338:	2b00      	cmp	r3, #0
 801533a:	d109      	bne.n	8015350 <f_lseek+0x180>
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	2202      	movs	r2, #2
 8015340:	755a      	strb	r2, [r3, #21]
 8015342:	68bb      	ldr	r3, [r7, #8]
 8015344:	2102      	movs	r1, #2
 8015346:	4618      	mov	r0, r3
 8015348:	f7fd fdc1 	bl	8012ece <unlock_fs>
 801534c:	2302      	movs	r3, #2
 801534e:	e18e      	b.n	801566e <f_lseek+0x49e>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	3b01      	subs	r3, #1
 8015354:	0a5b      	lsrs	r3, r3, #9
 8015356:	68ba      	ldr	r2, [r7, #8]
 8015358:	8952      	ldrh	r2, [r2, #10]
 801535a:	3a01      	subs	r2, #1
 801535c:	4013      	ands	r3, r2
 801535e:	69ba      	ldr	r2, [r7, #24]
 8015360:	4413      	add	r3, r2
 8015362:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	699b      	ldr	r3, [r3, #24]
 8015368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801536c:	2b00      	cmp	r3, #0
 801536e:	f000 8175 	beq.w	801565c <f_lseek+0x48c>
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6a1b      	ldr	r3, [r3, #32]
 8015376:	69ba      	ldr	r2, [r7, #24]
 8015378:	429a      	cmp	r2, r3
 801537a:	f000 816f 	beq.w	801565c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	7d1b      	ldrb	r3, [r3, #20]
 8015382:	b25b      	sxtb	r3, r3
 8015384:	2b00      	cmp	r3, #0
 8015386:	da1d      	bge.n	80153c4 <f_lseek+0x1f4>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8015388:	68bb      	ldr	r3, [r7, #8]
 801538a:	7858      	ldrb	r0, [r3, #1]
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	6a1a      	ldr	r2, [r3, #32]
 8015396:	2301      	movs	r3, #1
 8015398:	f7fd fc46 	bl	8012c28 <disk_write>
 801539c:	4603      	mov	r3, r0
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d009      	beq.n	80153b6 <f_lseek+0x1e6>
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	2201      	movs	r2, #1
 80153a6:	755a      	strb	r2, [r3, #21]
 80153a8:	68bb      	ldr	r3, [r7, #8]
 80153aa:	2101      	movs	r1, #1
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7fd fd8e 	bl	8012ece <unlock_fs>
 80153b2:	2301      	movs	r3, #1
 80153b4:	e15b      	b.n	801566e <f_lseek+0x49e>
						fp->flag &= (BYTE)~FA_DIRTY;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	7d1b      	ldrb	r3, [r3, #20]
 80153ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153be:	b2da      	uxtb	r2, r3
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80153c4:	68bb      	ldr	r3, [r7, #8]
 80153c6:	7858      	ldrb	r0, [r3, #1]
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80153ce:	2301      	movs	r3, #1
 80153d0:	69ba      	ldr	r2, [r7, #24]
 80153d2:	f7fd fc09 	bl	8012be8 <disk_read>
 80153d6:	4603      	mov	r3, r0
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d009      	beq.n	80153f0 <f_lseek+0x220>
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2201      	movs	r2, #1
 80153e0:	755a      	strb	r2, [r3, #21]
 80153e2:	68bb      	ldr	r3, [r7, #8]
 80153e4:	2101      	movs	r1, #1
 80153e6:	4618      	mov	r0, r3
 80153e8:	f7fd fd71 	bl	8012ece <unlock_fs>
 80153ec:	2301      	movs	r3, #1
 80153ee:	e13e      	b.n	801566e <f_lseek+0x49e>
#endif
					fp->sect = dsc;
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	69ba      	ldr	r2, [r7, #24]
 80153f4:	621a      	str	r2, [r3, #32]
 80153f6:	e131      	b.n	801565c <f_lseek+0x48c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	68db      	ldr	r3, [r3, #12]
 80153fc:	683a      	ldr	r2, [r7, #0]
 80153fe:	429a      	cmp	r2, r3
 8015400:	d908      	bls.n	8015414 <f_lseek+0x244>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	7d1b      	ldrb	r3, [r3, #20]
 8015406:	f003 0302 	and.w	r3, r3, #2
 801540a:	2b00      	cmp	r3, #0
 801540c:	d102      	bne.n	8015414 <f_lseek+0x244>
			ofs = fp->obj.objsize;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	699b      	ldr	r3, [r3, #24]
 8015418:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 801541a:	2300      	movs	r3, #0
 801541c:	637b      	str	r3, [r7, #52]	; 0x34
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015422:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8015424:	683b      	ldr	r3, [r7, #0]
 8015426:	2b00      	cmp	r3, #0
 8015428:	f000 80c0 	beq.w	80155ac <f_lseek+0x3dc>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 801542c:	68bb      	ldr	r3, [r7, #8]
 801542e:	895b      	ldrh	r3, [r3, #10]
 8015430:	025b      	lsls	r3, r3, #9
 8015432:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8015434:	6a3b      	ldr	r3, [r7, #32]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d01b      	beq.n	8015472 <f_lseek+0x2a2>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 801543a:	683b      	ldr	r3, [r7, #0]
 801543c:	1e5a      	subs	r2, r3, #1
 801543e:	69fb      	ldr	r3, [r7, #28]
 8015440:	fbb2 f2f3 	udiv	r2, r2, r3
 8015444:	6a3b      	ldr	r3, [r7, #32]
 8015446:	1e59      	subs	r1, r3, #1
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 801544e:	429a      	cmp	r2, r3
 8015450:	d30f      	bcc.n	8015472 <f_lseek+0x2a2>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8015452:	6a3b      	ldr	r3, [r7, #32]
 8015454:	1e5a      	subs	r2, r3, #1
 8015456:	69fb      	ldr	r3, [r7, #28]
 8015458:	425b      	negs	r3, r3
 801545a:	401a      	ands	r2, r3
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	699b      	ldr	r3, [r3, #24]
 8015464:	683a      	ldr	r2, [r7, #0]
 8015466:	1ad3      	subs	r3, r2, r3
 8015468:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	69db      	ldr	r3, [r3, #28]
 801546e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015470:	e02c      	b.n	80154cc <f_lseek+0x2fc>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	689b      	ldr	r3, [r3, #8]
 8015476:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8015478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801547a:	2b00      	cmp	r3, #0
 801547c:	d123      	bne.n	80154c6 <f_lseek+0x2f6>
					clst = create_chain(&fp->obj, 0);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	2100      	movs	r1, #0
 8015482:	4618      	mov	r0, r3
 8015484:	f7fe f99a 	bl	80137bc <create_chain>
 8015488:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 801548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801548c:	2b01      	cmp	r3, #1
 801548e:	d109      	bne.n	80154a4 <f_lseek+0x2d4>
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	2202      	movs	r2, #2
 8015494:	755a      	strb	r2, [r3, #21]
 8015496:	68bb      	ldr	r3, [r7, #8]
 8015498:	2102      	movs	r1, #2
 801549a:	4618      	mov	r0, r3
 801549c:	f7fd fd17 	bl	8012ece <unlock_fs>
 80154a0:	2302      	movs	r3, #2
 80154a2:	e0e4      	b.n	801566e <f_lseek+0x49e>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80154a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80154aa:	d109      	bne.n	80154c0 <f_lseek+0x2f0>
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2201      	movs	r2, #1
 80154b0:	755a      	strb	r2, [r3, #21]
 80154b2:	68bb      	ldr	r3, [r7, #8]
 80154b4:	2101      	movs	r1, #1
 80154b6:	4618      	mov	r0, r3
 80154b8:	f7fd fd09 	bl	8012ece <unlock_fs>
 80154bc:	2301      	movs	r3, #1
 80154be:	e0d6      	b.n	801566e <f_lseek+0x49e>
					fp->obj.sclust = clst;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80154c4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80154ca:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80154cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d06c      	beq.n	80155ac <f_lseek+0x3dc>
				while (ofs > bcs) {						/* Cluster following loop */
 80154d2:	e044      	b.n	801555e <f_lseek+0x38e>
					ofs -= bcs; fp->fptr += bcs;
 80154d4:	683a      	ldr	r2, [r7, #0]
 80154d6:	69fb      	ldr	r3, [r7, #28]
 80154d8:	1ad3      	subs	r3, r2, r3
 80154da:	603b      	str	r3, [r7, #0]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	699a      	ldr	r2, [r3, #24]
 80154e0:	69fb      	ldr	r3, [r7, #28]
 80154e2:	441a      	add	r2, r3
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	7d1b      	ldrb	r3, [r3, #20]
 80154ec:	f003 0302 	and.w	r3, r3, #2
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d00b      	beq.n	801550c <f_lseek+0x33c>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80154f8:	4618      	mov	r0, r3
 80154fa:	f7fe f95f 	bl	80137bc <create_chain>
 80154fe:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8015500:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015502:	2b00      	cmp	r3, #0
 8015504:	d108      	bne.n	8015518 <f_lseek+0x348>
							ofs = 0; break;
 8015506:	2300      	movs	r3, #0
 8015508:	603b      	str	r3, [r7, #0]
 801550a:	e02c      	b.n	8015566 <f_lseek+0x396>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015510:	4618      	mov	r0, r3
 8015512:	f7fd ff62 	bl	80133da <get_fat>
 8015516:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8015518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801551e:	d109      	bne.n	8015534 <f_lseek+0x364>
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	2201      	movs	r2, #1
 8015524:	755a      	strb	r2, [r3, #21]
 8015526:	68bb      	ldr	r3, [r7, #8]
 8015528:	2101      	movs	r1, #1
 801552a:	4618      	mov	r0, r3
 801552c:	f7fd fccf 	bl	8012ece <unlock_fs>
 8015530:	2301      	movs	r3, #1
 8015532:	e09c      	b.n	801566e <f_lseek+0x49e>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8015534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015536:	2b01      	cmp	r3, #1
 8015538:	d904      	bls.n	8015544 <f_lseek+0x374>
 801553a:	68bb      	ldr	r3, [r7, #8]
 801553c:	699b      	ldr	r3, [r3, #24]
 801553e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015540:	429a      	cmp	r2, r3
 8015542:	d309      	bcc.n	8015558 <f_lseek+0x388>
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	2202      	movs	r2, #2
 8015548:	755a      	strb	r2, [r3, #21]
 801554a:	68bb      	ldr	r3, [r7, #8]
 801554c:	2102      	movs	r1, #2
 801554e:	4618      	mov	r0, r3
 8015550:	f7fd fcbd 	bl	8012ece <unlock_fs>
 8015554:	2302      	movs	r3, #2
 8015556:	e08a      	b.n	801566e <f_lseek+0x49e>
					fp->clust = clst;
 8015558:	687b      	ldr	r3, [r7, #4]
 801555a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801555c:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 801555e:	683a      	ldr	r2, [r7, #0]
 8015560:	69fb      	ldr	r3, [r7, #28]
 8015562:	429a      	cmp	r2, r3
 8015564:	d8b6      	bhi.n	80154d4 <f_lseek+0x304>
				}
				fp->fptr += ofs;
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	699a      	ldr	r2, [r3, #24]
 801556a:	683b      	ldr	r3, [r7, #0]
 801556c:	441a      	add	r2, r3
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8015572:	683b      	ldr	r3, [r7, #0]
 8015574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8015578:	2b00      	cmp	r3, #0
 801557a:	d017      	beq.n	80155ac <f_lseek+0x3dc>
					nsect = clust2sect(fs, clst);	/* Current sector */
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015580:	4618      	mov	r0, r3
 8015582:	f7fd ff0b 	bl	801339c <clust2sect>
 8015586:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8015588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801558a:	2b00      	cmp	r3, #0
 801558c:	d109      	bne.n	80155a2 <f_lseek+0x3d2>
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	2202      	movs	r2, #2
 8015592:	755a      	strb	r2, [r3, #21]
 8015594:	68bb      	ldr	r3, [r7, #8]
 8015596:	2102      	movs	r1, #2
 8015598:	4618      	mov	r0, r3
 801559a:	f7fd fc98 	bl	8012ece <unlock_fs>
 801559e:	2302      	movs	r3, #2
 80155a0:	e065      	b.n	801566e <f_lseek+0x49e>
					nsect += (DWORD)(ofs / SS(fs));
 80155a2:	683b      	ldr	r3, [r7, #0]
 80155a4:	0a5b      	lsrs	r3, r3, #9
 80155a6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155a8:	4413      	add	r3, r2
 80155aa:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	699a      	ldr	r2, [r3, #24]
 80155b0:	687b      	ldr	r3, [r7, #4]
 80155b2:	68db      	ldr	r3, [r3, #12]
 80155b4:	429a      	cmp	r2, r3
 80155b6:	d90a      	bls.n	80155ce <f_lseek+0x3fe>
			fp->obj.objsize = fp->fptr;
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	699a      	ldr	r2, [r3, #24]
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	7d1b      	ldrb	r3, [r3, #20]
 80155c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80155c8:	b2da      	uxtb	r2, r3
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	699b      	ldr	r3, [r3, #24]
 80155d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80155d6:	2b00      	cmp	r3, #0
 80155d8:	d040      	beq.n	801565c <f_lseek+0x48c>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6a1b      	ldr	r3, [r3, #32]
 80155de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80155e0:	429a      	cmp	r2, r3
 80155e2:	d03b      	beq.n	801565c <f_lseek+0x48c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	7d1b      	ldrb	r3, [r3, #20]
 80155e8:	b25b      	sxtb	r3, r3
 80155ea:	2b00      	cmp	r3, #0
 80155ec:	da1d      	bge.n	801562a <f_lseek+0x45a>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80155ee:	68bb      	ldr	r3, [r7, #8]
 80155f0:	7858      	ldrb	r0, [r3, #1]
 80155f2:	687b      	ldr	r3, [r7, #4]
 80155f4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	6a1a      	ldr	r2, [r3, #32]
 80155fc:	2301      	movs	r3, #1
 80155fe:	f7fd fb13 	bl	8012c28 <disk_write>
 8015602:	4603      	mov	r3, r0
 8015604:	2b00      	cmp	r3, #0
 8015606:	d009      	beq.n	801561c <f_lseek+0x44c>
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	2201      	movs	r2, #1
 801560c:	755a      	strb	r2, [r3, #21]
 801560e:	68bb      	ldr	r3, [r7, #8]
 8015610:	2101      	movs	r1, #1
 8015612:	4618      	mov	r0, r3
 8015614:	f7fd fc5b 	bl	8012ece <unlock_fs>
 8015618:	2301      	movs	r3, #1
 801561a:	e028      	b.n	801566e <f_lseek+0x49e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	7d1b      	ldrb	r3, [r3, #20]
 8015620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015624:	b2da      	uxtb	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	7858      	ldrb	r0, [r3, #1]
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8015634:	2301      	movs	r3, #1
 8015636:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015638:	f7fd fad6 	bl	8012be8 <disk_read>
 801563c:	4603      	mov	r3, r0
 801563e:	2b00      	cmp	r3, #0
 8015640:	d009      	beq.n	8015656 <f_lseek+0x486>
 8015642:	687b      	ldr	r3, [r7, #4]
 8015644:	2201      	movs	r2, #1
 8015646:	755a      	strb	r2, [r3, #21]
 8015648:	68bb      	ldr	r3, [r7, #8]
 801564a:	2101      	movs	r1, #1
 801564c:	4618      	mov	r0, r3
 801564e:	f7fd fc3e 	bl	8012ece <unlock_fs>
 8015652:	2301      	movs	r3, #1
 8015654:	e00b      	b.n	801566e <f_lseek+0x49e>
#endif
			fp->sect = nsect;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801565a:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8015662:	4611      	mov	r1, r2
 8015664:	4618      	mov	r0, r3
 8015666:	f7fd fc32 	bl	8012ece <unlock_fs>
 801566a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 801566e:	4618      	mov	r0, r3
 8015670:	3740      	adds	r7, #64	; 0x40
 8015672:	46bd      	mov	sp, r7
 8015674:	bd80      	pop	{r7, pc}

08015676 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8015676:	b580      	push	{r7, lr}
 8015678:	b086      	sub	sp, #24
 801567a:	af00      	add	r7, sp, #0
 801567c:	6078      	str	r0, [r7, #4]
 801567e:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2b00      	cmp	r3, #0
 8015684:	d101      	bne.n	801568a <f_opendir+0x14>
 8015686:	2309      	movs	r3, #9
 8015688:	e06a      	b.n	8015760 <f_opendir+0xea>

	/* Get logical drive */
	obj = &dp->obj;
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 801568e:	f107 010c 	add.w	r1, r7, #12
 8015692:	463b      	mov	r3, r7
 8015694:	2200      	movs	r2, #0
 8015696:	4618      	mov	r0, r3
 8015698:	f7fe fea8 	bl	80143ec <find_volume>
 801569c:	4603      	mov	r3, r0
 801569e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80156a0:	7dfb      	ldrb	r3, [r7, #23]
 80156a2:	2b00      	cmp	r3, #0
 80156a4:	d14f      	bne.n	8015746 <f_opendir+0xd0>
		obj->fs = fs;
 80156a6:	68fa      	ldr	r2, [r7, #12]
 80156a8:	693b      	ldr	r3, [r7, #16]
 80156aa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80156ac:	683b      	ldr	r3, [r7, #0]
 80156ae:	4619      	mov	r1, r3
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f7fe fd8f 	bl	80141d4 <follow_path>
 80156b6:	4603      	mov	r3, r0
 80156b8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 80156ba:	7dfb      	ldrb	r3, [r7, #23]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d13d      	bne.n	801573c <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80156c6:	b25b      	sxtb	r3, r3
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	db12      	blt.n	80156f2 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 80156cc:	693b      	ldr	r3, [r7, #16]
 80156ce:	799b      	ldrb	r3, [r3, #6]
 80156d0:	f003 0310 	and.w	r3, r3, #16
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d00a      	beq.n	80156ee <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80156d8:	68fa      	ldr	r2, [r7, #12]
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	6a1b      	ldr	r3, [r3, #32]
 80156de:	4619      	mov	r1, r3
 80156e0:	4610      	mov	r0, r2
 80156e2:	f7fe fabe 	bl	8013c62 <ld_clust>
 80156e6:	4602      	mov	r2, r0
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	609a      	str	r2, [r3, #8]
 80156ec:	e001      	b.n	80156f2 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 80156ee:	2305      	movs	r3, #5
 80156f0:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 80156f2:	7dfb      	ldrb	r3, [r7, #23]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d121      	bne.n	801573c <f_opendir+0xc6>
				obj->id = fs->id;
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	88da      	ldrh	r2, [r3, #6]
 80156fc:	693b      	ldr	r3, [r7, #16]
 80156fe:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8015700:	2100      	movs	r1, #0
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f7fe f926 	bl	8013954 <dir_sdi>
 8015708:	4603      	mov	r3, r0
 801570a:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 801570c:	7dfb      	ldrb	r3, [r7, #23]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d114      	bne.n	801573c <f_opendir+0xc6>
					if (obj->sclust) {
 8015712:	693b      	ldr	r3, [r7, #16]
 8015714:	689b      	ldr	r3, [r3, #8]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d00d      	beq.n	8015736 <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 801571a:	2100      	movs	r1, #0
 801571c:	6878      	ldr	r0, [r7, #4]
 801571e:	f7fd fc6f 	bl	8013000 <inc_lock>
 8015722:	4602      	mov	r2, r0
 8015724:	693b      	ldr	r3, [r7, #16]
 8015726:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8015728:	693b      	ldr	r3, [r7, #16]
 801572a:	691b      	ldr	r3, [r3, #16]
 801572c:	2b00      	cmp	r3, #0
 801572e:	d105      	bne.n	801573c <f_opendir+0xc6>
 8015730:	2312      	movs	r3, #18
 8015732:	75fb      	strb	r3, [r7, #23]
 8015734:	e002      	b.n	801573c <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8015736:	693b      	ldr	r3, [r7, #16]
 8015738:	2200      	movs	r2, #0
 801573a:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801573c:	7dfb      	ldrb	r3, [r7, #23]
 801573e:	2b04      	cmp	r3, #4
 8015740:	d101      	bne.n	8015746 <f_opendir+0xd0>
 8015742:	2305      	movs	r3, #5
 8015744:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8015746:	7dfb      	ldrb	r3, [r7, #23]
 8015748:	2b00      	cmp	r3, #0
 801574a:	d002      	beq.n	8015752 <f_opendir+0xdc>
 801574c:	693b      	ldr	r3, [r7, #16]
 801574e:	2200      	movs	r2, #0
 8015750:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8015752:	68fb      	ldr	r3, [r7, #12]
 8015754:	7dfa      	ldrb	r2, [r7, #23]
 8015756:	4611      	mov	r1, r2
 8015758:	4618      	mov	r0, r3
 801575a:	f7fd fbb8 	bl	8012ece <unlock_fs>
 801575e:	7dfb      	ldrb	r3, [r7, #23]
}
 8015760:	4618      	mov	r0, r3
 8015762:	3718      	adds	r7, #24
 8015764:	46bd      	mov	sp, r7
 8015766:	bd80      	pop	{r7, pc}

08015768 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8015768:	b580      	push	{r7, lr}
 801576a:	b084      	sub	sp, #16
 801576c:	af00      	add	r7, sp, #0
 801576e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	f107 0208 	add.w	r2, r7, #8
 8015776:	4611      	mov	r1, r2
 8015778:	4618      	mov	r0, r3
 801577a:	f7ff f88b 	bl	8014894 <validate>
 801577e:	4603      	mov	r3, r0
 8015780:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8015782:	7bfb      	ldrb	r3, [r7, #15]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d115      	bne.n	80157b4 <f_closedir+0x4c>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	691b      	ldr	r3, [r3, #16]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d006      	beq.n	801579e <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	691b      	ldr	r3, [r3, #16]
 8015794:	4618      	mov	r0, r3
 8015796:	f7fd fcc1 	bl	801311c <dec_lock>
 801579a:	4603      	mov	r3, r0
 801579c:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 801579e:	7bfb      	ldrb	r3, [r7, #15]
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d102      	bne.n	80157aa <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	2200      	movs	r2, #0
 80157a8:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
 80157aa:	68bb      	ldr	r3, [r7, #8]
 80157ac:	2100      	movs	r1, #0
 80157ae:	4618      	mov	r0, r3
 80157b0:	f7fd fb8d 	bl	8012ece <unlock_fs>
#endif
	}
	return res;
 80157b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80157b6:	4618      	mov	r0, r3
 80157b8:	3710      	adds	r7, #16
 80157ba:	46bd      	mov	sp, r7
 80157bc:	bd80      	pop	{r7, pc}

080157be <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80157be:	b580      	push	{r7, lr}
 80157c0:	b084      	sub	sp, #16
 80157c2:	af00      	add	r7, sp, #0
 80157c4:	6078      	str	r0, [r7, #4]
 80157c6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	f107 0208 	add.w	r2, r7, #8
 80157ce:	4611      	mov	r1, r2
 80157d0:	4618      	mov	r0, r3
 80157d2:	f7ff f85f 	bl	8014894 <validate>
 80157d6:	4603      	mov	r3, r0
 80157d8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80157da:	7bfb      	ldrb	r3, [r7, #15]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d126      	bne.n	801582e <f_readdir+0x70>
		if (!fno) {
 80157e0:	683b      	ldr	r3, [r7, #0]
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d106      	bne.n	80157f4 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80157e6:	2100      	movs	r1, #0
 80157e8:	6878      	ldr	r0, [r7, #4]
 80157ea:	f7fe f8b3 	bl	8013954 <dir_sdi>
 80157ee:	4603      	mov	r3, r0
 80157f0:	73fb      	strb	r3, [r7, #15]
 80157f2:	e01c      	b.n	801582e <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80157f4:	2100      	movs	r1, #0
 80157f6:	6878      	ldr	r0, [r7, #4]
 80157f8:	f7fe fa72 	bl	8013ce0 <dir_read>
 80157fc:	4603      	mov	r3, r0
 80157fe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8015800:	7bfb      	ldrb	r3, [r7, #15]
 8015802:	2b04      	cmp	r3, #4
 8015804:	d101      	bne.n	801580a <f_readdir+0x4c>
 8015806:	2300      	movs	r3, #0
 8015808:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 801580a:	7bfb      	ldrb	r3, [r7, #15]
 801580c:	2b00      	cmp	r3, #0
 801580e:	d10e      	bne.n	801582e <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8015810:	6839      	ldr	r1, [r7, #0]
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f7fe fb48 	bl	8013ea8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8015818:	2100      	movs	r1, #0
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f7fe f915 	bl	8013a4a <dir_next>
 8015820:	4603      	mov	r3, r0
 8015822:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8015824:	7bfb      	ldrb	r3, [r7, #15]
 8015826:	2b04      	cmp	r3, #4
 8015828:	d101      	bne.n	801582e <f_readdir+0x70>
 801582a:	2300      	movs	r3, #0
 801582c:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 801582e:	68bb      	ldr	r3, [r7, #8]
 8015830:	7bfa      	ldrb	r2, [r7, #15]
 8015832:	4611      	mov	r1, r2
 8015834:	4618      	mov	r0, r3
 8015836:	f7fd fb4a 	bl	8012ece <unlock_fs>
 801583a:	7bfb      	ldrb	r3, [r7, #15]
}
 801583c:	4618      	mov	r0, r3
 801583e:	3710      	adds	r7, #16
 8015840:	46bd      	mov	sp, r7
 8015842:	bd80      	pop	{r7, pc}

08015844 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 8015844:	b580      	push	{r7, lr}
 8015846:	b084      	sub	sp, #16
 8015848:	af00      	add	r7, sp, #0
 801584a:	6078      	str	r0, [r7, #4]
 801584c:	6039      	str	r1, [r7, #0]
	FRESULT res;


	for (;;) {
		res = f_readdir(dp, fno);		/* Get a directory item */
 801584e:	6839      	ldr	r1, [r7, #0]
 8015850:	6878      	ldr	r0, [r7, #4]
 8015852:	f7ff ffb4 	bl	80157be <f_readdir>
 8015856:	4603      	mov	r3, r0
 8015858:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 801585a:	7bfb      	ldrb	r3, [r7, #15]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d114      	bne.n	801588a <f_findnext+0x46>
 8015860:	683b      	ldr	r3, [r7, #0]
 8015862:	2b00      	cmp	r3, #0
 8015864:	d011      	beq.n	801588a <f_findnext+0x46>
 8015866:	683b      	ldr	r3, [r7, #0]
 8015868:	7a5b      	ldrb	r3, [r3, #9]
 801586a:	2b00      	cmp	r3, #0
 801586c:	d00d      	beq.n	801588a <f_findnext+0x46>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 801586e:	687b      	ldr	r3, [r7, #4]
 8015870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8015872:	683b      	ldr	r3, [r7, #0]
 8015874:	f103 0109 	add.w	r1, r3, #9
 8015878:	2300      	movs	r3, #0
 801587a:	2200      	movs	r2, #0
 801587c:	f7fe fb9a 	bl	8013fb4 <pattern_matching>
 8015880:	4603      	mov	r3, r0
 8015882:	2b00      	cmp	r3, #0
 8015884:	d100      	bne.n	8015888 <f_findnext+0x44>
		res = f_readdir(dp, fno);		/* Get a directory item */
 8015886:	e7e2      	b.n	801584e <f_findnext+0xa>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8015888:	bf00      	nop
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
 801588a:	7bfb      	ldrb	r3, [r7, #15]
}
 801588c:	4618      	mov	r0, r3
 801588e:	3710      	adds	r7, #16
 8015890:	46bd      	mov	sp, r7
 8015892:	bd80      	pop	{r7, pc}

08015894 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8015894:	b580      	push	{r7, lr}
 8015896:	b086      	sub	sp, #24
 8015898:	af00      	add	r7, sp, #0
 801589a:	60f8      	str	r0, [r7, #12]
 801589c:	60b9      	str	r1, [r7, #8]
 801589e:	607a      	str	r2, [r7, #4]
 80158a0:	603b      	str	r3, [r7, #0]
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 80158a2:	68fb      	ldr	r3, [r7, #12]
 80158a4:	683a      	ldr	r2, [r7, #0]
 80158a6:	631a      	str	r2, [r3, #48]	; 0x30
	res = f_opendir(dp, path);		/* Open the target directory */
 80158a8:	6879      	ldr	r1, [r7, #4]
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	f7ff fee3 	bl	8015676 <f_opendir>
 80158b0:	4603      	mov	r3, r0
 80158b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80158b4:	7dfb      	ldrb	r3, [r7, #23]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d105      	bne.n	80158c6 <f_findfirst+0x32>
		res = f_findnext(dp, fno);	/* Find the first item */
 80158ba:	68b9      	ldr	r1, [r7, #8]
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f7ff ffc1 	bl	8015844 <f_findnext>
 80158c2:	4603      	mov	r3, r0
 80158c4:	75fb      	strb	r3, [r7, #23]
	}
	return res;
 80158c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80158c8:	4618      	mov	r0, r3
 80158ca:	3718      	adds	r7, #24
 80158cc:	46bd      	mov	sp, r7
 80158ce:	bd80      	pop	{r7, pc}

080158d0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80158d0:	b480      	push	{r7}
 80158d2:	b087      	sub	sp, #28
 80158d4:	af00      	add	r7, sp, #0
 80158d6:	60f8      	str	r0, [r7, #12]
 80158d8:	60b9      	str	r1, [r7, #8]
 80158da:	4613      	mov	r3, r2
 80158dc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80158de:	2301      	movs	r3, #1
 80158e0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80158e2:	2300      	movs	r3, #0
 80158e4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80158e6:	4b1f      	ldr	r3, [pc, #124]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 80158e8:	7a5b      	ldrb	r3, [r3, #9]
 80158ea:	b2db      	uxtb	r3, r3
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d131      	bne.n	8015954 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80158f0:	4b1c      	ldr	r3, [pc, #112]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 80158f2:	7a5b      	ldrb	r3, [r3, #9]
 80158f4:	b2db      	uxtb	r3, r3
 80158f6:	461a      	mov	r2, r3
 80158f8:	4b1a      	ldr	r3, [pc, #104]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 80158fa:	2100      	movs	r1, #0
 80158fc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80158fe:	4b19      	ldr	r3, [pc, #100]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 8015900:	7a5b      	ldrb	r3, [r3, #9]
 8015902:	b2db      	uxtb	r3, r3
 8015904:	4a17      	ldr	r2, [pc, #92]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 8015906:	009b      	lsls	r3, r3, #2
 8015908:	4413      	add	r3, r2
 801590a:	68fa      	ldr	r2, [r7, #12]
 801590c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801590e:	4b15      	ldr	r3, [pc, #84]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 8015910:	7a5b      	ldrb	r3, [r3, #9]
 8015912:	b2db      	uxtb	r3, r3
 8015914:	461a      	mov	r2, r3
 8015916:	4b13      	ldr	r3, [pc, #76]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 8015918:	4413      	add	r3, r2
 801591a:	79fa      	ldrb	r2, [r7, #7]
 801591c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801591e:	4b11      	ldr	r3, [pc, #68]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 8015920:	7a5b      	ldrb	r3, [r3, #9]
 8015922:	b2db      	uxtb	r3, r3
 8015924:	1c5a      	adds	r2, r3, #1
 8015926:	b2d1      	uxtb	r1, r2
 8015928:	4a0e      	ldr	r2, [pc, #56]	; (8015964 <FATFS_LinkDriverEx+0x94>)
 801592a:	7251      	strb	r1, [r2, #9]
 801592c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801592e:	7dbb      	ldrb	r3, [r7, #22]
 8015930:	3330      	adds	r3, #48	; 0x30
 8015932:	b2da      	uxtb	r2, r3
 8015934:	68bb      	ldr	r3, [r7, #8]
 8015936:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8015938:	68bb      	ldr	r3, [r7, #8]
 801593a:	3301      	adds	r3, #1
 801593c:	223a      	movs	r2, #58	; 0x3a
 801593e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8015940:	68bb      	ldr	r3, [r7, #8]
 8015942:	3302      	adds	r3, #2
 8015944:	222f      	movs	r2, #47	; 0x2f
 8015946:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8015948:	68bb      	ldr	r3, [r7, #8]
 801594a:	3303      	adds	r3, #3
 801594c:	2200      	movs	r2, #0
 801594e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8015950:	2300      	movs	r3, #0
 8015952:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8015954:	7dfb      	ldrb	r3, [r7, #23]
}
 8015956:	4618      	mov	r0, r3
 8015958:	371c      	adds	r7, #28
 801595a:	46bd      	mov	sp, r7
 801595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015960:	4770      	bx	lr
 8015962:	bf00      	nop
 8015964:	20000368 	.word	0x20000368

08015968 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
 8015970:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8015972:	2200      	movs	r2, #0
 8015974:	6839      	ldr	r1, [r7, #0]
 8015976:	6878      	ldr	r0, [r7, #4]
 8015978:	f7ff ffaa 	bl	80158d0 <FATFS_LinkDriverEx>
 801597c:	4603      	mov	r3, r0
}
 801597e:	4618      	mov	r0, r3
 8015980:	3708      	adds	r7, #8
 8015982:	46bd      	mov	sp, r7
 8015984:	bd80      	pop	{r7, pc}

08015986 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8015986:	b580      	push	{r7, lr}
 8015988:	b084      	sub	sp, #16
 801598a:	af00      	add	r7, sp, #0
 801598c:	4603      	mov	r3, r0
 801598e:	6039      	str	r1, [r7, #0]
 8015990:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8015992:	2200      	movs	r2, #0
 8015994:	2101      	movs	r1, #1
 8015996:	2001      	movs	r0, #1
 8015998:	f000 fb5e 	bl	8016058 <osSemaphoreNew>
 801599c:	4602      	mov	r2, r0
 801599e:	683b      	ldr	r3, [r7, #0]
 80159a0:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 80159a2:	683b      	ldr	r3, [r7, #0]
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	bf14      	ite	ne
 80159aa:	2301      	movne	r3, #1
 80159ac:	2300      	moveq	r3, #0
 80159ae:	b2db      	uxtb	r3, r3
 80159b0:	60fb      	str	r3, [r7, #12]

    return ret;
 80159b2:	68fb      	ldr	r3, [r7, #12]
}
 80159b4:	4618      	mov	r0, r3
 80159b6:	3710      	adds	r7, #16
 80159b8:	46bd      	mov	sp, r7
 80159ba:	bd80      	pop	{r7, pc}

080159bc <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
 80159c2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80159c4:	6878      	ldr	r0, [r7, #4]
 80159c6:	f000 fca3 	bl	8016310 <osSemaphoreDelete>
#endif
    return 1;
 80159ca:	2301      	movs	r3, #1
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}

080159d4 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80159d4:	b580      	push	{r7, lr}
 80159d6:	b084      	sub	sp, #16
 80159d8:	af00      	add	r7, sp, #0
 80159da:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80159dc:	2300      	movs	r3, #0
 80159de:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 80159e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f000 fbd5 	bl	8016194 <osSemaphoreAcquire>
 80159ea:	4603      	mov	r3, r0
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d101      	bne.n	80159f4 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 80159f0:	2301      	movs	r3, #1
 80159f2:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80159f4:	68fb      	ldr	r3, [r7, #12]
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3710      	adds	r7, #16
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}

080159fe <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 80159fe:	b580      	push	{r7, lr}
 8015a00:	b082      	sub	sp, #8
 8015a02:	af00      	add	r7, sp, #0
 8015a04:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8015a06:	6878      	ldr	r0, [r7, #4]
 8015a08:	f000 fc2a 	bl	8016260 <osSemaphoreRelease>
#endif
}
 8015a0c:	bf00      	nop
 8015a0e:	3708      	adds	r7, #8
 8015a10:	46bd      	mov	sp, r7
 8015a12:	bd80      	pop	{r7, pc}

08015a14 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8015a14:	b480      	push	{r7}
 8015a16:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8015a18:	bf00      	nop
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a20:	4770      	bx	lr
	...

08015a24 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8015a24:	b480      	push	{r7}
 8015a26:	b085      	sub	sp, #20
 8015a28:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015a2a:	f3ef 8305 	mrs	r3, IPSR
 8015a2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8015a30:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d10f      	bne.n	8015a56 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015a36:	f3ef 8310 	mrs	r3, PRIMASK
 8015a3a:	607b      	str	r3, [r7, #4]
  return(result);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	2b00      	cmp	r3, #0
 8015a40:	d105      	bne.n	8015a4e <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015a42:	f3ef 8311 	mrs	r3, BASEPRI
 8015a46:	603b      	str	r3, [r7, #0]
  return(result);
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d007      	beq.n	8015a5e <osKernelInitialize+0x3a>
 8015a4e:	4b0e      	ldr	r3, [pc, #56]	; (8015a88 <osKernelInitialize+0x64>)
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	2b02      	cmp	r3, #2
 8015a54:	d103      	bne.n	8015a5e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8015a56:	f06f 0305 	mvn.w	r3, #5
 8015a5a:	60fb      	str	r3, [r7, #12]
 8015a5c:	e00c      	b.n	8015a78 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8015a5e:	4b0a      	ldr	r3, [pc, #40]	; (8015a88 <osKernelInitialize+0x64>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d105      	bne.n	8015a72 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8015a66:	4b08      	ldr	r3, [pc, #32]	; (8015a88 <osKernelInitialize+0x64>)
 8015a68:	2201      	movs	r2, #1
 8015a6a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8015a6c:	2300      	movs	r3, #0
 8015a6e:	60fb      	str	r3, [r7, #12]
 8015a70:	e002      	b.n	8015a78 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8015a72:	f04f 33ff 	mov.w	r3, #4294967295
 8015a76:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015a78:	68fb      	ldr	r3, [r7, #12]
}
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	3714      	adds	r7, #20
 8015a7e:	46bd      	mov	sp, r7
 8015a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a84:	4770      	bx	lr
 8015a86:	bf00      	nop
 8015a88:	20000374 	.word	0x20000374

08015a8c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b082      	sub	sp, #8
 8015a90:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8015a92:	f002 fe7b 	bl	801878c <xTaskGetSchedulerState>
 8015a96:	4603      	mov	r3, r0
 8015a98:	2b00      	cmp	r3, #0
 8015a9a:	d004      	beq.n	8015aa6 <osKernelGetState+0x1a>
 8015a9c:	2b02      	cmp	r3, #2
 8015a9e:	d105      	bne.n	8015aac <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8015aa0:	2302      	movs	r3, #2
 8015aa2:	607b      	str	r3, [r7, #4]
      break;
 8015aa4:	e00c      	b.n	8015ac0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8015aa6:	2303      	movs	r3, #3
 8015aa8:	607b      	str	r3, [r7, #4]
      break;
 8015aaa:	e009      	b.n	8015ac0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8015aac:	4b07      	ldr	r3, [pc, #28]	; (8015acc <osKernelGetState+0x40>)
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	2b01      	cmp	r3, #1
 8015ab2:	d102      	bne.n	8015aba <osKernelGetState+0x2e>
        state = osKernelReady;
 8015ab4:	2301      	movs	r3, #1
 8015ab6:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8015ab8:	e001      	b.n	8015abe <osKernelGetState+0x32>
        state = osKernelInactive;
 8015aba:	2300      	movs	r3, #0
 8015abc:	607b      	str	r3, [r7, #4]
      break;
 8015abe:	bf00      	nop
  }

  return (state);
 8015ac0:	687b      	ldr	r3, [r7, #4]
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3708      	adds	r7, #8
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	20000374 	.word	0x20000374

08015ad0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8015ad0:	b580      	push	{r7, lr}
 8015ad2:	b084      	sub	sp, #16
 8015ad4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015ad6:	f3ef 8305 	mrs	r3, IPSR
 8015ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8015adc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d10f      	bne.n	8015b02 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8015ae6:	607b      	str	r3, [r7, #4]
  return(result);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d105      	bne.n	8015afa <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015aee:	f3ef 8311 	mrs	r3, BASEPRI
 8015af2:	603b      	str	r3, [r7, #0]
  return(result);
 8015af4:	683b      	ldr	r3, [r7, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d007      	beq.n	8015b0a <osKernelStart+0x3a>
 8015afa:	4b0f      	ldr	r3, [pc, #60]	; (8015b38 <osKernelStart+0x68>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	2b02      	cmp	r3, #2
 8015b00:	d103      	bne.n	8015b0a <osKernelStart+0x3a>
    stat = osErrorISR;
 8015b02:	f06f 0305 	mvn.w	r3, #5
 8015b06:	60fb      	str	r3, [r7, #12]
 8015b08:	e010      	b.n	8015b2c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8015b0a:	4b0b      	ldr	r3, [pc, #44]	; (8015b38 <osKernelStart+0x68>)
 8015b0c:	681b      	ldr	r3, [r3, #0]
 8015b0e:	2b01      	cmp	r3, #1
 8015b10:	d109      	bne.n	8015b26 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8015b12:	f7ff ff7f 	bl	8015a14 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8015b16:	4b08      	ldr	r3, [pc, #32]	; (8015b38 <osKernelStart+0x68>)
 8015b18:	2202      	movs	r2, #2
 8015b1a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8015b1c:	f002 f9c8 	bl	8017eb0 <vTaskStartScheduler>
      stat = osOK;
 8015b20:	2300      	movs	r3, #0
 8015b22:	60fb      	str	r3, [r7, #12]
 8015b24:	e002      	b.n	8015b2c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8015b26:	f04f 33ff 	mov.w	r3, #4294967295
 8015b2a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8015b2c:	68fb      	ldr	r3, [r7, #12]
}
 8015b2e:	4618      	mov	r0, r3
 8015b30:	3710      	adds	r7, #16
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	20000374 	.word	0x20000374

08015b3c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b084      	sub	sp, #16
 8015b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015b42:	f3ef 8305 	mrs	r3, IPSR
 8015b46:	60bb      	str	r3, [r7, #8]
  return(result);
 8015b48:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d10f      	bne.n	8015b6e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015b4e:	f3ef 8310 	mrs	r3, PRIMASK
 8015b52:	607b      	str	r3, [r7, #4]
  return(result);
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d105      	bne.n	8015b66 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8015b5e:	603b      	str	r3, [r7, #0]
  return(result);
 8015b60:	683b      	ldr	r3, [r7, #0]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d007      	beq.n	8015b76 <osKernelGetTickCount+0x3a>
 8015b66:	4b08      	ldr	r3, [pc, #32]	; (8015b88 <osKernelGetTickCount+0x4c>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	2b02      	cmp	r3, #2
 8015b6c:	d103      	bne.n	8015b76 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8015b6e:	f002 fac3 	bl	80180f8 <xTaskGetTickCountFromISR>
 8015b72:	60f8      	str	r0, [r7, #12]
 8015b74:	e002      	b.n	8015b7c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8015b76:	f002 faaf 	bl	80180d8 <xTaskGetTickCount>
 8015b7a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8015b7c:	68fb      	ldr	r3, [r7, #12]
}
 8015b7e:	4618      	mov	r0, r3
 8015b80:	3710      	adds	r7, #16
 8015b82:	46bd      	mov	sp, r7
 8015b84:	bd80      	pop	{r7, pc}
 8015b86:	bf00      	nop
 8015b88:	20000374 	.word	0x20000374

08015b8c <osKernelGetTickFreq>:

uint32_t osKernelGetTickFreq (void) {
 8015b8c:	b480      	push	{r7}
 8015b8e:	af00      	add	r7, sp, #0
  return (configTICK_RATE_HZ);
 8015b90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
}
 8015b94:	4618      	mov	r0, r3
 8015b96:	46bd      	mov	sp, r7
 8015b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b9c:	4770      	bx	lr
	...

08015ba0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8015ba0:	b580      	push	{r7, lr}
 8015ba2:	b090      	sub	sp, #64	; 0x40
 8015ba4:	af04      	add	r7, sp, #16
 8015ba6:	60f8      	str	r0, [r7, #12]
 8015ba8:	60b9      	str	r1, [r7, #8]
 8015baa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8015bac:	2300      	movs	r3, #0
 8015bae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015bb0:	f3ef 8305 	mrs	r3, IPSR
 8015bb4:	61fb      	str	r3, [r7, #28]
  return(result);
 8015bb6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	f040 808f 	bne.w	8015cdc <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8015bc2:	61bb      	str	r3, [r7, #24]
  return(result);
 8015bc4:	69bb      	ldr	r3, [r7, #24]
 8015bc6:	2b00      	cmp	r3, #0
 8015bc8:	d105      	bne.n	8015bd6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015bca:	f3ef 8311 	mrs	r3, BASEPRI
 8015bce:	617b      	str	r3, [r7, #20]
  return(result);
 8015bd0:	697b      	ldr	r3, [r7, #20]
 8015bd2:	2b00      	cmp	r3, #0
 8015bd4:	d003      	beq.n	8015bde <osThreadNew+0x3e>
 8015bd6:	4b44      	ldr	r3, [pc, #272]	; (8015ce8 <osThreadNew+0x148>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2b02      	cmp	r3, #2
 8015bdc:	d07e      	beq.n	8015cdc <osThreadNew+0x13c>
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d07b      	beq.n	8015cdc <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8015be4:	2380      	movs	r3, #128	; 0x80
 8015be6:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 8015be8:	2318      	movs	r3, #24
 8015bea:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8015bec:	2300      	movs	r3, #0
 8015bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8015bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8015bf4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8015bf6:	687b      	ldr	r3, [r7, #4]
 8015bf8:	2b00      	cmp	r3, #0
 8015bfa:	d045      	beq.n	8015c88 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d002      	beq.n	8015c0a <osThreadNew+0x6a>
        name = attr->name;
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8015c0a:	687b      	ldr	r3, [r7, #4]
 8015c0c:	699b      	ldr	r3, [r3, #24]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d002      	beq.n	8015c18 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8015c12:	687b      	ldr	r3, [r7, #4]
 8015c14:	699b      	ldr	r3, [r3, #24]
 8015c16:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8015c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d008      	beq.n	8015c30 <osThreadNew+0x90>
 8015c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c20:	2b38      	cmp	r3, #56	; 0x38
 8015c22:	d805      	bhi.n	8015c30 <osThreadNew+0x90>
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	685b      	ldr	r3, [r3, #4]
 8015c28:	f003 0301 	and.w	r3, r3, #1
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d001      	beq.n	8015c34 <osThreadNew+0x94>
        return (NULL);
 8015c30:	2300      	movs	r3, #0
 8015c32:	e054      	b.n	8015cde <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	695b      	ldr	r3, [r3, #20]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d003      	beq.n	8015c44 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	695b      	ldr	r3, [r3, #20]
 8015c40:	089b      	lsrs	r3, r3, #2
 8015c42:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	689b      	ldr	r3, [r3, #8]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d00e      	beq.n	8015c6a <osThreadNew+0xca>
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	68db      	ldr	r3, [r3, #12]
 8015c50:	2b5b      	cmp	r3, #91	; 0x5b
 8015c52:	d90a      	bls.n	8015c6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d006      	beq.n	8015c6a <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	695b      	ldr	r3, [r3, #20]
 8015c60:	2b00      	cmp	r3, #0
 8015c62:	d002      	beq.n	8015c6a <osThreadNew+0xca>
        mem = 1;
 8015c64:	2301      	movs	r3, #1
 8015c66:	623b      	str	r3, [r7, #32]
 8015c68:	e010      	b.n	8015c8c <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8015c6a:	687b      	ldr	r3, [r7, #4]
 8015c6c:	689b      	ldr	r3, [r3, #8]
 8015c6e:	2b00      	cmp	r3, #0
 8015c70:	d10c      	bne.n	8015c8c <osThreadNew+0xec>
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	68db      	ldr	r3, [r3, #12]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d108      	bne.n	8015c8c <osThreadNew+0xec>
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	691b      	ldr	r3, [r3, #16]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d104      	bne.n	8015c8c <osThreadNew+0xec>
          mem = 0;
 8015c82:	2300      	movs	r3, #0
 8015c84:	623b      	str	r3, [r7, #32]
 8015c86:	e001      	b.n	8015c8c <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8015c88:	2300      	movs	r3, #0
 8015c8a:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8015c8c:	6a3b      	ldr	r3, [r7, #32]
 8015c8e:	2b01      	cmp	r3, #1
 8015c90:	d110      	bne.n	8015cb4 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8015c96:	687a      	ldr	r2, [r7, #4]
 8015c98:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8015c9a:	9202      	str	r2, [sp, #8]
 8015c9c:	9301      	str	r3, [sp, #4]
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca0:	9300      	str	r3, [sp, #0]
 8015ca2:	68bb      	ldr	r3, [r7, #8]
 8015ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ca8:	68f8      	ldr	r0, [r7, #12]
 8015caa:	f001 fea5 	bl	80179f8 <xTaskCreateStatic>
 8015cae:	4603      	mov	r3, r0
 8015cb0:	613b      	str	r3, [r7, #16]
 8015cb2:	e013      	b.n	8015cdc <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8015cb4:	6a3b      	ldr	r3, [r7, #32]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d110      	bne.n	8015cdc <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8015cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015cbc:	b29a      	uxth	r2, r3
 8015cbe:	f107 0310 	add.w	r3, r7, #16
 8015cc2:	9301      	str	r3, [sp, #4]
 8015cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc6:	9300      	str	r3, [sp, #0]
 8015cc8:	68bb      	ldr	r3, [r7, #8]
 8015cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015ccc:	68f8      	ldr	r0, [r7, #12]
 8015cce:	f001 fef3 	bl	8017ab8 <xTaskCreate>
 8015cd2:	4603      	mov	r3, r0
 8015cd4:	2b01      	cmp	r3, #1
 8015cd6:	d001      	beq.n	8015cdc <osThreadNew+0x13c>
          hTask = NULL;
 8015cd8:	2300      	movs	r3, #0
 8015cda:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8015cdc:	693b      	ldr	r3, [r7, #16]
}
 8015cde:	4618      	mov	r0, r3
 8015ce0:	3730      	adds	r7, #48	; 0x30
 8015ce2:	46bd      	mov	sp, r7
 8015ce4:	bd80      	pop	{r7, pc}
 8015ce6:	bf00      	nop
 8015ce8:	20000374 	.word	0x20000374

08015cec <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b086      	sub	sp, #24
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015cf4:	f3ef 8305 	mrs	r3, IPSR
 8015cf8:	613b      	str	r3, [r7, #16]
  return(result);
 8015cfa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d10f      	bne.n	8015d20 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d00:	f3ef 8310 	mrs	r3, PRIMASK
 8015d04:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d06:	68fb      	ldr	r3, [r7, #12]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d105      	bne.n	8015d18 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015d0c:	f3ef 8311 	mrs	r3, BASEPRI
 8015d10:	60bb      	str	r3, [r7, #8]
  return(result);
 8015d12:	68bb      	ldr	r3, [r7, #8]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d007      	beq.n	8015d28 <osDelay+0x3c>
 8015d18:	4b0a      	ldr	r3, [pc, #40]	; (8015d44 <osDelay+0x58>)
 8015d1a:	681b      	ldr	r3, [r3, #0]
 8015d1c:	2b02      	cmp	r3, #2
 8015d1e:	d103      	bne.n	8015d28 <osDelay+0x3c>
    stat = osErrorISR;
 8015d20:	f06f 0305 	mvn.w	r3, #5
 8015d24:	617b      	str	r3, [r7, #20]
 8015d26:	e007      	b.n	8015d38 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d002      	beq.n	8015d38 <osDelay+0x4c>
      vTaskDelay(ticks);
 8015d32:	6878      	ldr	r0, [r7, #4]
 8015d34:	f002 f886 	bl	8017e44 <vTaskDelay>
    }
  }

  return (stat);
 8015d38:	697b      	ldr	r3, [r7, #20]
}
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	3718      	adds	r7, #24
 8015d3e:	46bd      	mov	sp, r7
 8015d40:	bd80      	pop	{r7, pc}
 8015d42:	bf00      	nop
 8015d44:	20000374 	.word	0x20000374

08015d48 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8015d48:	b580      	push	{r7, lr}
 8015d4a:	b088      	sub	sp, #32
 8015d4c:	af00      	add	r7, sp, #0
 8015d4e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015d50:	f3ef 8305 	mrs	r3, IPSR
 8015d54:	617b      	str	r3, [r7, #20]
  return(result);
 8015d56:	697b      	ldr	r3, [r7, #20]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10f      	bne.n	8015d7c <osDelayUntil+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015d5c:	f3ef 8310 	mrs	r3, PRIMASK
 8015d60:	613b      	str	r3, [r7, #16]
  return(result);
 8015d62:	693b      	ldr	r3, [r7, #16]
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d105      	bne.n	8015d74 <osDelayUntil+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015d68:	f3ef 8311 	mrs	r3, BASEPRI
 8015d6c:	60fb      	str	r3, [r7, #12]
  return(result);
 8015d6e:	68fb      	ldr	r3, [r7, #12]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d007      	beq.n	8015d84 <osDelayUntil+0x3c>
 8015d74:	4b13      	ldr	r3, [pc, #76]	; (8015dc4 <osDelayUntil+0x7c>)
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	2b02      	cmp	r3, #2
 8015d7a:	d103      	bne.n	8015d84 <osDelayUntil+0x3c>
    stat = osErrorISR;
 8015d7c:	f06f 0305 	mvn.w	r3, #5
 8015d80:	61fb      	str	r3, [r7, #28]
 8015d82:	e019      	b.n	8015db8 <osDelayUntil+0x70>
  }
  else {
    stat = osOK;
 8015d84:	2300      	movs	r3, #0
 8015d86:	61fb      	str	r3, [r7, #28]
    tcnt = xTaskGetTickCount();
 8015d88:	f002 f9a6 	bl	80180d8 <xTaskGetTickCount>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8015d90:	68bb      	ldr	r3, [r7, #8]
 8015d92:	687a      	ldr	r2, [r7, #4]
 8015d94:	1ad3      	subs	r3, r2, r3
 8015d96:	61bb      	str	r3, [r7, #24]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8015d98:	69bb      	ldr	r3, [r7, #24]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d009      	beq.n	8015db2 <osDelayUntil+0x6a>
 8015d9e:	69bb      	ldr	r3, [r7, #24]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	db06      	blt.n	8015db2 <osDelayUntil+0x6a>
      vTaskDelayUntil (&tcnt, delay);
 8015da4:	f107 0308 	add.w	r3, r7, #8
 8015da8:	69b9      	ldr	r1, [r7, #24]
 8015daa:	4618      	mov	r0, r3
 8015dac:	f001 ffca 	bl	8017d44 <vTaskDelayUntil>
 8015db0:	e002      	b.n	8015db8 <osDelayUntil+0x70>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8015db2:	f06f 0303 	mvn.w	r3, #3
 8015db6:	61fb      	str	r3, [r7, #28]
    }
  }

  return (stat);
 8015db8:	69fb      	ldr	r3, [r7, #28]
}
 8015dba:	4618      	mov	r0, r3
 8015dbc:	3720      	adds	r7, #32
 8015dbe:	46bd      	mov	sp, r7
 8015dc0:	bd80      	pop	{r7, pc}
 8015dc2:	bf00      	nop
 8015dc4:	20000374 	.word	0x20000374

08015dc8 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b08a      	sub	sp, #40	; 0x28
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015dd4:	f3ef 8305 	mrs	r3, IPSR
 8015dd8:	613b      	str	r3, [r7, #16]
  return(result);
 8015dda:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	f040 8085 	bne.w	8015eec <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015de2:	f3ef 8310 	mrs	r3, PRIMASK
 8015de6:	60fb      	str	r3, [r7, #12]
  return(result);
 8015de8:	68fb      	ldr	r3, [r7, #12]
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d105      	bne.n	8015dfa <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015dee:	f3ef 8311 	mrs	r3, BASEPRI
 8015df2:	60bb      	str	r3, [r7, #8]
  return(result);
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d003      	beq.n	8015e02 <osMutexNew+0x3a>
 8015dfa:	4b3f      	ldr	r3, [pc, #252]	; (8015ef8 <osMutexNew+0x130>)
 8015dfc:	681b      	ldr	r3, [r3, #0]
 8015dfe:	2b02      	cmp	r3, #2
 8015e00:	d074      	beq.n	8015eec <osMutexNew+0x124>
    if (attr != NULL) {
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d003      	beq.n	8015e10 <osMutexNew+0x48>
      type = attr->attr_bits;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	685b      	ldr	r3, [r3, #4]
 8015e0c:	623b      	str	r3, [r7, #32]
 8015e0e:	e001      	b.n	8015e14 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8015e10:	2300      	movs	r3, #0
 8015e12:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8015e14:	6a3b      	ldr	r3, [r7, #32]
 8015e16:	f003 0301 	and.w	r3, r3, #1
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d002      	beq.n	8015e24 <osMutexNew+0x5c>
      rmtx = 1U;
 8015e1e:	2301      	movs	r3, #1
 8015e20:	61fb      	str	r3, [r7, #28]
 8015e22:	e001      	b.n	8015e28 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8015e24:	2300      	movs	r3, #0
 8015e26:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8015e28:	6a3b      	ldr	r3, [r7, #32]
 8015e2a:	f003 0308 	and.w	r3, r3, #8
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d15c      	bne.n	8015eec <osMutexNew+0x124>
      mem = -1;
 8015e32:	f04f 33ff 	mov.w	r3, #4294967295
 8015e36:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	2b00      	cmp	r3, #0
 8015e3c:	d015      	beq.n	8015e6a <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	689b      	ldr	r3, [r3, #8]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d006      	beq.n	8015e54 <osMutexNew+0x8c>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	68db      	ldr	r3, [r3, #12]
 8015e4a:	2b4f      	cmp	r3, #79	; 0x4f
 8015e4c:	d902      	bls.n	8015e54 <osMutexNew+0x8c>
          mem = 1;
 8015e4e:	2301      	movs	r3, #1
 8015e50:	61bb      	str	r3, [r7, #24]
 8015e52:	e00c      	b.n	8015e6e <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	689b      	ldr	r3, [r3, #8]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d108      	bne.n	8015e6e <osMutexNew+0xa6>
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	68db      	ldr	r3, [r3, #12]
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d104      	bne.n	8015e6e <osMutexNew+0xa6>
            mem = 0;
 8015e64:	2300      	movs	r3, #0
 8015e66:	61bb      	str	r3, [r7, #24]
 8015e68:	e001      	b.n	8015e6e <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8015e6a:	2300      	movs	r3, #0
 8015e6c:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8015e6e:	69bb      	ldr	r3, [r7, #24]
 8015e70:	2b01      	cmp	r3, #1
 8015e72:	d112      	bne.n	8015e9a <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8015e74:	69fb      	ldr	r3, [r7, #28]
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d007      	beq.n	8015e8a <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	689b      	ldr	r3, [r3, #8]
 8015e7e:	4619      	mov	r1, r3
 8015e80:	2004      	movs	r0, #4
 8015e82:	f000 fe4c 	bl	8016b1e <xQueueCreateMutexStatic>
 8015e86:	6278      	str	r0, [r7, #36]	; 0x24
 8015e88:	e016      	b.n	8015eb8 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	689b      	ldr	r3, [r3, #8]
 8015e8e:	4619      	mov	r1, r3
 8015e90:	2001      	movs	r0, #1
 8015e92:	f000 fe44 	bl	8016b1e <xQueueCreateMutexStatic>
 8015e96:	6278      	str	r0, [r7, #36]	; 0x24
 8015e98:	e00e      	b.n	8015eb8 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8015e9a:	69bb      	ldr	r3, [r7, #24]
 8015e9c:	2b00      	cmp	r3, #0
 8015e9e:	d10b      	bne.n	8015eb8 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 8015ea0:	69fb      	ldr	r3, [r7, #28]
 8015ea2:	2b00      	cmp	r3, #0
 8015ea4:	d004      	beq.n	8015eb0 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8015ea6:	2004      	movs	r0, #4
 8015ea8:	f000 fe21 	bl	8016aee <xQueueCreateMutex>
 8015eac:	6278      	str	r0, [r7, #36]	; 0x24
 8015eae:	e003      	b.n	8015eb8 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 8015eb0:	2001      	movs	r0, #1
 8015eb2:	f000 fe1c 	bl	8016aee <xQueueCreateMutex>
 8015eb6:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8015eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d00c      	beq.n	8015ed8 <osMutexNew+0x110>
        if (attr != NULL) {
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d003      	beq.n	8015ecc <osMutexNew+0x104>
          name = attr->name;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	681b      	ldr	r3, [r3, #0]
 8015ec8:	617b      	str	r3, [r7, #20]
 8015eca:	e001      	b.n	8015ed0 <osMutexNew+0x108>
        } else {
          name = NULL;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8015ed0:	6979      	ldr	r1, [r7, #20]
 8015ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015ed4:	f001 fd0a 	bl	80178ec <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8015ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d006      	beq.n	8015eec <osMutexNew+0x124>
 8015ede:	69fb      	ldr	r3, [r7, #28]
 8015ee0:	2b00      	cmp	r3, #0
 8015ee2:	d003      	beq.n	8015eec <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8015ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee6:	f043 0301 	orr.w	r3, r3, #1
 8015eea:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8015eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015eee:	4618      	mov	r0, r3
 8015ef0:	3728      	adds	r7, #40	; 0x28
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	20000374 	.word	0x20000374

08015efc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b088      	sub	sp, #32
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
 8015f04:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	f023 0301 	bic.w	r3, r3, #1
 8015f0c:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	f003 0301 	and.w	r3, r3, #1
 8015f14:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8015f16:	2300      	movs	r3, #0
 8015f18:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015f1a:	f3ef 8305 	mrs	r3, IPSR
 8015f1e:	613b      	str	r3, [r7, #16]
  return(result);
 8015f20:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d10f      	bne.n	8015f46 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015f26:	f3ef 8310 	mrs	r3, PRIMASK
 8015f2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8015f2c:	68fb      	ldr	r3, [r7, #12]
 8015f2e:	2b00      	cmp	r3, #0
 8015f30:	d105      	bne.n	8015f3e <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015f32:	f3ef 8311 	mrs	r3, BASEPRI
 8015f36:	60bb      	str	r3, [r7, #8]
  return(result);
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d007      	beq.n	8015f4e <osMutexAcquire+0x52>
 8015f3e:	4b1d      	ldr	r3, [pc, #116]	; (8015fb4 <osMutexAcquire+0xb8>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2b02      	cmp	r3, #2
 8015f44:	d103      	bne.n	8015f4e <osMutexAcquire+0x52>
    stat = osErrorISR;
 8015f46:	f06f 0305 	mvn.w	r3, #5
 8015f4a:	61fb      	str	r3, [r7, #28]
 8015f4c:	e02c      	b.n	8015fa8 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8015f4e:	69bb      	ldr	r3, [r7, #24]
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d103      	bne.n	8015f5c <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8015f54:	f06f 0303 	mvn.w	r3, #3
 8015f58:	61fb      	str	r3, [r7, #28]
 8015f5a:	e025      	b.n	8015fa8 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d011      	beq.n	8015f86 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8015f62:	6839      	ldr	r1, [r7, #0]
 8015f64:	69b8      	ldr	r0, [r7, #24]
 8015f66:	f000 fe2a 	bl	8016bbe <xQueueTakeMutexRecursive>
 8015f6a:	4603      	mov	r3, r0
 8015f6c:	2b01      	cmp	r3, #1
 8015f6e:	d01b      	beq.n	8015fa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8015f70:	683b      	ldr	r3, [r7, #0]
 8015f72:	2b00      	cmp	r3, #0
 8015f74:	d003      	beq.n	8015f7e <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8015f76:	f06f 0301 	mvn.w	r3, #1
 8015f7a:	61fb      	str	r3, [r7, #28]
 8015f7c:	e014      	b.n	8015fa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8015f7e:	f06f 0302 	mvn.w	r3, #2
 8015f82:	61fb      	str	r3, [r7, #28]
 8015f84:	e010      	b.n	8015fa8 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8015f86:	6839      	ldr	r1, [r7, #0]
 8015f88:	69b8      	ldr	r0, [r7, #24]
 8015f8a:	f001 f9cf 	bl	801732c <xQueueSemaphoreTake>
 8015f8e:	4603      	mov	r3, r0
 8015f90:	2b01      	cmp	r3, #1
 8015f92:	d009      	beq.n	8015fa8 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8015f94:	683b      	ldr	r3, [r7, #0]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d003      	beq.n	8015fa2 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8015f9a:	f06f 0301 	mvn.w	r3, #1
 8015f9e:	61fb      	str	r3, [r7, #28]
 8015fa0:	e002      	b.n	8015fa8 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 8015fa2:	f06f 0302 	mvn.w	r3, #2
 8015fa6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8015fa8:	69fb      	ldr	r3, [r7, #28]
}
 8015faa:	4618      	mov	r0, r3
 8015fac:	3720      	adds	r7, #32
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	bd80      	pop	{r7, pc}
 8015fb2:	bf00      	nop
 8015fb4:	20000374 	.word	0x20000374

08015fb8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b088      	sub	sp, #32
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f023 0301 	bic.w	r3, r3, #1
 8015fc6:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f003 0301 	and.w	r3, r3, #1
 8015fce:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8015fd4:	f3ef 8305 	mrs	r3, IPSR
 8015fd8:	613b      	str	r3, [r7, #16]
  return(result);
 8015fda:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d10f      	bne.n	8016000 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015fe0:	f3ef 8310 	mrs	r3, PRIMASK
 8015fe4:	60fb      	str	r3, [r7, #12]
  return(result);
 8015fe6:	68fb      	ldr	r3, [r7, #12]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d105      	bne.n	8015ff8 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8015fec:	f3ef 8311 	mrs	r3, BASEPRI
 8015ff0:	60bb      	str	r3, [r7, #8]
  return(result);
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d007      	beq.n	8016008 <osMutexRelease+0x50>
 8015ff8:	4b16      	ldr	r3, [pc, #88]	; (8016054 <osMutexRelease+0x9c>)
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	2b02      	cmp	r3, #2
 8015ffe:	d103      	bne.n	8016008 <osMutexRelease+0x50>
    stat = osErrorISR;
 8016000:	f06f 0305 	mvn.w	r3, #5
 8016004:	61fb      	str	r3, [r7, #28]
 8016006:	e01f      	b.n	8016048 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8016008:	69bb      	ldr	r3, [r7, #24]
 801600a:	2b00      	cmp	r3, #0
 801600c:	d103      	bne.n	8016016 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 801600e:	f06f 0303 	mvn.w	r3, #3
 8016012:	61fb      	str	r3, [r7, #28]
 8016014:	e018      	b.n	8016048 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8016016:	697b      	ldr	r3, [r7, #20]
 8016018:	2b00      	cmp	r3, #0
 801601a:	d009      	beq.n	8016030 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 801601c:	69b8      	ldr	r0, [r7, #24]
 801601e:	f000 fd99 	bl	8016b54 <xQueueGiveMutexRecursive>
 8016022:	4603      	mov	r3, r0
 8016024:	2b01      	cmp	r3, #1
 8016026:	d00f      	beq.n	8016048 <osMutexRelease+0x90>
        stat = osErrorResource;
 8016028:	f06f 0302 	mvn.w	r3, #2
 801602c:	61fb      	str	r3, [r7, #28]
 801602e:	e00b      	b.n	8016048 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8016030:	2300      	movs	r3, #0
 8016032:	2200      	movs	r2, #0
 8016034:	2100      	movs	r1, #0
 8016036:	69b8      	ldr	r0, [r7, #24]
 8016038:	f000 fe66 	bl	8016d08 <xQueueGenericSend>
 801603c:	4603      	mov	r3, r0
 801603e:	2b01      	cmp	r3, #1
 8016040:	d002      	beq.n	8016048 <osMutexRelease+0x90>
        stat = osErrorResource;
 8016042:	f06f 0302 	mvn.w	r3, #2
 8016046:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8016048:	69fb      	ldr	r3, [r7, #28]
}
 801604a:	4618      	mov	r0, r3
 801604c:	3720      	adds	r7, #32
 801604e:	46bd      	mov	sp, r7
 8016050:	bd80      	pop	{r7, pc}
 8016052:	bf00      	nop
 8016054:	20000374 	.word	0x20000374

08016058 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8016058:	b580      	push	{r7, lr}
 801605a:	b08c      	sub	sp, #48	; 0x30
 801605c:	af02      	add	r7, sp, #8
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8016064:	2300      	movs	r3, #0
 8016066:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016068:	f3ef 8305 	mrs	r3, IPSR
 801606c:	61bb      	str	r3, [r7, #24]
  return(result);
 801606e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8016070:	2b00      	cmp	r3, #0
 8016072:	f040 8087 	bne.w	8016184 <osSemaphoreNew+0x12c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016076:	f3ef 8310 	mrs	r3, PRIMASK
 801607a:	617b      	str	r3, [r7, #20]
  return(result);
 801607c:	697b      	ldr	r3, [r7, #20]
 801607e:	2b00      	cmp	r3, #0
 8016080:	d105      	bne.n	801608e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016082:	f3ef 8311 	mrs	r3, BASEPRI
 8016086:	613b      	str	r3, [r7, #16]
  return(result);
 8016088:	693b      	ldr	r3, [r7, #16]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d003      	beq.n	8016096 <osSemaphoreNew+0x3e>
 801608e:	4b40      	ldr	r3, [pc, #256]	; (8016190 <osSemaphoreNew+0x138>)
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	2b02      	cmp	r3, #2
 8016094:	d076      	beq.n	8016184 <osSemaphoreNew+0x12c>
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	2b00      	cmp	r3, #0
 801609a:	d073      	beq.n	8016184 <osSemaphoreNew+0x12c>
 801609c:	68ba      	ldr	r2, [r7, #8]
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	429a      	cmp	r2, r3
 80160a2:	d86f      	bhi.n	8016184 <osSemaphoreNew+0x12c>
    mem = -1;
 80160a4:	f04f 33ff 	mov.w	r3, #4294967295
 80160a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80160aa:	687b      	ldr	r3, [r7, #4]
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d015      	beq.n	80160dc <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	689b      	ldr	r3, [r3, #8]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d006      	beq.n	80160c6 <osSemaphoreNew+0x6e>
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	68db      	ldr	r3, [r3, #12]
 80160bc:	2b4f      	cmp	r3, #79	; 0x4f
 80160be:	d902      	bls.n	80160c6 <osSemaphoreNew+0x6e>
        mem = 1;
 80160c0:	2301      	movs	r3, #1
 80160c2:	623b      	str	r3, [r7, #32]
 80160c4:	e00c      	b.n	80160e0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80160c6:	687b      	ldr	r3, [r7, #4]
 80160c8:	689b      	ldr	r3, [r3, #8]
 80160ca:	2b00      	cmp	r3, #0
 80160cc:	d108      	bne.n	80160e0 <osSemaphoreNew+0x88>
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	68db      	ldr	r3, [r3, #12]
 80160d2:	2b00      	cmp	r3, #0
 80160d4:	d104      	bne.n	80160e0 <osSemaphoreNew+0x88>
          mem = 0;
 80160d6:	2300      	movs	r3, #0
 80160d8:	623b      	str	r3, [r7, #32]
 80160da:	e001      	b.n	80160e0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80160dc:	2300      	movs	r3, #0
 80160de:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80160e0:	6a3b      	ldr	r3, [r7, #32]
 80160e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80160e6:	d04d      	beq.n	8016184 <osSemaphoreNew+0x12c>
      if (max_count == 1U) {
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	2b01      	cmp	r3, #1
 80160ec:	d129      	bne.n	8016142 <osSemaphoreNew+0xea>
        if (mem == 1) {
 80160ee:	6a3b      	ldr	r3, [r7, #32]
 80160f0:	2b01      	cmp	r3, #1
 80160f2:	d10b      	bne.n	801610c <osSemaphoreNew+0xb4>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	689a      	ldr	r2, [r3, #8]
 80160f8:	2303      	movs	r3, #3
 80160fa:	9300      	str	r3, [sp, #0]
 80160fc:	4613      	mov	r3, r2
 80160fe:	2200      	movs	r2, #0
 8016100:	2100      	movs	r1, #0
 8016102:	2001      	movs	r0, #1
 8016104:	f000 fbf8 	bl	80168f8 <xQueueGenericCreateStatic>
 8016108:	6278      	str	r0, [r7, #36]	; 0x24
 801610a:	e005      	b.n	8016118 <osSemaphoreNew+0xc0>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 801610c:	2203      	movs	r2, #3
 801610e:	2100      	movs	r1, #0
 8016110:	2001      	movs	r0, #1
 8016112:	f000 fc6e 	bl	80169f2 <xQueueGenericCreate>
 8016116:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8016118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611a:	2b00      	cmp	r3, #0
 801611c:	d022      	beq.n	8016164 <osSemaphoreNew+0x10c>
 801611e:	68bb      	ldr	r3, [r7, #8]
 8016120:	2b00      	cmp	r3, #0
 8016122:	d01f      	beq.n	8016164 <osSemaphoreNew+0x10c>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8016124:	2300      	movs	r3, #0
 8016126:	2200      	movs	r2, #0
 8016128:	2100      	movs	r1, #0
 801612a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801612c:	f000 fdec 	bl	8016d08 <xQueueGenericSend>
 8016130:	4603      	mov	r3, r0
 8016132:	2b01      	cmp	r3, #1
 8016134:	d016      	beq.n	8016164 <osSemaphoreNew+0x10c>
            vSemaphoreDelete (hSemaphore);
 8016136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016138:	f001 fa8b 	bl	8017652 <vQueueDelete>
            hSemaphore = NULL;
 801613c:	2300      	movs	r3, #0
 801613e:	627b      	str	r3, [r7, #36]	; 0x24
 8016140:	e010      	b.n	8016164 <osSemaphoreNew+0x10c>
          }
        }
      }
      else {
        if (mem == 1) {
 8016142:	6a3b      	ldr	r3, [r7, #32]
 8016144:	2b01      	cmp	r3, #1
 8016146:	d108      	bne.n	801615a <osSemaphoreNew+0x102>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	689b      	ldr	r3, [r3, #8]
 801614c:	461a      	mov	r2, r3
 801614e:	68b9      	ldr	r1, [r7, #8]
 8016150:	68f8      	ldr	r0, [r7, #12]
 8016152:	f000 fd6b 	bl	8016c2c <xQueueCreateCountingSemaphoreStatic>
 8016156:	6278      	str	r0, [r7, #36]	; 0x24
 8016158:	e004      	b.n	8016164 <osSemaphoreNew+0x10c>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801615a:	68b9      	ldr	r1, [r7, #8]
 801615c:	68f8      	ldr	r0, [r7, #12]
 801615e:	f000 fd9e 	bl	8016c9e <xQueueCreateCountingSemaphore>
 8016162:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8016164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016166:	2b00      	cmp	r3, #0
 8016168:	d00c      	beq.n	8016184 <osSemaphoreNew+0x12c>
        if (attr != NULL) {
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	2b00      	cmp	r3, #0
 801616e:	d003      	beq.n	8016178 <osSemaphoreNew+0x120>
          name = attr->name;
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	61fb      	str	r3, [r7, #28]
 8016176:	e001      	b.n	801617c <osSemaphoreNew+0x124>
        } else {
          name = NULL;
 8016178:	2300      	movs	r3, #0
 801617a:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801617c:	69f9      	ldr	r1, [r7, #28]
 801617e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016180:	f001 fbb4 	bl	80178ec <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8016184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016186:	4618      	mov	r0, r3
 8016188:	3728      	adds	r7, #40	; 0x28
 801618a:	46bd      	mov	sp, r7
 801618c:	bd80      	pop	{r7, pc}
 801618e:	bf00      	nop
 8016190:	20000374 	.word	0x20000374

08016194 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8016194:	b580      	push	{r7, lr}
 8016196:	b088      	sub	sp, #32
 8016198:	af00      	add	r7, sp, #0
 801619a:	6078      	str	r0, [r7, #4]
 801619c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801619e:	687b      	ldr	r3, [r7, #4]
 80161a0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80161a2:	2300      	movs	r3, #0
 80161a4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80161a6:	69bb      	ldr	r3, [r7, #24]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d103      	bne.n	80161b4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80161ac:	f06f 0303 	mvn.w	r3, #3
 80161b0:	61fb      	str	r3, [r7, #28]
 80161b2:	e04b      	b.n	801624c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80161b4:	f3ef 8305 	mrs	r3, IPSR
 80161b8:	617b      	str	r3, [r7, #20]
  return(result);
 80161ba:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d10f      	bne.n	80161e0 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80161c0:	f3ef 8310 	mrs	r3, PRIMASK
 80161c4:	613b      	str	r3, [r7, #16]
  return(result);
 80161c6:	693b      	ldr	r3, [r7, #16]
 80161c8:	2b00      	cmp	r3, #0
 80161ca:	d105      	bne.n	80161d8 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80161cc:	f3ef 8311 	mrs	r3, BASEPRI
 80161d0:	60fb      	str	r3, [r7, #12]
  return(result);
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d026      	beq.n	8016226 <osSemaphoreAcquire+0x92>
 80161d8:	4b1f      	ldr	r3, [pc, #124]	; (8016258 <osSemaphoreAcquire+0xc4>)
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	2b02      	cmp	r3, #2
 80161de:	d122      	bne.n	8016226 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80161e0:	683b      	ldr	r3, [r7, #0]
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d003      	beq.n	80161ee <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80161e6:	f06f 0303 	mvn.w	r3, #3
 80161ea:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80161ec:	e02d      	b.n	801624a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80161ee:	2300      	movs	r3, #0
 80161f0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80161f2:	f107 0308 	add.w	r3, r7, #8
 80161f6:	461a      	mov	r2, r3
 80161f8:	2100      	movs	r1, #0
 80161fa:	69b8      	ldr	r0, [r7, #24]
 80161fc:	f001 f9a6 	bl	801754c <xQueueReceiveFromISR>
 8016200:	4603      	mov	r3, r0
 8016202:	2b01      	cmp	r3, #1
 8016204:	d003      	beq.n	801620e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8016206:	f06f 0302 	mvn.w	r3, #2
 801620a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 801620c:	e01d      	b.n	801624a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 801620e:	68bb      	ldr	r3, [r7, #8]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d01a      	beq.n	801624a <osSemaphoreAcquire+0xb6>
 8016214:	4b11      	ldr	r3, [pc, #68]	; (801625c <osSemaphoreAcquire+0xc8>)
 8016216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801621a:	601a      	str	r2, [r3, #0]
 801621c:	f3bf 8f4f 	dsb	sy
 8016220:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8016224:	e011      	b.n	801624a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8016226:	6839      	ldr	r1, [r7, #0]
 8016228:	69b8      	ldr	r0, [r7, #24]
 801622a:	f001 f87f 	bl	801732c <xQueueSemaphoreTake>
 801622e:	4603      	mov	r3, r0
 8016230:	2b01      	cmp	r3, #1
 8016232:	d00b      	beq.n	801624c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8016234:	683b      	ldr	r3, [r7, #0]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d003      	beq.n	8016242 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 801623a:	f06f 0301 	mvn.w	r3, #1
 801623e:	61fb      	str	r3, [r7, #28]
 8016240:	e004      	b.n	801624c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8016242:	f06f 0302 	mvn.w	r3, #2
 8016246:	61fb      	str	r3, [r7, #28]
 8016248:	e000      	b.n	801624c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 801624a:	bf00      	nop
      }
    }
  }

  return (stat);
 801624c:	69fb      	ldr	r3, [r7, #28]
}
 801624e:	4618      	mov	r0, r3
 8016250:	3720      	adds	r7, #32
 8016252:	46bd      	mov	sp, r7
 8016254:	bd80      	pop	{r7, pc}
 8016256:	bf00      	nop
 8016258:	20000374 	.word	0x20000374
 801625c:	e000ed04 	.word	0xe000ed04

08016260 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8016260:	b580      	push	{r7, lr}
 8016262:	b088      	sub	sp, #32
 8016264:	af00      	add	r7, sp, #0
 8016266:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801626c:	2300      	movs	r3, #0
 801626e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8016270:	69bb      	ldr	r3, [r7, #24]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d103      	bne.n	801627e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8016276:	f06f 0303 	mvn.w	r3, #3
 801627a:	61fb      	str	r3, [r7, #28]
 801627c:	e03e      	b.n	80162fc <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801627e:	f3ef 8305 	mrs	r3, IPSR
 8016282:	617b      	str	r3, [r7, #20]
  return(result);
 8016284:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8016286:	2b00      	cmp	r3, #0
 8016288:	d10f      	bne.n	80162aa <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801628a:	f3ef 8310 	mrs	r3, PRIMASK
 801628e:	613b      	str	r3, [r7, #16]
  return(result);
 8016290:	693b      	ldr	r3, [r7, #16]
 8016292:	2b00      	cmp	r3, #0
 8016294:	d105      	bne.n	80162a2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016296:	f3ef 8311 	mrs	r3, BASEPRI
 801629a:	60fb      	str	r3, [r7, #12]
  return(result);
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d01e      	beq.n	80162e0 <osSemaphoreRelease+0x80>
 80162a2:	4b19      	ldr	r3, [pc, #100]	; (8016308 <osSemaphoreRelease+0xa8>)
 80162a4:	681b      	ldr	r3, [r3, #0]
 80162a6:	2b02      	cmp	r3, #2
 80162a8:	d11a      	bne.n	80162e0 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 80162aa:	2300      	movs	r3, #0
 80162ac:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80162ae:	f107 0308 	add.w	r3, r7, #8
 80162b2:	4619      	mov	r1, r3
 80162b4:	69b8      	ldr	r0, [r7, #24]
 80162b6:	f000 fec5 	bl	8017044 <xQueueGiveFromISR>
 80162ba:	4603      	mov	r3, r0
 80162bc:	2b01      	cmp	r3, #1
 80162be:	d003      	beq.n	80162c8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80162c0:	f06f 0302 	mvn.w	r3, #2
 80162c4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80162c6:	e018      	b.n	80162fa <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80162c8:	68bb      	ldr	r3, [r7, #8]
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	d015      	beq.n	80162fa <osSemaphoreRelease+0x9a>
 80162ce:	4b0f      	ldr	r3, [pc, #60]	; (801630c <osSemaphoreRelease+0xac>)
 80162d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80162d4:	601a      	str	r2, [r3, #0]
 80162d6:	f3bf 8f4f 	dsb	sy
 80162da:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80162de:	e00c      	b.n	80162fa <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80162e0:	2300      	movs	r3, #0
 80162e2:	2200      	movs	r2, #0
 80162e4:	2100      	movs	r1, #0
 80162e6:	69b8      	ldr	r0, [r7, #24]
 80162e8:	f000 fd0e 	bl	8016d08 <xQueueGenericSend>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b01      	cmp	r3, #1
 80162f0:	d004      	beq.n	80162fc <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80162f2:	f06f 0302 	mvn.w	r3, #2
 80162f6:	61fb      	str	r3, [r7, #28]
 80162f8:	e000      	b.n	80162fc <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80162fa:	bf00      	nop
    }
  }

  return (stat);
 80162fc:	69fb      	ldr	r3, [r7, #28]
}
 80162fe:	4618      	mov	r0, r3
 8016300:	3720      	adds	r7, #32
 8016302:	46bd      	mov	sp, r7
 8016304:	bd80      	pop	{r7, pc}
 8016306:	bf00      	nop
 8016308:	20000374 	.word	0x20000374
 801630c:	e000ed04 	.word	0xe000ed04

08016310 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8016310:	b580      	push	{r7, lr}
 8016312:	b088      	sub	sp, #32
 8016314:	af00      	add	r7, sp, #0
 8016316:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801631c:	f3ef 8305 	mrs	r3, IPSR
 8016320:	617b      	str	r3, [r7, #20]
  return(result);
 8016322:	697b      	ldr	r3, [r7, #20]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8016324:	2b00      	cmp	r3, #0
 8016326:	d10f      	bne.n	8016348 <osSemaphoreDelete+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016328:	f3ef 8310 	mrs	r3, PRIMASK
 801632c:	613b      	str	r3, [r7, #16]
  return(result);
 801632e:	693b      	ldr	r3, [r7, #16]
 8016330:	2b00      	cmp	r3, #0
 8016332:	d105      	bne.n	8016340 <osSemaphoreDelete+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8016334:	f3ef 8311 	mrs	r3, BASEPRI
 8016338:	60fb      	str	r3, [r7, #12]
  return(result);
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	2b00      	cmp	r3, #0
 801633e:	d007      	beq.n	8016350 <osSemaphoreDelete+0x40>
 8016340:	4b0d      	ldr	r3, [pc, #52]	; (8016378 <osSemaphoreDelete+0x68>)
 8016342:	681b      	ldr	r3, [r3, #0]
 8016344:	2b02      	cmp	r3, #2
 8016346:	d103      	bne.n	8016350 <osSemaphoreDelete+0x40>
    stat = osErrorISR;
 8016348:	f06f 0305 	mvn.w	r3, #5
 801634c:	61fb      	str	r3, [r7, #28]
 801634e:	e00e      	b.n	801636e <osSemaphoreDelete+0x5e>
  }
  else if (hSemaphore == NULL) {
 8016350:	69bb      	ldr	r3, [r7, #24]
 8016352:	2b00      	cmp	r3, #0
 8016354:	d103      	bne.n	801635e <osSemaphoreDelete+0x4e>
    stat = osErrorParameter;
 8016356:	f06f 0303 	mvn.w	r3, #3
 801635a:	61fb      	str	r3, [r7, #28]
 801635c:	e007      	b.n	801636e <osSemaphoreDelete+0x5e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801635e:	69b8      	ldr	r0, [r7, #24]
 8016360:	f001 faec 	bl	801793c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8016364:	2300      	movs	r3, #0
 8016366:	61fb      	str	r3, [r7, #28]
    vSemaphoreDelete (hSemaphore);
 8016368:	69b8      	ldr	r0, [r7, #24]
 801636a:	f001 f972 	bl	8017652 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801636e:	69fb      	ldr	r3, [r7, #28]
}
 8016370:	4618      	mov	r0, r3
 8016372:	3720      	adds	r7, #32
 8016374:	46bd      	mov	sp, r7
 8016376:	bd80      	pop	{r7, pc}
 8016378:	20000374 	.word	0x20000374

0801637c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 801637c:	b580      	push	{r7, lr}
 801637e:	b08c      	sub	sp, #48	; 0x30
 8016380:	af02      	add	r7, sp, #8
 8016382:	60f8      	str	r0, [r7, #12]
 8016384:	60b9      	str	r1, [r7, #8]
 8016386:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8016388:	2300      	movs	r3, #0
 801638a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801638c:	f3ef 8305 	mrs	r3, IPSR
 8016390:	61bb      	str	r3, [r7, #24]
  return(result);
 8016392:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8016394:	2b00      	cmp	r3, #0
 8016396:	d170      	bne.n	801647a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016398:	f3ef 8310 	mrs	r3, PRIMASK
 801639c:	617b      	str	r3, [r7, #20]
  return(result);
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d105      	bne.n	80163b0 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80163a4:	f3ef 8311 	mrs	r3, BASEPRI
 80163a8:	613b      	str	r3, [r7, #16]
  return(result);
 80163aa:	693b      	ldr	r3, [r7, #16]
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d003      	beq.n	80163b8 <osMessageQueueNew+0x3c>
 80163b0:	4b34      	ldr	r3, [pc, #208]	; (8016484 <osMessageQueueNew+0x108>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	2b02      	cmp	r3, #2
 80163b6:	d060      	beq.n	801647a <osMessageQueueNew+0xfe>
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d05d      	beq.n	801647a <osMessageQueueNew+0xfe>
 80163be:	68bb      	ldr	r3, [r7, #8]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d05a      	beq.n	801647a <osMessageQueueNew+0xfe>
    mem = -1;
 80163c4:	f04f 33ff 	mov.w	r3, #4294967295
 80163c8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d029      	beq.n	8016424 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	689b      	ldr	r3, [r3, #8]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d012      	beq.n	80163fe <osMessageQueueNew+0x82>
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	68db      	ldr	r3, [r3, #12]
 80163dc:	2b4f      	cmp	r3, #79	; 0x4f
 80163de:	d90e      	bls.n	80163fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d00a      	beq.n	80163fe <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80163e8:	687b      	ldr	r3, [r7, #4]
 80163ea:	695a      	ldr	r2, [r3, #20]
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	68b9      	ldr	r1, [r7, #8]
 80163f0:	fb01 f303 	mul.w	r3, r1, r3
 80163f4:	429a      	cmp	r2, r3
 80163f6:	d302      	bcc.n	80163fe <osMessageQueueNew+0x82>
        mem = 1;
 80163f8:	2301      	movs	r3, #1
 80163fa:	623b      	str	r3, [r7, #32]
 80163fc:	e014      	b.n	8016428 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80163fe:	687b      	ldr	r3, [r7, #4]
 8016400:	689b      	ldr	r3, [r3, #8]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d110      	bne.n	8016428 <osMessageQueueNew+0xac>
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	68db      	ldr	r3, [r3, #12]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d10c      	bne.n	8016428 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801640e:	687b      	ldr	r3, [r7, #4]
 8016410:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8016412:	2b00      	cmp	r3, #0
 8016414:	d108      	bne.n	8016428 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8016416:	687b      	ldr	r3, [r7, #4]
 8016418:	695b      	ldr	r3, [r3, #20]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d104      	bne.n	8016428 <osMessageQueueNew+0xac>
          mem = 0;
 801641e:	2300      	movs	r3, #0
 8016420:	623b      	str	r3, [r7, #32]
 8016422:	e001      	b.n	8016428 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8016424:	2300      	movs	r3, #0
 8016426:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8016428:	6a3b      	ldr	r3, [r7, #32]
 801642a:	2b01      	cmp	r3, #1
 801642c:	d10c      	bne.n	8016448 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	691a      	ldr	r2, [r3, #16]
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	6899      	ldr	r1, [r3, #8]
 8016436:	2300      	movs	r3, #0
 8016438:	9300      	str	r3, [sp, #0]
 801643a:	460b      	mov	r3, r1
 801643c:	68b9      	ldr	r1, [r7, #8]
 801643e:	68f8      	ldr	r0, [r7, #12]
 8016440:	f000 fa5a 	bl	80168f8 <xQueueGenericCreateStatic>
 8016444:	6278      	str	r0, [r7, #36]	; 0x24
 8016446:	e008      	b.n	801645a <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8016448:	6a3b      	ldr	r3, [r7, #32]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d105      	bne.n	801645a <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 801644e:	2200      	movs	r2, #0
 8016450:	68b9      	ldr	r1, [r7, #8]
 8016452:	68f8      	ldr	r0, [r7, #12]
 8016454:	f000 facd 	bl	80169f2 <xQueueGenericCreate>
 8016458:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 801645a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801645c:	2b00      	cmp	r3, #0
 801645e:	d00c      	beq.n	801647a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2b00      	cmp	r3, #0
 8016464:	d003      	beq.n	801646e <osMessageQueueNew+0xf2>
        name = attr->name;
 8016466:	687b      	ldr	r3, [r7, #4]
 8016468:	681b      	ldr	r3, [r3, #0]
 801646a:	61fb      	str	r3, [r7, #28]
 801646c:	e001      	b.n	8016472 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 801646e:	2300      	movs	r3, #0
 8016470:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8016472:	69f9      	ldr	r1, [r7, #28]
 8016474:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016476:	f001 fa39 	bl	80178ec <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 801647a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801647c:	4618      	mov	r0, r3
 801647e:	3728      	adds	r7, #40	; 0x28
 8016480:	46bd      	mov	sp, r7
 8016482:	bd80      	pop	{r7, pc}
 8016484:	20000374 	.word	0x20000374

08016488 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8016488:	b580      	push	{r7, lr}
 801648a:	b08a      	sub	sp, #40	; 0x28
 801648c:	af00      	add	r7, sp, #0
 801648e:	60f8      	str	r0, [r7, #12]
 8016490:	60b9      	str	r1, [r7, #8]
 8016492:	603b      	str	r3, [r7, #0]
 8016494:	4613      	mov	r3, r2
 8016496:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8016498:	68fb      	ldr	r3, [r7, #12]
 801649a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801649c:	2300      	movs	r3, #0
 801649e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80164a0:	f3ef 8305 	mrs	r3, IPSR
 80164a4:	61fb      	str	r3, [r7, #28]
  return(result);
 80164a6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80164a8:	2b00      	cmp	r3, #0
 80164aa:	d10f      	bne.n	80164cc <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80164ac:	f3ef 8310 	mrs	r3, PRIMASK
 80164b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80164b2:	69bb      	ldr	r3, [r7, #24]
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d105      	bne.n	80164c4 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80164b8:	f3ef 8311 	mrs	r3, BASEPRI
 80164bc:	617b      	str	r3, [r7, #20]
  return(result);
 80164be:	697b      	ldr	r3, [r7, #20]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d02c      	beq.n	801651e <osMessageQueuePut+0x96>
 80164c4:	4b28      	ldr	r3, [pc, #160]	; (8016568 <osMessageQueuePut+0xe0>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	2b02      	cmp	r3, #2
 80164ca:	d128      	bne.n	801651e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80164cc:	6a3b      	ldr	r3, [r7, #32]
 80164ce:	2b00      	cmp	r3, #0
 80164d0:	d005      	beq.n	80164de <osMessageQueuePut+0x56>
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d002      	beq.n	80164de <osMessageQueuePut+0x56>
 80164d8:	683b      	ldr	r3, [r7, #0]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d003      	beq.n	80164e6 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80164de:	f06f 0303 	mvn.w	r3, #3
 80164e2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80164e4:	e039      	b.n	801655a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 80164e6:	2300      	movs	r3, #0
 80164e8:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80164ea:	f107 0210 	add.w	r2, r7, #16
 80164ee:	2300      	movs	r3, #0
 80164f0:	68b9      	ldr	r1, [r7, #8]
 80164f2:	6a38      	ldr	r0, [r7, #32]
 80164f4:	f000 fd0a 	bl	8016f0c <xQueueGenericSendFromISR>
 80164f8:	4603      	mov	r3, r0
 80164fa:	2b01      	cmp	r3, #1
 80164fc:	d003      	beq.n	8016506 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 80164fe:	f06f 0302 	mvn.w	r3, #2
 8016502:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016504:	e029      	b.n	801655a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8016506:	693b      	ldr	r3, [r7, #16]
 8016508:	2b00      	cmp	r3, #0
 801650a:	d026      	beq.n	801655a <osMessageQueuePut+0xd2>
 801650c:	4b17      	ldr	r3, [pc, #92]	; (801656c <osMessageQueuePut+0xe4>)
 801650e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016512:	601a      	str	r2, [r3, #0]
 8016514:	f3bf 8f4f 	dsb	sy
 8016518:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801651c:	e01d      	b.n	801655a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801651e:	6a3b      	ldr	r3, [r7, #32]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d002      	beq.n	801652a <osMessageQueuePut+0xa2>
 8016524:	68bb      	ldr	r3, [r7, #8]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d103      	bne.n	8016532 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 801652a:	f06f 0303 	mvn.w	r3, #3
 801652e:	627b      	str	r3, [r7, #36]	; 0x24
 8016530:	e014      	b.n	801655c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016532:	2300      	movs	r3, #0
 8016534:	683a      	ldr	r2, [r7, #0]
 8016536:	68b9      	ldr	r1, [r7, #8]
 8016538:	6a38      	ldr	r0, [r7, #32]
 801653a:	f000 fbe5 	bl	8016d08 <xQueueGenericSend>
 801653e:	4603      	mov	r3, r0
 8016540:	2b01      	cmp	r3, #1
 8016542:	d00b      	beq.n	801655c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8016544:	683b      	ldr	r3, [r7, #0]
 8016546:	2b00      	cmp	r3, #0
 8016548:	d003      	beq.n	8016552 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 801654a:	f06f 0301 	mvn.w	r3, #1
 801654e:	627b      	str	r3, [r7, #36]	; 0x24
 8016550:	e004      	b.n	801655c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8016552:	f06f 0302 	mvn.w	r3, #2
 8016556:	627b      	str	r3, [r7, #36]	; 0x24
 8016558:	e000      	b.n	801655c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801655a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 801655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801655e:	4618      	mov	r0, r3
 8016560:	3728      	adds	r7, #40	; 0x28
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	20000374 	.word	0x20000374
 801656c:	e000ed04 	.word	0xe000ed04

08016570 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8016570:	b580      	push	{r7, lr}
 8016572:	b08a      	sub	sp, #40	; 0x28
 8016574:	af00      	add	r7, sp, #0
 8016576:	60f8      	str	r0, [r7, #12]
 8016578:	60b9      	str	r1, [r7, #8]
 801657a:	607a      	str	r2, [r7, #4]
 801657c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8016582:	2300      	movs	r3, #0
 8016584:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8016586:	f3ef 8305 	mrs	r3, IPSR
 801658a:	61fb      	str	r3, [r7, #28]
  return(result);
 801658c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 801658e:	2b00      	cmp	r3, #0
 8016590:	d10f      	bne.n	80165b2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8016592:	f3ef 8310 	mrs	r3, PRIMASK
 8016596:	61bb      	str	r3, [r7, #24]
  return(result);
 8016598:	69bb      	ldr	r3, [r7, #24]
 801659a:	2b00      	cmp	r3, #0
 801659c:	d105      	bne.n	80165aa <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 801659e:	f3ef 8311 	mrs	r3, BASEPRI
 80165a2:	617b      	str	r3, [r7, #20]
  return(result);
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d02c      	beq.n	8016604 <osMessageQueueGet+0x94>
 80165aa:	4b28      	ldr	r3, [pc, #160]	; (801664c <osMessageQueueGet+0xdc>)
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	2b02      	cmp	r3, #2
 80165b0:	d128      	bne.n	8016604 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80165b2:	6a3b      	ldr	r3, [r7, #32]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d005      	beq.n	80165c4 <osMessageQueueGet+0x54>
 80165b8:	68bb      	ldr	r3, [r7, #8]
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d002      	beq.n	80165c4 <osMessageQueueGet+0x54>
 80165be:	683b      	ldr	r3, [r7, #0]
 80165c0:	2b00      	cmp	r3, #0
 80165c2:	d003      	beq.n	80165cc <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80165c4:	f06f 0303 	mvn.w	r3, #3
 80165c8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80165ca:	e038      	b.n	801663e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80165cc:	2300      	movs	r3, #0
 80165ce:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80165d0:	f107 0310 	add.w	r3, r7, #16
 80165d4:	461a      	mov	r2, r3
 80165d6:	68b9      	ldr	r1, [r7, #8]
 80165d8:	6a38      	ldr	r0, [r7, #32]
 80165da:	f000 ffb7 	bl	801754c <xQueueReceiveFromISR>
 80165de:	4603      	mov	r3, r0
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d003      	beq.n	80165ec <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 80165e4:	f06f 0302 	mvn.w	r3, #2
 80165e8:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80165ea:	e028      	b.n	801663e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	2b00      	cmp	r3, #0
 80165f0:	d025      	beq.n	801663e <osMessageQueueGet+0xce>
 80165f2:	4b17      	ldr	r3, [pc, #92]	; (8016650 <osMessageQueueGet+0xe0>)
 80165f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80165f8:	601a      	str	r2, [r3, #0]
 80165fa:	f3bf 8f4f 	dsb	sy
 80165fe:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8016602:	e01c      	b.n	801663e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8016604:	6a3b      	ldr	r3, [r7, #32]
 8016606:	2b00      	cmp	r3, #0
 8016608:	d002      	beq.n	8016610 <osMessageQueueGet+0xa0>
 801660a:	68bb      	ldr	r3, [r7, #8]
 801660c:	2b00      	cmp	r3, #0
 801660e:	d103      	bne.n	8016618 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8016610:	f06f 0303 	mvn.w	r3, #3
 8016614:	627b      	str	r3, [r7, #36]	; 0x24
 8016616:	e013      	b.n	8016640 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8016618:	683a      	ldr	r2, [r7, #0]
 801661a:	68b9      	ldr	r1, [r7, #8]
 801661c:	6a38      	ldr	r0, [r7, #32]
 801661e:	f000 fda3 	bl	8017168 <xQueueReceive>
 8016622:	4603      	mov	r3, r0
 8016624:	2b01      	cmp	r3, #1
 8016626:	d00b      	beq.n	8016640 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8016628:	683b      	ldr	r3, [r7, #0]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d003      	beq.n	8016636 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 801662e:	f06f 0301 	mvn.w	r3, #1
 8016632:	627b      	str	r3, [r7, #36]	; 0x24
 8016634:	e004      	b.n	8016640 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8016636:	f06f 0302 	mvn.w	r3, #2
 801663a:	627b      	str	r3, [r7, #36]	; 0x24
 801663c:	e000      	b.n	8016640 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801663e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8016640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8016642:	4618      	mov	r0, r3
 8016644:	3728      	adds	r7, #40	; 0x28
 8016646:	46bd      	mov	sp, r7
 8016648:	bd80      	pop	{r7, pc}
 801664a:	bf00      	nop
 801664c:	20000374 	.word	0x20000374
 8016650:	e000ed04 	.word	0xe000ed04

08016654 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8016654:	b480      	push	{r7}
 8016656:	b085      	sub	sp, #20
 8016658:	af00      	add	r7, sp, #0
 801665a:	60f8      	str	r0, [r7, #12]
 801665c:	60b9      	str	r1, [r7, #8]
 801665e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8016660:	68fb      	ldr	r3, [r7, #12]
 8016662:	4a07      	ldr	r2, [pc, #28]	; (8016680 <vApplicationGetIdleTaskMemory+0x2c>)
 8016664:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8016666:	68bb      	ldr	r3, [r7, #8]
 8016668:	4a06      	ldr	r2, [pc, #24]	; (8016684 <vApplicationGetIdleTaskMemory+0x30>)
 801666a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	2280      	movs	r2, #128	; 0x80
 8016670:	601a      	str	r2, [r3, #0]
}
 8016672:	bf00      	nop
 8016674:	3714      	adds	r7, #20
 8016676:	46bd      	mov	sp, r7
 8016678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801667c:	4770      	bx	lr
 801667e:	bf00      	nop
 8016680:	20000378 	.word	0x20000378
 8016684:	200003d4 	.word	0x200003d4

08016688 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8016688:	b480      	push	{r7}
 801668a:	b085      	sub	sp, #20
 801668c:	af00      	add	r7, sp, #0
 801668e:	60f8      	str	r0, [r7, #12]
 8016690:	60b9      	str	r1, [r7, #8]
 8016692:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8016694:	68fb      	ldr	r3, [r7, #12]
 8016696:	4a07      	ldr	r2, [pc, #28]	; (80166b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8016698:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801669a:	68bb      	ldr	r3, [r7, #8]
 801669c:	4a06      	ldr	r2, [pc, #24]	; (80166b8 <vApplicationGetTimerTaskMemory+0x30>)
 801669e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80166a6:	601a      	str	r2, [r3, #0]
}
 80166a8:	bf00      	nop
 80166aa:	3714      	adds	r7, #20
 80166ac:	46bd      	mov	sp, r7
 80166ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166b2:	4770      	bx	lr
 80166b4:	200005d4 	.word	0x200005d4
 80166b8:	20000630 	.word	0x20000630

080166bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80166bc:	b480      	push	{r7}
 80166be:	b083      	sub	sp, #12
 80166c0:	af00      	add	r7, sp, #0
 80166c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166c4:	687b      	ldr	r3, [r7, #4]
 80166c6:	f103 0208 	add.w	r2, r3, #8
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	f04f 32ff 	mov.w	r2, #4294967295
 80166d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	f103 0208 	add.w	r2, r3, #8
 80166dc:	687b      	ldr	r3, [r7, #4]
 80166de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	f103 0208 	add.w	r2, r3, #8
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	2200      	movs	r2, #0
 80166ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80166f0:	bf00      	nop
 80166f2:	370c      	adds	r7, #12
 80166f4:	46bd      	mov	sp, r7
 80166f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166fa:	4770      	bx	lr

080166fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80166fc:	b480      	push	{r7}
 80166fe:	b083      	sub	sp, #12
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	2200      	movs	r2, #0
 8016708:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801670a:	bf00      	nop
 801670c:	370c      	adds	r7, #12
 801670e:	46bd      	mov	sp, r7
 8016710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016714:	4770      	bx	lr

08016716 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8016716:	b480      	push	{r7}
 8016718:	b085      	sub	sp, #20
 801671a:	af00      	add	r7, sp, #0
 801671c:	6078      	str	r0, [r7, #4]
 801671e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	685b      	ldr	r3, [r3, #4]
 8016724:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	68fa      	ldr	r2, [r7, #12]
 801672a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801672c:	68fb      	ldr	r3, [r7, #12]
 801672e:	689a      	ldr	r2, [r3, #8]
 8016730:	683b      	ldr	r3, [r7, #0]
 8016732:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8016734:	68fb      	ldr	r3, [r7, #12]
 8016736:	689b      	ldr	r3, [r3, #8]
 8016738:	683a      	ldr	r2, [r7, #0]
 801673a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801673c:	68fb      	ldr	r3, [r7, #12]
 801673e:	683a      	ldr	r2, [r7, #0]
 8016740:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	687a      	ldr	r2, [r7, #4]
 8016746:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8016748:	687b      	ldr	r3, [r7, #4]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	1c5a      	adds	r2, r3, #1
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	601a      	str	r2, [r3, #0]
}
 8016752:	bf00      	nop
 8016754:	3714      	adds	r7, #20
 8016756:	46bd      	mov	sp, r7
 8016758:	f85d 7b04 	ldr.w	r7, [sp], #4
 801675c:	4770      	bx	lr

0801675e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801675e:	b480      	push	{r7}
 8016760:	b085      	sub	sp, #20
 8016762:	af00      	add	r7, sp, #0
 8016764:	6078      	str	r0, [r7, #4]
 8016766:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8016768:	683b      	ldr	r3, [r7, #0]
 801676a:	681b      	ldr	r3, [r3, #0]
 801676c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801676e:	68bb      	ldr	r3, [r7, #8]
 8016770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016774:	d103      	bne.n	801677e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	691b      	ldr	r3, [r3, #16]
 801677a:	60fb      	str	r3, [r7, #12]
 801677c:	e00c      	b.n	8016798 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	3308      	adds	r3, #8
 8016782:	60fb      	str	r3, [r7, #12]
 8016784:	e002      	b.n	801678c <vListInsert+0x2e>
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	685b      	ldr	r3, [r3, #4]
 801678a:	60fb      	str	r3, [r7, #12]
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	685b      	ldr	r3, [r3, #4]
 8016790:	681b      	ldr	r3, [r3, #0]
 8016792:	68ba      	ldr	r2, [r7, #8]
 8016794:	429a      	cmp	r2, r3
 8016796:	d2f6      	bcs.n	8016786 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	685a      	ldr	r2, [r3, #4]
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80167a0:	683b      	ldr	r3, [r7, #0]
 80167a2:	685b      	ldr	r3, [r3, #4]
 80167a4:	683a      	ldr	r2, [r7, #0]
 80167a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80167a8:	683b      	ldr	r3, [r7, #0]
 80167aa:	68fa      	ldr	r2, [r7, #12]
 80167ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80167ae:	68fb      	ldr	r3, [r7, #12]
 80167b0:	683a      	ldr	r2, [r7, #0]
 80167b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80167b4:	683b      	ldr	r3, [r7, #0]
 80167b6:	687a      	ldr	r2, [r7, #4]
 80167b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	1c5a      	adds	r2, r3, #1
 80167c0:	687b      	ldr	r3, [r7, #4]
 80167c2:	601a      	str	r2, [r3, #0]
}
 80167c4:	bf00      	nop
 80167c6:	3714      	adds	r7, #20
 80167c8:	46bd      	mov	sp, r7
 80167ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ce:	4770      	bx	lr

080167d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80167d0:	b480      	push	{r7}
 80167d2:	b085      	sub	sp, #20
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	691b      	ldr	r3, [r3, #16]
 80167dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	685b      	ldr	r3, [r3, #4]
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	6892      	ldr	r2, [r2, #8]
 80167e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	689b      	ldr	r3, [r3, #8]
 80167ec:	687a      	ldr	r2, [r7, #4]
 80167ee:	6852      	ldr	r2, [r2, #4]
 80167f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80167f2:	68fb      	ldr	r3, [r7, #12]
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	687a      	ldr	r2, [r7, #4]
 80167f8:	429a      	cmp	r2, r3
 80167fa:	d103      	bne.n	8016804 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	689a      	ldr	r2, [r3, #8]
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8016804:	687b      	ldr	r3, [r7, #4]
 8016806:	2200      	movs	r2, #0
 8016808:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	1e5a      	subs	r2, r3, #1
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	681b      	ldr	r3, [r3, #0]
}
 8016818:	4618      	mov	r0, r3
 801681a:	3714      	adds	r7, #20
 801681c:	46bd      	mov	sp, r7
 801681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016822:	4770      	bx	lr

08016824 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8016824:	b580      	push	{r7, lr}
 8016826:	b084      	sub	sp, #16
 8016828:	af00      	add	r7, sp, #0
 801682a:	6078      	str	r0, [r7, #4]
 801682c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d10b      	bne.n	8016850 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8016838:	f04f 0350 	mov.w	r3, #80	; 0x50
 801683c:	b672      	cpsid	i
 801683e:	f383 8811 	msr	BASEPRI, r3
 8016842:	f3bf 8f6f 	isb	sy
 8016846:	f3bf 8f4f 	dsb	sy
 801684a:	b662      	cpsie	i
 801684c:	60bb      	str	r3, [r7, #8]
 801684e:	e7fe      	b.n	801684e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8016850:	f002 fdda 	bl	8019408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	68fb      	ldr	r3, [r7, #12]
 801685a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801685c:	68f9      	ldr	r1, [r7, #12]
 801685e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016860:	fb01 f303 	mul.w	r3, r1, r3
 8016864:	441a      	add	r2, r3
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801686a:	68fb      	ldr	r3, [r7, #12]
 801686c:	2200      	movs	r2, #0
 801686e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8016870:	68fb      	ldr	r3, [r7, #12]
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	681a      	ldr	r2, [r3, #0]
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016880:	3b01      	subs	r3, #1
 8016882:	68f9      	ldr	r1, [r7, #12]
 8016884:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8016886:	fb01 f303 	mul.w	r3, r1, r3
 801688a:	441a      	add	r2, r3
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	22ff      	movs	r2, #255	; 0xff
 8016894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	22ff      	movs	r2, #255	; 0xff
 801689c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80168a0:	683b      	ldr	r3, [r7, #0]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d114      	bne.n	80168d0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	691b      	ldr	r3, [r3, #16]
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	d01a      	beq.n	80168e4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	3310      	adds	r3, #16
 80168b2:	4618      	mov	r0, r3
 80168b4:	f001 fd9c 	bl	80183f0 <xTaskRemoveFromEventList>
 80168b8:	4603      	mov	r3, r0
 80168ba:	2b00      	cmp	r3, #0
 80168bc:	d012      	beq.n	80168e4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80168be:	4b0d      	ldr	r3, [pc, #52]	; (80168f4 <xQueueGenericReset+0xd0>)
 80168c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80168c4:	601a      	str	r2, [r3, #0]
 80168c6:	f3bf 8f4f 	dsb	sy
 80168ca:	f3bf 8f6f 	isb	sy
 80168ce:	e009      	b.n	80168e4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	3310      	adds	r3, #16
 80168d4:	4618      	mov	r0, r3
 80168d6:	f7ff fef1 	bl	80166bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80168da:	68fb      	ldr	r3, [r7, #12]
 80168dc:	3324      	adds	r3, #36	; 0x24
 80168de:	4618      	mov	r0, r3
 80168e0:	f7ff feec 	bl	80166bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80168e4:	f002 fdc2 	bl	801946c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80168e8:	2301      	movs	r3, #1
}
 80168ea:	4618      	mov	r0, r3
 80168ec:	3710      	adds	r7, #16
 80168ee:	46bd      	mov	sp, r7
 80168f0:	bd80      	pop	{r7, pc}
 80168f2:	bf00      	nop
 80168f4:	e000ed04 	.word	0xe000ed04

080168f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80168f8:	b580      	push	{r7, lr}
 80168fa:	b08e      	sub	sp, #56	; 0x38
 80168fc:	af02      	add	r7, sp, #8
 80168fe:	60f8      	str	r0, [r7, #12]
 8016900:	60b9      	str	r1, [r7, #8]
 8016902:	607a      	str	r2, [r7, #4]
 8016904:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016906:	68fb      	ldr	r3, [r7, #12]
 8016908:	2b00      	cmp	r3, #0
 801690a:	d10b      	bne.n	8016924 <xQueueGenericCreateStatic+0x2c>
 801690c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016910:	b672      	cpsid	i
 8016912:	f383 8811 	msr	BASEPRI, r3
 8016916:	f3bf 8f6f 	isb	sy
 801691a:	f3bf 8f4f 	dsb	sy
 801691e:	b662      	cpsie	i
 8016920:	62bb      	str	r3, [r7, #40]	; 0x28
 8016922:	e7fe      	b.n	8016922 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8016924:	683b      	ldr	r3, [r7, #0]
 8016926:	2b00      	cmp	r3, #0
 8016928:	d10b      	bne.n	8016942 <xQueueGenericCreateStatic+0x4a>
 801692a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801692e:	b672      	cpsid	i
 8016930:	f383 8811 	msr	BASEPRI, r3
 8016934:	f3bf 8f6f 	isb	sy
 8016938:	f3bf 8f4f 	dsb	sy
 801693c:	b662      	cpsie	i
 801693e:	627b      	str	r3, [r7, #36]	; 0x24
 8016940:	e7fe      	b.n	8016940 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d002      	beq.n	801694e <xQueueGenericCreateStatic+0x56>
 8016948:	68bb      	ldr	r3, [r7, #8]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d001      	beq.n	8016952 <xQueueGenericCreateStatic+0x5a>
 801694e:	2301      	movs	r3, #1
 8016950:	e000      	b.n	8016954 <xQueueGenericCreateStatic+0x5c>
 8016952:	2300      	movs	r3, #0
 8016954:	2b00      	cmp	r3, #0
 8016956:	d10b      	bne.n	8016970 <xQueueGenericCreateStatic+0x78>
 8016958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801695c:	b672      	cpsid	i
 801695e:	f383 8811 	msr	BASEPRI, r3
 8016962:	f3bf 8f6f 	isb	sy
 8016966:	f3bf 8f4f 	dsb	sy
 801696a:	b662      	cpsie	i
 801696c:	623b      	str	r3, [r7, #32]
 801696e:	e7fe      	b.n	801696e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2b00      	cmp	r3, #0
 8016974:	d102      	bne.n	801697c <xQueueGenericCreateStatic+0x84>
 8016976:	68bb      	ldr	r3, [r7, #8]
 8016978:	2b00      	cmp	r3, #0
 801697a:	d101      	bne.n	8016980 <xQueueGenericCreateStatic+0x88>
 801697c:	2301      	movs	r3, #1
 801697e:	e000      	b.n	8016982 <xQueueGenericCreateStatic+0x8a>
 8016980:	2300      	movs	r3, #0
 8016982:	2b00      	cmp	r3, #0
 8016984:	d10b      	bne.n	801699e <xQueueGenericCreateStatic+0xa6>
 8016986:	f04f 0350 	mov.w	r3, #80	; 0x50
 801698a:	b672      	cpsid	i
 801698c:	f383 8811 	msr	BASEPRI, r3
 8016990:	f3bf 8f6f 	isb	sy
 8016994:	f3bf 8f4f 	dsb	sy
 8016998:	b662      	cpsie	i
 801699a:	61fb      	str	r3, [r7, #28]
 801699c:	e7fe      	b.n	801699c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801699e:	2350      	movs	r3, #80	; 0x50
 80169a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	2b50      	cmp	r3, #80	; 0x50
 80169a6:	d00b      	beq.n	80169c0 <xQueueGenericCreateStatic+0xc8>
 80169a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ac:	b672      	cpsid	i
 80169ae:	f383 8811 	msr	BASEPRI, r3
 80169b2:	f3bf 8f6f 	isb	sy
 80169b6:	f3bf 8f4f 	dsb	sy
 80169ba:	b662      	cpsie	i
 80169bc:	61bb      	str	r3, [r7, #24]
 80169be:	e7fe      	b.n	80169be <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80169c0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80169c2:	683b      	ldr	r3, [r7, #0]
 80169c4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80169c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d00d      	beq.n	80169e8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80169cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169ce:	2201      	movs	r2, #1
 80169d0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80169d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80169d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80169da:	9300      	str	r3, [sp, #0]
 80169dc:	4613      	mov	r3, r2
 80169de:	687a      	ldr	r2, [r7, #4]
 80169e0:	68b9      	ldr	r1, [r7, #8]
 80169e2:	68f8      	ldr	r0, [r7, #12]
 80169e4:	f000 f846 	bl	8016a74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80169e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80169ea:	4618      	mov	r0, r3
 80169ec:	3730      	adds	r7, #48	; 0x30
 80169ee:	46bd      	mov	sp, r7
 80169f0:	bd80      	pop	{r7, pc}

080169f2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80169f2:	b580      	push	{r7, lr}
 80169f4:	b08a      	sub	sp, #40	; 0x28
 80169f6:	af02      	add	r7, sp, #8
 80169f8:	60f8      	str	r0, [r7, #12]
 80169fa:	60b9      	str	r1, [r7, #8]
 80169fc:	4613      	mov	r3, r2
 80169fe:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d10b      	bne.n	8016a1e <xQueueGenericCreate+0x2c>
 8016a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a0a:	b672      	cpsid	i
 8016a0c:	f383 8811 	msr	BASEPRI, r3
 8016a10:	f3bf 8f6f 	isb	sy
 8016a14:	f3bf 8f4f 	dsb	sy
 8016a18:	b662      	cpsie	i
 8016a1a:	613b      	str	r3, [r7, #16]
 8016a1c:	e7fe      	b.n	8016a1c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8016a1e:	68bb      	ldr	r3, [r7, #8]
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d102      	bne.n	8016a2a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8016a24:	2300      	movs	r3, #0
 8016a26:	61fb      	str	r3, [r7, #28]
 8016a28:	e004      	b.n	8016a34 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	68ba      	ldr	r2, [r7, #8]
 8016a2e:	fb02 f303 	mul.w	r3, r2, r3
 8016a32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8016a34:	69fb      	ldr	r3, [r7, #28]
 8016a36:	3350      	adds	r3, #80	; 0x50
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f002 fe07 	bl	801964c <pvPortMalloc>
 8016a3e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8016a40:	69bb      	ldr	r3, [r7, #24]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d011      	beq.n	8016a6a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8016a46:	69bb      	ldr	r3, [r7, #24]
 8016a48:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8016a4a:	697b      	ldr	r3, [r7, #20]
 8016a4c:	3350      	adds	r3, #80	; 0x50
 8016a4e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8016a50:	69bb      	ldr	r3, [r7, #24]
 8016a52:	2200      	movs	r2, #0
 8016a54:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8016a58:	79fa      	ldrb	r2, [r7, #7]
 8016a5a:	69bb      	ldr	r3, [r7, #24]
 8016a5c:	9300      	str	r3, [sp, #0]
 8016a5e:	4613      	mov	r3, r2
 8016a60:	697a      	ldr	r2, [r7, #20]
 8016a62:	68b9      	ldr	r1, [r7, #8]
 8016a64:	68f8      	ldr	r0, [r7, #12]
 8016a66:	f000 f805 	bl	8016a74 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8016a6a:	69bb      	ldr	r3, [r7, #24]
	}
 8016a6c:	4618      	mov	r0, r3
 8016a6e:	3720      	adds	r7, #32
 8016a70:	46bd      	mov	sp, r7
 8016a72:	bd80      	pop	{r7, pc}

08016a74 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8016a74:	b580      	push	{r7, lr}
 8016a76:	b084      	sub	sp, #16
 8016a78:	af00      	add	r7, sp, #0
 8016a7a:	60f8      	str	r0, [r7, #12]
 8016a7c:	60b9      	str	r1, [r7, #8]
 8016a7e:	607a      	str	r2, [r7, #4]
 8016a80:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8016a82:	68bb      	ldr	r3, [r7, #8]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d103      	bne.n	8016a90 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8016a88:	69bb      	ldr	r3, [r7, #24]
 8016a8a:	69ba      	ldr	r2, [r7, #24]
 8016a8c:	601a      	str	r2, [r3, #0]
 8016a8e:	e002      	b.n	8016a96 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8016a90:	69bb      	ldr	r3, [r7, #24]
 8016a92:	687a      	ldr	r2, [r7, #4]
 8016a94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8016a96:	69bb      	ldr	r3, [r7, #24]
 8016a98:	68fa      	ldr	r2, [r7, #12]
 8016a9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8016a9c:	69bb      	ldr	r3, [r7, #24]
 8016a9e:	68ba      	ldr	r2, [r7, #8]
 8016aa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8016aa2:	2101      	movs	r1, #1
 8016aa4:	69b8      	ldr	r0, [r7, #24]
 8016aa6:	f7ff febd 	bl	8016824 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8016aaa:	69bb      	ldr	r3, [r7, #24]
 8016aac:	78fa      	ldrb	r2, [r7, #3]
 8016aae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8016ab2:	bf00      	nop
 8016ab4:	3710      	adds	r7, #16
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}

08016aba <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b082      	sub	sp, #8
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d00e      	beq.n	8016ae6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	2200      	movs	r2, #0
 8016acc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	2200      	movs	r2, #0
 8016ad2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	2200      	movs	r2, #0
 8016ad8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8016ada:	2300      	movs	r3, #0
 8016adc:	2200      	movs	r2, #0
 8016ade:	2100      	movs	r1, #0
 8016ae0:	6878      	ldr	r0, [r7, #4]
 8016ae2:	f000 f911 	bl	8016d08 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8016ae6:	bf00      	nop
 8016ae8:	3708      	adds	r7, #8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8016aee:	b580      	push	{r7, lr}
 8016af0:	b086      	sub	sp, #24
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	4603      	mov	r3, r0
 8016af6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016af8:	2301      	movs	r3, #1
 8016afa:	617b      	str	r3, [r7, #20]
 8016afc:	2300      	movs	r3, #0
 8016afe:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8016b00:	79fb      	ldrb	r3, [r7, #7]
 8016b02:	461a      	mov	r2, r3
 8016b04:	6939      	ldr	r1, [r7, #16]
 8016b06:	6978      	ldr	r0, [r7, #20]
 8016b08:	f7ff ff73 	bl	80169f2 <xQueueGenericCreate>
 8016b0c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016b0e:	68f8      	ldr	r0, [r7, #12]
 8016b10:	f7ff ffd3 	bl	8016aba <prvInitialiseMutex>

		return xNewQueue;
 8016b14:	68fb      	ldr	r3, [r7, #12]
	}
 8016b16:	4618      	mov	r0, r3
 8016b18:	3718      	adds	r7, #24
 8016b1a:	46bd      	mov	sp, r7
 8016b1c:	bd80      	pop	{r7, pc}

08016b1e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8016b1e:	b580      	push	{r7, lr}
 8016b20:	b088      	sub	sp, #32
 8016b22:	af02      	add	r7, sp, #8
 8016b24:	4603      	mov	r3, r0
 8016b26:	6039      	str	r1, [r7, #0]
 8016b28:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8016b2a:	2301      	movs	r3, #1
 8016b2c:	617b      	str	r3, [r7, #20]
 8016b2e:	2300      	movs	r3, #0
 8016b30:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8016b32:	79fb      	ldrb	r3, [r7, #7]
 8016b34:	9300      	str	r3, [sp, #0]
 8016b36:	683b      	ldr	r3, [r7, #0]
 8016b38:	2200      	movs	r2, #0
 8016b3a:	6939      	ldr	r1, [r7, #16]
 8016b3c:	6978      	ldr	r0, [r7, #20]
 8016b3e:	f7ff fedb 	bl	80168f8 <xQueueGenericCreateStatic>
 8016b42:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8016b44:	68f8      	ldr	r0, [r7, #12]
 8016b46:	f7ff ffb8 	bl	8016aba <prvInitialiseMutex>

		return xNewQueue;
 8016b4a:	68fb      	ldr	r3, [r7, #12]
	}
 8016b4c:	4618      	mov	r0, r3
 8016b4e:	3718      	adds	r7, #24
 8016b50:	46bd      	mov	sp, r7
 8016b52:	bd80      	pop	{r7, pc}

08016b54 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8016b54:	b590      	push	{r4, r7, lr}
 8016b56:	b087      	sub	sp, #28
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016b60:	693b      	ldr	r3, [r7, #16]
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d10b      	bne.n	8016b7e <xQueueGiveMutexRecursive+0x2a>
 8016b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016b6a:	b672      	cpsid	i
 8016b6c:	f383 8811 	msr	BASEPRI, r3
 8016b70:	f3bf 8f6f 	isb	sy
 8016b74:	f3bf 8f4f 	dsb	sy
 8016b78:	b662      	cpsie	i
 8016b7a:	60fb      	str	r3, [r7, #12]
 8016b7c:	e7fe      	b.n	8016b7c <xQueueGiveMutexRecursive+0x28>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	689c      	ldr	r4, [r3, #8]
 8016b82:	f001 fdf3 	bl	801876c <xTaskGetCurrentTaskHandle>
 8016b86:	4603      	mov	r3, r0
 8016b88:	429c      	cmp	r4, r3
 8016b8a:	d111      	bne.n	8016bb0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8016b8c:	693b      	ldr	r3, [r7, #16]
 8016b8e:	68db      	ldr	r3, [r3, #12]
 8016b90:	1e5a      	subs	r2, r3, #1
 8016b92:	693b      	ldr	r3, [r7, #16]
 8016b94:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d105      	bne.n	8016baa <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	2200      	movs	r2, #0
 8016ba2:	2100      	movs	r1, #0
 8016ba4:	6938      	ldr	r0, [r7, #16]
 8016ba6:	f000 f8af 	bl	8016d08 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8016baa:	2301      	movs	r3, #1
 8016bac:	617b      	str	r3, [r7, #20]
 8016bae:	e001      	b.n	8016bb4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8016bb0:	2300      	movs	r3, #0
 8016bb2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8016bb4:	697b      	ldr	r3, [r7, #20]
	}
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	371c      	adds	r7, #28
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	bd90      	pop	{r4, r7, pc}

08016bbe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8016bbe:	b590      	push	{r4, r7, lr}
 8016bc0:	b087      	sub	sp, #28
 8016bc2:	af00      	add	r7, sp, #0
 8016bc4:	6078      	str	r0, [r7, #4]
 8016bc6:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8016bc8:	687b      	ldr	r3, [r7, #4]
 8016bca:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8016bcc:	693b      	ldr	r3, [r7, #16]
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	d10b      	bne.n	8016bea <xQueueTakeMutexRecursive+0x2c>
 8016bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016bd6:	b672      	cpsid	i
 8016bd8:	f383 8811 	msr	BASEPRI, r3
 8016bdc:	f3bf 8f6f 	isb	sy
 8016be0:	f3bf 8f4f 	dsb	sy
 8016be4:	b662      	cpsie	i
 8016be6:	60fb      	str	r3, [r7, #12]
 8016be8:	e7fe      	b.n	8016be8 <xQueueTakeMutexRecursive+0x2a>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8016bea:	693b      	ldr	r3, [r7, #16]
 8016bec:	689c      	ldr	r4, [r3, #8]
 8016bee:	f001 fdbd 	bl	801876c <xTaskGetCurrentTaskHandle>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	429c      	cmp	r4, r3
 8016bf6:	d107      	bne.n	8016c08 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016bf8:	693b      	ldr	r3, [r7, #16]
 8016bfa:	68db      	ldr	r3, [r3, #12]
 8016bfc:	1c5a      	adds	r2, r3, #1
 8016bfe:	693b      	ldr	r3, [r7, #16]
 8016c00:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8016c02:	2301      	movs	r3, #1
 8016c04:	617b      	str	r3, [r7, #20]
 8016c06:	e00c      	b.n	8016c22 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8016c08:	6839      	ldr	r1, [r7, #0]
 8016c0a:	6938      	ldr	r0, [r7, #16]
 8016c0c:	f000 fb8e 	bl	801732c <xQueueSemaphoreTake>
 8016c10:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8016c12:	697b      	ldr	r3, [r7, #20]
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d004      	beq.n	8016c22 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	68db      	ldr	r3, [r3, #12]
 8016c1c:	1c5a      	adds	r2, r3, #1
 8016c1e:	693b      	ldr	r3, [r7, #16]
 8016c20:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8016c22:	697b      	ldr	r3, [r7, #20]
	}
 8016c24:	4618      	mov	r0, r3
 8016c26:	371c      	adds	r7, #28
 8016c28:	46bd      	mov	sp, r7
 8016c2a:	bd90      	pop	{r4, r7, pc}

08016c2c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8016c2c:	b580      	push	{r7, lr}
 8016c2e:	b08a      	sub	sp, #40	; 0x28
 8016c30:	af02      	add	r7, sp, #8
 8016c32:	60f8      	str	r0, [r7, #12]
 8016c34:	60b9      	str	r1, [r7, #8]
 8016c36:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016c38:	68fb      	ldr	r3, [r7, #12]
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d10b      	bne.n	8016c56 <xQueueCreateCountingSemaphoreStatic+0x2a>
 8016c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c42:	b672      	cpsid	i
 8016c44:	f383 8811 	msr	BASEPRI, r3
 8016c48:	f3bf 8f6f 	isb	sy
 8016c4c:	f3bf 8f4f 	dsb	sy
 8016c50:	b662      	cpsie	i
 8016c52:	61bb      	str	r3, [r7, #24]
 8016c54:	e7fe      	b.n	8016c54 <xQueueCreateCountingSemaphoreStatic+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016c56:	68ba      	ldr	r2, [r7, #8]
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	429a      	cmp	r2, r3
 8016c5c:	d90b      	bls.n	8016c76 <xQueueCreateCountingSemaphoreStatic+0x4a>
 8016c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016c62:	b672      	cpsid	i
 8016c64:	f383 8811 	msr	BASEPRI, r3
 8016c68:	f3bf 8f6f 	isb	sy
 8016c6c:	f3bf 8f4f 	dsb	sy
 8016c70:	b662      	cpsie	i
 8016c72:	617b      	str	r3, [r7, #20]
 8016c74:	e7fe      	b.n	8016c74 <xQueueCreateCountingSemaphoreStatic+0x48>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016c76:	2302      	movs	r3, #2
 8016c78:	9300      	str	r3, [sp, #0]
 8016c7a:	687b      	ldr	r3, [r7, #4]
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	2100      	movs	r1, #0
 8016c80:	68f8      	ldr	r0, [r7, #12]
 8016c82:	f7ff fe39 	bl	80168f8 <xQueueGenericCreateStatic>
 8016c86:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8016c88:	69fb      	ldr	r3, [r7, #28]
 8016c8a:	2b00      	cmp	r3, #0
 8016c8c:	d002      	beq.n	8016c94 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016c8e:	69fb      	ldr	r3, [r7, #28]
 8016c90:	68ba      	ldr	r2, [r7, #8]
 8016c92:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016c94:	69fb      	ldr	r3, [r7, #28]
	}
 8016c96:	4618      	mov	r0, r3
 8016c98:	3720      	adds	r7, #32
 8016c9a:	46bd      	mov	sp, r7
 8016c9c:	bd80      	pop	{r7, pc}

08016c9e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8016c9e:	b580      	push	{r7, lr}
 8016ca0:	b086      	sub	sp, #24
 8016ca2:	af00      	add	r7, sp, #0
 8016ca4:	6078      	str	r0, [r7, #4]
 8016ca6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	2b00      	cmp	r3, #0
 8016cac:	d10b      	bne.n	8016cc6 <xQueueCreateCountingSemaphore+0x28>
 8016cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cb2:	b672      	cpsid	i
 8016cb4:	f383 8811 	msr	BASEPRI, r3
 8016cb8:	f3bf 8f6f 	isb	sy
 8016cbc:	f3bf 8f4f 	dsb	sy
 8016cc0:	b662      	cpsie	i
 8016cc2:	613b      	str	r3, [r7, #16]
 8016cc4:	e7fe      	b.n	8016cc4 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8016cc6:	683a      	ldr	r2, [r7, #0]
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d90b      	bls.n	8016ce6 <xQueueCreateCountingSemaphore+0x48>
 8016cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016cd2:	b672      	cpsid	i
 8016cd4:	f383 8811 	msr	BASEPRI, r3
 8016cd8:	f3bf 8f6f 	isb	sy
 8016cdc:	f3bf 8f4f 	dsb	sy
 8016ce0:	b662      	cpsie	i
 8016ce2:	60fb      	str	r3, [r7, #12]
 8016ce4:	e7fe      	b.n	8016ce4 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8016ce6:	2202      	movs	r2, #2
 8016ce8:	2100      	movs	r1, #0
 8016cea:	6878      	ldr	r0, [r7, #4]
 8016cec:	f7ff fe81 	bl	80169f2 <xQueueGenericCreate>
 8016cf0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8016cf2:	697b      	ldr	r3, [r7, #20]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d002      	beq.n	8016cfe <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	683a      	ldr	r2, [r7, #0]
 8016cfc:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8016cfe:	697b      	ldr	r3, [r7, #20]
	}
 8016d00:	4618      	mov	r0, r3
 8016d02:	3718      	adds	r7, #24
 8016d04:	46bd      	mov	sp, r7
 8016d06:	bd80      	pop	{r7, pc}

08016d08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8016d08:	b580      	push	{r7, lr}
 8016d0a:	b08e      	sub	sp, #56	; 0x38
 8016d0c:	af00      	add	r7, sp, #0
 8016d0e:	60f8      	str	r0, [r7, #12]
 8016d10:	60b9      	str	r1, [r7, #8]
 8016d12:	607a      	str	r2, [r7, #4]
 8016d14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8016d16:	2300      	movs	r3, #0
 8016d18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d10b      	bne.n	8016d3c <xQueueGenericSend+0x34>
 8016d24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d28:	b672      	cpsid	i
 8016d2a:	f383 8811 	msr	BASEPRI, r3
 8016d2e:	f3bf 8f6f 	isb	sy
 8016d32:	f3bf 8f4f 	dsb	sy
 8016d36:	b662      	cpsie	i
 8016d38:	62bb      	str	r3, [r7, #40]	; 0x28
 8016d3a:	e7fe      	b.n	8016d3a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016d3c:	68bb      	ldr	r3, [r7, #8]
 8016d3e:	2b00      	cmp	r3, #0
 8016d40:	d103      	bne.n	8016d4a <xQueueGenericSend+0x42>
 8016d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d101      	bne.n	8016d4e <xQueueGenericSend+0x46>
 8016d4a:	2301      	movs	r3, #1
 8016d4c:	e000      	b.n	8016d50 <xQueueGenericSend+0x48>
 8016d4e:	2300      	movs	r3, #0
 8016d50:	2b00      	cmp	r3, #0
 8016d52:	d10b      	bne.n	8016d6c <xQueueGenericSend+0x64>
 8016d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d58:	b672      	cpsid	i
 8016d5a:	f383 8811 	msr	BASEPRI, r3
 8016d5e:	f3bf 8f6f 	isb	sy
 8016d62:	f3bf 8f4f 	dsb	sy
 8016d66:	b662      	cpsie	i
 8016d68:	627b      	str	r3, [r7, #36]	; 0x24
 8016d6a:	e7fe      	b.n	8016d6a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016d6c:	683b      	ldr	r3, [r7, #0]
 8016d6e:	2b02      	cmp	r3, #2
 8016d70:	d103      	bne.n	8016d7a <xQueueGenericSend+0x72>
 8016d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016d76:	2b01      	cmp	r3, #1
 8016d78:	d101      	bne.n	8016d7e <xQueueGenericSend+0x76>
 8016d7a:	2301      	movs	r3, #1
 8016d7c:	e000      	b.n	8016d80 <xQueueGenericSend+0x78>
 8016d7e:	2300      	movs	r3, #0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	d10b      	bne.n	8016d9c <xQueueGenericSend+0x94>
 8016d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016d88:	b672      	cpsid	i
 8016d8a:	f383 8811 	msr	BASEPRI, r3
 8016d8e:	f3bf 8f6f 	isb	sy
 8016d92:	f3bf 8f4f 	dsb	sy
 8016d96:	b662      	cpsie	i
 8016d98:	623b      	str	r3, [r7, #32]
 8016d9a:	e7fe      	b.n	8016d9a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8016d9c:	f001 fcf6 	bl	801878c <xTaskGetSchedulerState>
 8016da0:	4603      	mov	r3, r0
 8016da2:	2b00      	cmp	r3, #0
 8016da4:	d102      	bne.n	8016dac <xQueueGenericSend+0xa4>
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d101      	bne.n	8016db0 <xQueueGenericSend+0xa8>
 8016dac:	2301      	movs	r3, #1
 8016dae:	e000      	b.n	8016db2 <xQueueGenericSend+0xaa>
 8016db0:	2300      	movs	r3, #0
 8016db2:	2b00      	cmp	r3, #0
 8016db4:	d10b      	bne.n	8016dce <xQueueGenericSend+0xc6>
 8016db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016dba:	b672      	cpsid	i
 8016dbc:	f383 8811 	msr	BASEPRI, r3
 8016dc0:	f3bf 8f6f 	isb	sy
 8016dc4:	f3bf 8f4f 	dsb	sy
 8016dc8:	b662      	cpsie	i
 8016dca:	61fb      	str	r3, [r7, #28]
 8016dcc:	e7fe      	b.n	8016dcc <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8016dce:	f002 fb1b 	bl	8019408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016dda:	429a      	cmp	r2, r3
 8016ddc:	d302      	bcc.n	8016de4 <xQueueGenericSend+0xdc>
 8016dde:	683b      	ldr	r3, [r7, #0]
 8016de0:	2b02      	cmp	r3, #2
 8016de2:	d129      	bne.n	8016e38 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016de4:	683a      	ldr	r2, [r7, #0]
 8016de6:	68b9      	ldr	r1, [r7, #8]
 8016de8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016dea:	f000 fc6e 	bl	80176ca <prvCopyDataToQueue>
 8016dee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d010      	beq.n	8016e1a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016dfa:	3324      	adds	r3, #36	; 0x24
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	f001 faf7 	bl	80183f0 <xTaskRemoveFromEventList>
 8016e02:	4603      	mov	r3, r0
 8016e04:	2b00      	cmp	r3, #0
 8016e06:	d013      	beq.n	8016e30 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8016e08:	4b3f      	ldr	r3, [pc, #252]	; (8016f08 <xQueueGenericSend+0x200>)
 8016e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e0e:	601a      	str	r2, [r3, #0]
 8016e10:	f3bf 8f4f 	dsb	sy
 8016e14:	f3bf 8f6f 	isb	sy
 8016e18:	e00a      	b.n	8016e30 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8016e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d007      	beq.n	8016e30 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8016e20:	4b39      	ldr	r3, [pc, #228]	; (8016f08 <xQueueGenericSend+0x200>)
 8016e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016e26:	601a      	str	r2, [r3, #0]
 8016e28:	f3bf 8f4f 	dsb	sy
 8016e2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8016e30:	f002 fb1c 	bl	801946c <vPortExitCritical>
				return pdPASS;
 8016e34:	2301      	movs	r3, #1
 8016e36:	e063      	b.n	8016f00 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d103      	bne.n	8016e46 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8016e3e:	f002 fb15 	bl	801946c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8016e42:	2300      	movs	r3, #0
 8016e44:	e05c      	b.n	8016f00 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8016e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d106      	bne.n	8016e5a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8016e4c:	f107 0314 	add.w	r3, r7, #20
 8016e50:	4618      	mov	r0, r3
 8016e52:	f001 fb31 	bl	80184b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8016e56:	2301      	movs	r3, #1
 8016e58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8016e5a:	f002 fb07 	bl	801946c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8016e5e:	f001 f88f 	bl	8017f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8016e62:	f002 fad1 	bl	8019408 <vPortEnterCritical>
 8016e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8016e6c:	b25b      	sxtb	r3, r3
 8016e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e72:	d103      	bne.n	8016e7c <xQueueGenericSend+0x174>
 8016e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e76:	2200      	movs	r2, #0
 8016e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8016e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016e82:	b25b      	sxtb	r3, r3
 8016e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016e88:	d103      	bne.n	8016e92 <xQueueGenericSend+0x18a>
 8016e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016e8c:	2200      	movs	r2, #0
 8016e8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8016e92:	f002 faeb 	bl	801946c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8016e96:	1d3a      	adds	r2, r7, #4
 8016e98:	f107 0314 	add.w	r3, r7, #20
 8016e9c:	4611      	mov	r1, r2
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f001 fb20 	bl	80184e4 <xTaskCheckForTimeOut>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d124      	bne.n	8016ef4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8016eaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016eac:	f000 fd05 	bl	80178ba <prvIsQueueFull>
 8016eb0:	4603      	mov	r3, r0
 8016eb2:	2b00      	cmp	r3, #0
 8016eb4:	d018      	beq.n	8016ee8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8016eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016eb8:	3310      	adds	r3, #16
 8016eba:	687a      	ldr	r2, [r7, #4]
 8016ebc:	4611      	mov	r1, r2
 8016ebe:	4618      	mov	r0, r3
 8016ec0:	f001 fa44 	bl	801834c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8016ec4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ec6:	f000 fc90 	bl	80177ea <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8016eca:	f001 f867 	bl	8017f9c <xTaskResumeAll>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	f47f af7c 	bne.w	8016dce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8016ed6:	4b0c      	ldr	r3, [pc, #48]	; (8016f08 <xQueueGenericSend+0x200>)
 8016ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016edc:	601a      	str	r2, [r3, #0]
 8016ede:	f3bf 8f4f 	dsb	sy
 8016ee2:	f3bf 8f6f 	isb	sy
 8016ee6:	e772      	b.n	8016dce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8016ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016eea:	f000 fc7e 	bl	80177ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8016eee:	f001 f855 	bl	8017f9c <xTaskResumeAll>
 8016ef2:	e76c      	b.n	8016dce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8016ef4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016ef6:	f000 fc78 	bl	80177ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8016efa:	f001 f84f 	bl	8017f9c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8016efe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8016f00:	4618      	mov	r0, r3
 8016f02:	3738      	adds	r7, #56	; 0x38
 8016f04:	46bd      	mov	sp, r7
 8016f06:	bd80      	pop	{r7, pc}
 8016f08:	e000ed04 	.word	0xe000ed04

08016f0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b08e      	sub	sp, #56	; 0x38
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	60f8      	str	r0, [r7, #12]
 8016f14:	60b9      	str	r1, [r7, #8]
 8016f16:	607a      	str	r2, [r7, #4]
 8016f18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8016f1a:	68fb      	ldr	r3, [r7, #12]
 8016f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8016f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d10b      	bne.n	8016f3c <xQueueGenericSendFromISR+0x30>
 8016f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f28:	b672      	cpsid	i
 8016f2a:	f383 8811 	msr	BASEPRI, r3
 8016f2e:	f3bf 8f6f 	isb	sy
 8016f32:	f3bf 8f4f 	dsb	sy
 8016f36:	b662      	cpsie	i
 8016f38:	627b      	str	r3, [r7, #36]	; 0x24
 8016f3a:	e7fe      	b.n	8016f3a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8016f3c:	68bb      	ldr	r3, [r7, #8]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d103      	bne.n	8016f4a <xQueueGenericSendFromISR+0x3e>
 8016f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	d101      	bne.n	8016f4e <xQueueGenericSendFromISR+0x42>
 8016f4a:	2301      	movs	r3, #1
 8016f4c:	e000      	b.n	8016f50 <xQueueGenericSendFromISR+0x44>
 8016f4e:	2300      	movs	r3, #0
 8016f50:	2b00      	cmp	r3, #0
 8016f52:	d10b      	bne.n	8016f6c <xQueueGenericSendFromISR+0x60>
 8016f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f58:	b672      	cpsid	i
 8016f5a:	f383 8811 	msr	BASEPRI, r3
 8016f5e:	f3bf 8f6f 	isb	sy
 8016f62:	f3bf 8f4f 	dsb	sy
 8016f66:	b662      	cpsie	i
 8016f68:	623b      	str	r3, [r7, #32]
 8016f6a:	e7fe      	b.n	8016f6a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	2b02      	cmp	r3, #2
 8016f70:	d103      	bne.n	8016f7a <xQueueGenericSendFromISR+0x6e>
 8016f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016f74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016f76:	2b01      	cmp	r3, #1
 8016f78:	d101      	bne.n	8016f7e <xQueueGenericSendFromISR+0x72>
 8016f7a:	2301      	movs	r3, #1
 8016f7c:	e000      	b.n	8016f80 <xQueueGenericSendFromISR+0x74>
 8016f7e:	2300      	movs	r3, #0
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d10b      	bne.n	8016f9c <xQueueGenericSendFromISR+0x90>
 8016f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016f88:	b672      	cpsid	i
 8016f8a:	f383 8811 	msr	BASEPRI, r3
 8016f8e:	f3bf 8f6f 	isb	sy
 8016f92:	f3bf 8f4f 	dsb	sy
 8016f96:	b662      	cpsie	i
 8016f98:	61fb      	str	r3, [r7, #28]
 8016f9a:	e7fe      	b.n	8016f9a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016f9c:	f002 fb14 	bl	80195c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8016fa0:	f3ef 8211 	mrs	r2, BASEPRI
 8016fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016fa8:	b672      	cpsid	i
 8016faa:	f383 8811 	msr	BASEPRI, r3
 8016fae:	f3bf 8f6f 	isb	sy
 8016fb2:	f3bf 8f4f 	dsb	sy
 8016fb6:	b662      	cpsie	i
 8016fb8:	61ba      	str	r2, [r7, #24]
 8016fba:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8016fbc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8016fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8016fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	d302      	bcc.n	8016fd2 <xQueueGenericSendFromISR+0xc6>
 8016fcc:	683b      	ldr	r3, [r7, #0]
 8016fce:	2b02      	cmp	r3, #2
 8016fd0:	d12c      	bne.n	801702c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8016fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016fd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8016fd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8016fdc:	683a      	ldr	r2, [r7, #0]
 8016fde:	68b9      	ldr	r1, [r7, #8]
 8016fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016fe2:	f000 fb72 	bl	80176ca <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8016fe6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8016fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016fee:	d112      	bne.n	8017016 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8016ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d016      	beq.n	8017026 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8016ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016ffa:	3324      	adds	r3, #36	; 0x24
 8016ffc:	4618      	mov	r0, r3
 8016ffe:	f001 f9f7 	bl	80183f0 <xTaskRemoveFromEventList>
 8017002:	4603      	mov	r3, r0
 8017004:	2b00      	cmp	r3, #0
 8017006:	d00e      	beq.n	8017026 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8017008:	687b      	ldr	r3, [r7, #4]
 801700a:	2b00      	cmp	r3, #0
 801700c:	d00b      	beq.n	8017026 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	2201      	movs	r2, #1
 8017012:	601a      	str	r2, [r3, #0]
 8017014:	e007      	b.n	8017026 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017016:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801701a:	3301      	adds	r3, #1
 801701c:	b2db      	uxtb	r3, r3
 801701e:	b25a      	sxtb	r2, r3
 8017020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017022:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017026:	2301      	movs	r3, #1
 8017028:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801702a:	e001      	b.n	8017030 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801702c:	2300      	movs	r3, #0
 801702e:	637b      	str	r3, [r7, #52]	; 0x34
 8017030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017032:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8017034:	693b      	ldr	r3, [r7, #16]
 8017036:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801703a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801703c:	4618      	mov	r0, r3
 801703e:	3738      	adds	r7, #56	; 0x38
 8017040:	46bd      	mov	sp, r7
 8017042:	bd80      	pop	{r7, pc}

08017044 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8017044:	b580      	push	{r7, lr}
 8017046:	b08e      	sub	sp, #56	; 0x38
 8017048:	af00      	add	r7, sp, #0
 801704a:	6078      	str	r0, [r7, #4]
 801704c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8017052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017054:	2b00      	cmp	r3, #0
 8017056:	d10b      	bne.n	8017070 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8017058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801705c:	b672      	cpsid	i
 801705e:	f383 8811 	msr	BASEPRI, r3
 8017062:	f3bf 8f6f 	isb	sy
 8017066:	f3bf 8f4f 	dsb	sy
 801706a:	b662      	cpsie	i
 801706c:	623b      	str	r3, [r7, #32]
 801706e:	e7fe      	b.n	801706e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017074:	2b00      	cmp	r3, #0
 8017076:	d00b      	beq.n	8017090 <xQueueGiveFromISR+0x4c>
 8017078:	f04f 0350 	mov.w	r3, #80	; 0x50
 801707c:	b672      	cpsid	i
 801707e:	f383 8811 	msr	BASEPRI, r3
 8017082:	f3bf 8f6f 	isb	sy
 8017086:	f3bf 8f4f 	dsb	sy
 801708a:	b662      	cpsie	i
 801708c:	61fb      	str	r3, [r7, #28]
 801708e:	e7fe      	b.n	801708e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8017090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d103      	bne.n	80170a0 <xQueueGiveFromISR+0x5c>
 8017098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801709a:	689b      	ldr	r3, [r3, #8]
 801709c:	2b00      	cmp	r3, #0
 801709e:	d101      	bne.n	80170a4 <xQueueGiveFromISR+0x60>
 80170a0:	2301      	movs	r3, #1
 80170a2:	e000      	b.n	80170a6 <xQueueGiveFromISR+0x62>
 80170a4:	2300      	movs	r3, #0
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d10b      	bne.n	80170c2 <xQueueGiveFromISR+0x7e>
 80170aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ae:	b672      	cpsid	i
 80170b0:	f383 8811 	msr	BASEPRI, r3
 80170b4:	f3bf 8f6f 	isb	sy
 80170b8:	f3bf 8f4f 	dsb	sy
 80170bc:	b662      	cpsie	i
 80170be:	61bb      	str	r3, [r7, #24]
 80170c0:	e7fe      	b.n	80170c0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80170c2:	f002 fa81 	bl	80195c8 <vPortValidateInterruptPriority>
	__asm volatile
 80170c6:	f3ef 8211 	mrs	r2, BASEPRI
 80170ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80170ce:	b672      	cpsid	i
 80170d0:	f383 8811 	msr	BASEPRI, r3
 80170d4:	f3bf 8f6f 	isb	sy
 80170d8:	f3bf 8f4f 	dsb	sy
 80170dc:	b662      	cpsie	i
 80170de:	617a      	str	r2, [r7, #20]
 80170e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80170e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80170e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80170e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80170ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80170ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80170f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d22b      	bcs.n	801714e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80170f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80170fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8017100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017102:	1c5a      	adds	r2, r3, #1
 8017104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017106:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8017108:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017110:	d112      	bne.n	8017138 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017116:	2b00      	cmp	r3, #0
 8017118:	d016      	beq.n	8017148 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801711a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801711c:	3324      	adds	r3, #36	; 0x24
 801711e:	4618      	mov	r0, r3
 8017120:	f001 f966 	bl	80183f0 <xTaskRemoveFromEventList>
 8017124:	4603      	mov	r3, r0
 8017126:	2b00      	cmp	r3, #0
 8017128:	d00e      	beq.n	8017148 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801712a:	683b      	ldr	r3, [r7, #0]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d00b      	beq.n	8017148 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	2201      	movs	r2, #1
 8017134:	601a      	str	r2, [r3, #0]
 8017136:	e007      	b.n	8017148 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8017138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801713c:	3301      	adds	r3, #1
 801713e:	b2db      	uxtb	r3, r3
 8017140:	b25a      	sxtb	r2, r3
 8017142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8017148:	2301      	movs	r3, #1
 801714a:	637b      	str	r3, [r7, #52]	; 0x34
 801714c:	e001      	b.n	8017152 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801714e:	2300      	movs	r3, #0
 8017150:	637b      	str	r3, [r7, #52]	; 0x34
 8017152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017154:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8017156:	68fb      	ldr	r3, [r7, #12]
 8017158:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801715c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801715e:	4618      	mov	r0, r3
 8017160:	3738      	adds	r7, #56	; 0x38
 8017162:	46bd      	mov	sp, r7
 8017164:	bd80      	pop	{r7, pc}
	...

08017168 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b08c      	sub	sp, #48	; 0x30
 801716c:	af00      	add	r7, sp, #0
 801716e:	60f8      	str	r0, [r7, #12]
 8017170:	60b9      	str	r1, [r7, #8]
 8017172:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8017174:	2300      	movs	r3, #0
 8017176:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801717c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801717e:	2b00      	cmp	r3, #0
 8017180:	d10b      	bne.n	801719a <xQueueReceive+0x32>
	__asm volatile
 8017182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017186:	b672      	cpsid	i
 8017188:	f383 8811 	msr	BASEPRI, r3
 801718c:	f3bf 8f6f 	isb	sy
 8017190:	f3bf 8f4f 	dsb	sy
 8017194:	b662      	cpsie	i
 8017196:	623b      	str	r3, [r7, #32]
 8017198:	e7fe      	b.n	8017198 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801719a:	68bb      	ldr	r3, [r7, #8]
 801719c:	2b00      	cmp	r3, #0
 801719e:	d103      	bne.n	80171a8 <xQueueReceive+0x40>
 80171a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d101      	bne.n	80171ac <xQueueReceive+0x44>
 80171a8:	2301      	movs	r3, #1
 80171aa:	e000      	b.n	80171ae <xQueueReceive+0x46>
 80171ac:	2300      	movs	r3, #0
 80171ae:	2b00      	cmp	r3, #0
 80171b0:	d10b      	bne.n	80171ca <xQueueReceive+0x62>
 80171b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171b6:	b672      	cpsid	i
 80171b8:	f383 8811 	msr	BASEPRI, r3
 80171bc:	f3bf 8f6f 	isb	sy
 80171c0:	f3bf 8f4f 	dsb	sy
 80171c4:	b662      	cpsie	i
 80171c6:	61fb      	str	r3, [r7, #28]
 80171c8:	e7fe      	b.n	80171c8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80171ca:	f001 fadf 	bl	801878c <xTaskGetSchedulerState>
 80171ce:	4603      	mov	r3, r0
 80171d0:	2b00      	cmp	r3, #0
 80171d2:	d102      	bne.n	80171da <xQueueReceive+0x72>
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d101      	bne.n	80171de <xQueueReceive+0x76>
 80171da:	2301      	movs	r3, #1
 80171dc:	e000      	b.n	80171e0 <xQueueReceive+0x78>
 80171de:	2300      	movs	r3, #0
 80171e0:	2b00      	cmp	r3, #0
 80171e2:	d10b      	bne.n	80171fc <xQueueReceive+0x94>
 80171e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80171e8:	b672      	cpsid	i
 80171ea:	f383 8811 	msr	BASEPRI, r3
 80171ee:	f3bf 8f6f 	isb	sy
 80171f2:	f3bf 8f4f 	dsb	sy
 80171f6:	b662      	cpsie	i
 80171f8:	61bb      	str	r3, [r7, #24]
 80171fa:	e7fe      	b.n	80171fa <xQueueReceive+0x92>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80171fc:	f002 f904 	bl	8019408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8017200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017204:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017208:	2b00      	cmp	r3, #0
 801720a:	d01f      	beq.n	801724c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801720c:	68b9      	ldr	r1, [r7, #8]
 801720e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017210:	f000 fac5 	bl	801779e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8017214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017216:	1e5a      	subs	r2, r3, #1
 8017218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721e:	691b      	ldr	r3, [r3, #16]
 8017220:	2b00      	cmp	r3, #0
 8017222:	d00f      	beq.n	8017244 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017226:	3310      	adds	r3, #16
 8017228:	4618      	mov	r0, r3
 801722a:	f001 f8e1 	bl	80183f0 <xTaskRemoveFromEventList>
 801722e:	4603      	mov	r3, r0
 8017230:	2b00      	cmp	r3, #0
 8017232:	d007      	beq.n	8017244 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8017234:	4b3c      	ldr	r3, [pc, #240]	; (8017328 <xQueueReceive+0x1c0>)
 8017236:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801723a:	601a      	str	r2, [r3, #0]
 801723c:	f3bf 8f4f 	dsb	sy
 8017240:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017244:	f002 f912 	bl	801946c <vPortExitCritical>
				return pdPASS;
 8017248:	2301      	movs	r3, #1
 801724a:	e069      	b.n	8017320 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801724c:	687b      	ldr	r3, [r7, #4]
 801724e:	2b00      	cmp	r3, #0
 8017250:	d103      	bne.n	801725a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8017252:	f002 f90b 	bl	801946c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017256:	2300      	movs	r3, #0
 8017258:	e062      	b.n	8017320 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801725a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801725c:	2b00      	cmp	r3, #0
 801725e:	d106      	bne.n	801726e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8017260:	f107 0310 	add.w	r3, r7, #16
 8017264:	4618      	mov	r0, r3
 8017266:	f001 f927 	bl	80184b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801726a:	2301      	movs	r3, #1
 801726c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801726e:	f002 f8fd 	bl	801946c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017272:	f000 fe85 	bl	8017f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017276:	f002 f8c7 	bl	8019408 <vPortEnterCritical>
 801727a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801727c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017280:	b25b      	sxtb	r3, r3
 8017282:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017286:	d103      	bne.n	8017290 <xQueueReceive+0x128>
 8017288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801728a:	2200      	movs	r2, #0
 801728c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8017290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017292:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017296:	b25b      	sxtb	r3, r3
 8017298:	f1b3 3fff 	cmp.w	r3, #4294967295
 801729c:	d103      	bne.n	80172a6 <xQueueReceive+0x13e>
 801729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172a0:	2200      	movs	r2, #0
 80172a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80172a6:	f002 f8e1 	bl	801946c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80172aa:	1d3a      	adds	r2, r7, #4
 80172ac:	f107 0310 	add.w	r3, r7, #16
 80172b0:	4611      	mov	r1, r2
 80172b2:	4618      	mov	r0, r3
 80172b4:	f001 f916 	bl	80184e4 <xTaskCheckForTimeOut>
 80172b8:	4603      	mov	r3, r0
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d123      	bne.n	8017306 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80172be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172c0:	f000 fae5 	bl	801788e <prvIsQueueEmpty>
 80172c4:	4603      	mov	r3, r0
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d017      	beq.n	80172fa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80172ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172cc:	3324      	adds	r3, #36	; 0x24
 80172ce:	687a      	ldr	r2, [r7, #4]
 80172d0:	4611      	mov	r1, r2
 80172d2:	4618      	mov	r0, r3
 80172d4:	f001 f83a 	bl	801834c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80172d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172da:	f000 fa86 	bl	80177ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80172de:	f000 fe5d 	bl	8017f9c <xTaskResumeAll>
 80172e2:	4603      	mov	r3, r0
 80172e4:	2b00      	cmp	r3, #0
 80172e6:	d189      	bne.n	80171fc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80172e8:	4b0f      	ldr	r3, [pc, #60]	; (8017328 <xQueueReceive+0x1c0>)
 80172ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80172ee:	601a      	str	r2, [r3, #0]
 80172f0:	f3bf 8f4f 	dsb	sy
 80172f4:	f3bf 8f6f 	isb	sy
 80172f8:	e780      	b.n	80171fc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80172fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172fc:	f000 fa75 	bl	80177ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8017300:	f000 fe4c 	bl	8017f9c <xTaskResumeAll>
 8017304:	e77a      	b.n	80171fc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8017306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017308:	f000 fa6f 	bl	80177ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801730c:	f000 fe46 	bl	8017f9c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8017310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017312:	f000 fabc 	bl	801788e <prvIsQueueEmpty>
 8017316:	4603      	mov	r3, r0
 8017318:	2b00      	cmp	r3, #0
 801731a:	f43f af6f 	beq.w	80171fc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801731e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8017320:	4618      	mov	r0, r3
 8017322:	3730      	adds	r7, #48	; 0x30
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}
 8017328:	e000ed04 	.word	0xe000ed04

0801732c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b08e      	sub	sp, #56	; 0x38
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
 8017334:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8017336:	2300      	movs	r3, #0
 8017338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801733e:	2300      	movs	r3, #0
 8017340:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8017342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017344:	2b00      	cmp	r3, #0
 8017346:	d10b      	bne.n	8017360 <xQueueSemaphoreTake+0x34>
 8017348:	f04f 0350 	mov.w	r3, #80	; 0x50
 801734c:	b672      	cpsid	i
 801734e:	f383 8811 	msr	BASEPRI, r3
 8017352:	f3bf 8f6f 	isb	sy
 8017356:	f3bf 8f4f 	dsb	sy
 801735a:	b662      	cpsie	i
 801735c:	623b      	str	r3, [r7, #32]
 801735e:	e7fe      	b.n	801735e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8017360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017364:	2b00      	cmp	r3, #0
 8017366:	d00b      	beq.n	8017380 <xQueueSemaphoreTake+0x54>
 8017368:	f04f 0350 	mov.w	r3, #80	; 0x50
 801736c:	b672      	cpsid	i
 801736e:	f383 8811 	msr	BASEPRI, r3
 8017372:	f3bf 8f6f 	isb	sy
 8017376:	f3bf 8f4f 	dsb	sy
 801737a:	b662      	cpsie	i
 801737c:	61fb      	str	r3, [r7, #28]
 801737e:	e7fe      	b.n	801737e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8017380:	f001 fa04 	bl	801878c <xTaskGetSchedulerState>
 8017384:	4603      	mov	r3, r0
 8017386:	2b00      	cmp	r3, #0
 8017388:	d102      	bne.n	8017390 <xQueueSemaphoreTake+0x64>
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d101      	bne.n	8017394 <xQueueSemaphoreTake+0x68>
 8017390:	2301      	movs	r3, #1
 8017392:	e000      	b.n	8017396 <xQueueSemaphoreTake+0x6a>
 8017394:	2300      	movs	r3, #0
 8017396:	2b00      	cmp	r3, #0
 8017398:	d10b      	bne.n	80173b2 <xQueueSemaphoreTake+0x86>
 801739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801739e:	b672      	cpsid	i
 80173a0:	f383 8811 	msr	BASEPRI, r3
 80173a4:	f3bf 8f6f 	isb	sy
 80173a8:	f3bf 8f4f 	dsb	sy
 80173ac:	b662      	cpsie	i
 80173ae:	61bb      	str	r3, [r7, #24]
 80173b0:	e7fe      	b.n	80173b0 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80173b2:	f002 f829 	bl	8019408 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80173b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80173ba:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80173bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d024      	beq.n	801740c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80173c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80173c4:	1e5a      	subs	r2, r3, #1
 80173c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173c8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80173ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173cc:	681b      	ldr	r3, [r3, #0]
 80173ce:	2b00      	cmp	r3, #0
 80173d0:	d104      	bne.n	80173dc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80173d2:	f001 fb55 	bl	8018a80 <pvTaskIncrementMutexHeldCount>
 80173d6:	4602      	mov	r2, r0
 80173d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173da:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80173dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173de:	691b      	ldr	r3, [r3, #16]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d00f      	beq.n	8017404 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80173e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80173e6:	3310      	adds	r3, #16
 80173e8:	4618      	mov	r0, r3
 80173ea:	f001 f801 	bl	80183f0 <xTaskRemoveFromEventList>
 80173ee:	4603      	mov	r3, r0
 80173f0:	2b00      	cmp	r3, #0
 80173f2:	d007      	beq.n	8017404 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80173f4:	4b54      	ldr	r3, [pc, #336]	; (8017548 <xQueueSemaphoreTake+0x21c>)
 80173f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80173fa:	601a      	str	r2, [r3, #0]
 80173fc:	f3bf 8f4f 	dsb	sy
 8017400:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8017404:	f002 f832 	bl	801946c <vPortExitCritical>
				return pdPASS;
 8017408:	2301      	movs	r3, #1
 801740a:	e098      	b.n	801753e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801740c:	683b      	ldr	r3, [r7, #0]
 801740e:	2b00      	cmp	r3, #0
 8017410:	d112      	bne.n	8017438 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8017412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017414:	2b00      	cmp	r3, #0
 8017416:	d00b      	beq.n	8017430 <xQueueSemaphoreTake+0x104>
 8017418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801741c:	b672      	cpsid	i
 801741e:	f383 8811 	msr	BASEPRI, r3
 8017422:	f3bf 8f6f 	isb	sy
 8017426:	f3bf 8f4f 	dsb	sy
 801742a:	b662      	cpsie	i
 801742c:	617b      	str	r3, [r7, #20]
 801742e:	e7fe      	b.n	801742e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8017430:	f002 f81c 	bl	801946c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8017434:	2300      	movs	r3, #0
 8017436:	e082      	b.n	801753e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8017438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801743a:	2b00      	cmp	r3, #0
 801743c:	d106      	bne.n	801744c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801743e:	f107 030c 	add.w	r3, r7, #12
 8017442:	4618      	mov	r0, r3
 8017444:	f001 f838 	bl	80184b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8017448:	2301      	movs	r3, #1
 801744a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801744c:	f002 f80e 	bl	801946c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8017450:	f000 fd96 	bl	8017f80 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8017454:	f001 ffd8 	bl	8019408 <vPortEnterCritical>
 8017458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801745a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801745e:	b25b      	sxtb	r3, r3
 8017460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017464:	d103      	bne.n	801746e <xQueueSemaphoreTake+0x142>
 8017466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017468:	2200      	movs	r2, #0
 801746a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801746e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017470:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8017474:	b25b      	sxtb	r3, r3
 8017476:	f1b3 3fff 	cmp.w	r3, #4294967295
 801747a:	d103      	bne.n	8017484 <xQueueSemaphoreTake+0x158>
 801747c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801747e:	2200      	movs	r2, #0
 8017480:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8017484:	f001 fff2 	bl	801946c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8017488:	463a      	mov	r2, r7
 801748a:	f107 030c 	add.w	r3, r7, #12
 801748e:	4611      	mov	r1, r2
 8017490:	4618      	mov	r0, r3
 8017492:	f001 f827 	bl	80184e4 <xTaskCheckForTimeOut>
 8017496:	4603      	mov	r3, r0
 8017498:	2b00      	cmp	r3, #0
 801749a:	d132      	bne.n	8017502 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801749c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801749e:	f000 f9f6 	bl	801788e <prvIsQueueEmpty>
 80174a2:	4603      	mov	r3, r0
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d026      	beq.n	80174f6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80174a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174aa:	681b      	ldr	r3, [r3, #0]
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d109      	bne.n	80174c4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80174b0:	f001 ffaa 	bl	8019408 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80174b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174b6:	689b      	ldr	r3, [r3, #8]
 80174b8:	4618      	mov	r0, r3
 80174ba:	f001 f985 	bl	80187c8 <xTaskPriorityInherit>
 80174be:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80174c0:	f001 ffd4 	bl	801946c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80174c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80174c6:	3324      	adds	r3, #36	; 0x24
 80174c8:	683a      	ldr	r2, [r7, #0]
 80174ca:	4611      	mov	r1, r2
 80174cc:	4618      	mov	r0, r3
 80174ce:	f000 ff3d 	bl	801834c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80174d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174d4:	f000 f989 	bl	80177ea <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80174d8:	f000 fd60 	bl	8017f9c <xTaskResumeAll>
 80174dc:	4603      	mov	r3, r0
 80174de:	2b00      	cmp	r3, #0
 80174e0:	f47f af67 	bne.w	80173b2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80174e4:	4b18      	ldr	r3, [pc, #96]	; (8017548 <xQueueSemaphoreTake+0x21c>)
 80174e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80174ea:	601a      	str	r2, [r3, #0]
 80174ec:	f3bf 8f4f 	dsb	sy
 80174f0:	f3bf 8f6f 	isb	sy
 80174f4:	e75d      	b.n	80173b2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80174f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80174f8:	f000 f977 	bl	80177ea <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80174fc:	f000 fd4e 	bl	8017f9c <xTaskResumeAll>
 8017500:	e757      	b.n	80173b2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8017502:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017504:	f000 f971 	bl	80177ea <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8017508:	f000 fd48 	bl	8017f9c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801750c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801750e:	f000 f9be 	bl	801788e <prvIsQueueEmpty>
 8017512:	4603      	mov	r3, r0
 8017514:	2b00      	cmp	r3, #0
 8017516:	f43f af4c 	beq.w	80173b2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801751a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801751c:	2b00      	cmp	r3, #0
 801751e:	d00d      	beq.n	801753c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8017520:	f001 ff72 	bl	8019408 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8017524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8017526:	f000 f8b8 	bl	801769a <prvGetDisinheritPriorityAfterTimeout>
 801752a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801752c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801752e:	689b      	ldr	r3, [r3, #8]
 8017530:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017532:	4618      	mov	r0, r3
 8017534:	f001 fa20 	bl	8018978 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8017538:	f001 ff98 	bl	801946c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801753c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801753e:	4618      	mov	r0, r3
 8017540:	3738      	adds	r7, #56	; 0x38
 8017542:	46bd      	mov	sp, r7
 8017544:	bd80      	pop	{r7, pc}
 8017546:	bf00      	nop
 8017548:	e000ed04 	.word	0xe000ed04

0801754c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b08e      	sub	sp, #56	; 0x38
 8017550:	af00      	add	r7, sp, #0
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	60b9      	str	r1, [r7, #8]
 8017556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8017558:	68fb      	ldr	r3, [r7, #12]
 801755a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801755c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801755e:	2b00      	cmp	r3, #0
 8017560:	d10b      	bne.n	801757a <xQueueReceiveFromISR+0x2e>
 8017562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017566:	b672      	cpsid	i
 8017568:	f383 8811 	msr	BASEPRI, r3
 801756c:	f3bf 8f6f 	isb	sy
 8017570:	f3bf 8f4f 	dsb	sy
 8017574:	b662      	cpsie	i
 8017576:	623b      	str	r3, [r7, #32]
 8017578:	e7fe      	b.n	8017578 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d103      	bne.n	8017588 <xQueueReceiveFromISR+0x3c>
 8017580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017584:	2b00      	cmp	r3, #0
 8017586:	d101      	bne.n	801758c <xQueueReceiveFromISR+0x40>
 8017588:	2301      	movs	r3, #1
 801758a:	e000      	b.n	801758e <xQueueReceiveFromISR+0x42>
 801758c:	2300      	movs	r3, #0
 801758e:	2b00      	cmp	r3, #0
 8017590:	d10b      	bne.n	80175aa <xQueueReceiveFromISR+0x5e>
 8017592:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017596:	b672      	cpsid	i
 8017598:	f383 8811 	msr	BASEPRI, r3
 801759c:	f3bf 8f6f 	isb	sy
 80175a0:	f3bf 8f4f 	dsb	sy
 80175a4:	b662      	cpsie	i
 80175a6:	61fb      	str	r3, [r7, #28]
 80175a8:	e7fe      	b.n	80175a8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80175aa:	f002 f80d 	bl	80195c8 <vPortValidateInterruptPriority>
	__asm volatile
 80175ae:	f3ef 8211 	mrs	r2, BASEPRI
 80175b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80175b6:	b672      	cpsid	i
 80175b8:	f383 8811 	msr	BASEPRI, r3
 80175bc:	f3bf 8f6f 	isb	sy
 80175c0:	f3bf 8f4f 	dsb	sy
 80175c4:	b662      	cpsie	i
 80175c6:	61ba      	str	r2, [r7, #24]
 80175c8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80175ca:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80175cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80175ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80175d2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80175d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d02f      	beq.n	801763a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80175da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80175e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80175e4:	68b9      	ldr	r1, [r7, #8]
 80175e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80175e8:	f000 f8d9 	bl	801779e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80175ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ee:	1e5a      	subs	r2, r3, #1
 80175f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80175f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80175f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80175f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80175fc:	d112      	bne.n	8017624 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80175fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017600:	691b      	ldr	r3, [r3, #16]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d016      	beq.n	8017634 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017608:	3310      	adds	r3, #16
 801760a:	4618      	mov	r0, r3
 801760c:	f000 fef0 	bl	80183f0 <xTaskRemoveFromEventList>
 8017610:	4603      	mov	r3, r0
 8017612:	2b00      	cmp	r3, #0
 8017614:	d00e      	beq.n	8017634 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d00b      	beq.n	8017634 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2201      	movs	r2, #1
 8017620:	601a      	str	r2, [r3, #0]
 8017622:	e007      	b.n	8017634 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8017624:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017628:	3301      	adds	r3, #1
 801762a:	b2db      	uxtb	r3, r3
 801762c:	b25a      	sxtb	r2, r3
 801762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017630:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8017634:	2301      	movs	r3, #1
 8017636:	637b      	str	r3, [r7, #52]	; 0x34
 8017638:	e001      	b.n	801763e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 801763a:	2300      	movs	r3, #0
 801763c:	637b      	str	r3, [r7, #52]	; 0x34
 801763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017640:	613b      	str	r3, [r7, #16]
	__asm volatile
 8017642:	693b      	ldr	r3, [r7, #16]
 8017644:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8017648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801764a:	4618      	mov	r0, r3
 801764c:	3738      	adds	r7, #56	; 0x38
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}

08017652 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8017652:	b580      	push	{r7, lr}
 8017654:	b084      	sub	sp, #16
 8017656:	af00      	add	r7, sp, #0
 8017658:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801765e:	68fb      	ldr	r3, [r7, #12]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d10b      	bne.n	801767c <vQueueDelete+0x2a>
	__asm volatile
 8017664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017668:	b672      	cpsid	i
 801766a:	f383 8811 	msr	BASEPRI, r3
 801766e:	f3bf 8f6f 	isb	sy
 8017672:	f3bf 8f4f 	dsb	sy
 8017676:	b662      	cpsie	i
 8017678:	60bb      	str	r3, [r7, #8]
 801767a:	e7fe      	b.n	801767a <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 801767c:	68f8      	ldr	r0, [r7, #12]
 801767e:	f000 f95d 	bl	801793c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8017682:	68fb      	ldr	r3, [r7, #12]
 8017684:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8017688:	2b00      	cmp	r3, #0
 801768a:	d102      	bne.n	8017692 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 801768c:	68f8      	ldr	r0, [r7, #12]
 801768e:	f002 f8a5 	bl	80197dc <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8017692:	bf00      	nop
 8017694:	3710      	adds	r7, #16
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}

0801769a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801769a:	b480      	push	{r7}
 801769c:	b085      	sub	sp, #20
 801769e:	af00      	add	r7, sp, #0
 80176a0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	d006      	beq.n	80176b8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80176aa:	687b      	ldr	r3, [r7, #4]
 80176ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80176ae:	681b      	ldr	r3, [r3, #0]
 80176b0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80176b4:	60fb      	str	r3, [r7, #12]
 80176b6:	e001      	b.n	80176bc <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80176b8:	2300      	movs	r3, #0
 80176ba:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80176bc:	68fb      	ldr	r3, [r7, #12]
	}
 80176be:	4618      	mov	r0, r3
 80176c0:	3714      	adds	r7, #20
 80176c2:	46bd      	mov	sp, r7
 80176c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c8:	4770      	bx	lr

080176ca <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80176ca:	b580      	push	{r7, lr}
 80176cc:	b086      	sub	sp, #24
 80176ce:	af00      	add	r7, sp, #0
 80176d0:	60f8      	str	r0, [r7, #12]
 80176d2:	60b9      	str	r1, [r7, #8]
 80176d4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80176d6:	2300      	movs	r3, #0
 80176d8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80176de:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80176e0:	68fb      	ldr	r3, [r7, #12]
 80176e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d10d      	bne.n	8017704 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80176e8:	68fb      	ldr	r3, [r7, #12]
 80176ea:	681b      	ldr	r3, [r3, #0]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	d14d      	bne.n	801778c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80176f0:	68fb      	ldr	r3, [r7, #12]
 80176f2:	689b      	ldr	r3, [r3, #8]
 80176f4:	4618      	mov	r0, r3
 80176f6:	f001 f8cf 	bl	8018898 <xTaskPriorityDisinherit>
 80176fa:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	2200      	movs	r2, #0
 8017700:	609a      	str	r2, [r3, #8]
 8017702:	e043      	b.n	801778c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d119      	bne.n	801773e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801770a:	68fb      	ldr	r3, [r7, #12]
 801770c:	6858      	ldr	r0, [r3, #4]
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017712:	461a      	mov	r2, r3
 8017714:	68b9      	ldr	r1, [r7, #8]
 8017716:	f002 ff1b 	bl	801a550 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801771a:	68fb      	ldr	r3, [r7, #12]
 801771c:	685a      	ldr	r2, [r3, #4]
 801771e:	68fb      	ldr	r3, [r7, #12]
 8017720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017722:	441a      	add	r2, r3
 8017724:	68fb      	ldr	r3, [r7, #12]
 8017726:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8017728:	68fb      	ldr	r3, [r7, #12]
 801772a:	685a      	ldr	r2, [r3, #4]
 801772c:	68fb      	ldr	r3, [r7, #12]
 801772e:	689b      	ldr	r3, [r3, #8]
 8017730:	429a      	cmp	r2, r3
 8017732:	d32b      	bcc.n	801778c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8017734:	68fb      	ldr	r3, [r7, #12]
 8017736:	681a      	ldr	r2, [r3, #0]
 8017738:	68fb      	ldr	r3, [r7, #12]
 801773a:	605a      	str	r2, [r3, #4]
 801773c:	e026      	b.n	801778c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	68d8      	ldr	r0, [r3, #12]
 8017742:	68fb      	ldr	r3, [r7, #12]
 8017744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017746:	461a      	mov	r2, r3
 8017748:	68b9      	ldr	r1, [r7, #8]
 801774a:	f002 ff01 	bl	801a550 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 801774e:	68fb      	ldr	r3, [r7, #12]
 8017750:	68da      	ldr	r2, [r3, #12]
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017756:	425b      	negs	r3, r3
 8017758:	441a      	add	r2, r3
 801775a:	68fb      	ldr	r3, [r7, #12]
 801775c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801775e:	68fb      	ldr	r3, [r7, #12]
 8017760:	68da      	ldr	r2, [r3, #12]
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	681b      	ldr	r3, [r3, #0]
 8017766:	429a      	cmp	r2, r3
 8017768:	d207      	bcs.n	801777a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801776a:	68fb      	ldr	r3, [r7, #12]
 801776c:	689a      	ldr	r2, [r3, #8]
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017772:	425b      	negs	r3, r3
 8017774:	441a      	add	r2, r3
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2b02      	cmp	r3, #2
 801777e:	d105      	bne.n	801778c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8017780:	693b      	ldr	r3, [r7, #16]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d002      	beq.n	801778c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8017786:	693b      	ldr	r3, [r7, #16]
 8017788:	3b01      	subs	r3, #1
 801778a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801778c:	693b      	ldr	r3, [r7, #16]
 801778e:	1c5a      	adds	r2, r3, #1
 8017790:	68fb      	ldr	r3, [r7, #12]
 8017792:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8017794:	697b      	ldr	r3, [r7, #20]
}
 8017796:	4618      	mov	r0, r3
 8017798:	3718      	adds	r7, #24
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}

0801779e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801779e:	b580      	push	{r7, lr}
 80177a0:	b082      	sub	sp, #8
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	6078      	str	r0, [r7, #4]
 80177a6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d018      	beq.n	80177e2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	68da      	ldr	r2, [r3, #12]
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177b8:	441a      	add	r2, r3
 80177ba:	687b      	ldr	r3, [r7, #4]
 80177bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80177be:	687b      	ldr	r3, [r7, #4]
 80177c0:	68da      	ldr	r2, [r3, #12]
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	689b      	ldr	r3, [r3, #8]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d303      	bcc.n	80177d2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681a      	ldr	r2, [r3, #0]
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	68d9      	ldr	r1, [r3, #12]
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80177da:	461a      	mov	r2, r3
 80177dc:	6838      	ldr	r0, [r7, #0]
 80177de:	f002 feb7 	bl	801a550 <memcpy>
	}
}
 80177e2:	bf00      	nop
 80177e4:	3708      	adds	r7, #8
 80177e6:	46bd      	mov	sp, r7
 80177e8:	bd80      	pop	{r7, pc}

080177ea <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80177ea:	b580      	push	{r7, lr}
 80177ec:	b084      	sub	sp, #16
 80177ee:	af00      	add	r7, sp, #0
 80177f0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80177f2:	f001 fe09 	bl	8019408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80177f6:	687b      	ldr	r3, [r7, #4]
 80177f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80177fc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80177fe:	e011      	b.n	8017824 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017804:	2b00      	cmp	r3, #0
 8017806:	d012      	beq.n	801782e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	3324      	adds	r3, #36	; 0x24
 801780c:	4618      	mov	r0, r3
 801780e:	f000 fdef 	bl	80183f0 <xTaskRemoveFromEventList>
 8017812:	4603      	mov	r3, r0
 8017814:	2b00      	cmp	r3, #0
 8017816:	d001      	beq.n	801781c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8017818:	f000 fec8 	bl	80185ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801781c:	7bfb      	ldrb	r3, [r7, #15]
 801781e:	3b01      	subs	r3, #1
 8017820:	b2db      	uxtb	r3, r3
 8017822:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8017824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017828:	2b00      	cmp	r3, #0
 801782a:	dce9      	bgt.n	8017800 <prvUnlockQueue+0x16>
 801782c:	e000      	b.n	8017830 <prvUnlockQueue+0x46>
					break;
 801782e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	22ff      	movs	r2, #255	; 0xff
 8017834:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8017838:	f001 fe18 	bl	801946c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801783c:	f001 fde4 	bl	8019408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8017846:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8017848:	e011      	b.n	801786e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	691b      	ldr	r3, [r3, #16]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d012      	beq.n	8017878 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	3310      	adds	r3, #16
 8017856:	4618      	mov	r0, r3
 8017858:	f000 fdca 	bl	80183f0 <xTaskRemoveFromEventList>
 801785c:	4603      	mov	r3, r0
 801785e:	2b00      	cmp	r3, #0
 8017860:	d001      	beq.n	8017866 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8017862:	f000 fea3 	bl	80185ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8017866:	7bbb      	ldrb	r3, [r7, #14]
 8017868:	3b01      	subs	r3, #1
 801786a:	b2db      	uxtb	r3, r3
 801786c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801786e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8017872:	2b00      	cmp	r3, #0
 8017874:	dce9      	bgt.n	801784a <prvUnlockQueue+0x60>
 8017876:	e000      	b.n	801787a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8017878:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	22ff      	movs	r2, #255	; 0xff
 801787e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8017882:	f001 fdf3 	bl	801946c <vPortExitCritical>
}
 8017886:	bf00      	nop
 8017888:	3710      	adds	r7, #16
 801788a:	46bd      	mov	sp, r7
 801788c:	bd80      	pop	{r7, pc}

0801788e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801788e:	b580      	push	{r7, lr}
 8017890:	b084      	sub	sp, #16
 8017892:	af00      	add	r7, sp, #0
 8017894:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8017896:	f001 fdb7 	bl	8019408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 801789a:	687b      	ldr	r3, [r7, #4]
 801789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801789e:	2b00      	cmp	r3, #0
 80178a0:	d102      	bne.n	80178a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80178a2:	2301      	movs	r3, #1
 80178a4:	60fb      	str	r3, [r7, #12]
 80178a6:	e001      	b.n	80178ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80178a8:	2300      	movs	r3, #0
 80178aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80178ac:	f001 fdde 	bl	801946c <vPortExitCritical>

	return xReturn;
 80178b0:	68fb      	ldr	r3, [r7, #12]
}
 80178b2:	4618      	mov	r0, r3
 80178b4:	3710      	adds	r7, #16
 80178b6:	46bd      	mov	sp, r7
 80178b8:	bd80      	pop	{r7, pc}

080178ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80178ba:	b580      	push	{r7, lr}
 80178bc:	b084      	sub	sp, #16
 80178be:	af00      	add	r7, sp, #0
 80178c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80178c2:	f001 fda1 	bl	8019408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80178ce:	429a      	cmp	r2, r3
 80178d0:	d102      	bne.n	80178d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80178d2:	2301      	movs	r3, #1
 80178d4:	60fb      	str	r3, [r7, #12]
 80178d6:	e001      	b.n	80178dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80178d8:	2300      	movs	r3, #0
 80178da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80178dc:	f001 fdc6 	bl	801946c <vPortExitCritical>

	return xReturn;
 80178e0:	68fb      	ldr	r3, [r7, #12]
}
 80178e2:	4618      	mov	r0, r3
 80178e4:	3710      	adds	r7, #16
 80178e6:	46bd      	mov	sp, r7
 80178e8:	bd80      	pop	{r7, pc}
	...

080178ec <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80178ec:	b480      	push	{r7}
 80178ee:	b085      	sub	sp, #20
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	6078      	str	r0, [r7, #4]
 80178f4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80178f6:	2300      	movs	r3, #0
 80178f8:	60fb      	str	r3, [r7, #12]
 80178fa:	e014      	b.n	8017926 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80178fc:	4a0e      	ldr	r2, [pc, #56]	; (8017938 <vQueueAddToRegistry+0x4c>)
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8017904:	2b00      	cmp	r3, #0
 8017906:	d10b      	bne.n	8017920 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8017908:	490b      	ldr	r1, [pc, #44]	; (8017938 <vQueueAddToRegistry+0x4c>)
 801790a:	68fb      	ldr	r3, [r7, #12]
 801790c:	683a      	ldr	r2, [r7, #0]
 801790e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8017912:	4a09      	ldr	r2, [pc, #36]	; (8017938 <vQueueAddToRegistry+0x4c>)
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	00db      	lsls	r3, r3, #3
 8017918:	4413      	add	r3, r2
 801791a:	687a      	ldr	r2, [r7, #4]
 801791c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801791e:	e005      	b.n	801792c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017920:	68fb      	ldr	r3, [r7, #12]
 8017922:	3301      	adds	r3, #1
 8017924:	60fb      	str	r3, [r7, #12]
 8017926:	68fb      	ldr	r3, [r7, #12]
 8017928:	2b07      	cmp	r3, #7
 801792a:	d9e7      	bls.n	80178fc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801792c:	bf00      	nop
 801792e:	3714      	adds	r7, #20
 8017930:	46bd      	mov	sp, r7
 8017932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017936:	4770      	bx	lr
 8017938:	2001cb54 	.word	0x2001cb54

0801793c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 801793c:	b480      	push	{r7}
 801793e:	b085      	sub	sp, #20
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017944:	2300      	movs	r3, #0
 8017946:	60fb      	str	r3, [r7, #12]
 8017948:	e016      	b.n	8017978 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801794a:	4a10      	ldr	r2, [pc, #64]	; (801798c <vQueueUnregisterQueue+0x50>)
 801794c:	68fb      	ldr	r3, [r7, #12]
 801794e:	00db      	lsls	r3, r3, #3
 8017950:	4413      	add	r3, r2
 8017952:	685b      	ldr	r3, [r3, #4]
 8017954:	687a      	ldr	r2, [r7, #4]
 8017956:	429a      	cmp	r2, r3
 8017958:	d10b      	bne.n	8017972 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801795a:	4a0c      	ldr	r2, [pc, #48]	; (801798c <vQueueUnregisterQueue+0x50>)
 801795c:	68fb      	ldr	r3, [r7, #12]
 801795e:	2100      	movs	r1, #0
 8017960:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8017964:	4a09      	ldr	r2, [pc, #36]	; (801798c <vQueueUnregisterQueue+0x50>)
 8017966:	68fb      	ldr	r3, [r7, #12]
 8017968:	00db      	lsls	r3, r3, #3
 801796a:	4413      	add	r3, r2
 801796c:	2200      	movs	r2, #0
 801796e:	605a      	str	r2, [r3, #4]
				break;
 8017970:	e005      	b.n	801797e <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8017972:	68fb      	ldr	r3, [r7, #12]
 8017974:	3301      	adds	r3, #1
 8017976:	60fb      	str	r3, [r7, #12]
 8017978:	68fb      	ldr	r3, [r7, #12]
 801797a:	2b07      	cmp	r3, #7
 801797c:	d9e5      	bls.n	801794a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801797e:	bf00      	nop
 8017980:	3714      	adds	r7, #20
 8017982:	46bd      	mov	sp, r7
 8017984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017988:	4770      	bx	lr
 801798a:	bf00      	nop
 801798c:	2001cb54 	.word	0x2001cb54

08017990 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8017990:	b580      	push	{r7, lr}
 8017992:	b086      	sub	sp, #24
 8017994:	af00      	add	r7, sp, #0
 8017996:	60f8      	str	r0, [r7, #12]
 8017998:	60b9      	str	r1, [r7, #8]
 801799a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801799c:	68fb      	ldr	r3, [r7, #12]
 801799e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80179a0:	f001 fd32 	bl	8019408 <vPortEnterCritical>
 80179a4:	697b      	ldr	r3, [r7, #20]
 80179a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80179aa:	b25b      	sxtb	r3, r3
 80179ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179b0:	d103      	bne.n	80179ba <vQueueWaitForMessageRestricted+0x2a>
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	2200      	movs	r2, #0
 80179b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80179ba:	697b      	ldr	r3, [r7, #20]
 80179bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80179c0:	b25b      	sxtb	r3, r3
 80179c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80179c6:	d103      	bne.n	80179d0 <vQueueWaitForMessageRestricted+0x40>
 80179c8:	697b      	ldr	r3, [r7, #20]
 80179ca:	2200      	movs	r2, #0
 80179cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80179d0:	f001 fd4c 	bl	801946c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80179d4:	697b      	ldr	r3, [r7, #20]
 80179d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d106      	bne.n	80179ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80179dc:	697b      	ldr	r3, [r7, #20]
 80179de:	3324      	adds	r3, #36	; 0x24
 80179e0:	687a      	ldr	r2, [r7, #4]
 80179e2:	68b9      	ldr	r1, [r7, #8]
 80179e4:	4618      	mov	r0, r3
 80179e6:	f000 fcd7 	bl	8018398 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80179ea:	6978      	ldr	r0, [r7, #20]
 80179ec:	f7ff fefd 	bl	80177ea <prvUnlockQueue>
	}
 80179f0:	bf00      	nop
 80179f2:	3718      	adds	r7, #24
 80179f4:	46bd      	mov	sp, r7
 80179f6:	bd80      	pop	{r7, pc}

080179f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	b08e      	sub	sp, #56	; 0x38
 80179fc:	af04      	add	r7, sp, #16
 80179fe:	60f8      	str	r0, [r7, #12]
 8017a00:	60b9      	str	r1, [r7, #8]
 8017a02:	607a      	str	r2, [r7, #4]
 8017a04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8017a06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a08:	2b00      	cmp	r3, #0
 8017a0a:	d10b      	bne.n	8017a24 <xTaskCreateStatic+0x2c>
 8017a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a10:	b672      	cpsid	i
 8017a12:	f383 8811 	msr	BASEPRI, r3
 8017a16:	f3bf 8f6f 	isb	sy
 8017a1a:	f3bf 8f4f 	dsb	sy
 8017a1e:	b662      	cpsie	i
 8017a20:	623b      	str	r3, [r7, #32]
 8017a22:	e7fe      	b.n	8017a22 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 8017a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d10b      	bne.n	8017a42 <xTaskCreateStatic+0x4a>
 8017a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a2e:	b672      	cpsid	i
 8017a30:	f383 8811 	msr	BASEPRI, r3
 8017a34:	f3bf 8f6f 	isb	sy
 8017a38:	f3bf 8f4f 	dsb	sy
 8017a3c:	b662      	cpsie	i
 8017a3e:	61fb      	str	r3, [r7, #28]
 8017a40:	e7fe      	b.n	8017a40 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8017a42:	235c      	movs	r3, #92	; 0x5c
 8017a44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8017a46:	693b      	ldr	r3, [r7, #16]
 8017a48:	2b5c      	cmp	r3, #92	; 0x5c
 8017a4a:	d00b      	beq.n	8017a64 <xTaskCreateStatic+0x6c>
 8017a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017a50:	b672      	cpsid	i
 8017a52:	f383 8811 	msr	BASEPRI, r3
 8017a56:	f3bf 8f6f 	isb	sy
 8017a5a:	f3bf 8f4f 	dsb	sy
 8017a5e:	b662      	cpsie	i
 8017a60:	61bb      	str	r3, [r7, #24]
 8017a62:	e7fe      	b.n	8017a62 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8017a64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8017a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d01e      	beq.n	8017aaa <xTaskCreateStatic+0xb2>
 8017a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d01b      	beq.n	8017aaa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8017a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a74:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8017a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017a7a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8017a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a7e:	2202      	movs	r2, #2
 8017a80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8017a84:	2300      	movs	r3, #0
 8017a86:	9303      	str	r3, [sp, #12]
 8017a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a8a:	9302      	str	r3, [sp, #8]
 8017a8c:	f107 0314 	add.w	r3, r7, #20
 8017a90:	9301      	str	r3, [sp, #4]
 8017a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a94:	9300      	str	r3, [sp, #0]
 8017a96:	683b      	ldr	r3, [r7, #0]
 8017a98:	687a      	ldr	r2, [r7, #4]
 8017a9a:	68b9      	ldr	r1, [r7, #8]
 8017a9c:	68f8      	ldr	r0, [r7, #12]
 8017a9e:	f000 f850 	bl	8017b42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017aa2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017aa4:	f000 f8de 	bl	8017c64 <prvAddNewTaskToReadyList>
 8017aa8:	e001      	b.n	8017aae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8017aaa:	2300      	movs	r3, #0
 8017aac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8017aae:	697b      	ldr	r3, [r7, #20]
	}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3728      	adds	r7, #40	; 0x28
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8017ab8:	b580      	push	{r7, lr}
 8017aba:	b08c      	sub	sp, #48	; 0x30
 8017abc:	af04      	add	r7, sp, #16
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	603b      	str	r3, [r7, #0]
 8017ac4:	4613      	mov	r3, r2
 8017ac6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8017ac8:	88fb      	ldrh	r3, [r7, #6]
 8017aca:	009b      	lsls	r3, r3, #2
 8017acc:	4618      	mov	r0, r3
 8017ace:	f001 fdbd 	bl	801964c <pvPortMalloc>
 8017ad2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8017ad4:	697b      	ldr	r3, [r7, #20]
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d00e      	beq.n	8017af8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8017ada:	205c      	movs	r0, #92	; 0x5c
 8017adc:	f001 fdb6 	bl	801964c <pvPortMalloc>
 8017ae0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8017ae2:	69fb      	ldr	r3, [r7, #28]
 8017ae4:	2b00      	cmp	r3, #0
 8017ae6:	d003      	beq.n	8017af0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8017ae8:	69fb      	ldr	r3, [r7, #28]
 8017aea:	697a      	ldr	r2, [r7, #20]
 8017aec:	631a      	str	r2, [r3, #48]	; 0x30
 8017aee:	e005      	b.n	8017afc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8017af0:	6978      	ldr	r0, [r7, #20]
 8017af2:	f001 fe73 	bl	80197dc <vPortFree>
 8017af6:	e001      	b.n	8017afc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8017af8:	2300      	movs	r3, #0
 8017afa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8017afc:	69fb      	ldr	r3, [r7, #28]
 8017afe:	2b00      	cmp	r3, #0
 8017b00:	d017      	beq.n	8017b32 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	2200      	movs	r2, #0
 8017b06:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8017b0a:	88fa      	ldrh	r2, [r7, #6]
 8017b0c:	2300      	movs	r3, #0
 8017b0e:	9303      	str	r3, [sp, #12]
 8017b10:	69fb      	ldr	r3, [r7, #28]
 8017b12:	9302      	str	r3, [sp, #8]
 8017b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017b16:	9301      	str	r3, [sp, #4]
 8017b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017b1a:	9300      	str	r3, [sp, #0]
 8017b1c:	683b      	ldr	r3, [r7, #0]
 8017b1e:	68b9      	ldr	r1, [r7, #8]
 8017b20:	68f8      	ldr	r0, [r7, #12]
 8017b22:	f000 f80e 	bl	8017b42 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8017b26:	69f8      	ldr	r0, [r7, #28]
 8017b28:	f000 f89c 	bl	8017c64 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8017b2c:	2301      	movs	r3, #1
 8017b2e:	61bb      	str	r3, [r7, #24]
 8017b30:	e002      	b.n	8017b38 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8017b32:	f04f 33ff 	mov.w	r3, #4294967295
 8017b36:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8017b38:	69bb      	ldr	r3, [r7, #24]
	}
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	3720      	adds	r7, #32
 8017b3e:	46bd      	mov	sp, r7
 8017b40:	bd80      	pop	{r7, pc}

08017b42 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8017b42:	b580      	push	{r7, lr}
 8017b44:	b088      	sub	sp, #32
 8017b46:	af00      	add	r7, sp, #0
 8017b48:	60f8      	str	r0, [r7, #12]
 8017b4a:	60b9      	str	r1, [r7, #8]
 8017b4c:	607a      	str	r2, [r7, #4]
 8017b4e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8017b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b52:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	009b      	lsls	r3, r3, #2
 8017b58:	461a      	mov	r2, r3
 8017b5a:	21a5      	movs	r1, #165	; 0xa5
 8017b5c:	f002 fd03 	bl	801a566 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8017b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8017b64:	6879      	ldr	r1, [r7, #4]
 8017b66:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8017b6a:	440b      	add	r3, r1
 8017b6c:	009b      	lsls	r3, r3, #2
 8017b6e:	4413      	add	r3, r2
 8017b70:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8017b72:	69bb      	ldr	r3, [r7, #24]
 8017b74:	f023 0307 	bic.w	r3, r3, #7
 8017b78:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8017b7a:	69bb      	ldr	r3, [r7, #24]
 8017b7c:	f003 0307 	and.w	r3, r3, #7
 8017b80:	2b00      	cmp	r3, #0
 8017b82:	d00b      	beq.n	8017b9c <prvInitialiseNewTask+0x5a>
 8017b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017b88:	b672      	cpsid	i
 8017b8a:	f383 8811 	msr	BASEPRI, r3
 8017b8e:	f3bf 8f6f 	isb	sy
 8017b92:	f3bf 8f4f 	dsb	sy
 8017b96:	b662      	cpsie	i
 8017b98:	617b      	str	r3, [r7, #20]
 8017b9a:	e7fe      	b.n	8017b9a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d01f      	beq.n	8017be2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	61fb      	str	r3, [r7, #28]
 8017ba6:	e012      	b.n	8017bce <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8017ba8:	68ba      	ldr	r2, [r7, #8]
 8017baa:	69fb      	ldr	r3, [r7, #28]
 8017bac:	4413      	add	r3, r2
 8017bae:	7819      	ldrb	r1, [r3, #0]
 8017bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017bb2:	69fb      	ldr	r3, [r7, #28]
 8017bb4:	4413      	add	r3, r2
 8017bb6:	3334      	adds	r3, #52	; 0x34
 8017bb8:	460a      	mov	r2, r1
 8017bba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8017bbc:	68ba      	ldr	r2, [r7, #8]
 8017bbe:	69fb      	ldr	r3, [r7, #28]
 8017bc0:	4413      	add	r3, r2
 8017bc2:	781b      	ldrb	r3, [r3, #0]
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d006      	beq.n	8017bd6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8017bc8:	69fb      	ldr	r3, [r7, #28]
 8017bca:	3301      	adds	r3, #1
 8017bcc:	61fb      	str	r3, [r7, #28]
 8017bce:	69fb      	ldr	r3, [r7, #28]
 8017bd0:	2b0f      	cmp	r3, #15
 8017bd2:	d9e9      	bls.n	8017ba8 <prvInitialiseNewTask+0x66>
 8017bd4:	e000      	b.n	8017bd8 <prvInitialiseNewTask+0x96>
			{
				break;
 8017bd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8017bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bda:	2200      	movs	r2, #0
 8017bdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017be0:	e003      	b.n	8017bea <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8017be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017be4:	2200      	movs	r2, #0
 8017be6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8017bea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bec:	2b37      	cmp	r3, #55	; 0x37
 8017bee:	d901      	bls.n	8017bf4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8017bf0:	2337      	movs	r3, #55	; 0x37
 8017bf2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8017bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bf6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8017bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017bfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8017c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c02:	2200      	movs	r2, #0
 8017c04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8017c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c08:	3304      	adds	r3, #4
 8017c0a:	4618      	mov	r0, r3
 8017c0c:	f7fe fd76 	bl	80166fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8017c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c12:	3318      	adds	r3, #24
 8017c14:	4618      	mov	r0, r3
 8017c16:	f7fe fd71 	bl	80166fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8017c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8017c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8017c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8017c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8017c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c32:	2200      	movs	r2, #0
 8017c34:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8017c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c38:	2200      	movs	r2, #0
 8017c3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8017c3e:	683a      	ldr	r2, [r7, #0]
 8017c40:	68f9      	ldr	r1, [r7, #12]
 8017c42:	69b8      	ldr	r0, [r7, #24]
 8017c44:	f001 fad8 	bl	80191f8 <pxPortInitialiseStack>
 8017c48:	4602      	mov	r2, r0
 8017c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8017c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d002      	beq.n	8017c5a <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8017c54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017c5a:	bf00      	nop
 8017c5c:	3720      	adds	r7, #32
 8017c5e:	46bd      	mov	sp, r7
 8017c60:	bd80      	pop	{r7, pc}
	...

08017c64 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8017c64:	b580      	push	{r7, lr}
 8017c66:	b082      	sub	sp, #8
 8017c68:	af00      	add	r7, sp, #0
 8017c6a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8017c6c:	f001 fbcc 	bl	8019408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8017c70:	4b2d      	ldr	r3, [pc, #180]	; (8017d28 <prvAddNewTaskToReadyList+0xc4>)
 8017c72:	681b      	ldr	r3, [r3, #0]
 8017c74:	3301      	adds	r3, #1
 8017c76:	4a2c      	ldr	r2, [pc, #176]	; (8017d28 <prvAddNewTaskToReadyList+0xc4>)
 8017c78:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8017c7a:	4b2c      	ldr	r3, [pc, #176]	; (8017d2c <prvAddNewTaskToReadyList+0xc8>)
 8017c7c:	681b      	ldr	r3, [r3, #0]
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d109      	bne.n	8017c96 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8017c82:	4a2a      	ldr	r2, [pc, #168]	; (8017d2c <prvAddNewTaskToReadyList+0xc8>)
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8017c88:	4b27      	ldr	r3, [pc, #156]	; (8017d28 <prvAddNewTaskToReadyList+0xc4>)
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	2b01      	cmp	r3, #1
 8017c8e:	d110      	bne.n	8017cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8017c90:	f000 fcb0 	bl	80185f4 <prvInitialiseTaskLists>
 8017c94:	e00d      	b.n	8017cb2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8017c96:	4b26      	ldr	r3, [pc, #152]	; (8017d30 <prvAddNewTaskToReadyList+0xcc>)
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	2b00      	cmp	r3, #0
 8017c9c:	d109      	bne.n	8017cb2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8017c9e:	4b23      	ldr	r3, [pc, #140]	; (8017d2c <prvAddNewTaskToReadyList+0xc8>)
 8017ca0:	681b      	ldr	r3, [r3, #0]
 8017ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017ca4:	687b      	ldr	r3, [r7, #4]
 8017ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017ca8:	429a      	cmp	r2, r3
 8017caa:	d802      	bhi.n	8017cb2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8017cac:	4a1f      	ldr	r2, [pc, #124]	; (8017d2c <prvAddNewTaskToReadyList+0xc8>)
 8017cae:	687b      	ldr	r3, [r7, #4]
 8017cb0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8017cb2:	4b20      	ldr	r3, [pc, #128]	; (8017d34 <prvAddNewTaskToReadyList+0xd0>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	3301      	adds	r3, #1
 8017cb8:	4a1e      	ldr	r2, [pc, #120]	; (8017d34 <prvAddNewTaskToReadyList+0xd0>)
 8017cba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8017cbc:	4b1d      	ldr	r3, [pc, #116]	; (8017d34 <prvAddNewTaskToReadyList+0xd0>)
 8017cbe:	681a      	ldr	r2, [r3, #0]
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cc8:	4b1b      	ldr	r3, [pc, #108]	; (8017d38 <prvAddNewTaskToReadyList+0xd4>)
 8017cca:	681b      	ldr	r3, [r3, #0]
 8017ccc:	429a      	cmp	r2, r3
 8017cce:	d903      	bls.n	8017cd8 <prvAddNewTaskToReadyList+0x74>
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017cd4:	4a18      	ldr	r2, [pc, #96]	; (8017d38 <prvAddNewTaskToReadyList+0xd4>)
 8017cd6:	6013      	str	r3, [r2, #0]
 8017cd8:	687b      	ldr	r3, [r7, #4]
 8017cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017cdc:	4613      	mov	r3, r2
 8017cde:	009b      	lsls	r3, r3, #2
 8017ce0:	4413      	add	r3, r2
 8017ce2:	009b      	lsls	r3, r3, #2
 8017ce4:	4a15      	ldr	r2, [pc, #84]	; (8017d3c <prvAddNewTaskToReadyList+0xd8>)
 8017ce6:	441a      	add	r2, r3
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	3304      	adds	r3, #4
 8017cec:	4619      	mov	r1, r3
 8017cee:	4610      	mov	r0, r2
 8017cf0:	f7fe fd11 	bl	8016716 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8017cf4:	f001 fbba 	bl	801946c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8017cf8:	4b0d      	ldr	r3, [pc, #52]	; (8017d30 <prvAddNewTaskToReadyList+0xcc>)
 8017cfa:	681b      	ldr	r3, [r3, #0]
 8017cfc:	2b00      	cmp	r3, #0
 8017cfe:	d00e      	beq.n	8017d1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8017d00:	4b0a      	ldr	r3, [pc, #40]	; (8017d2c <prvAddNewTaskToReadyList+0xc8>)
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017d0a:	429a      	cmp	r2, r3
 8017d0c:	d207      	bcs.n	8017d1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8017d0e:	4b0c      	ldr	r3, [pc, #48]	; (8017d40 <prvAddNewTaskToReadyList+0xdc>)
 8017d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017d14:	601a      	str	r2, [r3, #0]
 8017d16:	f3bf 8f4f 	dsb	sy
 8017d1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017d1e:	bf00      	nop
 8017d20:	3708      	adds	r7, #8
 8017d22:	46bd      	mov	sp, r7
 8017d24:	bd80      	pop	{r7, pc}
 8017d26:	bf00      	nop
 8017d28:	20000f04 	.word	0x20000f04
 8017d2c:	20000a30 	.word	0x20000a30
 8017d30:	20000f10 	.word	0x20000f10
 8017d34:	20000f20 	.word	0x20000f20
 8017d38:	20000f0c 	.word	0x20000f0c
 8017d3c:	20000a34 	.word	0x20000a34
 8017d40:	e000ed04 	.word	0xe000ed04

08017d44 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b08a      	sub	sp, #40	; 0x28
 8017d48:	af00      	add	r7, sp, #0
 8017d4a:	6078      	str	r0, [r7, #4]
 8017d4c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8017d4e:	2300      	movs	r3, #0
 8017d50:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	2b00      	cmp	r3, #0
 8017d56:	d10b      	bne.n	8017d70 <vTaskDelayUntil+0x2c>
 8017d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d5c:	b672      	cpsid	i
 8017d5e:	f383 8811 	msr	BASEPRI, r3
 8017d62:	f3bf 8f6f 	isb	sy
 8017d66:	f3bf 8f4f 	dsb	sy
 8017d6a:	b662      	cpsie	i
 8017d6c:	617b      	str	r3, [r7, #20]
 8017d6e:	e7fe      	b.n	8017d6e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 8017d70:	683b      	ldr	r3, [r7, #0]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d10b      	bne.n	8017d8e <vTaskDelayUntil+0x4a>
 8017d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d7a:	b672      	cpsid	i
 8017d7c:	f383 8811 	msr	BASEPRI, r3
 8017d80:	f3bf 8f6f 	isb	sy
 8017d84:	f3bf 8f4f 	dsb	sy
 8017d88:	b662      	cpsie	i
 8017d8a:	613b      	str	r3, [r7, #16]
 8017d8c:	e7fe      	b.n	8017d8c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 8017d8e:	4b2a      	ldr	r3, [pc, #168]	; (8017e38 <vTaskDelayUntil+0xf4>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	2b00      	cmp	r3, #0
 8017d94:	d00b      	beq.n	8017dae <vTaskDelayUntil+0x6a>
 8017d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017d9a:	b672      	cpsid	i
 8017d9c:	f383 8811 	msr	BASEPRI, r3
 8017da0:	f3bf 8f6f 	isb	sy
 8017da4:	f3bf 8f4f 	dsb	sy
 8017da8:	b662      	cpsie	i
 8017daa:	60fb      	str	r3, [r7, #12]
 8017dac:	e7fe      	b.n	8017dac <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 8017dae:	f000 f8e7 	bl	8017f80 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8017db2:	4b22      	ldr	r3, [pc, #136]	; (8017e3c <vTaskDelayUntil+0xf8>)
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	681b      	ldr	r3, [r3, #0]
 8017dbc:	683a      	ldr	r2, [r7, #0]
 8017dbe:	4413      	add	r3, r2
 8017dc0:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8017dc2:	687b      	ldr	r3, [r7, #4]
 8017dc4:	681b      	ldr	r3, [r3, #0]
 8017dc6:	6a3a      	ldr	r2, [r7, #32]
 8017dc8:	429a      	cmp	r2, r3
 8017dca:	d20b      	bcs.n	8017de4 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	69fa      	ldr	r2, [r7, #28]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d211      	bcs.n	8017dfa <vTaskDelayUntil+0xb6>
 8017dd6:	69fa      	ldr	r2, [r7, #28]
 8017dd8:	6a3b      	ldr	r3, [r7, #32]
 8017dda:	429a      	cmp	r2, r3
 8017ddc:	d90d      	bls.n	8017dfa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8017dde:	2301      	movs	r3, #1
 8017de0:	627b      	str	r3, [r7, #36]	; 0x24
 8017de2:	e00a      	b.n	8017dfa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	69fa      	ldr	r2, [r7, #28]
 8017dea:	429a      	cmp	r2, r3
 8017dec:	d303      	bcc.n	8017df6 <vTaskDelayUntil+0xb2>
 8017dee:	69fa      	ldr	r2, [r7, #28]
 8017df0:	6a3b      	ldr	r3, [r7, #32]
 8017df2:	429a      	cmp	r2, r3
 8017df4:	d901      	bls.n	8017dfa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8017df6:	2301      	movs	r3, #1
 8017df8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	69fa      	ldr	r2, [r7, #28]
 8017dfe:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8017e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d006      	beq.n	8017e14 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8017e06:	69fa      	ldr	r2, [r7, #28]
 8017e08:	6a3b      	ldr	r3, [r7, #32]
 8017e0a:	1ad3      	subs	r3, r2, r3
 8017e0c:	2100      	movs	r1, #0
 8017e0e:	4618      	mov	r0, r3
 8017e10:	f000 fe4a 	bl	8018aa8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8017e14:	f000 f8c2 	bl	8017f9c <xTaskResumeAll>
 8017e18:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017e1a:	69bb      	ldr	r3, [r7, #24]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d107      	bne.n	8017e30 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8017e20:	4b07      	ldr	r3, [pc, #28]	; (8017e40 <vTaskDelayUntil+0xfc>)
 8017e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e26:	601a      	str	r2, [r3, #0]
 8017e28:	f3bf 8f4f 	dsb	sy
 8017e2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017e30:	bf00      	nop
 8017e32:	3728      	adds	r7, #40	; 0x28
 8017e34:	46bd      	mov	sp, r7
 8017e36:	bd80      	pop	{r7, pc}
 8017e38:	20000f2c 	.word	0x20000f2c
 8017e3c:	20000f08 	.word	0x20000f08
 8017e40:	e000ed04 	.word	0xe000ed04

08017e44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8017e44:	b580      	push	{r7, lr}
 8017e46:	b084      	sub	sp, #16
 8017e48:	af00      	add	r7, sp, #0
 8017e4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d018      	beq.n	8017e88 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8017e56:	4b14      	ldr	r3, [pc, #80]	; (8017ea8 <vTaskDelay+0x64>)
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d00b      	beq.n	8017e76 <vTaskDelay+0x32>
 8017e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017e62:	b672      	cpsid	i
 8017e64:	f383 8811 	msr	BASEPRI, r3
 8017e68:	f3bf 8f6f 	isb	sy
 8017e6c:	f3bf 8f4f 	dsb	sy
 8017e70:	b662      	cpsie	i
 8017e72:	60bb      	str	r3, [r7, #8]
 8017e74:	e7fe      	b.n	8017e74 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8017e76:	f000 f883 	bl	8017f80 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8017e7a:	2100      	movs	r1, #0
 8017e7c:	6878      	ldr	r0, [r7, #4]
 8017e7e:	f000 fe13 	bl	8018aa8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8017e82:	f000 f88b 	bl	8017f9c <xTaskResumeAll>
 8017e86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	2b00      	cmp	r3, #0
 8017e8c:	d107      	bne.n	8017e9e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8017e8e:	4b07      	ldr	r3, [pc, #28]	; (8017eac <vTaskDelay+0x68>)
 8017e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8017e94:	601a      	str	r2, [r3, #0]
 8017e96:	f3bf 8f4f 	dsb	sy
 8017e9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8017e9e:	bf00      	nop
 8017ea0:	3710      	adds	r7, #16
 8017ea2:	46bd      	mov	sp, r7
 8017ea4:	bd80      	pop	{r7, pc}
 8017ea6:	bf00      	nop
 8017ea8:	20000f2c 	.word	0x20000f2c
 8017eac:	e000ed04 	.word	0xe000ed04

08017eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8017eb0:	b580      	push	{r7, lr}
 8017eb2:	b08a      	sub	sp, #40	; 0x28
 8017eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8017eba:	2300      	movs	r3, #0
 8017ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8017ebe:	463a      	mov	r2, r7
 8017ec0:	1d39      	adds	r1, r7, #4
 8017ec2:	f107 0308 	add.w	r3, r7, #8
 8017ec6:	4618      	mov	r0, r3
 8017ec8:	f7fe fbc4 	bl	8016654 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8017ecc:	6839      	ldr	r1, [r7, #0]
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	68ba      	ldr	r2, [r7, #8]
 8017ed2:	9202      	str	r2, [sp, #8]
 8017ed4:	9301      	str	r3, [sp, #4]
 8017ed6:	2300      	movs	r3, #0
 8017ed8:	9300      	str	r3, [sp, #0]
 8017eda:	2300      	movs	r3, #0
 8017edc:	460a      	mov	r2, r1
 8017ede:	4922      	ldr	r1, [pc, #136]	; (8017f68 <vTaskStartScheduler+0xb8>)
 8017ee0:	4822      	ldr	r0, [pc, #136]	; (8017f6c <vTaskStartScheduler+0xbc>)
 8017ee2:	f7ff fd89 	bl	80179f8 <xTaskCreateStatic>
 8017ee6:	4602      	mov	r2, r0
 8017ee8:	4b21      	ldr	r3, [pc, #132]	; (8017f70 <vTaskStartScheduler+0xc0>)
 8017eea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8017eec:	4b20      	ldr	r3, [pc, #128]	; (8017f70 <vTaskStartScheduler+0xc0>)
 8017eee:	681b      	ldr	r3, [r3, #0]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d002      	beq.n	8017efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8017ef4:	2301      	movs	r3, #1
 8017ef6:	617b      	str	r3, [r7, #20]
 8017ef8:	e001      	b.n	8017efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8017efa:	2300      	movs	r3, #0
 8017efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	2b01      	cmp	r3, #1
 8017f02:	d102      	bne.n	8017f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8017f04:	f000 fe24 	bl	8018b50 <xTimerCreateTimerTask>
 8017f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8017f0a:	697b      	ldr	r3, [r7, #20]
 8017f0c:	2b01      	cmp	r3, #1
 8017f0e:	d117      	bne.n	8017f40 <vTaskStartScheduler+0x90>
 8017f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f14:	b672      	cpsid	i
 8017f16:	f383 8811 	msr	BASEPRI, r3
 8017f1a:	f3bf 8f6f 	isb	sy
 8017f1e:	f3bf 8f4f 	dsb	sy
 8017f22:	b662      	cpsie	i
 8017f24:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8017f26:	4b13      	ldr	r3, [pc, #76]	; (8017f74 <vTaskStartScheduler+0xc4>)
 8017f28:	f04f 32ff 	mov.w	r2, #4294967295
 8017f2c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8017f2e:	4b12      	ldr	r3, [pc, #72]	; (8017f78 <vTaskStartScheduler+0xc8>)
 8017f30:	2201      	movs	r2, #1
 8017f32:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8017f34:	4b11      	ldr	r3, [pc, #68]	; (8017f7c <vTaskStartScheduler+0xcc>)
 8017f36:	2200      	movs	r2, #0
 8017f38:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8017f3a:	f001 f9e9 	bl	8019310 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8017f3e:	e00f      	b.n	8017f60 <vTaskStartScheduler+0xb0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8017f40:	697b      	ldr	r3, [r7, #20]
 8017f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f46:	d10b      	bne.n	8017f60 <vTaskStartScheduler+0xb0>
 8017f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017f4c:	b672      	cpsid	i
 8017f4e:	f383 8811 	msr	BASEPRI, r3
 8017f52:	f3bf 8f6f 	isb	sy
 8017f56:	f3bf 8f4f 	dsb	sy
 8017f5a:	b662      	cpsie	i
 8017f5c:	60fb      	str	r3, [r7, #12]
 8017f5e:	e7fe      	b.n	8017f5e <vTaskStartScheduler+0xae>
}
 8017f60:	bf00      	nop
 8017f62:	3718      	adds	r7, #24
 8017f64:	46bd      	mov	sp, r7
 8017f66:	bd80      	pop	{r7, pc}
 8017f68:	0801d54c 	.word	0x0801d54c
 8017f6c:	080185c5 	.word	0x080185c5
 8017f70:	20000f28 	.word	0x20000f28
 8017f74:	20000f24 	.word	0x20000f24
 8017f78:	20000f10 	.word	0x20000f10
 8017f7c:	20000f08 	.word	0x20000f08

08017f80 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8017f80:	b480      	push	{r7}
 8017f82:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8017f84:	4b04      	ldr	r3, [pc, #16]	; (8017f98 <vTaskSuspendAll+0x18>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	3301      	adds	r3, #1
 8017f8a:	4a03      	ldr	r2, [pc, #12]	; (8017f98 <vTaskSuspendAll+0x18>)
 8017f8c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8017f8e:	bf00      	nop
 8017f90:	46bd      	mov	sp, r7
 8017f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f96:	4770      	bx	lr
 8017f98:	20000f2c 	.word	0x20000f2c

08017f9c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b084      	sub	sp, #16
 8017fa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8017fa2:	2300      	movs	r3, #0
 8017fa4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8017fa6:	2300      	movs	r3, #0
 8017fa8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8017faa:	4b42      	ldr	r3, [pc, #264]	; (80180b4 <xTaskResumeAll+0x118>)
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d10b      	bne.n	8017fca <xTaskResumeAll+0x2e>
 8017fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8017fb6:	b672      	cpsid	i
 8017fb8:	f383 8811 	msr	BASEPRI, r3
 8017fbc:	f3bf 8f6f 	isb	sy
 8017fc0:	f3bf 8f4f 	dsb	sy
 8017fc4:	b662      	cpsie	i
 8017fc6:	603b      	str	r3, [r7, #0]
 8017fc8:	e7fe      	b.n	8017fc8 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8017fca:	f001 fa1d 	bl	8019408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8017fce:	4b39      	ldr	r3, [pc, #228]	; (80180b4 <xTaskResumeAll+0x118>)
 8017fd0:	681b      	ldr	r3, [r3, #0]
 8017fd2:	3b01      	subs	r3, #1
 8017fd4:	4a37      	ldr	r2, [pc, #220]	; (80180b4 <xTaskResumeAll+0x118>)
 8017fd6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8017fd8:	4b36      	ldr	r3, [pc, #216]	; (80180b4 <xTaskResumeAll+0x118>)
 8017fda:	681b      	ldr	r3, [r3, #0]
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d162      	bne.n	80180a6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8017fe0:	4b35      	ldr	r3, [pc, #212]	; (80180b8 <xTaskResumeAll+0x11c>)
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d05e      	beq.n	80180a6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8017fe8:	e02f      	b.n	801804a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017fea:	4b34      	ldr	r3, [pc, #208]	; (80180bc <xTaskResumeAll+0x120>)
 8017fec:	68db      	ldr	r3, [r3, #12]
 8017fee:	68db      	ldr	r3, [r3, #12]
 8017ff0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8017ff2:	68fb      	ldr	r3, [r7, #12]
 8017ff4:	3318      	adds	r3, #24
 8017ff6:	4618      	mov	r0, r3
 8017ff8:	f7fe fbea 	bl	80167d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	3304      	adds	r3, #4
 8018000:	4618      	mov	r0, r3
 8018002:	f7fe fbe5 	bl	80167d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801800a:	4b2d      	ldr	r3, [pc, #180]	; (80180c0 <xTaskResumeAll+0x124>)
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	429a      	cmp	r2, r3
 8018010:	d903      	bls.n	801801a <xTaskResumeAll+0x7e>
 8018012:	68fb      	ldr	r3, [r7, #12]
 8018014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018016:	4a2a      	ldr	r2, [pc, #168]	; (80180c0 <xTaskResumeAll+0x124>)
 8018018:	6013      	str	r3, [r2, #0]
 801801a:	68fb      	ldr	r3, [r7, #12]
 801801c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801801e:	4613      	mov	r3, r2
 8018020:	009b      	lsls	r3, r3, #2
 8018022:	4413      	add	r3, r2
 8018024:	009b      	lsls	r3, r3, #2
 8018026:	4a27      	ldr	r2, [pc, #156]	; (80180c4 <xTaskResumeAll+0x128>)
 8018028:	441a      	add	r2, r3
 801802a:	68fb      	ldr	r3, [r7, #12]
 801802c:	3304      	adds	r3, #4
 801802e:	4619      	mov	r1, r3
 8018030:	4610      	mov	r0, r2
 8018032:	f7fe fb70 	bl	8016716 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018036:	68fb      	ldr	r3, [r7, #12]
 8018038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801803a:	4b23      	ldr	r3, [pc, #140]	; (80180c8 <xTaskResumeAll+0x12c>)
 801803c:	681b      	ldr	r3, [r3, #0]
 801803e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018040:	429a      	cmp	r2, r3
 8018042:	d302      	bcc.n	801804a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8018044:	4b21      	ldr	r3, [pc, #132]	; (80180cc <xTaskResumeAll+0x130>)
 8018046:	2201      	movs	r2, #1
 8018048:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801804a:	4b1c      	ldr	r3, [pc, #112]	; (80180bc <xTaskResumeAll+0x120>)
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	2b00      	cmp	r3, #0
 8018050:	d1cb      	bne.n	8017fea <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018052:	68fb      	ldr	r3, [r7, #12]
 8018054:	2b00      	cmp	r3, #0
 8018056:	d001      	beq.n	801805c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018058:	f000 fb68 	bl	801872c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801805c:	4b1c      	ldr	r3, [pc, #112]	; (80180d0 <xTaskResumeAll+0x134>)
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8018062:	687b      	ldr	r3, [r7, #4]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d010      	beq.n	801808a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018068:	f000 f858 	bl	801811c <xTaskIncrementTick>
 801806c:	4603      	mov	r3, r0
 801806e:	2b00      	cmp	r3, #0
 8018070:	d002      	beq.n	8018078 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8018072:	4b16      	ldr	r3, [pc, #88]	; (80180cc <xTaskResumeAll+0x130>)
 8018074:	2201      	movs	r2, #1
 8018076:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	3b01      	subs	r3, #1
 801807c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801807e:	687b      	ldr	r3, [r7, #4]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d1f1      	bne.n	8018068 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8018084:	4b12      	ldr	r3, [pc, #72]	; (80180d0 <xTaskResumeAll+0x134>)
 8018086:	2200      	movs	r2, #0
 8018088:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801808a:	4b10      	ldr	r3, [pc, #64]	; (80180cc <xTaskResumeAll+0x130>)
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d009      	beq.n	80180a6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018092:	2301      	movs	r3, #1
 8018094:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018096:	4b0f      	ldr	r3, [pc, #60]	; (80180d4 <xTaskResumeAll+0x138>)
 8018098:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801809c:	601a      	str	r2, [r3, #0]
 801809e:	f3bf 8f4f 	dsb	sy
 80180a2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80180a6:	f001 f9e1 	bl	801946c <vPortExitCritical>

	return xAlreadyYielded;
 80180aa:	68bb      	ldr	r3, [r7, #8]
}
 80180ac:	4618      	mov	r0, r3
 80180ae:	3710      	adds	r7, #16
 80180b0:	46bd      	mov	sp, r7
 80180b2:	bd80      	pop	{r7, pc}
 80180b4:	20000f2c 	.word	0x20000f2c
 80180b8:	20000f04 	.word	0x20000f04
 80180bc:	20000ec4 	.word	0x20000ec4
 80180c0:	20000f0c 	.word	0x20000f0c
 80180c4:	20000a34 	.word	0x20000a34
 80180c8:	20000a30 	.word	0x20000a30
 80180cc:	20000f18 	.word	0x20000f18
 80180d0:	20000f14 	.word	0x20000f14
 80180d4:	e000ed04 	.word	0xe000ed04

080180d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80180d8:	b480      	push	{r7}
 80180da:	b083      	sub	sp, #12
 80180dc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80180de:	4b05      	ldr	r3, [pc, #20]	; (80180f4 <xTaskGetTickCount+0x1c>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80180e4:	687b      	ldr	r3, [r7, #4]
}
 80180e6:	4618      	mov	r0, r3
 80180e8:	370c      	adds	r7, #12
 80180ea:	46bd      	mov	sp, r7
 80180ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f0:	4770      	bx	lr
 80180f2:	bf00      	nop
 80180f4:	20000f08 	.word	0x20000f08

080180f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80180fe:	f001 fa63 	bl	80195c8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8018102:	2300      	movs	r3, #0
 8018104:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8018106:	4b04      	ldr	r3, [pc, #16]	; (8018118 <xTaskGetTickCountFromISR+0x20>)
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801810c:	683b      	ldr	r3, [r7, #0]
}
 801810e:	4618      	mov	r0, r3
 8018110:	3708      	adds	r7, #8
 8018112:	46bd      	mov	sp, r7
 8018114:	bd80      	pop	{r7, pc}
 8018116:	bf00      	nop
 8018118:	20000f08 	.word	0x20000f08

0801811c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801811c:	b580      	push	{r7, lr}
 801811e:	b086      	sub	sp, #24
 8018120:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8018122:	2300      	movs	r3, #0
 8018124:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018126:	4b4f      	ldr	r3, [pc, #316]	; (8018264 <xTaskIncrementTick+0x148>)
 8018128:	681b      	ldr	r3, [r3, #0]
 801812a:	2b00      	cmp	r3, #0
 801812c:	f040 808a 	bne.w	8018244 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8018130:	4b4d      	ldr	r3, [pc, #308]	; (8018268 <xTaskIncrementTick+0x14c>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	3301      	adds	r3, #1
 8018136:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8018138:	4a4b      	ldr	r2, [pc, #300]	; (8018268 <xTaskIncrementTick+0x14c>)
 801813a:	693b      	ldr	r3, [r7, #16]
 801813c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801813e:	693b      	ldr	r3, [r7, #16]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d121      	bne.n	8018188 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8018144:	4b49      	ldr	r3, [pc, #292]	; (801826c <xTaskIncrementTick+0x150>)
 8018146:	681b      	ldr	r3, [r3, #0]
 8018148:	681b      	ldr	r3, [r3, #0]
 801814a:	2b00      	cmp	r3, #0
 801814c:	d00b      	beq.n	8018166 <xTaskIncrementTick+0x4a>
 801814e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018152:	b672      	cpsid	i
 8018154:	f383 8811 	msr	BASEPRI, r3
 8018158:	f3bf 8f6f 	isb	sy
 801815c:	f3bf 8f4f 	dsb	sy
 8018160:	b662      	cpsie	i
 8018162:	603b      	str	r3, [r7, #0]
 8018164:	e7fe      	b.n	8018164 <xTaskIncrementTick+0x48>
 8018166:	4b41      	ldr	r3, [pc, #260]	; (801826c <xTaskIncrementTick+0x150>)
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	60fb      	str	r3, [r7, #12]
 801816c:	4b40      	ldr	r3, [pc, #256]	; (8018270 <xTaskIncrementTick+0x154>)
 801816e:	681b      	ldr	r3, [r3, #0]
 8018170:	4a3e      	ldr	r2, [pc, #248]	; (801826c <xTaskIncrementTick+0x150>)
 8018172:	6013      	str	r3, [r2, #0]
 8018174:	4a3e      	ldr	r2, [pc, #248]	; (8018270 <xTaskIncrementTick+0x154>)
 8018176:	68fb      	ldr	r3, [r7, #12]
 8018178:	6013      	str	r3, [r2, #0]
 801817a:	4b3e      	ldr	r3, [pc, #248]	; (8018274 <xTaskIncrementTick+0x158>)
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	3301      	adds	r3, #1
 8018180:	4a3c      	ldr	r2, [pc, #240]	; (8018274 <xTaskIncrementTick+0x158>)
 8018182:	6013      	str	r3, [r2, #0]
 8018184:	f000 fad2 	bl	801872c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018188:	4b3b      	ldr	r3, [pc, #236]	; (8018278 <xTaskIncrementTick+0x15c>)
 801818a:	681b      	ldr	r3, [r3, #0]
 801818c:	693a      	ldr	r2, [r7, #16]
 801818e:	429a      	cmp	r2, r3
 8018190:	d349      	bcc.n	8018226 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018192:	4b36      	ldr	r3, [pc, #216]	; (801826c <xTaskIncrementTick+0x150>)
 8018194:	681b      	ldr	r3, [r3, #0]
 8018196:	681b      	ldr	r3, [r3, #0]
 8018198:	2b00      	cmp	r3, #0
 801819a:	d104      	bne.n	80181a6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801819c:	4b36      	ldr	r3, [pc, #216]	; (8018278 <xTaskIncrementTick+0x15c>)
 801819e:	f04f 32ff 	mov.w	r2, #4294967295
 80181a2:	601a      	str	r2, [r3, #0]
					break;
 80181a4:	e03f      	b.n	8018226 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80181a6:	4b31      	ldr	r3, [pc, #196]	; (801826c <xTaskIncrementTick+0x150>)
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	68db      	ldr	r3, [r3, #12]
 80181ac:	68db      	ldr	r3, [r3, #12]
 80181ae:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80181b0:	68bb      	ldr	r3, [r7, #8]
 80181b2:	685b      	ldr	r3, [r3, #4]
 80181b4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80181b6:	693a      	ldr	r2, [r7, #16]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	429a      	cmp	r2, r3
 80181bc:	d203      	bcs.n	80181c6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80181be:	4a2e      	ldr	r2, [pc, #184]	; (8018278 <xTaskIncrementTick+0x15c>)
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80181c4:	e02f      	b.n	8018226 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80181c6:	68bb      	ldr	r3, [r7, #8]
 80181c8:	3304      	adds	r3, #4
 80181ca:	4618      	mov	r0, r3
 80181cc:	f7fe fb00 	bl	80167d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80181d0:	68bb      	ldr	r3, [r7, #8]
 80181d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d004      	beq.n	80181e2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80181d8:	68bb      	ldr	r3, [r7, #8]
 80181da:	3318      	adds	r3, #24
 80181dc:	4618      	mov	r0, r3
 80181de:	f7fe faf7 	bl	80167d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80181e2:	68bb      	ldr	r3, [r7, #8]
 80181e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181e6:	4b25      	ldr	r3, [pc, #148]	; (801827c <xTaskIncrementTick+0x160>)
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	d903      	bls.n	80181f6 <xTaskIncrementTick+0xda>
 80181ee:	68bb      	ldr	r3, [r7, #8]
 80181f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80181f2:	4a22      	ldr	r2, [pc, #136]	; (801827c <xTaskIncrementTick+0x160>)
 80181f4:	6013      	str	r3, [r2, #0]
 80181f6:	68bb      	ldr	r3, [r7, #8]
 80181f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80181fa:	4613      	mov	r3, r2
 80181fc:	009b      	lsls	r3, r3, #2
 80181fe:	4413      	add	r3, r2
 8018200:	009b      	lsls	r3, r3, #2
 8018202:	4a1f      	ldr	r2, [pc, #124]	; (8018280 <xTaskIncrementTick+0x164>)
 8018204:	441a      	add	r2, r3
 8018206:	68bb      	ldr	r3, [r7, #8]
 8018208:	3304      	adds	r3, #4
 801820a:	4619      	mov	r1, r3
 801820c:	4610      	mov	r0, r2
 801820e:	f7fe fa82 	bl	8016716 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018212:	68bb      	ldr	r3, [r7, #8]
 8018214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018216:	4b1b      	ldr	r3, [pc, #108]	; (8018284 <xTaskIncrementTick+0x168>)
 8018218:	681b      	ldr	r3, [r3, #0]
 801821a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801821c:	429a      	cmp	r2, r3
 801821e:	d3b8      	bcc.n	8018192 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8018220:	2301      	movs	r3, #1
 8018222:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018224:	e7b5      	b.n	8018192 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018226:	4b17      	ldr	r3, [pc, #92]	; (8018284 <xTaskIncrementTick+0x168>)
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801822c:	4914      	ldr	r1, [pc, #80]	; (8018280 <xTaskIncrementTick+0x164>)
 801822e:	4613      	mov	r3, r2
 8018230:	009b      	lsls	r3, r3, #2
 8018232:	4413      	add	r3, r2
 8018234:	009b      	lsls	r3, r3, #2
 8018236:	440b      	add	r3, r1
 8018238:	681b      	ldr	r3, [r3, #0]
 801823a:	2b01      	cmp	r3, #1
 801823c:	d907      	bls.n	801824e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 801823e:	2301      	movs	r3, #1
 8018240:	617b      	str	r3, [r7, #20]
 8018242:	e004      	b.n	801824e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8018244:	4b10      	ldr	r3, [pc, #64]	; (8018288 <xTaskIncrementTick+0x16c>)
 8018246:	681b      	ldr	r3, [r3, #0]
 8018248:	3301      	adds	r3, #1
 801824a:	4a0f      	ldr	r2, [pc, #60]	; (8018288 <xTaskIncrementTick+0x16c>)
 801824c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 801824e:	4b0f      	ldr	r3, [pc, #60]	; (801828c <xTaskIncrementTick+0x170>)
 8018250:	681b      	ldr	r3, [r3, #0]
 8018252:	2b00      	cmp	r3, #0
 8018254:	d001      	beq.n	801825a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8018256:	2301      	movs	r3, #1
 8018258:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801825a:	697b      	ldr	r3, [r7, #20]
}
 801825c:	4618      	mov	r0, r3
 801825e:	3718      	adds	r7, #24
 8018260:	46bd      	mov	sp, r7
 8018262:	bd80      	pop	{r7, pc}
 8018264:	20000f2c 	.word	0x20000f2c
 8018268:	20000f08 	.word	0x20000f08
 801826c:	20000ebc 	.word	0x20000ebc
 8018270:	20000ec0 	.word	0x20000ec0
 8018274:	20000f1c 	.word	0x20000f1c
 8018278:	20000f24 	.word	0x20000f24
 801827c:	20000f0c 	.word	0x20000f0c
 8018280:	20000a34 	.word	0x20000a34
 8018284:	20000a30 	.word	0x20000a30
 8018288:	20000f14 	.word	0x20000f14
 801828c:	20000f18 	.word	0x20000f18

08018290 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018290:	b480      	push	{r7}
 8018292:	b085      	sub	sp, #20
 8018294:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018296:	4b28      	ldr	r3, [pc, #160]	; (8018338 <vTaskSwitchContext+0xa8>)
 8018298:	681b      	ldr	r3, [r3, #0]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d003      	beq.n	80182a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801829e:	4b27      	ldr	r3, [pc, #156]	; (801833c <vTaskSwitchContext+0xac>)
 80182a0:	2201      	movs	r2, #1
 80182a2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80182a4:	e042      	b.n	801832c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80182a6:	4b25      	ldr	r3, [pc, #148]	; (801833c <vTaskSwitchContext+0xac>)
 80182a8:	2200      	movs	r2, #0
 80182aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80182ac:	4b24      	ldr	r3, [pc, #144]	; (8018340 <vTaskSwitchContext+0xb0>)
 80182ae:	681b      	ldr	r3, [r3, #0]
 80182b0:	60fb      	str	r3, [r7, #12]
 80182b2:	e011      	b.n	80182d8 <vTaskSwitchContext+0x48>
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d10b      	bne.n	80182d2 <vTaskSwitchContext+0x42>
 80182ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80182be:	b672      	cpsid	i
 80182c0:	f383 8811 	msr	BASEPRI, r3
 80182c4:	f3bf 8f6f 	isb	sy
 80182c8:	f3bf 8f4f 	dsb	sy
 80182cc:	b662      	cpsie	i
 80182ce:	607b      	str	r3, [r7, #4]
 80182d0:	e7fe      	b.n	80182d0 <vTaskSwitchContext+0x40>
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	3b01      	subs	r3, #1
 80182d6:	60fb      	str	r3, [r7, #12]
 80182d8:	491a      	ldr	r1, [pc, #104]	; (8018344 <vTaskSwitchContext+0xb4>)
 80182da:	68fa      	ldr	r2, [r7, #12]
 80182dc:	4613      	mov	r3, r2
 80182de:	009b      	lsls	r3, r3, #2
 80182e0:	4413      	add	r3, r2
 80182e2:	009b      	lsls	r3, r3, #2
 80182e4:	440b      	add	r3, r1
 80182e6:	681b      	ldr	r3, [r3, #0]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d0e3      	beq.n	80182b4 <vTaskSwitchContext+0x24>
 80182ec:	68fa      	ldr	r2, [r7, #12]
 80182ee:	4613      	mov	r3, r2
 80182f0:	009b      	lsls	r3, r3, #2
 80182f2:	4413      	add	r3, r2
 80182f4:	009b      	lsls	r3, r3, #2
 80182f6:	4a13      	ldr	r2, [pc, #76]	; (8018344 <vTaskSwitchContext+0xb4>)
 80182f8:	4413      	add	r3, r2
 80182fa:	60bb      	str	r3, [r7, #8]
 80182fc:	68bb      	ldr	r3, [r7, #8]
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	685a      	ldr	r2, [r3, #4]
 8018302:	68bb      	ldr	r3, [r7, #8]
 8018304:	605a      	str	r2, [r3, #4]
 8018306:	68bb      	ldr	r3, [r7, #8]
 8018308:	685a      	ldr	r2, [r3, #4]
 801830a:	68bb      	ldr	r3, [r7, #8]
 801830c:	3308      	adds	r3, #8
 801830e:	429a      	cmp	r2, r3
 8018310:	d104      	bne.n	801831c <vTaskSwitchContext+0x8c>
 8018312:	68bb      	ldr	r3, [r7, #8]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	685a      	ldr	r2, [r3, #4]
 8018318:	68bb      	ldr	r3, [r7, #8]
 801831a:	605a      	str	r2, [r3, #4]
 801831c:	68bb      	ldr	r3, [r7, #8]
 801831e:	685b      	ldr	r3, [r3, #4]
 8018320:	68db      	ldr	r3, [r3, #12]
 8018322:	4a09      	ldr	r2, [pc, #36]	; (8018348 <vTaskSwitchContext+0xb8>)
 8018324:	6013      	str	r3, [r2, #0]
 8018326:	4a06      	ldr	r2, [pc, #24]	; (8018340 <vTaskSwitchContext+0xb0>)
 8018328:	68fb      	ldr	r3, [r7, #12]
 801832a:	6013      	str	r3, [r2, #0]
}
 801832c:	bf00      	nop
 801832e:	3714      	adds	r7, #20
 8018330:	46bd      	mov	sp, r7
 8018332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018336:	4770      	bx	lr
 8018338:	20000f2c 	.word	0x20000f2c
 801833c:	20000f18 	.word	0x20000f18
 8018340:	20000f0c 	.word	0x20000f0c
 8018344:	20000a34 	.word	0x20000a34
 8018348:	20000a30 	.word	0x20000a30

0801834c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801834c:	b580      	push	{r7, lr}
 801834e:	b084      	sub	sp, #16
 8018350:	af00      	add	r7, sp, #0
 8018352:	6078      	str	r0, [r7, #4]
 8018354:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	2b00      	cmp	r3, #0
 801835a:	d10b      	bne.n	8018374 <vTaskPlaceOnEventList+0x28>
 801835c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018360:	b672      	cpsid	i
 8018362:	f383 8811 	msr	BASEPRI, r3
 8018366:	f3bf 8f6f 	isb	sy
 801836a:	f3bf 8f4f 	dsb	sy
 801836e:	b662      	cpsie	i
 8018370:	60fb      	str	r3, [r7, #12]
 8018372:	e7fe      	b.n	8018372 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8018374:	4b07      	ldr	r3, [pc, #28]	; (8018394 <vTaskPlaceOnEventList+0x48>)
 8018376:	681b      	ldr	r3, [r3, #0]
 8018378:	3318      	adds	r3, #24
 801837a:	4619      	mov	r1, r3
 801837c:	6878      	ldr	r0, [r7, #4]
 801837e:	f7fe f9ee 	bl	801675e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8018382:	2101      	movs	r1, #1
 8018384:	6838      	ldr	r0, [r7, #0]
 8018386:	f000 fb8f 	bl	8018aa8 <prvAddCurrentTaskToDelayedList>
}
 801838a:	bf00      	nop
 801838c:	3710      	adds	r7, #16
 801838e:	46bd      	mov	sp, r7
 8018390:	bd80      	pop	{r7, pc}
 8018392:	bf00      	nop
 8018394:	20000a30 	.word	0x20000a30

08018398 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8018398:	b580      	push	{r7, lr}
 801839a:	b086      	sub	sp, #24
 801839c:	af00      	add	r7, sp, #0
 801839e:	60f8      	str	r0, [r7, #12]
 80183a0:	60b9      	str	r1, [r7, #8]
 80183a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d10b      	bne.n	80183c2 <vTaskPlaceOnEventListRestricted+0x2a>
 80183aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80183ae:	b672      	cpsid	i
 80183b0:	f383 8811 	msr	BASEPRI, r3
 80183b4:	f3bf 8f6f 	isb	sy
 80183b8:	f3bf 8f4f 	dsb	sy
 80183bc:	b662      	cpsie	i
 80183be:	617b      	str	r3, [r7, #20]
 80183c0:	e7fe      	b.n	80183c0 <vTaskPlaceOnEventListRestricted+0x28>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80183c2:	4b0a      	ldr	r3, [pc, #40]	; (80183ec <vTaskPlaceOnEventListRestricted+0x54>)
 80183c4:	681b      	ldr	r3, [r3, #0]
 80183c6:	3318      	adds	r3, #24
 80183c8:	4619      	mov	r1, r3
 80183ca:	68f8      	ldr	r0, [r7, #12]
 80183cc:	f7fe f9a3 	bl	8016716 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d002      	beq.n	80183dc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80183d6:	f04f 33ff 	mov.w	r3, #4294967295
 80183da:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80183dc:	6879      	ldr	r1, [r7, #4]
 80183de:	68b8      	ldr	r0, [r7, #8]
 80183e0:	f000 fb62 	bl	8018aa8 <prvAddCurrentTaskToDelayedList>
	}
 80183e4:	bf00      	nop
 80183e6:	3718      	adds	r7, #24
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	20000a30 	.word	0x20000a30

080183f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80183f0:	b580      	push	{r7, lr}
 80183f2:	b086      	sub	sp, #24
 80183f4:	af00      	add	r7, sp, #0
 80183f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80183f8:	687b      	ldr	r3, [r7, #4]
 80183fa:	68db      	ldr	r3, [r3, #12]
 80183fc:	68db      	ldr	r3, [r3, #12]
 80183fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8018400:	693b      	ldr	r3, [r7, #16]
 8018402:	2b00      	cmp	r3, #0
 8018404:	d10b      	bne.n	801841e <xTaskRemoveFromEventList+0x2e>
 8018406:	f04f 0350 	mov.w	r3, #80	; 0x50
 801840a:	b672      	cpsid	i
 801840c:	f383 8811 	msr	BASEPRI, r3
 8018410:	f3bf 8f6f 	isb	sy
 8018414:	f3bf 8f4f 	dsb	sy
 8018418:	b662      	cpsie	i
 801841a:	60fb      	str	r3, [r7, #12]
 801841c:	e7fe      	b.n	801841c <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801841e:	693b      	ldr	r3, [r7, #16]
 8018420:	3318      	adds	r3, #24
 8018422:	4618      	mov	r0, r3
 8018424:	f7fe f9d4 	bl	80167d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018428:	4b1d      	ldr	r3, [pc, #116]	; (80184a0 <xTaskRemoveFromEventList+0xb0>)
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	2b00      	cmp	r3, #0
 801842e:	d11d      	bne.n	801846c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8018430:	693b      	ldr	r3, [r7, #16]
 8018432:	3304      	adds	r3, #4
 8018434:	4618      	mov	r0, r3
 8018436:	f7fe f9cb 	bl	80167d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801843a:	693b      	ldr	r3, [r7, #16]
 801843c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801843e:	4b19      	ldr	r3, [pc, #100]	; (80184a4 <xTaskRemoveFromEventList+0xb4>)
 8018440:	681b      	ldr	r3, [r3, #0]
 8018442:	429a      	cmp	r2, r3
 8018444:	d903      	bls.n	801844e <xTaskRemoveFromEventList+0x5e>
 8018446:	693b      	ldr	r3, [r7, #16]
 8018448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801844a:	4a16      	ldr	r2, [pc, #88]	; (80184a4 <xTaskRemoveFromEventList+0xb4>)
 801844c:	6013      	str	r3, [r2, #0]
 801844e:	693b      	ldr	r3, [r7, #16]
 8018450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018452:	4613      	mov	r3, r2
 8018454:	009b      	lsls	r3, r3, #2
 8018456:	4413      	add	r3, r2
 8018458:	009b      	lsls	r3, r3, #2
 801845a:	4a13      	ldr	r2, [pc, #76]	; (80184a8 <xTaskRemoveFromEventList+0xb8>)
 801845c:	441a      	add	r2, r3
 801845e:	693b      	ldr	r3, [r7, #16]
 8018460:	3304      	adds	r3, #4
 8018462:	4619      	mov	r1, r3
 8018464:	4610      	mov	r0, r2
 8018466:	f7fe f956 	bl	8016716 <vListInsertEnd>
 801846a:	e005      	b.n	8018478 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801846c:	693b      	ldr	r3, [r7, #16]
 801846e:	3318      	adds	r3, #24
 8018470:	4619      	mov	r1, r3
 8018472:	480e      	ldr	r0, [pc, #56]	; (80184ac <xTaskRemoveFromEventList+0xbc>)
 8018474:	f7fe f94f 	bl	8016716 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8018478:	693b      	ldr	r3, [r7, #16]
 801847a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801847c:	4b0c      	ldr	r3, [pc, #48]	; (80184b0 <xTaskRemoveFromEventList+0xc0>)
 801847e:	681b      	ldr	r3, [r3, #0]
 8018480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018482:	429a      	cmp	r2, r3
 8018484:	d905      	bls.n	8018492 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8018486:	2301      	movs	r3, #1
 8018488:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801848a:	4b0a      	ldr	r3, [pc, #40]	; (80184b4 <xTaskRemoveFromEventList+0xc4>)
 801848c:	2201      	movs	r2, #1
 801848e:	601a      	str	r2, [r3, #0]
 8018490:	e001      	b.n	8018496 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8018492:	2300      	movs	r3, #0
 8018494:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8018496:	697b      	ldr	r3, [r7, #20]
}
 8018498:	4618      	mov	r0, r3
 801849a:	3718      	adds	r7, #24
 801849c:	46bd      	mov	sp, r7
 801849e:	bd80      	pop	{r7, pc}
 80184a0:	20000f2c 	.word	0x20000f2c
 80184a4:	20000f0c 	.word	0x20000f0c
 80184a8:	20000a34 	.word	0x20000a34
 80184ac:	20000ec4 	.word	0x20000ec4
 80184b0:	20000a30 	.word	0x20000a30
 80184b4:	20000f18 	.word	0x20000f18

080184b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80184b8:	b480      	push	{r7}
 80184ba:	b083      	sub	sp, #12
 80184bc:	af00      	add	r7, sp, #0
 80184be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80184c0:	4b06      	ldr	r3, [pc, #24]	; (80184dc <vTaskInternalSetTimeOutState+0x24>)
 80184c2:	681a      	ldr	r2, [r3, #0]
 80184c4:	687b      	ldr	r3, [r7, #4]
 80184c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80184c8:	4b05      	ldr	r3, [pc, #20]	; (80184e0 <vTaskInternalSetTimeOutState+0x28>)
 80184ca:	681a      	ldr	r2, [r3, #0]
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	605a      	str	r2, [r3, #4]
}
 80184d0:	bf00      	nop
 80184d2:	370c      	adds	r7, #12
 80184d4:	46bd      	mov	sp, r7
 80184d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184da:	4770      	bx	lr
 80184dc:	20000f1c 	.word	0x20000f1c
 80184e0:	20000f08 	.word	0x20000f08

080184e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80184e4:	b580      	push	{r7, lr}
 80184e6:	b088      	sub	sp, #32
 80184e8:	af00      	add	r7, sp, #0
 80184ea:	6078      	str	r0, [r7, #4]
 80184ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d10b      	bne.n	801850c <xTaskCheckForTimeOut+0x28>
 80184f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80184f8:	b672      	cpsid	i
 80184fa:	f383 8811 	msr	BASEPRI, r3
 80184fe:	f3bf 8f6f 	isb	sy
 8018502:	f3bf 8f4f 	dsb	sy
 8018506:	b662      	cpsie	i
 8018508:	613b      	str	r3, [r7, #16]
 801850a:	e7fe      	b.n	801850a <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 801850c:	683b      	ldr	r3, [r7, #0]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d10b      	bne.n	801852a <xTaskCheckForTimeOut+0x46>
 8018512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018516:	b672      	cpsid	i
 8018518:	f383 8811 	msr	BASEPRI, r3
 801851c:	f3bf 8f6f 	isb	sy
 8018520:	f3bf 8f4f 	dsb	sy
 8018524:	b662      	cpsie	i
 8018526:	60fb      	str	r3, [r7, #12]
 8018528:	e7fe      	b.n	8018528 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 801852a:	f000 ff6d 	bl	8019408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801852e:	4b1d      	ldr	r3, [pc, #116]	; (80185a4 <xTaskCheckForTimeOut+0xc0>)
 8018530:	681b      	ldr	r3, [r3, #0]
 8018532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8018534:	687b      	ldr	r3, [r7, #4]
 8018536:	685b      	ldr	r3, [r3, #4]
 8018538:	69ba      	ldr	r2, [r7, #24]
 801853a:	1ad3      	subs	r3, r2, r3
 801853c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801853e:	683b      	ldr	r3, [r7, #0]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018546:	d102      	bne.n	801854e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8018548:	2300      	movs	r3, #0
 801854a:	61fb      	str	r3, [r7, #28]
 801854c:	e023      	b.n	8018596 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	681a      	ldr	r2, [r3, #0]
 8018552:	4b15      	ldr	r3, [pc, #84]	; (80185a8 <xTaskCheckForTimeOut+0xc4>)
 8018554:	681b      	ldr	r3, [r3, #0]
 8018556:	429a      	cmp	r2, r3
 8018558:	d007      	beq.n	801856a <xTaskCheckForTimeOut+0x86>
 801855a:	687b      	ldr	r3, [r7, #4]
 801855c:	685b      	ldr	r3, [r3, #4]
 801855e:	69ba      	ldr	r2, [r7, #24]
 8018560:	429a      	cmp	r2, r3
 8018562:	d302      	bcc.n	801856a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8018564:	2301      	movs	r3, #1
 8018566:	61fb      	str	r3, [r7, #28]
 8018568:	e015      	b.n	8018596 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801856a:	683b      	ldr	r3, [r7, #0]
 801856c:	681b      	ldr	r3, [r3, #0]
 801856e:	697a      	ldr	r2, [r7, #20]
 8018570:	429a      	cmp	r2, r3
 8018572:	d20b      	bcs.n	801858c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8018574:	683b      	ldr	r3, [r7, #0]
 8018576:	681a      	ldr	r2, [r3, #0]
 8018578:	697b      	ldr	r3, [r7, #20]
 801857a:	1ad2      	subs	r2, r2, r3
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8018580:	6878      	ldr	r0, [r7, #4]
 8018582:	f7ff ff99 	bl	80184b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8018586:	2300      	movs	r3, #0
 8018588:	61fb      	str	r3, [r7, #28]
 801858a:	e004      	b.n	8018596 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 801858c:	683b      	ldr	r3, [r7, #0]
 801858e:	2200      	movs	r2, #0
 8018590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8018592:	2301      	movs	r3, #1
 8018594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8018596:	f000 ff69 	bl	801946c <vPortExitCritical>

	return xReturn;
 801859a:	69fb      	ldr	r3, [r7, #28]
}
 801859c:	4618      	mov	r0, r3
 801859e:	3720      	adds	r7, #32
 80185a0:	46bd      	mov	sp, r7
 80185a2:	bd80      	pop	{r7, pc}
 80185a4:	20000f08 	.word	0x20000f08
 80185a8:	20000f1c 	.word	0x20000f1c

080185ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80185ac:	b480      	push	{r7}
 80185ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80185b0:	4b03      	ldr	r3, [pc, #12]	; (80185c0 <vTaskMissedYield+0x14>)
 80185b2:	2201      	movs	r2, #1
 80185b4:	601a      	str	r2, [r3, #0]
}
 80185b6:	bf00      	nop
 80185b8:	46bd      	mov	sp, r7
 80185ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80185be:	4770      	bx	lr
 80185c0:	20000f18 	.word	0x20000f18

080185c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80185c4:	b580      	push	{r7, lr}
 80185c6:	b082      	sub	sp, #8
 80185c8:	af00      	add	r7, sp, #0
 80185ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80185cc:	f000 f852 	bl	8018674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80185d0:	4b06      	ldr	r3, [pc, #24]	; (80185ec <prvIdleTask+0x28>)
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	2b01      	cmp	r3, #1
 80185d6:	d9f9      	bls.n	80185cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80185d8:	4b05      	ldr	r3, [pc, #20]	; (80185f0 <prvIdleTask+0x2c>)
 80185da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80185de:	601a      	str	r2, [r3, #0]
 80185e0:	f3bf 8f4f 	dsb	sy
 80185e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80185e8:	e7f0      	b.n	80185cc <prvIdleTask+0x8>
 80185ea:	bf00      	nop
 80185ec:	20000a34 	.word	0x20000a34
 80185f0:	e000ed04 	.word	0xe000ed04

080185f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80185f4:	b580      	push	{r7, lr}
 80185f6:	b082      	sub	sp, #8
 80185f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80185fa:	2300      	movs	r3, #0
 80185fc:	607b      	str	r3, [r7, #4]
 80185fe:	e00c      	b.n	801861a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018600:	687a      	ldr	r2, [r7, #4]
 8018602:	4613      	mov	r3, r2
 8018604:	009b      	lsls	r3, r3, #2
 8018606:	4413      	add	r3, r2
 8018608:	009b      	lsls	r3, r3, #2
 801860a:	4a12      	ldr	r2, [pc, #72]	; (8018654 <prvInitialiseTaskLists+0x60>)
 801860c:	4413      	add	r3, r2
 801860e:	4618      	mov	r0, r3
 8018610:	f7fe f854 	bl	80166bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	3301      	adds	r3, #1
 8018618:	607b      	str	r3, [r7, #4]
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	2b37      	cmp	r3, #55	; 0x37
 801861e:	d9ef      	bls.n	8018600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018620:	480d      	ldr	r0, [pc, #52]	; (8018658 <prvInitialiseTaskLists+0x64>)
 8018622:	f7fe f84b 	bl	80166bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018626:	480d      	ldr	r0, [pc, #52]	; (801865c <prvInitialiseTaskLists+0x68>)
 8018628:	f7fe f848 	bl	80166bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801862c:	480c      	ldr	r0, [pc, #48]	; (8018660 <prvInitialiseTaskLists+0x6c>)
 801862e:	f7fe f845 	bl	80166bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018632:	480c      	ldr	r0, [pc, #48]	; (8018664 <prvInitialiseTaskLists+0x70>)
 8018634:	f7fe f842 	bl	80166bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018638:	480b      	ldr	r0, [pc, #44]	; (8018668 <prvInitialiseTaskLists+0x74>)
 801863a:	f7fe f83f 	bl	80166bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801863e:	4b0b      	ldr	r3, [pc, #44]	; (801866c <prvInitialiseTaskLists+0x78>)
 8018640:	4a05      	ldr	r2, [pc, #20]	; (8018658 <prvInitialiseTaskLists+0x64>)
 8018642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018644:	4b0a      	ldr	r3, [pc, #40]	; (8018670 <prvInitialiseTaskLists+0x7c>)
 8018646:	4a05      	ldr	r2, [pc, #20]	; (801865c <prvInitialiseTaskLists+0x68>)
 8018648:	601a      	str	r2, [r3, #0]
}
 801864a:	bf00      	nop
 801864c:	3708      	adds	r7, #8
 801864e:	46bd      	mov	sp, r7
 8018650:	bd80      	pop	{r7, pc}
 8018652:	bf00      	nop
 8018654:	20000a34 	.word	0x20000a34
 8018658:	20000e94 	.word	0x20000e94
 801865c:	20000ea8 	.word	0x20000ea8
 8018660:	20000ec4 	.word	0x20000ec4
 8018664:	20000ed8 	.word	0x20000ed8
 8018668:	20000ef0 	.word	0x20000ef0
 801866c:	20000ebc 	.word	0x20000ebc
 8018670:	20000ec0 	.word	0x20000ec0

08018674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018674:	b580      	push	{r7, lr}
 8018676:	b082      	sub	sp, #8
 8018678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801867a:	e019      	b.n	80186b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801867c:	f000 fec4 	bl	8019408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018680:	4b0f      	ldr	r3, [pc, #60]	; (80186c0 <prvCheckTasksWaitingTermination+0x4c>)
 8018682:	68db      	ldr	r3, [r3, #12]
 8018684:	68db      	ldr	r3, [r3, #12]
 8018686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	3304      	adds	r3, #4
 801868c:	4618      	mov	r0, r3
 801868e:	f7fe f89f 	bl	80167d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018692:	4b0c      	ldr	r3, [pc, #48]	; (80186c4 <prvCheckTasksWaitingTermination+0x50>)
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	3b01      	subs	r3, #1
 8018698:	4a0a      	ldr	r2, [pc, #40]	; (80186c4 <prvCheckTasksWaitingTermination+0x50>)
 801869a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801869c:	4b0a      	ldr	r3, [pc, #40]	; (80186c8 <prvCheckTasksWaitingTermination+0x54>)
 801869e:	681b      	ldr	r3, [r3, #0]
 80186a0:	3b01      	subs	r3, #1
 80186a2:	4a09      	ldr	r2, [pc, #36]	; (80186c8 <prvCheckTasksWaitingTermination+0x54>)
 80186a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80186a6:	f000 fee1 	bl	801946c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80186aa:	6878      	ldr	r0, [r7, #4]
 80186ac:	f000 f80e 	bl	80186cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80186b0:	4b05      	ldr	r3, [pc, #20]	; (80186c8 <prvCheckTasksWaitingTermination+0x54>)
 80186b2:	681b      	ldr	r3, [r3, #0]
 80186b4:	2b00      	cmp	r3, #0
 80186b6:	d1e1      	bne.n	801867c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80186b8:	bf00      	nop
 80186ba:	3708      	adds	r7, #8
 80186bc:	46bd      	mov	sp, r7
 80186be:	bd80      	pop	{r7, pc}
 80186c0:	20000ed8 	.word	0x20000ed8
 80186c4:	20000f04 	.word	0x20000f04
 80186c8:	20000eec 	.word	0x20000eec

080186cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80186cc:	b580      	push	{r7, lr}
 80186ce:	b084      	sub	sp, #16
 80186d0:	af00      	add	r7, sp, #0
 80186d2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80186da:	2b00      	cmp	r3, #0
 80186dc:	d108      	bne.n	80186f0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80186de:	687b      	ldr	r3, [r7, #4]
 80186e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80186e2:	4618      	mov	r0, r3
 80186e4:	f001 f87a 	bl	80197dc <vPortFree>
				vPortFree( pxTCB );
 80186e8:	6878      	ldr	r0, [r7, #4]
 80186ea:	f001 f877 	bl	80197dc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80186ee:	e019      	b.n	8018724 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80186f6:	2b01      	cmp	r3, #1
 80186f8:	d103      	bne.n	8018702 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80186fa:	6878      	ldr	r0, [r7, #4]
 80186fc:	f001 f86e 	bl	80197dc <vPortFree>
	}
 8018700:	e010      	b.n	8018724 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8018702:	687b      	ldr	r3, [r7, #4]
 8018704:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8018708:	2b02      	cmp	r3, #2
 801870a:	d00b      	beq.n	8018724 <prvDeleteTCB+0x58>
 801870c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018710:	b672      	cpsid	i
 8018712:	f383 8811 	msr	BASEPRI, r3
 8018716:	f3bf 8f6f 	isb	sy
 801871a:	f3bf 8f4f 	dsb	sy
 801871e:	b662      	cpsie	i
 8018720:	60fb      	str	r3, [r7, #12]
 8018722:	e7fe      	b.n	8018722 <prvDeleteTCB+0x56>
	}
 8018724:	bf00      	nop
 8018726:	3710      	adds	r7, #16
 8018728:	46bd      	mov	sp, r7
 801872a:	bd80      	pop	{r7, pc}

0801872c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801872c:	b480      	push	{r7}
 801872e:	b083      	sub	sp, #12
 8018730:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018732:	4b0c      	ldr	r3, [pc, #48]	; (8018764 <prvResetNextTaskUnblockTime+0x38>)
 8018734:	681b      	ldr	r3, [r3, #0]
 8018736:	681b      	ldr	r3, [r3, #0]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d104      	bne.n	8018746 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801873c:	4b0a      	ldr	r3, [pc, #40]	; (8018768 <prvResetNextTaskUnblockTime+0x3c>)
 801873e:	f04f 32ff 	mov.w	r2, #4294967295
 8018742:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018744:	e008      	b.n	8018758 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018746:	4b07      	ldr	r3, [pc, #28]	; (8018764 <prvResetNextTaskUnblockTime+0x38>)
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	68db      	ldr	r3, [r3, #12]
 801874c:	68db      	ldr	r3, [r3, #12]
 801874e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	685b      	ldr	r3, [r3, #4]
 8018754:	4a04      	ldr	r2, [pc, #16]	; (8018768 <prvResetNextTaskUnblockTime+0x3c>)
 8018756:	6013      	str	r3, [r2, #0]
}
 8018758:	bf00      	nop
 801875a:	370c      	adds	r7, #12
 801875c:	46bd      	mov	sp, r7
 801875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018762:	4770      	bx	lr
 8018764:	20000ebc 	.word	0x20000ebc
 8018768:	20000f24 	.word	0x20000f24

0801876c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 801876c:	b480      	push	{r7}
 801876e:	b083      	sub	sp, #12
 8018770:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8018772:	4b05      	ldr	r3, [pc, #20]	; (8018788 <xTaskGetCurrentTaskHandle+0x1c>)
 8018774:	681b      	ldr	r3, [r3, #0]
 8018776:	607b      	str	r3, [r7, #4]

		return xReturn;
 8018778:	687b      	ldr	r3, [r7, #4]
	}
 801877a:	4618      	mov	r0, r3
 801877c:	370c      	adds	r7, #12
 801877e:	46bd      	mov	sp, r7
 8018780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018784:	4770      	bx	lr
 8018786:	bf00      	nop
 8018788:	20000a30 	.word	0x20000a30

0801878c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801878c:	b480      	push	{r7}
 801878e:	b083      	sub	sp, #12
 8018790:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8018792:	4b0b      	ldr	r3, [pc, #44]	; (80187c0 <xTaskGetSchedulerState+0x34>)
 8018794:	681b      	ldr	r3, [r3, #0]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d102      	bne.n	80187a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801879a:	2301      	movs	r3, #1
 801879c:	607b      	str	r3, [r7, #4]
 801879e:	e008      	b.n	80187b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80187a0:	4b08      	ldr	r3, [pc, #32]	; (80187c4 <xTaskGetSchedulerState+0x38>)
 80187a2:	681b      	ldr	r3, [r3, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d102      	bne.n	80187ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80187a8:	2302      	movs	r3, #2
 80187aa:	607b      	str	r3, [r7, #4]
 80187ac:	e001      	b.n	80187b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80187ae:	2300      	movs	r3, #0
 80187b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80187b2:	687b      	ldr	r3, [r7, #4]
	}
 80187b4:	4618      	mov	r0, r3
 80187b6:	370c      	adds	r7, #12
 80187b8:	46bd      	mov	sp, r7
 80187ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80187be:	4770      	bx	lr
 80187c0:	20000f10 	.word	0x20000f10
 80187c4:	20000f2c 	.word	0x20000f2c

080187c8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80187c8:	b580      	push	{r7, lr}
 80187ca:	b084      	sub	sp, #16
 80187cc:	af00      	add	r7, sp, #0
 80187ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80187d0:	687b      	ldr	r3, [r7, #4]
 80187d2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80187d4:	2300      	movs	r3, #0
 80187d6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	2b00      	cmp	r3, #0
 80187dc:	d051      	beq.n	8018882 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80187de:	68bb      	ldr	r3, [r7, #8]
 80187e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80187e2:	4b2a      	ldr	r3, [pc, #168]	; (801888c <xTaskPriorityInherit+0xc4>)
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187e8:	429a      	cmp	r2, r3
 80187ea:	d241      	bcs.n	8018870 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80187ec:	68bb      	ldr	r3, [r7, #8]
 80187ee:	699b      	ldr	r3, [r3, #24]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	db06      	blt.n	8018802 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80187f4:	4b25      	ldr	r3, [pc, #148]	; (801888c <xTaskPriorityInherit+0xc4>)
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80187fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80187fe:	68bb      	ldr	r3, [r7, #8]
 8018800:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8018802:	68bb      	ldr	r3, [r7, #8]
 8018804:	6959      	ldr	r1, [r3, #20]
 8018806:	68bb      	ldr	r3, [r7, #8]
 8018808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801880a:	4613      	mov	r3, r2
 801880c:	009b      	lsls	r3, r3, #2
 801880e:	4413      	add	r3, r2
 8018810:	009b      	lsls	r3, r3, #2
 8018812:	4a1f      	ldr	r2, [pc, #124]	; (8018890 <xTaskPriorityInherit+0xc8>)
 8018814:	4413      	add	r3, r2
 8018816:	4299      	cmp	r1, r3
 8018818:	d122      	bne.n	8018860 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801881a:	68bb      	ldr	r3, [r7, #8]
 801881c:	3304      	adds	r3, #4
 801881e:	4618      	mov	r0, r3
 8018820:	f7fd ffd6 	bl	80167d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018824:	4b19      	ldr	r3, [pc, #100]	; (801888c <xTaskPriorityInherit+0xc4>)
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801882a:	68bb      	ldr	r3, [r7, #8]
 801882c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801882e:	68bb      	ldr	r3, [r7, #8]
 8018830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018832:	4b18      	ldr	r3, [pc, #96]	; (8018894 <xTaskPriorityInherit+0xcc>)
 8018834:	681b      	ldr	r3, [r3, #0]
 8018836:	429a      	cmp	r2, r3
 8018838:	d903      	bls.n	8018842 <xTaskPriorityInherit+0x7a>
 801883a:	68bb      	ldr	r3, [r7, #8]
 801883c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801883e:	4a15      	ldr	r2, [pc, #84]	; (8018894 <xTaskPriorityInherit+0xcc>)
 8018840:	6013      	str	r3, [r2, #0]
 8018842:	68bb      	ldr	r3, [r7, #8]
 8018844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018846:	4613      	mov	r3, r2
 8018848:	009b      	lsls	r3, r3, #2
 801884a:	4413      	add	r3, r2
 801884c:	009b      	lsls	r3, r3, #2
 801884e:	4a10      	ldr	r2, [pc, #64]	; (8018890 <xTaskPriorityInherit+0xc8>)
 8018850:	441a      	add	r2, r3
 8018852:	68bb      	ldr	r3, [r7, #8]
 8018854:	3304      	adds	r3, #4
 8018856:	4619      	mov	r1, r3
 8018858:	4610      	mov	r0, r2
 801885a:	f7fd ff5c 	bl	8016716 <vListInsertEnd>
 801885e:	e004      	b.n	801886a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8018860:	4b0a      	ldr	r3, [pc, #40]	; (801888c <xTaskPriorityInherit+0xc4>)
 8018862:	681b      	ldr	r3, [r3, #0]
 8018864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018866:	68bb      	ldr	r3, [r7, #8]
 8018868:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801886a:	2301      	movs	r3, #1
 801886c:	60fb      	str	r3, [r7, #12]
 801886e:	e008      	b.n	8018882 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8018870:	68bb      	ldr	r3, [r7, #8]
 8018872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8018874:	4b05      	ldr	r3, [pc, #20]	; (801888c <xTaskPriorityInherit+0xc4>)
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801887a:	429a      	cmp	r2, r3
 801887c:	d201      	bcs.n	8018882 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801887e:	2301      	movs	r3, #1
 8018880:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018882:	68fb      	ldr	r3, [r7, #12]
	}
 8018884:	4618      	mov	r0, r3
 8018886:	3710      	adds	r7, #16
 8018888:	46bd      	mov	sp, r7
 801888a:	bd80      	pop	{r7, pc}
 801888c:	20000a30 	.word	0x20000a30
 8018890:	20000a34 	.word	0x20000a34
 8018894:	20000f0c 	.word	0x20000f0c

08018898 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8018898:	b580      	push	{r7, lr}
 801889a:	b086      	sub	sp, #24
 801889c:	af00      	add	r7, sp, #0
 801889e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80188a4:	2300      	movs	r3, #0
 80188a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80188a8:	687b      	ldr	r3, [r7, #4]
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d058      	beq.n	8018960 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80188ae:	4b2f      	ldr	r3, [pc, #188]	; (801896c <xTaskPriorityDisinherit+0xd4>)
 80188b0:	681b      	ldr	r3, [r3, #0]
 80188b2:	693a      	ldr	r2, [r7, #16]
 80188b4:	429a      	cmp	r2, r3
 80188b6:	d00b      	beq.n	80188d0 <xTaskPriorityDisinherit+0x38>
 80188b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188bc:	b672      	cpsid	i
 80188be:	f383 8811 	msr	BASEPRI, r3
 80188c2:	f3bf 8f6f 	isb	sy
 80188c6:	f3bf 8f4f 	dsb	sy
 80188ca:	b662      	cpsie	i
 80188cc:	60fb      	str	r3, [r7, #12]
 80188ce:	e7fe      	b.n	80188ce <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80188d0:	693b      	ldr	r3, [r7, #16]
 80188d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d10b      	bne.n	80188f0 <xTaskPriorityDisinherit+0x58>
 80188d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80188dc:	b672      	cpsid	i
 80188de:	f383 8811 	msr	BASEPRI, r3
 80188e2:	f3bf 8f6f 	isb	sy
 80188e6:	f3bf 8f4f 	dsb	sy
 80188ea:	b662      	cpsie	i
 80188ec:	60bb      	str	r3, [r7, #8]
 80188ee:	e7fe      	b.n	80188ee <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 80188f0:	693b      	ldr	r3, [r7, #16]
 80188f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80188f4:	1e5a      	subs	r2, r3, #1
 80188f6:	693b      	ldr	r3, [r7, #16]
 80188f8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80188fa:	693b      	ldr	r3, [r7, #16]
 80188fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80188fe:	693b      	ldr	r3, [r7, #16]
 8018900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8018902:	429a      	cmp	r2, r3
 8018904:	d02c      	beq.n	8018960 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8018906:	693b      	ldr	r3, [r7, #16]
 8018908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801890a:	2b00      	cmp	r3, #0
 801890c:	d128      	bne.n	8018960 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801890e:	693b      	ldr	r3, [r7, #16]
 8018910:	3304      	adds	r3, #4
 8018912:	4618      	mov	r0, r3
 8018914:	f7fd ff5c 	bl	80167d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8018918:	693b      	ldr	r3, [r7, #16]
 801891a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801891c:	693b      	ldr	r3, [r7, #16]
 801891e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018920:	693b      	ldr	r3, [r7, #16]
 8018922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018924:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018928:	693b      	ldr	r3, [r7, #16]
 801892a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801892c:	693b      	ldr	r3, [r7, #16]
 801892e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018930:	4b0f      	ldr	r3, [pc, #60]	; (8018970 <xTaskPriorityDisinherit+0xd8>)
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	429a      	cmp	r2, r3
 8018936:	d903      	bls.n	8018940 <xTaskPriorityDisinherit+0xa8>
 8018938:	693b      	ldr	r3, [r7, #16]
 801893a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801893c:	4a0c      	ldr	r2, [pc, #48]	; (8018970 <xTaskPriorityDisinherit+0xd8>)
 801893e:	6013      	str	r3, [r2, #0]
 8018940:	693b      	ldr	r3, [r7, #16]
 8018942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018944:	4613      	mov	r3, r2
 8018946:	009b      	lsls	r3, r3, #2
 8018948:	4413      	add	r3, r2
 801894a:	009b      	lsls	r3, r3, #2
 801894c:	4a09      	ldr	r2, [pc, #36]	; (8018974 <xTaskPriorityDisinherit+0xdc>)
 801894e:	441a      	add	r2, r3
 8018950:	693b      	ldr	r3, [r7, #16]
 8018952:	3304      	adds	r3, #4
 8018954:	4619      	mov	r1, r3
 8018956:	4610      	mov	r0, r2
 8018958:	f7fd fedd 	bl	8016716 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801895c:	2301      	movs	r3, #1
 801895e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8018960:	697b      	ldr	r3, [r7, #20]
	}
 8018962:	4618      	mov	r0, r3
 8018964:	3718      	adds	r7, #24
 8018966:	46bd      	mov	sp, r7
 8018968:	bd80      	pop	{r7, pc}
 801896a:	bf00      	nop
 801896c:	20000a30 	.word	0x20000a30
 8018970:	20000f0c 	.word	0x20000f0c
 8018974:	20000a34 	.word	0x20000a34

08018978 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8018978:	b580      	push	{r7, lr}
 801897a:	b088      	sub	sp, #32
 801897c:	af00      	add	r7, sp, #0
 801897e:	6078      	str	r0, [r7, #4]
 8018980:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8018986:	2301      	movs	r3, #1
 8018988:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801898a:	687b      	ldr	r3, [r7, #4]
 801898c:	2b00      	cmp	r3, #0
 801898e:	d06c      	beq.n	8018a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8018990:	69bb      	ldr	r3, [r7, #24]
 8018992:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018994:	2b00      	cmp	r3, #0
 8018996:	d10b      	bne.n	80189b0 <vTaskPriorityDisinheritAfterTimeout+0x38>
 8018998:	f04f 0350 	mov.w	r3, #80	; 0x50
 801899c:	b672      	cpsid	i
 801899e:	f383 8811 	msr	BASEPRI, r3
 80189a2:	f3bf 8f6f 	isb	sy
 80189a6:	f3bf 8f4f 	dsb	sy
 80189aa:	b662      	cpsie	i
 80189ac:	60fb      	str	r3, [r7, #12]
 80189ae:	e7fe      	b.n	80189ae <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80189b0:	69bb      	ldr	r3, [r7, #24]
 80189b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189b4:	683a      	ldr	r2, [r7, #0]
 80189b6:	429a      	cmp	r2, r3
 80189b8:	d902      	bls.n	80189c0 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80189ba:	683b      	ldr	r3, [r7, #0]
 80189bc:	61fb      	str	r3, [r7, #28]
 80189be:	e002      	b.n	80189c6 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80189c0:	69bb      	ldr	r3, [r7, #24]
 80189c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80189c4:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80189c6:	69bb      	ldr	r3, [r7, #24]
 80189c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80189ca:	69fa      	ldr	r2, [r7, #28]
 80189cc:	429a      	cmp	r2, r3
 80189ce:	d04c      	beq.n	8018a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80189d0:	69bb      	ldr	r3, [r7, #24]
 80189d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80189d4:	697a      	ldr	r2, [r7, #20]
 80189d6:	429a      	cmp	r2, r3
 80189d8:	d147      	bne.n	8018a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80189da:	4b26      	ldr	r3, [pc, #152]	; (8018a74 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80189dc:	681b      	ldr	r3, [r3, #0]
 80189de:	69ba      	ldr	r2, [r7, #24]
 80189e0:	429a      	cmp	r2, r3
 80189e2:	d10b      	bne.n	80189fc <vTaskPriorityDisinheritAfterTimeout+0x84>
 80189e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189e8:	b672      	cpsid	i
 80189ea:	f383 8811 	msr	BASEPRI, r3
 80189ee:	f3bf 8f6f 	isb	sy
 80189f2:	f3bf 8f4f 	dsb	sy
 80189f6:	b662      	cpsie	i
 80189f8:	60bb      	str	r3, [r7, #8]
 80189fa:	e7fe      	b.n	80189fa <vTaskPriorityDisinheritAfterTimeout+0x82>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80189fc:	69bb      	ldr	r3, [r7, #24]
 80189fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a00:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8018a02:	69bb      	ldr	r3, [r7, #24]
 8018a04:	69fa      	ldr	r2, [r7, #28]
 8018a06:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8018a08:	69bb      	ldr	r3, [r7, #24]
 8018a0a:	699b      	ldr	r3, [r3, #24]
 8018a0c:	2b00      	cmp	r3, #0
 8018a0e:	db04      	blt.n	8018a1a <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a10:	69fb      	ldr	r3, [r7, #28]
 8018a12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8018a16:	69bb      	ldr	r3, [r7, #24]
 8018a18:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8018a1a:	69bb      	ldr	r3, [r7, #24]
 8018a1c:	6959      	ldr	r1, [r3, #20]
 8018a1e:	693a      	ldr	r2, [r7, #16]
 8018a20:	4613      	mov	r3, r2
 8018a22:	009b      	lsls	r3, r3, #2
 8018a24:	4413      	add	r3, r2
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	4a13      	ldr	r2, [pc, #76]	; (8018a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018a2a:	4413      	add	r3, r2
 8018a2c:	4299      	cmp	r1, r3
 8018a2e:	d11c      	bne.n	8018a6a <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018a30:	69bb      	ldr	r3, [r7, #24]
 8018a32:	3304      	adds	r3, #4
 8018a34:	4618      	mov	r0, r3
 8018a36:	f7fd fecb 	bl	80167d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8018a3a:	69bb      	ldr	r3, [r7, #24]
 8018a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a3e:	4b0f      	ldr	r3, [pc, #60]	; (8018a7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	429a      	cmp	r2, r3
 8018a44:	d903      	bls.n	8018a4e <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8018a46:	69bb      	ldr	r3, [r7, #24]
 8018a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018a4a:	4a0c      	ldr	r2, [pc, #48]	; (8018a7c <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8018a4c:	6013      	str	r3, [r2, #0]
 8018a4e:	69bb      	ldr	r3, [r7, #24]
 8018a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018a52:	4613      	mov	r3, r2
 8018a54:	009b      	lsls	r3, r3, #2
 8018a56:	4413      	add	r3, r2
 8018a58:	009b      	lsls	r3, r3, #2
 8018a5a:	4a07      	ldr	r2, [pc, #28]	; (8018a78 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8018a5c:	441a      	add	r2, r3
 8018a5e:	69bb      	ldr	r3, [r7, #24]
 8018a60:	3304      	adds	r3, #4
 8018a62:	4619      	mov	r1, r3
 8018a64:	4610      	mov	r0, r2
 8018a66:	f7fd fe56 	bl	8016716 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8018a6a:	bf00      	nop
 8018a6c:	3720      	adds	r7, #32
 8018a6e:	46bd      	mov	sp, r7
 8018a70:	bd80      	pop	{r7, pc}
 8018a72:	bf00      	nop
 8018a74:	20000a30 	.word	0x20000a30
 8018a78:	20000a34 	.word	0x20000a34
 8018a7c:	20000f0c 	.word	0x20000f0c

08018a80 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8018a80:	b480      	push	{r7}
 8018a82:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8018a84:	4b07      	ldr	r3, [pc, #28]	; (8018aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018a86:	681b      	ldr	r3, [r3, #0]
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	d004      	beq.n	8018a96 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8018a8c:	4b05      	ldr	r3, [pc, #20]	; (8018aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018a92:	3201      	adds	r2, #1
 8018a94:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8018a96:	4b03      	ldr	r3, [pc, #12]	; (8018aa4 <pvTaskIncrementMutexHeldCount+0x24>)
 8018a98:	681b      	ldr	r3, [r3, #0]
	}
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aa2:	4770      	bx	lr
 8018aa4:	20000a30 	.word	0x20000a30

08018aa8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018aa8:	b580      	push	{r7, lr}
 8018aaa:	b084      	sub	sp, #16
 8018aac:	af00      	add	r7, sp, #0
 8018aae:	6078      	str	r0, [r7, #4]
 8018ab0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018ab2:	4b21      	ldr	r3, [pc, #132]	; (8018b38 <prvAddCurrentTaskToDelayedList+0x90>)
 8018ab4:	681b      	ldr	r3, [r3, #0]
 8018ab6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018ab8:	4b20      	ldr	r3, [pc, #128]	; (8018b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8018aba:	681b      	ldr	r3, [r3, #0]
 8018abc:	3304      	adds	r3, #4
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7fd fe86 	bl	80167d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018aca:	d10a      	bne.n	8018ae2 <prvAddCurrentTaskToDelayedList+0x3a>
 8018acc:	683b      	ldr	r3, [r7, #0]
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	d007      	beq.n	8018ae2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018ad2:	4b1a      	ldr	r3, [pc, #104]	; (8018b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8018ad4:	681b      	ldr	r3, [r3, #0]
 8018ad6:	3304      	adds	r3, #4
 8018ad8:	4619      	mov	r1, r3
 8018ada:	4819      	ldr	r0, [pc, #100]	; (8018b40 <prvAddCurrentTaskToDelayedList+0x98>)
 8018adc:	f7fd fe1b 	bl	8016716 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018ae0:	e026      	b.n	8018b30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018ae2:	68fa      	ldr	r2, [r7, #12]
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	4413      	add	r3, r2
 8018ae8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018aea:	4b14      	ldr	r3, [pc, #80]	; (8018b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8018aec:	681b      	ldr	r3, [r3, #0]
 8018aee:	68ba      	ldr	r2, [r7, #8]
 8018af0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018af2:	68ba      	ldr	r2, [r7, #8]
 8018af4:	68fb      	ldr	r3, [r7, #12]
 8018af6:	429a      	cmp	r2, r3
 8018af8:	d209      	bcs.n	8018b0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018afa:	4b12      	ldr	r3, [pc, #72]	; (8018b44 <prvAddCurrentTaskToDelayedList+0x9c>)
 8018afc:	681a      	ldr	r2, [r3, #0]
 8018afe:	4b0f      	ldr	r3, [pc, #60]	; (8018b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	3304      	adds	r3, #4
 8018b04:	4619      	mov	r1, r3
 8018b06:	4610      	mov	r0, r2
 8018b08:	f7fd fe29 	bl	801675e <vListInsert>
}
 8018b0c:	e010      	b.n	8018b30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018b0e:	4b0e      	ldr	r3, [pc, #56]	; (8018b48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8018b10:	681a      	ldr	r2, [r3, #0]
 8018b12:	4b0a      	ldr	r3, [pc, #40]	; (8018b3c <prvAddCurrentTaskToDelayedList+0x94>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	3304      	adds	r3, #4
 8018b18:	4619      	mov	r1, r3
 8018b1a:	4610      	mov	r0, r2
 8018b1c:	f7fd fe1f 	bl	801675e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018b20:	4b0a      	ldr	r3, [pc, #40]	; (8018b4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	68ba      	ldr	r2, [r7, #8]
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d202      	bcs.n	8018b30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8018b2a:	4a08      	ldr	r2, [pc, #32]	; (8018b4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8018b2c:	68bb      	ldr	r3, [r7, #8]
 8018b2e:	6013      	str	r3, [r2, #0]
}
 8018b30:	bf00      	nop
 8018b32:	3710      	adds	r7, #16
 8018b34:	46bd      	mov	sp, r7
 8018b36:	bd80      	pop	{r7, pc}
 8018b38:	20000f08 	.word	0x20000f08
 8018b3c:	20000a30 	.word	0x20000a30
 8018b40:	20000ef0 	.word	0x20000ef0
 8018b44:	20000ec0 	.word	0x20000ec0
 8018b48:	20000ebc 	.word	0x20000ebc
 8018b4c:	20000f24 	.word	0x20000f24

08018b50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8018b50:	b580      	push	{r7, lr}
 8018b52:	b08a      	sub	sp, #40	; 0x28
 8018b54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8018b56:	2300      	movs	r3, #0
 8018b58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8018b5a:	f000 fb0d 	bl	8019178 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8018b5e:	4b1d      	ldr	r3, [pc, #116]	; (8018bd4 <xTimerCreateTimerTask+0x84>)
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d021      	beq.n	8018baa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8018b66:	2300      	movs	r3, #0
 8018b68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8018b6e:	1d3a      	adds	r2, r7, #4
 8018b70:	f107 0108 	add.w	r1, r7, #8
 8018b74:	f107 030c 	add.w	r3, r7, #12
 8018b78:	4618      	mov	r0, r3
 8018b7a:	f7fd fd85 	bl	8016688 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8018b7e:	6879      	ldr	r1, [r7, #4]
 8018b80:	68bb      	ldr	r3, [r7, #8]
 8018b82:	68fa      	ldr	r2, [r7, #12]
 8018b84:	9202      	str	r2, [sp, #8]
 8018b86:	9301      	str	r3, [sp, #4]
 8018b88:	2302      	movs	r3, #2
 8018b8a:	9300      	str	r3, [sp, #0]
 8018b8c:	2300      	movs	r3, #0
 8018b8e:	460a      	mov	r2, r1
 8018b90:	4911      	ldr	r1, [pc, #68]	; (8018bd8 <xTimerCreateTimerTask+0x88>)
 8018b92:	4812      	ldr	r0, [pc, #72]	; (8018bdc <xTimerCreateTimerTask+0x8c>)
 8018b94:	f7fe ff30 	bl	80179f8 <xTaskCreateStatic>
 8018b98:	4602      	mov	r2, r0
 8018b9a:	4b11      	ldr	r3, [pc, #68]	; (8018be0 <xTimerCreateTimerTask+0x90>)
 8018b9c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8018b9e:	4b10      	ldr	r3, [pc, #64]	; (8018be0 <xTimerCreateTimerTask+0x90>)
 8018ba0:	681b      	ldr	r3, [r3, #0]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d001      	beq.n	8018baa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8018baa:	697b      	ldr	r3, [r7, #20]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d10b      	bne.n	8018bc8 <xTimerCreateTimerTask+0x78>
 8018bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018bb4:	b672      	cpsid	i
 8018bb6:	f383 8811 	msr	BASEPRI, r3
 8018bba:	f3bf 8f6f 	isb	sy
 8018bbe:	f3bf 8f4f 	dsb	sy
 8018bc2:	b662      	cpsie	i
 8018bc4:	613b      	str	r3, [r7, #16]
 8018bc6:	e7fe      	b.n	8018bc6 <xTimerCreateTimerTask+0x76>
	return xReturn;
 8018bc8:	697b      	ldr	r3, [r7, #20]
}
 8018bca:	4618      	mov	r0, r3
 8018bcc:	3718      	adds	r7, #24
 8018bce:	46bd      	mov	sp, r7
 8018bd0:	bd80      	pop	{r7, pc}
 8018bd2:	bf00      	nop
 8018bd4:	20000f60 	.word	0x20000f60
 8018bd8:	0801d554 	.word	0x0801d554
 8018bdc:	08018d1d 	.word	0x08018d1d
 8018be0:	20000f64 	.word	0x20000f64

08018be4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b08a      	sub	sp, #40	; 0x28
 8018be8:	af00      	add	r7, sp, #0
 8018bea:	60f8      	str	r0, [r7, #12]
 8018bec:	60b9      	str	r1, [r7, #8]
 8018bee:	607a      	str	r2, [r7, #4]
 8018bf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8018bf6:	68fb      	ldr	r3, [r7, #12]
 8018bf8:	2b00      	cmp	r3, #0
 8018bfa:	d10b      	bne.n	8018c14 <xTimerGenericCommand+0x30>
 8018bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018c00:	b672      	cpsid	i
 8018c02:	f383 8811 	msr	BASEPRI, r3
 8018c06:	f3bf 8f6f 	isb	sy
 8018c0a:	f3bf 8f4f 	dsb	sy
 8018c0e:	b662      	cpsie	i
 8018c10:	623b      	str	r3, [r7, #32]
 8018c12:	e7fe      	b.n	8018c12 <xTimerGenericCommand+0x2e>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8018c14:	4b19      	ldr	r3, [pc, #100]	; (8018c7c <xTimerGenericCommand+0x98>)
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d02a      	beq.n	8018c72 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8018c1c:	68bb      	ldr	r3, [r7, #8]
 8018c1e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8018c28:	68bb      	ldr	r3, [r7, #8]
 8018c2a:	2b05      	cmp	r3, #5
 8018c2c:	dc18      	bgt.n	8018c60 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8018c2e:	f7ff fdad 	bl	801878c <xTaskGetSchedulerState>
 8018c32:	4603      	mov	r3, r0
 8018c34:	2b02      	cmp	r3, #2
 8018c36:	d109      	bne.n	8018c4c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8018c38:	4b10      	ldr	r3, [pc, #64]	; (8018c7c <xTimerGenericCommand+0x98>)
 8018c3a:	6818      	ldr	r0, [r3, #0]
 8018c3c:	f107 0110 	add.w	r1, r7, #16
 8018c40:	2300      	movs	r3, #0
 8018c42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018c44:	f7fe f860 	bl	8016d08 <xQueueGenericSend>
 8018c48:	6278      	str	r0, [r7, #36]	; 0x24
 8018c4a:	e012      	b.n	8018c72 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8018c4c:	4b0b      	ldr	r3, [pc, #44]	; (8018c7c <xTimerGenericCommand+0x98>)
 8018c4e:	6818      	ldr	r0, [r3, #0]
 8018c50:	f107 0110 	add.w	r1, r7, #16
 8018c54:	2300      	movs	r3, #0
 8018c56:	2200      	movs	r2, #0
 8018c58:	f7fe f856 	bl	8016d08 <xQueueGenericSend>
 8018c5c:	6278      	str	r0, [r7, #36]	; 0x24
 8018c5e:	e008      	b.n	8018c72 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8018c60:	4b06      	ldr	r3, [pc, #24]	; (8018c7c <xTimerGenericCommand+0x98>)
 8018c62:	6818      	ldr	r0, [r3, #0]
 8018c64:	f107 0110 	add.w	r1, r7, #16
 8018c68:	2300      	movs	r3, #0
 8018c6a:	683a      	ldr	r2, [r7, #0]
 8018c6c:	f7fe f94e 	bl	8016f0c <xQueueGenericSendFromISR>
 8018c70:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8018c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018c74:	4618      	mov	r0, r3
 8018c76:	3728      	adds	r7, #40	; 0x28
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}
 8018c7c:	20000f60 	.word	0x20000f60

08018c80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8018c80:	b580      	push	{r7, lr}
 8018c82:	b088      	sub	sp, #32
 8018c84:	af02      	add	r7, sp, #8
 8018c86:	6078      	str	r0, [r7, #4]
 8018c88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c8a:	4b23      	ldr	r3, [pc, #140]	; (8018d18 <prvProcessExpiredTimer+0x98>)
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	68db      	ldr	r3, [r3, #12]
 8018c90:	68db      	ldr	r3, [r3, #12]
 8018c92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	3304      	adds	r3, #4
 8018c98:	4618      	mov	r0, r3
 8018c9a:	f7fd fd99 	bl	80167d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018c9e:	697b      	ldr	r3, [r7, #20]
 8018ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018ca4:	f003 0304 	and.w	r3, r3, #4
 8018ca8:	2b00      	cmp	r3, #0
 8018caa:	d023      	beq.n	8018cf4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8018cac:	697b      	ldr	r3, [r7, #20]
 8018cae:	699a      	ldr	r2, [r3, #24]
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	18d1      	adds	r1, r2, r3
 8018cb4:	687b      	ldr	r3, [r7, #4]
 8018cb6:	683a      	ldr	r2, [r7, #0]
 8018cb8:	6978      	ldr	r0, [r7, #20]
 8018cba:	f000 f8d3 	bl	8018e64 <prvInsertTimerInActiveList>
 8018cbe:	4603      	mov	r3, r0
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d020      	beq.n	8018d06 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8018cc4:	2300      	movs	r3, #0
 8018cc6:	9300      	str	r3, [sp, #0]
 8018cc8:	2300      	movs	r3, #0
 8018cca:	687a      	ldr	r2, [r7, #4]
 8018ccc:	2100      	movs	r1, #0
 8018cce:	6978      	ldr	r0, [r7, #20]
 8018cd0:	f7ff ff88 	bl	8018be4 <xTimerGenericCommand>
 8018cd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8018cd6:	693b      	ldr	r3, [r7, #16]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d114      	bne.n	8018d06 <prvProcessExpiredTimer+0x86>
 8018cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018ce0:	b672      	cpsid	i
 8018ce2:	f383 8811 	msr	BASEPRI, r3
 8018ce6:	f3bf 8f6f 	isb	sy
 8018cea:	f3bf 8f4f 	dsb	sy
 8018cee:	b662      	cpsie	i
 8018cf0:	60fb      	str	r3, [r7, #12]
 8018cf2:	e7fe      	b.n	8018cf2 <prvProcessExpiredTimer+0x72>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018cf4:	697b      	ldr	r3, [r7, #20]
 8018cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018cfa:	f023 0301 	bic.w	r3, r3, #1
 8018cfe:	b2da      	uxtb	r2, r3
 8018d00:	697b      	ldr	r3, [r7, #20]
 8018d02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018d06:	697b      	ldr	r3, [r7, #20]
 8018d08:	6a1b      	ldr	r3, [r3, #32]
 8018d0a:	6978      	ldr	r0, [r7, #20]
 8018d0c:	4798      	blx	r3
}
 8018d0e:	bf00      	nop
 8018d10:	3718      	adds	r7, #24
 8018d12:	46bd      	mov	sp, r7
 8018d14:	bd80      	pop	{r7, pc}
 8018d16:	bf00      	nop
 8018d18:	20000f58 	.word	0x20000f58

08018d1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8018d1c:	b580      	push	{r7, lr}
 8018d1e:	b084      	sub	sp, #16
 8018d20:	af00      	add	r7, sp, #0
 8018d22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018d24:	f107 0308 	add.w	r3, r7, #8
 8018d28:	4618      	mov	r0, r3
 8018d2a:	f000 f857 	bl	8018ddc <prvGetNextExpireTime>
 8018d2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8018d30:	68bb      	ldr	r3, [r7, #8]
 8018d32:	4619      	mov	r1, r3
 8018d34:	68f8      	ldr	r0, [r7, #12]
 8018d36:	f000 f803 	bl	8018d40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8018d3a:	f000 f8d5 	bl	8018ee8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8018d3e:	e7f1      	b.n	8018d24 <prvTimerTask+0x8>

08018d40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8018d40:	b580      	push	{r7, lr}
 8018d42:	b084      	sub	sp, #16
 8018d44:	af00      	add	r7, sp, #0
 8018d46:	6078      	str	r0, [r7, #4]
 8018d48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8018d4a:	f7ff f919 	bl	8017f80 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018d4e:	f107 0308 	add.w	r3, r7, #8
 8018d52:	4618      	mov	r0, r3
 8018d54:	f000 f866 	bl	8018e24 <prvSampleTimeNow>
 8018d58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8018d5a:	68bb      	ldr	r3, [r7, #8]
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d130      	bne.n	8018dc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8018d60:	683b      	ldr	r3, [r7, #0]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d10a      	bne.n	8018d7c <prvProcessTimerOrBlockTask+0x3c>
 8018d66:	687a      	ldr	r2, [r7, #4]
 8018d68:	68fb      	ldr	r3, [r7, #12]
 8018d6a:	429a      	cmp	r2, r3
 8018d6c:	d806      	bhi.n	8018d7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8018d6e:	f7ff f915 	bl	8017f9c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8018d72:	68f9      	ldr	r1, [r7, #12]
 8018d74:	6878      	ldr	r0, [r7, #4]
 8018d76:	f7ff ff83 	bl	8018c80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8018d7a:	e024      	b.n	8018dc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8018d7c:	683b      	ldr	r3, [r7, #0]
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d008      	beq.n	8018d94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8018d82:	4b13      	ldr	r3, [pc, #76]	; (8018dd0 <prvProcessTimerOrBlockTask+0x90>)
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	2b00      	cmp	r3, #0
 8018d8a:	d101      	bne.n	8018d90 <prvProcessTimerOrBlockTask+0x50>
 8018d8c:	2301      	movs	r3, #1
 8018d8e:	e000      	b.n	8018d92 <prvProcessTimerOrBlockTask+0x52>
 8018d90:	2300      	movs	r3, #0
 8018d92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8018d94:	4b0f      	ldr	r3, [pc, #60]	; (8018dd4 <prvProcessTimerOrBlockTask+0x94>)
 8018d96:	6818      	ldr	r0, [r3, #0]
 8018d98:	687a      	ldr	r2, [r7, #4]
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	1ad3      	subs	r3, r2, r3
 8018d9e:	683a      	ldr	r2, [r7, #0]
 8018da0:	4619      	mov	r1, r3
 8018da2:	f7fe fdf5 	bl	8017990 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8018da6:	f7ff f8f9 	bl	8017f9c <xTaskResumeAll>
 8018daa:	4603      	mov	r3, r0
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d10a      	bne.n	8018dc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8018db0:	4b09      	ldr	r3, [pc, #36]	; (8018dd8 <prvProcessTimerOrBlockTask+0x98>)
 8018db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018db6:	601a      	str	r2, [r3, #0]
 8018db8:	f3bf 8f4f 	dsb	sy
 8018dbc:	f3bf 8f6f 	isb	sy
}
 8018dc0:	e001      	b.n	8018dc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8018dc2:	f7ff f8eb 	bl	8017f9c <xTaskResumeAll>
}
 8018dc6:	bf00      	nop
 8018dc8:	3710      	adds	r7, #16
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bd80      	pop	{r7, pc}
 8018dce:	bf00      	nop
 8018dd0:	20000f5c 	.word	0x20000f5c
 8018dd4:	20000f60 	.word	0x20000f60
 8018dd8:	e000ed04 	.word	0xe000ed04

08018ddc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8018ddc:	b480      	push	{r7}
 8018dde:	b085      	sub	sp, #20
 8018de0:	af00      	add	r7, sp, #0
 8018de2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8018de4:	4b0e      	ldr	r3, [pc, #56]	; (8018e20 <prvGetNextExpireTime+0x44>)
 8018de6:	681b      	ldr	r3, [r3, #0]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d101      	bne.n	8018df2 <prvGetNextExpireTime+0x16>
 8018dee:	2201      	movs	r2, #1
 8018df0:	e000      	b.n	8018df4 <prvGetNextExpireTime+0x18>
 8018df2:	2200      	movs	r2, #0
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	681b      	ldr	r3, [r3, #0]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d105      	bne.n	8018e0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8018e00:	4b07      	ldr	r3, [pc, #28]	; (8018e20 <prvGetNextExpireTime+0x44>)
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	68db      	ldr	r3, [r3, #12]
 8018e06:	681b      	ldr	r3, [r3, #0]
 8018e08:	60fb      	str	r3, [r7, #12]
 8018e0a:	e001      	b.n	8018e10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8018e0c:	2300      	movs	r3, #0
 8018e0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8018e10:	68fb      	ldr	r3, [r7, #12]
}
 8018e12:	4618      	mov	r0, r3
 8018e14:	3714      	adds	r7, #20
 8018e16:	46bd      	mov	sp, r7
 8018e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e1c:	4770      	bx	lr
 8018e1e:	bf00      	nop
 8018e20:	20000f58 	.word	0x20000f58

08018e24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8018e24:	b580      	push	{r7, lr}
 8018e26:	b084      	sub	sp, #16
 8018e28:	af00      	add	r7, sp, #0
 8018e2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8018e2c:	f7ff f954 	bl	80180d8 <xTaskGetTickCount>
 8018e30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8018e32:	4b0b      	ldr	r3, [pc, #44]	; (8018e60 <prvSampleTimeNow+0x3c>)
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	68fa      	ldr	r2, [r7, #12]
 8018e38:	429a      	cmp	r2, r3
 8018e3a:	d205      	bcs.n	8018e48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8018e3c:	f000 f936 	bl	80190ac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	2201      	movs	r2, #1
 8018e44:	601a      	str	r2, [r3, #0]
 8018e46:	e002      	b.n	8018e4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	2200      	movs	r2, #0
 8018e4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8018e4e:	4a04      	ldr	r2, [pc, #16]	; (8018e60 <prvSampleTimeNow+0x3c>)
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8018e54:	68fb      	ldr	r3, [r7, #12]
}
 8018e56:	4618      	mov	r0, r3
 8018e58:	3710      	adds	r7, #16
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}
 8018e5e:	bf00      	nop
 8018e60:	20000f68 	.word	0x20000f68

08018e64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b086      	sub	sp, #24
 8018e68:	af00      	add	r7, sp, #0
 8018e6a:	60f8      	str	r0, [r7, #12]
 8018e6c:	60b9      	str	r1, [r7, #8]
 8018e6e:	607a      	str	r2, [r7, #4]
 8018e70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8018e72:	2300      	movs	r3, #0
 8018e74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8018e76:	68fb      	ldr	r3, [r7, #12]
 8018e78:	68ba      	ldr	r2, [r7, #8]
 8018e7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8018e7c:	68fb      	ldr	r3, [r7, #12]
 8018e7e:	68fa      	ldr	r2, [r7, #12]
 8018e80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8018e82:	68ba      	ldr	r2, [r7, #8]
 8018e84:	687b      	ldr	r3, [r7, #4]
 8018e86:	429a      	cmp	r2, r3
 8018e88:	d812      	bhi.n	8018eb0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018e8a:	687a      	ldr	r2, [r7, #4]
 8018e8c:	683b      	ldr	r3, [r7, #0]
 8018e8e:	1ad2      	subs	r2, r2, r3
 8018e90:	68fb      	ldr	r3, [r7, #12]
 8018e92:	699b      	ldr	r3, [r3, #24]
 8018e94:	429a      	cmp	r2, r3
 8018e96:	d302      	bcc.n	8018e9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8018e98:	2301      	movs	r3, #1
 8018e9a:	617b      	str	r3, [r7, #20]
 8018e9c:	e01b      	b.n	8018ed6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8018e9e:	4b10      	ldr	r3, [pc, #64]	; (8018ee0 <prvInsertTimerInActiveList+0x7c>)
 8018ea0:	681a      	ldr	r2, [r3, #0]
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	3304      	adds	r3, #4
 8018ea6:	4619      	mov	r1, r3
 8018ea8:	4610      	mov	r0, r2
 8018eaa:	f7fd fc58 	bl	801675e <vListInsert>
 8018eae:	e012      	b.n	8018ed6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8018eb0:	687a      	ldr	r2, [r7, #4]
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	429a      	cmp	r2, r3
 8018eb6:	d206      	bcs.n	8018ec6 <prvInsertTimerInActiveList+0x62>
 8018eb8:	68ba      	ldr	r2, [r7, #8]
 8018eba:	683b      	ldr	r3, [r7, #0]
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d302      	bcc.n	8018ec6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8018ec0:	2301      	movs	r3, #1
 8018ec2:	617b      	str	r3, [r7, #20]
 8018ec4:	e007      	b.n	8018ed6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8018ec6:	4b07      	ldr	r3, [pc, #28]	; (8018ee4 <prvInsertTimerInActiveList+0x80>)
 8018ec8:	681a      	ldr	r2, [r3, #0]
 8018eca:	68fb      	ldr	r3, [r7, #12]
 8018ecc:	3304      	adds	r3, #4
 8018ece:	4619      	mov	r1, r3
 8018ed0:	4610      	mov	r0, r2
 8018ed2:	f7fd fc44 	bl	801675e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8018ed6:	697b      	ldr	r3, [r7, #20]
}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3718      	adds	r7, #24
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}
 8018ee0:	20000f5c 	.word	0x20000f5c
 8018ee4:	20000f58 	.word	0x20000f58

08018ee8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8018ee8:	b580      	push	{r7, lr}
 8018eea:	b08e      	sub	sp, #56	; 0x38
 8018eec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8018eee:	e0cc      	b.n	801908a <prvProcessReceivedCommands+0x1a2>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	da19      	bge.n	8018f2a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8018ef6:	1d3b      	adds	r3, r7, #4
 8018ef8:	3304      	adds	r3, #4
 8018efa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8018efc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018efe:	2b00      	cmp	r3, #0
 8018f00:	d10b      	bne.n	8018f1a <prvProcessReceivedCommands+0x32>
 8018f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f06:	b672      	cpsid	i
 8018f08:	f383 8811 	msr	BASEPRI, r3
 8018f0c:	f3bf 8f6f 	isb	sy
 8018f10:	f3bf 8f4f 	dsb	sy
 8018f14:	b662      	cpsie	i
 8018f16:	61fb      	str	r3, [r7, #28]
 8018f18:	e7fe      	b.n	8018f18 <prvProcessReceivedCommands+0x30>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8018f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f20:	6850      	ldr	r0, [r2, #4]
 8018f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018f24:	6892      	ldr	r2, [r2, #8]
 8018f26:	4611      	mov	r1, r2
 8018f28:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8018f2a:	687b      	ldr	r3, [r7, #4]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	f2c0 80ab 	blt.w	8019088 <prvProcessReceivedCommands+0x1a0>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8018f32:	68fb      	ldr	r3, [r7, #12]
 8018f34:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8018f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f38:	695b      	ldr	r3, [r3, #20]
 8018f3a:	2b00      	cmp	r3, #0
 8018f3c:	d004      	beq.n	8018f48 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8018f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f40:	3304      	adds	r3, #4
 8018f42:	4618      	mov	r0, r3
 8018f44:	f7fd fc44 	bl	80167d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8018f48:	463b      	mov	r3, r7
 8018f4a:	4618      	mov	r0, r3
 8018f4c:	f7ff ff6a 	bl	8018e24 <prvSampleTimeNow>
 8018f50:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8018f52:	687b      	ldr	r3, [r7, #4]
 8018f54:	2b09      	cmp	r3, #9
 8018f56:	f200 8098 	bhi.w	801908a <prvProcessReceivedCommands+0x1a2>
 8018f5a:	a201      	add	r2, pc, #4	; (adr r2, 8018f60 <prvProcessReceivedCommands+0x78>)
 8018f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018f60:	08018f89 	.word	0x08018f89
 8018f64:	08018f89 	.word	0x08018f89
 8018f68:	08018f89 	.word	0x08018f89
 8018f6c:	08018fff 	.word	0x08018fff
 8018f70:	08019013 	.word	0x08019013
 8018f74:	0801905f 	.word	0x0801905f
 8018f78:	08018f89 	.word	0x08018f89
 8018f7c:	08018f89 	.word	0x08018f89
 8018f80:	08018fff 	.word	0x08018fff
 8018f84:	08019013 	.word	0x08019013
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8018f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018f8e:	f043 0301 	orr.w	r3, r3, #1
 8018f92:	b2da      	uxtb	r2, r3
 8018f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8018f9a:	68ba      	ldr	r2, [r7, #8]
 8018f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f9e:	699b      	ldr	r3, [r3, #24]
 8018fa0:	18d1      	adds	r1, r2, r3
 8018fa2:	68bb      	ldr	r3, [r7, #8]
 8018fa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fa8:	f7ff ff5c 	bl	8018e64 <prvInsertTimerInActiveList>
 8018fac:	4603      	mov	r3, r0
 8018fae:	2b00      	cmp	r3, #0
 8018fb0:	d06b      	beq.n	801908a <prvProcessReceivedCommands+0x1a2>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8018fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fb4:	6a1b      	ldr	r3, [r3, #32]
 8018fb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8018fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8018fc0:	f003 0304 	and.w	r3, r3, #4
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d060      	beq.n	801908a <prvProcessReceivedCommands+0x1a2>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8018fc8:	68ba      	ldr	r2, [r7, #8]
 8018fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018fcc:	699b      	ldr	r3, [r3, #24]
 8018fce:	441a      	add	r2, r3
 8018fd0:	2300      	movs	r3, #0
 8018fd2:	9300      	str	r3, [sp, #0]
 8018fd4:	2300      	movs	r3, #0
 8018fd6:	2100      	movs	r1, #0
 8018fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018fda:	f7ff fe03 	bl	8018be4 <xTimerGenericCommand>
 8018fde:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8018fe0:	6a3b      	ldr	r3, [r7, #32]
 8018fe2:	2b00      	cmp	r3, #0
 8018fe4:	d151      	bne.n	801908a <prvProcessReceivedCommands+0x1a2>
 8018fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fea:	b672      	cpsid	i
 8018fec:	f383 8811 	msr	BASEPRI, r3
 8018ff0:	f3bf 8f6f 	isb	sy
 8018ff4:	f3bf 8f4f 	dsb	sy
 8018ff8:	b662      	cpsie	i
 8018ffa:	61bb      	str	r3, [r7, #24]
 8018ffc:	e7fe      	b.n	8018ffc <prvProcessReceivedCommands+0x114>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8018ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019000:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019004:	f023 0301 	bic.w	r3, r3, #1
 8019008:	b2da      	uxtb	r2, r3
 801900a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801900c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8019010:	e03b      	b.n	801908a <prvProcessReceivedCommands+0x1a2>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8019012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019014:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019018:	f043 0301 	orr.w	r3, r3, #1
 801901c:	b2da      	uxtb	r2, r3
 801901e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019020:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8019024:	68ba      	ldr	r2, [r7, #8]
 8019026:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019028:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801902a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801902c:	699b      	ldr	r3, [r3, #24]
 801902e:	2b00      	cmp	r3, #0
 8019030:	d10b      	bne.n	801904a <prvProcessReceivedCommands+0x162>
 8019032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019036:	b672      	cpsid	i
 8019038:	f383 8811 	msr	BASEPRI, r3
 801903c:	f3bf 8f6f 	isb	sy
 8019040:	f3bf 8f4f 	dsb	sy
 8019044:	b662      	cpsie	i
 8019046:	617b      	str	r3, [r7, #20]
 8019048:	e7fe      	b.n	8019048 <prvProcessReceivedCommands+0x160>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801904c:	699a      	ldr	r2, [r3, #24]
 801904e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019050:	18d1      	adds	r1, r2, r3
 8019052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019056:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019058:	f7ff ff04 	bl	8018e64 <prvInsertTimerInActiveList>
					break;
 801905c:	e015      	b.n	801908a <prvProcessReceivedCommands+0x1a2>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801905e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019060:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8019064:	f003 0302 	and.w	r3, r3, #2
 8019068:	2b00      	cmp	r3, #0
 801906a:	d103      	bne.n	8019074 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801906c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801906e:	f000 fbb5 	bl	80197dc <vPortFree>
 8019072:	e00a      	b.n	801908a <prvProcessReceivedCommands+0x1a2>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8019074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019076:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801907a:	f023 0301 	bic.w	r3, r3, #1
 801907e:	b2da      	uxtb	r2, r3
 8019080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019082:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8019086:	e000      	b.n	801908a <prvProcessReceivedCommands+0x1a2>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8019088:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801908a:	4b07      	ldr	r3, [pc, #28]	; (80190a8 <prvProcessReceivedCommands+0x1c0>)
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	1d39      	adds	r1, r7, #4
 8019090:	2200      	movs	r2, #0
 8019092:	4618      	mov	r0, r3
 8019094:	f7fe f868 	bl	8017168 <xQueueReceive>
 8019098:	4603      	mov	r3, r0
 801909a:	2b00      	cmp	r3, #0
 801909c:	f47f af28 	bne.w	8018ef0 <prvProcessReceivedCommands+0x8>
	}
}
 80190a0:	bf00      	nop
 80190a2:	3730      	adds	r7, #48	; 0x30
 80190a4:	46bd      	mov	sp, r7
 80190a6:	bd80      	pop	{r7, pc}
 80190a8:	20000f60 	.word	0x20000f60

080190ac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80190ac:	b580      	push	{r7, lr}
 80190ae:	b088      	sub	sp, #32
 80190b0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80190b2:	e049      	b.n	8019148 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80190b4:	4b2e      	ldr	r3, [pc, #184]	; (8019170 <prvSwitchTimerLists+0xc4>)
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	68db      	ldr	r3, [r3, #12]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80190be:	4b2c      	ldr	r3, [pc, #176]	; (8019170 <prvSwitchTimerLists+0xc4>)
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	68db      	ldr	r3, [r3, #12]
 80190c4:	68db      	ldr	r3, [r3, #12]
 80190c6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80190c8:	68fb      	ldr	r3, [r7, #12]
 80190ca:	3304      	adds	r3, #4
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7fd fb7f 	bl	80167d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	6a1b      	ldr	r3, [r3, #32]
 80190d6:	68f8      	ldr	r0, [r7, #12]
 80190d8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80190da:	68fb      	ldr	r3, [r7, #12]
 80190dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80190e0:	f003 0304 	and.w	r3, r3, #4
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d02f      	beq.n	8019148 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80190e8:	68fb      	ldr	r3, [r7, #12]
 80190ea:	699b      	ldr	r3, [r3, #24]
 80190ec:	693a      	ldr	r2, [r7, #16]
 80190ee:	4413      	add	r3, r2
 80190f0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80190f2:	68ba      	ldr	r2, [r7, #8]
 80190f4:	693b      	ldr	r3, [r7, #16]
 80190f6:	429a      	cmp	r2, r3
 80190f8:	d90e      	bls.n	8019118 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	68ba      	ldr	r2, [r7, #8]
 80190fe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8019100:	68fb      	ldr	r3, [r7, #12]
 8019102:	68fa      	ldr	r2, [r7, #12]
 8019104:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8019106:	4b1a      	ldr	r3, [pc, #104]	; (8019170 <prvSwitchTimerLists+0xc4>)
 8019108:	681a      	ldr	r2, [r3, #0]
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	3304      	adds	r3, #4
 801910e:	4619      	mov	r1, r3
 8019110:	4610      	mov	r0, r2
 8019112:	f7fd fb24 	bl	801675e <vListInsert>
 8019116:	e017      	b.n	8019148 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8019118:	2300      	movs	r3, #0
 801911a:	9300      	str	r3, [sp, #0]
 801911c:	2300      	movs	r3, #0
 801911e:	693a      	ldr	r2, [r7, #16]
 8019120:	2100      	movs	r1, #0
 8019122:	68f8      	ldr	r0, [r7, #12]
 8019124:	f7ff fd5e 	bl	8018be4 <xTimerGenericCommand>
 8019128:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	2b00      	cmp	r3, #0
 801912e:	d10b      	bne.n	8019148 <prvSwitchTimerLists+0x9c>
 8019130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019134:	b672      	cpsid	i
 8019136:	f383 8811 	msr	BASEPRI, r3
 801913a:	f3bf 8f6f 	isb	sy
 801913e:	f3bf 8f4f 	dsb	sy
 8019142:	b662      	cpsie	i
 8019144:	603b      	str	r3, [r7, #0]
 8019146:	e7fe      	b.n	8019146 <prvSwitchTimerLists+0x9a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8019148:	4b09      	ldr	r3, [pc, #36]	; (8019170 <prvSwitchTimerLists+0xc4>)
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	2b00      	cmp	r3, #0
 8019150:	d1b0      	bne.n	80190b4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8019152:	4b07      	ldr	r3, [pc, #28]	; (8019170 <prvSwitchTimerLists+0xc4>)
 8019154:	681b      	ldr	r3, [r3, #0]
 8019156:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8019158:	4b06      	ldr	r3, [pc, #24]	; (8019174 <prvSwitchTimerLists+0xc8>)
 801915a:	681b      	ldr	r3, [r3, #0]
 801915c:	4a04      	ldr	r2, [pc, #16]	; (8019170 <prvSwitchTimerLists+0xc4>)
 801915e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8019160:	4a04      	ldr	r2, [pc, #16]	; (8019174 <prvSwitchTimerLists+0xc8>)
 8019162:	697b      	ldr	r3, [r7, #20]
 8019164:	6013      	str	r3, [r2, #0]
}
 8019166:	bf00      	nop
 8019168:	3718      	adds	r7, #24
 801916a:	46bd      	mov	sp, r7
 801916c:	bd80      	pop	{r7, pc}
 801916e:	bf00      	nop
 8019170:	20000f58 	.word	0x20000f58
 8019174:	20000f5c 	.word	0x20000f5c

08019178 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b082      	sub	sp, #8
 801917c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801917e:	f000 f943 	bl	8019408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8019182:	4b15      	ldr	r3, [pc, #84]	; (80191d8 <prvCheckForValidListAndQueue+0x60>)
 8019184:	681b      	ldr	r3, [r3, #0]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d120      	bne.n	80191cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801918a:	4814      	ldr	r0, [pc, #80]	; (80191dc <prvCheckForValidListAndQueue+0x64>)
 801918c:	f7fd fa96 	bl	80166bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8019190:	4813      	ldr	r0, [pc, #76]	; (80191e0 <prvCheckForValidListAndQueue+0x68>)
 8019192:	f7fd fa93 	bl	80166bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8019196:	4b13      	ldr	r3, [pc, #76]	; (80191e4 <prvCheckForValidListAndQueue+0x6c>)
 8019198:	4a10      	ldr	r2, [pc, #64]	; (80191dc <prvCheckForValidListAndQueue+0x64>)
 801919a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801919c:	4b12      	ldr	r3, [pc, #72]	; (80191e8 <prvCheckForValidListAndQueue+0x70>)
 801919e:	4a10      	ldr	r2, [pc, #64]	; (80191e0 <prvCheckForValidListAndQueue+0x68>)
 80191a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80191a2:	2300      	movs	r3, #0
 80191a4:	9300      	str	r3, [sp, #0]
 80191a6:	4b11      	ldr	r3, [pc, #68]	; (80191ec <prvCheckForValidListAndQueue+0x74>)
 80191a8:	4a11      	ldr	r2, [pc, #68]	; (80191f0 <prvCheckForValidListAndQueue+0x78>)
 80191aa:	2110      	movs	r1, #16
 80191ac:	200a      	movs	r0, #10
 80191ae:	f7fd fba3 	bl	80168f8 <xQueueGenericCreateStatic>
 80191b2:	4602      	mov	r2, r0
 80191b4:	4b08      	ldr	r3, [pc, #32]	; (80191d8 <prvCheckForValidListAndQueue+0x60>)
 80191b6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80191b8:	4b07      	ldr	r3, [pc, #28]	; (80191d8 <prvCheckForValidListAndQueue+0x60>)
 80191ba:	681b      	ldr	r3, [r3, #0]
 80191bc:	2b00      	cmp	r3, #0
 80191be:	d005      	beq.n	80191cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80191c0:	4b05      	ldr	r3, [pc, #20]	; (80191d8 <prvCheckForValidListAndQueue+0x60>)
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	490b      	ldr	r1, [pc, #44]	; (80191f4 <prvCheckForValidListAndQueue+0x7c>)
 80191c6:	4618      	mov	r0, r3
 80191c8:	f7fe fb90 	bl	80178ec <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80191cc:	f000 f94e 	bl	801946c <vPortExitCritical>
}
 80191d0:	bf00      	nop
 80191d2:	46bd      	mov	sp, r7
 80191d4:	bd80      	pop	{r7, pc}
 80191d6:	bf00      	nop
 80191d8:	20000f60 	.word	0x20000f60
 80191dc:	20000f30 	.word	0x20000f30
 80191e0:	20000f44 	.word	0x20000f44
 80191e4:	20000f58 	.word	0x20000f58
 80191e8:	20000f5c 	.word	0x20000f5c
 80191ec:	2000100c 	.word	0x2000100c
 80191f0:	20000f6c 	.word	0x20000f6c
 80191f4:	0801d55c 	.word	0x0801d55c

080191f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80191f8:	b480      	push	{r7}
 80191fa:	b085      	sub	sp, #20
 80191fc:	af00      	add	r7, sp, #0
 80191fe:	60f8      	str	r0, [r7, #12]
 8019200:	60b9      	str	r1, [r7, #8]
 8019202:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8019204:	68fb      	ldr	r3, [r7, #12]
 8019206:	3b04      	subs	r3, #4
 8019208:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801920a:	68fb      	ldr	r3, [r7, #12]
 801920c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8019210:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019212:	68fb      	ldr	r3, [r7, #12]
 8019214:	3b04      	subs	r3, #4
 8019216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8019218:	68bb      	ldr	r3, [r7, #8]
 801921a:	f023 0201 	bic.w	r2, r3, #1
 801921e:	68fb      	ldr	r3, [r7, #12]
 8019220:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	3b04      	subs	r3, #4
 8019226:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8019228:	4a0c      	ldr	r2, [pc, #48]	; (801925c <pxPortInitialiseStack+0x64>)
 801922a:	68fb      	ldr	r3, [r7, #12]
 801922c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801922e:	68fb      	ldr	r3, [r7, #12]
 8019230:	3b14      	subs	r3, #20
 8019232:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8019234:	687a      	ldr	r2, [r7, #4]
 8019236:	68fb      	ldr	r3, [r7, #12]
 8019238:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	3b04      	subs	r3, #4
 801923e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	f06f 0202 	mvn.w	r2, #2
 8019246:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8019248:	68fb      	ldr	r3, [r7, #12]
 801924a:	3b20      	subs	r3, #32
 801924c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801924e:	68fb      	ldr	r3, [r7, #12]
}
 8019250:	4618      	mov	r0, r3
 8019252:	3714      	adds	r7, #20
 8019254:	46bd      	mov	sp, r7
 8019256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801925a:	4770      	bx	lr
 801925c:	08019261 	.word	0x08019261

08019260 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8019260:	b480      	push	{r7}
 8019262:	b085      	sub	sp, #20
 8019264:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8019266:	2300      	movs	r3, #0
 8019268:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801926a:	4b13      	ldr	r3, [pc, #76]	; (80192b8 <prvTaskExitError+0x58>)
 801926c:	681b      	ldr	r3, [r3, #0]
 801926e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019272:	d00b      	beq.n	801928c <prvTaskExitError+0x2c>
 8019274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019278:	b672      	cpsid	i
 801927a:	f383 8811 	msr	BASEPRI, r3
 801927e:	f3bf 8f6f 	isb	sy
 8019282:	f3bf 8f4f 	dsb	sy
 8019286:	b662      	cpsie	i
 8019288:	60fb      	str	r3, [r7, #12]
 801928a:	e7fe      	b.n	801928a <prvTaskExitError+0x2a>
 801928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019290:	b672      	cpsid	i
 8019292:	f383 8811 	msr	BASEPRI, r3
 8019296:	f3bf 8f6f 	isb	sy
 801929a:	f3bf 8f4f 	dsb	sy
 801929e:	b662      	cpsie	i
 80192a0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80192a2:	bf00      	nop
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	d0fc      	beq.n	80192a4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80192aa:	bf00      	nop
 80192ac:	3714      	adds	r7, #20
 80192ae:	46bd      	mov	sp, r7
 80192b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192b4:	4770      	bx	lr
 80192b6:	bf00      	nop
 80192b8:	2000011c 	.word	0x2000011c
 80192bc:	00000000 	.word	0x00000000

080192c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80192c0:	4b07      	ldr	r3, [pc, #28]	; (80192e0 <pxCurrentTCBConst2>)
 80192c2:	6819      	ldr	r1, [r3, #0]
 80192c4:	6808      	ldr	r0, [r1, #0]
 80192c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192ca:	f380 8809 	msr	PSP, r0
 80192ce:	f3bf 8f6f 	isb	sy
 80192d2:	f04f 0000 	mov.w	r0, #0
 80192d6:	f380 8811 	msr	BASEPRI, r0
 80192da:	4770      	bx	lr
 80192dc:	f3af 8000 	nop.w

080192e0 <pxCurrentTCBConst2>:
 80192e0:	20000a30 	.word	0x20000a30
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80192e4:	bf00      	nop
 80192e6:	bf00      	nop

080192e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80192e8:	4808      	ldr	r0, [pc, #32]	; (801930c <prvPortStartFirstTask+0x24>)
 80192ea:	6800      	ldr	r0, [r0, #0]
 80192ec:	6800      	ldr	r0, [r0, #0]
 80192ee:	f380 8808 	msr	MSP, r0
 80192f2:	f04f 0000 	mov.w	r0, #0
 80192f6:	f380 8814 	msr	CONTROL, r0
 80192fa:	b662      	cpsie	i
 80192fc:	b661      	cpsie	f
 80192fe:	f3bf 8f4f 	dsb	sy
 8019302:	f3bf 8f6f 	isb	sy
 8019306:	df00      	svc	0
 8019308:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801930a:	bf00      	nop
 801930c:	e000ed08 	.word	0xe000ed08

08019310 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b084      	sub	sp, #16
 8019314:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8019316:	4b36      	ldr	r3, [pc, #216]	; (80193f0 <xPortStartScheduler+0xe0>)
 8019318:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801931a:	68fb      	ldr	r3, [r7, #12]
 801931c:	781b      	ldrb	r3, [r3, #0]
 801931e:	b2db      	uxtb	r3, r3
 8019320:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8019322:	68fb      	ldr	r3, [r7, #12]
 8019324:	22ff      	movs	r2, #255	; 0xff
 8019326:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	781b      	ldrb	r3, [r3, #0]
 801932c:	b2db      	uxtb	r3, r3
 801932e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8019330:	78fb      	ldrb	r3, [r7, #3]
 8019332:	b2db      	uxtb	r3, r3
 8019334:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8019338:	b2da      	uxtb	r2, r3
 801933a:	4b2e      	ldr	r3, [pc, #184]	; (80193f4 <xPortStartScheduler+0xe4>)
 801933c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801933e:	4b2e      	ldr	r3, [pc, #184]	; (80193f8 <xPortStartScheduler+0xe8>)
 8019340:	2207      	movs	r2, #7
 8019342:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8019344:	e009      	b.n	801935a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8019346:	4b2c      	ldr	r3, [pc, #176]	; (80193f8 <xPortStartScheduler+0xe8>)
 8019348:	681b      	ldr	r3, [r3, #0]
 801934a:	3b01      	subs	r3, #1
 801934c:	4a2a      	ldr	r2, [pc, #168]	; (80193f8 <xPortStartScheduler+0xe8>)
 801934e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8019350:	78fb      	ldrb	r3, [r7, #3]
 8019352:	b2db      	uxtb	r3, r3
 8019354:	005b      	lsls	r3, r3, #1
 8019356:	b2db      	uxtb	r3, r3
 8019358:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801935a:	78fb      	ldrb	r3, [r7, #3]
 801935c:	b2db      	uxtb	r3, r3
 801935e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019362:	2b80      	cmp	r3, #128	; 0x80
 8019364:	d0ef      	beq.n	8019346 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8019366:	4b24      	ldr	r3, [pc, #144]	; (80193f8 <xPortStartScheduler+0xe8>)
 8019368:	681b      	ldr	r3, [r3, #0]
 801936a:	f1c3 0307 	rsb	r3, r3, #7
 801936e:	2b04      	cmp	r3, #4
 8019370:	d00b      	beq.n	801938a <xPortStartScheduler+0x7a>
 8019372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019376:	b672      	cpsid	i
 8019378:	f383 8811 	msr	BASEPRI, r3
 801937c:	f3bf 8f6f 	isb	sy
 8019380:	f3bf 8f4f 	dsb	sy
 8019384:	b662      	cpsie	i
 8019386:	60bb      	str	r3, [r7, #8]
 8019388:	e7fe      	b.n	8019388 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801938a:	4b1b      	ldr	r3, [pc, #108]	; (80193f8 <xPortStartScheduler+0xe8>)
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	021b      	lsls	r3, r3, #8
 8019390:	4a19      	ldr	r2, [pc, #100]	; (80193f8 <xPortStartScheduler+0xe8>)
 8019392:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8019394:	4b18      	ldr	r3, [pc, #96]	; (80193f8 <xPortStartScheduler+0xe8>)
 8019396:	681b      	ldr	r3, [r3, #0]
 8019398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801939c:	4a16      	ldr	r2, [pc, #88]	; (80193f8 <xPortStartScheduler+0xe8>)
 801939e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	b2da      	uxtb	r2, r3
 80193a4:	68fb      	ldr	r3, [r7, #12]
 80193a6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80193a8:	4b14      	ldr	r3, [pc, #80]	; (80193fc <xPortStartScheduler+0xec>)
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	4a13      	ldr	r2, [pc, #76]	; (80193fc <xPortStartScheduler+0xec>)
 80193ae:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80193b2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80193b4:	4b11      	ldr	r3, [pc, #68]	; (80193fc <xPortStartScheduler+0xec>)
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	4a10      	ldr	r2, [pc, #64]	; (80193fc <xPortStartScheduler+0xec>)
 80193ba:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80193be:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80193c0:	f000 f8d4 	bl	801956c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80193c4:	4b0e      	ldr	r3, [pc, #56]	; (8019400 <xPortStartScheduler+0xf0>)
 80193c6:	2200      	movs	r2, #0
 80193c8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80193ca:	f000 f8f3 	bl	80195b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80193ce:	4b0d      	ldr	r3, [pc, #52]	; (8019404 <xPortStartScheduler+0xf4>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	4a0c      	ldr	r2, [pc, #48]	; (8019404 <xPortStartScheduler+0xf4>)
 80193d4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80193d8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80193da:	f7ff ff85 	bl	80192e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80193de:	f7fe ff57 	bl	8018290 <vTaskSwitchContext>
	prvTaskExitError();
 80193e2:	f7ff ff3d 	bl	8019260 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80193e6:	2300      	movs	r3, #0
}
 80193e8:	4618      	mov	r0, r3
 80193ea:	3710      	adds	r7, #16
 80193ec:	46bd      	mov	sp, r7
 80193ee:	bd80      	pop	{r7, pc}
 80193f0:	e000e400 	.word	0xe000e400
 80193f4:	2000105c 	.word	0x2000105c
 80193f8:	20001060 	.word	0x20001060
 80193fc:	e000ed20 	.word	0xe000ed20
 8019400:	2000011c 	.word	0x2000011c
 8019404:	e000ef34 	.word	0xe000ef34

08019408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019408:	b480      	push	{r7}
 801940a:	b083      	sub	sp, #12
 801940c:	af00      	add	r7, sp, #0
 801940e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019412:	b672      	cpsid	i
 8019414:	f383 8811 	msr	BASEPRI, r3
 8019418:	f3bf 8f6f 	isb	sy
 801941c:	f3bf 8f4f 	dsb	sy
 8019420:	b662      	cpsie	i
 8019422:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019424:	4b0f      	ldr	r3, [pc, #60]	; (8019464 <vPortEnterCritical+0x5c>)
 8019426:	681b      	ldr	r3, [r3, #0]
 8019428:	3301      	adds	r3, #1
 801942a:	4a0e      	ldr	r2, [pc, #56]	; (8019464 <vPortEnterCritical+0x5c>)
 801942c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801942e:	4b0d      	ldr	r3, [pc, #52]	; (8019464 <vPortEnterCritical+0x5c>)
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	2b01      	cmp	r3, #1
 8019434:	d110      	bne.n	8019458 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019436:	4b0c      	ldr	r3, [pc, #48]	; (8019468 <vPortEnterCritical+0x60>)
 8019438:	681b      	ldr	r3, [r3, #0]
 801943a:	b2db      	uxtb	r3, r3
 801943c:	2b00      	cmp	r3, #0
 801943e:	d00b      	beq.n	8019458 <vPortEnterCritical+0x50>
 8019440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019444:	b672      	cpsid	i
 8019446:	f383 8811 	msr	BASEPRI, r3
 801944a:	f3bf 8f6f 	isb	sy
 801944e:	f3bf 8f4f 	dsb	sy
 8019452:	b662      	cpsie	i
 8019454:	603b      	str	r3, [r7, #0]
 8019456:	e7fe      	b.n	8019456 <vPortEnterCritical+0x4e>
	}
}
 8019458:	bf00      	nop
 801945a:	370c      	adds	r7, #12
 801945c:	46bd      	mov	sp, r7
 801945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019462:	4770      	bx	lr
 8019464:	2000011c 	.word	0x2000011c
 8019468:	e000ed04 	.word	0xe000ed04

0801946c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801946c:	b480      	push	{r7}
 801946e:	b083      	sub	sp, #12
 8019470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8019472:	4b12      	ldr	r3, [pc, #72]	; (80194bc <vPortExitCritical+0x50>)
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	2b00      	cmp	r3, #0
 8019478:	d10b      	bne.n	8019492 <vPortExitCritical+0x26>
 801947a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801947e:	b672      	cpsid	i
 8019480:	f383 8811 	msr	BASEPRI, r3
 8019484:	f3bf 8f6f 	isb	sy
 8019488:	f3bf 8f4f 	dsb	sy
 801948c:	b662      	cpsie	i
 801948e:	607b      	str	r3, [r7, #4]
 8019490:	e7fe      	b.n	8019490 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8019492:	4b0a      	ldr	r3, [pc, #40]	; (80194bc <vPortExitCritical+0x50>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	3b01      	subs	r3, #1
 8019498:	4a08      	ldr	r2, [pc, #32]	; (80194bc <vPortExitCritical+0x50>)
 801949a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801949c:	4b07      	ldr	r3, [pc, #28]	; (80194bc <vPortExitCritical+0x50>)
 801949e:	681b      	ldr	r3, [r3, #0]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d104      	bne.n	80194ae <vPortExitCritical+0x42>
 80194a4:	2300      	movs	r3, #0
 80194a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80194a8:	683b      	ldr	r3, [r7, #0]
 80194aa:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80194ae:	bf00      	nop
 80194b0:	370c      	adds	r7, #12
 80194b2:	46bd      	mov	sp, r7
 80194b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b8:	4770      	bx	lr
 80194ba:	bf00      	nop
 80194bc:	2000011c 	.word	0x2000011c

080194c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80194c0:	f3ef 8009 	mrs	r0, PSP
 80194c4:	f3bf 8f6f 	isb	sy
 80194c8:	4b15      	ldr	r3, [pc, #84]	; (8019520 <pxCurrentTCBConst>)
 80194ca:	681a      	ldr	r2, [r3, #0]
 80194cc:	f01e 0f10 	tst.w	lr, #16
 80194d0:	bf08      	it	eq
 80194d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80194d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80194da:	6010      	str	r0, [r2, #0]
 80194dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80194e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80194e4:	b672      	cpsid	i
 80194e6:	f380 8811 	msr	BASEPRI, r0
 80194ea:	f3bf 8f4f 	dsb	sy
 80194ee:	f3bf 8f6f 	isb	sy
 80194f2:	b662      	cpsie	i
 80194f4:	f7fe fecc 	bl	8018290 <vTaskSwitchContext>
 80194f8:	f04f 0000 	mov.w	r0, #0
 80194fc:	f380 8811 	msr	BASEPRI, r0
 8019500:	bc09      	pop	{r0, r3}
 8019502:	6819      	ldr	r1, [r3, #0]
 8019504:	6808      	ldr	r0, [r1, #0]
 8019506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801950a:	f01e 0f10 	tst.w	lr, #16
 801950e:	bf08      	it	eq
 8019510:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019514:	f380 8809 	msr	PSP, r0
 8019518:	f3bf 8f6f 	isb	sy
 801951c:	4770      	bx	lr
 801951e:	bf00      	nop

08019520 <pxCurrentTCBConst>:
 8019520:	20000a30 	.word	0x20000a30
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019524:	bf00      	nop
 8019526:	bf00      	nop

08019528 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019528:	b580      	push	{r7, lr}
 801952a:	b082      	sub	sp, #8
 801952c:	af00      	add	r7, sp, #0
	__asm volatile
 801952e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019532:	b672      	cpsid	i
 8019534:	f383 8811 	msr	BASEPRI, r3
 8019538:	f3bf 8f6f 	isb	sy
 801953c:	f3bf 8f4f 	dsb	sy
 8019540:	b662      	cpsie	i
 8019542:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019544:	f7fe fdea 	bl	801811c <xTaskIncrementTick>
 8019548:	4603      	mov	r3, r0
 801954a:	2b00      	cmp	r3, #0
 801954c:	d003      	beq.n	8019556 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801954e:	4b06      	ldr	r3, [pc, #24]	; (8019568 <SysTick_Handler+0x40>)
 8019550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019554:	601a      	str	r2, [r3, #0]
 8019556:	2300      	movs	r3, #0
 8019558:	603b      	str	r3, [r7, #0]
	__asm volatile
 801955a:	683b      	ldr	r3, [r7, #0]
 801955c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8019560:	bf00      	nop
 8019562:	3708      	adds	r7, #8
 8019564:	46bd      	mov	sp, r7
 8019566:	bd80      	pop	{r7, pc}
 8019568:	e000ed04 	.word	0xe000ed04

0801956c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801956c:	b480      	push	{r7}
 801956e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8019570:	4b0b      	ldr	r3, [pc, #44]	; (80195a0 <vPortSetupTimerInterrupt+0x34>)
 8019572:	2200      	movs	r2, #0
 8019574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8019576:	4b0b      	ldr	r3, [pc, #44]	; (80195a4 <vPortSetupTimerInterrupt+0x38>)
 8019578:	2200      	movs	r2, #0
 801957a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801957c:	4b0a      	ldr	r3, [pc, #40]	; (80195a8 <vPortSetupTimerInterrupt+0x3c>)
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	4a0a      	ldr	r2, [pc, #40]	; (80195ac <vPortSetupTimerInterrupt+0x40>)
 8019582:	fba2 2303 	umull	r2, r3, r2, r3
 8019586:	099b      	lsrs	r3, r3, #6
 8019588:	4a09      	ldr	r2, [pc, #36]	; (80195b0 <vPortSetupTimerInterrupt+0x44>)
 801958a:	3b01      	subs	r3, #1
 801958c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801958e:	4b04      	ldr	r3, [pc, #16]	; (80195a0 <vPortSetupTimerInterrupt+0x34>)
 8019590:	2207      	movs	r2, #7
 8019592:	601a      	str	r2, [r3, #0]
}
 8019594:	bf00      	nop
 8019596:	46bd      	mov	sp, r7
 8019598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801959c:	4770      	bx	lr
 801959e:	bf00      	nop
 80195a0:	e000e010 	.word	0xe000e010
 80195a4:	e000e018 	.word	0xe000e018
 80195a8:	20000000 	.word	0x20000000
 80195ac:	10624dd3 	.word	0x10624dd3
 80195b0:	e000e014 	.word	0xe000e014

080195b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80195b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80195c4 <vPortEnableVFP+0x10>
 80195b8:	6801      	ldr	r1, [r0, #0]
 80195ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80195be:	6001      	str	r1, [r0, #0]
 80195c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80195c2:	bf00      	nop
 80195c4:	e000ed88 	.word	0xe000ed88

080195c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80195c8:	b480      	push	{r7}
 80195ca:	b085      	sub	sp, #20
 80195cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80195ce:	f3ef 8305 	mrs	r3, IPSR
 80195d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80195d4:	68fb      	ldr	r3, [r7, #12]
 80195d6:	2b0f      	cmp	r3, #15
 80195d8:	d915      	bls.n	8019606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80195da:	4a18      	ldr	r2, [pc, #96]	; (801963c <vPortValidateInterruptPriority+0x74>)
 80195dc:	68fb      	ldr	r3, [r7, #12]
 80195de:	4413      	add	r3, r2
 80195e0:	781b      	ldrb	r3, [r3, #0]
 80195e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80195e4:	4b16      	ldr	r3, [pc, #88]	; (8019640 <vPortValidateInterruptPriority+0x78>)
 80195e6:	781b      	ldrb	r3, [r3, #0]
 80195e8:	7afa      	ldrb	r2, [r7, #11]
 80195ea:	429a      	cmp	r2, r3
 80195ec:	d20b      	bcs.n	8019606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80195ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80195f2:	b672      	cpsid	i
 80195f4:	f383 8811 	msr	BASEPRI, r3
 80195f8:	f3bf 8f6f 	isb	sy
 80195fc:	f3bf 8f4f 	dsb	sy
 8019600:	b662      	cpsie	i
 8019602:	607b      	str	r3, [r7, #4]
 8019604:	e7fe      	b.n	8019604 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8019606:	4b0f      	ldr	r3, [pc, #60]	; (8019644 <vPortValidateInterruptPriority+0x7c>)
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801960e:	4b0e      	ldr	r3, [pc, #56]	; (8019648 <vPortValidateInterruptPriority+0x80>)
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	429a      	cmp	r2, r3
 8019614:	d90b      	bls.n	801962e <vPortValidateInterruptPriority+0x66>
 8019616:	f04f 0350 	mov.w	r3, #80	; 0x50
 801961a:	b672      	cpsid	i
 801961c:	f383 8811 	msr	BASEPRI, r3
 8019620:	f3bf 8f6f 	isb	sy
 8019624:	f3bf 8f4f 	dsb	sy
 8019628:	b662      	cpsie	i
 801962a:	603b      	str	r3, [r7, #0]
 801962c:	e7fe      	b.n	801962c <vPortValidateInterruptPriority+0x64>
	}
 801962e:	bf00      	nop
 8019630:	3714      	adds	r7, #20
 8019632:	46bd      	mov	sp, r7
 8019634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019638:	4770      	bx	lr
 801963a:	bf00      	nop
 801963c:	e000e3f0 	.word	0xe000e3f0
 8019640:	2000105c 	.word	0x2000105c
 8019644:	e000ed0c 	.word	0xe000ed0c
 8019648:	20001060 	.word	0x20001060

0801964c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801964c:	b580      	push	{r7, lr}
 801964e:	b08a      	sub	sp, #40	; 0x28
 8019650:	af00      	add	r7, sp, #0
 8019652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8019654:	2300      	movs	r3, #0
 8019656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8019658:	f7fe fc92 	bl	8017f80 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801965c:	4b5a      	ldr	r3, [pc, #360]	; (80197c8 <pvPortMalloc+0x17c>)
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d101      	bne.n	8019668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8019664:	f000 f916 	bl	8019894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8019668:	4b58      	ldr	r3, [pc, #352]	; (80197cc <pvPortMalloc+0x180>)
 801966a:	681a      	ldr	r2, [r3, #0]
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	4013      	ands	r3, r2
 8019670:	2b00      	cmp	r3, #0
 8019672:	f040 8090 	bne.w	8019796 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	2b00      	cmp	r3, #0
 801967a:	d01e      	beq.n	80196ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801967c:	2208      	movs	r2, #8
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	4413      	add	r3, r2
 8019682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	f003 0307 	and.w	r3, r3, #7
 801968a:	2b00      	cmp	r3, #0
 801968c:	d015      	beq.n	80196ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	f023 0307 	bic.w	r3, r3, #7
 8019694:	3308      	adds	r3, #8
 8019696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019698:	687b      	ldr	r3, [r7, #4]
 801969a:	f003 0307 	and.w	r3, r3, #7
 801969e:	2b00      	cmp	r3, #0
 80196a0:	d00b      	beq.n	80196ba <pvPortMalloc+0x6e>
 80196a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80196a6:	b672      	cpsid	i
 80196a8:	f383 8811 	msr	BASEPRI, r3
 80196ac:	f3bf 8f6f 	isb	sy
 80196b0:	f3bf 8f4f 	dsb	sy
 80196b4:	b662      	cpsie	i
 80196b6:	617b      	str	r3, [r7, #20]
 80196b8:	e7fe      	b.n	80196b8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	2b00      	cmp	r3, #0
 80196be:	d06a      	beq.n	8019796 <pvPortMalloc+0x14a>
 80196c0:	4b43      	ldr	r3, [pc, #268]	; (80197d0 <pvPortMalloc+0x184>)
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	687a      	ldr	r2, [r7, #4]
 80196c6:	429a      	cmp	r2, r3
 80196c8:	d865      	bhi.n	8019796 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80196ca:	4b42      	ldr	r3, [pc, #264]	; (80197d4 <pvPortMalloc+0x188>)
 80196cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80196ce:	4b41      	ldr	r3, [pc, #260]	; (80197d4 <pvPortMalloc+0x188>)
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80196d4:	e004      	b.n	80196e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80196d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80196da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196dc:	681b      	ldr	r3, [r3, #0]
 80196de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80196e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196e2:	685b      	ldr	r3, [r3, #4]
 80196e4:	687a      	ldr	r2, [r7, #4]
 80196e6:	429a      	cmp	r2, r3
 80196e8:	d903      	bls.n	80196f2 <pvPortMalloc+0xa6>
 80196ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	2b00      	cmp	r3, #0
 80196f0:	d1f1      	bne.n	80196d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80196f2:	4b35      	ldr	r3, [pc, #212]	; (80197c8 <pvPortMalloc+0x17c>)
 80196f4:	681b      	ldr	r3, [r3, #0]
 80196f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80196f8:	429a      	cmp	r2, r3
 80196fa:	d04c      	beq.n	8019796 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80196fc:	6a3b      	ldr	r3, [r7, #32]
 80196fe:	681b      	ldr	r3, [r3, #0]
 8019700:	2208      	movs	r2, #8
 8019702:	4413      	add	r3, r2
 8019704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8019706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019708:	681a      	ldr	r2, [r3, #0]
 801970a:	6a3b      	ldr	r3, [r7, #32]
 801970c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801970e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019710:	685a      	ldr	r2, [r3, #4]
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	1ad2      	subs	r2, r2, r3
 8019716:	2308      	movs	r3, #8
 8019718:	005b      	lsls	r3, r3, #1
 801971a:	429a      	cmp	r2, r3
 801971c:	d920      	bls.n	8019760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801971e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019720:	687b      	ldr	r3, [r7, #4]
 8019722:	4413      	add	r3, r2
 8019724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8019726:	69bb      	ldr	r3, [r7, #24]
 8019728:	f003 0307 	and.w	r3, r3, #7
 801972c:	2b00      	cmp	r3, #0
 801972e:	d00b      	beq.n	8019748 <pvPortMalloc+0xfc>
 8019730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019734:	b672      	cpsid	i
 8019736:	f383 8811 	msr	BASEPRI, r3
 801973a:	f3bf 8f6f 	isb	sy
 801973e:	f3bf 8f4f 	dsb	sy
 8019742:	b662      	cpsie	i
 8019744:	613b      	str	r3, [r7, #16]
 8019746:	e7fe      	b.n	8019746 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8019748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801974a:	685a      	ldr	r2, [r3, #4]
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	1ad2      	subs	r2, r2, r3
 8019750:	69bb      	ldr	r3, [r7, #24]
 8019752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8019754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019756:	687a      	ldr	r2, [r7, #4]
 8019758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801975a:	69b8      	ldr	r0, [r7, #24]
 801975c:	f000 f8fc 	bl	8019958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8019760:	4b1b      	ldr	r3, [pc, #108]	; (80197d0 <pvPortMalloc+0x184>)
 8019762:	681a      	ldr	r2, [r3, #0]
 8019764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019766:	685b      	ldr	r3, [r3, #4]
 8019768:	1ad3      	subs	r3, r2, r3
 801976a:	4a19      	ldr	r2, [pc, #100]	; (80197d0 <pvPortMalloc+0x184>)
 801976c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801976e:	4b18      	ldr	r3, [pc, #96]	; (80197d0 <pvPortMalloc+0x184>)
 8019770:	681a      	ldr	r2, [r3, #0]
 8019772:	4b19      	ldr	r3, [pc, #100]	; (80197d8 <pvPortMalloc+0x18c>)
 8019774:	681b      	ldr	r3, [r3, #0]
 8019776:	429a      	cmp	r2, r3
 8019778:	d203      	bcs.n	8019782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801977a:	4b15      	ldr	r3, [pc, #84]	; (80197d0 <pvPortMalloc+0x184>)
 801977c:	681b      	ldr	r3, [r3, #0]
 801977e:	4a16      	ldr	r2, [pc, #88]	; (80197d8 <pvPortMalloc+0x18c>)
 8019780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8019782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019784:	685a      	ldr	r2, [r3, #4]
 8019786:	4b11      	ldr	r3, [pc, #68]	; (80197cc <pvPortMalloc+0x180>)
 8019788:	681b      	ldr	r3, [r3, #0]
 801978a:	431a      	orrs	r2, r3
 801978c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801978e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8019790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019792:	2200      	movs	r2, #0
 8019794:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8019796:	f7fe fc01 	bl	8017f9c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	f003 0307 	and.w	r3, r3, #7
 80197a0:	2b00      	cmp	r3, #0
 80197a2:	d00b      	beq.n	80197bc <pvPortMalloc+0x170>
 80197a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80197a8:	b672      	cpsid	i
 80197aa:	f383 8811 	msr	BASEPRI, r3
 80197ae:	f3bf 8f6f 	isb	sy
 80197b2:	f3bf 8f4f 	dsb	sy
 80197b6:	b662      	cpsie	i
 80197b8:	60fb      	str	r3, [r7, #12]
 80197ba:	e7fe      	b.n	80197ba <pvPortMalloc+0x16e>
	return pvReturn;
 80197bc:	69fb      	ldr	r3, [r7, #28]
}
 80197be:	4618      	mov	r0, r3
 80197c0:	3728      	adds	r7, #40	; 0x28
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	2000886c 	.word	0x2000886c
 80197cc:	20008878 	.word	0x20008878
 80197d0:	20008870 	.word	0x20008870
 80197d4:	20008864 	.word	0x20008864
 80197d8:	20008874 	.word	0x20008874

080197dc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b086      	sub	sp, #24
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	2b00      	cmp	r3, #0
 80197ec:	d04a      	beq.n	8019884 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80197ee:	2308      	movs	r3, #8
 80197f0:	425b      	negs	r3, r3
 80197f2:	697a      	ldr	r2, [r7, #20]
 80197f4:	4413      	add	r3, r2
 80197f6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80197f8:	697b      	ldr	r3, [r7, #20]
 80197fa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80197fc:	693b      	ldr	r3, [r7, #16]
 80197fe:	685a      	ldr	r2, [r3, #4]
 8019800:	4b22      	ldr	r3, [pc, #136]	; (801988c <vPortFree+0xb0>)
 8019802:	681b      	ldr	r3, [r3, #0]
 8019804:	4013      	ands	r3, r2
 8019806:	2b00      	cmp	r3, #0
 8019808:	d10b      	bne.n	8019822 <vPortFree+0x46>
 801980a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801980e:	b672      	cpsid	i
 8019810:	f383 8811 	msr	BASEPRI, r3
 8019814:	f3bf 8f6f 	isb	sy
 8019818:	f3bf 8f4f 	dsb	sy
 801981c:	b662      	cpsie	i
 801981e:	60fb      	str	r3, [r7, #12]
 8019820:	e7fe      	b.n	8019820 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8019822:	693b      	ldr	r3, [r7, #16]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	2b00      	cmp	r3, #0
 8019828:	d00b      	beq.n	8019842 <vPortFree+0x66>
 801982a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801982e:	b672      	cpsid	i
 8019830:	f383 8811 	msr	BASEPRI, r3
 8019834:	f3bf 8f6f 	isb	sy
 8019838:	f3bf 8f4f 	dsb	sy
 801983c:	b662      	cpsie	i
 801983e:	60bb      	str	r3, [r7, #8]
 8019840:	e7fe      	b.n	8019840 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8019842:	693b      	ldr	r3, [r7, #16]
 8019844:	685a      	ldr	r2, [r3, #4]
 8019846:	4b11      	ldr	r3, [pc, #68]	; (801988c <vPortFree+0xb0>)
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	4013      	ands	r3, r2
 801984c:	2b00      	cmp	r3, #0
 801984e:	d019      	beq.n	8019884 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8019850:	693b      	ldr	r3, [r7, #16]
 8019852:	681b      	ldr	r3, [r3, #0]
 8019854:	2b00      	cmp	r3, #0
 8019856:	d115      	bne.n	8019884 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8019858:	693b      	ldr	r3, [r7, #16]
 801985a:	685a      	ldr	r2, [r3, #4]
 801985c:	4b0b      	ldr	r3, [pc, #44]	; (801988c <vPortFree+0xb0>)
 801985e:	681b      	ldr	r3, [r3, #0]
 8019860:	43db      	mvns	r3, r3
 8019862:	401a      	ands	r2, r3
 8019864:	693b      	ldr	r3, [r7, #16]
 8019866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8019868:	f7fe fb8a 	bl	8017f80 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801986c:	693b      	ldr	r3, [r7, #16]
 801986e:	685a      	ldr	r2, [r3, #4]
 8019870:	4b07      	ldr	r3, [pc, #28]	; (8019890 <vPortFree+0xb4>)
 8019872:	681b      	ldr	r3, [r3, #0]
 8019874:	4413      	add	r3, r2
 8019876:	4a06      	ldr	r2, [pc, #24]	; (8019890 <vPortFree+0xb4>)
 8019878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801987a:	6938      	ldr	r0, [r7, #16]
 801987c:	f000 f86c 	bl	8019958 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8019880:	f7fe fb8c 	bl	8017f9c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8019884:	bf00      	nop
 8019886:	3718      	adds	r7, #24
 8019888:	46bd      	mov	sp, r7
 801988a:	bd80      	pop	{r7, pc}
 801988c:	20008878 	.word	0x20008878
 8019890:	20008870 	.word	0x20008870

08019894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8019894:	b480      	push	{r7}
 8019896:	b085      	sub	sp, #20
 8019898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801989a:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 801989e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80198a0:	4b27      	ldr	r3, [pc, #156]	; (8019940 <prvHeapInit+0xac>)
 80198a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80198a4:	68fb      	ldr	r3, [r7, #12]
 80198a6:	f003 0307 	and.w	r3, r3, #7
 80198aa:	2b00      	cmp	r3, #0
 80198ac:	d00c      	beq.n	80198c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80198ae:	68fb      	ldr	r3, [r7, #12]
 80198b0:	3307      	adds	r3, #7
 80198b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198b4:	68fb      	ldr	r3, [r7, #12]
 80198b6:	f023 0307 	bic.w	r3, r3, #7
 80198ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80198bc:	68ba      	ldr	r2, [r7, #8]
 80198be:	68fb      	ldr	r3, [r7, #12]
 80198c0:	1ad3      	subs	r3, r2, r3
 80198c2:	4a1f      	ldr	r2, [pc, #124]	; (8019940 <prvHeapInit+0xac>)
 80198c4:	4413      	add	r3, r2
 80198c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80198c8:	68fb      	ldr	r3, [r7, #12]
 80198ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80198cc:	4a1d      	ldr	r2, [pc, #116]	; (8019944 <prvHeapInit+0xb0>)
 80198ce:	687b      	ldr	r3, [r7, #4]
 80198d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80198d2:	4b1c      	ldr	r3, [pc, #112]	; (8019944 <prvHeapInit+0xb0>)
 80198d4:	2200      	movs	r2, #0
 80198d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	68ba      	ldr	r2, [r7, #8]
 80198dc:	4413      	add	r3, r2
 80198de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80198e0:	2208      	movs	r2, #8
 80198e2:	68fb      	ldr	r3, [r7, #12]
 80198e4:	1a9b      	subs	r3, r3, r2
 80198e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80198e8:	68fb      	ldr	r3, [r7, #12]
 80198ea:	f023 0307 	bic.w	r3, r3, #7
 80198ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80198f0:	68fb      	ldr	r3, [r7, #12]
 80198f2:	4a15      	ldr	r2, [pc, #84]	; (8019948 <prvHeapInit+0xb4>)
 80198f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80198f6:	4b14      	ldr	r3, [pc, #80]	; (8019948 <prvHeapInit+0xb4>)
 80198f8:	681b      	ldr	r3, [r3, #0]
 80198fa:	2200      	movs	r2, #0
 80198fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80198fe:	4b12      	ldr	r3, [pc, #72]	; (8019948 <prvHeapInit+0xb4>)
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	2200      	movs	r2, #0
 8019904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801990a:	683b      	ldr	r3, [r7, #0]
 801990c:	68fa      	ldr	r2, [r7, #12]
 801990e:	1ad2      	subs	r2, r2, r3
 8019910:	683b      	ldr	r3, [r7, #0]
 8019912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8019914:	4b0c      	ldr	r3, [pc, #48]	; (8019948 <prvHeapInit+0xb4>)
 8019916:	681a      	ldr	r2, [r3, #0]
 8019918:	683b      	ldr	r3, [r7, #0]
 801991a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801991c:	683b      	ldr	r3, [r7, #0]
 801991e:	685b      	ldr	r3, [r3, #4]
 8019920:	4a0a      	ldr	r2, [pc, #40]	; (801994c <prvHeapInit+0xb8>)
 8019922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8019924:	683b      	ldr	r3, [r7, #0]
 8019926:	685b      	ldr	r3, [r3, #4]
 8019928:	4a09      	ldr	r2, [pc, #36]	; (8019950 <prvHeapInit+0xbc>)
 801992a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801992c:	4b09      	ldr	r3, [pc, #36]	; (8019954 <prvHeapInit+0xc0>)
 801992e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8019932:	601a      	str	r2, [r3, #0]
}
 8019934:	bf00      	nop
 8019936:	3714      	adds	r7, #20
 8019938:	46bd      	mov	sp, r7
 801993a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801993e:	4770      	bx	lr
 8019940:	20001064 	.word	0x20001064
 8019944:	20008864 	.word	0x20008864
 8019948:	2000886c 	.word	0x2000886c
 801994c:	20008874 	.word	0x20008874
 8019950:	20008870 	.word	0x20008870
 8019954:	20008878 	.word	0x20008878

08019958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8019958:	b480      	push	{r7}
 801995a:	b085      	sub	sp, #20
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8019960:	4b28      	ldr	r3, [pc, #160]	; (8019a04 <prvInsertBlockIntoFreeList+0xac>)
 8019962:	60fb      	str	r3, [r7, #12]
 8019964:	e002      	b.n	801996c <prvInsertBlockIntoFreeList+0x14>
 8019966:	68fb      	ldr	r3, [r7, #12]
 8019968:	681b      	ldr	r3, [r3, #0]
 801996a:	60fb      	str	r3, [r7, #12]
 801996c:	68fb      	ldr	r3, [r7, #12]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	687a      	ldr	r2, [r7, #4]
 8019972:	429a      	cmp	r2, r3
 8019974:	d8f7      	bhi.n	8019966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801997a:	68fb      	ldr	r3, [r7, #12]
 801997c:	685b      	ldr	r3, [r3, #4]
 801997e:	68ba      	ldr	r2, [r7, #8]
 8019980:	4413      	add	r3, r2
 8019982:	687a      	ldr	r2, [r7, #4]
 8019984:	429a      	cmp	r2, r3
 8019986:	d108      	bne.n	801999a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8019988:	68fb      	ldr	r3, [r7, #12]
 801998a:	685a      	ldr	r2, [r3, #4]
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	685b      	ldr	r3, [r3, #4]
 8019990:	441a      	add	r2, r3
 8019992:	68fb      	ldr	r3, [r7, #12]
 8019994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	685b      	ldr	r3, [r3, #4]
 80199a2:	68ba      	ldr	r2, [r7, #8]
 80199a4:	441a      	add	r2, r3
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	681b      	ldr	r3, [r3, #0]
 80199aa:	429a      	cmp	r2, r3
 80199ac:	d118      	bne.n	80199e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	681a      	ldr	r2, [r3, #0]
 80199b2:	4b15      	ldr	r3, [pc, #84]	; (8019a08 <prvInsertBlockIntoFreeList+0xb0>)
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	429a      	cmp	r2, r3
 80199b8:	d00d      	beq.n	80199d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80199ba:	687b      	ldr	r3, [r7, #4]
 80199bc:	685a      	ldr	r2, [r3, #4]
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	681b      	ldr	r3, [r3, #0]
 80199c2:	685b      	ldr	r3, [r3, #4]
 80199c4:	441a      	add	r2, r3
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	681b      	ldr	r3, [r3, #0]
 80199ce:	681a      	ldr	r2, [r3, #0]
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	601a      	str	r2, [r3, #0]
 80199d4:	e008      	b.n	80199e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80199d6:	4b0c      	ldr	r3, [pc, #48]	; (8019a08 <prvInsertBlockIntoFreeList+0xb0>)
 80199d8:	681a      	ldr	r2, [r3, #0]
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	601a      	str	r2, [r3, #0]
 80199de:	e003      	b.n	80199e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80199e0:	68fb      	ldr	r3, [r7, #12]
 80199e2:	681a      	ldr	r2, [r3, #0]
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80199e8:	68fa      	ldr	r2, [r7, #12]
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	429a      	cmp	r2, r3
 80199ee:	d002      	beq.n	80199f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80199f0:	68fb      	ldr	r3, [r7, #12]
 80199f2:	687a      	ldr	r2, [r7, #4]
 80199f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80199f6:	bf00      	nop
 80199f8:	3714      	adds	r7, #20
 80199fa:	46bd      	mov	sp, r7
 80199fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a00:	4770      	bx	lr
 8019a02:	bf00      	nop
 8019a04:	20008864 	.word	0x20008864
 8019a08:	2000886c 	.word	0x2000886c

08019a0c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019a0c:	b580      	push	{r7, lr}
 8019a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019a10:	2200      	movs	r2, #0
 8019a12:	4912      	ldr	r1, [pc, #72]	; (8019a5c <MX_USB_DEVICE_Init+0x50>)
 8019a14:	4812      	ldr	r0, [pc, #72]	; (8019a60 <MX_USB_DEVICE_Init+0x54>)
 8019a16:	f7f7 ff77 	bl	8011908 <USBD_Init>
 8019a1a:	4603      	mov	r3, r0
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d001      	beq.n	8019a24 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019a20:	f7eb fa8c 	bl	8004f3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8019a24:	490f      	ldr	r1, [pc, #60]	; (8019a64 <MX_USB_DEVICE_Init+0x58>)
 8019a26:	480e      	ldr	r0, [pc, #56]	; (8019a60 <MX_USB_DEVICE_Init+0x54>)
 8019a28:	f7f7 ffa4 	bl	8011974 <USBD_RegisterClass>
 8019a2c:	4603      	mov	r3, r0
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d001      	beq.n	8019a36 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019a32:	f7eb fa83 	bl	8004f3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019a36:	490c      	ldr	r1, [pc, #48]	; (8019a68 <MX_USB_DEVICE_Init+0x5c>)
 8019a38:	4809      	ldr	r0, [pc, #36]	; (8019a60 <MX_USB_DEVICE_Init+0x54>)
 8019a3a:	f7f7 fec9 	bl	80117d0 <USBD_CDC_RegisterInterface>
 8019a3e:	4603      	mov	r3, r0
 8019a40:	2b00      	cmp	r3, #0
 8019a42:	d001      	beq.n	8019a48 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019a44:	f7eb fa7a 	bl	8004f3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019a48:	4805      	ldr	r0, [pc, #20]	; (8019a60 <MX_USB_DEVICE_Init+0x54>)
 8019a4a:	f7f7 ffb4 	bl	80119b6 <USBD_Start>
 8019a4e:	4603      	mov	r3, r0
 8019a50:	2b00      	cmp	r3, #0
 8019a52:	d001      	beq.n	8019a58 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019a54:	f7eb fa72 	bl	8004f3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019a58:	bf00      	nop
 8019a5a:	bd80      	pop	{r7, pc}
 8019a5c:	20000134 	.word	0x20000134
 8019a60:	2001cb94 	.word	0x2001cb94
 8019a64:	20000018 	.word	0x20000018
 8019a68:	20000120 	.word	0x20000120

08019a6c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8019a6c:	b580      	push	{r7, lr}
 8019a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019a70:	2200      	movs	r2, #0
 8019a72:	4905      	ldr	r1, [pc, #20]	; (8019a88 <CDC_Init_FS+0x1c>)
 8019a74:	4805      	ldr	r0, [pc, #20]	; (8019a8c <CDC_Init_FS+0x20>)
 8019a76:	f7f7 fec0 	bl	80117fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8019a7a:	4905      	ldr	r1, [pc, #20]	; (8019a90 <CDC_Init_FS+0x24>)
 8019a7c:	4803      	ldr	r0, [pc, #12]	; (8019a8c <CDC_Init_FS+0x20>)
 8019a7e:	f7f7 fed5 	bl	801182c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019a82:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8019a84:	4618      	mov	r0, r3
 8019a86:	bd80      	pop	{r7, pc}
 8019a88:	2001d664 	.word	0x2001d664
 8019a8c:	2001cb94 	.word	0x2001cb94
 8019a90:	2001ce64 	.word	0x2001ce64

08019a94 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8019a94:	b480      	push	{r7}
 8019a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019a98:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019a9a:	4618      	mov	r0, r3
 8019a9c:	46bd      	mov	sp, r7
 8019a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019aa2:	4770      	bx	lr

08019aa4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019aa4:	b480      	push	{r7}
 8019aa6:	b083      	sub	sp, #12
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	4603      	mov	r3, r0
 8019aac:	6039      	str	r1, [r7, #0]
 8019aae:	71fb      	strb	r3, [r7, #7]
 8019ab0:	4613      	mov	r3, r2
 8019ab2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8019ab4:	79fb      	ldrb	r3, [r7, #7]
 8019ab6:	2b23      	cmp	r3, #35	; 0x23
 8019ab8:	d84a      	bhi.n	8019b50 <CDC_Control_FS+0xac>
 8019aba:	a201      	add	r2, pc, #4	; (adr r2, 8019ac0 <CDC_Control_FS+0x1c>)
 8019abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ac0:	08019b51 	.word	0x08019b51
 8019ac4:	08019b51 	.word	0x08019b51
 8019ac8:	08019b51 	.word	0x08019b51
 8019acc:	08019b51 	.word	0x08019b51
 8019ad0:	08019b51 	.word	0x08019b51
 8019ad4:	08019b51 	.word	0x08019b51
 8019ad8:	08019b51 	.word	0x08019b51
 8019adc:	08019b51 	.word	0x08019b51
 8019ae0:	08019b51 	.word	0x08019b51
 8019ae4:	08019b51 	.word	0x08019b51
 8019ae8:	08019b51 	.word	0x08019b51
 8019aec:	08019b51 	.word	0x08019b51
 8019af0:	08019b51 	.word	0x08019b51
 8019af4:	08019b51 	.word	0x08019b51
 8019af8:	08019b51 	.word	0x08019b51
 8019afc:	08019b51 	.word	0x08019b51
 8019b00:	08019b51 	.word	0x08019b51
 8019b04:	08019b51 	.word	0x08019b51
 8019b08:	08019b51 	.word	0x08019b51
 8019b0c:	08019b51 	.word	0x08019b51
 8019b10:	08019b51 	.word	0x08019b51
 8019b14:	08019b51 	.word	0x08019b51
 8019b18:	08019b51 	.word	0x08019b51
 8019b1c:	08019b51 	.word	0x08019b51
 8019b20:	08019b51 	.word	0x08019b51
 8019b24:	08019b51 	.word	0x08019b51
 8019b28:	08019b51 	.word	0x08019b51
 8019b2c:	08019b51 	.word	0x08019b51
 8019b30:	08019b51 	.word	0x08019b51
 8019b34:	08019b51 	.word	0x08019b51
 8019b38:	08019b51 	.word	0x08019b51
 8019b3c:	08019b51 	.word	0x08019b51
 8019b40:	08019b51 	.word	0x08019b51
 8019b44:	08019b51 	.word	0x08019b51
 8019b48:	08019b51 	.word	0x08019b51
 8019b4c:	08019b51 	.word	0x08019b51
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8019b50:	bf00      	nop
  }

  return (USBD_OK);
 8019b52:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019b54:	4618      	mov	r0, r3
 8019b56:	370c      	adds	r7, #12
 8019b58:	46bd      	mov	sp, r7
 8019b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b5e:	4770      	bx	lr

08019b60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8019b60:	b580      	push	{r7, lr}
 8019b62:	b082      	sub	sp, #8
 8019b64:	af00      	add	r7, sp, #0
 8019b66:	6078      	str	r0, [r7, #4]
 8019b68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8019b6a:	6879      	ldr	r1, [r7, #4]
 8019b6c:	4805      	ldr	r0, [pc, #20]	; (8019b84 <CDC_Receive_FS+0x24>)
 8019b6e:	f7f7 fe5d 	bl	801182c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8019b72:	4804      	ldr	r0, [pc, #16]	; (8019b84 <CDC_Receive_FS+0x24>)
 8019b74:	f7f7 fe9e 	bl	80118b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8019b78:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	3708      	adds	r7, #8
 8019b7e:	46bd      	mov	sp, r7
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	bf00      	nop
 8019b84:	2001cb94 	.word	0x2001cb94

08019b88 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b084      	sub	sp, #16
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
 8019b90:	460b      	mov	r3, r1
 8019b92:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8019b94:	2300      	movs	r3, #0
 8019b96:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8019b98:	4b0d      	ldr	r3, [pc, #52]	; (8019bd0 <CDC_Transmit_FS+0x48>)
 8019b9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8019b9e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019ba0:	68bb      	ldr	r3, [r7, #8]
 8019ba2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8019ba6:	2b00      	cmp	r3, #0
 8019ba8:	d001      	beq.n	8019bae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8019baa:	2301      	movs	r3, #1
 8019bac:	e00b      	b.n	8019bc6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019bae:	887b      	ldrh	r3, [r7, #2]
 8019bb0:	461a      	mov	r2, r3
 8019bb2:	6879      	ldr	r1, [r7, #4]
 8019bb4:	4806      	ldr	r0, [pc, #24]	; (8019bd0 <CDC_Transmit_FS+0x48>)
 8019bb6:	f7f7 fe20 	bl	80117fa <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019bba:	4805      	ldr	r0, [pc, #20]	; (8019bd0 <CDC_Transmit_FS+0x48>)
 8019bbc:	f7f7 fe4a 	bl	8011854 <USBD_CDC_TransmitPacket>
 8019bc0:	4603      	mov	r3, r0
 8019bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8019bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bc6:	4618      	mov	r0, r3
 8019bc8:	3710      	adds	r7, #16
 8019bca:	46bd      	mov	sp, r7
 8019bcc:	bd80      	pop	{r7, pc}
 8019bce:	bf00      	nop
 8019bd0:	2001cb94 	.word	0x2001cb94

08019bd4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8019bd4:	b480      	push	{r7}
 8019bd6:	b087      	sub	sp, #28
 8019bd8:	af00      	add	r7, sp, #0
 8019bda:	60f8      	str	r0, [r7, #12]
 8019bdc:	60b9      	str	r1, [r7, #8]
 8019bde:	4613      	mov	r3, r2
 8019be0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8019be2:	2300      	movs	r3, #0
 8019be4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8019be6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019bea:	4618      	mov	r0, r3
 8019bec:	371c      	adds	r7, #28
 8019bee:	46bd      	mov	sp, r7
 8019bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019bf4:	4770      	bx	lr
	...

08019bf8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019bf8:	b480      	push	{r7}
 8019bfa:	b083      	sub	sp, #12
 8019bfc:	af00      	add	r7, sp, #0
 8019bfe:	4603      	mov	r3, r0
 8019c00:	6039      	str	r1, [r7, #0]
 8019c02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019c04:	683b      	ldr	r3, [r7, #0]
 8019c06:	2212      	movs	r2, #18
 8019c08:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019c0a:	4b03      	ldr	r3, [pc, #12]	; (8019c18 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019c0c:	4618      	mov	r0, r3
 8019c0e:	370c      	adds	r7, #12
 8019c10:	46bd      	mov	sp, r7
 8019c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c16:	4770      	bx	lr
 8019c18:	20000154 	.word	0x20000154

08019c1c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019c1c:	b480      	push	{r7}
 8019c1e:	b083      	sub	sp, #12
 8019c20:	af00      	add	r7, sp, #0
 8019c22:	4603      	mov	r3, r0
 8019c24:	6039      	str	r1, [r7, #0]
 8019c26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8019c28:	683b      	ldr	r3, [r7, #0]
 8019c2a:	2204      	movs	r2, #4
 8019c2c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019c2e:	4b03      	ldr	r3, [pc, #12]	; (8019c3c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019c30:	4618      	mov	r0, r3
 8019c32:	370c      	adds	r7, #12
 8019c34:	46bd      	mov	sp, r7
 8019c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c3a:	4770      	bx	lr
 8019c3c:	20000174 	.word	0x20000174

08019c40 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019c40:	b580      	push	{r7, lr}
 8019c42:	b082      	sub	sp, #8
 8019c44:	af00      	add	r7, sp, #0
 8019c46:	4603      	mov	r3, r0
 8019c48:	6039      	str	r1, [r7, #0]
 8019c4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019c4c:	79fb      	ldrb	r3, [r7, #7]
 8019c4e:	2b00      	cmp	r3, #0
 8019c50:	d105      	bne.n	8019c5e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019c52:	683a      	ldr	r2, [r7, #0]
 8019c54:	4907      	ldr	r1, [pc, #28]	; (8019c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8019c56:	4808      	ldr	r0, [pc, #32]	; (8019c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8019c58:	f7f8 fea5 	bl	80129a6 <USBD_GetString>
 8019c5c:	e004      	b.n	8019c68 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019c5e:	683a      	ldr	r2, [r7, #0]
 8019c60:	4904      	ldr	r1, [pc, #16]	; (8019c74 <USBD_FS_ProductStrDescriptor+0x34>)
 8019c62:	4805      	ldr	r0, [pc, #20]	; (8019c78 <USBD_FS_ProductStrDescriptor+0x38>)
 8019c64:	f7f8 fe9f 	bl	80129a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019c68:	4b02      	ldr	r3, [pc, #8]	; (8019c74 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8019c6a:	4618      	mov	r0, r3
 8019c6c:	3708      	adds	r7, #8
 8019c6e:	46bd      	mov	sp, r7
 8019c70:	bd80      	pop	{r7, pc}
 8019c72:	bf00      	nop
 8019c74:	2001de64 	.word	0x2001de64
 8019c78:	0801d564 	.word	0x0801d564

08019c7c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b082      	sub	sp, #8
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	4603      	mov	r3, r0
 8019c84:	6039      	str	r1, [r7, #0]
 8019c86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019c88:	683a      	ldr	r2, [r7, #0]
 8019c8a:	4904      	ldr	r1, [pc, #16]	; (8019c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019c8c:	4804      	ldr	r0, [pc, #16]	; (8019ca0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8019c8e:	f7f8 fe8a 	bl	80129a6 <USBD_GetString>
  return USBD_StrDesc;
 8019c92:	4b02      	ldr	r3, [pc, #8]	; (8019c9c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019c94:	4618      	mov	r0, r3
 8019c96:	3708      	adds	r7, #8
 8019c98:	46bd      	mov	sp, r7
 8019c9a:	bd80      	pop	{r7, pc}
 8019c9c:	2001de64 	.word	0x2001de64
 8019ca0:	0801d57c 	.word	0x0801d57c

08019ca4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b082      	sub	sp, #8
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	4603      	mov	r3, r0
 8019cac:	6039      	str	r1, [r7, #0]
 8019cae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8019cb0:	683b      	ldr	r3, [r7, #0]
 8019cb2:	221a      	movs	r2, #26
 8019cb4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019cb6:	f000 f855 	bl	8019d64 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019cba:	4b02      	ldr	r3, [pc, #8]	; (8019cc4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019cbc:	4618      	mov	r0, r3
 8019cbe:	3708      	adds	r7, #8
 8019cc0:	46bd      	mov	sp, r7
 8019cc2:	bd80      	pop	{r7, pc}
 8019cc4:	20000178 	.word	0x20000178

08019cc8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019cc8:	b580      	push	{r7, lr}
 8019cca:	b082      	sub	sp, #8
 8019ccc:	af00      	add	r7, sp, #0
 8019cce:	4603      	mov	r3, r0
 8019cd0:	6039      	str	r1, [r7, #0]
 8019cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019cd4:	79fb      	ldrb	r3, [r7, #7]
 8019cd6:	2b00      	cmp	r3, #0
 8019cd8:	d105      	bne.n	8019ce6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019cda:	683a      	ldr	r2, [r7, #0]
 8019cdc:	4907      	ldr	r1, [pc, #28]	; (8019cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8019cde:	4808      	ldr	r0, [pc, #32]	; (8019d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019ce0:	f7f8 fe61 	bl	80129a6 <USBD_GetString>
 8019ce4:	e004      	b.n	8019cf0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019ce6:	683a      	ldr	r2, [r7, #0]
 8019ce8:	4904      	ldr	r1, [pc, #16]	; (8019cfc <USBD_FS_ConfigStrDescriptor+0x34>)
 8019cea:	4805      	ldr	r0, [pc, #20]	; (8019d00 <USBD_FS_ConfigStrDescriptor+0x38>)
 8019cec:	f7f8 fe5b 	bl	80129a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019cf0:	4b02      	ldr	r3, [pc, #8]	; (8019cfc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	3708      	adds	r7, #8
 8019cf6:	46bd      	mov	sp, r7
 8019cf8:	bd80      	pop	{r7, pc}
 8019cfa:	bf00      	nop
 8019cfc:	2001de64 	.word	0x2001de64
 8019d00:	0801d590 	.word	0x0801d590

08019d04 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d04:	b580      	push	{r7, lr}
 8019d06:	b082      	sub	sp, #8
 8019d08:	af00      	add	r7, sp, #0
 8019d0a:	4603      	mov	r3, r0
 8019d0c:	6039      	str	r1, [r7, #0]
 8019d0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8019d10:	79fb      	ldrb	r3, [r7, #7]
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d105      	bne.n	8019d22 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019d16:	683a      	ldr	r2, [r7, #0]
 8019d18:	4907      	ldr	r1, [pc, #28]	; (8019d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019d1a:	4808      	ldr	r0, [pc, #32]	; (8019d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019d1c:	f7f8 fe43 	bl	80129a6 <USBD_GetString>
 8019d20:	e004      	b.n	8019d2c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019d22:	683a      	ldr	r2, [r7, #0]
 8019d24:	4904      	ldr	r1, [pc, #16]	; (8019d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8019d26:	4805      	ldr	r0, [pc, #20]	; (8019d3c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8019d28:	f7f8 fe3d 	bl	80129a6 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019d2c:	4b02      	ldr	r3, [pc, #8]	; (8019d38 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8019d2e:	4618      	mov	r0, r3
 8019d30:	3708      	adds	r7, #8
 8019d32:	46bd      	mov	sp, r7
 8019d34:	bd80      	pop	{r7, pc}
 8019d36:	bf00      	nop
 8019d38:	2001de64 	.word	0x2001de64
 8019d3c:	0801d59c 	.word	0x0801d59c

08019d40 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019d40:	b480      	push	{r7}
 8019d42:	b083      	sub	sp, #12
 8019d44:	af00      	add	r7, sp, #0
 8019d46:	4603      	mov	r3, r0
 8019d48:	6039      	str	r1, [r7, #0]
 8019d4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8019d4c:	683b      	ldr	r3, [r7, #0]
 8019d4e:	220c      	movs	r2, #12
 8019d50:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8019d52:	4b03      	ldr	r3, [pc, #12]	; (8019d60 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8019d54:	4618      	mov	r0, r3
 8019d56:	370c      	adds	r7, #12
 8019d58:	46bd      	mov	sp, r7
 8019d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d5e:	4770      	bx	lr
 8019d60:	20000168 	.word	0x20000168

08019d64 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019d64:	b580      	push	{r7, lr}
 8019d66:	b084      	sub	sp, #16
 8019d68:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8019d6a:	4b0f      	ldr	r3, [pc, #60]	; (8019da8 <Get_SerialNum+0x44>)
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019d70:	4b0e      	ldr	r3, [pc, #56]	; (8019dac <Get_SerialNum+0x48>)
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019d76:	4b0e      	ldr	r3, [pc, #56]	; (8019db0 <Get_SerialNum+0x4c>)
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8019d7c:	68fa      	ldr	r2, [r7, #12]
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	4413      	add	r3, r2
 8019d82:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019d84:	68fb      	ldr	r3, [r7, #12]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d009      	beq.n	8019d9e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8019d8a:	2208      	movs	r2, #8
 8019d8c:	4909      	ldr	r1, [pc, #36]	; (8019db4 <Get_SerialNum+0x50>)
 8019d8e:	68f8      	ldr	r0, [r7, #12]
 8019d90:	f000 f814 	bl	8019dbc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8019d94:	2204      	movs	r2, #4
 8019d96:	4908      	ldr	r1, [pc, #32]	; (8019db8 <Get_SerialNum+0x54>)
 8019d98:	68b8      	ldr	r0, [r7, #8]
 8019d9a:	f000 f80f 	bl	8019dbc <IntToUnicode>
  }
}
 8019d9e:	bf00      	nop
 8019da0:	3710      	adds	r7, #16
 8019da2:	46bd      	mov	sp, r7
 8019da4:	bd80      	pop	{r7, pc}
 8019da6:	bf00      	nop
 8019da8:	1ff0f420 	.word	0x1ff0f420
 8019dac:	1ff0f424 	.word	0x1ff0f424
 8019db0:	1ff0f428 	.word	0x1ff0f428
 8019db4:	2000017a 	.word	0x2000017a
 8019db8:	2000018a 	.word	0x2000018a

08019dbc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019dbc:	b480      	push	{r7}
 8019dbe:	b087      	sub	sp, #28
 8019dc0:	af00      	add	r7, sp, #0
 8019dc2:	60f8      	str	r0, [r7, #12]
 8019dc4:	60b9      	str	r1, [r7, #8]
 8019dc6:	4613      	mov	r3, r2
 8019dc8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019dca:	2300      	movs	r3, #0
 8019dcc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019dce:	2300      	movs	r3, #0
 8019dd0:	75fb      	strb	r3, [r7, #23]
 8019dd2:	e027      	b.n	8019e24 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	0f1b      	lsrs	r3, r3, #28
 8019dd8:	2b09      	cmp	r3, #9
 8019dda:	d80b      	bhi.n	8019df4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	0f1b      	lsrs	r3, r3, #28
 8019de0:	b2da      	uxtb	r2, r3
 8019de2:	7dfb      	ldrb	r3, [r7, #23]
 8019de4:	005b      	lsls	r3, r3, #1
 8019de6:	4619      	mov	r1, r3
 8019de8:	68bb      	ldr	r3, [r7, #8]
 8019dea:	440b      	add	r3, r1
 8019dec:	3230      	adds	r2, #48	; 0x30
 8019dee:	b2d2      	uxtb	r2, r2
 8019df0:	701a      	strb	r2, [r3, #0]
 8019df2:	e00a      	b.n	8019e0a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	0f1b      	lsrs	r3, r3, #28
 8019df8:	b2da      	uxtb	r2, r3
 8019dfa:	7dfb      	ldrb	r3, [r7, #23]
 8019dfc:	005b      	lsls	r3, r3, #1
 8019dfe:	4619      	mov	r1, r3
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	440b      	add	r3, r1
 8019e04:	3237      	adds	r2, #55	; 0x37
 8019e06:	b2d2      	uxtb	r2, r2
 8019e08:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	011b      	lsls	r3, r3, #4
 8019e0e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019e10:	7dfb      	ldrb	r3, [r7, #23]
 8019e12:	005b      	lsls	r3, r3, #1
 8019e14:	3301      	adds	r3, #1
 8019e16:	68ba      	ldr	r2, [r7, #8]
 8019e18:	4413      	add	r3, r2
 8019e1a:	2200      	movs	r2, #0
 8019e1c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019e1e:	7dfb      	ldrb	r3, [r7, #23]
 8019e20:	3301      	adds	r3, #1
 8019e22:	75fb      	strb	r3, [r7, #23]
 8019e24:	7dfa      	ldrb	r2, [r7, #23]
 8019e26:	79fb      	ldrb	r3, [r7, #7]
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	d3d3      	bcc.n	8019dd4 <IntToUnicode+0x18>
  }
}
 8019e2c:	bf00      	nop
 8019e2e:	371c      	adds	r7, #28
 8019e30:	46bd      	mov	sp, r7
 8019e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e36:	4770      	bx	lr

08019e38 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019e38:	b580      	push	{r7, lr}
 8019e3a:	b08a      	sub	sp, #40	; 0x28
 8019e3c:	af00      	add	r7, sp, #0
 8019e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019e40:	f107 0314 	add.w	r3, r7, #20
 8019e44:	2200      	movs	r2, #0
 8019e46:	601a      	str	r2, [r3, #0]
 8019e48:	605a      	str	r2, [r3, #4]
 8019e4a:	609a      	str	r2, [r3, #8]
 8019e4c:	60da      	str	r2, [r3, #12]
 8019e4e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019e58:	d13c      	bne.n	8019ed4 <HAL_PCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019e5a:	4b20      	ldr	r3, [pc, #128]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e5e:	4a1f      	ldr	r2, [pc, #124]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019e60:	f043 0301 	orr.w	r3, r3, #1
 8019e64:	6313      	str	r3, [r2, #48]	; 0x30
 8019e66:	4b1d      	ldr	r3, [pc, #116]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019e6a:	f003 0301 	and.w	r3, r3, #1
 8019e6e:	613b      	str	r3, [r7, #16]
 8019e70:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019e72:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019e78:	2302      	movs	r3, #2
 8019e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019e7c:	2300      	movs	r3, #0
 8019e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019e80:	2303      	movs	r3, #3
 8019e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019e84:	230a      	movs	r3, #10
 8019e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019e88:	f107 0314 	add.w	r3, r7, #20
 8019e8c:	4619      	mov	r1, r3
 8019e8e:	4814      	ldr	r0, [pc, #80]	; (8019ee0 <HAL_PCD_MspInit+0xa8>)
 8019e90:	f7ee fcee 	bl	8008870 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019e94:	4b11      	ldr	r3, [pc, #68]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019e98:	4a10      	ldr	r2, [pc, #64]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019e9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019e9e:	6353      	str	r3, [r2, #52]	; 0x34
 8019ea0:	4b0e      	ldr	r3, [pc, #56]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019ea8:	60fb      	str	r3, [r7, #12]
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	4b0b      	ldr	r3, [pc, #44]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019eb0:	4a0a      	ldr	r2, [pc, #40]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019eb6:	6453      	str	r3, [r2, #68]	; 0x44
 8019eb8:	4b08      	ldr	r3, [pc, #32]	; (8019edc <HAL_PCD_MspInit+0xa4>)
 8019eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019ec0:	60bb      	str	r3, [r7, #8]
 8019ec2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019ec4:	2200      	movs	r2, #0
 8019ec6:	2105      	movs	r1, #5
 8019ec8:	2043      	movs	r0, #67	; 0x43
 8019eca:	f7ee f893 	bl	8007ff4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019ece:	2043      	movs	r0, #67	; 0x43
 8019ed0:	f7ee f8ac 	bl	800802c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019ed4:	bf00      	nop
 8019ed6:	3728      	adds	r7, #40	; 0x28
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	bd80      	pop	{r7, pc}
 8019edc:	40023800 	.word	0x40023800
 8019ee0:	40020000 	.word	0x40020000

08019ee4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019ee4:	b580      	push	{r7, lr}
 8019ee6:	b082      	sub	sp, #8
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8019ef2:	687b      	ldr	r3, [r7, #4]
 8019ef4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019ef8:	4619      	mov	r1, r3
 8019efa:	4610      	mov	r0, r2
 8019efc:	f7f7 fda6 	bl	8011a4c <USBD_LL_SetupStage>
}
 8019f00:	bf00      	nop
 8019f02:	3708      	adds	r7, #8
 8019f04:	46bd      	mov	sp, r7
 8019f06:	bd80      	pop	{r7, pc}

08019f08 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019f08:	b580      	push	{r7, lr}
 8019f0a:	b082      	sub	sp, #8
 8019f0c:	af00      	add	r7, sp, #0
 8019f0e:	6078      	str	r0, [r7, #4]
 8019f10:	460b      	mov	r3, r1
 8019f12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8019f14:	687b      	ldr	r3, [r7, #4]
 8019f16:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8019f1a:	78fa      	ldrb	r2, [r7, #3]
 8019f1c:	6879      	ldr	r1, [r7, #4]
 8019f1e:	4613      	mov	r3, r2
 8019f20:	00db      	lsls	r3, r3, #3
 8019f22:	1a9b      	subs	r3, r3, r2
 8019f24:	009b      	lsls	r3, r3, #2
 8019f26:	440b      	add	r3, r1
 8019f28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8019f2c:	681a      	ldr	r2, [r3, #0]
 8019f2e:	78fb      	ldrb	r3, [r7, #3]
 8019f30:	4619      	mov	r1, r3
 8019f32:	f7f7 fdde 	bl	8011af2 <USBD_LL_DataOutStage>
}
 8019f36:	bf00      	nop
 8019f38:	3708      	adds	r7, #8
 8019f3a:	46bd      	mov	sp, r7
 8019f3c:	bd80      	pop	{r7, pc}

08019f3e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019f3e:	b580      	push	{r7, lr}
 8019f40:	b082      	sub	sp, #8
 8019f42:	af00      	add	r7, sp, #0
 8019f44:	6078      	str	r0, [r7, #4]
 8019f46:	460b      	mov	r3, r1
 8019f48:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019f4a:	687b      	ldr	r3, [r7, #4]
 8019f4c:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
 8019f50:	78fa      	ldrb	r2, [r7, #3]
 8019f52:	6879      	ldr	r1, [r7, #4]
 8019f54:	4613      	mov	r3, r2
 8019f56:	00db      	lsls	r3, r3, #3
 8019f58:	1a9b      	subs	r3, r3, r2
 8019f5a:	009b      	lsls	r3, r3, #2
 8019f5c:	440b      	add	r3, r1
 8019f5e:	3348      	adds	r3, #72	; 0x48
 8019f60:	681a      	ldr	r2, [r3, #0]
 8019f62:	78fb      	ldrb	r3, [r7, #3]
 8019f64:	4619      	mov	r1, r3
 8019f66:	f7f7 fe27 	bl	8011bb8 <USBD_LL_DataInStage>
}
 8019f6a:	bf00      	nop
 8019f6c:	3708      	adds	r7, #8
 8019f6e:	46bd      	mov	sp, r7
 8019f70:	bd80      	pop	{r7, pc}

08019f72 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019f72:	b580      	push	{r7, lr}
 8019f74:	b082      	sub	sp, #8
 8019f76:	af00      	add	r7, sp, #0
 8019f78:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8019f80:	4618      	mov	r0, r3
 8019f82:	f7f7 ff2b 	bl	8011ddc <USBD_LL_SOF>
}
 8019f86:	bf00      	nop
 8019f88:	3708      	adds	r7, #8
 8019f8a:	46bd      	mov	sp, r7
 8019f8c:	bd80      	pop	{r7, pc}

08019f8e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8019f8e:	b580      	push	{r7, lr}
 8019f90:	b084      	sub	sp, #16
 8019f92:	af00      	add	r7, sp, #0
 8019f94:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019f96:	2301      	movs	r3, #1
 8019f98:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8019f9a:	687b      	ldr	r3, [r7, #4]
 8019f9c:	68db      	ldr	r3, [r3, #12]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d102      	bne.n	8019fa8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019fa2:	2300      	movs	r3, #0
 8019fa4:	73fb      	strb	r3, [r7, #15]
 8019fa6:	e008      	b.n	8019fba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019fa8:	687b      	ldr	r3, [r7, #4]
 8019faa:	68db      	ldr	r3, [r3, #12]
 8019fac:	2b02      	cmp	r3, #2
 8019fae:	d102      	bne.n	8019fb6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019fb0:	2301      	movs	r3, #1
 8019fb2:	73fb      	strb	r3, [r7, #15]
 8019fb4:	e001      	b.n	8019fba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019fb6:	f7ea ffc1 	bl	8004f3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8019fc0:	7bfa      	ldrb	r2, [r7, #15]
 8019fc2:	4611      	mov	r1, r2
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	f7f7 fece 	bl	8011d66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8019fca:	687b      	ldr	r3, [r7, #4]
 8019fcc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7f7 fe87 	bl	8011ce4 <USBD_LL_Reset>
}
 8019fd6:	bf00      	nop
 8019fd8:	3710      	adds	r7, #16
 8019fda:	46bd      	mov	sp, r7
 8019fdc:	bd80      	pop	{r7, pc}
	...

08019fe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019fe0:	b580      	push	{r7, lr}
 8019fe2:	b082      	sub	sp, #8
 8019fe4:	af00      	add	r7, sp, #0
 8019fe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019fe8:	687b      	ldr	r3, [r7, #4]
 8019fea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8019fee:	4618      	mov	r0, r3
 8019ff0:	f7f7 fec9 	bl	8011d86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019ff4:	687b      	ldr	r3, [r7, #4]
 8019ff6:	681b      	ldr	r3, [r3, #0]
 8019ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	687a      	ldr	r2, [r7, #4]
 801a000:	6812      	ldr	r2, [r2, #0]
 801a002:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a006:	f043 0301 	orr.w	r3, r3, #1
 801a00a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	6a1b      	ldr	r3, [r3, #32]
 801a010:	2b00      	cmp	r3, #0
 801a012:	d005      	beq.n	801a020 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a014:	4b04      	ldr	r3, [pc, #16]	; (801a028 <HAL_PCD_SuspendCallback+0x48>)
 801a016:	691b      	ldr	r3, [r3, #16]
 801a018:	4a03      	ldr	r2, [pc, #12]	; (801a028 <HAL_PCD_SuspendCallback+0x48>)
 801a01a:	f043 0306 	orr.w	r3, r3, #6
 801a01e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a020:	bf00      	nop
 801a022:	3708      	adds	r7, #8
 801a024:	46bd      	mov	sp, r7
 801a026:	bd80      	pop	{r7, pc}
 801a028:	e000ed00 	.word	0xe000ed00

0801a02c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a02c:	b580      	push	{r7, lr}
 801a02e:	b082      	sub	sp, #8
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a03a:	4618      	mov	r0, r3
 801a03c:	f7f7 feb8 	bl	8011db0 <USBD_LL_Resume>
}
 801a040:	bf00      	nop
 801a042:	3708      	adds	r7, #8
 801a044:	46bd      	mov	sp, r7
 801a046:	bd80      	pop	{r7, pc}

0801a048 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	460b      	mov	r3, r1
 801a052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a054:	687b      	ldr	r3, [r7, #4]
 801a056:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a05a:	78fa      	ldrb	r2, [r7, #3]
 801a05c:	4611      	mov	r1, r2
 801a05e:	4618      	mov	r0, r3
 801a060:	f7f7 fee3 	bl	8011e2a <USBD_LL_IsoOUTIncomplete>
}
 801a064:	bf00      	nop
 801a066:	3708      	adds	r7, #8
 801a068:	46bd      	mov	sp, r7
 801a06a:	bd80      	pop	{r7, pc}

0801a06c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b082      	sub	sp, #8
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
 801a074:	460b      	mov	r3, r1
 801a076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a07e:	78fa      	ldrb	r2, [r7, #3]
 801a080:	4611      	mov	r1, r2
 801a082:	4618      	mov	r0, r3
 801a084:	f7f7 fec4 	bl	8011e10 <USBD_LL_IsoINIncomplete>
}
 801a088:	bf00      	nop
 801a08a:	3708      	adds	r7, #8
 801a08c:	46bd      	mov	sp, r7
 801a08e:	bd80      	pop	{r7, pc}

0801a090 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a090:	b580      	push	{r7, lr}
 801a092:	b082      	sub	sp, #8
 801a094:	af00      	add	r7, sp, #0
 801a096:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a098:	687b      	ldr	r3, [r7, #4]
 801a09a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a09e:	4618      	mov	r0, r3
 801a0a0:	f7f7 fed0 	bl	8011e44 <USBD_LL_DevConnected>
}
 801a0a4:	bf00      	nop
 801a0a6:	3708      	adds	r7, #8
 801a0a8:	46bd      	mov	sp, r7
 801a0aa:	bd80      	pop	{r7, pc}

0801a0ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b082      	sub	sp, #8
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a0ba:	4618      	mov	r0, r3
 801a0bc:	f7f7 fecd 	bl	8011e5a <USBD_LL_DevDisconnected>
}
 801a0c0:	bf00      	nop
 801a0c2:	3708      	adds	r7, #8
 801a0c4:	46bd      	mov	sp, r7
 801a0c6:	bd80      	pop	{r7, pc}

0801a0c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a0c8:	b580      	push	{r7, lr}
 801a0ca:	b082      	sub	sp, #8
 801a0cc:	af00      	add	r7, sp, #0
 801a0ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a0d0:	687b      	ldr	r3, [r7, #4]
 801a0d2:	781b      	ldrb	r3, [r3, #0]
 801a0d4:	2b00      	cmp	r3, #0
 801a0d6:	d13c      	bne.n	801a152 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a0d8:	4a20      	ldr	r2, [pc, #128]	; (801a15c <USBD_LL_Init+0x94>)
 801a0da:	687b      	ldr	r3, [r7, #4]
 801a0dc:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
  pdev->pData = &hpcd_USB_OTG_FS;
 801a0e0:	687b      	ldr	r3, [r7, #4]
 801a0e2:	4a1e      	ldr	r2, [pc, #120]	; (801a15c <USBD_LL_Init+0x94>)
 801a0e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a0e8:	4b1c      	ldr	r3, [pc, #112]	; (801a15c <USBD_LL_Init+0x94>)
 801a0ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a0ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 801a0f0:	4b1a      	ldr	r3, [pc, #104]	; (801a15c <USBD_LL_Init+0x94>)
 801a0f2:	2206      	movs	r2, #6
 801a0f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a0f6:	4b19      	ldr	r3, [pc, #100]	; (801a15c <USBD_LL_Init+0x94>)
 801a0f8:	2202      	movs	r2, #2
 801a0fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a0fc:	4b17      	ldr	r3, [pc, #92]	; (801a15c <USBD_LL_Init+0x94>)
 801a0fe:	2200      	movs	r2, #0
 801a100:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a102:	4b16      	ldr	r3, [pc, #88]	; (801a15c <USBD_LL_Init+0x94>)
 801a104:	2202      	movs	r2, #2
 801a106:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801a108:	4b14      	ldr	r3, [pc, #80]	; (801a15c <USBD_LL_Init+0x94>)
 801a10a:	2200      	movs	r2, #0
 801a10c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a10e:	4b13      	ldr	r3, [pc, #76]	; (801a15c <USBD_LL_Init+0x94>)
 801a110:	2200      	movs	r2, #0
 801a112:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a114:	4b11      	ldr	r3, [pc, #68]	; (801a15c <USBD_LL_Init+0x94>)
 801a116:	2200      	movs	r2, #0
 801a118:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801a11a:	4b10      	ldr	r3, [pc, #64]	; (801a15c <USBD_LL_Init+0x94>)
 801a11c:	2200      	movs	r2, #0
 801a11e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a120:	4b0e      	ldr	r3, [pc, #56]	; (801a15c <USBD_LL_Init+0x94>)
 801a122:	2200      	movs	r2, #0
 801a124:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a126:	480d      	ldr	r0, [pc, #52]	; (801a15c <USBD_LL_Init+0x94>)
 801a128:	f7ee fd97 	bl	8008c5a <HAL_PCD_Init>
 801a12c:	4603      	mov	r3, r0
 801a12e:	2b00      	cmp	r3, #0
 801a130:	d001      	beq.n	801a136 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801a132:	f7ea ff03 	bl	8004f3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a136:	2180      	movs	r1, #128	; 0x80
 801a138:	4808      	ldr	r0, [pc, #32]	; (801a15c <USBD_LL_Init+0x94>)
 801a13a:	f7ef ff18 	bl	8009f6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a13e:	2240      	movs	r2, #64	; 0x40
 801a140:	2100      	movs	r1, #0
 801a142:	4806      	ldr	r0, [pc, #24]	; (801a15c <USBD_LL_Init+0x94>)
 801a144:	f7ef fecc 	bl	8009ee0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a148:	2280      	movs	r2, #128	; 0x80
 801a14a:	2101      	movs	r1, #1
 801a14c:	4803      	ldr	r0, [pc, #12]	; (801a15c <USBD_LL_Init+0x94>)
 801a14e:	f7ef fec7 	bl	8009ee0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a152:	2300      	movs	r3, #0
}
 801a154:	4618      	mov	r0, r3
 801a156:	3708      	adds	r7, #8
 801a158:	46bd      	mov	sp, r7
 801a15a:	bd80      	pop	{r7, pc}
 801a15c:	2001e064 	.word	0x2001e064

0801a160 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a160:	b580      	push	{r7, lr}
 801a162:	b084      	sub	sp, #16
 801a164:	af00      	add	r7, sp, #0
 801a166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a168:	2300      	movs	r3, #0
 801a16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a16c:	2300      	movs	r3, #0
 801a16e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801a170:	687b      	ldr	r3, [r7, #4]
 801a172:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a176:	4618      	mov	r0, r3
 801a178:	f7ee fe93 	bl	8008ea2 <HAL_PCD_Start>
 801a17c:	4603      	mov	r3, r0
 801a17e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801a180:	7bfb      	ldrb	r3, [r7, #15]
 801a182:	4618      	mov	r0, r3
 801a184:	f000 f97e 	bl	801a484 <USBD_Get_USB_Status>
 801a188:	4603      	mov	r3, r0
 801a18a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a18c:	7bbb      	ldrb	r3, [r7, #14]
}
 801a18e:	4618      	mov	r0, r3
 801a190:	3710      	adds	r7, #16
 801a192:	46bd      	mov	sp, r7
 801a194:	bd80      	pop	{r7, pc}

0801a196 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a196:	b580      	push	{r7, lr}
 801a198:	b084      	sub	sp, #16
 801a19a:	af00      	add	r7, sp, #0
 801a19c:	6078      	str	r0, [r7, #4]
 801a19e:	4608      	mov	r0, r1
 801a1a0:	4611      	mov	r1, r2
 801a1a2:	461a      	mov	r2, r3
 801a1a4:	4603      	mov	r3, r0
 801a1a6:	70fb      	strb	r3, [r7, #3]
 801a1a8:	460b      	mov	r3, r1
 801a1aa:	70bb      	strb	r3, [r7, #2]
 801a1ac:	4613      	mov	r3, r2
 801a1ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a1b0:	2300      	movs	r3, #0
 801a1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a1b4:	2300      	movs	r3, #0
 801a1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a1b8:	687b      	ldr	r3, [r7, #4]
 801a1ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a1be:	78bb      	ldrb	r3, [r7, #2]
 801a1c0:	883a      	ldrh	r2, [r7, #0]
 801a1c2:	78f9      	ldrb	r1, [r7, #3]
 801a1c4:	f7ef fa93 	bl	80096ee <HAL_PCD_EP_Open>
 801a1c8:	4603      	mov	r3, r0
 801a1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a1cc:	7bfb      	ldrb	r3, [r7, #15]
 801a1ce:	4618      	mov	r0, r3
 801a1d0:	f000 f958 	bl	801a484 <USBD_Get_USB_Status>
 801a1d4:	4603      	mov	r3, r0
 801a1d6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 801a1da:	4618      	mov	r0, r3
 801a1dc:	3710      	adds	r7, #16
 801a1de:	46bd      	mov	sp, r7
 801a1e0:	bd80      	pop	{r7, pc}

0801a1e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a1e2:	b580      	push	{r7, lr}
 801a1e4:	b084      	sub	sp, #16
 801a1e6:	af00      	add	r7, sp, #0
 801a1e8:	6078      	str	r0, [r7, #4]
 801a1ea:	460b      	mov	r3, r1
 801a1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a1ee:	2300      	movs	r3, #0
 801a1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a1f2:	2300      	movs	r3, #0
 801a1f4:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a1fc:	78fa      	ldrb	r2, [r7, #3]
 801a1fe:	4611      	mov	r1, r2
 801a200:	4618      	mov	r0, r3
 801a202:	f7ef fadc 	bl	80097be <HAL_PCD_EP_Close>
 801a206:	4603      	mov	r3, r0
 801a208:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801a20a:	7bfb      	ldrb	r3, [r7, #15]
 801a20c:	4618      	mov	r0, r3
 801a20e:	f000 f939 	bl	801a484 <USBD_Get_USB_Status>
 801a212:	4603      	mov	r3, r0
 801a214:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801a216:	7bbb      	ldrb	r3, [r7, #14]
}
 801a218:	4618      	mov	r0, r3
 801a21a:	3710      	adds	r7, #16
 801a21c:	46bd      	mov	sp, r7
 801a21e:	bd80      	pop	{r7, pc}

0801a220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b084      	sub	sp, #16
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
 801a228:	460b      	mov	r3, r1
 801a22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a22c:	2300      	movs	r3, #0
 801a22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a230:	2300      	movs	r3, #0
 801a232:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a234:	687b      	ldr	r3, [r7, #4]
 801a236:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a23a:	78fa      	ldrb	r2, [r7, #3]
 801a23c:	4611      	mov	r1, r2
 801a23e:	4618      	mov	r0, r3
 801a240:	f7ef fbb4 	bl	80099ac <HAL_PCD_EP_SetStall>
 801a244:	4603      	mov	r3, r0
 801a246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a248:	7bfb      	ldrb	r3, [r7, #15]
 801a24a:	4618      	mov	r0, r3
 801a24c:	f000 f91a 	bl	801a484 <USBD_Get_USB_Status>
 801a250:	4603      	mov	r3, r0
 801a252:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a254:	7bbb      	ldrb	r3, [r7, #14]
}
 801a256:	4618      	mov	r0, r3
 801a258:	3710      	adds	r7, #16
 801a25a:	46bd      	mov	sp, r7
 801a25c:	bd80      	pop	{r7, pc}

0801a25e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a25e:	b580      	push	{r7, lr}
 801a260:	b084      	sub	sp, #16
 801a262:	af00      	add	r7, sp, #0
 801a264:	6078      	str	r0, [r7, #4]
 801a266:	460b      	mov	r3, r1
 801a268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a26a:	2300      	movs	r3, #0
 801a26c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a26e:	2300      	movs	r3, #0
 801a270:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801a272:	687b      	ldr	r3, [r7, #4]
 801a274:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a278:	78fa      	ldrb	r2, [r7, #3]
 801a27a:	4611      	mov	r1, r2
 801a27c:	4618      	mov	r0, r3
 801a27e:	f7ef fbf9 	bl	8009a74 <HAL_PCD_EP_ClrStall>
 801a282:	4603      	mov	r3, r0
 801a284:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801a286:	7bfb      	ldrb	r3, [r7, #15]
 801a288:	4618      	mov	r0, r3
 801a28a:	f000 f8fb 	bl	801a484 <USBD_Get_USB_Status>
 801a28e:	4603      	mov	r3, r0
 801a290:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801a292:	7bbb      	ldrb	r3, [r7, #14]
}
 801a294:	4618      	mov	r0, r3
 801a296:	3710      	adds	r7, #16
 801a298:	46bd      	mov	sp, r7
 801a29a:	bd80      	pop	{r7, pc}

0801a29c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a29c:	b480      	push	{r7}
 801a29e:	b085      	sub	sp, #20
 801a2a0:	af00      	add	r7, sp, #0
 801a2a2:	6078      	str	r0, [r7, #4]
 801a2a4:	460b      	mov	r3, r1
 801a2a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a2ae:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801a2b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	da0b      	bge.n	801a2d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801a2b8:	78fb      	ldrb	r3, [r7, #3]
 801a2ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a2be:	68f9      	ldr	r1, [r7, #12]
 801a2c0:	4613      	mov	r3, r2
 801a2c2:	00db      	lsls	r3, r3, #3
 801a2c4:	1a9b      	subs	r3, r3, r2
 801a2c6:	009b      	lsls	r3, r3, #2
 801a2c8:	440b      	add	r3, r1
 801a2ca:	333e      	adds	r3, #62	; 0x3e
 801a2cc:	781b      	ldrb	r3, [r3, #0]
 801a2ce:	e00b      	b.n	801a2e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801a2d0:	78fb      	ldrb	r3, [r7, #3]
 801a2d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801a2d6:	68f9      	ldr	r1, [r7, #12]
 801a2d8:	4613      	mov	r3, r2
 801a2da:	00db      	lsls	r3, r3, #3
 801a2dc:	1a9b      	subs	r3, r3, r2
 801a2de:	009b      	lsls	r3, r3, #2
 801a2e0:	440b      	add	r3, r1
 801a2e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801a2e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 801a2e8:	4618      	mov	r0, r3
 801a2ea:	3714      	adds	r7, #20
 801a2ec:	46bd      	mov	sp, r7
 801a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2f2:	4770      	bx	lr

0801a2f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801a2f4:	b580      	push	{r7, lr}
 801a2f6:	b084      	sub	sp, #16
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
 801a2fc:	460b      	mov	r3, r1
 801a2fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a300:	2300      	movs	r3, #0
 801a302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a304:	2300      	movs	r3, #0
 801a306:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a30e:	78fa      	ldrb	r2, [r7, #3]
 801a310:	4611      	mov	r1, r2
 801a312:	4618      	mov	r0, r3
 801a314:	f7ef f9c6 	bl	80096a4 <HAL_PCD_SetAddress>
 801a318:	4603      	mov	r3, r0
 801a31a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801a31c:	7bfb      	ldrb	r3, [r7, #15]
 801a31e:	4618      	mov	r0, r3
 801a320:	f000 f8b0 	bl	801a484 <USBD_Get_USB_Status>
 801a324:	4603      	mov	r3, r0
 801a326:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801a328:	7bbb      	ldrb	r3, [r7, #14]
}
 801a32a:	4618      	mov	r0, r3
 801a32c:	3710      	adds	r7, #16
 801a32e:	46bd      	mov	sp, r7
 801a330:	bd80      	pop	{r7, pc}

0801a332 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a332:	b580      	push	{r7, lr}
 801a334:	b086      	sub	sp, #24
 801a336:	af00      	add	r7, sp, #0
 801a338:	60f8      	str	r0, [r7, #12]
 801a33a:	607a      	str	r2, [r7, #4]
 801a33c:	603b      	str	r3, [r7, #0]
 801a33e:	460b      	mov	r3, r1
 801a340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a342:	2300      	movs	r3, #0
 801a344:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a346:	2300      	movs	r3, #0
 801a348:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801a34a:	68fb      	ldr	r3, [r7, #12]
 801a34c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a350:	7af9      	ldrb	r1, [r7, #11]
 801a352:	683b      	ldr	r3, [r7, #0]
 801a354:	687a      	ldr	r2, [r7, #4]
 801a356:	f7ef fadf 	bl	8009918 <HAL_PCD_EP_Transmit>
 801a35a:	4603      	mov	r3, r0
 801a35c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801a35e:	7dfb      	ldrb	r3, [r7, #23]
 801a360:	4618      	mov	r0, r3
 801a362:	f000 f88f 	bl	801a484 <USBD_Get_USB_Status>
 801a366:	4603      	mov	r3, r0
 801a368:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801a36a:	7dbb      	ldrb	r3, [r7, #22]
}
 801a36c:	4618      	mov	r0, r3
 801a36e:	3718      	adds	r7, #24
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}

0801a374 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801a374:	b580      	push	{r7, lr}
 801a376:	b086      	sub	sp, #24
 801a378:	af00      	add	r7, sp, #0
 801a37a:	60f8      	str	r0, [r7, #12]
 801a37c:	607a      	str	r2, [r7, #4]
 801a37e:	603b      	str	r3, [r7, #0]
 801a380:	460b      	mov	r3, r1
 801a382:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a384:	2300      	movs	r3, #0
 801a386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a388:	2300      	movs	r3, #0
 801a38a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801a38c:	68fb      	ldr	r3, [r7, #12]
 801a38e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801a392:	7af9      	ldrb	r1, [r7, #11]
 801a394:	683b      	ldr	r3, [r7, #0]
 801a396:	687a      	ldr	r2, [r7, #4]
 801a398:	f7ef fa5b 	bl	8009852 <HAL_PCD_EP_Receive>
 801a39c:	4603      	mov	r3, r0
 801a39e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801a3a0:	7dfb      	ldrb	r3, [r7, #23]
 801a3a2:	4618      	mov	r0, r3
 801a3a4:	f000 f86e 	bl	801a484 <USBD_Get_USB_Status>
 801a3a8:	4603      	mov	r3, r0
 801a3aa:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801a3ac:	7dbb      	ldrb	r3, [r7, #22]
}
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	3718      	adds	r7, #24
 801a3b2:	46bd      	mov	sp, r7
 801a3b4:	bd80      	pop	{r7, pc}

0801a3b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a3b6:	b580      	push	{r7, lr}
 801a3b8:	b082      	sub	sp, #8
 801a3ba:	af00      	add	r7, sp, #0
 801a3bc:	6078      	str	r0, [r7, #4]
 801a3be:	460b      	mov	r3, r1
 801a3c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801a3c8:	78fa      	ldrb	r2, [r7, #3]
 801a3ca:	4611      	mov	r1, r2
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f7ef fa8b 	bl	80098e8 <HAL_PCD_EP_GetRxCount>
 801a3d2:	4603      	mov	r3, r0
}
 801a3d4:	4618      	mov	r0, r3
 801a3d6:	3708      	adds	r7, #8
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	bd80      	pop	{r7, pc}

0801a3dc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b082      	sub	sp, #8
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
 801a3e4:	460b      	mov	r3, r1
 801a3e6:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 801a3e8:	78fb      	ldrb	r3, [r7, #3]
 801a3ea:	2b00      	cmp	r3, #0
 801a3ec:	d002      	beq.n	801a3f4 <HAL_PCDEx_LPM_Callback+0x18>
 801a3ee:	2b01      	cmp	r3, #1
 801a3f0:	d01f      	beq.n	801a432 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;   
  }
}
 801a3f2:	e03b      	b.n	801a46c <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6a1b      	ldr	r3, [r3, #32]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d007      	beq.n	801a40c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 801a3fc:	f000 f83c 	bl	801a478 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a400:	4b1c      	ldr	r3, [pc, #112]	; (801a474 <HAL_PCDEx_LPM_Callback+0x98>)
 801a402:	691b      	ldr	r3, [r3, #16]
 801a404:	4a1b      	ldr	r2, [pc, #108]	; (801a474 <HAL_PCDEx_LPM_Callback+0x98>)
 801a406:	f023 0306 	bic.w	r3, r3, #6
 801a40a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	687a      	ldr	r2, [r7, #4]
 801a418:	6812      	ldr	r2, [r2, #0]
 801a41a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a41e:	f023 0301 	bic.w	r3, r3, #1
 801a422:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a42a:	4618      	mov	r0, r3
 801a42c:	f7f7 fcc0 	bl	8011db0 <USBD_LL_Resume>
    break;
 801a430:	e01c      	b.n	801a46c <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a43a:	681b      	ldr	r3, [r3, #0]
 801a43c:	687a      	ldr	r2, [r7, #4]
 801a43e:	6812      	ldr	r2, [r2, #0]
 801a440:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a444:	f043 0301 	orr.w	r3, r3, #1
 801a448:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 801a450:	4618      	mov	r0, r3
 801a452:	f7f7 fc98 	bl	8011d86 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801a456:	687b      	ldr	r3, [r7, #4]
 801a458:	6a1b      	ldr	r3, [r3, #32]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d005      	beq.n	801a46a <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a45e:	4b05      	ldr	r3, [pc, #20]	; (801a474 <HAL_PCDEx_LPM_Callback+0x98>)
 801a460:	691b      	ldr	r3, [r3, #16]
 801a462:	4a04      	ldr	r2, [pc, #16]	; (801a474 <HAL_PCDEx_LPM_Callback+0x98>)
 801a464:	f043 0306 	orr.w	r3, r3, #6
 801a468:	6113      	str	r3, [r2, #16]
    break;   
 801a46a:	bf00      	nop
}
 801a46c:	bf00      	nop
 801a46e:	3708      	adds	r7, #8
 801a470:	46bd      	mov	sp, r7
 801a472:	bd80      	pop	{r7, pc}
 801a474:	e000ed00 	.word	0xe000ed00

0801a478 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801a478:	b580      	push	{r7, lr}
 801a47a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 801a47c:	f7ea f966 	bl	800474c <SystemClock_Config>
}
 801a480:	bf00      	nop
 801a482:	bd80      	pop	{r7, pc}

0801a484 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801a484:	b480      	push	{r7}
 801a486:	b085      	sub	sp, #20
 801a488:	af00      	add	r7, sp, #0
 801a48a:	4603      	mov	r3, r0
 801a48c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a48e:	2300      	movs	r3, #0
 801a490:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801a492:	79fb      	ldrb	r3, [r7, #7]
 801a494:	2b03      	cmp	r3, #3
 801a496:	d817      	bhi.n	801a4c8 <USBD_Get_USB_Status+0x44>
 801a498:	a201      	add	r2, pc, #4	; (adr r2, 801a4a0 <USBD_Get_USB_Status+0x1c>)
 801a49a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a49e:	bf00      	nop
 801a4a0:	0801a4b1 	.word	0x0801a4b1
 801a4a4:	0801a4b7 	.word	0x0801a4b7
 801a4a8:	0801a4bd 	.word	0x0801a4bd
 801a4ac:	0801a4c3 	.word	0x0801a4c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801a4b0:	2300      	movs	r3, #0
 801a4b2:	73fb      	strb	r3, [r7, #15]
    break;
 801a4b4:	e00b      	b.n	801a4ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801a4b6:	2303      	movs	r3, #3
 801a4b8:	73fb      	strb	r3, [r7, #15]
    break;
 801a4ba:	e008      	b.n	801a4ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801a4bc:	2301      	movs	r3, #1
 801a4be:	73fb      	strb	r3, [r7, #15]
    break;
 801a4c0:	e005      	b.n	801a4ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801a4c2:	2303      	movs	r3, #3
 801a4c4:	73fb      	strb	r3, [r7, #15]
    break;
 801a4c6:	e002      	b.n	801a4ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801a4c8:	2303      	movs	r3, #3
 801a4ca:	73fb      	strb	r3, [r7, #15]
    break;
 801a4cc:	bf00      	nop
  }
  return usb_status;
 801a4ce:	7bfb      	ldrb	r3, [r7, #15]
}
 801a4d0:	4618      	mov	r0, r3
 801a4d2:	3714      	adds	r7, #20
 801a4d4:	46bd      	mov	sp, r7
 801a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4da:	4770      	bx	lr

0801a4dc <__errno>:
 801a4dc:	4b01      	ldr	r3, [pc, #4]	; (801a4e4 <__errno+0x8>)
 801a4de:	6818      	ldr	r0, [r3, #0]
 801a4e0:	4770      	bx	lr
 801a4e2:	bf00      	nop
 801a4e4:	20000194 	.word	0x20000194

0801a4e8 <__libc_init_array>:
 801a4e8:	b570      	push	{r4, r5, r6, lr}
 801a4ea:	4e0d      	ldr	r6, [pc, #52]	; (801a520 <__libc_init_array+0x38>)
 801a4ec:	4c0d      	ldr	r4, [pc, #52]	; (801a524 <__libc_init_array+0x3c>)
 801a4ee:	1ba4      	subs	r4, r4, r6
 801a4f0:	10a4      	asrs	r4, r4, #2
 801a4f2:	2500      	movs	r5, #0
 801a4f4:	42a5      	cmp	r5, r4
 801a4f6:	d109      	bne.n	801a50c <__libc_init_array+0x24>
 801a4f8:	4e0b      	ldr	r6, [pc, #44]	; (801a528 <__libc_init_array+0x40>)
 801a4fa:	4c0c      	ldr	r4, [pc, #48]	; (801a52c <__libc_init_array+0x44>)
 801a4fc:	f002 fadc 	bl	801cab8 <_init>
 801a500:	1ba4      	subs	r4, r4, r6
 801a502:	10a4      	asrs	r4, r4, #2
 801a504:	2500      	movs	r5, #0
 801a506:	42a5      	cmp	r5, r4
 801a508:	d105      	bne.n	801a516 <__libc_init_array+0x2e>
 801a50a:	bd70      	pop	{r4, r5, r6, pc}
 801a50c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a510:	4798      	blx	r3
 801a512:	3501      	adds	r5, #1
 801a514:	e7ee      	b.n	801a4f4 <__libc_init_array+0xc>
 801a516:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a51a:	4798      	blx	r3
 801a51c:	3501      	adds	r5, #1
 801a51e:	e7f2      	b.n	801a506 <__libc_init_array+0x1e>
 801a520:	0801d8d8 	.word	0x0801d8d8
 801a524:	0801d8d8 	.word	0x0801d8d8
 801a528:	0801d8d8 	.word	0x0801d8d8
 801a52c:	0801d8dc 	.word	0x0801d8dc

0801a530 <malloc>:
 801a530:	4b02      	ldr	r3, [pc, #8]	; (801a53c <malloc+0xc>)
 801a532:	4601      	mov	r1, r0
 801a534:	6818      	ldr	r0, [r3, #0]
 801a536:	f000 b86d 	b.w	801a614 <_malloc_r>
 801a53a:	bf00      	nop
 801a53c:	20000194 	.word	0x20000194

0801a540 <free>:
 801a540:	4b02      	ldr	r3, [pc, #8]	; (801a54c <free+0xc>)
 801a542:	4601      	mov	r1, r0
 801a544:	6818      	ldr	r0, [r3, #0]
 801a546:	f000 b817 	b.w	801a578 <_free_r>
 801a54a:	bf00      	nop
 801a54c:	20000194 	.word	0x20000194

0801a550 <memcpy>:
 801a550:	b510      	push	{r4, lr}
 801a552:	1e43      	subs	r3, r0, #1
 801a554:	440a      	add	r2, r1
 801a556:	4291      	cmp	r1, r2
 801a558:	d100      	bne.n	801a55c <memcpy+0xc>
 801a55a:	bd10      	pop	{r4, pc}
 801a55c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a560:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a564:	e7f7      	b.n	801a556 <memcpy+0x6>

0801a566 <memset>:
 801a566:	4402      	add	r2, r0
 801a568:	4603      	mov	r3, r0
 801a56a:	4293      	cmp	r3, r2
 801a56c:	d100      	bne.n	801a570 <memset+0xa>
 801a56e:	4770      	bx	lr
 801a570:	f803 1b01 	strb.w	r1, [r3], #1
 801a574:	e7f9      	b.n	801a56a <memset+0x4>
	...

0801a578 <_free_r>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	4605      	mov	r5, r0
 801a57c:	2900      	cmp	r1, #0
 801a57e:	d045      	beq.n	801a60c <_free_r+0x94>
 801a580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a584:	1f0c      	subs	r4, r1, #4
 801a586:	2b00      	cmp	r3, #0
 801a588:	bfb8      	it	lt
 801a58a:	18e4      	addlt	r4, r4, r3
 801a58c:	f000 f91a 	bl	801a7c4 <__malloc_lock>
 801a590:	4a1f      	ldr	r2, [pc, #124]	; (801a610 <_free_r+0x98>)
 801a592:	6813      	ldr	r3, [r2, #0]
 801a594:	4610      	mov	r0, r2
 801a596:	b933      	cbnz	r3, 801a5a6 <_free_r+0x2e>
 801a598:	6063      	str	r3, [r4, #4]
 801a59a:	6014      	str	r4, [r2, #0]
 801a59c:	4628      	mov	r0, r5
 801a59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a5a2:	f000 b910 	b.w	801a7c6 <__malloc_unlock>
 801a5a6:	42a3      	cmp	r3, r4
 801a5a8:	d90c      	bls.n	801a5c4 <_free_r+0x4c>
 801a5aa:	6821      	ldr	r1, [r4, #0]
 801a5ac:	1862      	adds	r2, r4, r1
 801a5ae:	4293      	cmp	r3, r2
 801a5b0:	bf04      	itt	eq
 801a5b2:	681a      	ldreq	r2, [r3, #0]
 801a5b4:	685b      	ldreq	r3, [r3, #4]
 801a5b6:	6063      	str	r3, [r4, #4]
 801a5b8:	bf04      	itt	eq
 801a5ba:	1852      	addeq	r2, r2, r1
 801a5bc:	6022      	streq	r2, [r4, #0]
 801a5be:	6004      	str	r4, [r0, #0]
 801a5c0:	e7ec      	b.n	801a59c <_free_r+0x24>
 801a5c2:	4613      	mov	r3, r2
 801a5c4:	685a      	ldr	r2, [r3, #4]
 801a5c6:	b10a      	cbz	r2, 801a5cc <_free_r+0x54>
 801a5c8:	42a2      	cmp	r2, r4
 801a5ca:	d9fa      	bls.n	801a5c2 <_free_r+0x4a>
 801a5cc:	6819      	ldr	r1, [r3, #0]
 801a5ce:	1858      	adds	r0, r3, r1
 801a5d0:	42a0      	cmp	r0, r4
 801a5d2:	d10b      	bne.n	801a5ec <_free_r+0x74>
 801a5d4:	6820      	ldr	r0, [r4, #0]
 801a5d6:	4401      	add	r1, r0
 801a5d8:	1858      	adds	r0, r3, r1
 801a5da:	4282      	cmp	r2, r0
 801a5dc:	6019      	str	r1, [r3, #0]
 801a5de:	d1dd      	bne.n	801a59c <_free_r+0x24>
 801a5e0:	6810      	ldr	r0, [r2, #0]
 801a5e2:	6852      	ldr	r2, [r2, #4]
 801a5e4:	605a      	str	r2, [r3, #4]
 801a5e6:	4401      	add	r1, r0
 801a5e8:	6019      	str	r1, [r3, #0]
 801a5ea:	e7d7      	b.n	801a59c <_free_r+0x24>
 801a5ec:	d902      	bls.n	801a5f4 <_free_r+0x7c>
 801a5ee:	230c      	movs	r3, #12
 801a5f0:	602b      	str	r3, [r5, #0]
 801a5f2:	e7d3      	b.n	801a59c <_free_r+0x24>
 801a5f4:	6820      	ldr	r0, [r4, #0]
 801a5f6:	1821      	adds	r1, r4, r0
 801a5f8:	428a      	cmp	r2, r1
 801a5fa:	bf04      	itt	eq
 801a5fc:	6811      	ldreq	r1, [r2, #0]
 801a5fe:	6852      	ldreq	r2, [r2, #4]
 801a600:	6062      	str	r2, [r4, #4]
 801a602:	bf04      	itt	eq
 801a604:	1809      	addeq	r1, r1, r0
 801a606:	6021      	streq	r1, [r4, #0]
 801a608:	605c      	str	r4, [r3, #4]
 801a60a:	e7c7      	b.n	801a59c <_free_r+0x24>
 801a60c:	bd38      	pop	{r3, r4, r5, pc}
 801a60e:	bf00      	nop
 801a610:	2000887c 	.word	0x2000887c

0801a614 <_malloc_r>:
 801a614:	b570      	push	{r4, r5, r6, lr}
 801a616:	1ccd      	adds	r5, r1, #3
 801a618:	f025 0503 	bic.w	r5, r5, #3
 801a61c:	3508      	adds	r5, #8
 801a61e:	2d0c      	cmp	r5, #12
 801a620:	bf38      	it	cc
 801a622:	250c      	movcc	r5, #12
 801a624:	2d00      	cmp	r5, #0
 801a626:	4606      	mov	r6, r0
 801a628:	db01      	blt.n	801a62e <_malloc_r+0x1a>
 801a62a:	42a9      	cmp	r1, r5
 801a62c:	d903      	bls.n	801a636 <_malloc_r+0x22>
 801a62e:	230c      	movs	r3, #12
 801a630:	6033      	str	r3, [r6, #0]
 801a632:	2000      	movs	r0, #0
 801a634:	bd70      	pop	{r4, r5, r6, pc}
 801a636:	f000 f8c5 	bl	801a7c4 <__malloc_lock>
 801a63a:	4a21      	ldr	r2, [pc, #132]	; (801a6c0 <_malloc_r+0xac>)
 801a63c:	6814      	ldr	r4, [r2, #0]
 801a63e:	4621      	mov	r1, r4
 801a640:	b991      	cbnz	r1, 801a668 <_malloc_r+0x54>
 801a642:	4c20      	ldr	r4, [pc, #128]	; (801a6c4 <_malloc_r+0xb0>)
 801a644:	6823      	ldr	r3, [r4, #0]
 801a646:	b91b      	cbnz	r3, 801a650 <_malloc_r+0x3c>
 801a648:	4630      	mov	r0, r6
 801a64a:	f000 f83d 	bl	801a6c8 <_sbrk_r>
 801a64e:	6020      	str	r0, [r4, #0]
 801a650:	4629      	mov	r1, r5
 801a652:	4630      	mov	r0, r6
 801a654:	f000 f838 	bl	801a6c8 <_sbrk_r>
 801a658:	1c43      	adds	r3, r0, #1
 801a65a:	d124      	bne.n	801a6a6 <_malloc_r+0x92>
 801a65c:	230c      	movs	r3, #12
 801a65e:	6033      	str	r3, [r6, #0]
 801a660:	4630      	mov	r0, r6
 801a662:	f000 f8b0 	bl	801a7c6 <__malloc_unlock>
 801a666:	e7e4      	b.n	801a632 <_malloc_r+0x1e>
 801a668:	680b      	ldr	r3, [r1, #0]
 801a66a:	1b5b      	subs	r3, r3, r5
 801a66c:	d418      	bmi.n	801a6a0 <_malloc_r+0x8c>
 801a66e:	2b0b      	cmp	r3, #11
 801a670:	d90f      	bls.n	801a692 <_malloc_r+0x7e>
 801a672:	600b      	str	r3, [r1, #0]
 801a674:	50cd      	str	r5, [r1, r3]
 801a676:	18cc      	adds	r4, r1, r3
 801a678:	4630      	mov	r0, r6
 801a67a:	f000 f8a4 	bl	801a7c6 <__malloc_unlock>
 801a67e:	f104 000b 	add.w	r0, r4, #11
 801a682:	1d23      	adds	r3, r4, #4
 801a684:	f020 0007 	bic.w	r0, r0, #7
 801a688:	1ac3      	subs	r3, r0, r3
 801a68a:	d0d3      	beq.n	801a634 <_malloc_r+0x20>
 801a68c:	425a      	negs	r2, r3
 801a68e:	50e2      	str	r2, [r4, r3]
 801a690:	e7d0      	b.n	801a634 <_malloc_r+0x20>
 801a692:	428c      	cmp	r4, r1
 801a694:	684b      	ldr	r3, [r1, #4]
 801a696:	bf16      	itet	ne
 801a698:	6063      	strne	r3, [r4, #4]
 801a69a:	6013      	streq	r3, [r2, #0]
 801a69c:	460c      	movne	r4, r1
 801a69e:	e7eb      	b.n	801a678 <_malloc_r+0x64>
 801a6a0:	460c      	mov	r4, r1
 801a6a2:	6849      	ldr	r1, [r1, #4]
 801a6a4:	e7cc      	b.n	801a640 <_malloc_r+0x2c>
 801a6a6:	1cc4      	adds	r4, r0, #3
 801a6a8:	f024 0403 	bic.w	r4, r4, #3
 801a6ac:	42a0      	cmp	r0, r4
 801a6ae:	d005      	beq.n	801a6bc <_malloc_r+0xa8>
 801a6b0:	1a21      	subs	r1, r4, r0
 801a6b2:	4630      	mov	r0, r6
 801a6b4:	f000 f808 	bl	801a6c8 <_sbrk_r>
 801a6b8:	3001      	adds	r0, #1
 801a6ba:	d0cf      	beq.n	801a65c <_malloc_r+0x48>
 801a6bc:	6025      	str	r5, [r4, #0]
 801a6be:	e7db      	b.n	801a678 <_malloc_r+0x64>
 801a6c0:	2000887c 	.word	0x2000887c
 801a6c4:	20008880 	.word	0x20008880

0801a6c8 <_sbrk_r>:
 801a6c8:	b538      	push	{r3, r4, r5, lr}
 801a6ca:	4c06      	ldr	r4, [pc, #24]	; (801a6e4 <_sbrk_r+0x1c>)
 801a6cc:	2300      	movs	r3, #0
 801a6ce:	4605      	mov	r5, r0
 801a6d0:	4608      	mov	r0, r1
 801a6d2:	6023      	str	r3, [r4, #0]
 801a6d4:	f7eb fa64 	bl	8005ba0 <_sbrk>
 801a6d8:	1c43      	adds	r3, r0, #1
 801a6da:	d102      	bne.n	801a6e2 <_sbrk_r+0x1a>
 801a6dc:	6823      	ldr	r3, [r4, #0]
 801a6de:	b103      	cbz	r3, 801a6e2 <_sbrk_r+0x1a>
 801a6e0:	602b      	str	r3, [r5, #0]
 801a6e2:	bd38      	pop	{r3, r4, r5, pc}
 801a6e4:	2001e468 	.word	0x2001e468

0801a6e8 <sniprintf>:
 801a6e8:	b40c      	push	{r2, r3}
 801a6ea:	b530      	push	{r4, r5, lr}
 801a6ec:	4b17      	ldr	r3, [pc, #92]	; (801a74c <sniprintf+0x64>)
 801a6ee:	1e0c      	subs	r4, r1, #0
 801a6f0:	b09d      	sub	sp, #116	; 0x74
 801a6f2:	681d      	ldr	r5, [r3, #0]
 801a6f4:	da08      	bge.n	801a708 <sniprintf+0x20>
 801a6f6:	238b      	movs	r3, #139	; 0x8b
 801a6f8:	602b      	str	r3, [r5, #0]
 801a6fa:	f04f 30ff 	mov.w	r0, #4294967295
 801a6fe:	b01d      	add	sp, #116	; 0x74
 801a700:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a704:	b002      	add	sp, #8
 801a706:	4770      	bx	lr
 801a708:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a70c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a710:	bf14      	ite	ne
 801a712:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a716:	4623      	moveq	r3, r4
 801a718:	9304      	str	r3, [sp, #16]
 801a71a:	9307      	str	r3, [sp, #28]
 801a71c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a720:	9002      	str	r0, [sp, #8]
 801a722:	9006      	str	r0, [sp, #24]
 801a724:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a728:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801a72a:	ab21      	add	r3, sp, #132	; 0x84
 801a72c:	a902      	add	r1, sp, #8
 801a72e:	4628      	mov	r0, r5
 801a730:	9301      	str	r3, [sp, #4]
 801a732:	f000 f8a3 	bl	801a87c <_svfiprintf_r>
 801a736:	1c43      	adds	r3, r0, #1
 801a738:	bfbc      	itt	lt
 801a73a:	238b      	movlt	r3, #139	; 0x8b
 801a73c:	602b      	strlt	r3, [r5, #0]
 801a73e:	2c00      	cmp	r4, #0
 801a740:	d0dd      	beq.n	801a6fe <sniprintf+0x16>
 801a742:	9b02      	ldr	r3, [sp, #8]
 801a744:	2200      	movs	r2, #0
 801a746:	701a      	strb	r2, [r3, #0]
 801a748:	e7d9      	b.n	801a6fe <sniprintf+0x16>
 801a74a:	bf00      	nop
 801a74c:	20000194 	.word	0x20000194

0801a750 <_vsniprintf_r>:
 801a750:	b530      	push	{r4, r5, lr}
 801a752:	1e14      	subs	r4, r2, #0
 801a754:	4605      	mov	r5, r0
 801a756:	b09b      	sub	sp, #108	; 0x6c
 801a758:	4618      	mov	r0, r3
 801a75a:	da05      	bge.n	801a768 <_vsniprintf_r+0x18>
 801a75c:	238b      	movs	r3, #139	; 0x8b
 801a75e:	602b      	str	r3, [r5, #0]
 801a760:	f04f 30ff 	mov.w	r0, #4294967295
 801a764:	b01b      	add	sp, #108	; 0x6c
 801a766:	bd30      	pop	{r4, r5, pc}
 801a768:	f44f 7302 	mov.w	r3, #520	; 0x208
 801a76c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801a770:	bf14      	ite	ne
 801a772:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a776:	4623      	moveq	r3, r4
 801a778:	9302      	str	r3, [sp, #8]
 801a77a:	9305      	str	r3, [sp, #20]
 801a77c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801a780:	9100      	str	r1, [sp, #0]
 801a782:	9104      	str	r1, [sp, #16]
 801a784:	f8ad 300e 	strh.w	r3, [sp, #14]
 801a788:	4602      	mov	r2, r0
 801a78a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801a78c:	4669      	mov	r1, sp
 801a78e:	4628      	mov	r0, r5
 801a790:	f000 f874 	bl	801a87c <_svfiprintf_r>
 801a794:	1c43      	adds	r3, r0, #1
 801a796:	bfbc      	itt	lt
 801a798:	238b      	movlt	r3, #139	; 0x8b
 801a79a:	602b      	strlt	r3, [r5, #0]
 801a79c:	2c00      	cmp	r4, #0
 801a79e:	d0e1      	beq.n	801a764 <_vsniprintf_r+0x14>
 801a7a0:	9b00      	ldr	r3, [sp, #0]
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	701a      	strb	r2, [r3, #0]
 801a7a6:	e7dd      	b.n	801a764 <_vsniprintf_r+0x14>

0801a7a8 <vsniprintf>:
 801a7a8:	b507      	push	{r0, r1, r2, lr}
 801a7aa:	9300      	str	r3, [sp, #0]
 801a7ac:	4613      	mov	r3, r2
 801a7ae:	460a      	mov	r2, r1
 801a7b0:	4601      	mov	r1, r0
 801a7b2:	4803      	ldr	r0, [pc, #12]	; (801a7c0 <vsniprintf+0x18>)
 801a7b4:	6800      	ldr	r0, [r0, #0]
 801a7b6:	f7ff ffcb 	bl	801a750 <_vsniprintf_r>
 801a7ba:	b003      	add	sp, #12
 801a7bc:	f85d fb04 	ldr.w	pc, [sp], #4
 801a7c0:	20000194 	.word	0x20000194

0801a7c4 <__malloc_lock>:
 801a7c4:	4770      	bx	lr

0801a7c6 <__malloc_unlock>:
 801a7c6:	4770      	bx	lr

0801a7c8 <__ssputs_r>:
 801a7c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a7cc:	688e      	ldr	r6, [r1, #8]
 801a7ce:	429e      	cmp	r6, r3
 801a7d0:	4682      	mov	sl, r0
 801a7d2:	460c      	mov	r4, r1
 801a7d4:	4690      	mov	r8, r2
 801a7d6:	4699      	mov	r9, r3
 801a7d8:	d837      	bhi.n	801a84a <__ssputs_r+0x82>
 801a7da:	898a      	ldrh	r2, [r1, #12]
 801a7dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801a7e0:	d031      	beq.n	801a846 <__ssputs_r+0x7e>
 801a7e2:	6825      	ldr	r5, [r4, #0]
 801a7e4:	6909      	ldr	r1, [r1, #16]
 801a7e6:	1a6f      	subs	r7, r5, r1
 801a7e8:	6965      	ldr	r5, [r4, #20]
 801a7ea:	2302      	movs	r3, #2
 801a7ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a7f0:	fb95 f5f3 	sdiv	r5, r5, r3
 801a7f4:	f109 0301 	add.w	r3, r9, #1
 801a7f8:	443b      	add	r3, r7
 801a7fa:	429d      	cmp	r5, r3
 801a7fc:	bf38      	it	cc
 801a7fe:	461d      	movcc	r5, r3
 801a800:	0553      	lsls	r3, r2, #21
 801a802:	d530      	bpl.n	801a866 <__ssputs_r+0x9e>
 801a804:	4629      	mov	r1, r5
 801a806:	f7ff ff05 	bl	801a614 <_malloc_r>
 801a80a:	4606      	mov	r6, r0
 801a80c:	b950      	cbnz	r0, 801a824 <__ssputs_r+0x5c>
 801a80e:	230c      	movs	r3, #12
 801a810:	f8ca 3000 	str.w	r3, [sl]
 801a814:	89a3      	ldrh	r3, [r4, #12]
 801a816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a81a:	81a3      	strh	r3, [r4, #12]
 801a81c:	f04f 30ff 	mov.w	r0, #4294967295
 801a820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a824:	463a      	mov	r2, r7
 801a826:	6921      	ldr	r1, [r4, #16]
 801a828:	f7ff fe92 	bl	801a550 <memcpy>
 801a82c:	89a3      	ldrh	r3, [r4, #12]
 801a82e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801a832:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a836:	81a3      	strh	r3, [r4, #12]
 801a838:	6126      	str	r6, [r4, #16]
 801a83a:	6165      	str	r5, [r4, #20]
 801a83c:	443e      	add	r6, r7
 801a83e:	1bed      	subs	r5, r5, r7
 801a840:	6026      	str	r6, [r4, #0]
 801a842:	60a5      	str	r5, [r4, #8]
 801a844:	464e      	mov	r6, r9
 801a846:	454e      	cmp	r6, r9
 801a848:	d900      	bls.n	801a84c <__ssputs_r+0x84>
 801a84a:	464e      	mov	r6, r9
 801a84c:	4632      	mov	r2, r6
 801a84e:	4641      	mov	r1, r8
 801a850:	6820      	ldr	r0, [r4, #0]
 801a852:	f000 fa93 	bl	801ad7c <memmove>
 801a856:	68a3      	ldr	r3, [r4, #8]
 801a858:	1b9b      	subs	r3, r3, r6
 801a85a:	60a3      	str	r3, [r4, #8]
 801a85c:	6823      	ldr	r3, [r4, #0]
 801a85e:	441e      	add	r6, r3
 801a860:	6026      	str	r6, [r4, #0]
 801a862:	2000      	movs	r0, #0
 801a864:	e7dc      	b.n	801a820 <__ssputs_r+0x58>
 801a866:	462a      	mov	r2, r5
 801a868:	f000 faa1 	bl	801adae <_realloc_r>
 801a86c:	4606      	mov	r6, r0
 801a86e:	2800      	cmp	r0, #0
 801a870:	d1e2      	bne.n	801a838 <__ssputs_r+0x70>
 801a872:	6921      	ldr	r1, [r4, #16]
 801a874:	4650      	mov	r0, sl
 801a876:	f7ff fe7f 	bl	801a578 <_free_r>
 801a87a:	e7c8      	b.n	801a80e <__ssputs_r+0x46>

0801a87c <_svfiprintf_r>:
 801a87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a880:	461d      	mov	r5, r3
 801a882:	898b      	ldrh	r3, [r1, #12]
 801a884:	061f      	lsls	r7, r3, #24
 801a886:	b09d      	sub	sp, #116	; 0x74
 801a888:	4680      	mov	r8, r0
 801a88a:	460c      	mov	r4, r1
 801a88c:	4616      	mov	r6, r2
 801a88e:	d50f      	bpl.n	801a8b0 <_svfiprintf_r+0x34>
 801a890:	690b      	ldr	r3, [r1, #16]
 801a892:	b96b      	cbnz	r3, 801a8b0 <_svfiprintf_r+0x34>
 801a894:	2140      	movs	r1, #64	; 0x40
 801a896:	f7ff febd 	bl	801a614 <_malloc_r>
 801a89a:	6020      	str	r0, [r4, #0]
 801a89c:	6120      	str	r0, [r4, #16]
 801a89e:	b928      	cbnz	r0, 801a8ac <_svfiprintf_r+0x30>
 801a8a0:	230c      	movs	r3, #12
 801a8a2:	f8c8 3000 	str.w	r3, [r8]
 801a8a6:	f04f 30ff 	mov.w	r0, #4294967295
 801a8aa:	e0c8      	b.n	801aa3e <_svfiprintf_r+0x1c2>
 801a8ac:	2340      	movs	r3, #64	; 0x40
 801a8ae:	6163      	str	r3, [r4, #20]
 801a8b0:	2300      	movs	r3, #0
 801a8b2:	9309      	str	r3, [sp, #36]	; 0x24
 801a8b4:	2320      	movs	r3, #32
 801a8b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a8ba:	2330      	movs	r3, #48	; 0x30
 801a8bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a8c0:	9503      	str	r5, [sp, #12]
 801a8c2:	f04f 0b01 	mov.w	fp, #1
 801a8c6:	4637      	mov	r7, r6
 801a8c8:	463d      	mov	r5, r7
 801a8ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 801a8ce:	b10b      	cbz	r3, 801a8d4 <_svfiprintf_r+0x58>
 801a8d0:	2b25      	cmp	r3, #37	; 0x25
 801a8d2:	d13e      	bne.n	801a952 <_svfiprintf_r+0xd6>
 801a8d4:	ebb7 0a06 	subs.w	sl, r7, r6
 801a8d8:	d00b      	beq.n	801a8f2 <_svfiprintf_r+0x76>
 801a8da:	4653      	mov	r3, sl
 801a8dc:	4632      	mov	r2, r6
 801a8de:	4621      	mov	r1, r4
 801a8e0:	4640      	mov	r0, r8
 801a8e2:	f7ff ff71 	bl	801a7c8 <__ssputs_r>
 801a8e6:	3001      	adds	r0, #1
 801a8e8:	f000 80a4 	beq.w	801aa34 <_svfiprintf_r+0x1b8>
 801a8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a8ee:	4453      	add	r3, sl
 801a8f0:	9309      	str	r3, [sp, #36]	; 0x24
 801a8f2:	783b      	ldrb	r3, [r7, #0]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	f000 809d 	beq.w	801aa34 <_svfiprintf_r+0x1b8>
 801a8fa:	2300      	movs	r3, #0
 801a8fc:	f04f 32ff 	mov.w	r2, #4294967295
 801a900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a904:	9304      	str	r3, [sp, #16]
 801a906:	9307      	str	r3, [sp, #28]
 801a908:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a90c:	931a      	str	r3, [sp, #104]	; 0x68
 801a90e:	462f      	mov	r7, r5
 801a910:	2205      	movs	r2, #5
 801a912:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a916:	4850      	ldr	r0, [pc, #320]	; (801aa58 <_svfiprintf_r+0x1dc>)
 801a918:	f7e5 fc82 	bl	8000220 <memchr>
 801a91c:	9b04      	ldr	r3, [sp, #16]
 801a91e:	b9d0      	cbnz	r0, 801a956 <_svfiprintf_r+0xda>
 801a920:	06d9      	lsls	r1, r3, #27
 801a922:	bf44      	itt	mi
 801a924:	2220      	movmi	r2, #32
 801a926:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a92a:	071a      	lsls	r2, r3, #28
 801a92c:	bf44      	itt	mi
 801a92e:	222b      	movmi	r2, #43	; 0x2b
 801a930:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a934:	782a      	ldrb	r2, [r5, #0]
 801a936:	2a2a      	cmp	r2, #42	; 0x2a
 801a938:	d015      	beq.n	801a966 <_svfiprintf_r+0xea>
 801a93a:	9a07      	ldr	r2, [sp, #28]
 801a93c:	462f      	mov	r7, r5
 801a93e:	2000      	movs	r0, #0
 801a940:	250a      	movs	r5, #10
 801a942:	4639      	mov	r1, r7
 801a944:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a948:	3b30      	subs	r3, #48	; 0x30
 801a94a:	2b09      	cmp	r3, #9
 801a94c:	d94d      	bls.n	801a9ea <_svfiprintf_r+0x16e>
 801a94e:	b1b8      	cbz	r0, 801a980 <_svfiprintf_r+0x104>
 801a950:	e00f      	b.n	801a972 <_svfiprintf_r+0xf6>
 801a952:	462f      	mov	r7, r5
 801a954:	e7b8      	b.n	801a8c8 <_svfiprintf_r+0x4c>
 801a956:	4a40      	ldr	r2, [pc, #256]	; (801aa58 <_svfiprintf_r+0x1dc>)
 801a958:	1a80      	subs	r0, r0, r2
 801a95a:	fa0b f000 	lsl.w	r0, fp, r0
 801a95e:	4318      	orrs	r0, r3
 801a960:	9004      	str	r0, [sp, #16]
 801a962:	463d      	mov	r5, r7
 801a964:	e7d3      	b.n	801a90e <_svfiprintf_r+0x92>
 801a966:	9a03      	ldr	r2, [sp, #12]
 801a968:	1d11      	adds	r1, r2, #4
 801a96a:	6812      	ldr	r2, [r2, #0]
 801a96c:	9103      	str	r1, [sp, #12]
 801a96e:	2a00      	cmp	r2, #0
 801a970:	db01      	blt.n	801a976 <_svfiprintf_r+0xfa>
 801a972:	9207      	str	r2, [sp, #28]
 801a974:	e004      	b.n	801a980 <_svfiprintf_r+0x104>
 801a976:	4252      	negs	r2, r2
 801a978:	f043 0302 	orr.w	r3, r3, #2
 801a97c:	9207      	str	r2, [sp, #28]
 801a97e:	9304      	str	r3, [sp, #16]
 801a980:	783b      	ldrb	r3, [r7, #0]
 801a982:	2b2e      	cmp	r3, #46	; 0x2e
 801a984:	d10c      	bne.n	801a9a0 <_svfiprintf_r+0x124>
 801a986:	787b      	ldrb	r3, [r7, #1]
 801a988:	2b2a      	cmp	r3, #42	; 0x2a
 801a98a:	d133      	bne.n	801a9f4 <_svfiprintf_r+0x178>
 801a98c:	9b03      	ldr	r3, [sp, #12]
 801a98e:	1d1a      	adds	r2, r3, #4
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	9203      	str	r2, [sp, #12]
 801a994:	2b00      	cmp	r3, #0
 801a996:	bfb8      	it	lt
 801a998:	f04f 33ff 	movlt.w	r3, #4294967295
 801a99c:	3702      	adds	r7, #2
 801a99e:	9305      	str	r3, [sp, #20]
 801a9a0:	4d2e      	ldr	r5, [pc, #184]	; (801aa5c <_svfiprintf_r+0x1e0>)
 801a9a2:	7839      	ldrb	r1, [r7, #0]
 801a9a4:	2203      	movs	r2, #3
 801a9a6:	4628      	mov	r0, r5
 801a9a8:	f7e5 fc3a 	bl	8000220 <memchr>
 801a9ac:	b138      	cbz	r0, 801a9be <_svfiprintf_r+0x142>
 801a9ae:	2340      	movs	r3, #64	; 0x40
 801a9b0:	1b40      	subs	r0, r0, r5
 801a9b2:	fa03 f000 	lsl.w	r0, r3, r0
 801a9b6:	9b04      	ldr	r3, [sp, #16]
 801a9b8:	4303      	orrs	r3, r0
 801a9ba:	3701      	adds	r7, #1
 801a9bc:	9304      	str	r3, [sp, #16]
 801a9be:	7839      	ldrb	r1, [r7, #0]
 801a9c0:	4827      	ldr	r0, [pc, #156]	; (801aa60 <_svfiprintf_r+0x1e4>)
 801a9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a9c6:	2206      	movs	r2, #6
 801a9c8:	1c7e      	adds	r6, r7, #1
 801a9ca:	f7e5 fc29 	bl	8000220 <memchr>
 801a9ce:	2800      	cmp	r0, #0
 801a9d0:	d038      	beq.n	801aa44 <_svfiprintf_r+0x1c8>
 801a9d2:	4b24      	ldr	r3, [pc, #144]	; (801aa64 <_svfiprintf_r+0x1e8>)
 801a9d4:	bb13      	cbnz	r3, 801aa1c <_svfiprintf_r+0x1a0>
 801a9d6:	9b03      	ldr	r3, [sp, #12]
 801a9d8:	3307      	adds	r3, #7
 801a9da:	f023 0307 	bic.w	r3, r3, #7
 801a9de:	3308      	adds	r3, #8
 801a9e0:	9303      	str	r3, [sp, #12]
 801a9e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a9e4:	444b      	add	r3, r9
 801a9e6:	9309      	str	r3, [sp, #36]	; 0x24
 801a9e8:	e76d      	b.n	801a8c6 <_svfiprintf_r+0x4a>
 801a9ea:	fb05 3202 	mla	r2, r5, r2, r3
 801a9ee:	2001      	movs	r0, #1
 801a9f0:	460f      	mov	r7, r1
 801a9f2:	e7a6      	b.n	801a942 <_svfiprintf_r+0xc6>
 801a9f4:	2300      	movs	r3, #0
 801a9f6:	3701      	adds	r7, #1
 801a9f8:	9305      	str	r3, [sp, #20]
 801a9fa:	4619      	mov	r1, r3
 801a9fc:	250a      	movs	r5, #10
 801a9fe:	4638      	mov	r0, r7
 801aa00:	f810 2b01 	ldrb.w	r2, [r0], #1
 801aa04:	3a30      	subs	r2, #48	; 0x30
 801aa06:	2a09      	cmp	r2, #9
 801aa08:	d903      	bls.n	801aa12 <_svfiprintf_r+0x196>
 801aa0a:	2b00      	cmp	r3, #0
 801aa0c:	d0c8      	beq.n	801a9a0 <_svfiprintf_r+0x124>
 801aa0e:	9105      	str	r1, [sp, #20]
 801aa10:	e7c6      	b.n	801a9a0 <_svfiprintf_r+0x124>
 801aa12:	fb05 2101 	mla	r1, r5, r1, r2
 801aa16:	2301      	movs	r3, #1
 801aa18:	4607      	mov	r7, r0
 801aa1a:	e7f0      	b.n	801a9fe <_svfiprintf_r+0x182>
 801aa1c:	ab03      	add	r3, sp, #12
 801aa1e:	9300      	str	r3, [sp, #0]
 801aa20:	4622      	mov	r2, r4
 801aa22:	4b11      	ldr	r3, [pc, #68]	; (801aa68 <_svfiprintf_r+0x1ec>)
 801aa24:	a904      	add	r1, sp, #16
 801aa26:	4640      	mov	r0, r8
 801aa28:	f3af 8000 	nop.w
 801aa2c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801aa30:	4681      	mov	r9, r0
 801aa32:	d1d6      	bne.n	801a9e2 <_svfiprintf_r+0x166>
 801aa34:	89a3      	ldrh	r3, [r4, #12]
 801aa36:	065b      	lsls	r3, r3, #25
 801aa38:	f53f af35 	bmi.w	801a8a6 <_svfiprintf_r+0x2a>
 801aa3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801aa3e:	b01d      	add	sp, #116	; 0x74
 801aa40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa44:	ab03      	add	r3, sp, #12
 801aa46:	9300      	str	r3, [sp, #0]
 801aa48:	4622      	mov	r2, r4
 801aa4a:	4b07      	ldr	r3, [pc, #28]	; (801aa68 <_svfiprintf_r+0x1ec>)
 801aa4c:	a904      	add	r1, sp, #16
 801aa4e:	4640      	mov	r0, r8
 801aa50:	f000 f882 	bl	801ab58 <_printf_i>
 801aa54:	e7ea      	b.n	801aa2c <_svfiprintf_r+0x1b0>
 801aa56:	bf00      	nop
 801aa58:	0801d7c8 	.word	0x0801d7c8
 801aa5c:	0801d7ce 	.word	0x0801d7ce
 801aa60:	0801d7d2 	.word	0x0801d7d2
 801aa64:	00000000 	.word	0x00000000
 801aa68:	0801a7c9 	.word	0x0801a7c9

0801aa6c <_printf_common>:
 801aa6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa70:	4691      	mov	r9, r2
 801aa72:	461f      	mov	r7, r3
 801aa74:	688a      	ldr	r2, [r1, #8]
 801aa76:	690b      	ldr	r3, [r1, #16]
 801aa78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801aa7c:	4293      	cmp	r3, r2
 801aa7e:	bfb8      	it	lt
 801aa80:	4613      	movlt	r3, r2
 801aa82:	f8c9 3000 	str.w	r3, [r9]
 801aa86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801aa8a:	4606      	mov	r6, r0
 801aa8c:	460c      	mov	r4, r1
 801aa8e:	b112      	cbz	r2, 801aa96 <_printf_common+0x2a>
 801aa90:	3301      	adds	r3, #1
 801aa92:	f8c9 3000 	str.w	r3, [r9]
 801aa96:	6823      	ldr	r3, [r4, #0]
 801aa98:	0699      	lsls	r1, r3, #26
 801aa9a:	bf42      	ittt	mi
 801aa9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801aaa0:	3302      	addmi	r3, #2
 801aaa2:	f8c9 3000 	strmi.w	r3, [r9]
 801aaa6:	6825      	ldr	r5, [r4, #0]
 801aaa8:	f015 0506 	ands.w	r5, r5, #6
 801aaac:	d107      	bne.n	801aabe <_printf_common+0x52>
 801aaae:	f104 0a19 	add.w	sl, r4, #25
 801aab2:	68e3      	ldr	r3, [r4, #12]
 801aab4:	f8d9 2000 	ldr.w	r2, [r9]
 801aab8:	1a9b      	subs	r3, r3, r2
 801aaba:	42ab      	cmp	r3, r5
 801aabc:	dc28      	bgt.n	801ab10 <_printf_common+0xa4>
 801aabe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801aac2:	6822      	ldr	r2, [r4, #0]
 801aac4:	3300      	adds	r3, #0
 801aac6:	bf18      	it	ne
 801aac8:	2301      	movne	r3, #1
 801aaca:	0692      	lsls	r2, r2, #26
 801aacc:	d42d      	bmi.n	801ab2a <_printf_common+0xbe>
 801aace:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801aad2:	4639      	mov	r1, r7
 801aad4:	4630      	mov	r0, r6
 801aad6:	47c0      	blx	r8
 801aad8:	3001      	adds	r0, #1
 801aada:	d020      	beq.n	801ab1e <_printf_common+0xb2>
 801aadc:	6823      	ldr	r3, [r4, #0]
 801aade:	68e5      	ldr	r5, [r4, #12]
 801aae0:	f8d9 2000 	ldr.w	r2, [r9]
 801aae4:	f003 0306 	and.w	r3, r3, #6
 801aae8:	2b04      	cmp	r3, #4
 801aaea:	bf08      	it	eq
 801aaec:	1aad      	subeq	r5, r5, r2
 801aaee:	68a3      	ldr	r3, [r4, #8]
 801aaf0:	6922      	ldr	r2, [r4, #16]
 801aaf2:	bf0c      	ite	eq
 801aaf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aaf8:	2500      	movne	r5, #0
 801aafa:	4293      	cmp	r3, r2
 801aafc:	bfc4      	itt	gt
 801aafe:	1a9b      	subgt	r3, r3, r2
 801ab00:	18ed      	addgt	r5, r5, r3
 801ab02:	f04f 0900 	mov.w	r9, #0
 801ab06:	341a      	adds	r4, #26
 801ab08:	454d      	cmp	r5, r9
 801ab0a:	d11a      	bne.n	801ab42 <_printf_common+0xd6>
 801ab0c:	2000      	movs	r0, #0
 801ab0e:	e008      	b.n	801ab22 <_printf_common+0xb6>
 801ab10:	2301      	movs	r3, #1
 801ab12:	4652      	mov	r2, sl
 801ab14:	4639      	mov	r1, r7
 801ab16:	4630      	mov	r0, r6
 801ab18:	47c0      	blx	r8
 801ab1a:	3001      	adds	r0, #1
 801ab1c:	d103      	bne.n	801ab26 <_printf_common+0xba>
 801ab1e:	f04f 30ff 	mov.w	r0, #4294967295
 801ab22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ab26:	3501      	adds	r5, #1
 801ab28:	e7c3      	b.n	801aab2 <_printf_common+0x46>
 801ab2a:	18e1      	adds	r1, r4, r3
 801ab2c:	1c5a      	adds	r2, r3, #1
 801ab2e:	2030      	movs	r0, #48	; 0x30
 801ab30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801ab34:	4422      	add	r2, r4
 801ab36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801ab3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801ab3e:	3302      	adds	r3, #2
 801ab40:	e7c5      	b.n	801aace <_printf_common+0x62>
 801ab42:	2301      	movs	r3, #1
 801ab44:	4622      	mov	r2, r4
 801ab46:	4639      	mov	r1, r7
 801ab48:	4630      	mov	r0, r6
 801ab4a:	47c0      	blx	r8
 801ab4c:	3001      	adds	r0, #1
 801ab4e:	d0e6      	beq.n	801ab1e <_printf_common+0xb2>
 801ab50:	f109 0901 	add.w	r9, r9, #1
 801ab54:	e7d8      	b.n	801ab08 <_printf_common+0x9c>
	...

0801ab58 <_printf_i>:
 801ab58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ab5c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801ab60:	460c      	mov	r4, r1
 801ab62:	7e09      	ldrb	r1, [r1, #24]
 801ab64:	b085      	sub	sp, #20
 801ab66:	296e      	cmp	r1, #110	; 0x6e
 801ab68:	4617      	mov	r7, r2
 801ab6a:	4606      	mov	r6, r0
 801ab6c:	4698      	mov	r8, r3
 801ab6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801ab70:	f000 80b3 	beq.w	801acda <_printf_i+0x182>
 801ab74:	d822      	bhi.n	801abbc <_printf_i+0x64>
 801ab76:	2963      	cmp	r1, #99	; 0x63
 801ab78:	d036      	beq.n	801abe8 <_printf_i+0x90>
 801ab7a:	d80a      	bhi.n	801ab92 <_printf_i+0x3a>
 801ab7c:	2900      	cmp	r1, #0
 801ab7e:	f000 80b9 	beq.w	801acf4 <_printf_i+0x19c>
 801ab82:	2958      	cmp	r1, #88	; 0x58
 801ab84:	f000 8083 	beq.w	801ac8e <_printf_i+0x136>
 801ab88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ab8c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801ab90:	e032      	b.n	801abf8 <_printf_i+0xa0>
 801ab92:	2964      	cmp	r1, #100	; 0x64
 801ab94:	d001      	beq.n	801ab9a <_printf_i+0x42>
 801ab96:	2969      	cmp	r1, #105	; 0x69
 801ab98:	d1f6      	bne.n	801ab88 <_printf_i+0x30>
 801ab9a:	6820      	ldr	r0, [r4, #0]
 801ab9c:	6813      	ldr	r3, [r2, #0]
 801ab9e:	0605      	lsls	r5, r0, #24
 801aba0:	f103 0104 	add.w	r1, r3, #4
 801aba4:	d52a      	bpl.n	801abfc <_printf_i+0xa4>
 801aba6:	681b      	ldr	r3, [r3, #0]
 801aba8:	6011      	str	r1, [r2, #0]
 801abaa:	2b00      	cmp	r3, #0
 801abac:	da03      	bge.n	801abb6 <_printf_i+0x5e>
 801abae:	222d      	movs	r2, #45	; 0x2d
 801abb0:	425b      	negs	r3, r3
 801abb2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801abb6:	486f      	ldr	r0, [pc, #444]	; (801ad74 <_printf_i+0x21c>)
 801abb8:	220a      	movs	r2, #10
 801abba:	e039      	b.n	801ac30 <_printf_i+0xd8>
 801abbc:	2973      	cmp	r1, #115	; 0x73
 801abbe:	f000 809d 	beq.w	801acfc <_printf_i+0x1a4>
 801abc2:	d808      	bhi.n	801abd6 <_printf_i+0x7e>
 801abc4:	296f      	cmp	r1, #111	; 0x6f
 801abc6:	d020      	beq.n	801ac0a <_printf_i+0xb2>
 801abc8:	2970      	cmp	r1, #112	; 0x70
 801abca:	d1dd      	bne.n	801ab88 <_printf_i+0x30>
 801abcc:	6823      	ldr	r3, [r4, #0]
 801abce:	f043 0320 	orr.w	r3, r3, #32
 801abd2:	6023      	str	r3, [r4, #0]
 801abd4:	e003      	b.n	801abde <_printf_i+0x86>
 801abd6:	2975      	cmp	r1, #117	; 0x75
 801abd8:	d017      	beq.n	801ac0a <_printf_i+0xb2>
 801abda:	2978      	cmp	r1, #120	; 0x78
 801abdc:	d1d4      	bne.n	801ab88 <_printf_i+0x30>
 801abde:	2378      	movs	r3, #120	; 0x78
 801abe0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801abe4:	4864      	ldr	r0, [pc, #400]	; (801ad78 <_printf_i+0x220>)
 801abe6:	e055      	b.n	801ac94 <_printf_i+0x13c>
 801abe8:	6813      	ldr	r3, [r2, #0]
 801abea:	1d19      	adds	r1, r3, #4
 801abec:	681b      	ldr	r3, [r3, #0]
 801abee:	6011      	str	r1, [r2, #0]
 801abf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801abf4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801abf8:	2301      	movs	r3, #1
 801abfa:	e08c      	b.n	801ad16 <_printf_i+0x1be>
 801abfc:	681b      	ldr	r3, [r3, #0]
 801abfe:	6011      	str	r1, [r2, #0]
 801ac00:	f010 0f40 	tst.w	r0, #64	; 0x40
 801ac04:	bf18      	it	ne
 801ac06:	b21b      	sxthne	r3, r3
 801ac08:	e7cf      	b.n	801abaa <_printf_i+0x52>
 801ac0a:	6813      	ldr	r3, [r2, #0]
 801ac0c:	6825      	ldr	r5, [r4, #0]
 801ac0e:	1d18      	adds	r0, r3, #4
 801ac10:	6010      	str	r0, [r2, #0]
 801ac12:	0628      	lsls	r0, r5, #24
 801ac14:	d501      	bpl.n	801ac1a <_printf_i+0xc2>
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	e002      	b.n	801ac20 <_printf_i+0xc8>
 801ac1a:	0668      	lsls	r0, r5, #25
 801ac1c:	d5fb      	bpl.n	801ac16 <_printf_i+0xbe>
 801ac1e:	881b      	ldrh	r3, [r3, #0]
 801ac20:	4854      	ldr	r0, [pc, #336]	; (801ad74 <_printf_i+0x21c>)
 801ac22:	296f      	cmp	r1, #111	; 0x6f
 801ac24:	bf14      	ite	ne
 801ac26:	220a      	movne	r2, #10
 801ac28:	2208      	moveq	r2, #8
 801ac2a:	2100      	movs	r1, #0
 801ac2c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ac30:	6865      	ldr	r5, [r4, #4]
 801ac32:	60a5      	str	r5, [r4, #8]
 801ac34:	2d00      	cmp	r5, #0
 801ac36:	f2c0 8095 	blt.w	801ad64 <_printf_i+0x20c>
 801ac3a:	6821      	ldr	r1, [r4, #0]
 801ac3c:	f021 0104 	bic.w	r1, r1, #4
 801ac40:	6021      	str	r1, [r4, #0]
 801ac42:	2b00      	cmp	r3, #0
 801ac44:	d13d      	bne.n	801acc2 <_printf_i+0x16a>
 801ac46:	2d00      	cmp	r5, #0
 801ac48:	f040 808e 	bne.w	801ad68 <_printf_i+0x210>
 801ac4c:	4665      	mov	r5, ip
 801ac4e:	2a08      	cmp	r2, #8
 801ac50:	d10b      	bne.n	801ac6a <_printf_i+0x112>
 801ac52:	6823      	ldr	r3, [r4, #0]
 801ac54:	07db      	lsls	r3, r3, #31
 801ac56:	d508      	bpl.n	801ac6a <_printf_i+0x112>
 801ac58:	6923      	ldr	r3, [r4, #16]
 801ac5a:	6862      	ldr	r2, [r4, #4]
 801ac5c:	429a      	cmp	r2, r3
 801ac5e:	bfde      	ittt	le
 801ac60:	2330      	movle	r3, #48	; 0x30
 801ac62:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ac66:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ac6a:	ebac 0305 	sub.w	r3, ip, r5
 801ac6e:	6123      	str	r3, [r4, #16]
 801ac70:	f8cd 8000 	str.w	r8, [sp]
 801ac74:	463b      	mov	r3, r7
 801ac76:	aa03      	add	r2, sp, #12
 801ac78:	4621      	mov	r1, r4
 801ac7a:	4630      	mov	r0, r6
 801ac7c:	f7ff fef6 	bl	801aa6c <_printf_common>
 801ac80:	3001      	adds	r0, #1
 801ac82:	d14d      	bne.n	801ad20 <_printf_i+0x1c8>
 801ac84:	f04f 30ff 	mov.w	r0, #4294967295
 801ac88:	b005      	add	sp, #20
 801ac8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ac8e:	4839      	ldr	r0, [pc, #228]	; (801ad74 <_printf_i+0x21c>)
 801ac90:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ac94:	6813      	ldr	r3, [r2, #0]
 801ac96:	6821      	ldr	r1, [r4, #0]
 801ac98:	1d1d      	adds	r5, r3, #4
 801ac9a:	681b      	ldr	r3, [r3, #0]
 801ac9c:	6015      	str	r5, [r2, #0]
 801ac9e:	060a      	lsls	r2, r1, #24
 801aca0:	d50b      	bpl.n	801acba <_printf_i+0x162>
 801aca2:	07ca      	lsls	r2, r1, #31
 801aca4:	bf44      	itt	mi
 801aca6:	f041 0120 	orrmi.w	r1, r1, #32
 801acaa:	6021      	strmi	r1, [r4, #0]
 801acac:	b91b      	cbnz	r3, 801acb6 <_printf_i+0x15e>
 801acae:	6822      	ldr	r2, [r4, #0]
 801acb0:	f022 0220 	bic.w	r2, r2, #32
 801acb4:	6022      	str	r2, [r4, #0]
 801acb6:	2210      	movs	r2, #16
 801acb8:	e7b7      	b.n	801ac2a <_printf_i+0xd2>
 801acba:	064d      	lsls	r5, r1, #25
 801acbc:	bf48      	it	mi
 801acbe:	b29b      	uxthmi	r3, r3
 801acc0:	e7ef      	b.n	801aca2 <_printf_i+0x14a>
 801acc2:	4665      	mov	r5, ip
 801acc4:	fbb3 f1f2 	udiv	r1, r3, r2
 801acc8:	fb02 3311 	mls	r3, r2, r1, r3
 801accc:	5cc3      	ldrb	r3, [r0, r3]
 801acce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801acd2:	460b      	mov	r3, r1
 801acd4:	2900      	cmp	r1, #0
 801acd6:	d1f5      	bne.n	801acc4 <_printf_i+0x16c>
 801acd8:	e7b9      	b.n	801ac4e <_printf_i+0xf6>
 801acda:	6813      	ldr	r3, [r2, #0]
 801acdc:	6825      	ldr	r5, [r4, #0]
 801acde:	6961      	ldr	r1, [r4, #20]
 801ace0:	1d18      	adds	r0, r3, #4
 801ace2:	6010      	str	r0, [r2, #0]
 801ace4:	0628      	lsls	r0, r5, #24
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	d501      	bpl.n	801acee <_printf_i+0x196>
 801acea:	6019      	str	r1, [r3, #0]
 801acec:	e002      	b.n	801acf4 <_printf_i+0x19c>
 801acee:	066a      	lsls	r2, r5, #25
 801acf0:	d5fb      	bpl.n	801acea <_printf_i+0x192>
 801acf2:	8019      	strh	r1, [r3, #0]
 801acf4:	2300      	movs	r3, #0
 801acf6:	6123      	str	r3, [r4, #16]
 801acf8:	4665      	mov	r5, ip
 801acfa:	e7b9      	b.n	801ac70 <_printf_i+0x118>
 801acfc:	6813      	ldr	r3, [r2, #0]
 801acfe:	1d19      	adds	r1, r3, #4
 801ad00:	6011      	str	r1, [r2, #0]
 801ad02:	681d      	ldr	r5, [r3, #0]
 801ad04:	6862      	ldr	r2, [r4, #4]
 801ad06:	2100      	movs	r1, #0
 801ad08:	4628      	mov	r0, r5
 801ad0a:	f7e5 fa89 	bl	8000220 <memchr>
 801ad0e:	b108      	cbz	r0, 801ad14 <_printf_i+0x1bc>
 801ad10:	1b40      	subs	r0, r0, r5
 801ad12:	6060      	str	r0, [r4, #4]
 801ad14:	6863      	ldr	r3, [r4, #4]
 801ad16:	6123      	str	r3, [r4, #16]
 801ad18:	2300      	movs	r3, #0
 801ad1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ad1e:	e7a7      	b.n	801ac70 <_printf_i+0x118>
 801ad20:	6923      	ldr	r3, [r4, #16]
 801ad22:	462a      	mov	r2, r5
 801ad24:	4639      	mov	r1, r7
 801ad26:	4630      	mov	r0, r6
 801ad28:	47c0      	blx	r8
 801ad2a:	3001      	adds	r0, #1
 801ad2c:	d0aa      	beq.n	801ac84 <_printf_i+0x12c>
 801ad2e:	6823      	ldr	r3, [r4, #0]
 801ad30:	079b      	lsls	r3, r3, #30
 801ad32:	d413      	bmi.n	801ad5c <_printf_i+0x204>
 801ad34:	68e0      	ldr	r0, [r4, #12]
 801ad36:	9b03      	ldr	r3, [sp, #12]
 801ad38:	4298      	cmp	r0, r3
 801ad3a:	bfb8      	it	lt
 801ad3c:	4618      	movlt	r0, r3
 801ad3e:	e7a3      	b.n	801ac88 <_printf_i+0x130>
 801ad40:	2301      	movs	r3, #1
 801ad42:	464a      	mov	r2, r9
 801ad44:	4639      	mov	r1, r7
 801ad46:	4630      	mov	r0, r6
 801ad48:	47c0      	blx	r8
 801ad4a:	3001      	adds	r0, #1
 801ad4c:	d09a      	beq.n	801ac84 <_printf_i+0x12c>
 801ad4e:	3501      	adds	r5, #1
 801ad50:	68e3      	ldr	r3, [r4, #12]
 801ad52:	9a03      	ldr	r2, [sp, #12]
 801ad54:	1a9b      	subs	r3, r3, r2
 801ad56:	42ab      	cmp	r3, r5
 801ad58:	dcf2      	bgt.n	801ad40 <_printf_i+0x1e8>
 801ad5a:	e7eb      	b.n	801ad34 <_printf_i+0x1dc>
 801ad5c:	2500      	movs	r5, #0
 801ad5e:	f104 0919 	add.w	r9, r4, #25
 801ad62:	e7f5      	b.n	801ad50 <_printf_i+0x1f8>
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d1ac      	bne.n	801acc2 <_printf_i+0x16a>
 801ad68:	7803      	ldrb	r3, [r0, #0]
 801ad6a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ad6e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801ad72:	e76c      	b.n	801ac4e <_printf_i+0xf6>
 801ad74:	0801d7d9 	.word	0x0801d7d9
 801ad78:	0801d7ea 	.word	0x0801d7ea

0801ad7c <memmove>:
 801ad7c:	4288      	cmp	r0, r1
 801ad7e:	b510      	push	{r4, lr}
 801ad80:	eb01 0302 	add.w	r3, r1, r2
 801ad84:	d807      	bhi.n	801ad96 <memmove+0x1a>
 801ad86:	1e42      	subs	r2, r0, #1
 801ad88:	4299      	cmp	r1, r3
 801ad8a:	d00a      	beq.n	801ada2 <memmove+0x26>
 801ad8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ad90:	f802 4f01 	strb.w	r4, [r2, #1]!
 801ad94:	e7f8      	b.n	801ad88 <memmove+0xc>
 801ad96:	4283      	cmp	r3, r0
 801ad98:	d9f5      	bls.n	801ad86 <memmove+0xa>
 801ad9a:	1881      	adds	r1, r0, r2
 801ad9c:	1ad2      	subs	r2, r2, r3
 801ad9e:	42d3      	cmn	r3, r2
 801ada0:	d100      	bne.n	801ada4 <memmove+0x28>
 801ada2:	bd10      	pop	{r4, pc}
 801ada4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ada8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801adac:	e7f7      	b.n	801ad9e <memmove+0x22>

0801adae <_realloc_r>:
 801adae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adb0:	4607      	mov	r7, r0
 801adb2:	4614      	mov	r4, r2
 801adb4:	460e      	mov	r6, r1
 801adb6:	b921      	cbnz	r1, 801adc2 <_realloc_r+0x14>
 801adb8:	4611      	mov	r1, r2
 801adba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801adbe:	f7ff bc29 	b.w	801a614 <_malloc_r>
 801adc2:	b922      	cbnz	r2, 801adce <_realloc_r+0x20>
 801adc4:	f7ff fbd8 	bl	801a578 <_free_r>
 801adc8:	4625      	mov	r5, r4
 801adca:	4628      	mov	r0, r5
 801adcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801adce:	f000 f814 	bl	801adfa <_malloc_usable_size_r>
 801add2:	42a0      	cmp	r0, r4
 801add4:	d20f      	bcs.n	801adf6 <_realloc_r+0x48>
 801add6:	4621      	mov	r1, r4
 801add8:	4638      	mov	r0, r7
 801adda:	f7ff fc1b 	bl	801a614 <_malloc_r>
 801adde:	4605      	mov	r5, r0
 801ade0:	2800      	cmp	r0, #0
 801ade2:	d0f2      	beq.n	801adca <_realloc_r+0x1c>
 801ade4:	4631      	mov	r1, r6
 801ade6:	4622      	mov	r2, r4
 801ade8:	f7ff fbb2 	bl	801a550 <memcpy>
 801adec:	4631      	mov	r1, r6
 801adee:	4638      	mov	r0, r7
 801adf0:	f7ff fbc2 	bl	801a578 <_free_r>
 801adf4:	e7e9      	b.n	801adca <_realloc_r+0x1c>
 801adf6:	4635      	mov	r5, r6
 801adf8:	e7e7      	b.n	801adca <_realloc_r+0x1c>

0801adfa <_malloc_usable_size_r>:
 801adfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adfe:	1f18      	subs	r0, r3, #4
 801ae00:	2b00      	cmp	r3, #0
 801ae02:	bfbc      	itt	lt
 801ae04:	580b      	ldrlt	r3, [r1, r0]
 801ae06:	18c0      	addlt	r0, r0, r3
 801ae08:	4770      	bx	lr

0801ae0a <fmaxf>:
 801ae0a:	b508      	push	{r3, lr}
 801ae0c:	ed2d 8b02 	vpush	{d8}
 801ae10:	eeb0 8a40 	vmov.f32	s16, s0
 801ae14:	eef0 8a60 	vmov.f32	s17, s1
 801ae18:	f000 f82e 	bl	801ae78 <__fpclassifyf>
 801ae1c:	b148      	cbz	r0, 801ae32 <fmaxf+0x28>
 801ae1e:	eeb0 0a68 	vmov.f32	s0, s17
 801ae22:	f000 f829 	bl	801ae78 <__fpclassifyf>
 801ae26:	b130      	cbz	r0, 801ae36 <fmaxf+0x2c>
 801ae28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ae2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae30:	dc01      	bgt.n	801ae36 <fmaxf+0x2c>
 801ae32:	eeb0 8a68 	vmov.f32	s16, s17
 801ae36:	eeb0 0a48 	vmov.f32	s0, s16
 801ae3a:	ecbd 8b02 	vpop	{d8}
 801ae3e:	bd08      	pop	{r3, pc}

0801ae40 <fminf>:
 801ae40:	b508      	push	{r3, lr}
 801ae42:	ed2d 8b02 	vpush	{d8}
 801ae46:	eeb0 8a40 	vmov.f32	s16, s0
 801ae4a:	eef0 8a60 	vmov.f32	s17, s1
 801ae4e:	f000 f813 	bl	801ae78 <__fpclassifyf>
 801ae52:	b148      	cbz	r0, 801ae68 <fminf+0x28>
 801ae54:	eeb0 0a68 	vmov.f32	s0, s17
 801ae58:	f000 f80e 	bl	801ae78 <__fpclassifyf>
 801ae5c:	b130      	cbz	r0, 801ae6c <fminf+0x2c>
 801ae5e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801ae62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae66:	d401      	bmi.n	801ae6c <fminf+0x2c>
 801ae68:	eeb0 8a68 	vmov.f32	s16, s17
 801ae6c:	eeb0 0a48 	vmov.f32	s0, s16
 801ae70:	ecbd 8b02 	vpop	{d8}
 801ae74:	bd08      	pop	{r3, pc}
	...

0801ae78 <__fpclassifyf>:
 801ae78:	ee10 3a10 	vmov	r3, s0
 801ae7c:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 801ae80:	d00d      	beq.n	801ae9e <__fpclassifyf+0x26>
 801ae82:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801ae86:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801ae8a:	d30a      	bcc.n	801aea2 <__fpclassifyf+0x2a>
 801ae8c:	4b07      	ldr	r3, [pc, #28]	; (801aeac <__fpclassifyf+0x34>)
 801ae8e:	1e42      	subs	r2, r0, #1
 801ae90:	429a      	cmp	r2, r3
 801ae92:	d908      	bls.n	801aea6 <__fpclassifyf+0x2e>
 801ae94:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 801ae98:	4258      	negs	r0, r3
 801ae9a:	4158      	adcs	r0, r3
 801ae9c:	4770      	bx	lr
 801ae9e:	2002      	movs	r0, #2
 801aea0:	4770      	bx	lr
 801aea2:	2004      	movs	r0, #4
 801aea4:	4770      	bx	lr
 801aea6:	2003      	movs	r0, #3
 801aea8:	4770      	bx	lr
 801aeaa:	bf00      	nop
 801aeac:	007ffffe 	.word	0x007ffffe

0801aeb0 <pow>:
 801aeb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aeb4:	ed2d 8b04 	vpush	{d8-d9}
 801aeb8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 801b18c <pow+0x2dc>
 801aebc:	b08d      	sub	sp, #52	; 0x34
 801aebe:	ec57 6b10 	vmov	r6, r7, d0
 801aec2:	ec55 4b11 	vmov	r4, r5, d1
 801aec6:	f000 fb73 	bl	801b5b0 <__ieee754_pow>
 801aeca:	f999 3000 	ldrsb.w	r3, [r9]
 801aece:	9300      	str	r3, [sp, #0]
 801aed0:	3301      	adds	r3, #1
 801aed2:	eeb0 8a40 	vmov.f32	s16, s0
 801aed6:	eef0 8a60 	vmov.f32	s17, s1
 801aeda:	46c8      	mov	r8, r9
 801aedc:	d05f      	beq.n	801af9e <pow+0xee>
 801aede:	4622      	mov	r2, r4
 801aee0:	462b      	mov	r3, r5
 801aee2:	4620      	mov	r0, r4
 801aee4:	4629      	mov	r1, r5
 801aee6:	f7e5 fe41 	bl	8000b6c <__aeabi_dcmpun>
 801aeea:	4683      	mov	fp, r0
 801aeec:	2800      	cmp	r0, #0
 801aeee:	d156      	bne.n	801af9e <pow+0xee>
 801aef0:	4632      	mov	r2, r6
 801aef2:	463b      	mov	r3, r7
 801aef4:	4630      	mov	r0, r6
 801aef6:	4639      	mov	r1, r7
 801aef8:	f7e5 fe38 	bl	8000b6c <__aeabi_dcmpun>
 801aefc:	9001      	str	r0, [sp, #4]
 801aefe:	b1e8      	cbz	r0, 801af3c <pow+0x8c>
 801af00:	2200      	movs	r2, #0
 801af02:	2300      	movs	r3, #0
 801af04:	4620      	mov	r0, r4
 801af06:	4629      	mov	r1, r5
 801af08:	f7e5 fdfe 	bl	8000b08 <__aeabi_dcmpeq>
 801af0c:	2800      	cmp	r0, #0
 801af0e:	d046      	beq.n	801af9e <pow+0xee>
 801af10:	2301      	movs	r3, #1
 801af12:	9302      	str	r3, [sp, #8]
 801af14:	4b96      	ldr	r3, [pc, #600]	; (801b170 <pow+0x2c0>)
 801af16:	9303      	str	r3, [sp, #12]
 801af18:	4b96      	ldr	r3, [pc, #600]	; (801b174 <pow+0x2c4>)
 801af1a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801af1e:	2200      	movs	r2, #0
 801af20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801af24:	9b00      	ldr	r3, [sp, #0]
 801af26:	2b02      	cmp	r3, #2
 801af28:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801af2c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801af30:	d033      	beq.n	801af9a <pow+0xea>
 801af32:	a802      	add	r0, sp, #8
 801af34:	f001 fbce 	bl	801c6d4 <matherr>
 801af38:	bb48      	cbnz	r0, 801af8e <pow+0xde>
 801af3a:	e05d      	b.n	801aff8 <pow+0x148>
 801af3c:	f04f 0a00 	mov.w	sl, #0
 801af40:	f04f 0b00 	mov.w	fp, #0
 801af44:	4652      	mov	r2, sl
 801af46:	465b      	mov	r3, fp
 801af48:	4630      	mov	r0, r6
 801af4a:	4639      	mov	r1, r7
 801af4c:	f7e5 fddc 	bl	8000b08 <__aeabi_dcmpeq>
 801af50:	ec4b ab19 	vmov	d9, sl, fp
 801af54:	2800      	cmp	r0, #0
 801af56:	d054      	beq.n	801b002 <pow+0x152>
 801af58:	4652      	mov	r2, sl
 801af5a:	465b      	mov	r3, fp
 801af5c:	4620      	mov	r0, r4
 801af5e:	4629      	mov	r1, r5
 801af60:	f7e5 fdd2 	bl	8000b08 <__aeabi_dcmpeq>
 801af64:	4680      	mov	r8, r0
 801af66:	b318      	cbz	r0, 801afb0 <pow+0x100>
 801af68:	2301      	movs	r3, #1
 801af6a:	9302      	str	r3, [sp, #8]
 801af6c:	4b80      	ldr	r3, [pc, #512]	; (801b170 <pow+0x2c0>)
 801af6e:	9303      	str	r3, [sp, #12]
 801af70:	9b01      	ldr	r3, [sp, #4]
 801af72:	930a      	str	r3, [sp, #40]	; 0x28
 801af74:	9b00      	ldr	r3, [sp, #0]
 801af76:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801af7a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801af7e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d0d5      	beq.n	801af32 <pow+0x82>
 801af86:	4b7b      	ldr	r3, [pc, #492]	; (801b174 <pow+0x2c4>)
 801af88:	2200      	movs	r2, #0
 801af8a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801af8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af90:	b11b      	cbz	r3, 801af9a <pow+0xea>
 801af92:	f7ff faa3 	bl	801a4dc <__errno>
 801af96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801af98:	6003      	str	r3, [r0, #0]
 801af9a:	ed9d 8b08 	vldr	d8, [sp, #32]
 801af9e:	eeb0 0a48 	vmov.f32	s0, s16
 801afa2:	eef0 0a68 	vmov.f32	s1, s17
 801afa6:	b00d      	add	sp, #52	; 0x34
 801afa8:	ecbd 8b04 	vpop	{d8-d9}
 801afac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801afb0:	ec45 4b10 	vmov	d0, r4, r5
 801afb4:	f001 fb86 	bl	801c6c4 <finite>
 801afb8:	2800      	cmp	r0, #0
 801afba:	d0f0      	beq.n	801af9e <pow+0xee>
 801afbc:	4652      	mov	r2, sl
 801afbe:	465b      	mov	r3, fp
 801afc0:	4620      	mov	r0, r4
 801afc2:	4629      	mov	r1, r5
 801afc4:	f7e5 fdaa 	bl	8000b1c <__aeabi_dcmplt>
 801afc8:	2800      	cmp	r0, #0
 801afca:	d0e8      	beq.n	801af9e <pow+0xee>
 801afcc:	2301      	movs	r3, #1
 801afce:	9302      	str	r3, [sp, #8]
 801afd0:	4b67      	ldr	r3, [pc, #412]	; (801b170 <pow+0x2c0>)
 801afd2:	9303      	str	r3, [sp, #12]
 801afd4:	f999 3000 	ldrsb.w	r3, [r9]
 801afd8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801afdc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801afe0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801afe4:	b913      	cbnz	r3, 801afec <pow+0x13c>
 801afe6:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801afea:	e7a2      	b.n	801af32 <pow+0x82>
 801afec:	4962      	ldr	r1, [pc, #392]	; (801b178 <pow+0x2c8>)
 801afee:	2000      	movs	r0, #0
 801aff0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801aff4:	2b02      	cmp	r3, #2
 801aff6:	d19c      	bne.n	801af32 <pow+0x82>
 801aff8:	f7ff fa70 	bl	801a4dc <__errno>
 801affc:	2321      	movs	r3, #33	; 0x21
 801affe:	6003      	str	r3, [r0, #0]
 801b000:	e7c5      	b.n	801af8e <pow+0xde>
 801b002:	eeb0 0a48 	vmov.f32	s0, s16
 801b006:	eef0 0a68 	vmov.f32	s1, s17
 801b00a:	f001 fb5b 	bl	801c6c4 <finite>
 801b00e:	9000      	str	r0, [sp, #0]
 801b010:	2800      	cmp	r0, #0
 801b012:	f040 8081 	bne.w	801b118 <pow+0x268>
 801b016:	ec47 6b10 	vmov	d0, r6, r7
 801b01a:	f001 fb53 	bl	801c6c4 <finite>
 801b01e:	2800      	cmp	r0, #0
 801b020:	d07a      	beq.n	801b118 <pow+0x268>
 801b022:	ec45 4b10 	vmov	d0, r4, r5
 801b026:	f001 fb4d 	bl	801c6c4 <finite>
 801b02a:	2800      	cmp	r0, #0
 801b02c:	d074      	beq.n	801b118 <pow+0x268>
 801b02e:	ec53 2b18 	vmov	r2, r3, d8
 801b032:	ee18 0a10 	vmov	r0, s16
 801b036:	4619      	mov	r1, r3
 801b038:	f7e5 fd98 	bl	8000b6c <__aeabi_dcmpun>
 801b03c:	f999 9000 	ldrsb.w	r9, [r9]
 801b040:	4b4b      	ldr	r3, [pc, #300]	; (801b170 <pow+0x2c0>)
 801b042:	b1b0      	cbz	r0, 801b072 <pow+0x1c2>
 801b044:	2201      	movs	r2, #1
 801b046:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b04a:	9b00      	ldr	r3, [sp, #0]
 801b04c:	930a      	str	r3, [sp, #40]	; 0x28
 801b04e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b052:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b056:	f1b9 0f00 	cmp.w	r9, #0
 801b05a:	d0c4      	beq.n	801afe6 <pow+0x136>
 801b05c:	4652      	mov	r2, sl
 801b05e:	465b      	mov	r3, fp
 801b060:	4650      	mov	r0, sl
 801b062:	4659      	mov	r1, fp
 801b064:	f7e5 fc12 	bl	800088c <__aeabi_ddiv>
 801b068:	f1b9 0f02 	cmp.w	r9, #2
 801b06c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801b070:	e7c1      	b.n	801aff6 <pow+0x146>
 801b072:	2203      	movs	r2, #3
 801b074:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801b078:	900a      	str	r0, [sp, #40]	; 0x28
 801b07a:	4629      	mov	r1, r5
 801b07c:	4620      	mov	r0, r4
 801b07e:	2200      	movs	r2, #0
 801b080:	4b3e      	ldr	r3, [pc, #248]	; (801b17c <pow+0x2cc>)
 801b082:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b086:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b08a:	f7e5 fad5 	bl	8000638 <__aeabi_dmul>
 801b08e:	4604      	mov	r4, r0
 801b090:	460d      	mov	r5, r1
 801b092:	f1b9 0f00 	cmp.w	r9, #0
 801b096:	d124      	bne.n	801b0e2 <pow+0x232>
 801b098:	4b39      	ldr	r3, [pc, #228]	; (801b180 <pow+0x2d0>)
 801b09a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b09e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0a2:	4630      	mov	r0, r6
 801b0a4:	4652      	mov	r2, sl
 801b0a6:	465b      	mov	r3, fp
 801b0a8:	4639      	mov	r1, r7
 801b0aa:	f7e5 fd37 	bl	8000b1c <__aeabi_dcmplt>
 801b0ae:	2800      	cmp	r0, #0
 801b0b0:	d056      	beq.n	801b160 <pow+0x2b0>
 801b0b2:	ec45 4b10 	vmov	d0, r4, r5
 801b0b6:	f001 fb17 	bl	801c6e8 <rint>
 801b0ba:	4622      	mov	r2, r4
 801b0bc:	462b      	mov	r3, r5
 801b0be:	ec51 0b10 	vmov	r0, r1, d0
 801b0c2:	f7e5 fd21 	bl	8000b08 <__aeabi_dcmpeq>
 801b0c6:	b920      	cbnz	r0, 801b0d2 <pow+0x222>
 801b0c8:	4b2e      	ldr	r3, [pc, #184]	; (801b184 <pow+0x2d4>)
 801b0ca:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b0ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0d2:	f998 3000 	ldrsb.w	r3, [r8]
 801b0d6:	2b02      	cmp	r3, #2
 801b0d8:	d142      	bne.n	801b160 <pow+0x2b0>
 801b0da:	f7ff f9ff 	bl	801a4dc <__errno>
 801b0de:	2322      	movs	r3, #34	; 0x22
 801b0e0:	e78d      	b.n	801affe <pow+0x14e>
 801b0e2:	4b29      	ldr	r3, [pc, #164]	; (801b188 <pow+0x2d8>)
 801b0e4:	2200      	movs	r2, #0
 801b0e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801b0ea:	4630      	mov	r0, r6
 801b0ec:	4652      	mov	r2, sl
 801b0ee:	465b      	mov	r3, fp
 801b0f0:	4639      	mov	r1, r7
 801b0f2:	f7e5 fd13 	bl	8000b1c <__aeabi_dcmplt>
 801b0f6:	2800      	cmp	r0, #0
 801b0f8:	d0eb      	beq.n	801b0d2 <pow+0x222>
 801b0fa:	ec45 4b10 	vmov	d0, r4, r5
 801b0fe:	f001 faf3 	bl	801c6e8 <rint>
 801b102:	4622      	mov	r2, r4
 801b104:	462b      	mov	r3, r5
 801b106:	ec51 0b10 	vmov	r0, r1, d0
 801b10a:	f7e5 fcfd 	bl	8000b08 <__aeabi_dcmpeq>
 801b10e:	2800      	cmp	r0, #0
 801b110:	d1df      	bne.n	801b0d2 <pow+0x222>
 801b112:	2200      	movs	r2, #0
 801b114:	4b18      	ldr	r3, [pc, #96]	; (801b178 <pow+0x2c8>)
 801b116:	e7da      	b.n	801b0ce <pow+0x21e>
 801b118:	2200      	movs	r2, #0
 801b11a:	2300      	movs	r3, #0
 801b11c:	ec51 0b18 	vmov	r0, r1, d8
 801b120:	f7e5 fcf2 	bl	8000b08 <__aeabi_dcmpeq>
 801b124:	2800      	cmp	r0, #0
 801b126:	f43f af3a 	beq.w	801af9e <pow+0xee>
 801b12a:	ec47 6b10 	vmov	d0, r6, r7
 801b12e:	f001 fac9 	bl	801c6c4 <finite>
 801b132:	2800      	cmp	r0, #0
 801b134:	f43f af33 	beq.w	801af9e <pow+0xee>
 801b138:	ec45 4b10 	vmov	d0, r4, r5
 801b13c:	f001 fac2 	bl	801c6c4 <finite>
 801b140:	2800      	cmp	r0, #0
 801b142:	f43f af2c 	beq.w	801af9e <pow+0xee>
 801b146:	2304      	movs	r3, #4
 801b148:	9302      	str	r3, [sp, #8]
 801b14a:	4b09      	ldr	r3, [pc, #36]	; (801b170 <pow+0x2c0>)
 801b14c:	9303      	str	r3, [sp, #12]
 801b14e:	2300      	movs	r3, #0
 801b150:	930a      	str	r3, [sp, #40]	; 0x28
 801b152:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801b156:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801b15a:	ed8d 9b08 	vstr	d9, [sp, #32]
 801b15e:	e7b8      	b.n	801b0d2 <pow+0x222>
 801b160:	a802      	add	r0, sp, #8
 801b162:	f001 fab7 	bl	801c6d4 <matherr>
 801b166:	2800      	cmp	r0, #0
 801b168:	f47f af11 	bne.w	801af8e <pow+0xde>
 801b16c:	e7b5      	b.n	801b0da <pow+0x22a>
 801b16e:	bf00      	nop
 801b170:	0801d85c 	.word	0x0801d85c
 801b174:	3ff00000 	.word	0x3ff00000
 801b178:	fff00000 	.word	0xfff00000
 801b17c:	3fe00000 	.word	0x3fe00000
 801b180:	47efffff 	.word	0x47efffff
 801b184:	c7efffff 	.word	0xc7efffff
 801b188:	7ff00000 	.word	0x7ff00000
 801b18c:	200001f8 	.word	0x200001f8

0801b190 <sqrt>:
 801b190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b194:	ed2d 8b02 	vpush	{d8}
 801b198:	b08b      	sub	sp, #44	; 0x2c
 801b19a:	ec55 4b10 	vmov	r4, r5, d0
 801b19e:	f000 ff15 	bl	801bfcc <__ieee754_sqrt>
 801b1a2:	4b26      	ldr	r3, [pc, #152]	; (801b23c <sqrt+0xac>)
 801b1a4:	eeb0 8a40 	vmov.f32	s16, s0
 801b1a8:	eef0 8a60 	vmov.f32	s17, s1
 801b1ac:	f993 6000 	ldrsb.w	r6, [r3]
 801b1b0:	1c73      	adds	r3, r6, #1
 801b1b2:	d02a      	beq.n	801b20a <sqrt+0x7a>
 801b1b4:	4622      	mov	r2, r4
 801b1b6:	462b      	mov	r3, r5
 801b1b8:	4620      	mov	r0, r4
 801b1ba:	4629      	mov	r1, r5
 801b1bc:	f7e5 fcd6 	bl	8000b6c <__aeabi_dcmpun>
 801b1c0:	4607      	mov	r7, r0
 801b1c2:	bb10      	cbnz	r0, 801b20a <sqrt+0x7a>
 801b1c4:	f04f 0800 	mov.w	r8, #0
 801b1c8:	f04f 0900 	mov.w	r9, #0
 801b1cc:	4642      	mov	r2, r8
 801b1ce:	464b      	mov	r3, r9
 801b1d0:	4620      	mov	r0, r4
 801b1d2:	4629      	mov	r1, r5
 801b1d4:	f7e5 fca2 	bl	8000b1c <__aeabi_dcmplt>
 801b1d8:	b1b8      	cbz	r0, 801b20a <sqrt+0x7a>
 801b1da:	2301      	movs	r3, #1
 801b1dc:	9300      	str	r3, [sp, #0]
 801b1de:	4b18      	ldr	r3, [pc, #96]	; (801b240 <sqrt+0xb0>)
 801b1e0:	9301      	str	r3, [sp, #4]
 801b1e2:	9708      	str	r7, [sp, #32]
 801b1e4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 801b1e8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801b1ec:	b9b6      	cbnz	r6, 801b21c <sqrt+0x8c>
 801b1ee:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801b1f2:	4668      	mov	r0, sp
 801b1f4:	f001 fa6e 	bl	801c6d4 <matherr>
 801b1f8:	b1d0      	cbz	r0, 801b230 <sqrt+0xa0>
 801b1fa:	9b08      	ldr	r3, [sp, #32]
 801b1fc:	b11b      	cbz	r3, 801b206 <sqrt+0x76>
 801b1fe:	f7ff f96d 	bl	801a4dc <__errno>
 801b202:	9b08      	ldr	r3, [sp, #32]
 801b204:	6003      	str	r3, [r0, #0]
 801b206:	ed9d 8b06 	vldr	d8, [sp, #24]
 801b20a:	eeb0 0a48 	vmov.f32	s0, s16
 801b20e:	eef0 0a68 	vmov.f32	s1, s17
 801b212:	b00b      	add	sp, #44	; 0x2c
 801b214:	ecbd 8b02 	vpop	{d8}
 801b218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b21c:	4642      	mov	r2, r8
 801b21e:	464b      	mov	r3, r9
 801b220:	4640      	mov	r0, r8
 801b222:	4649      	mov	r1, r9
 801b224:	f7e5 fb32 	bl	800088c <__aeabi_ddiv>
 801b228:	2e02      	cmp	r6, #2
 801b22a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b22e:	d1e0      	bne.n	801b1f2 <sqrt+0x62>
 801b230:	f7ff f954 	bl	801a4dc <__errno>
 801b234:	2321      	movs	r3, #33	; 0x21
 801b236:	6003      	str	r3, [r0, #0]
 801b238:	e7df      	b.n	801b1fa <sqrt+0x6a>
 801b23a:	bf00      	nop
 801b23c:	200001f8 	.word	0x200001f8
 801b240:	0801d860 	.word	0x0801d860

0801b244 <powf>:
 801b244:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 801b248:	ed2d 8b04 	vpush	{d8-d9}
 801b24c:	4ca7      	ldr	r4, [pc, #668]	; (801b4ec <powf+0x2a8>)
 801b24e:	b08a      	sub	sp, #40	; 0x28
 801b250:	eef0 8a40 	vmov.f32	s17, s0
 801b254:	eeb0 8a60 	vmov.f32	s16, s1
 801b258:	f000 ff68 	bl	801c12c <__ieee754_powf>
 801b25c:	f994 5000 	ldrsb.w	r5, [r4]
 801b260:	1c6b      	adds	r3, r5, #1
 801b262:	eeb0 9a40 	vmov.f32	s18, s0
 801b266:	4626      	mov	r6, r4
 801b268:	d05f      	beq.n	801b32a <powf+0xe6>
 801b26a:	eeb4 8a48 	vcmp.f32	s16, s16
 801b26e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b272:	d65a      	bvs.n	801b32a <powf+0xe6>
 801b274:	eef4 8a68 	vcmp.f32	s17, s17
 801b278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b27c:	d721      	bvc.n	801b2c2 <powf+0x7e>
 801b27e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b286:	d150      	bne.n	801b32a <powf+0xe6>
 801b288:	2301      	movs	r3, #1
 801b28a:	9300      	str	r3, [sp, #0]
 801b28c:	4b98      	ldr	r3, [pc, #608]	; (801b4f0 <powf+0x2ac>)
 801b28e:	9301      	str	r3, [sp, #4]
 801b290:	ee18 0a90 	vmov	r0, s17
 801b294:	2300      	movs	r3, #0
 801b296:	9308      	str	r3, [sp, #32]
 801b298:	f7e5 f976 	bl	8000588 <__aeabi_f2d>
 801b29c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b2a0:	ee18 0a10 	vmov	r0, s16
 801b2a4:	f7e5 f970 	bl	8000588 <__aeabi_f2d>
 801b2a8:	4b92      	ldr	r3, [pc, #584]	; (801b4f4 <powf+0x2b0>)
 801b2aa:	2200      	movs	r2, #0
 801b2ac:	2d02      	cmp	r5, #2
 801b2ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b2b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b2b6:	d032      	beq.n	801b31e <powf+0xda>
 801b2b8:	4668      	mov	r0, sp
 801b2ba:	f001 fa0b 	bl	801c6d4 <matherr>
 801b2be:	bb40      	cbnz	r0, 801b312 <powf+0xce>
 801b2c0:	e065      	b.n	801b38e <powf+0x14a>
 801b2c2:	eddf 9a8d 	vldr	s19, [pc, #564]	; 801b4f8 <powf+0x2b4>
 801b2c6:	eef4 8a69 	vcmp.f32	s17, s19
 801b2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2ce:	d163      	bne.n	801b398 <powf+0x154>
 801b2d0:	eeb4 8a69 	vcmp.f32	s16, s19
 801b2d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b2d8:	d12e      	bne.n	801b338 <powf+0xf4>
 801b2da:	2301      	movs	r3, #1
 801b2dc:	9300      	str	r3, [sp, #0]
 801b2de:	4b84      	ldr	r3, [pc, #528]	; (801b4f0 <powf+0x2ac>)
 801b2e0:	9301      	str	r3, [sp, #4]
 801b2e2:	ee18 0a90 	vmov	r0, s17
 801b2e6:	2300      	movs	r3, #0
 801b2e8:	9308      	str	r3, [sp, #32]
 801b2ea:	f7e5 f94d 	bl	8000588 <__aeabi_f2d>
 801b2ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b2f2:	ee18 0a10 	vmov	r0, s16
 801b2f6:	f7e5 f947 	bl	8000588 <__aeabi_f2d>
 801b2fa:	2200      	movs	r2, #0
 801b2fc:	2300      	movs	r3, #0
 801b2fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b302:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b306:	2d00      	cmp	r5, #0
 801b308:	d0d6      	beq.n	801b2b8 <powf+0x74>
 801b30a:	4b7a      	ldr	r3, [pc, #488]	; (801b4f4 <powf+0x2b0>)
 801b30c:	2200      	movs	r2, #0
 801b30e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b312:	9b08      	ldr	r3, [sp, #32]
 801b314:	b11b      	cbz	r3, 801b31e <powf+0xda>
 801b316:	f7ff f8e1 	bl	801a4dc <__errno>
 801b31a:	9b08      	ldr	r3, [sp, #32]
 801b31c:	6003      	str	r3, [r0, #0]
 801b31e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b322:	f7e5 fc59 	bl	8000bd8 <__aeabi_d2f>
 801b326:	ee09 0a10 	vmov	s18, r0
 801b32a:	eeb0 0a49 	vmov.f32	s0, s18
 801b32e:	b00a      	add	sp, #40	; 0x28
 801b330:	ecbd 8b04 	vpop	{d8-d9}
 801b334:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 801b338:	eeb0 0a48 	vmov.f32	s0, s16
 801b33c:	f001 fad5 	bl	801c8ea <finitef>
 801b340:	2800      	cmp	r0, #0
 801b342:	d0f2      	beq.n	801b32a <powf+0xe6>
 801b344:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b34c:	d5ed      	bpl.n	801b32a <powf+0xe6>
 801b34e:	2301      	movs	r3, #1
 801b350:	9300      	str	r3, [sp, #0]
 801b352:	4b67      	ldr	r3, [pc, #412]	; (801b4f0 <powf+0x2ac>)
 801b354:	9301      	str	r3, [sp, #4]
 801b356:	ee18 0a90 	vmov	r0, s17
 801b35a:	2300      	movs	r3, #0
 801b35c:	9308      	str	r3, [sp, #32]
 801b35e:	f7e5 f913 	bl	8000588 <__aeabi_f2d>
 801b362:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b366:	ee18 0a10 	vmov	r0, s16
 801b36a:	f7e5 f90d 	bl	8000588 <__aeabi_f2d>
 801b36e:	f994 3000 	ldrsb.w	r3, [r4]
 801b372:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b376:	b923      	cbnz	r3, 801b382 <powf+0x13e>
 801b378:	2200      	movs	r2, #0
 801b37a:	2300      	movs	r3, #0
 801b37c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b380:	e79a      	b.n	801b2b8 <powf+0x74>
 801b382:	495e      	ldr	r1, [pc, #376]	; (801b4fc <powf+0x2b8>)
 801b384:	2000      	movs	r0, #0
 801b386:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b38a:	2b02      	cmp	r3, #2
 801b38c:	d194      	bne.n	801b2b8 <powf+0x74>
 801b38e:	f7ff f8a5 	bl	801a4dc <__errno>
 801b392:	2321      	movs	r3, #33	; 0x21
 801b394:	6003      	str	r3, [r0, #0]
 801b396:	e7bc      	b.n	801b312 <powf+0xce>
 801b398:	f001 faa7 	bl	801c8ea <finitef>
 801b39c:	4605      	mov	r5, r0
 801b39e:	2800      	cmp	r0, #0
 801b3a0:	d173      	bne.n	801b48a <powf+0x246>
 801b3a2:	eeb0 0a68 	vmov.f32	s0, s17
 801b3a6:	f001 faa0 	bl	801c8ea <finitef>
 801b3aa:	2800      	cmp	r0, #0
 801b3ac:	d06d      	beq.n	801b48a <powf+0x246>
 801b3ae:	eeb0 0a48 	vmov.f32	s0, s16
 801b3b2:	f001 fa9a 	bl	801c8ea <finitef>
 801b3b6:	2800      	cmp	r0, #0
 801b3b8:	d067      	beq.n	801b48a <powf+0x246>
 801b3ba:	ee18 0a90 	vmov	r0, s17
 801b3be:	f7e5 f8e3 	bl	8000588 <__aeabi_f2d>
 801b3c2:	4680      	mov	r8, r0
 801b3c4:	ee18 0a10 	vmov	r0, s16
 801b3c8:	4689      	mov	r9, r1
 801b3ca:	f7e5 f8dd 	bl	8000588 <__aeabi_f2d>
 801b3ce:	eeb4 9a49 	vcmp.f32	s18, s18
 801b3d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3d6:	f994 4000 	ldrsb.w	r4, [r4]
 801b3da:	4b45      	ldr	r3, [pc, #276]	; (801b4f0 <powf+0x2ac>)
 801b3dc:	d713      	bvc.n	801b406 <powf+0x1c2>
 801b3de:	2201      	movs	r2, #1
 801b3e0:	e9cd 2300 	strd	r2, r3, [sp]
 801b3e4:	9508      	str	r5, [sp, #32]
 801b3e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b3ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b3ee:	2c00      	cmp	r4, #0
 801b3f0:	d0c2      	beq.n	801b378 <powf+0x134>
 801b3f2:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 801b3f6:	ee17 0a90 	vmov	r0, s15
 801b3fa:	f7e5 f8c5 	bl	8000588 <__aeabi_f2d>
 801b3fe:	2c02      	cmp	r4, #2
 801b400:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b404:	e7c2      	b.n	801b38c <powf+0x148>
 801b406:	2203      	movs	r2, #3
 801b408:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801b40c:	e9cd 2300 	strd	r2, r3, [sp]
 801b410:	9508      	str	r5, [sp, #32]
 801b412:	e9cd 8902 	strd	r8, r9, [sp, #8]
 801b416:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b41a:	ee28 8a27 	vmul.f32	s16, s16, s15
 801b41e:	b9fc      	cbnz	r4, 801b460 <powf+0x21c>
 801b420:	4b37      	ldr	r3, [pc, #220]	; (801b500 <powf+0x2bc>)
 801b422:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b426:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b42a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b42e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b432:	d553      	bpl.n	801b4dc <powf+0x298>
 801b434:	eeb0 0a48 	vmov.f32	s0, s16
 801b438:	f001 fa68 	bl	801c90c <rintf>
 801b43c:	eeb4 0a48 	vcmp.f32	s0, s16
 801b440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b444:	d004      	beq.n	801b450 <powf+0x20c>
 801b446:	4b2f      	ldr	r3, [pc, #188]	; (801b504 <powf+0x2c0>)
 801b448:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801b44c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b450:	f996 3000 	ldrsb.w	r3, [r6]
 801b454:	2b02      	cmp	r3, #2
 801b456:	d141      	bne.n	801b4dc <powf+0x298>
 801b458:	f7ff f840 	bl	801a4dc <__errno>
 801b45c:	2322      	movs	r3, #34	; 0x22
 801b45e:	e799      	b.n	801b394 <powf+0x150>
 801b460:	4b29      	ldr	r3, [pc, #164]	; (801b508 <powf+0x2c4>)
 801b462:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 801b466:	2200      	movs	r2, #0
 801b468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b46c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b470:	d5ee      	bpl.n	801b450 <powf+0x20c>
 801b472:	eeb0 0a48 	vmov.f32	s0, s16
 801b476:	f001 fa49 	bl	801c90c <rintf>
 801b47a:	eeb4 0a48 	vcmp.f32	s0, s16
 801b47e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b482:	d0e5      	beq.n	801b450 <powf+0x20c>
 801b484:	2200      	movs	r2, #0
 801b486:	4b1d      	ldr	r3, [pc, #116]	; (801b4fc <powf+0x2b8>)
 801b488:	e7e0      	b.n	801b44c <powf+0x208>
 801b48a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 801b48e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b492:	f47f af4a 	bne.w	801b32a <powf+0xe6>
 801b496:	eeb0 0a68 	vmov.f32	s0, s17
 801b49a:	f001 fa26 	bl	801c8ea <finitef>
 801b49e:	2800      	cmp	r0, #0
 801b4a0:	f43f af43 	beq.w	801b32a <powf+0xe6>
 801b4a4:	eeb0 0a48 	vmov.f32	s0, s16
 801b4a8:	f001 fa1f 	bl	801c8ea <finitef>
 801b4ac:	2800      	cmp	r0, #0
 801b4ae:	f43f af3c 	beq.w	801b32a <powf+0xe6>
 801b4b2:	2304      	movs	r3, #4
 801b4b4:	9300      	str	r3, [sp, #0]
 801b4b6:	4b0e      	ldr	r3, [pc, #56]	; (801b4f0 <powf+0x2ac>)
 801b4b8:	9301      	str	r3, [sp, #4]
 801b4ba:	ee18 0a90 	vmov	r0, s17
 801b4be:	2300      	movs	r3, #0
 801b4c0:	9308      	str	r3, [sp, #32]
 801b4c2:	f7e5 f861 	bl	8000588 <__aeabi_f2d>
 801b4c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b4ca:	ee18 0a10 	vmov	r0, s16
 801b4ce:	f7e5 f85b 	bl	8000588 <__aeabi_f2d>
 801b4d2:	2200      	movs	r2, #0
 801b4d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b4d8:	2300      	movs	r3, #0
 801b4da:	e7b7      	b.n	801b44c <powf+0x208>
 801b4dc:	4668      	mov	r0, sp
 801b4de:	f001 f8f9 	bl	801c6d4 <matherr>
 801b4e2:	2800      	cmp	r0, #0
 801b4e4:	f47f af15 	bne.w	801b312 <powf+0xce>
 801b4e8:	e7b6      	b.n	801b458 <powf+0x214>
 801b4ea:	bf00      	nop
 801b4ec:	200001f8 	.word	0x200001f8
 801b4f0:	0801d865 	.word	0x0801d865
 801b4f4:	3ff00000 	.word	0x3ff00000
 801b4f8:	00000000 	.word	0x00000000
 801b4fc:	fff00000 	.word	0xfff00000
 801b500:	47efffff 	.word	0x47efffff
 801b504:	c7efffff 	.word	0xc7efffff
 801b508:	7ff00000 	.word	0x7ff00000

0801b50c <sqrtf>:
 801b50c:	b510      	push	{r4, lr}
 801b50e:	ed2d 8b02 	vpush	{d8}
 801b512:	b08a      	sub	sp, #40	; 0x28
 801b514:	eeb0 8a40 	vmov.f32	s16, s0
 801b518:	f001 f8c8 	bl	801c6ac <__ieee754_sqrtf>
 801b51c:	4b21      	ldr	r3, [pc, #132]	; (801b5a4 <sqrtf+0x98>)
 801b51e:	f993 4000 	ldrsb.w	r4, [r3]
 801b522:	1c63      	adds	r3, r4, #1
 801b524:	d02c      	beq.n	801b580 <sqrtf+0x74>
 801b526:	eeb4 8a48 	vcmp.f32	s16, s16
 801b52a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b52e:	d627      	bvs.n	801b580 <sqrtf+0x74>
 801b530:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b538:	d522      	bpl.n	801b580 <sqrtf+0x74>
 801b53a:	2301      	movs	r3, #1
 801b53c:	9300      	str	r3, [sp, #0]
 801b53e:	4b1a      	ldr	r3, [pc, #104]	; (801b5a8 <sqrtf+0x9c>)
 801b540:	9301      	str	r3, [sp, #4]
 801b542:	ee18 0a10 	vmov	r0, s16
 801b546:	2300      	movs	r3, #0
 801b548:	9308      	str	r3, [sp, #32]
 801b54a:	f7e5 f81d 	bl	8000588 <__aeabi_f2d>
 801b54e:	2200      	movs	r2, #0
 801b550:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b558:	2300      	movs	r3, #0
 801b55a:	b9ac      	cbnz	r4, 801b588 <sqrtf+0x7c>
 801b55c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801b560:	4668      	mov	r0, sp
 801b562:	f001 f8b7 	bl	801c6d4 <matherr>
 801b566:	b1b8      	cbz	r0, 801b598 <sqrtf+0x8c>
 801b568:	9b08      	ldr	r3, [sp, #32]
 801b56a:	b11b      	cbz	r3, 801b574 <sqrtf+0x68>
 801b56c:	f7fe ffb6 	bl	801a4dc <__errno>
 801b570:	9b08      	ldr	r3, [sp, #32]
 801b572:	6003      	str	r3, [r0, #0]
 801b574:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b578:	f7e5 fb2e 	bl	8000bd8 <__aeabi_d2f>
 801b57c:	ee00 0a10 	vmov	s0, r0
 801b580:	b00a      	add	sp, #40	; 0x28
 801b582:	ecbd 8b02 	vpop	{d8}
 801b586:	bd10      	pop	{r4, pc}
 801b588:	4610      	mov	r0, r2
 801b58a:	4619      	mov	r1, r3
 801b58c:	f7e5 f97e 	bl	800088c <__aeabi_ddiv>
 801b590:	2c02      	cmp	r4, #2
 801b592:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801b596:	d1e3      	bne.n	801b560 <sqrtf+0x54>
 801b598:	f7fe ffa0 	bl	801a4dc <__errno>
 801b59c:	2321      	movs	r3, #33	; 0x21
 801b59e:	6003      	str	r3, [r0, #0]
 801b5a0:	e7e2      	b.n	801b568 <sqrtf+0x5c>
 801b5a2:	bf00      	nop
 801b5a4:	200001f8 	.word	0x200001f8
 801b5a8:	0801d86a 	.word	0x0801d86a
 801b5ac:	00000000 	.word	0x00000000

0801b5b0 <__ieee754_pow>:
 801b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5b4:	b091      	sub	sp, #68	; 0x44
 801b5b6:	ed8d 1b00 	vstr	d1, [sp]
 801b5ba:	e9dd 2900 	ldrd	r2, r9, [sp]
 801b5be:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801b5c2:	ea58 0302 	orrs.w	r3, r8, r2
 801b5c6:	ec57 6b10 	vmov	r6, r7, d0
 801b5ca:	f000 84be 	beq.w	801bf4a <__ieee754_pow+0x99a>
 801b5ce:	4b7a      	ldr	r3, [pc, #488]	; (801b7b8 <__ieee754_pow+0x208>)
 801b5d0:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801b5d4:	429c      	cmp	r4, r3
 801b5d6:	463d      	mov	r5, r7
 801b5d8:	ee10 aa10 	vmov	sl, s0
 801b5dc:	dc09      	bgt.n	801b5f2 <__ieee754_pow+0x42>
 801b5de:	d103      	bne.n	801b5e8 <__ieee754_pow+0x38>
 801b5e0:	b93e      	cbnz	r6, 801b5f2 <__ieee754_pow+0x42>
 801b5e2:	45a0      	cmp	r8, r4
 801b5e4:	dc0d      	bgt.n	801b602 <__ieee754_pow+0x52>
 801b5e6:	e001      	b.n	801b5ec <__ieee754_pow+0x3c>
 801b5e8:	4598      	cmp	r8, r3
 801b5ea:	dc02      	bgt.n	801b5f2 <__ieee754_pow+0x42>
 801b5ec:	4598      	cmp	r8, r3
 801b5ee:	d10e      	bne.n	801b60e <__ieee754_pow+0x5e>
 801b5f0:	b16a      	cbz	r2, 801b60e <__ieee754_pow+0x5e>
 801b5f2:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b5f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b5fa:	ea54 030a 	orrs.w	r3, r4, sl
 801b5fe:	f000 84a4 	beq.w	801bf4a <__ieee754_pow+0x99a>
 801b602:	486e      	ldr	r0, [pc, #440]	; (801b7bc <__ieee754_pow+0x20c>)
 801b604:	b011      	add	sp, #68	; 0x44
 801b606:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b60a:	f001 b865 	b.w	801c6d8 <nan>
 801b60e:	2d00      	cmp	r5, #0
 801b610:	da53      	bge.n	801b6ba <__ieee754_pow+0x10a>
 801b612:	4b6b      	ldr	r3, [pc, #428]	; (801b7c0 <__ieee754_pow+0x210>)
 801b614:	4598      	cmp	r8, r3
 801b616:	dc4d      	bgt.n	801b6b4 <__ieee754_pow+0x104>
 801b618:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 801b61c:	4598      	cmp	r8, r3
 801b61e:	dd4c      	ble.n	801b6ba <__ieee754_pow+0x10a>
 801b620:	ea4f 5328 	mov.w	r3, r8, asr #20
 801b624:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b628:	2b14      	cmp	r3, #20
 801b62a:	dd26      	ble.n	801b67a <__ieee754_pow+0xca>
 801b62c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801b630:	fa22 f103 	lsr.w	r1, r2, r3
 801b634:	fa01 f303 	lsl.w	r3, r1, r3
 801b638:	4293      	cmp	r3, r2
 801b63a:	d13e      	bne.n	801b6ba <__ieee754_pow+0x10a>
 801b63c:	f001 0101 	and.w	r1, r1, #1
 801b640:	f1c1 0b02 	rsb	fp, r1, #2
 801b644:	2a00      	cmp	r2, #0
 801b646:	d15b      	bne.n	801b700 <__ieee754_pow+0x150>
 801b648:	4b5b      	ldr	r3, [pc, #364]	; (801b7b8 <__ieee754_pow+0x208>)
 801b64a:	4598      	cmp	r8, r3
 801b64c:	d124      	bne.n	801b698 <__ieee754_pow+0xe8>
 801b64e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801b652:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801b656:	ea53 030a 	orrs.w	r3, r3, sl
 801b65a:	f000 8476 	beq.w	801bf4a <__ieee754_pow+0x99a>
 801b65e:	4b59      	ldr	r3, [pc, #356]	; (801b7c4 <__ieee754_pow+0x214>)
 801b660:	429c      	cmp	r4, r3
 801b662:	dd2d      	ble.n	801b6c0 <__ieee754_pow+0x110>
 801b664:	f1b9 0f00 	cmp.w	r9, #0
 801b668:	f280 8473 	bge.w	801bf52 <__ieee754_pow+0x9a2>
 801b66c:	2000      	movs	r0, #0
 801b66e:	2100      	movs	r1, #0
 801b670:	ec41 0b10 	vmov	d0, r0, r1
 801b674:	b011      	add	sp, #68	; 0x44
 801b676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b67a:	2a00      	cmp	r2, #0
 801b67c:	d13e      	bne.n	801b6fc <__ieee754_pow+0x14c>
 801b67e:	f1c3 0314 	rsb	r3, r3, #20
 801b682:	fa48 f103 	asr.w	r1, r8, r3
 801b686:	fa01 f303 	lsl.w	r3, r1, r3
 801b68a:	4543      	cmp	r3, r8
 801b68c:	f040 8469 	bne.w	801bf62 <__ieee754_pow+0x9b2>
 801b690:	f001 0101 	and.w	r1, r1, #1
 801b694:	f1c1 0b02 	rsb	fp, r1, #2
 801b698:	4b4b      	ldr	r3, [pc, #300]	; (801b7c8 <__ieee754_pow+0x218>)
 801b69a:	4598      	cmp	r8, r3
 801b69c:	d118      	bne.n	801b6d0 <__ieee754_pow+0x120>
 801b69e:	f1b9 0f00 	cmp.w	r9, #0
 801b6a2:	f280 845a 	bge.w	801bf5a <__ieee754_pow+0x9aa>
 801b6a6:	4948      	ldr	r1, [pc, #288]	; (801b7c8 <__ieee754_pow+0x218>)
 801b6a8:	4632      	mov	r2, r6
 801b6aa:	463b      	mov	r3, r7
 801b6ac:	2000      	movs	r0, #0
 801b6ae:	f7e5 f8ed 	bl	800088c <__aeabi_ddiv>
 801b6b2:	e7dd      	b.n	801b670 <__ieee754_pow+0xc0>
 801b6b4:	f04f 0b02 	mov.w	fp, #2
 801b6b8:	e7c4      	b.n	801b644 <__ieee754_pow+0x94>
 801b6ba:	f04f 0b00 	mov.w	fp, #0
 801b6be:	e7c1      	b.n	801b644 <__ieee754_pow+0x94>
 801b6c0:	f1b9 0f00 	cmp.w	r9, #0
 801b6c4:	dad2      	bge.n	801b66c <__ieee754_pow+0xbc>
 801b6c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 801b6ca:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801b6ce:	e7cf      	b.n	801b670 <__ieee754_pow+0xc0>
 801b6d0:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801b6d4:	d106      	bne.n	801b6e4 <__ieee754_pow+0x134>
 801b6d6:	4632      	mov	r2, r6
 801b6d8:	463b      	mov	r3, r7
 801b6da:	4610      	mov	r0, r2
 801b6dc:	4619      	mov	r1, r3
 801b6de:	f7e4 ffab 	bl	8000638 <__aeabi_dmul>
 801b6e2:	e7c5      	b.n	801b670 <__ieee754_pow+0xc0>
 801b6e4:	4b39      	ldr	r3, [pc, #228]	; (801b7cc <__ieee754_pow+0x21c>)
 801b6e6:	4599      	cmp	r9, r3
 801b6e8:	d10a      	bne.n	801b700 <__ieee754_pow+0x150>
 801b6ea:	2d00      	cmp	r5, #0
 801b6ec:	db08      	blt.n	801b700 <__ieee754_pow+0x150>
 801b6ee:	ec47 6b10 	vmov	d0, r6, r7
 801b6f2:	b011      	add	sp, #68	; 0x44
 801b6f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b6f8:	f000 bc68 	b.w	801bfcc <__ieee754_sqrt>
 801b6fc:	f04f 0b00 	mov.w	fp, #0
 801b700:	ec47 6b10 	vmov	d0, r6, r7
 801b704:	f000 ffd5 	bl	801c6b2 <fabs>
 801b708:	ec51 0b10 	vmov	r0, r1, d0
 801b70c:	f1ba 0f00 	cmp.w	sl, #0
 801b710:	d127      	bne.n	801b762 <__ieee754_pow+0x1b2>
 801b712:	b124      	cbz	r4, 801b71e <__ieee754_pow+0x16e>
 801b714:	4b2c      	ldr	r3, [pc, #176]	; (801b7c8 <__ieee754_pow+0x218>)
 801b716:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 801b71a:	429a      	cmp	r2, r3
 801b71c:	d121      	bne.n	801b762 <__ieee754_pow+0x1b2>
 801b71e:	f1b9 0f00 	cmp.w	r9, #0
 801b722:	da05      	bge.n	801b730 <__ieee754_pow+0x180>
 801b724:	4602      	mov	r2, r0
 801b726:	460b      	mov	r3, r1
 801b728:	2000      	movs	r0, #0
 801b72a:	4927      	ldr	r1, [pc, #156]	; (801b7c8 <__ieee754_pow+0x218>)
 801b72c:	f7e5 f8ae 	bl	800088c <__aeabi_ddiv>
 801b730:	2d00      	cmp	r5, #0
 801b732:	da9d      	bge.n	801b670 <__ieee754_pow+0xc0>
 801b734:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801b738:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801b73c:	ea54 030b 	orrs.w	r3, r4, fp
 801b740:	d108      	bne.n	801b754 <__ieee754_pow+0x1a4>
 801b742:	4602      	mov	r2, r0
 801b744:	460b      	mov	r3, r1
 801b746:	4610      	mov	r0, r2
 801b748:	4619      	mov	r1, r3
 801b74a:	f7e4 fdbd 	bl	80002c8 <__aeabi_dsub>
 801b74e:	4602      	mov	r2, r0
 801b750:	460b      	mov	r3, r1
 801b752:	e7ac      	b.n	801b6ae <__ieee754_pow+0xfe>
 801b754:	f1bb 0f01 	cmp.w	fp, #1
 801b758:	d18a      	bne.n	801b670 <__ieee754_pow+0xc0>
 801b75a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801b75e:	4619      	mov	r1, r3
 801b760:	e786      	b.n	801b670 <__ieee754_pow+0xc0>
 801b762:	0fed      	lsrs	r5, r5, #31
 801b764:	1e6b      	subs	r3, r5, #1
 801b766:	930d      	str	r3, [sp, #52]	; 0x34
 801b768:	ea5b 0303 	orrs.w	r3, fp, r3
 801b76c:	d102      	bne.n	801b774 <__ieee754_pow+0x1c4>
 801b76e:	4632      	mov	r2, r6
 801b770:	463b      	mov	r3, r7
 801b772:	e7e8      	b.n	801b746 <__ieee754_pow+0x196>
 801b774:	4b16      	ldr	r3, [pc, #88]	; (801b7d0 <__ieee754_pow+0x220>)
 801b776:	4598      	cmp	r8, r3
 801b778:	f340 80fe 	ble.w	801b978 <__ieee754_pow+0x3c8>
 801b77c:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801b780:	4598      	cmp	r8, r3
 801b782:	dd0a      	ble.n	801b79a <__ieee754_pow+0x1ea>
 801b784:	4b0f      	ldr	r3, [pc, #60]	; (801b7c4 <__ieee754_pow+0x214>)
 801b786:	429c      	cmp	r4, r3
 801b788:	dc0d      	bgt.n	801b7a6 <__ieee754_pow+0x1f6>
 801b78a:	f1b9 0f00 	cmp.w	r9, #0
 801b78e:	f6bf af6d 	bge.w	801b66c <__ieee754_pow+0xbc>
 801b792:	a307      	add	r3, pc, #28	; (adr r3, 801b7b0 <__ieee754_pow+0x200>)
 801b794:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b798:	e79f      	b.n	801b6da <__ieee754_pow+0x12a>
 801b79a:	4b0e      	ldr	r3, [pc, #56]	; (801b7d4 <__ieee754_pow+0x224>)
 801b79c:	429c      	cmp	r4, r3
 801b79e:	ddf4      	ble.n	801b78a <__ieee754_pow+0x1da>
 801b7a0:	4b09      	ldr	r3, [pc, #36]	; (801b7c8 <__ieee754_pow+0x218>)
 801b7a2:	429c      	cmp	r4, r3
 801b7a4:	dd18      	ble.n	801b7d8 <__ieee754_pow+0x228>
 801b7a6:	f1b9 0f00 	cmp.w	r9, #0
 801b7aa:	dcf2      	bgt.n	801b792 <__ieee754_pow+0x1e2>
 801b7ac:	e75e      	b.n	801b66c <__ieee754_pow+0xbc>
 801b7ae:	bf00      	nop
 801b7b0:	8800759c 	.word	0x8800759c
 801b7b4:	7e37e43c 	.word	0x7e37e43c
 801b7b8:	7ff00000 	.word	0x7ff00000
 801b7bc:	0801d7cd 	.word	0x0801d7cd
 801b7c0:	433fffff 	.word	0x433fffff
 801b7c4:	3fefffff 	.word	0x3fefffff
 801b7c8:	3ff00000 	.word	0x3ff00000
 801b7cc:	3fe00000 	.word	0x3fe00000
 801b7d0:	41e00000 	.word	0x41e00000
 801b7d4:	3feffffe 	.word	0x3feffffe
 801b7d8:	2200      	movs	r2, #0
 801b7da:	4b63      	ldr	r3, [pc, #396]	; (801b968 <__ieee754_pow+0x3b8>)
 801b7dc:	f7e4 fd74 	bl	80002c8 <__aeabi_dsub>
 801b7e0:	a355      	add	r3, pc, #340	; (adr r3, 801b938 <__ieee754_pow+0x388>)
 801b7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7e6:	4604      	mov	r4, r0
 801b7e8:	460d      	mov	r5, r1
 801b7ea:	f7e4 ff25 	bl	8000638 <__aeabi_dmul>
 801b7ee:	a354      	add	r3, pc, #336	; (adr r3, 801b940 <__ieee754_pow+0x390>)
 801b7f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7f4:	4606      	mov	r6, r0
 801b7f6:	460f      	mov	r7, r1
 801b7f8:	4620      	mov	r0, r4
 801b7fa:	4629      	mov	r1, r5
 801b7fc:	f7e4 ff1c 	bl	8000638 <__aeabi_dmul>
 801b800:	2200      	movs	r2, #0
 801b802:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801b806:	4b59      	ldr	r3, [pc, #356]	; (801b96c <__ieee754_pow+0x3bc>)
 801b808:	4620      	mov	r0, r4
 801b80a:	4629      	mov	r1, r5
 801b80c:	f7e4 ff14 	bl	8000638 <__aeabi_dmul>
 801b810:	4602      	mov	r2, r0
 801b812:	460b      	mov	r3, r1
 801b814:	a14c      	add	r1, pc, #304	; (adr r1, 801b948 <__ieee754_pow+0x398>)
 801b816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801b81a:	f7e4 fd55 	bl	80002c8 <__aeabi_dsub>
 801b81e:	4622      	mov	r2, r4
 801b820:	462b      	mov	r3, r5
 801b822:	f7e4 ff09 	bl	8000638 <__aeabi_dmul>
 801b826:	4602      	mov	r2, r0
 801b828:	460b      	mov	r3, r1
 801b82a:	2000      	movs	r0, #0
 801b82c:	4950      	ldr	r1, [pc, #320]	; (801b970 <__ieee754_pow+0x3c0>)
 801b82e:	f7e4 fd4b 	bl	80002c8 <__aeabi_dsub>
 801b832:	4622      	mov	r2, r4
 801b834:	462b      	mov	r3, r5
 801b836:	4680      	mov	r8, r0
 801b838:	4689      	mov	r9, r1
 801b83a:	4620      	mov	r0, r4
 801b83c:	4629      	mov	r1, r5
 801b83e:	f7e4 fefb 	bl	8000638 <__aeabi_dmul>
 801b842:	4602      	mov	r2, r0
 801b844:	460b      	mov	r3, r1
 801b846:	4640      	mov	r0, r8
 801b848:	4649      	mov	r1, r9
 801b84a:	f7e4 fef5 	bl	8000638 <__aeabi_dmul>
 801b84e:	a340      	add	r3, pc, #256	; (adr r3, 801b950 <__ieee754_pow+0x3a0>)
 801b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b854:	f7e4 fef0 	bl	8000638 <__aeabi_dmul>
 801b858:	4602      	mov	r2, r0
 801b85a:	460b      	mov	r3, r1
 801b85c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b860:	f7e4 fd32 	bl	80002c8 <__aeabi_dsub>
 801b864:	4602      	mov	r2, r0
 801b866:	460b      	mov	r3, r1
 801b868:	4604      	mov	r4, r0
 801b86a:	460d      	mov	r5, r1
 801b86c:	4630      	mov	r0, r6
 801b86e:	4639      	mov	r1, r7
 801b870:	f7e4 fd2c 	bl	80002cc <__adddf3>
 801b874:	2000      	movs	r0, #0
 801b876:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b87a:	4632      	mov	r2, r6
 801b87c:	463b      	mov	r3, r7
 801b87e:	f7e4 fd23 	bl	80002c8 <__aeabi_dsub>
 801b882:	4602      	mov	r2, r0
 801b884:	460b      	mov	r3, r1
 801b886:	4620      	mov	r0, r4
 801b888:	4629      	mov	r1, r5
 801b88a:	f7e4 fd1d 	bl	80002c8 <__aeabi_dsub>
 801b88e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801b890:	f10b 33ff 	add.w	r3, fp, #4294967295
 801b894:	4313      	orrs	r3, r2
 801b896:	4606      	mov	r6, r0
 801b898:	460f      	mov	r7, r1
 801b89a:	f040 81eb 	bne.w	801bc74 <__ieee754_pow+0x6c4>
 801b89e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801b958 <__ieee754_pow+0x3a8>
 801b8a2:	e9dd 4500 	ldrd	r4, r5, [sp]
 801b8a6:	2400      	movs	r4, #0
 801b8a8:	4622      	mov	r2, r4
 801b8aa:	462b      	mov	r3, r5
 801b8ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 801b8b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801b8b4:	f7e4 fd08 	bl	80002c8 <__aeabi_dsub>
 801b8b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b8bc:	f7e4 febc 	bl	8000638 <__aeabi_dmul>
 801b8c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b8c4:	4680      	mov	r8, r0
 801b8c6:	4689      	mov	r9, r1
 801b8c8:	4630      	mov	r0, r6
 801b8ca:	4639      	mov	r1, r7
 801b8cc:	f7e4 feb4 	bl	8000638 <__aeabi_dmul>
 801b8d0:	4602      	mov	r2, r0
 801b8d2:	460b      	mov	r3, r1
 801b8d4:	4640      	mov	r0, r8
 801b8d6:	4649      	mov	r1, r9
 801b8d8:	f7e4 fcf8 	bl	80002cc <__adddf3>
 801b8dc:	4622      	mov	r2, r4
 801b8de:	462b      	mov	r3, r5
 801b8e0:	4680      	mov	r8, r0
 801b8e2:	4689      	mov	r9, r1
 801b8e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b8e8:	f7e4 fea6 	bl	8000638 <__aeabi_dmul>
 801b8ec:	460b      	mov	r3, r1
 801b8ee:	4604      	mov	r4, r0
 801b8f0:	460d      	mov	r5, r1
 801b8f2:	4602      	mov	r2, r0
 801b8f4:	4649      	mov	r1, r9
 801b8f6:	4640      	mov	r0, r8
 801b8f8:	e9cd 4500 	strd	r4, r5, [sp]
 801b8fc:	f7e4 fce6 	bl	80002cc <__adddf3>
 801b900:	4b1c      	ldr	r3, [pc, #112]	; (801b974 <__ieee754_pow+0x3c4>)
 801b902:	4299      	cmp	r1, r3
 801b904:	4606      	mov	r6, r0
 801b906:	460f      	mov	r7, r1
 801b908:	468b      	mov	fp, r1
 801b90a:	f340 82f7 	ble.w	801befc <__ieee754_pow+0x94c>
 801b90e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801b912:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801b916:	4303      	orrs	r3, r0
 801b918:	f000 81ea 	beq.w	801bcf0 <__ieee754_pow+0x740>
 801b91c:	a310      	add	r3, pc, #64	; (adr r3, 801b960 <__ieee754_pow+0x3b0>)
 801b91e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b922:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801b926:	f7e4 fe87 	bl	8000638 <__aeabi_dmul>
 801b92a:	a30d      	add	r3, pc, #52	; (adr r3, 801b960 <__ieee754_pow+0x3b0>)
 801b92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b930:	e6d5      	b.n	801b6de <__ieee754_pow+0x12e>
 801b932:	bf00      	nop
 801b934:	f3af 8000 	nop.w
 801b938:	60000000 	.word	0x60000000
 801b93c:	3ff71547 	.word	0x3ff71547
 801b940:	f85ddf44 	.word	0xf85ddf44
 801b944:	3e54ae0b 	.word	0x3e54ae0b
 801b948:	55555555 	.word	0x55555555
 801b94c:	3fd55555 	.word	0x3fd55555
 801b950:	652b82fe 	.word	0x652b82fe
 801b954:	3ff71547 	.word	0x3ff71547
 801b958:	00000000 	.word	0x00000000
 801b95c:	bff00000 	.word	0xbff00000
 801b960:	8800759c 	.word	0x8800759c
 801b964:	7e37e43c 	.word	0x7e37e43c
 801b968:	3ff00000 	.word	0x3ff00000
 801b96c:	3fd00000 	.word	0x3fd00000
 801b970:	3fe00000 	.word	0x3fe00000
 801b974:	408fffff 	.word	0x408fffff
 801b978:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801b97c:	f04f 0200 	mov.w	r2, #0
 801b980:	da05      	bge.n	801b98e <__ieee754_pow+0x3de>
 801b982:	4bd3      	ldr	r3, [pc, #844]	; (801bcd0 <__ieee754_pow+0x720>)
 801b984:	f7e4 fe58 	bl	8000638 <__aeabi_dmul>
 801b988:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801b98c:	460c      	mov	r4, r1
 801b98e:	1523      	asrs	r3, r4, #20
 801b990:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b994:	4413      	add	r3, r2
 801b996:	9309      	str	r3, [sp, #36]	; 0x24
 801b998:	4bce      	ldr	r3, [pc, #824]	; (801bcd4 <__ieee754_pow+0x724>)
 801b99a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801b99e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801b9a2:	429c      	cmp	r4, r3
 801b9a4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 801b9a8:	dd08      	ble.n	801b9bc <__ieee754_pow+0x40c>
 801b9aa:	4bcb      	ldr	r3, [pc, #812]	; (801bcd8 <__ieee754_pow+0x728>)
 801b9ac:	429c      	cmp	r4, r3
 801b9ae:	f340 815e 	ble.w	801bc6e <__ieee754_pow+0x6be>
 801b9b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9b4:	3301      	adds	r3, #1
 801b9b6:	9309      	str	r3, [sp, #36]	; 0x24
 801b9b8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801b9bc:	f04f 0a00 	mov.w	sl, #0
 801b9c0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801b9c4:	930c      	str	r3, [sp, #48]	; 0x30
 801b9c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b9c8:	4bc4      	ldr	r3, [pc, #784]	; (801bcdc <__ieee754_pow+0x72c>)
 801b9ca:	4413      	add	r3, r2
 801b9cc:	ed93 7b00 	vldr	d7, [r3]
 801b9d0:	4629      	mov	r1, r5
 801b9d2:	ec53 2b17 	vmov	r2, r3, d7
 801b9d6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801b9da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801b9de:	f7e4 fc73 	bl	80002c8 <__aeabi_dsub>
 801b9e2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801b9e6:	4606      	mov	r6, r0
 801b9e8:	460f      	mov	r7, r1
 801b9ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801b9ee:	f7e4 fc6d 	bl	80002cc <__adddf3>
 801b9f2:	4602      	mov	r2, r0
 801b9f4:	460b      	mov	r3, r1
 801b9f6:	2000      	movs	r0, #0
 801b9f8:	49b9      	ldr	r1, [pc, #740]	; (801bce0 <__ieee754_pow+0x730>)
 801b9fa:	f7e4 ff47 	bl	800088c <__aeabi_ddiv>
 801b9fe:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801ba02:	4602      	mov	r2, r0
 801ba04:	460b      	mov	r3, r1
 801ba06:	4630      	mov	r0, r6
 801ba08:	4639      	mov	r1, r7
 801ba0a:	f7e4 fe15 	bl	8000638 <__aeabi_dmul>
 801ba0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ba12:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801ba16:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ba1a:	2300      	movs	r3, #0
 801ba1c:	9302      	str	r3, [sp, #8]
 801ba1e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801ba22:	106d      	asrs	r5, r5, #1
 801ba24:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 801ba28:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801ba2c:	2200      	movs	r2, #0
 801ba2e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801ba32:	4640      	mov	r0, r8
 801ba34:	4649      	mov	r1, r9
 801ba36:	4614      	mov	r4, r2
 801ba38:	461d      	mov	r5, r3
 801ba3a:	f7e4 fdfd 	bl	8000638 <__aeabi_dmul>
 801ba3e:	4602      	mov	r2, r0
 801ba40:	460b      	mov	r3, r1
 801ba42:	4630      	mov	r0, r6
 801ba44:	4639      	mov	r1, r7
 801ba46:	f7e4 fc3f 	bl	80002c8 <__aeabi_dsub>
 801ba4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801ba4e:	4606      	mov	r6, r0
 801ba50:	460f      	mov	r7, r1
 801ba52:	4620      	mov	r0, r4
 801ba54:	4629      	mov	r1, r5
 801ba56:	f7e4 fc37 	bl	80002c8 <__aeabi_dsub>
 801ba5a:	4602      	mov	r2, r0
 801ba5c:	460b      	mov	r3, r1
 801ba5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801ba62:	f7e4 fc31 	bl	80002c8 <__aeabi_dsub>
 801ba66:	4642      	mov	r2, r8
 801ba68:	464b      	mov	r3, r9
 801ba6a:	f7e4 fde5 	bl	8000638 <__aeabi_dmul>
 801ba6e:	4602      	mov	r2, r0
 801ba70:	460b      	mov	r3, r1
 801ba72:	4630      	mov	r0, r6
 801ba74:	4639      	mov	r1, r7
 801ba76:	f7e4 fc27 	bl	80002c8 <__aeabi_dsub>
 801ba7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 801ba7e:	f7e4 fddb 	bl	8000638 <__aeabi_dmul>
 801ba82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ba86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801ba8a:	4610      	mov	r0, r2
 801ba8c:	4619      	mov	r1, r3
 801ba8e:	f7e4 fdd3 	bl	8000638 <__aeabi_dmul>
 801ba92:	a37b      	add	r3, pc, #492	; (adr r3, 801bc80 <__ieee754_pow+0x6d0>)
 801ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ba98:	4604      	mov	r4, r0
 801ba9a:	460d      	mov	r5, r1
 801ba9c:	f7e4 fdcc 	bl	8000638 <__aeabi_dmul>
 801baa0:	a379      	add	r3, pc, #484	; (adr r3, 801bc88 <__ieee754_pow+0x6d8>)
 801baa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baa6:	f7e4 fc11 	bl	80002cc <__adddf3>
 801baaa:	4622      	mov	r2, r4
 801baac:	462b      	mov	r3, r5
 801baae:	f7e4 fdc3 	bl	8000638 <__aeabi_dmul>
 801bab2:	a377      	add	r3, pc, #476	; (adr r3, 801bc90 <__ieee754_pow+0x6e0>)
 801bab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bab8:	f7e4 fc08 	bl	80002cc <__adddf3>
 801babc:	4622      	mov	r2, r4
 801babe:	462b      	mov	r3, r5
 801bac0:	f7e4 fdba 	bl	8000638 <__aeabi_dmul>
 801bac4:	a374      	add	r3, pc, #464	; (adr r3, 801bc98 <__ieee754_pow+0x6e8>)
 801bac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baca:	f7e4 fbff 	bl	80002cc <__adddf3>
 801bace:	4622      	mov	r2, r4
 801bad0:	462b      	mov	r3, r5
 801bad2:	f7e4 fdb1 	bl	8000638 <__aeabi_dmul>
 801bad6:	a372      	add	r3, pc, #456	; (adr r3, 801bca0 <__ieee754_pow+0x6f0>)
 801bad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801badc:	f7e4 fbf6 	bl	80002cc <__adddf3>
 801bae0:	4622      	mov	r2, r4
 801bae2:	462b      	mov	r3, r5
 801bae4:	f7e4 fda8 	bl	8000638 <__aeabi_dmul>
 801bae8:	a36f      	add	r3, pc, #444	; (adr r3, 801bca8 <__ieee754_pow+0x6f8>)
 801baea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801baee:	f7e4 fbed 	bl	80002cc <__adddf3>
 801baf2:	4622      	mov	r2, r4
 801baf4:	4606      	mov	r6, r0
 801baf6:	460f      	mov	r7, r1
 801baf8:	462b      	mov	r3, r5
 801bafa:	4620      	mov	r0, r4
 801bafc:	4629      	mov	r1, r5
 801bafe:	f7e4 fd9b 	bl	8000638 <__aeabi_dmul>
 801bb02:	4602      	mov	r2, r0
 801bb04:	460b      	mov	r3, r1
 801bb06:	4630      	mov	r0, r6
 801bb08:	4639      	mov	r1, r7
 801bb0a:	f7e4 fd95 	bl	8000638 <__aeabi_dmul>
 801bb0e:	4642      	mov	r2, r8
 801bb10:	4604      	mov	r4, r0
 801bb12:	460d      	mov	r5, r1
 801bb14:	464b      	mov	r3, r9
 801bb16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb1a:	f7e4 fbd7 	bl	80002cc <__adddf3>
 801bb1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bb22:	f7e4 fd89 	bl	8000638 <__aeabi_dmul>
 801bb26:	4622      	mov	r2, r4
 801bb28:	462b      	mov	r3, r5
 801bb2a:	f7e4 fbcf 	bl	80002cc <__adddf3>
 801bb2e:	4642      	mov	r2, r8
 801bb30:	4606      	mov	r6, r0
 801bb32:	460f      	mov	r7, r1
 801bb34:	464b      	mov	r3, r9
 801bb36:	4640      	mov	r0, r8
 801bb38:	4649      	mov	r1, r9
 801bb3a:	f7e4 fd7d 	bl	8000638 <__aeabi_dmul>
 801bb3e:	2200      	movs	r2, #0
 801bb40:	4b68      	ldr	r3, [pc, #416]	; (801bce4 <__ieee754_pow+0x734>)
 801bb42:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801bb46:	f7e4 fbc1 	bl	80002cc <__adddf3>
 801bb4a:	4632      	mov	r2, r6
 801bb4c:	463b      	mov	r3, r7
 801bb4e:	f7e4 fbbd 	bl	80002cc <__adddf3>
 801bb52:	9802      	ldr	r0, [sp, #8]
 801bb54:	460d      	mov	r5, r1
 801bb56:	4604      	mov	r4, r0
 801bb58:	4602      	mov	r2, r0
 801bb5a:	460b      	mov	r3, r1
 801bb5c:	4640      	mov	r0, r8
 801bb5e:	4649      	mov	r1, r9
 801bb60:	f7e4 fd6a 	bl	8000638 <__aeabi_dmul>
 801bb64:	2200      	movs	r2, #0
 801bb66:	4680      	mov	r8, r0
 801bb68:	4689      	mov	r9, r1
 801bb6a:	4b5e      	ldr	r3, [pc, #376]	; (801bce4 <__ieee754_pow+0x734>)
 801bb6c:	4620      	mov	r0, r4
 801bb6e:	4629      	mov	r1, r5
 801bb70:	f7e4 fbaa 	bl	80002c8 <__aeabi_dsub>
 801bb74:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801bb78:	f7e4 fba6 	bl	80002c8 <__aeabi_dsub>
 801bb7c:	4602      	mov	r2, r0
 801bb7e:	460b      	mov	r3, r1
 801bb80:	4630      	mov	r0, r6
 801bb82:	4639      	mov	r1, r7
 801bb84:	f7e4 fba0 	bl	80002c8 <__aeabi_dsub>
 801bb88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bb8c:	f7e4 fd54 	bl	8000638 <__aeabi_dmul>
 801bb90:	4622      	mov	r2, r4
 801bb92:	4606      	mov	r6, r0
 801bb94:	460f      	mov	r7, r1
 801bb96:	462b      	mov	r3, r5
 801bb98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bb9c:	f7e4 fd4c 	bl	8000638 <__aeabi_dmul>
 801bba0:	4602      	mov	r2, r0
 801bba2:	460b      	mov	r3, r1
 801bba4:	4630      	mov	r0, r6
 801bba6:	4639      	mov	r1, r7
 801bba8:	f7e4 fb90 	bl	80002cc <__adddf3>
 801bbac:	4606      	mov	r6, r0
 801bbae:	460f      	mov	r7, r1
 801bbb0:	4602      	mov	r2, r0
 801bbb2:	460b      	mov	r3, r1
 801bbb4:	4640      	mov	r0, r8
 801bbb6:	4649      	mov	r1, r9
 801bbb8:	f7e4 fb88 	bl	80002cc <__adddf3>
 801bbbc:	9802      	ldr	r0, [sp, #8]
 801bbbe:	a33c      	add	r3, pc, #240	; (adr r3, 801bcb0 <__ieee754_pow+0x700>)
 801bbc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbc4:	4604      	mov	r4, r0
 801bbc6:	460d      	mov	r5, r1
 801bbc8:	f7e4 fd36 	bl	8000638 <__aeabi_dmul>
 801bbcc:	4642      	mov	r2, r8
 801bbce:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801bbd2:	464b      	mov	r3, r9
 801bbd4:	4620      	mov	r0, r4
 801bbd6:	4629      	mov	r1, r5
 801bbd8:	f7e4 fb76 	bl	80002c8 <__aeabi_dsub>
 801bbdc:	4602      	mov	r2, r0
 801bbde:	460b      	mov	r3, r1
 801bbe0:	4630      	mov	r0, r6
 801bbe2:	4639      	mov	r1, r7
 801bbe4:	f7e4 fb70 	bl	80002c8 <__aeabi_dsub>
 801bbe8:	a333      	add	r3, pc, #204	; (adr r3, 801bcb8 <__ieee754_pow+0x708>)
 801bbea:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbee:	f7e4 fd23 	bl	8000638 <__aeabi_dmul>
 801bbf2:	a333      	add	r3, pc, #204	; (adr r3, 801bcc0 <__ieee754_pow+0x710>)
 801bbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbf8:	4606      	mov	r6, r0
 801bbfa:	460f      	mov	r7, r1
 801bbfc:	4620      	mov	r0, r4
 801bbfe:	4629      	mov	r1, r5
 801bc00:	f7e4 fd1a 	bl	8000638 <__aeabi_dmul>
 801bc04:	4602      	mov	r2, r0
 801bc06:	460b      	mov	r3, r1
 801bc08:	4630      	mov	r0, r6
 801bc0a:	4639      	mov	r1, r7
 801bc0c:	f7e4 fb5e 	bl	80002cc <__adddf3>
 801bc10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc12:	4b35      	ldr	r3, [pc, #212]	; (801bce8 <__ieee754_pow+0x738>)
 801bc14:	4413      	add	r3, r2
 801bc16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bc1a:	f7e4 fb57 	bl	80002cc <__adddf3>
 801bc1e:	4604      	mov	r4, r0
 801bc20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801bc22:	460d      	mov	r5, r1
 801bc24:	f7e4 fc9e 	bl	8000564 <__aeabi_i2d>
 801bc28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801bc2a:	4b30      	ldr	r3, [pc, #192]	; (801bcec <__ieee754_pow+0x73c>)
 801bc2c:	4413      	add	r3, r2
 801bc2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 801bc32:	4606      	mov	r6, r0
 801bc34:	460f      	mov	r7, r1
 801bc36:	4622      	mov	r2, r4
 801bc38:	462b      	mov	r3, r5
 801bc3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801bc3e:	f7e4 fb45 	bl	80002cc <__adddf3>
 801bc42:	4642      	mov	r2, r8
 801bc44:	464b      	mov	r3, r9
 801bc46:	f7e4 fb41 	bl	80002cc <__adddf3>
 801bc4a:	4632      	mov	r2, r6
 801bc4c:	463b      	mov	r3, r7
 801bc4e:	f7e4 fb3d 	bl	80002cc <__adddf3>
 801bc52:	9802      	ldr	r0, [sp, #8]
 801bc54:	4632      	mov	r2, r6
 801bc56:	463b      	mov	r3, r7
 801bc58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc5c:	f7e4 fb34 	bl	80002c8 <__aeabi_dsub>
 801bc60:	4642      	mov	r2, r8
 801bc62:	464b      	mov	r3, r9
 801bc64:	f7e4 fb30 	bl	80002c8 <__aeabi_dsub>
 801bc68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801bc6c:	e607      	b.n	801b87e <__ieee754_pow+0x2ce>
 801bc6e:	f04f 0a01 	mov.w	sl, #1
 801bc72:	e6a5      	b.n	801b9c0 <__ieee754_pow+0x410>
 801bc74:	ed9f 7b14 	vldr	d7, [pc, #80]	; 801bcc8 <__ieee754_pow+0x718>
 801bc78:	e613      	b.n	801b8a2 <__ieee754_pow+0x2f2>
 801bc7a:	bf00      	nop
 801bc7c:	f3af 8000 	nop.w
 801bc80:	4a454eef 	.word	0x4a454eef
 801bc84:	3fca7e28 	.word	0x3fca7e28
 801bc88:	93c9db65 	.word	0x93c9db65
 801bc8c:	3fcd864a 	.word	0x3fcd864a
 801bc90:	a91d4101 	.word	0xa91d4101
 801bc94:	3fd17460 	.word	0x3fd17460
 801bc98:	518f264d 	.word	0x518f264d
 801bc9c:	3fd55555 	.word	0x3fd55555
 801bca0:	db6fabff 	.word	0xdb6fabff
 801bca4:	3fdb6db6 	.word	0x3fdb6db6
 801bca8:	33333303 	.word	0x33333303
 801bcac:	3fe33333 	.word	0x3fe33333
 801bcb0:	e0000000 	.word	0xe0000000
 801bcb4:	3feec709 	.word	0x3feec709
 801bcb8:	dc3a03fd 	.word	0xdc3a03fd
 801bcbc:	3feec709 	.word	0x3feec709
 801bcc0:	145b01f5 	.word	0x145b01f5
 801bcc4:	be3e2fe0 	.word	0xbe3e2fe0
 801bcc8:	00000000 	.word	0x00000000
 801bccc:	3ff00000 	.word	0x3ff00000
 801bcd0:	43400000 	.word	0x43400000
 801bcd4:	0003988e 	.word	0x0003988e
 801bcd8:	000bb679 	.word	0x000bb679
 801bcdc:	0801d870 	.word	0x0801d870
 801bce0:	3ff00000 	.word	0x3ff00000
 801bce4:	40080000 	.word	0x40080000
 801bce8:	0801d890 	.word	0x0801d890
 801bcec:	0801d880 	.word	0x0801d880
 801bcf0:	a3b4      	add	r3, pc, #720	; (adr r3, 801bfc4 <__ieee754_pow+0xa14>)
 801bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bcf6:	4640      	mov	r0, r8
 801bcf8:	4649      	mov	r1, r9
 801bcfa:	f7e4 fae7 	bl	80002cc <__adddf3>
 801bcfe:	4622      	mov	r2, r4
 801bd00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bd04:	462b      	mov	r3, r5
 801bd06:	4630      	mov	r0, r6
 801bd08:	4639      	mov	r1, r7
 801bd0a:	f7e4 fadd 	bl	80002c8 <__aeabi_dsub>
 801bd0e:	4602      	mov	r2, r0
 801bd10:	460b      	mov	r3, r1
 801bd12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bd16:	f7e4 ff1f 	bl	8000b58 <__aeabi_dcmpgt>
 801bd1a:	2800      	cmp	r0, #0
 801bd1c:	f47f adfe 	bne.w	801b91c <__ieee754_pow+0x36c>
 801bd20:	4aa3      	ldr	r2, [pc, #652]	; (801bfb0 <__ieee754_pow+0xa00>)
 801bd22:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801bd26:	4293      	cmp	r3, r2
 801bd28:	f340 810a 	ble.w	801bf40 <__ieee754_pow+0x990>
 801bd2c:	151b      	asrs	r3, r3, #20
 801bd2e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801bd32:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801bd36:	fa4a f303 	asr.w	r3, sl, r3
 801bd3a:	445b      	add	r3, fp
 801bd3c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801bd40:	4e9c      	ldr	r6, [pc, #624]	; (801bfb4 <__ieee754_pow+0xa04>)
 801bd42:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801bd46:	4116      	asrs	r6, r2
 801bd48:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 801bd4c:	2000      	movs	r0, #0
 801bd4e:	ea23 0106 	bic.w	r1, r3, r6
 801bd52:	f1c2 0214 	rsb	r2, r2, #20
 801bd56:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801bd5a:	fa4a fa02 	asr.w	sl, sl, r2
 801bd5e:	f1bb 0f00 	cmp.w	fp, #0
 801bd62:	4602      	mov	r2, r0
 801bd64:	460b      	mov	r3, r1
 801bd66:	4620      	mov	r0, r4
 801bd68:	4629      	mov	r1, r5
 801bd6a:	bfb8      	it	lt
 801bd6c:	f1ca 0a00 	rsblt	sl, sl, #0
 801bd70:	f7e4 faaa 	bl	80002c8 <__aeabi_dsub>
 801bd74:	e9cd 0100 	strd	r0, r1, [sp]
 801bd78:	4642      	mov	r2, r8
 801bd7a:	464b      	mov	r3, r9
 801bd7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bd80:	f7e4 faa4 	bl	80002cc <__adddf3>
 801bd84:	2000      	movs	r0, #0
 801bd86:	a378      	add	r3, pc, #480	; (adr r3, 801bf68 <__ieee754_pow+0x9b8>)
 801bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd8c:	4604      	mov	r4, r0
 801bd8e:	460d      	mov	r5, r1
 801bd90:	f7e4 fc52 	bl	8000638 <__aeabi_dmul>
 801bd94:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bd98:	4606      	mov	r6, r0
 801bd9a:	460f      	mov	r7, r1
 801bd9c:	4620      	mov	r0, r4
 801bd9e:	4629      	mov	r1, r5
 801bda0:	f7e4 fa92 	bl	80002c8 <__aeabi_dsub>
 801bda4:	4602      	mov	r2, r0
 801bda6:	460b      	mov	r3, r1
 801bda8:	4640      	mov	r0, r8
 801bdaa:	4649      	mov	r1, r9
 801bdac:	f7e4 fa8c 	bl	80002c8 <__aeabi_dsub>
 801bdb0:	a36f      	add	r3, pc, #444	; (adr r3, 801bf70 <__ieee754_pow+0x9c0>)
 801bdb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdb6:	f7e4 fc3f 	bl	8000638 <__aeabi_dmul>
 801bdba:	a36f      	add	r3, pc, #444	; (adr r3, 801bf78 <__ieee754_pow+0x9c8>)
 801bdbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bdc0:	4680      	mov	r8, r0
 801bdc2:	4689      	mov	r9, r1
 801bdc4:	4620      	mov	r0, r4
 801bdc6:	4629      	mov	r1, r5
 801bdc8:	f7e4 fc36 	bl	8000638 <__aeabi_dmul>
 801bdcc:	4602      	mov	r2, r0
 801bdce:	460b      	mov	r3, r1
 801bdd0:	4640      	mov	r0, r8
 801bdd2:	4649      	mov	r1, r9
 801bdd4:	f7e4 fa7a 	bl	80002cc <__adddf3>
 801bdd8:	4604      	mov	r4, r0
 801bdda:	460d      	mov	r5, r1
 801bddc:	4602      	mov	r2, r0
 801bdde:	460b      	mov	r3, r1
 801bde0:	4630      	mov	r0, r6
 801bde2:	4639      	mov	r1, r7
 801bde4:	f7e4 fa72 	bl	80002cc <__adddf3>
 801bde8:	4632      	mov	r2, r6
 801bdea:	463b      	mov	r3, r7
 801bdec:	4680      	mov	r8, r0
 801bdee:	4689      	mov	r9, r1
 801bdf0:	f7e4 fa6a 	bl	80002c8 <__aeabi_dsub>
 801bdf4:	4602      	mov	r2, r0
 801bdf6:	460b      	mov	r3, r1
 801bdf8:	4620      	mov	r0, r4
 801bdfa:	4629      	mov	r1, r5
 801bdfc:	f7e4 fa64 	bl	80002c8 <__aeabi_dsub>
 801be00:	4642      	mov	r2, r8
 801be02:	4606      	mov	r6, r0
 801be04:	460f      	mov	r7, r1
 801be06:	464b      	mov	r3, r9
 801be08:	4640      	mov	r0, r8
 801be0a:	4649      	mov	r1, r9
 801be0c:	f7e4 fc14 	bl	8000638 <__aeabi_dmul>
 801be10:	a35b      	add	r3, pc, #364	; (adr r3, 801bf80 <__ieee754_pow+0x9d0>)
 801be12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be16:	4604      	mov	r4, r0
 801be18:	460d      	mov	r5, r1
 801be1a:	f7e4 fc0d 	bl	8000638 <__aeabi_dmul>
 801be1e:	a35a      	add	r3, pc, #360	; (adr r3, 801bf88 <__ieee754_pow+0x9d8>)
 801be20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be24:	f7e4 fa50 	bl	80002c8 <__aeabi_dsub>
 801be28:	4622      	mov	r2, r4
 801be2a:	462b      	mov	r3, r5
 801be2c:	f7e4 fc04 	bl	8000638 <__aeabi_dmul>
 801be30:	a357      	add	r3, pc, #348	; (adr r3, 801bf90 <__ieee754_pow+0x9e0>)
 801be32:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be36:	f7e4 fa49 	bl	80002cc <__adddf3>
 801be3a:	4622      	mov	r2, r4
 801be3c:	462b      	mov	r3, r5
 801be3e:	f7e4 fbfb 	bl	8000638 <__aeabi_dmul>
 801be42:	a355      	add	r3, pc, #340	; (adr r3, 801bf98 <__ieee754_pow+0x9e8>)
 801be44:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be48:	f7e4 fa3e 	bl	80002c8 <__aeabi_dsub>
 801be4c:	4622      	mov	r2, r4
 801be4e:	462b      	mov	r3, r5
 801be50:	f7e4 fbf2 	bl	8000638 <__aeabi_dmul>
 801be54:	a352      	add	r3, pc, #328	; (adr r3, 801bfa0 <__ieee754_pow+0x9f0>)
 801be56:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be5a:	f7e4 fa37 	bl	80002cc <__adddf3>
 801be5e:	4622      	mov	r2, r4
 801be60:	462b      	mov	r3, r5
 801be62:	f7e4 fbe9 	bl	8000638 <__aeabi_dmul>
 801be66:	4602      	mov	r2, r0
 801be68:	460b      	mov	r3, r1
 801be6a:	4640      	mov	r0, r8
 801be6c:	4649      	mov	r1, r9
 801be6e:	f7e4 fa2b 	bl	80002c8 <__aeabi_dsub>
 801be72:	4604      	mov	r4, r0
 801be74:	460d      	mov	r5, r1
 801be76:	4602      	mov	r2, r0
 801be78:	460b      	mov	r3, r1
 801be7a:	4640      	mov	r0, r8
 801be7c:	4649      	mov	r1, r9
 801be7e:	f7e4 fbdb 	bl	8000638 <__aeabi_dmul>
 801be82:	2200      	movs	r2, #0
 801be84:	e9cd 0100 	strd	r0, r1, [sp]
 801be88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801be8c:	4620      	mov	r0, r4
 801be8e:	4629      	mov	r1, r5
 801be90:	f7e4 fa1a 	bl	80002c8 <__aeabi_dsub>
 801be94:	4602      	mov	r2, r0
 801be96:	460b      	mov	r3, r1
 801be98:	e9dd 0100 	ldrd	r0, r1, [sp]
 801be9c:	f7e4 fcf6 	bl	800088c <__aeabi_ddiv>
 801bea0:	4632      	mov	r2, r6
 801bea2:	4604      	mov	r4, r0
 801bea4:	460d      	mov	r5, r1
 801bea6:	463b      	mov	r3, r7
 801bea8:	4640      	mov	r0, r8
 801beaa:	4649      	mov	r1, r9
 801beac:	f7e4 fbc4 	bl	8000638 <__aeabi_dmul>
 801beb0:	4632      	mov	r2, r6
 801beb2:	463b      	mov	r3, r7
 801beb4:	f7e4 fa0a 	bl	80002cc <__adddf3>
 801beb8:	4602      	mov	r2, r0
 801beba:	460b      	mov	r3, r1
 801bebc:	4620      	mov	r0, r4
 801bebe:	4629      	mov	r1, r5
 801bec0:	f7e4 fa02 	bl	80002c8 <__aeabi_dsub>
 801bec4:	4642      	mov	r2, r8
 801bec6:	464b      	mov	r3, r9
 801bec8:	f7e4 f9fe 	bl	80002c8 <__aeabi_dsub>
 801becc:	4602      	mov	r2, r0
 801bece:	460b      	mov	r3, r1
 801bed0:	2000      	movs	r0, #0
 801bed2:	4939      	ldr	r1, [pc, #228]	; (801bfb8 <__ieee754_pow+0xa08>)
 801bed4:	f7e4 f9f8 	bl	80002c8 <__aeabi_dsub>
 801bed8:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 801bedc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801bee0:	4602      	mov	r2, r0
 801bee2:	460b      	mov	r3, r1
 801bee4:	da2f      	bge.n	801bf46 <__ieee754_pow+0x996>
 801bee6:	4650      	mov	r0, sl
 801bee8:	ec43 2b10 	vmov	d0, r2, r3
 801beec:	f000 fc80 	bl	801c7f0 <scalbn>
 801bef0:	ec51 0b10 	vmov	r0, r1, d0
 801bef4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801bef8:	f7ff bbf1 	b.w	801b6de <__ieee754_pow+0x12e>
 801befc:	4b2f      	ldr	r3, [pc, #188]	; (801bfbc <__ieee754_pow+0xa0c>)
 801befe:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801bf02:	429e      	cmp	r6, r3
 801bf04:	f77f af0c 	ble.w	801bd20 <__ieee754_pow+0x770>
 801bf08:	4b2d      	ldr	r3, [pc, #180]	; (801bfc0 <__ieee754_pow+0xa10>)
 801bf0a:	440b      	add	r3, r1
 801bf0c:	4303      	orrs	r3, r0
 801bf0e:	d00b      	beq.n	801bf28 <__ieee754_pow+0x978>
 801bf10:	a325      	add	r3, pc, #148	; (adr r3, 801bfa8 <__ieee754_pow+0x9f8>)
 801bf12:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801bf1a:	f7e4 fb8d 	bl	8000638 <__aeabi_dmul>
 801bf1e:	a322      	add	r3, pc, #136	; (adr r3, 801bfa8 <__ieee754_pow+0x9f8>)
 801bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bf24:	f7ff bbdb 	b.w	801b6de <__ieee754_pow+0x12e>
 801bf28:	4622      	mov	r2, r4
 801bf2a:	462b      	mov	r3, r5
 801bf2c:	f7e4 f9cc 	bl	80002c8 <__aeabi_dsub>
 801bf30:	4642      	mov	r2, r8
 801bf32:	464b      	mov	r3, r9
 801bf34:	f7e4 fe06 	bl	8000b44 <__aeabi_dcmpge>
 801bf38:	2800      	cmp	r0, #0
 801bf3a:	f43f aef1 	beq.w	801bd20 <__ieee754_pow+0x770>
 801bf3e:	e7e7      	b.n	801bf10 <__ieee754_pow+0x960>
 801bf40:	f04f 0a00 	mov.w	sl, #0
 801bf44:	e718      	b.n	801bd78 <__ieee754_pow+0x7c8>
 801bf46:	4621      	mov	r1, r4
 801bf48:	e7d4      	b.n	801bef4 <__ieee754_pow+0x944>
 801bf4a:	2000      	movs	r0, #0
 801bf4c:	491a      	ldr	r1, [pc, #104]	; (801bfb8 <__ieee754_pow+0xa08>)
 801bf4e:	f7ff bb8f 	b.w	801b670 <__ieee754_pow+0xc0>
 801bf52:	e9dd 0100 	ldrd	r0, r1, [sp]
 801bf56:	f7ff bb8b 	b.w	801b670 <__ieee754_pow+0xc0>
 801bf5a:	4630      	mov	r0, r6
 801bf5c:	4639      	mov	r1, r7
 801bf5e:	f7ff bb87 	b.w	801b670 <__ieee754_pow+0xc0>
 801bf62:	4693      	mov	fp, r2
 801bf64:	f7ff bb98 	b.w	801b698 <__ieee754_pow+0xe8>
 801bf68:	00000000 	.word	0x00000000
 801bf6c:	3fe62e43 	.word	0x3fe62e43
 801bf70:	fefa39ef 	.word	0xfefa39ef
 801bf74:	3fe62e42 	.word	0x3fe62e42
 801bf78:	0ca86c39 	.word	0x0ca86c39
 801bf7c:	be205c61 	.word	0xbe205c61
 801bf80:	72bea4d0 	.word	0x72bea4d0
 801bf84:	3e663769 	.word	0x3e663769
 801bf88:	c5d26bf1 	.word	0xc5d26bf1
 801bf8c:	3ebbbd41 	.word	0x3ebbbd41
 801bf90:	af25de2c 	.word	0xaf25de2c
 801bf94:	3f11566a 	.word	0x3f11566a
 801bf98:	16bebd93 	.word	0x16bebd93
 801bf9c:	3f66c16c 	.word	0x3f66c16c
 801bfa0:	5555553e 	.word	0x5555553e
 801bfa4:	3fc55555 	.word	0x3fc55555
 801bfa8:	c2f8f359 	.word	0xc2f8f359
 801bfac:	01a56e1f 	.word	0x01a56e1f
 801bfb0:	3fe00000 	.word	0x3fe00000
 801bfb4:	000fffff 	.word	0x000fffff
 801bfb8:	3ff00000 	.word	0x3ff00000
 801bfbc:	4090cbff 	.word	0x4090cbff
 801bfc0:	3f6f3400 	.word	0x3f6f3400
 801bfc4:	652b82fe 	.word	0x652b82fe
 801bfc8:	3c971547 	.word	0x3c971547

0801bfcc <__ieee754_sqrt>:
 801bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfd0:	4955      	ldr	r1, [pc, #340]	; (801c128 <__ieee754_sqrt+0x15c>)
 801bfd2:	ec55 4b10 	vmov	r4, r5, d0
 801bfd6:	43a9      	bics	r1, r5
 801bfd8:	462b      	mov	r3, r5
 801bfda:	462a      	mov	r2, r5
 801bfdc:	d112      	bne.n	801c004 <__ieee754_sqrt+0x38>
 801bfde:	ee10 2a10 	vmov	r2, s0
 801bfe2:	ee10 0a10 	vmov	r0, s0
 801bfe6:	4629      	mov	r1, r5
 801bfe8:	f7e4 fb26 	bl	8000638 <__aeabi_dmul>
 801bfec:	4602      	mov	r2, r0
 801bfee:	460b      	mov	r3, r1
 801bff0:	4620      	mov	r0, r4
 801bff2:	4629      	mov	r1, r5
 801bff4:	f7e4 f96a 	bl	80002cc <__adddf3>
 801bff8:	4604      	mov	r4, r0
 801bffa:	460d      	mov	r5, r1
 801bffc:	ec45 4b10 	vmov	d0, r4, r5
 801c000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c004:	2d00      	cmp	r5, #0
 801c006:	ee10 0a10 	vmov	r0, s0
 801c00a:	4621      	mov	r1, r4
 801c00c:	dc0f      	bgt.n	801c02e <__ieee754_sqrt+0x62>
 801c00e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801c012:	4330      	orrs	r0, r6
 801c014:	d0f2      	beq.n	801bffc <__ieee754_sqrt+0x30>
 801c016:	b155      	cbz	r5, 801c02e <__ieee754_sqrt+0x62>
 801c018:	ee10 2a10 	vmov	r2, s0
 801c01c:	4620      	mov	r0, r4
 801c01e:	4629      	mov	r1, r5
 801c020:	f7e4 f952 	bl	80002c8 <__aeabi_dsub>
 801c024:	4602      	mov	r2, r0
 801c026:	460b      	mov	r3, r1
 801c028:	f7e4 fc30 	bl	800088c <__aeabi_ddiv>
 801c02c:	e7e4      	b.n	801bff8 <__ieee754_sqrt+0x2c>
 801c02e:	151b      	asrs	r3, r3, #20
 801c030:	d073      	beq.n	801c11a <__ieee754_sqrt+0x14e>
 801c032:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801c036:	07dd      	lsls	r5, r3, #31
 801c038:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801c03c:	bf48      	it	mi
 801c03e:	0fc8      	lsrmi	r0, r1, #31
 801c040:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801c044:	bf44      	itt	mi
 801c046:	0049      	lslmi	r1, r1, #1
 801c048:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 801c04c:	2500      	movs	r5, #0
 801c04e:	1058      	asrs	r0, r3, #1
 801c050:	0fcb      	lsrs	r3, r1, #31
 801c052:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 801c056:	0049      	lsls	r1, r1, #1
 801c058:	2316      	movs	r3, #22
 801c05a:	462c      	mov	r4, r5
 801c05c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801c060:	19a7      	adds	r7, r4, r6
 801c062:	4297      	cmp	r7, r2
 801c064:	bfde      	ittt	le
 801c066:	19bc      	addle	r4, r7, r6
 801c068:	1bd2      	suble	r2, r2, r7
 801c06a:	19ad      	addle	r5, r5, r6
 801c06c:	0fcf      	lsrs	r7, r1, #31
 801c06e:	3b01      	subs	r3, #1
 801c070:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 801c074:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c078:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c07c:	d1f0      	bne.n	801c060 <__ieee754_sqrt+0x94>
 801c07e:	f04f 0c20 	mov.w	ip, #32
 801c082:	469e      	mov	lr, r3
 801c084:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801c088:	42a2      	cmp	r2, r4
 801c08a:	eb06 070e 	add.w	r7, r6, lr
 801c08e:	dc02      	bgt.n	801c096 <__ieee754_sqrt+0xca>
 801c090:	d112      	bne.n	801c0b8 <__ieee754_sqrt+0xec>
 801c092:	428f      	cmp	r7, r1
 801c094:	d810      	bhi.n	801c0b8 <__ieee754_sqrt+0xec>
 801c096:	2f00      	cmp	r7, #0
 801c098:	eb07 0e06 	add.w	lr, r7, r6
 801c09c:	da42      	bge.n	801c124 <__ieee754_sqrt+0x158>
 801c09e:	f1be 0f00 	cmp.w	lr, #0
 801c0a2:	db3f      	blt.n	801c124 <__ieee754_sqrt+0x158>
 801c0a4:	f104 0801 	add.w	r8, r4, #1
 801c0a8:	1b12      	subs	r2, r2, r4
 801c0aa:	428f      	cmp	r7, r1
 801c0ac:	bf88      	it	hi
 801c0ae:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801c0b2:	1bc9      	subs	r1, r1, r7
 801c0b4:	4433      	add	r3, r6
 801c0b6:	4644      	mov	r4, r8
 801c0b8:	0052      	lsls	r2, r2, #1
 801c0ba:	f1bc 0c01 	subs.w	ip, ip, #1
 801c0be:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801c0c2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801c0c6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 801c0ca:	d1dd      	bne.n	801c088 <__ieee754_sqrt+0xbc>
 801c0cc:	430a      	orrs	r2, r1
 801c0ce:	d006      	beq.n	801c0de <__ieee754_sqrt+0x112>
 801c0d0:	1c5c      	adds	r4, r3, #1
 801c0d2:	bf13      	iteet	ne
 801c0d4:	3301      	addne	r3, #1
 801c0d6:	3501      	addeq	r5, #1
 801c0d8:	4663      	moveq	r3, ip
 801c0da:	f023 0301 	bicne.w	r3, r3, #1
 801c0de:	106a      	asrs	r2, r5, #1
 801c0e0:	085b      	lsrs	r3, r3, #1
 801c0e2:	07e9      	lsls	r1, r5, #31
 801c0e4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801c0e8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 801c0ec:	bf48      	it	mi
 801c0ee:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801c0f2:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801c0f6:	461c      	mov	r4, r3
 801c0f8:	e780      	b.n	801bffc <__ieee754_sqrt+0x30>
 801c0fa:	0aca      	lsrs	r2, r1, #11
 801c0fc:	3815      	subs	r0, #21
 801c0fe:	0549      	lsls	r1, r1, #21
 801c100:	2a00      	cmp	r2, #0
 801c102:	d0fa      	beq.n	801c0fa <__ieee754_sqrt+0x12e>
 801c104:	02d6      	lsls	r6, r2, #11
 801c106:	d50a      	bpl.n	801c11e <__ieee754_sqrt+0x152>
 801c108:	f1c3 0420 	rsb	r4, r3, #32
 801c10c:	fa21 f404 	lsr.w	r4, r1, r4
 801c110:	1e5d      	subs	r5, r3, #1
 801c112:	4099      	lsls	r1, r3
 801c114:	4322      	orrs	r2, r4
 801c116:	1b43      	subs	r3, r0, r5
 801c118:	e78b      	b.n	801c032 <__ieee754_sqrt+0x66>
 801c11a:	4618      	mov	r0, r3
 801c11c:	e7f0      	b.n	801c100 <__ieee754_sqrt+0x134>
 801c11e:	0052      	lsls	r2, r2, #1
 801c120:	3301      	adds	r3, #1
 801c122:	e7ef      	b.n	801c104 <__ieee754_sqrt+0x138>
 801c124:	46a0      	mov	r8, r4
 801c126:	e7bf      	b.n	801c0a8 <__ieee754_sqrt+0xdc>
 801c128:	7ff00000 	.word	0x7ff00000

0801c12c <__ieee754_powf>:
 801c12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c130:	ee10 5a90 	vmov	r5, s1
 801c134:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 801c138:	ed2d 8b02 	vpush	{d8}
 801c13c:	eeb0 8a40 	vmov.f32	s16, s0
 801c140:	eef0 8a60 	vmov.f32	s17, s1
 801c144:	f000 8293 	beq.w	801c66e <__ieee754_powf+0x542>
 801c148:	ee10 8a10 	vmov	r8, s0
 801c14c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 801c150:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801c154:	dc06      	bgt.n	801c164 <__ieee754_powf+0x38>
 801c156:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c15a:	dd0a      	ble.n	801c172 <__ieee754_powf+0x46>
 801c15c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c160:	f000 8285 	beq.w	801c66e <__ieee754_powf+0x542>
 801c164:	ecbd 8b02 	vpop	{d8}
 801c168:	48d9      	ldr	r0, [pc, #868]	; (801c4d0 <__ieee754_powf+0x3a4>)
 801c16a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c16e:	f000 bbc7 	b.w	801c900 <nanf>
 801c172:	f1b8 0f00 	cmp.w	r8, #0
 801c176:	da1d      	bge.n	801c1b4 <__ieee754_powf+0x88>
 801c178:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 801c17c:	da2c      	bge.n	801c1d8 <__ieee754_powf+0xac>
 801c17e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c182:	db30      	blt.n	801c1e6 <__ieee754_powf+0xba>
 801c184:	15fb      	asrs	r3, r7, #23
 801c186:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801c18a:	fa47 f603 	asr.w	r6, r7, r3
 801c18e:	fa06 f303 	lsl.w	r3, r6, r3
 801c192:	42bb      	cmp	r3, r7
 801c194:	d127      	bne.n	801c1e6 <__ieee754_powf+0xba>
 801c196:	f006 0601 	and.w	r6, r6, #1
 801c19a:	f1c6 0602 	rsb	r6, r6, #2
 801c19e:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 801c1a2:	d122      	bne.n	801c1ea <__ieee754_powf+0xbe>
 801c1a4:	2d00      	cmp	r5, #0
 801c1a6:	f280 8268 	bge.w	801c67a <__ieee754_powf+0x54e>
 801c1aa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c1ae:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801c1b2:	e00d      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c1b4:	2600      	movs	r6, #0
 801c1b6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 801c1ba:	d1f0      	bne.n	801c19e <__ieee754_powf+0x72>
 801c1bc:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 801c1c0:	f000 8255 	beq.w	801c66e <__ieee754_powf+0x542>
 801c1c4:	dd0a      	ble.n	801c1dc <__ieee754_powf+0xb0>
 801c1c6:	2d00      	cmp	r5, #0
 801c1c8:	f280 8254 	bge.w	801c674 <__ieee754_powf+0x548>
 801c1cc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 801c4d4 <__ieee754_powf+0x3a8>
 801c1d0:	ecbd 8b02 	vpop	{d8}
 801c1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1d8:	2602      	movs	r6, #2
 801c1da:	e7ec      	b.n	801c1b6 <__ieee754_powf+0x8a>
 801c1dc:	2d00      	cmp	r5, #0
 801c1de:	daf5      	bge.n	801c1cc <__ieee754_powf+0xa0>
 801c1e0:	eeb1 0a68 	vneg.f32	s0, s17
 801c1e4:	e7f4      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c1e6:	2600      	movs	r6, #0
 801c1e8:	e7d9      	b.n	801c19e <__ieee754_powf+0x72>
 801c1ea:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 801c1ee:	d102      	bne.n	801c1f6 <__ieee754_powf+0xca>
 801c1f0:	ee28 0a08 	vmul.f32	s0, s16, s16
 801c1f4:	e7ec      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c1f6:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 801c1fa:	eeb0 0a48 	vmov.f32	s0, s16
 801c1fe:	d108      	bne.n	801c212 <__ieee754_powf+0xe6>
 801c200:	f1b8 0f00 	cmp.w	r8, #0
 801c204:	db05      	blt.n	801c212 <__ieee754_powf+0xe6>
 801c206:	ecbd 8b02 	vpop	{d8}
 801c20a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c20e:	f000 ba4d 	b.w	801c6ac <__ieee754_sqrtf>
 801c212:	f000 fb63 	bl	801c8dc <fabsf>
 801c216:	b124      	cbz	r4, 801c222 <__ieee754_powf+0xf6>
 801c218:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 801c21c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801c220:	d117      	bne.n	801c252 <__ieee754_powf+0x126>
 801c222:	2d00      	cmp	r5, #0
 801c224:	bfbc      	itt	lt
 801c226:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 801c22a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801c22e:	f1b8 0f00 	cmp.w	r8, #0
 801c232:	dacd      	bge.n	801c1d0 <__ieee754_powf+0xa4>
 801c234:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 801c238:	ea54 0306 	orrs.w	r3, r4, r6
 801c23c:	d104      	bne.n	801c248 <__ieee754_powf+0x11c>
 801c23e:	ee70 7a40 	vsub.f32	s15, s0, s0
 801c242:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801c246:	e7c3      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c248:	2e01      	cmp	r6, #1
 801c24a:	d1c1      	bne.n	801c1d0 <__ieee754_powf+0xa4>
 801c24c:	eeb1 0a40 	vneg.f32	s0, s0
 801c250:	e7be      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c252:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 801c256:	3801      	subs	r0, #1
 801c258:	ea56 0300 	orrs.w	r3, r6, r0
 801c25c:	d104      	bne.n	801c268 <__ieee754_powf+0x13c>
 801c25e:	ee38 8a48 	vsub.f32	s16, s16, s16
 801c262:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801c266:	e7b3      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c268:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 801c26c:	dd6d      	ble.n	801c34a <__ieee754_powf+0x21e>
 801c26e:	4b9a      	ldr	r3, [pc, #616]	; (801c4d8 <__ieee754_powf+0x3ac>)
 801c270:	429c      	cmp	r4, r3
 801c272:	dc06      	bgt.n	801c282 <__ieee754_powf+0x156>
 801c274:	2d00      	cmp	r5, #0
 801c276:	daa9      	bge.n	801c1cc <__ieee754_powf+0xa0>
 801c278:	ed9f 0a98 	vldr	s0, [pc, #608]	; 801c4dc <__ieee754_powf+0x3b0>
 801c27c:	ee20 0a00 	vmul.f32	s0, s0, s0
 801c280:	e7a6      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c282:	4b97      	ldr	r3, [pc, #604]	; (801c4e0 <__ieee754_powf+0x3b4>)
 801c284:	429c      	cmp	r4, r3
 801c286:	dd02      	ble.n	801c28e <__ieee754_powf+0x162>
 801c288:	2d00      	cmp	r5, #0
 801c28a:	dcf5      	bgt.n	801c278 <__ieee754_powf+0x14c>
 801c28c:	e79e      	b.n	801c1cc <__ieee754_powf+0xa0>
 801c28e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c292:	ee30 0a67 	vsub.f32	s0, s0, s15
 801c296:	ed9f 7a93 	vldr	s14, [pc, #588]	; 801c4e4 <__ieee754_powf+0x3b8>
 801c29a:	eef1 6a40 	vneg.f32	s13, s0
 801c29e:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801c2a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801c2a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801c2aa:	eee7 7a40 	vfms.f32	s15, s14, s0
 801c2ae:	ee60 0a00 	vmul.f32	s1, s0, s0
 801c2b2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 801c4e8 <__ieee754_powf+0x3bc>
 801c2b6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c2ba:	eddf 7a8c 	vldr	s15, [pc, #560]	; 801c4ec <__ieee754_powf+0x3c0>
 801c2be:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 801c2c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 801c2c6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 801c4f0 <__ieee754_powf+0x3c4>
 801c2ca:	eeb0 6a67 	vmov.f32	s12, s15
 801c2ce:	eea0 6a07 	vfma.f32	s12, s0, s14
 801c2d2:	ee16 3a10 	vmov	r3, s12
 801c2d6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c2da:	f023 030f 	bic.w	r3, r3, #15
 801c2de:	ee00 3a90 	vmov	s1, r3
 801c2e2:	eee6 0a87 	vfma.f32	s1, s13, s14
 801c2e6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801c2ea:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 801c2ee:	f025 050f 	bic.w	r5, r5, #15
 801c2f2:	ee07 5a10 	vmov	s14, r5
 801c2f6:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801c2fa:	ee38 7ac7 	vsub.f32	s14, s17, s14
 801c2fe:	ee07 3a90 	vmov	s15, r3
 801c302:	eee7 0a27 	vfma.f32	s1, s14, s15
 801c306:	3e01      	subs	r6, #1
 801c308:	ea56 0200 	orrs.w	r2, r6, r0
 801c30c:	ee07 5a10 	vmov	s14, r5
 801c310:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c314:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801c318:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801c31c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c320:	ee17 4a10 	vmov	r4, s14
 801c324:	bf08      	it	eq
 801c326:	eeb0 8a40 	vmoveq.f32	s16, s0
 801c32a:	2c00      	cmp	r4, #0
 801c32c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801c330:	f340 8184 	ble.w	801c63c <__ieee754_powf+0x510>
 801c334:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 801c338:	f340 80fc 	ble.w	801c534 <__ieee754_powf+0x408>
 801c33c:	eddf 7a67 	vldr	s15, [pc, #412]	; 801c4dc <__ieee754_powf+0x3b0>
 801c340:	ee28 0a27 	vmul.f32	s0, s16, s15
 801c344:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c348:	e742      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c34a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 801c34e:	bfbf      	itttt	lt
 801c350:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 801c4f4 <__ieee754_powf+0x3c8>
 801c354:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801c358:	f06f 0217 	mvnlt.w	r2, #23
 801c35c:	ee17 4a90 	vmovlt	r4, s15
 801c360:	ea4f 53e4 	mov.w	r3, r4, asr #23
 801c364:	bfa8      	it	ge
 801c366:	2200      	movge	r2, #0
 801c368:	3b7f      	subs	r3, #127	; 0x7f
 801c36a:	4413      	add	r3, r2
 801c36c:	4a62      	ldr	r2, [pc, #392]	; (801c4f8 <__ieee754_powf+0x3cc>)
 801c36e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 801c372:	4294      	cmp	r4, r2
 801c374:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 801c378:	dd06      	ble.n	801c388 <__ieee754_powf+0x25c>
 801c37a:	4a60      	ldr	r2, [pc, #384]	; (801c4fc <__ieee754_powf+0x3d0>)
 801c37c:	4294      	cmp	r4, r2
 801c37e:	f340 80a5 	ble.w	801c4cc <__ieee754_powf+0x3a0>
 801c382:	3301      	adds	r3, #1
 801c384:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 801c388:	2400      	movs	r4, #0
 801c38a:	4a5d      	ldr	r2, [pc, #372]	; (801c500 <__ieee754_powf+0x3d4>)
 801c38c:	00a7      	lsls	r7, r4, #2
 801c38e:	443a      	add	r2, r7
 801c390:	ee07 1a90 	vmov	s15, r1
 801c394:	ed92 7a00 	vldr	s14, [r2]
 801c398:	4a5a      	ldr	r2, [pc, #360]	; (801c504 <__ieee754_powf+0x3d8>)
 801c39a:	ee37 6a27 	vadd.f32	s12, s14, s15
 801c39e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 801c3a2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 801c3a6:	1049      	asrs	r1, r1, #1
 801c3a8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 801c3ac:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 801c3b0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 801c3b4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 801c3b8:	ee06 1a10 	vmov	s12, r1
 801c3bc:	ee65 4aa6 	vmul.f32	s9, s11, s13
 801c3c0:	ee14 ca90 	vmov	ip, s9
 801c3c4:	ea02 0c0c 	and.w	ip, r2, ip
 801c3c8:	ee05 ca10 	vmov	s10, ip
 801c3cc:	eeb1 4a45 	vneg.f32	s8, s10
 801c3d0:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c3d4:	ee36 6a47 	vsub.f32	s12, s12, s14
 801c3d8:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801c508 <__ieee754_powf+0x3dc>
 801c3dc:	ee37 6ac6 	vsub.f32	s12, s15, s12
 801c3e0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 801c3e4:	eee4 5a06 	vfma.f32	s11, s8, s12
 801c3e8:	ee67 3aa7 	vmul.f32	s7, s15, s15
 801c3ec:	ee25 6aa6 	vmul.f32	s12, s11, s13
 801c3f0:	eddf 5a46 	vldr	s11, [pc, #280]	; 801c50c <__ieee754_powf+0x3e0>
 801c3f4:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801c3f8:	eddf 5a45 	vldr	s11, [pc, #276]	; 801c510 <__ieee754_powf+0x3e4>
 801c3fc:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c400:	ed9f 7a38 	vldr	s14, [pc, #224]	; 801c4e4 <__ieee754_powf+0x3b8>
 801c404:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c408:	eddf 5a42 	vldr	s11, [pc, #264]	; 801c514 <__ieee754_powf+0x3e8>
 801c40c:	eee7 5a27 	vfma.f32	s11, s14, s15
 801c410:	ed9f 7a41 	vldr	s14, [pc, #260]	; 801c518 <__ieee754_powf+0x3ec>
 801c414:	ee75 6a24 	vadd.f32	s13, s10, s9
 801c418:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801c41c:	ee66 6a86 	vmul.f32	s13, s13, s12
 801c420:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 801c424:	eef0 7a65 	vmov.f32	s15, s11
 801c428:	eee3 6a87 	vfma.f32	s13, s7, s14
 801c42c:	eee5 7a05 	vfma.f32	s15, s10, s10
 801c430:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c434:	ee17 1a90 	vmov	r1, s15
 801c438:	4011      	ands	r1, r2
 801c43a:	ee07 1a90 	vmov	s15, r1
 801c43e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 801c442:	eddf 5a36 	vldr	s11, [pc, #216]	; 801c51c <__ieee754_powf+0x3f0>
 801c446:	eea4 7a05 	vfma.f32	s14, s8, s10
 801c44a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801c44e:	ee27 7a24 	vmul.f32	s14, s14, s9
 801c452:	eea7 7a86 	vfma.f32	s14, s15, s12
 801c456:	eeb0 6a47 	vmov.f32	s12, s14
 801c45a:	eea5 6a27 	vfma.f32	s12, s10, s15
 801c45e:	ee16 1a10 	vmov	r1, s12
 801c462:	4011      	ands	r1, r2
 801c464:	ee06 1a90 	vmov	s13, r1
 801c468:	eee4 6a27 	vfma.f32	s13, s8, s15
 801c46c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 801c520 <__ieee754_powf+0x3f4>
 801c470:	ee37 7a66 	vsub.f32	s14, s14, s13
 801c474:	ee06 1a10 	vmov	s12, r1
 801c478:	ee27 7a27 	vmul.f32	s14, s14, s15
 801c47c:	eddf 7a29 	vldr	s15, [pc, #164]	; 801c524 <__ieee754_powf+0x3f8>
 801c480:	4929      	ldr	r1, [pc, #164]	; (801c528 <__ieee754_powf+0x3fc>)
 801c482:	eea6 7a27 	vfma.f32	s14, s12, s15
 801c486:	4439      	add	r1, r7
 801c488:	edd1 7a00 	vldr	s15, [r1]
 801c48c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801c490:	ee07 3a90 	vmov	s15, r3
 801c494:	eef0 0a47 	vmov.f32	s1, s14
 801c498:	4b24      	ldr	r3, [pc, #144]	; (801c52c <__ieee754_powf+0x400>)
 801c49a:	eee6 0a25 	vfma.f32	s1, s12, s11
 801c49e:	443b      	add	r3, r7
 801c4a0:	ed93 5a00 	vldr	s10, [r3]
 801c4a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801c4a8:	ee70 0a85 	vadd.f32	s1, s1, s10
 801c4ac:	ee70 7aa6 	vadd.f32	s15, s1, s13
 801c4b0:	ee17 3a90 	vmov	r3, s15
 801c4b4:	4013      	ands	r3, r2
 801c4b6:	ee07 3a90 	vmov	s15, r3
 801c4ba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c4be:	ee77 7ac5 	vsub.f32	s15, s15, s10
 801c4c2:	eee6 7a65 	vfms.f32	s15, s12, s11
 801c4c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c4ca:	e70e      	b.n	801c2ea <__ieee754_powf+0x1be>
 801c4cc:	2401      	movs	r4, #1
 801c4ce:	e75c      	b.n	801c38a <__ieee754_powf+0x25e>
 801c4d0:	0801d7cd 	.word	0x0801d7cd
 801c4d4:	00000000 	.word	0x00000000
 801c4d8:	3f7ffff7 	.word	0x3f7ffff7
 801c4dc:	7149f2ca 	.word	0x7149f2ca
 801c4e0:	3f800007 	.word	0x3f800007
 801c4e4:	3eaaaaab 	.word	0x3eaaaaab
 801c4e8:	36eca570 	.word	0x36eca570
 801c4ec:	3fb8aa3b 	.word	0x3fb8aa3b
 801c4f0:	3fb8aa00 	.word	0x3fb8aa00
 801c4f4:	4b800000 	.word	0x4b800000
 801c4f8:	001cc471 	.word	0x001cc471
 801c4fc:	005db3d6 	.word	0x005db3d6
 801c500:	0801d8a0 	.word	0x0801d8a0
 801c504:	fffff000 	.word	0xfffff000
 801c508:	3e6c3255 	.word	0x3e6c3255
 801c50c:	3e53f142 	.word	0x3e53f142
 801c510:	3e8ba305 	.word	0x3e8ba305
 801c514:	3edb6db7 	.word	0x3edb6db7
 801c518:	3f19999a 	.word	0x3f19999a
 801c51c:	3f763800 	.word	0x3f763800
 801c520:	3f76384f 	.word	0x3f76384f
 801c524:	369dc3a0 	.word	0x369dc3a0
 801c528:	0801d8b0 	.word	0x0801d8b0
 801c52c:	0801d8a8 	.word	0x0801d8a8
 801c530:	3338aa3c 	.word	0x3338aa3c
 801c534:	f040 8092 	bne.w	801c65c <__ieee754_powf+0x530>
 801c538:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 801c530 <__ieee754_powf+0x404>
 801c53c:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c540:	ee70 6aa6 	vadd.f32	s13, s1, s13
 801c544:	eef4 6ac7 	vcmpe.f32	s13, s14
 801c548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c54c:	f73f aef6 	bgt.w	801c33c <__ieee754_powf+0x210>
 801c550:	15db      	asrs	r3, r3, #23
 801c552:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 801c556:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 801c55a:	4103      	asrs	r3, r0
 801c55c:	4423      	add	r3, r4
 801c55e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801c562:	4947      	ldr	r1, [pc, #284]	; (801c680 <__ieee754_powf+0x554>)
 801c564:	3a7f      	subs	r2, #127	; 0x7f
 801c566:	4111      	asrs	r1, r2
 801c568:	ea23 0101 	bic.w	r1, r3, r1
 801c56c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801c570:	ee07 1a10 	vmov	s14, r1
 801c574:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801c578:	f1c2 0217 	rsb	r2, r2, #23
 801c57c:	4110      	asrs	r0, r2
 801c57e:	2c00      	cmp	r4, #0
 801c580:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801c584:	bfb8      	it	lt
 801c586:	4240      	neglt	r0, r0
 801c588:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801c58c:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801c684 <__ieee754_powf+0x558>
 801c590:	ee17 3a10 	vmov	r3, s14
 801c594:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 801c598:	f023 030f 	bic.w	r3, r3, #15
 801c59c:	ee07 3a10 	vmov	s14, r3
 801c5a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c5a4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801c5a8:	eddf 7a37 	vldr	s15, [pc, #220]	; 801c688 <__ieee754_powf+0x55c>
 801c5ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c5b0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 801c5b4:	eddf 6a35 	vldr	s13, [pc, #212]	; 801c68c <__ieee754_powf+0x560>
 801c5b8:	eeb0 0a67 	vmov.f32	s0, s15
 801c5bc:	eea7 0a26 	vfma.f32	s0, s14, s13
 801c5c0:	eeb0 6a40 	vmov.f32	s12, s0
 801c5c4:	eea7 6a66 	vfms.f32	s12, s14, s13
 801c5c8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801c5cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801c5d0:	eddf 6a2f 	vldr	s13, [pc, #188]	; 801c690 <__ieee754_powf+0x564>
 801c5d4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 801c694 <__ieee754_powf+0x568>
 801c5d8:	eea7 6a26 	vfma.f32	s12, s14, s13
 801c5dc:	eddf 6a2e 	vldr	s13, [pc, #184]	; 801c698 <__ieee754_powf+0x56c>
 801c5e0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c5e4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 801c69c <__ieee754_powf+0x570>
 801c5e8:	eea6 6a87 	vfma.f32	s12, s13, s14
 801c5ec:	eddf 6a2c 	vldr	s13, [pc, #176]	; 801c6a0 <__ieee754_powf+0x574>
 801c5f0:	eee6 6a07 	vfma.f32	s13, s12, s14
 801c5f4:	eeb0 6a40 	vmov.f32	s12, s0
 801c5f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 801c5fc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 801c600:	eeb0 7a46 	vmov.f32	s14, s12
 801c604:	ee77 6a66 	vsub.f32	s13, s14, s13
 801c608:	ee20 6a06 	vmul.f32	s12, s0, s12
 801c60c:	eee0 7a27 	vfma.f32	s15, s0, s15
 801c610:	ee86 7a26 	vdiv.f32	s14, s12, s13
 801c614:	ee77 7a67 	vsub.f32	s15, s14, s15
 801c618:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c61c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c620:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801c624:	ee10 3a10 	vmov	r3, s0
 801c628:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801c62c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c630:	da1a      	bge.n	801c668 <__ieee754_powf+0x53c>
 801c632:	f000 f9c5 	bl	801c9c0 <scalbnf>
 801c636:	ee20 0a08 	vmul.f32	s0, s0, s16
 801c63a:	e5c9      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c63c:	4a19      	ldr	r2, [pc, #100]	; (801c6a4 <__ieee754_powf+0x578>)
 801c63e:	4293      	cmp	r3, r2
 801c640:	dd02      	ble.n	801c648 <__ieee754_powf+0x51c>
 801c642:	eddf 7a19 	vldr	s15, [pc, #100]	; 801c6a8 <__ieee754_powf+0x57c>
 801c646:	e67b      	b.n	801c340 <__ieee754_powf+0x214>
 801c648:	d108      	bne.n	801c65c <__ieee754_powf+0x530>
 801c64a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801c64e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 801c652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c656:	f6ff af7b 	blt.w	801c550 <__ieee754_powf+0x424>
 801c65a:	e7f2      	b.n	801c642 <__ieee754_powf+0x516>
 801c65c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 801c660:	f73f af76 	bgt.w	801c550 <__ieee754_powf+0x424>
 801c664:	2000      	movs	r0, #0
 801c666:	e78f      	b.n	801c588 <__ieee754_powf+0x45c>
 801c668:	ee00 3a10 	vmov	s0, r3
 801c66c:	e7e3      	b.n	801c636 <__ieee754_powf+0x50a>
 801c66e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801c672:	e5ad      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c674:	eeb0 0a68 	vmov.f32	s0, s17
 801c678:	e5aa      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c67a:	eeb0 0a48 	vmov.f32	s0, s16
 801c67e:	e5a7      	b.n	801c1d0 <__ieee754_powf+0xa4>
 801c680:	007fffff 	.word	0x007fffff
 801c684:	3f317218 	.word	0x3f317218
 801c688:	35bfbe8c 	.word	0x35bfbe8c
 801c68c:	3f317200 	.word	0x3f317200
 801c690:	3331bb4c 	.word	0x3331bb4c
 801c694:	b5ddea0e 	.word	0xb5ddea0e
 801c698:	388ab355 	.word	0x388ab355
 801c69c:	bb360b61 	.word	0xbb360b61
 801c6a0:	3e2aaaab 	.word	0x3e2aaaab
 801c6a4:	43160000 	.word	0x43160000
 801c6a8:	0da24260 	.word	0x0da24260

0801c6ac <__ieee754_sqrtf>:
 801c6ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801c6b0:	4770      	bx	lr

0801c6b2 <fabs>:
 801c6b2:	ec51 0b10 	vmov	r0, r1, d0
 801c6b6:	ee10 2a10 	vmov	r2, s0
 801c6ba:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c6be:	ec43 2b10 	vmov	d0, r2, r3
 801c6c2:	4770      	bx	lr

0801c6c4 <finite>:
 801c6c4:	ee10 3a90 	vmov	r3, s1
 801c6c8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801c6cc:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801c6d0:	0fc0      	lsrs	r0, r0, #31
 801c6d2:	4770      	bx	lr

0801c6d4 <matherr>:
 801c6d4:	2000      	movs	r0, #0
 801c6d6:	4770      	bx	lr

0801c6d8 <nan>:
 801c6d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801c6e0 <nan+0x8>
 801c6dc:	4770      	bx	lr
 801c6de:	bf00      	nop
 801c6e0:	00000000 	.word	0x00000000
 801c6e4:	7ff80000 	.word	0x7ff80000

0801c6e8 <rint>:
 801c6e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c6ea:	ec51 0b10 	vmov	r0, r1, d0
 801c6ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c6f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801c6f6:	2e13      	cmp	r6, #19
 801c6f8:	460b      	mov	r3, r1
 801c6fa:	ee10 4a10 	vmov	r4, s0
 801c6fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801c702:	dc56      	bgt.n	801c7b2 <rint+0xca>
 801c704:	2e00      	cmp	r6, #0
 801c706:	da2b      	bge.n	801c760 <rint+0x78>
 801c708:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801c70c:	4302      	orrs	r2, r0
 801c70e:	d023      	beq.n	801c758 <rint+0x70>
 801c710:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801c714:	4302      	orrs	r2, r0
 801c716:	4254      	negs	r4, r2
 801c718:	4314      	orrs	r4, r2
 801c71a:	0c4b      	lsrs	r3, r1, #17
 801c71c:	0b24      	lsrs	r4, r4, #12
 801c71e:	045b      	lsls	r3, r3, #17
 801c720:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801c724:	ea44 0103 	orr.w	r1, r4, r3
 801c728:	460b      	mov	r3, r1
 801c72a:	492f      	ldr	r1, [pc, #188]	; (801c7e8 <rint+0x100>)
 801c72c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 801c730:	e9d1 6700 	ldrd	r6, r7, [r1]
 801c734:	4602      	mov	r2, r0
 801c736:	4639      	mov	r1, r7
 801c738:	4630      	mov	r0, r6
 801c73a:	f7e3 fdc7 	bl	80002cc <__adddf3>
 801c73e:	e9cd 0100 	strd	r0, r1, [sp]
 801c742:	463b      	mov	r3, r7
 801c744:	4632      	mov	r2, r6
 801c746:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c74a:	f7e3 fdbd 	bl	80002c8 <__aeabi_dsub>
 801c74e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c752:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801c756:	4639      	mov	r1, r7
 801c758:	ec41 0b10 	vmov	d0, r0, r1
 801c75c:	b003      	add	sp, #12
 801c75e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c760:	4a22      	ldr	r2, [pc, #136]	; (801c7ec <rint+0x104>)
 801c762:	4132      	asrs	r2, r6
 801c764:	ea01 0702 	and.w	r7, r1, r2
 801c768:	4307      	orrs	r7, r0
 801c76a:	d0f5      	beq.n	801c758 <rint+0x70>
 801c76c:	0852      	lsrs	r2, r2, #1
 801c76e:	4011      	ands	r1, r2
 801c770:	430c      	orrs	r4, r1
 801c772:	d00b      	beq.n	801c78c <rint+0xa4>
 801c774:	ea23 0202 	bic.w	r2, r3, r2
 801c778:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801c77c:	2e13      	cmp	r6, #19
 801c77e:	fa43 f306 	asr.w	r3, r3, r6
 801c782:	bf0c      	ite	eq
 801c784:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801c788:	2400      	movne	r4, #0
 801c78a:	4313      	orrs	r3, r2
 801c78c:	4916      	ldr	r1, [pc, #88]	; (801c7e8 <rint+0x100>)
 801c78e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801c792:	4622      	mov	r2, r4
 801c794:	e9d5 4500 	ldrd	r4, r5, [r5]
 801c798:	4620      	mov	r0, r4
 801c79a:	4629      	mov	r1, r5
 801c79c:	f7e3 fd96 	bl	80002cc <__adddf3>
 801c7a0:	e9cd 0100 	strd	r0, r1, [sp]
 801c7a4:	4622      	mov	r2, r4
 801c7a6:	462b      	mov	r3, r5
 801c7a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 801c7ac:	f7e3 fd8c 	bl	80002c8 <__aeabi_dsub>
 801c7b0:	e7d2      	b.n	801c758 <rint+0x70>
 801c7b2:	2e33      	cmp	r6, #51	; 0x33
 801c7b4:	dd07      	ble.n	801c7c6 <rint+0xde>
 801c7b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801c7ba:	d1cd      	bne.n	801c758 <rint+0x70>
 801c7bc:	ee10 2a10 	vmov	r2, s0
 801c7c0:	f7e3 fd84 	bl	80002cc <__adddf3>
 801c7c4:	e7c8      	b.n	801c758 <rint+0x70>
 801c7c6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 801c7ca:	f04f 32ff 	mov.w	r2, #4294967295
 801c7ce:	40f2      	lsrs	r2, r6
 801c7d0:	4210      	tst	r0, r2
 801c7d2:	d0c1      	beq.n	801c758 <rint+0x70>
 801c7d4:	0852      	lsrs	r2, r2, #1
 801c7d6:	4210      	tst	r0, r2
 801c7d8:	bf1f      	itttt	ne
 801c7da:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801c7de:	ea20 0202 	bicne.w	r2, r0, r2
 801c7e2:	4134      	asrne	r4, r6
 801c7e4:	4314      	orrne	r4, r2
 801c7e6:	e7d1      	b.n	801c78c <rint+0xa4>
 801c7e8:	0801d8b8 	.word	0x0801d8b8
 801c7ec:	000fffff 	.word	0x000fffff

0801c7f0 <scalbn>:
 801c7f0:	b570      	push	{r4, r5, r6, lr}
 801c7f2:	ec55 4b10 	vmov	r4, r5, d0
 801c7f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801c7fa:	4606      	mov	r6, r0
 801c7fc:	462b      	mov	r3, r5
 801c7fe:	b9aa      	cbnz	r2, 801c82c <scalbn+0x3c>
 801c800:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801c804:	4323      	orrs	r3, r4
 801c806:	d03b      	beq.n	801c880 <scalbn+0x90>
 801c808:	4b31      	ldr	r3, [pc, #196]	; (801c8d0 <scalbn+0xe0>)
 801c80a:	4629      	mov	r1, r5
 801c80c:	2200      	movs	r2, #0
 801c80e:	ee10 0a10 	vmov	r0, s0
 801c812:	f7e3 ff11 	bl	8000638 <__aeabi_dmul>
 801c816:	4b2f      	ldr	r3, [pc, #188]	; (801c8d4 <scalbn+0xe4>)
 801c818:	429e      	cmp	r6, r3
 801c81a:	4604      	mov	r4, r0
 801c81c:	460d      	mov	r5, r1
 801c81e:	da12      	bge.n	801c846 <scalbn+0x56>
 801c820:	a327      	add	r3, pc, #156	; (adr r3, 801c8c0 <scalbn+0xd0>)
 801c822:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c826:	f7e3 ff07 	bl	8000638 <__aeabi_dmul>
 801c82a:	e009      	b.n	801c840 <scalbn+0x50>
 801c82c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801c830:	428a      	cmp	r2, r1
 801c832:	d10c      	bne.n	801c84e <scalbn+0x5e>
 801c834:	ee10 2a10 	vmov	r2, s0
 801c838:	4620      	mov	r0, r4
 801c83a:	4629      	mov	r1, r5
 801c83c:	f7e3 fd46 	bl	80002cc <__adddf3>
 801c840:	4604      	mov	r4, r0
 801c842:	460d      	mov	r5, r1
 801c844:	e01c      	b.n	801c880 <scalbn+0x90>
 801c846:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801c84a:	460b      	mov	r3, r1
 801c84c:	3a36      	subs	r2, #54	; 0x36
 801c84e:	4432      	add	r2, r6
 801c850:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801c854:	428a      	cmp	r2, r1
 801c856:	dd0b      	ble.n	801c870 <scalbn+0x80>
 801c858:	ec45 4b11 	vmov	d1, r4, r5
 801c85c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801c8c8 <scalbn+0xd8>
 801c860:	f000 f90e 	bl	801ca80 <copysign>
 801c864:	a318      	add	r3, pc, #96	; (adr r3, 801c8c8 <scalbn+0xd8>)
 801c866:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c86a:	ec51 0b10 	vmov	r0, r1, d0
 801c86e:	e7da      	b.n	801c826 <scalbn+0x36>
 801c870:	2a00      	cmp	r2, #0
 801c872:	dd08      	ble.n	801c886 <scalbn+0x96>
 801c874:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c878:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c87c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c880:	ec45 4b10 	vmov	d0, r4, r5
 801c884:	bd70      	pop	{r4, r5, r6, pc}
 801c886:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801c88a:	da0d      	bge.n	801c8a8 <scalbn+0xb8>
 801c88c:	f24c 3350 	movw	r3, #50000	; 0xc350
 801c890:	429e      	cmp	r6, r3
 801c892:	ec45 4b11 	vmov	d1, r4, r5
 801c896:	dce1      	bgt.n	801c85c <scalbn+0x6c>
 801c898:	ed9f 0b09 	vldr	d0, [pc, #36]	; 801c8c0 <scalbn+0xd0>
 801c89c:	f000 f8f0 	bl	801ca80 <copysign>
 801c8a0:	a307      	add	r3, pc, #28	; (adr r3, 801c8c0 <scalbn+0xd0>)
 801c8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8a6:	e7e0      	b.n	801c86a <scalbn+0x7a>
 801c8a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801c8ac:	3236      	adds	r2, #54	; 0x36
 801c8ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801c8b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801c8b6:	4620      	mov	r0, r4
 801c8b8:	4629      	mov	r1, r5
 801c8ba:	2200      	movs	r2, #0
 801c8bc:	4b06      	ldr	r3, [pc, #24]	; (801c8d8 <scalbn+0xe8>)
 801c8be:	e7b2      	b.n	801c826 <scalbn+0x36>
 801c8c0:	c2f8f359 	.word	0xc2f8f359
 801c8c4:	01a56e1f 	.word	0x01a56e1f
 801c8c8:	8800759c 	.word	0x8800759c
 801c8cc:	7e37e43c 	.word	0x7e37e43c
 801c8d0:	43500000 	.word	0x43500000
 801c8d4:	ffff3cb0 	.word	0xffff3cb0
 801c8d8:	3c900000 	.word	0x3c900000

0801c8dc <fabsf>:
 801c8dc:	ee10 3a10 	vmov	r3, s0
 801c8e0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c8e4:	ee00 3a10 	vmov	s0, r3
 801c8e8:	4770      	bx	lr

0801c8ea <finitef>:
 801c8ea:	ee10 3a10 	vmov	r3, s0
 801c8ee:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 801c8f2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801c8f6:	bfac      	ite	ge
 801c8f8:	2000      	movge	r0, #0
 801c8fa:	2001      	movlt	r0, #1
 801c8fc:	4770      	bx	lr
	...

0801c900 <nanf>:
 801c900:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801c908 <nanf+0x8>
 801c904:	4770      	bx	lr
 801c906:	bf00      	nop
 801c908:	7fc00000 	.word	0x7fc00000

0801c90c <rintf>:
 801c90c:	b513      	push	{r0, r1, r4, lr}
 801c90e:	ee10 1a10 	vmov	r1, s0
 801c912:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801c916:	0ddc      	lsrs	r4, r3, #23
 801c918:	3c7f      	subs	r4, #127	; 0x7f
 801c91a:	2c16      	cmp	r4, #22
 801c91c:	dc46      	bgt.n	801c9ac <rintf+0xa0>
 801c91e:	b32b      	cbz	r3, 801c96c <rintf+0x60>
 801c920:	2c00      	cmp	r4, #0
 801c922:	ee10 2a10 	vmov	r2, s0
 801c926:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 801c92a:	da21      	bge.n	801c970 <rintf+0x64>
 801c92c:	f3c1 0316 	ubfx	r3, r1, #0, #23
 801c930:	425b      	negs	r3, r3
 801c932:	4a21      	ldr	r2, [pc, #132]	; (801c9b8 <rintf+0xac>)
 801c934:	0a5b      	lsrs	r3, r3, #9
 801c936:	0d09      	lsrs	r1, r1, #20
 801c938:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801c93c:	0509      	lsls	r1, r1, #20
 801c93e:	430b      	orrs	r3, r1
 801c940:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 801c944:	ee07 3a90 	vmov	s15, r3
 801c948:	edd2 6a00 	vldr	s13, [r2]
 801c94c:	ee36 7aa7 	vadd.f32	s14, s13, s15
 801c950:	ed8d 7a01 	vstr	s14, [sp, #4]
 801c954:	eddd 7a01 	vldr	s15, [sp, #4]
 801c958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801c95c:	ee17 3a90 	vmov	r3, s15
 801c960:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801c964:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 801c968:	ee00 3a10 	vmov	s0, r3
 801c96c:	b002      	add	sp, #8
 801c96e:	bd10      	pop	{r4, pc}
 801c970:	4b12      	ldr	r3, [pc, #72]	; (801c9bc <rintf+0xb0>)
 801c972:	4123      	asrs	r3, r4
 801c974:	4219      	tst	r1, r3
 801c976:	d0f9      	beq.n	801c96c <rintf+0x60>
 801c978:	085b      	lsrs	r3, r3, #1
 801c97a:	4219      	tst	r1, r3
 801c97c:	d006      	beq.n	801c98c <rintf+0x80>
 801c97e:	ea21 0203 	bic.w	r2, r1, r3
 801c982:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801c986:	fa43 f404 	asr.w	r4, r3, r4
 801c98a:	4322      	orrs	r2, r4
 801c98c:	4b0a      	ldr	r3, [pc, #40]	; (801c9b8 <rintf+0xac>)
 801c98e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 801c992:	ed90 7a00 	vldr	s14, [r0]
 801c996:	ee07 2a90 	vmov	s15, r2
 801c99a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801c99e:	edcd 7a01 	vstr	s15, [sp, #4]
 801c9a2:	ed9d 0a01 	vldr	s0, [sp, #4]
 801c9a6:	ee30 0a47 	vsub.f32	s0, s0, s14
 801c9aa:	e7df      	b.n	801c96c <rintf+0x60>
 801c9ac:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c9b0:	d3dc      	bcc.n	801c96c <rintf+0x60>
 801c9b2:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c9b6:	e7d9      	b.n	801c96c <rintf+0x60>
 801c9b8:	0801d8c8 	.word	0x0801d8c8
 801c9bc:	007fffff 	.word	0x007fffff

0801c9c0 <scalbnf>:
 801c9c0:	b508      	push	{r3, lr}
 801c9c2:	ee10 2a10 	vmov	r2, s0
 801c9c6:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801c9ca:	ed2d 8b02 	vpush	{d8}
 801c9ce:	eef0 0a40 	vmov.f32	s1, s0
 801c9d2:	d004      	beq.n	801c9de <scalbnf+0x1e>
 801c9d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801c9d8:	d306      	bcc.n	801c9e8 <scalbnf+0x28>
 801c9da:	ee70 0a00 	vadd.f32	s1, s0, s0
 801c9de:	ecbd 8b02 	vpop	{d8}
 801c9e2:	eeb0 0a60 	vmov.f32	s0, s1
 801c9e6:	bd08      	pop	{r3, pc}
 801c9e8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801c9ec:	d21c      	bcs.n	801ca28 <scalbnf+0x68>
 801c9ee:	4b1f      	ldr	r3, [pc, #124]	; (801ca6c <scalbnf+0xac>)
 801c9f0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801ca70 <scalbnf+0xb0>
 801c9f4:	4298      	cmp	r0, r3
 801c9f6:	ee60 0a27 	vmul.f32	s1, s0, s15
 801c9fa:	db10      	blt.n	801ca1e <scalbnf+0x5e>
 801c9fc:	ee10 2a90 	vmov	r2, s1
 801ca00:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 801ca04:	3b19      	subs	r3, #25
 801ca06:	4403      	add	r3, r0
 801ca08:	2bfe      	cmp	r3, #254	; 0xfe
 801ca0a:	dd0f      	ble.n	801ca2c <scalbnf+0x6c>
 801ca0c:	ed9f 8a19 	vldr	s16, [pc, #100]	; 801ca74 <scalbnf+0xb4>
 801ca10:	eeb0 0a48 	vmov.f32	s0, s16
 801ca14:	f000 f843 	bl	801ca9e <copysignf>
 801ca18:	ee60 0a08 	vmul.f32	s1, s0, s16
 801ca1c:	e7df      	b.n	801c9de <scalbnf+0x1e>
 801ca1e:	eddf 7a16 	vldr	s15, [pc, #88]	; 801ca78 <scalbnf+0xb8>
 801ca22:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801ca26:	e7da      	b.n	801c9de <scalbnf+0x1e>
 801ca28:	0ddb      	lsrs	r3, r3, #23
 801ca2a:	e7ec      	b.n	801ca06 <scalbnf+0x46>
 801ca2c:	2b00      	cmp	r3, #0
 801ca2e:	dd06      	ble.n	801ca3e <scalbnf+0x7e>
 801ca30:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801ca34:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801ca38:	ee00 3a90 	vmov	s1, r3
 801ca3c:	e7cf      	b.n	801c9de <scalbnf+0x1e>
 801ca3e:	f113 0f16 	cmn.w	r3, #22
 801ca42:	da06      	bge.n	801ca52 <scalbnf+0x92>
 801ca44:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ca48:	4298      	cmp	r0, r3
 801ca4a:	dcdf      	bgt.n	801ca0c <scalbnf+0x4c>
 801ca4c:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 801ca78 <scalbnf+0xb8>
 801ca50:	e7de      	b.n	801ca10 <scalbnf+0x50>
 801ca52:	3319      	adds	r3, #25
 801ca54:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 801ca58:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 801ca5c:	eddf 7a07 	vldr	s15, [pc, #28]	; 801ca7c <scalbnf+0xbc>
 801ca60:	ee07 3a10 	vmov	s14, r3
 801ca64:	ee67 0a27 	vmul.f32	s1, s14, s15
 801ca68:	e7b9      	b.n	801c9de <scalbnf+0x1e>
 801ca6a:	bf00      	nop
 801ca6c:	ffff3cb0 	.word	0xffff3cb0
 801ca70:	4c000000 	.word	0x4c000000
 801ca74:	7149f2ca 	.word	0x7149f2ca
 801ca78:	0da24260 	.word	0x0da24260
 801ca7c:	33000000 	.word	0x33000000

0801ca80 <copysign>:
 801ca80:	ec51 0b10 	vmov	r0, r1, d0
 801ca84:	ee11 0a90 	vmov	r0, s3
 801ca88:	ee10 2a10 	vmov	r2, s0
 801ca8c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ca90:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801ca94:	ea41 0300 	orr.w	r3, r1, r0
 801ca98:	ec43 2b10 	vmov	d0, r2, r3
 801ca9c:	4770      	bx	lr

0801ca9e <copysignf>:
 801ca9e:	ee10 3a10 	vmov	r3, s0
 801caa2:	ee10 2a90 	vmov	r2, s1
 801caa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801caaa:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 801caae:	4313      	orrs	r3, r2
 801cab0:	ee00 3a10 	vmov	s0, r3
 801cab4:	4770      	bx	lr
	...

0801cab8 <_init>:
 801cab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801caba:	bf00      	nop
 801cabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801cabe:	bc08      	pop	{r3}
 801cac0:	469e      	mov	lr, r3
 801cac2:	4770      	bx	lr

0801cac4 <_fini>:
 801cac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cac6:	bf00      	nop
 801cac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801caca:	bc08      	pop	{r3}
 801cacc:	469e      	mov	lr, r3
 801cace:	4770      	bx	lr
